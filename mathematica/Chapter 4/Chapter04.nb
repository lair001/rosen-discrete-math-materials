(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    430059,      11396]
NotebookOptionsPosition[    325299,       9628]
NotebookOutlinePosition[    350189,      10131]
CellTagsIndexPosition[    349119,      10094]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Number Theory and Cryptography", "BookChapterTitle",
 CounterAssignments->{{
   "ChapterNumber", 
    4}},ExpressionUUID->"a8aad678-2ac1-4bbd-b34f-f3fd4d38c1f5"],

Cell[CellGroupData[{

Cell["Introduction", "Section",ExpressionUUID->"214b2fc6-802f-4184-9fe4-48cffcb8dc04"],

Cell[TextData[{
 "The Wolfram Language includes numerous functions for exploring number \
theory. In this chapter, we will see how to use ",
 StyleBox["Mathematica\[CloseCurlyQuote]",
  FontSlant->"Italic"],
 "s computational abilities to compute and solve congruences, represent \
integers in bases other than 10, explore arithmetic algorithms in those \
bases, check whether or not a number is prime, and compute discrete \
logarithms. We will also see how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can help explore several of the applications described in the textbook, in \
particular, hashing functions, pseudorandom numbers, check digits, and, of \
course, cryptography. "
}], "Text",ExpressionUUID->"a540b9e8-3e8e-4361-ae88-880eea478ac2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["4.1 Divisibility and Modular Arithmetic", "Section",
 CellTags->"Section1",ExpressionUUID->"45e39210-ea7d-432d-add2-609c9094feda"],

Cell[TextData[{
 "In this section, we will use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to explore divisibility of integers and modular arithmetic. We will see \
how to compute quotients and remainders in integer division, how to test \
integers for the divisibility relationship, and how to perform computations \
in modular arithmetic. This section will conclude with an illustration of how \
to create infix addition and multiplication operators for modular arithmetic \
and a demonstration of how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can be used to compute addition and multiplication tables. "
}], "Text",ExpressionUUID->"f31c8533-0bcd-4bed-9c49-4cadac6bc49c"],

Cell[CellGroupData[{

Cell["Quotient, Remainder, and Divisibility", "Subsection",
 CellTags->"Section1a",ExpressionUUID->"7b34ef8e-6a1b-4a67-9c39-d2b95b64c645"],

Cell[TextData[{
 "The Wolfram Language functions ",
 StyleBox[ButtonBox["Quotient",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Quotient"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Mod",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Mod"], "FunctionLink"],
 " compute the quotient and remainder, respectively, obtained from dividing \
two integers. For example, consider 99 divided by 13."
}], "Text",ExpressionUUID->"f47ef26b-be9a-4153-a6ed-23804f2d5c55"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Quotient", "[", 
  RowBox[{"99", ",", "13"}], "]"}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"52e8da38-910e-4874-bd3a-60e2ea69fbdc"],

Cell[BoxData["7"], "Output",
 CellLabel->"Out[1]=",ExpressionUUID->"5e01baa7-4432-497c-8c9f-2cadabdd6a07"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mod", "[", 
  RowBox[{"99", ",", "13"}], "]"}]], "Input",
 CellLabel->"In[2]:=",ExpressionUUID->"6ed57ab6-ab25-41d6-b670-0be7dceb1bb8"],

Cell[BoxData["8"], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"97568124-0ccc-49f0-92ee-4460e80e3991"]
}, Open  ]],

Cell[TextData[{
 "These results indicate that 99 divided by 13 results in a quotient of 7 and \
a remainder of 8. That is, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"99", "=", 
    RowBox[{
     RowBox[{"13", "\[CenterDot]", "7"}], "+", "8"}]}], TraditionalForm]],
  ExpressionUUID->"aee3f562-f7d5-4051-813f-ea3fe6b30f1b"],
 "."
}], "Text",ExpressionUUID->"5f57b59d-e157-4fcf-89c6-237685d87a3b"],

Cell[TextData[{
 "Note that the textbook uses the notation ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", " ", "mod", " ", "m"}], TraditionalForm]],ExpressionUUID->
  "3ce0f026-02e0-4a3e-9937-24a5b8224a06"],
 " to represent the remainder when ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "94ac2e0e-443c-4070-b9ab-df364162c744"],
 " is divided by ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "d0151241-ae95-429d-b12d-097e8e502379"],
 ", using ",
 Cell[BoxData[
  FormBox["mod", TraditionalForm]],ExpressionUUID->
  "99425082-a1d1-495e-adb0-eaac09a21d6e"],
 " like an operator. To enter this in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", you must use the functional notation ",
 Cell[BoxData[
  RowBox[{"Mod", "[", 
   StyleBox["a", "CodeVar"], ",", 
   StyleBox["m", "CodeVar"], "]"}]], "myCode",ExpressionUUID->
  "79a75f77-7186-4fc4-a73d-e1cd83a223cc"],
 "."
}], "Text",ExpressionUUID->"1eb8b8a8-9bac-47be-84be-77b9ba480449"],

Cell[TextData[{
 "Another function, ",
 StyleBox[ButtonBox["QuotientRemainder",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/QuotientRemainder"], "FunctionLink"],
 ", produces a list with first element the quotient and second element the \
remainder."
}], "Text",ExpressionUUID->"45127d49-c2bf-4c04-8908-7195cb080a7f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuotientRemainder", "[", 
  RowBox[{"99", ",", "13"}], "]"}]], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"08b20eb6-752d-4d95-854a-521a876dd3f6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", "8"}], "}"}]], "Output",
 CellLabel->"Out[3]=",ExpressionUUID->"da7f5c49-53f6-419c-bbe5-6f2c9089ddd7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Checking Divisibility", "Subsubsection",ExpressionUUID->"9b06a469-7641-4ba6-8d19-c143272a2382"],

Cell[TextData[{
 "To test whether one integer divides another, you can, of course, check to \
see if the remainder is 0 or not. For example, the following shows that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"3", "|", "132"}], TraditionalForm]],ExpressionUUID->
  "fce5a32f-e121-46f4-84d3-f31ad9173923"],
 "."
}], "Text",ExpressionUUID->"12d5a003-14e8-4619-bc83-e31b05bfd9b7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mod", "[", 
  RowBox[{"132", ",", "3"}], "]"}]], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"563ab766-7a13-4245-b81e-9f856731d4d3"],

Cell[BoxData["0"], "Output",
 CellLabel->"Out[4]=",ExpressionUUID->"3f859e44-b5b7-4ebd-afc8-a273c5de9eea"]
}, Open  ]],

Cell[TextData[{
 "The Wolfram Language also provides the function ",
 StyleBox[ButtonBox["Divisible",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Divisible"], "FunctionLink"],
 " for testing divisibility. The ",
 StyleBox[ButtonBox["Divisible",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Divisible"], "FunctionLink"],
 " function returns true if its first argument is divisible by the second."
}], "Text",ExpressionUUID->"559d7190-1c8b-4fbe-8271-09016363017a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Divisible", "[", 
  RowBox[{"132", ",", "3"}], "]"}]], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"0ad2b623-94aa-4baf-8c28-f7b0d9913ed1"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[5]=",ExpressionUUID->"7ffb5a3d-7447-4959-9c1f-effce4233e5e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Divisible", "[", 
  RowBox[{"99", ",", "13"}], "]"}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"2d0d5112-a496-4af7-a42d-3638d15fe197"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[6]=",ExpressionUUID->"b8508d1e-23b3-40ed-8495-6a107e0bde09"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Offset", "Subsubsection",ExpressionUUID->"b0a62a66-d9ed-4907-a770-1d92cc722d1f"],

Cell[TextData[{
 "Recall from the division algorithm that the remainder must always be \
nonnegative, even when the dividend is negative. The ",
 StyleBox[ButtonBox["Mod",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Mod"], "FunctionLink"],
 " function respects that convention by default, with ",
 Cell[BoxData[
  RowBox[{"Mod", "[", 
   StyleBox["a", "CodeVar"], ",", 
   StyleBox["m", "CodeVar"], "]"}]], "myCode",ExpressionUUID->
  "4ba474ca-81ff-418d-b384-c04d412f2d11"],
 " returning a value between ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]],ExpressionUUID->
  "da55451c-fe3b-4df8-bcfc-64d059f9cec4"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"m", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "7ef6c2de-6afa-4f8b-95a4-9a5182600dd3"],
 "."
}], "Text",ExpressionUUID->"6351a13f-b0f8-409a-8fdf-42878e523a99"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mod", "[", 
  RowBox[{
   RowBox[{"-", "27"}], ",", "5"}], "]"}]], "Input",
 CellLabel->"In[7]:=",ExpressionUUID->"cb98d0e3-939d-4e07-a16e-62f93839e4e9"],

Cell[BoxData["3"], "Output",
 CellLabel->"Out[7]=",ExpressionUUID->"8b9cd778-2119-4ea1-a0dd-1d4fe5791393"]
}, Open  ]],

Cell[TextData[{
 "However, there are times when it is more useful to allow negative values. \
For example, consider the following question: \[OpenCurlyDoubleQuote]It is \
now 11:00 A.M. What time will it be 142 hours from now?\
\[CloseCurlyDoubleQuote] If we compute ",
 Cell[BoxData[
  FormBox[
   RowBox[{"142", " ", "mod", " ", "24"}], TraditionalForm]],ExpressionUUID->
  "33c6da23-26bd-4663-b5b7-b732f01aa2c5"],
 ", "
}], "Text",ExpressionUUID->"5b4acef2-f2e0-464a-9d2c-efb5c9f808b0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mod", "[", 
  RowBox[{"142", ",", "24"}], "]"}]], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"71f21183-867e-4546-b820-dd4cc6e97f31"],

Cell[BoxData["22"], "Output",
 CellLabel->"Out[8]=",ExpressionUUID->"33d63c51-72d2-4d0e-afa4-1c907e94da9e"]
}, Open  ]],

Cell[TextData[{
 "We see that the time will be the same 142 hours from now as 22 hours from \
now. It is also the case that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"142", "\[Congruent]", 
    RowBox[{
     RowBox[{"-", "2"}], " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "24"}], ")"}]}]}], TraditionalForm]],
  ExpressionUUID->"3810727c-1d7e-4061-ae5a-8ced5b13b4c2"],
 ", which means that the time 142 hours from now is the same as the time 2 \
hours earlier, that is, 9:00 A.M. You can see that this congruence is \
somewhat more convenient. "
}], "Text",ExpressionUUID->"210c5b2e-02e9-482c-bb67-7b06ac2c9fc6"],

Cell[TextData[{
 "To support this, the ",
 StyleBox[ButtonBox["Mod",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Mod"], "FunctionLink"],
 " function accepts an optional third argument, called the offset. The offset \
specifies a lower bound on the ",
 StyleBox[ButtonBox["Mod",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Mod"], "FunctionLink"],
 " function\[CloseCurlyQuote]s output. Specifically, for an integral offset \
",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "6cc9b664-07be-44cf-b09b-eab0f763214a"],
 ", ",
 Cell[BoxData[
  RowBox[{"Mod", "[", 
   StyleBox["a", "CodeVar"], ",", 
   StyleBox["m", "CodeVar"], ",", 
   StyleBox["d", "CodeVar"], "]"}]], "myCode",ExpressionUUID->
  "d155050e-266d-4f4b-8ba3-033acee9154a"],
 " will return the value congruent to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", " ", "mod", " ", "m"}], TraditionalForm]],ExpressionUUID->
  "5acb26ba-1829-4e93-b92a-c75ed00fb8f1"],
 " that lies between ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "15d8e9df-7c99-484d-9267-38b51945f39c"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"d", "+", "m", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "e30e6a19-6efe-436e-b30b-0649236b1c05"],
 ". For example, by specifying an offset of 1, the result will be between 1 \
and ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "de0e8067-d6bb-4bff-aa56-157e143de752"],
 ", so a computation that would ordinarily return 0 will return the value of \
the modulus instead."
}], "Text",ExpressionUUID->"4c057ce7-bf7d-4182-b84f-a307035f844f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mod", "[", 
  RowBox[{"132", ",", "3", ",", "1"}], "]"}]], "Input",
 CellLabel->"In[9]:=",ExpressionUUID->"53a83679-b8c6-43b7-a2c0-3dd56155ed51"],

Cell[BoxData["3"], "Output",
 CellLabel->"Out[9]=",ExpressionUUID->"691adfab-a317-4bec-9319-6a8b854ab427"]
}, Open  ]],

Cell[TextData[{
 "The value 1 is a common offset, as it ensures a positive result that can \
then be used as an index into a list. Another common offset is the fraction \
",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "m"}], "/", "2"}], TraditionalForm]],ExpressionUUID->
  "a91cad98-5b5c-4da2-b749-7cefa3065f62"],
 ". This offset ensures that the output is the integer closest to 0 that is \
congruent to the first argument modulo the second. For example, returning to \
the time example above, to obtain the result ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "2"}], TraditionalForm]],ExpressionUUID->
  "4496f40f-cf2c-44a0-ab13-b8b31fc0dcbd"],
 " we use the offset ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "24"}], "/", "2"}], TraditionalForm]],ExpressionUUID->
  "8a7d6f62-3770-46e7-91d4-0f1484592f0f"],
 "."
}], "Text",ExpressionUUID->"5fe8283a-fc26-4c33-af98-ab8720dba167"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mod", "[", 
  RowBox[{"142", ",", "24", ",", 
   RowBox[{
    RowBox[{"-", "24"}], "/", "2"}]}], "]"}]], "Input",
 CellLabel->"In[10]:=",ExpressionUUID->"f6272b78-daa7-448d-89a3-735142d9263f"],

Cell[BoxData[
 RowBox[{"-", "2"}]], "Output",
 CellLabel->"Out[10]=",ExpressionUUID->"dd657dab-810d-4229-bf15-779c0e7b8347"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Congruences", "Subsection",
 CellTags->"Section1b",ExpressionUUID->"f08b8e8b-59f1-40a4-8052-e7a203a92db9"],

Cell[TextData[{
 "The first argument to ",
 StyleBox[ButtonBox["Mod",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Mod"], "FunctionLink"],
 " can be any algebraic expression. For example, you can compute ",
 Cell[BoxData[
  FormBox[
   RowBox[{"3", "+", 
    RowBox[{
     RowBox[{"4", "\[CenterDot]", 
      SuperscriptBox["9", "2"]}], "mod", " ", "5"}]}], TraditionalForm]],
  ExpressionUUID->"39d68b6d-61a1-4030-b385-61645e1e788c"],
 " as follows."
}], "Text",ExpressionUUID->"85ac39a0-7408-4284-89be-74bbc7e6a1c4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mod", "[", 
  RowBox[{
   RowBox[{"3", "+", 
    RowBox[{"4", "*", 
     RowBox[{"9", "^", "2"}]}]}], ",", "5"}], "]"}]], "Input",
 CellLabel->"In[11]:=",ExpressionUUID->"97ddd935-c3c2-42cb-97c9-6648b5d97a80"],

Cell[BoxData["2"], "Output",
 CellLabel->"Out[11]=",ExpressionUUID->"9bf3b1c7-50c0-4a77-9bd4-91600e2bd54c"]
}, Open  ]],

Cell[TextData[{
 "To test a congruence, for example to confirm that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"428", "\[Congruent]", 
    RowBox[{"530", " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "17"}], ")"}]}]}], TraditionalForm]],
  ExpressionUUID->"ad7cc818-4f46-4d8b-b49d-5bc23bb86a00"],
 ", you must apply the ",
 StyleBox[ButtonBox["Mod",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Mod"], "FunctionLink"],
 " function to both values and test them using the ",
 StyleBox[ButtonBox["Equal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equal"], "FunctionLink"],
 " (",
 StyleBox["==", "Code"],
 ") relation."
}], "Text",ExpressionUUID->"139c2a66-01bc-49bf-92b7-c53520758c63"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Mod", "[", 
   RowBox[{"428", ",", "17"}], "]"}], "\[Equal]", 
  RowBox[{"Mod", "[", 
   RowBox[{"530", ",", "17"}], "]"}]}]], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"b4679776-159f-4594-aeb3-af5abc53f60e"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[12]=",ExpressionUUID->"2250a3c5-b4d7-4fb4-8f17-0a837186e6e4"]
}, Open  ]],

Cell[TextData[{
 "You may not include the ",
 StyleBox[ButtonBox["Equal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equal"], "FunctionLink"],
 " (",
 StyleBox["==", "Code"],
 ") relation within the argument to ",
 StyleBox[ButtonBox["Mod",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Mod"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"53c18a3e-a630-48f4-b044-23454fd59a6c"],

Cell[CellGroupData[{

Cell["Solving Congruences", "Subsubsection",ExpressionUUID->"6db3b318-ddea-4313-9e4d-76937ffce8d0"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can solve congruences by using the ",
 StyleBox[ButtonBox["Solve",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Solve"], "FunctionLink"],
 " function in conjunction with the ",
 StyleBox[ButtonBox["Modulus",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Modulus"], "FunctionLink"],
 " option. To do so, give the congruence or list of simultaneous congruences \
as the first argument to ",
 StyleBox[ButtonBox["Solve",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Solve"], "FunctionLink"],
 " and identify the modulus using the ",
 StyleBox[ButtonBox["Modulus",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Modulus"], "FunctionLink"],
 " option. As an example, consider Exercise 17a from Section 4.1 of the \
textbook. Under the assumption that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "\[Congruent]", 
    RowBox[{"4", " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "13"}], ")"}]}]}], TraditionalForm]],
  ExpressionUUID->"98c7a97d-06b7-4c3c-b78e-619db48813ae"],
 ", we are to solve ",
 Cell[BoxData[
  FormBox[
   RowBox[{"c", "\[Congruent]", 
    RowBox[{"9", "a", " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "13"}], ")"}]}]}], TraditionalForm]],
  ExpressionUUID->"25b62cc7-816d-49f7-a386-c2b277bbffb1"],
 ". We solve this using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " as follows."
}], "Text",ExpressionUUID->"2fdd7cdd-fba8-49b7-86b0-99ecc49a2a22"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "\[Equal]", "4"}], ",", 
     RowBox[{"c", "\[Equal]", 
      RowBox[{"9", "*", "a"}]}]}], "}"}], ",", 
   RowBox[{"Modulus", "\[Rule]", "13"}]}], "]"}]], "Input",
 CellLabel->"In[13]:=",ExpressionUUID->"5c637a9c-249c-4921-9882-c3d2d7853fb4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"a", "\[Rule]", "4"}], ",", 
    RowBox[{"c", "\[Rule]", "10"}]}], "}"}], "}"}]], "Output",
 CellLabel->"Out[13]=",ExpressionUUID->"70d47fcf-b3f4-4531-b2db-de4a283b1379"]
}, Open  ]],

Cell[TextData[{
 "Note that the congruences are entered as a list. This indicates that they \
must be simultaneously satisfied. Also note that we must use the ",
 StyleBox[ButtonBox["Equal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equal"], "FunctionLink"],
 " (",
 StyleBox["==", "Code"],
 ") relation, not ",
 StyleBox[ButtonBox["Set",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Set"], "FunctionLink"],
 " (",
 StyleBox["=", "Code"],
 "), when specifying the congruences."
}], "Text",ExpressionUUID->"f6b9ecfb-1489-403c-81e3-c27a54aa7e4a"],

Cell[TextData[{
 "If there are no solutions to the congruence, then ",
 StyleBox[ButtonBox["Solve",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Solve"], "FunctionLink"],
 " will return the empty list."
}], "Text",ExpressionUUID->"3a9b627e-4551-422f-b83f-d2d5bb19a24c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"n", "^", "2"}], "\[Equal]", "3"}], ",", 
   RowBox[{"Modulus", "\[Rule]", "4"}]}], "]"}]], "Input",
 CellLabel->"In[14]:=",ExpressionUUID->"808084cb-aad8-490c-8c39-0a100bf4fec8"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellLabel->"Out[14]=",ExpressionUUID->"ec251b3a-6703-4743-9e39-e015663cc9c3"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Arithmetic Modulo ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "660d6006-bd1c-48e4-866b-cf09bcee090d"]
}], "Subsection",
 CellTags->"Section1c",ExpressionUUID->"da2ac877-9e58-4e10-a51d-73b34d3801f5"],

Cell[TextData[{
 "In this subsection, we will define operators based on the definitions of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["+", "m"], TraditionalForm]],ExpressionUUID->
  "93016fbe-3953-4955-a376-4c4a111b2cef"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[CenterDot]", "m"], TraditionalForm]],ExpressionUUID->
  "36ab1164-4c8f-4d1a-8f80-5e7fc4219da4"],
 " given in the text. Our goal will be to get as close as possible to being \
able to enter ",
 Cell[BoxData[
  FormBox[
   RowBox[{"7", 
    SubscriptBox["+", "11"], "9"}], TraditionalForm]],ExpressionUUID->
  "fc115373-c9fd-4933-a1c9-22b92230fceb"],
 " and have ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " return 5."
}], "Text",ExpressionUUID->"16d9b9d0-fce7-4b5e-8218-07d73afd3e22"],

Cell[TextData[{
 "The usual style of writing arithmetic operators in between the operands is \
referred to as infix notation. There are operators that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " recognizes as infix operators, but which do not have built-in definitions. \
We can take advantage of this to create our own infix operators by providing \
definitions for these undefined operators."
}], "Text",ExpressionUUID->"329df0ca-9a93-41fb-8b10-d9f9ed859f2b"],

Cell[TextData[{
 "You can see all of the operators in the Wolfram Language in the table of \
operator precedence in the ",
 ButtonBox["Operator Input Forms",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/OperatorInputForms"],
 " tutorial. Those operators with a triangular mark in the far right of the \
table have built-in definitions. Those without such a mark are available for \
your own use. Here, we will make use of the ",
 StyleBox[ButtonBox["CirclePlus",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/CirclePlus"], "FunctionLink"],
 " (",
 StyleBox["\[CirclePlus]", "Code"],
 ") and ",
 StyleBox[ButtonBox["CircleTimes",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/CircleTimes"], "FunctionLink"],
 " (",
 StyleBox["\[CircleTimes]", "Code"],
 ") operators."
}], "Text",ExpressionUUID->"150d66d4-55e1-4fd7-917e-fb18233ac094"],

Cell["\<\
To enter these as infix operators, you need to use their aliases. To enter \
\[CirclePlus], type \[EscapeKey]c+\[EscapeKey], and to enter \[CircleTimes], \
type \[EscapeKey]c*\[EscapeKey].\
\>", "Text",ExpressionUUID->"d2e07522-06f8-43ee-ae61-cbce84f5973c"],

Cell[TextData[{
 "Observe that if you enter an expression using one of the operators, and \
apply the ",
 StyleBox[ButtonBox["FullForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FullForm"], "FunctionLink"],
 " function, you can see that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " interprets the infix operator as an application of the named function."
}], "Text",ExpressionUUID->"4a1fc05b-e2a0-4f5b-bc17-9878ce6b9b35"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"2", "\[CirclePlus]", "3"}], "//", "FullForm"}]], "Input",
 CellLabel->"In[15]:=",ExpressionUUID->"09c36f40-4b3b-4f65-9a50-7db2cfbe83a2"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"CirclePlus", "[", 
    RowBox[{"2", ",", "3"}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[15]//FullForm=",ExpressionUUID->"fabeb839-5843-492e-960a-f85b4a6d2641"]
}, Open  ]],

Cell[TextData[{
 "In addition, note that while these functions are currently undefined, they \
do have a defined precedence. For example, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", "\[CirclePlus]", 
    RowBox[{"3", "\[CircleTimes]", "4"}]}], TraditionalForm]],ExpressionUUID->
  "43781933-c5f1-4156-8f1c-c41881a75ce5"],
 " is interpreted as ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", "\[CirclePlus]", 
    RowBox[{"(", 
     RowBox[{"3", "\[CircleTimes]", "4"}], ")"}]}], TraditionalForm]],
  ExpressionUUID->"cd0df263-05d2-46eb-92da-c2685757a863"],
 ", which can be verified by inspecting the functional expression obtained \
with ",
 StyleBox[ButtonBox["FullForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FullForm"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"b5ffe1fe-a1ec-46c0-851d-97633c8c0968"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"2", "\[CirclePlus]", 
   RowBox[{"3", "\[CircleTimes]", "4"}]}], "//", "FullForm"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"14c53f44-6222-44c8-bb17-276c9328d262"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"CirclePlus", "[", 
    RowBox[{"2", ",", 
     RowBox[{"CircleTimes", "[", 
      RowBox[{"3", ",", "4"}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[16]//FullForm=",ExpressionUUID->"ab5e4f61-6ae6-4e55-826b-a8cb4d1e31ed"]
}, Open  ]],

Cell[TextData[{
 "To define the operator, you can issue the definition using either the \
functional or infix form. Below, we define addition in functional form and \
multiplication in infix form. Regardless of the form you provide the \
definition, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will properly evaluate both forms."
}], "Text",ExpressionUUID->"16add328-9cd0-46f7-99db-0973d5b2c283"],

Cell[BoxData[
 RowBox[{
  RowBox[{"CirclePlus", "[", 
   RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
  RowBox[{"Mod", "[", 
   RowBox[{
    RowBox[{"a", "+", "b"}], ",", "11"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[17]:=",ExpressionUUID->"e71b13a2-7425-4d23-a7e9-bb35eb4fd6bd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a_", "\[CircleTimes]", "b_"}], ":=", 
  RowBox[{"Mod", "[", 
   RowBox[{
    RowBox[{"a", "*", "b"}], ",", "11"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[18]:=",ExpressionUUID->"515538ce-2896-4675-8d4f-5de3108af568"],

Cell[TextData[{
 "We can now compute ",
 Cell[BoxData[
  FormBox[
   RowBox[{"7", 
    SubscriptBox["+", "11"], "9"}], TraditionalForm]],ExpressionUUID->
  "e9bdf200-414c-4c3d-9f48-6321bc042a65"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"3", 
    SubscriptBox["\[CenterDot]", "11"], "5"}], TraditionalForm]],
  ExpressionUUID->"f439b5bb-5617-4057-89e2-6bfa9640f8e5"],
 " using the \[CirclePlus] and \[CircleTimes] operators."
}], "Text",ExpressionUUID->"eee946b7-47b9-4588-a198-0f1ec48a84a8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"7", "\[CirclePlus]", "9"}]], "Input",
 CellLabel->"In[19]:=",ExpressionUUID->"496320cf-b135-4a2b-ada3-dfcdab368067"],

Cell[BoxData["5"], "Output",
 CellLabel->"Out[19]=",ExpressionUUID->"eda52ac7-d2b3-40e9-9103-80c3f95e6e2a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"3", "\[CircleTimes]", "5"}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"a7c427a6-e35f-4db5-b1e0-f18cb1b1808d"],

Cell[BoxData["4"], "Output",
 CellLabel->"Out[20]=",ExpressionUUID->"3ce410f5-d63b-4b8d-9bdb-75c8bfbb2c1b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Addition and Multiplication Tables", "Subsection",
 CellTags->"Section1d",ExpressionUUID->"cd18b9c0-488f-4fb4-a4e6-1e4fa0f2aaf7"],

Cell["\<\
We conclude this section by producing addition and multiplication tables.\
\>", "Text",ExpressionUUID->"9dd24174-6de7-4bc9-8282-917172c4463c"],

Cell[TextData[{
 "We will create the tables, unsurprisingly, using the ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " function. The first argument will be the sum or product of two variables \
within the ",
 StyleBox[ButtonBox["Mod",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Mod"], "FunctionLink"],
 " function. The ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " repetition arguments will specify that the variables range from 0 to one \
less than the modulus. A call to ",
 StyleBox[ButtonBox["TableForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TableForm"], "FunctionLink"],
 " will make the result readable."
}], "Text",ExpressionUUID->"5310ec9c-19aa-4aed-a9aa-9c5d2be70af6"],

Cell["Here is the addition table modulo 5.", "Text",ExpressionUUID->"1f240f30-63c2-4c74-b02e-246aee955de7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Mod", "[", 
     RowBox[{
      RowBox[{"a", "+", "b"}], ",", "5"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"a", ",", "0", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"b", ",", "0", ",", "4"}], "}"}]}], "]"}], "//", 
  "TableForm"}]], "Input",
 CellLabel->"In[21]:=",ExpressionUUID->"b30ea314-367e-47ef-ba83-69b4d8fe77f1"],

Cell[BoxData[
 TagBox[GridBox[{
    {"0", "1", "2", "3", "4"},
    {"1", "2", "3", "4", "0"},
    {"2", "3", "4", "0", "1"},
    {"3", "4", "0", "1", "2"},
    {"4", "0", "1", "2", "3"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[21]//TableForm=",ExpressionUUID->"7d612bc0-652f-4449-9ca2-\
93f0162afa22"]
}, Open  ]],

Cell[TextData[{
 "We can improve the table a bit more by adding column and row headings. This \
is done with the ",
 StyleBox[ButtonBox["TableHeadings",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TableHeadings"], "FunctionLink"],
 " option. By setting the ",
 StyleBox[ButtonBox["TableHeadings",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TableHeadings"], "FunctionLink"],
 " option to a list consisting of two sublists corresponding to the desired \
labels for the rows and then the columns, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will display those labels as headings. The keyword ",
 StyleBox[ButtonBox["None",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/None"], "FunctionLink"],
 " can be used in place of one of the sublists if you wanted to omit the \
corresponding set of labels."
}], "Text",ExpressionUUID->"747cfc20-1bd7-4f32-829f-c90ea6b0a1c5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Mod", "[", 
      RowBox[{
       RowBox[{"a", "+", "b"}], ",", "5"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "0", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "0", ",", "4"}], "}"}]}], "]"}], ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "2", ",", "3", ",", "4"}], "}"}]}], 
     "}"}]}]}], "]"}]], "Input",
 CellLabel->"In[22]:=",ExpressionUUID->"d7bc5e44-b493-4c99-b3c5-08ae092d459f"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      StyleBox["\[Null]",
       ShowStringCharacters->False], 
      TagBox["0",
       HoldForm], 
      TagBox["1",
       HoldForm], 
      TagBox["2",
       HoldForm], 
      TagBox["3",
       HoldForm], 
      TagBox["4",
       HoldForm]},
     {
      TagBox["0",
       HoldForm], "0", "1", "2", "3", "4"},
     {
      TagBox["1",
       HoldForm], "1", "2", "3", "4", "0"},
     {
      TagBox["2",
       HoldForm], "2", "3", "4", "0", "1"},
     {
      TagBox["3",
       HoldForm], "3", "4", "0", "1", "2"},
     {
      TagBox["4",
       HoldForm], "4", "0", "1", "2", "3"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {{0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}}]]]], "Output",
 CellLabel->
  "Out[22]//TableForm=",ExpressionUUID->"0c10d44c-8f52-488a-8b27-\
339a6f6c7962"]
}, Open  ]],

Cell["\<\
Using that example as a model, it is easy to create general functions that \
will accept a modulus and display the addition or multiplication table.\
\>", "Text",ExpressionUUID->"02295b24-e214-48cb-92a3-451168c7abda"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AdditionTable", "[", "m_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"TableForm", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Mod", "[", 
         RowBox[{
          RowBox[{"a", "+", "b"}], ",", "m"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"a", ",", "0", ",", 
          RowBox[{"m", "-", "1"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"b", ",", "0", ",", 
          RowBox[{"m", "-", "1"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"TableHeadings", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"0", ",", 
           RowBox[{"m", "-", "1"}]}], "]"}], ",", 
         RowBox[{"Range", "[", 
          RowBox[{"0", ",", 
           RowBox[{"m", "-", "1"}]}], "]"}]}], "}"}]}]}], "]"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[23]:=",ExpressionUUID->"e07de5bd-08b2-4301-8108-72d83719c5ce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MultiplicationTable", "[", "m_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"TableForm", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Mod", "[", 
         RowBox[{
          RowBox[{"a", "*", "b"}], ",", "m"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"a", ",", "0", ",", 
          RowBox[{"m", "-", "1"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"b", ",", "0", ",", 
          RowBox[{"m", "-", "1"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"TableHeadings", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"0", ",", 
           RowBox[{"m", "-", "1"}]}], "]"}], ",", 
         RowBox[{"Range", "[", 
          RowBox[{"0", ",", 
           RowBox[{"m", "-", "1"}]}], "]"}]}], "}"}]}]}], "]"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[24]:=",ExpressionUUID->"56c61fb1-9832-4402-ace6-25ec6ac7bd34"],

Cell["Here is the multiplication table modulo 5.", "Text",ExpressionUUID->"917f2ccf-5b1d-4bcf-8f24-633a89921e23"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MultiplicationTable", "[", "5", "]"}]], "Input",
 CellLabel->"In[25]:=",ExpressionUUID->"b9238aac-d216-4588-b126-416afb6a638d"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      StyleBox["\[Null]",
       ShowStringCharacters->False], 
      TagBox["0",
       HoldForm], 
      TagBox["1",
       HoldForm], 
      TagBox["2",
       HoldForm], 
      TagBox["3",
       HoldForm], 
      TagBox["4",
       HoldForm]},
     {
      TagBox["0",
       HoldForm], "0", "0", "0", "0", "0"},
     {
      TagBox["1",
       HoldForm], "0", "1", "2", "3", "4"},
     {
      TagBox["2",
       HoldForm], "0", "2", "4", "1", "3"},
     {
      TagBox["3",
       HoldForm], "0", "3", "1", "4", "2"},
     {
      TagBox["4",
       HoldForm], "0", "4", "3", "2", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {{0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}}]]]], "Output",
 CellLabel->
  "Out[25]//TableForm=",ExpressionUUID->"a0581bdc-9a80-40d0-bd5b-\
87fe4cc99309"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4.2 Integer Representations and Algorithms", "Section",
 CellTags->"Section2",ExpressionUUID->"c07a0ced-7b7b-43c8-ab6e-b0c5ee202d84"],

Cell[TextData[{
 "In this section, we will see how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can be used to explore representations of integers in various bases and to \
explore algorithms for computing with integers. We will begin by looking at \
the Wolfram Language\[CloseCurlyQuote]s built-in functions for converting \
between bases. Then, we will focus our attention on binary representations of \
integers and how to implement algorithms for addition and multiplication on \
binary representations. We restrict our attention to positive integers \
throughout this section. "
}], "Text",ExpressionUUID->"32bb2280-0d0e-436c-b2d9-28d01a44cd20"],

Cell[CellGroupData[{

Cell["Base Conversion", "Subsection",
 CellTags->"Section2a",ExpressionUUID->"695b7876-b5a9-4e1d-9521-ed9c14c6c389"],

Cell[TextData[{
 "The Wolfram Language provides support for converting from one base \
representation to another via the functions ",
 StyleBox[ButtonBox["IntegerDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerDigits"], "FunctionLink"],
 ", ",
 StyleBox[ButtonBox["IntegerString",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerString"], "FunctionLink"],
 ", and ",
 StyleBox[ButtonBox["FromDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FromDigits"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"52f18b91-0960-4f58-bfee-ca64a25bff4f"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["IntegerDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerDigits"], "FunctionLink"],
 " function is used to convert a positive integer, expressed in base 10, into \
a list of the digits of the integer expressed in a specified base. The first \
argument to ",
 StyleBox[ButtonBox["IntegerDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerDigits"], "FunctionLink"],
 " is the base 10 integer. If no other arguments are provided, the function \
returns the list of the digits of the integer. "
}], "Text",ExpressionUUID->"c5f8086e-ecc7-45ae-9101-c8788b5d20c8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerDigits", "[", "1234", "]"}]], "Input",
 CellLabel->"In[26]:=",ExpressionUUID->"ccacb6f9-f099-40ec-be48-0b216afc7cce"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]], "Output",
 CellLabel->"Out[26]=",ExpressionUUID->"1556f6b8-9bfe-489b-9847-a2f91215269e"]
}, Open  ]],

Cell["\<\
Note that the most significant digit is first in the list and the least \
significant is last. That is, the \
\[OpenCurlyDoubleQuote]one\[CloseCurlyQuote]s digit\[CloseCurlyDoubleQuote] \
is the last element in the list.\
\>", "Text",ExpressionUUID->"e60bc5bf-0e4d-4073-af6d-c7d50415c5c0"],

Cell[TextData[{
 "By providing a base as a second argument, the ",
 StyleBox[ButtonBox["IntegerDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerDigits"], "FunctionLink"],
 " function will output the list of the digits in the representation of the \
integer in that base. The following indicates that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     RowBox[{"(", "1234", ")"}], "10"], "=", 
    SubscriptBox[
     RowBox[{"(", "103102", ")"}], "4"]}], TraditionalForm]],ExpressionUUID->
  "73af1007-645e-407c-b88e-76bac175d5a2"],
 "."
}], "Text",ExpressionUUID->"bdee2a54-5317-481c-b84b-d35f675b40c8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerDigits", "[", 
  RowBox[{"1234", ",", "4"}], "]"}]], "Input",
 CellLabel->"In[27]:=",ExpressionUUID->"edb07288-cc2a-4b6a-ae67-b16084dfa1ae"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "0", ",", "3", ",", "1", ",", "0", ",", "2"}], 
  "}"}]], "Output",
 CellLabel->"Out[27]=",ExpressionUUID->"5e5c0162-b76a-4b07-8640-2ff185bf291c"]
}, Open  ]],

Cell[TextData[{
 "For bases larger than 10, ",
 StyleBox[ButtonBox["IntegerDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerDigits"], "FunctionLink"],
 " does not make use of letters for digits with values larger than 9. Rather, \
it uses the base 10 representation of the value of such digits. For example, \
in Example 5 of the textbook, it is shown that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     RowBox[{"(", "177130", ")"}], "10"], "=", 
    SubscriptBox[
     RowBox[{"(", 
      RowBox[{"2", "B3EA"}], ")"}], "16"]}], TraditionalForm]],
  ExpressionUUID->"c3b6ecb8-e4ea-4533-b6dd-fa986dd94895"],
 ". The output of ",
 StyleBox[ButtonBox["IntegerDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerDigits"], "FunctionLink"],
 " reports 10, 11, and 14 rather than A, B, and E."
}], "Text",ExpressionUUID->"bb6ced8e-ccf3-4a5f-89fb-55c2af21659f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerDigits", "[", 
  RowBox[{"177130", ",", "16"}], "]"}]], "Input",
 CellLabel->"In[28]:=",ExpressionUUID->"c93eb24e-bb28-4121-ac04-9118f24124be"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "11", ",", "3", ",", "14", ",", "10"}], "}"}]], "Output",
 CellLabel->"Out[28]=",ExpressionUUID->"68d6e1d3-9ecd-4a6a-a68e-22685b4922bb"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["IntegerDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerDigits"], "FunctionLink"],
 " function also accepts a third argument to specify a minimum length of the \
output. If the representation of the integer in the given base has fewer \
digits than specified by the third argument, zeros will be added on the left. \
The following shows the representation of ",
 Cell[BoxData[
  FormBox["123", TraditionalForm]],ExpressionUUID->
  "a52f4f13-19af-479f-8392-71c08b92eb86"],
 " in binary (base 2), with ten digits. "
}], "Text",ExpressionUUID->"c062f979-37de-4eb1-af7e-99ddf0ac5143"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerDigits", "[", 
  RowBox[{"123", ",", "2", ",", "10"}], "]"}]], "Input",
 CellLabel->"In[29]:=",ExpressionUUID->"51a8d493-f3db-4e4a-872d-016e0337b850"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", 
   ",", "1", ",", "1"}], "}"}]], "Output",
 CellLabel->"Out[29]=",ExpressionUUID->"b4183722-82d7-4fba-b4be-c63d35e64d01"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["IntegerString",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerString"], "FunctionLink"],
 " function is very similar to ",
 StyleBox[ButtonBox["IntegerDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerDigits"], "FunctionLink"],
 ", accepting the same arguments and having a very similar effect. The \
difference is that the output of ",
 StyleBox[ButtonBox["IntegerString",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerString"], "FunctionLink"],
 " is a string rather than a list. This means that the output has a more \
typical appearance. Contrast the output below to the corresponding example \
above."
}], "Text",ExpressionUUID->"56d2201c-c623-4bd7-b6e3-053fc422ec8c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerString", "[", 
  RowBox[{"1234", ",", "4"}], "]"}]], "Input",
 CellLabel->"In[30]:=",ExpressionUUID->"d7197cb7-50da-4556-9801-839e777004a3"],

Cell[BoxData["\<\"103102\"\>"], "Output",
 CellLabel->"Out[30]=",ExpressionUUID->"e363cb42-48f5-4f12-abd6-6c3b68309fdf"]
}, Open  ]],

Cell["\<\
Note that, despite appearances, the output is in fact a string object and not \
a numerical object.\
\>", "Text",ExpressionUUID->"c8b856d5-33b8-49ef-a6bf-457a3b3a2514"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "[", "%", "]"}]], "Input",
 CellLabel->"In[31]:=",ExpressionUUID->"6858cc47-b041-42d7-bf90-57635b27b3c3"],

Cell[BoxData["String"], "Output",
 CellLabel->"Out[31]=",ExpressionUUID->"10891f2a-0a23-4155-a71b-81d254154421"]
}, Open  ]],

Cell[TextData[{
 "As a result, you cannot manipulate the output of ",
 StyleBox[ButtonBox["IntegerString",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerString"], "FunctionLink"],
 " using numerical operators. The ",
 StyleBox[ButtonBox["IntegerDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerDigits"], "FunctionLink"],
 " function is much more useful if you wish to work with the output. However, \
",
 StyleBox[ButtonBox["IntegerString",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerString"], "FunctionLink"],
 " produces much more readable output. It also follows the usual convention \
of using letters for digits larger than 9."
}], "Text",ExpressionUUID->"f294ac9e-749c-470a-a785-fd8dc26a2076"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerString", "[", 
  RowBox[{"177130", ",", "16"}], "]"}]], "Input",
 CellLabel->"In[32]:=",ExpressionUUID->"a671f966-7846-4e1a-a434-e05bf625edc0"],

Cell[BoxData["\<\"2b3ea\"\>"], "Output",
 CellLabel->"Out[32]=",ExpressionUUID->"c17aa4cc-d7d4-4105-843c-08b43fe88db8"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["IntegerDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerDigits"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["IntegerString",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerString"], "FunctionLink"],
 " functions are both used to take a base 10 representation of a positive \
integer and return a representation in another base. For the reverse, we use \
the ",
 StyleBox[ButtonBox["FromDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FromDigits"], "FunctionLink"],
 " function."
}], "Text",ExpressionUUID->"c7d67263-4255-44e7-9865-96c615e4333f"],

Cell[TextData[{
 "The first argument of ",
 StyleBox[ButtonBox["FromDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FromDigits"], "FunctionLink"],
 " can be either a list, like the output of ",
 StyleBox[ButtonBox["IntegerDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerDigits"], "FunctionLink"],
 ", or a string, like the output of ",
 StyleBox[ButtonBox["IntegerString",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerString"], "FunctionLink"],
 ". With no second argument, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will assume that the input is intended to be base 10 and will convert the \
list or string into the corresponding integer."
}], "Text",ExpressionUUID->"00ad9411-e4ff-4dc9-ba92-61f877fae6b5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigits", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]], "Input",
 CellLabel->"In[33]:=",ExpressionUUID->"bb94ca5b-c878-453e-889f-e02b81aa67f8"],

Cell[BoxData["1234"], "Output",
 CellLabel->"Out[33]=",ExpressionUUID->"3dbdcb15-38e9-42fd-9308-fb1703cdaf6a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigits", "[", "\"\<1234\>\"", "]"}]], "Input",
 CellLabel->"In[34]:=",ExpressionUUID->"8632b1dc-5f17-4abc-91f7-5198b2cb0e8f"],

Cell[BoxData["1234"], "Output",
 CellLabel->"Out[34]=",ExpressionUUID->"50a8544a-689d-4c90-96a7-c868a000f67b"]
}, Open  ]],

Cell[TextData[{
 "The second argument specifies the base in which the first argument is \
given. For example, to convert ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    RowBox[{"(", "103012", ")"}], "4"], TraditionalForm]],ExpressionUUID->
  "9228756b-7016-4198-a255-f002b5a0fef8"],
 " back to base 10, you enter either of the following."
}], "Text",ExpressionUUID->"a3487376-c683-449f-90af-a34277b4822c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigits", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "3", ",", "1", ",", "0", ",", "2"}], "}"}], 
   ",", "4"}], "]"}]], "Input",
 CellLabel->"In[35]:=",ExpressionUUID->"a0fb1b88-8ec3-45a5-8757-a8413b141362"],

Cell[BoxData["1234"], "Output",
 CellLabel->"Out[35]=",ExpressionUUID->"98424d2d-9b40-4784-b8a0-459f2375e2d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigits", "[", 
  RowBox[{"\"\<103102\>\"", ",", "4"}], "]"}]], "Input",
 CellLabel->"In[36]:=",ExpressionUUID->"10bdd8a0-23e6-4c37-a460-1917d3355e35"],

Cell[BoxData["1234"], "Output",
 CellLabel->"Out[36]=",ExpressionUUID->"4693ea34-59df-4e33-83a6-7c990a302b61"]
}, Open  ]],

Cell[TextData[{
 "For bases larger than 10, you can use letters to represent digits larger \
than nine when using a string as the first argument to ",
 StyleBox[ButtonBox["FromDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FromDigits"], "FunctionLink"],
 ". Note that either lower or upper case is acceptable."
}], "Text",ExpressionUUID->"456db0f7-2e69-42b2-b7be-166ad9171e1e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigits", "[", 
  RowBox[{"\"\<2B3EA\>\"", ",", "16"}], "]"}]], "Input",
 CellLabel->"In[37]:=",ExpressionUUID->"cd946d90-6256-48a2-82dc-c9d1dfe26e18"],

Cell[BoxData["177130"], "Output",
 CellLabel->"Out[37]=",ExpressionUUID->"27b75e3e-e723-4e74-99a7-ecb2b4c3bbb9"]
}, Open  ]],

Cell[TextData[{
 "Finally, note that both ",
 StyleBox[ButtonBox["IntegerString",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerString"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["FromDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FromDigits"], "FunctionLink"],
 " can, in place of the base, accept ",
 StyleBox["\[OpenCurlyDoubleQuote]Roman\[CloseCurlyDoubleQuote]", "Code"],
 ", in which case the function will convert to or from a Roman numeral \
representation."
}], "Text",ExpressionUUID->"36dd3b9e-390b-4a48-a013-27319556d631"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerString", "[", 
  RowBox[{"2013", ",", "\"\<Roman\>\""}], "]"}]], "Input",
 CellLabel->"In[38]:=",ExpressionUUID->"7cdaf8eb-1cf0-4948-a5ef-a34b6e11cc9e"],

Cell[BoxData["\<\"MMXIII\"\>"], "Output",
 CellLabel->"Out[38]=",ExpressionUUID->"c736368f-fb5c-4425-969d-256da1e87856"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigits", "[", 
  RowBox[{"\"\<MMXIII\>\"", ",", "\"\<Roman\>\""}], "]"}]], "Input",
 CellLabel->"In[39]:=",ExpressionUUID->"1523dd05-4a55-430a-9022-c165992d2603"],

Cell[BoxData["2013"], "Output",
 CellLabel->"Out[39]=",ExpressionUUID->"e97eebde-1aa3-497f-9bf0-b5b777c681fa"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["BaseForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BaseForm"], "FunctionLink"],
 " function should also be mentioned. Unlike the functions above, ",
 StyleBox[ButtonBox["BaseForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BaseForm"], "FunctionLink"],
 " only affects how a number is displayed by ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", not its type. That is, ",
 StyleBox[ButtonBox["BaseForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BaseForm"], "FunctionLink"],
 " does not change an integer into a list or string, it only displays the \
number as if it were in a different base. Its arguments are a base 10 integer \
and a base."
}], "Text",ExpressionUUID->"81e10801-bc19-48af-b5cc-0689c886ea6b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BaseForm", "[", 
  RowBox[{"177130", ",", "16"}], "]"}]], "Input",
 CellLabel->"In[40]:=",ExpressionUUID->"6c1673fd-a888-4a39-917a-13354cdfa364"],

Cell[BoxData[
 TagBox[
  InterpretationBox[
   SubscriptBox["\<\"2b3ea\"\>", "\<\"16\"\>"],
   177130,
   Editable->False],
  BaseForm[#, 16]& ]], "Output",
 CellLabel->
  "Out[40]//BaseForm=",ExpressionUUID->"92dfbc71-9f05-451b-afe1-beef95a9ac89"]
}, Open  ]],

Cell[TextData[{
 "In the other direction, you can use the double-caret (",
 StyleBox["^^", "Code"],
 ") notation to enter a number in a specified base. Enter the base, followed \
by the representation of the number in that base. For example, to enter ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    RowBox[{"(", "A3", ")"}], "16"], TraditionalForm]],ExpressionUUID->
  "de66d2bc-3d5e-4717-87f1-0a31fa17ddc6"],
 " you type the following."
}], "Text",ExpressionUUID->"b4ff7d40-915b-442c-baa3-62a09bf9cff0"],

Cell[CellGroupData[{

Cell[BoxData["16^^a3"], "Input",
 CellLabel->"In[41]:=",ExpressionUUID->"0c79b1ca-6b0b-4aba-8334-f4796389ef0b"],

Cell[BoxData["163"], "Output",
 CellLabel->"Out[41]=",ExpressionUUID->"02658d3f-8cb0-4ed9-ba0c-749cdc4f5e32"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Converting Between Two Non-10 Bases", "Subsubsection",ExpressionUUID->"9de6f41f-b85c-4e54-a310-832b2bfa2f35"],

Cell[TextData[{
 "Given a positive integer in a base other than 10, you can convert it to \
another by using base 10 as an intermediary. For example, to convert ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    RowBox[{"(", "123", ")"}], "5"], TraditionalForm]],ExpressionUUID->
  "a3e1e2d0-be35-4519-92f7-31e406582c48"],
 " to base 3, you proceed as follows. First, convert to base 10 using ",
 StyleBox[ButtonBox["FromDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FromDigits"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"c7e040e1-1a41-4636-975d-36ac1bcbd91b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigits", "[", 
  RowBox[{"\"\<123\>\"", ",", "5"}], "]"}]], "Input",
 CellLabel->"In[42]:=",ExpressionUUID->"b957d1fa-6bb8-445a-ab6b-6dd0ffa99711"],

Cell[BoxData["38"], "Output",
 CellLabel->"Out[42]=",ExpressionUUID->"13433a93-ee39-454e-869a-7d300a44c91d"]
}, Open  ]],

Cell[TextData[{
 "Then, use ",
 StyleBox[ButtonBox["IntegerString",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerString"], "FunctionLink"],
 " to convert to base 3."
}], "Text",ExpressionUUID->"e8f0afc4-b6bb-44b7-97f8-ae8249c396e8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerString", "[", 
  RowBox[{"38", ",", "3"}], "]"}]], "Input",
 CellLabel->"In[43]:=",ExpressionUUID->"d6e516aa-c6b7-4724-931f-b46d7f1934ae"],

Cell[BoxData["\<\"1102\"\>"], "Output",
 CellLabel->"Out[43]=",ExpressionUUID->"415807f8-81f6-4f3c-a673-5b7e44b5f1ed"]
}, Open  ]],

Cell[TextData[{
 "The result indicates that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     RowBox[{"(", "123", ")"}], "5"], "=", 
    SubscriptBox[
     RowBox[{"(", "1102", ")"}], "3"]}], TraditionalForm]],ExpressionUUID->
  "7ee884e0-f852-444b-8cbf-0f5010d7226c"],
 "."
}], "Text",ExpressionUUID->"65b91415-cfc9-420d-b4b1-4175d0313f76"],

Cell[TextData[{
 "We can combine these two steps into a single function that takes three \
arguments: a string representing the integer, the starting base, and the \
final base. The body of the function is simply a composition of ",
 StyleBox[ButtonBox["FromDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FromDigits"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["IntegerString",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerString"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"a159a39a-1407-4c1b-b618-9fac7775c004"],

Cell[BoxData[
 RowBox[{
  RowBox[{"convertString", "[", 
   RowBox[{"n_", ",", "b1_", ",", "b2_"}], "]"}], ":=", 
  RowBox[{"IntegerString", "[", 
   RowBox[{
    RowBox[{"FromDigits", "[", 
     RowBox[{"n", ",", "b1"}], "]"}], ",", "b2"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[44]:=",ExpressionUUID->"b21db2e9-6a3e-4bf7-84ba-bfe6d5931645"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"convertString", "[", 
  RowBox[{"\"\<123\>\"", ",", "5", ",", "3"}], "]"}]], "Input",
 CellLabel->"In[45]:=",ExpressionUUID->"f23342d9-6f1b-406c-9dd3-f3c46ba654cd"],

Cell[BoxData["\<\"1102\"\>"], "Output",
 CellLabel->"Out[45]=",ExpressionUUID->"a3963466-bbe5-4623-a2fc-66a390da531b"]
}, Open  ]],

Cell["\<\
It is left to the reader to define a similar function that outputs a list of \
digits rather than a string.\
\>", "Text",ExpressionUUID->"6fc64085-29de-41ef-aa71-8b33fd47c925"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Binary Addition", "Subsection",
 CellTags->"Section2b",ExpressionUUID->"18c17686-5338-482a-8d86-79b0e9e0ebbe"],

Cell[TextData[{
 "In this subsection, we will implement Algorithm 2 from Section 4.2, \
addition of integers. Our function will accept two binary representations \
given as lists of 0s and 1s with the most significant digit first. The first \
task for our function will be to make sure that the binary representations \
are of the same length. To do this, we compute the maximum of the lengths of \
the two lists, which will be stored as ",
 StyleBox["n", "Code"],
 ", and then add as many 0s to the shorter list as are necessary to make both \
lists that length. We also initialize a sum list ",
 StyleBox["S", "Code"],
 " to the list of that same length consisting of all 0s."
}], "Text",ExpressionUUID->"83b4ffe3-030b-4aee-b7d8-3a1081baf935"],

Cell[TextData[{
 "To add 0s to the input list, we use the ",
 StyleBox[ButtonBox["PadLeft",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PadLeft"], "FunctionLink"],
 " function, which takes a list and a length and returns the list of the \
desired length obtained by adding 0s on the left side of the list. As you \
might suspect, there is also a ",
 StyleBox[ButtonBox["PadRight",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PadRight"], "FunctionLink"],
 " function. To initialize ",
 StyleBox["S", "Code"],
 ", we use ",
 StyleBox[ButtonBox["ConstantArray",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ConstantArray"], "FunctionLink"],
 ", which, given an expression and a length creates the list of the desired \
length all of whose elements are the given expression. We illustrate these \
functions below."
}], "Text",ExpressionUUID->"3f62e760-6cf5-4080-93e5-57f0506f5294"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PadLeft", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", "7"}], "]"}]], "Input",
 CellLabel->"In[46]:=",ExpressionUUID->"de0792d5-e9d5-4161-95b8-9b98a99b2b36"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "2", ",", "3"}], 
  "}"}]], "Output",
 CellLabel->"Out[46]=",ExpressionUUID->"e8d62e0c-c016-4b4a-9777-cca6bdecaa83"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ConstantArray", "[", 
  RowBox[{"\"\<x\>\"", ",", "5"}], "]"}]], "Input",
 CellLabel->"In[47]:=",ExpressionUUID->"8658b6d6-57ff-4136-9e73-b9c54f0728f1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"x\"\>", ",", "\<\"x\"\>", ",", "\<\"x\"\>", ",", "\<\"x\"\>", 
   ",", "\<\"x\"\>"}], "}"}]], "Output",
 CellLabel->"Out[47]=",ExpressionUUID->"45601f95-de90-4613-b954-57f463573ac9"]
}, Open  ]],

Cell[TextData[{
 "Once these initial tasks are completed, we follow Algorithm 2. Note that \
the indices used must be modified to match that used by the Wolfram Language. \
The loop variable ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "b8d2876f-0565-46fc-82c6-74a8d048e1b3"],
 ", as presented in the textbook, ranges from ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]],ExpressionUUID->
  "2fca3016-0f2c-4b7f-a4b7-27a5d9912be9"],
 " to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "58f2f4af-6070-46d5-9d47-bb2b2f71b11c"],
 ", where ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]],ExpressionUUID->
  "b298340d-8ce3-461f-b4cb-264c6825b4a1"],
 " is the index of the least significant (the \[OpenCurlyDoubleQuote]one\
\[CloseCurlyQuote]s\[CloseCurlyDoubleQuote]) digit and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "593a07e1-7703-4355-bb43-0a105d60ba68"],
 " is the index of the most significant digit. In this implementation, the \
least significant digit in the input values, ",
 StyleBox["A", "Code"],
 " and ",
 StyleBox["B", "Code"],
 ", will be in the last position, which has index equal to their length, ",
 StyleBox["n", "Code"],
 ". The most significant digit will be in position ",
 StyleBox["1", "Code"],
 ". Consequently, our ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop will have variable ",
 StyleBox["j", "Code"],
 " ranging from ",
 StyleBox["n", "Code"],
 " to ",
 StyleBox["1", "Code"],
 "."
}], "Text",ExpressionUUID->"a8ef3633-e274-449f-8c25-2906e492da48"],

Cell[TextData[{
 "The last difference between our implementation and Algorithm 2 is the use \
of the ",
 StyleBox[ButtonBox["PrependTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PrependTo"], "FunctionLink"],
 " function to add a 1 at the beginning of the sum, in case a carry requires \
the result have an additional digit."
}], "Text",ExpressionUUID->"426918e7-3003-4278-89d2-823775508795"],

Cell[BoxData[
 RowBox[{
  RowBox[{"addition", "[", 
   RowBox[{"a_List", ",", "b_List"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "n", ",", "A", ",", "B", ",", "S", ",", "c", ",", "j", ",", "d"}], "}"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"n", "=", 
      RowBox[{"Max", "[", 
       RowBox[{
        RowBox[{"Length", "[", "a", "]"}], ",", 
        RowBox[{"Length", "[", "b", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"A", "=", 
      RowBox[{"PadLeft", "[", 
       RowBox[{"a", ",", "n"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"B", "=", 
      RowBox[{"PadLeft", "[", 
       RowBox[{"b", ",", "n"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"S", "=", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"0", ",", "n"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"c", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"j", "=", "n"}], ",", 
       RowBox[{"j", "\[GreaterEqual]", "1"}], ",", 
       RowBox[{"j", "--"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"d", "=", 
         RowBox[{"Floor", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"A", "[", 
              RowBox[{"[", "j", "]"}], "]"}], "+", 
             RowBox[{"B", "[", 
              RowBox[{"[", "j", "]"}], "]"}], "+", "c"}], ")"}], "/", "2"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"S", "[", 
          RowBox[{"[", "j", "]"}], "]"}], "=", 
         RowBox[{
          RowBox[{"A", "[", 
           RowBox[{"[", "j", "]"}], "]"}], "+", 
          RowBox[{"B", "[", 
           RowBox[{"[", "j", "]"}], "]"}], "+", "c", "-", 
          RowBox[{"2", "*", "d"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"c", "=", "d"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"c", "\[Equal]", "1"}], ",", 
       RowBox[{"PrependTo", "[", 
        RowBox[{"S", ",", "1"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "S"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[48]:=",ExpressionUUID->"dade1647-d55c-4c80-a003-fdecc2bbf67f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"addition", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0"}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->"In[49]:=",ExpressionUUID->"8cd2f6e3-3045-4883-b66b-7d39d7d06162"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0"}], 
  "}"}]], "Output",
 CellLabel->"Out[49]=",ExpressionUUID->"6c491828-9468-45ef-b4c8-bfe4d08be21f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Binary Multiplication", "Subsection",
 CellTags->"Section2c",ExpressionUUID->"08d5dca5-e4f3-4190-a473-7ec5907606f7"],

Cell["\<\
Finally, we will implement a multiplication algorithm, presented as Algorithm \
3 in Section 4.2. Once again, our function will accept the binary \
representations of positive integers as the inputs. This time, however, it is \
not necessary for them to have the same length. \
\>", "Text",ExpressionUUID->"e74cd3ed-b3c2-43da-84df-51743f37b085"],

Cell[TextData[{
 "The shift that occurs when ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["b", "j"], "=", "1"}], TraditionalForm]],ExpressionUUID->
  "d3eb4ff1-ee40-4dbe-aea8-bb882d5ed2df"],
 " is illustrated by the following example. To shift the list ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], TraditionalForm]],
  ExpressionUUID->"453ea717-7a19-4dc2-a1f5-fd35a4b72cd9"],
 " by five places, we must add five 0s at the end of the list. We do this by \
using ",
 StyleBox[ButtonBox["ConstantArray",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ConstantArray"], "FunctionLink"],
 " to create the list of five 0s and then ",
 StyleBox[ButtonBox["Join",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Join"], "FunctionLink"],
 " to combine the original list with this list of 0s."
}], "Text",ExpressionUUID->"c5d4d07a-70ff-404b-ab1c-a5dfe83498b0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"shiftExample", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[50]:=",ExpressionUUID->"22ab3460-ff80-4c46-91f5-c0e9c6d34191"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}]], "Output",
 CellLabel->"Out[50]=",ExpressionUUID->"5c9a896e-4c82-414a-beed-43ba7bf4d102"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Join", "[", 
  RowBox[{"shiftExample", ",", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", "5"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[51]:=",ExpressionUUID->"6cdbda7e-b80d-4e99-900d-01220508602a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0"}], "}"}]], "Output",
 CellLabel->"Out[51]=",ExpressionUUID->"7969527d-ea5c-4e9e-a879-35c1a4595963"]
}, Open  ]],

Cell[TextData[{
 "We will store the partial products using an indexed variable. Recall from \
Section 2.4 of this manual that we can store an object in an indexed \
variable, ",
 StyleBox["c", "Code"],
 ", by making an assignment to the symbol ",
 StyleBox["c[i]", "Code"],
 " for index ",
 StyleBox["i", "Code"],
 "."
}], "Text",ExpressionUUID->"ad488906-6901-4209-b77c-43bea1c04cdf"],

Cell[TextData[{
 "The product ",
 StyleBox["p", "Code"],
 " will be initialized to ",
 StyleBox["{0}", "Code"],
 ", a binary representation of 0. The addition in the final loop will be \
performed by the ",
 StyleBox["addition", "Code"],
 " function we created above."
}], "Text",ExpressionUUID->"f43e77ef-e13a-4f7d-91aa-83b8cff3ca0d"],

Cell[TextData[{
 "As noted above, there is a discrepancy between the way indices are used in \
the pseudocode in the text and the indices used in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". For this function, we will mirror the textbook with the loop variable ",
 StyleBox["j", "Code"],
 " ranging from ",
 StyleBox["0", "Code"],
 " to ",
 StyleBox["n-1", "Code"],
 ", where ",
 StyleBox["n", "Code"],
 " is the number of digits in the second number. We interpret ",
 StyleBox["j", "Code"],
 " as being the number of digits beyond the least significant digit, which \
has position ",
 StyleBox["n", "Code"],
 ". Within the body of the loop, we inspect location ",
 StyleBox["n-j", "Code"],
 "."
}], "Text",ExpressionUUID->"830420e1-cbe3-4169-89df-d510df33d664"],

Cell["Here is our implementation of Algorithm 3.", "Text",ExpressionUUID->"18b8f6e4-3dd3-4261-be81-c931e170accf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"multiplication", "[", 
   RowBox[{"a_List", ",", "b_List"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", ",", "j", ",", "c", ",", "p"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"n", "=", 
      RowBox[{"Length", "[", "b", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"j", "=", "0"}], ",", 
       RowBox[{"j", "\[LessEqual]", 
        RowBox[{"n", "-", "1"}]}], ",", 
       RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"b", "[", 
           RowBox[{"[", 
            RowBox[{"n", "-", "j"}], "]"}], "]"}], "\[Equal]", "1"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"c", "[", "j", "]"}], "=", 
          RowBox[{"Join", "[", 
           RowBox[{"a", ",", 
            RowBox[{"ConstantArray", "[", 
             RowBox[{"0", ",", "j"}], "]"}]}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"c", "[", "j", "]"}], "=", 
          RowBox[{"{", "0", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"p", "=", 
      RowBox[{"{", "0", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"j", "=", "0"}], ",", 
       RowBox[{"j", "\[LessEqual]", 
        RowBox[{"n", "-", "1"}]}], ",", 
       RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"p", "=", 
        RowBox[{"addition", "[", 
         RowBox[{"p", ",", 
          RowBox[{"c", "[", "j", "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", "p"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[52]:=",ExpressionUUID->"bab42735-af8d-432a-b174-a7f0c3448cd0"],

Cell["We test our function using Example 10 from Section 4.2.", "Text",ExpressionUUID->"33aa443d-7ff2-4862-b655-b12518c435ab"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"multiplication", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[53]:=",ExpressionUUID->"4dfeed5e-318e-4891-ae5c-e1fa4faaae45"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "0"}], "}"}]], "Output",
 CellLabel->"Out[53]=",ExpressionUUID->"60ed64b9-3a3f-4ae6-aa7e-21f4118faf2f"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4.3 Primes and Greatest Common Divisors", "Section",
 CellTags->"Section3",ExpressionUUID->"3bf9488b-59e6-47a8-bcd7-f92c4038eac8"],

Cell[TextData[{
 "In this section, we will see how to use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to find primes, find prime factorizations, and compute greatest common \
divisors and least common multiples. We will also use ",
 StyleBox["Mathematica\[CloseCurlyQuote]",
  FontSlant->"Italic"],
 "s capabilities to explore the distribution of primes. "
}], "Text",ExpressionUUID->"54ef3205-aee4-4859-b03a-525a9f75221d"],

Cell[CellGroupData[{

Cell["Primes", "Subsection",
 CellTags->"Section3a",ExpressionUUID->"f1b12cb1-76c6-4e2b-a2a2-c420e9434856"],

Cell["\<\
We will first introduce some of the Wolfram Language\[CloseCurlyQuote]s \
functions for testing whether a number is prime and for finding primes. \
\>", "Text",ExpressionUUID->"5091e1ff-2aa5-450e-927f-2d923703da9b"],

Cell[CellGroupData[{

Cell["Testing for Primality", "Subsubsection",ExpressionUUID->"e0f26d1c-d02c-4157-8f3c-d95839634b7f"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["PrimeQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PrimeQ"], "FunctionLink"],
 " function accepts a single argument, an integer to be tested, and returns \
true or false. "
}], "Text",ExpressionUUID->"12fbd0d2-7eb2-4904-b802-b18281a24759"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PrimeQ", "[", "5", "]"}]], "Input",
 CellLabel->"In[54]:=",ExpressionUUID->"2a017949-92b8-4284-a4a5-c7db04160b69"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[54]=",ExpressionUUID->"ff3dfadd-08e4-4d76-bb59-2af56a84bc30"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PrimeQ", "[", "10", "]"}]], "Input",
 CellLabel->"In[55]:=",ExpressionUUID->"1b9530c5-d9a7-4743-a10f-598ea402da91"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[55]=",ExpressionUUID->"82cbe500-1992-4ca0-9175-8899a0222c96"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PrimeQ", "[", 
  RowBox[{
   RowBox[{"2", "^", "13"}], "-", "1"}], "]"}]], "Input",
 CellLabel->"In[56]:=",ExpressionUUID->"9ede82b6-aad8-49cb-a890-20d35d10a4ee"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[56]=",ExpressionUUID->"75a9f3d3-9ae7-498f-92e2-7bba58f01bdb"]
}, Open  ]],

Cell[TextData[{
 "Unlike the trial division algorithm discussed in the book, which checks all \
possible divisors to see if a number is prime or composite, ",
 StyleBox[ButtonBox["PrimeQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PrimeQ"], "FunctionLink"],
 " uses a probabilistic primality test. This probabilistic test gains much \
faster performance at the cost of a small possibility that the command will \
return an incorrect result. There is no known example of an integer for which \
",
 StyleBox[ButtonBox["PrimeQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PrimeQ"], "FunctionLink"],
 " is incorrect and any such example must be exceptionally large. Therefore, \
despite there being a chance of error, ",
 StyleBox[ButtonBox["PrimeQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PrimeQ"], "FunctionLink"],
 " is in fact very reliable."
}], "Text",ExpressionUUID->"00eaecc7-c8ae-46aa-a496-c44d9abe2de7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Listing Primes", "Subsubsection",ExpressionUUID->"6181aecf-d947-4fe0-9002-9ed5188e75a9"],

Cell[TextData[{
 "The function ",
 StyleBox[ButtonBox["Prime",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Prime"], "FunctionLink"],
 " accepts as input a positive integer ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "c973ef88-8090-4030-b98a-c9555c051f2b"],
 " and outputs the ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "46683e23-6d08-4171-a9bc-da2365056384"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " prime number."
}], "Text",ExpressionUUID->"1b0cd69d-83d3-4c87-be40-91ff1dc56f7e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Prime", "[", "1", "]"}]], "Input",
 CellLabel->"In[57]:=",ExpressionUUID->"d802bb6f-8c9e-4afc-9182-a8adb700be62"],

Cell[BoxData["2"], "Output",
 CellLabel->"Out[57]=",ExpressionUUID->"7943a8c7-f98a-4db5-b55f-73144b2c8570"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Prime", "[", "2", "]"}]], "Input",
 CellLabel->"In[58]:=",ExpressionUUID->"7ba08a89-9dcd-47e1-b1ba-131f40788366"],

Cell[BoxData["3"], "Output",
 CellLabel->"Out[58]=",ExpressionUUID->"ff8913ce-3a79-4c2d-8f0e-1f1418c97f10"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Prime", "[", "i", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "20"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[59]:=",ExpressionUUID->"c2d0b778-b550-43d0-8549-88c5816edfd9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "3", ",", "5", ",", "7", ",", "11", ",", "13", ",", "17", ",", 
   "19", ",", "23", ",", "29", ",", "31", ",", "37", ",", "41", ",", "43", 
   ",", "47", ",", "53", ",", "59", ",", "61", ",", "67", ",", "71"}], 
  "}"}]], "Output",
 CellLabel->"Out[59]=",ExpressionUUID->"c7bc3dce-bba6-4bd5-b956-267751ae9a2b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Prime", "[", "100000", "]"}]], "Input",
 CellLabel->"In[60]:=",ExpressionUUID->"09cd2010-3b15-4709-be19-1e9498e6bf67"],

Cell[BoxData["1299709"], "Output",
 CellLabel->"Out[60]=",ExpressionUUID->"3d76194c-eec2-4793-a94c-b6f5a99fb965"]
}, Open  ]],

Cell[TextData[{
 "The Wolfram Language also includes the ",
 StyleBox[ButtonBox["NextPrime",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/NextPrime"], "FunctionLink"],
 " function, which returns the smallest prime larger than the input value. \
For example, to find the first prime number larger than 1000, enter the \
following. "
}], "Text",ExpressionUUID->"4dc33b2a-4af7-407a-a01a-656feea9c83e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NextPrime", "[", "1000", "]"}]], "Input",
 CellLabel->"In[61]:=",ExpressionUUID->"b10d105d-3d06-4882-b0d9-cac56fba36da"],

Cell[BoxData["1009"], "Output",
 CellLabel->"Out[61]=",ExpressionUUID->"3c84b787-d90e-4623-b9b0-84130de7cc7c"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["NextPrime",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/NextPrime"], "FunctionLink"],
 " function can also be given an optional second argument, which must be an \
integer. ",
 Cell[BoxData[
  RowBox[{"NextPrime", "[", 
   StyleBox["n", "CodeVar"], ",", 
   StyleBox["k", "CodeVar"], "]"}]], "myCode",ExpressionUUID->
  "284d3765-0768-4f56-a1ea-ba228641ef7d"],
 " returns the ",
 StyleBox["k", "CodeVar",
  IgnoreSpellCheck->True],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " prime larger than ",
 StyleBox["n", "CodeVar"],
 ". If the second argument is negative, the function instead returns the \
prime smaller than ",
 StyleBox["n", "CodeVar"],
 ". For example, the following expressions find the third prime after 1000 \
and the prime before it."
}], "Text",ExpressionUUID->"3129ea2a-470a-4675-9d59-3748a094afa2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NextPrime", "[", 
  RowBox[{"1000", ",", "3"}], "]"}]], "Input",
 CellLabel->"In[62]:=",ExpressionUUID->"35a6acb0-446f-447d-942c-337a8d25b89b"],

Cell[BoxData["1019"], "Output",
 CellLabel->"Out[62]=",ExpressionUUID->"a1cd6962-fda2-4f3f-a8c9-64ded291e288"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NextPrime", "[", 
  RowBox[{"1000", ",", 
   RowBox[{"-", "1"}]}], "]"}]], "Input",
 CellLabel->"In[63]:=",ExpressionUUID->"c624daa0-7414-4447-adb2-719c2cfdab88"],

Cell[BoxData["997"], "Output",
 CellLabel->"Out[63]=",ExpressionUUID->"345ca64d-4eb5-4458-afd4-68a0407ea81d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Prime Factorization", "Subsection",
 CellTags->"Section3b",ExpressionUUID->"0000ed3d-24da-481e-a58c-0a8d084f113c"],

Cell[TextData[{
 "To compute the prime factorization of an integer, we can use the function \
",
 StyleBox[ButtonBox["FactorInteger",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FactorInteger"], "FunctionLink"],
 ". "
}], "Text",ExpressionUUID->"2433575e-6b9e-4f7c-ba3d-907f104a1f68"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FactorInteger", "[", "100", "]"}]], "Input",
 CellLabel->"In[64]:=",ExpressionUUID->"efb80371-7c5f-4404-826f-33f2d4f7227c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[64]=",ExpressionUUID->"01c6ec31-8448-4aaf-890f-cdd9165e5db1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FactorInteger", "[", "123456789", "]"}]], "Input",
 CellLabel->"In[65]:=",ExpressionUUID->"e4477b46-47cd-41bb-a4a2-75f5536470a5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3607", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3803", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[65]=",ExpressionUUID->"72672d36-57e2-468b-8288-752eefe694d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FactorInteger", "[", 
  RowBox[{"-", "987654321"}], "]"}]], "Input",
 CellLabel->"In[66]:=",ExpressionUUID->"07713543-89ab-4584-b7ed-d91f7f21cd59"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"17", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"379721", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[66]=",ExpressionUUID->"d5b666d5-4aa6-4ffa-9e54-2c4bc80d9c14"]
}, Open  ]],

Cell[TextData[{
 "The output of ",
 StyleBox[ButtonBox["FactorInteger",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FactorInteger"], "FunctionLink"],
 " is a list of pairs. Each pair consists of a prime number and the \
multiplicity, or exponent, of that prime in the prime factorization. Note \
that in the last example, with negative input, one of the members of the list \
is the pair ",
 StyleBox["{-1,1}", "Code"],
 ", indicating that ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], "1"], TraditionalForm]],ExpressionUUID->
  "33ddfabe-aee3-459a-a72a-fb6131c8a12e"],
 " is in the factorization. The outputs above indicate that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"100", "=", 
    RowBox[{
     SuperscriptBox["2", "2"], "\[CenterDot]", 
     SuperscriptBox["5", "2"]}]}], TraditionalForm]],ExpressionUUID->
  "cc0ce2f9-d51a-4689-bf14-4a51aab5fc6b"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"123456789", "=", 
    RowBox[{
     SuperscriptBox["3", "2"], "\[CenterDot]", 
     SuperscriptBox["3607", "1"], "\[CenterDot]", 
     SuperscriptBox["3803", "1"]}]}], TraditionalForm]],ExpressionUUID->
  "e35d2021-743f-410b-aa7e-6bcbb852b12f"],
 ", and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "987654321"}], "=", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], "1"], "\[CenterDot]", 
     SuperscriptBox["3", "2"], "\[CenterDot]", 
     SuperscriptBox["17", "2"], "\[CenterDot]", 
     SuperscriptBox["379721", "1"]}]}], TraditionalForm]],ExpressionUUID->
  "99bd6b8c-0d11-40a1-8ca4-ea64bcbcf1f0"],
 "."
}], "Text",ExpressionUUID->"6bd18def-8f2e-40f3-80ea-aba1a28e4443"],

Cell[TextData[{
 "Note that ",
 StyleBox[ButtonBox["FactorInteger",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FactorInteger"], "FunctionLink"],
 " can also accept an optional argument to limit the effort ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will exert in trying to factor. Entering ",
 StyleBox["Automatic", "Code"],
 " as the second argument limits the function to factors that it can find \
easily. You can also give a positive integer as the second argument, and ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will then find at most that many distinct factors. "
}], "Text",ExpressionUUID->"5748a3af-8c53-44f1-8900-5dee2f0e9b9b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FactorInteger", "[", "236914830635411777378758175934586404476822", 
  "]"}]], "Input",
 CellLabel->"In[67]:=",ExpressionUUID->"3471b8a6-e8f6-4854-975c-6998137894b6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"197", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"509", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10459723", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"32129861", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[67]=",ExpressionUUID->"411d97d9-730c-4264-b166-5546a357a875"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FactorInteger", "[", 
  RowBox[{"236914830635411777378758175934586404476822", ",", "3"}], 
  "]"}]], "Input",
 CellLabel->"In[68]:=",ExpressionUUID->"dd41077a-638a-4808-b48f-704056701f83"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"394", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"509", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1181349070215370924270532326421800507", ",", "1"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[68]=",ExpressionUUID->"ce5bc10a-23f6-4433-8318-74ef7f8da8d1"]
}, Open  ]],

Cell[TextData[{
 "The first expression above factors the given integer into its complete \
prime factorization. The second is limited to finding only three distinct \
factors. After finding the first two prime factors, ",
 Cell[BoxData[
  FormBox["394", TraditionalForm]],ExpressionUUID->
  "cc8f024e-d902-4b42-9680-93772224221a"],
 " and ",
 Cell[BoxData[
  FormBox["509", TraditionalForm]],ExpressionUUID->
  "257d45f6-c171-45d8-a4a1-71bcfc0ece23"],
 ", it reports the remainder as the last factor with exponent 1. This gives \
you a way to have ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " only perform the easy parts of factorizations, which can help ensure that \
your functions run quickly during development. Then, when you are ready to \
let the function take all the time it needs, you can remove the limitation. "
}], "Text",ExpressionUUID->"7686bf24-6c73-4181-b89f-f5563413c3e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Distribution of Primes", "Subsection",
 CellTags->"Section3c",ExpressionUUID->"a90e0e91-1b7d-42d3-a815-cd0a253b9340"],

Cell[TextData[{
 "The Prime Number Theorem (Theorem 4 in Section 4.3 of the text) tells us \
that the number of primes not exceeding ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "3c990edf-8496-4bba-b5f2-a91947e7c594"],
 " is approximated by the function ",
 Cell[BoxData[
  FormBox[
   FractionBox["x", 
    RowBox[{"ln", " ", "x"}]], TraditionalForm]],ExpressionUUID->
  "cb2a3b1e-d3a9-44cd-b944-84b6229c68d7"],
 ". In this subsection, we will use ",
 StyleBox["Mathematica\[CloseCurlyQuote]",
  FontSlant->"Italic"],
 "s graphing capabilities to graph the number of primes not exceeding ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "fdf75867-9bb0-4cbe-b7cd-a05f273b1511"],
 ". "
}], "Text",ExpressionUUID->"7a297d84-ea57-422c-b0ee-f1768e2b3e34"],

Cell[TextData[{
 "Recall from Section 3.3 of this manual that we can graph a list of points \
by using the ",
 StyleBox[ButtonBox["ListPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ListPlot"], "FunctionLink"],
 " function applied to a list of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "db652d2e-603f-4a85-8641-15a09b466f19"],
 "\[Dash]",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "47672c00-a166-4a93-a30a-969406036d1d"],
 " pairs. Our ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "05dd8e62-d4a7-4b68-a767-657c5a8a6a48"],
 " values will be the integers from 2 to 1000 (we omit 1 since there are no \
primes less than or equal to 1)."
}], "Text",ExpressionUUID->"2baae527-53d3-41b0-81af-8594b98c2522"],

Cell[TextData[{
 "To find the number of primes not exceeding ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "beadd1d6-dd7c-41f2-8607-bbcaaea7f0c2"],
 ", we use the function ",
 StyleBox[ButtonBox["PrimePi",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PrimePi"], "FunctionLink"],
 ". The expression ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Pi]", "(", "x", ")"}], TraditionalForm]],ExpressionUUID->
  "45201bd4-1312-4f5a-afe5-3313e82360e6"],
 " is the standard notation for the number of primes less than or equal to ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "3c7541a6-5703-4957-8509-8d64c035472d"],
 ". The symbol ",
 StyleBox[ButtonBox["PrimePi",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PrimePi"], "FunctionLink"],
 " distinguishes this function in the Wolfram Language from the mathematical \
constant, which is given the symbol ",
 StyleBox[ButtonBox["Pi",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Pi"], "FunctionLink"],
 ". To calculate the number of primes less than or equal to 1000, for \
example, we enter the following."
}], "Text",ExpressionUUID->"817e3f20-97d5-4bb7-ae22-d652b87ac71a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PrimePi", "[", "1000", "]"}]], "Input",
 CellLabel->"In[69]:=",ExpressionUUID->"266e2b02-f4e8-4816-b54a-231969101036"],

Cell[BoxData["168"], "Output",
 CellLabel->"Out[69]=",ExpressionUUID->"596e58bc-1e46-4d68-82ba-d2a51563e5a9"]
}, Open  ]],

Cell[TextData[{
 "We use the ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " function to produce the list of pairs ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"\[Pi]", "(", "x", ")"}]}], "}"}], TraditionalForm]],
  ExpressionUUID->"4a3c98ab-af0e-45fb-a2d7-05838104c060"],
 ", which we will graph."
}], "Text",ExpressionUUID->"7e79abd8-0202-4f58-b165-e353ef5e24b7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"piList", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"PrimePi", "[", "x", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "1000"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[70]:=",ExpressionUUID->"736db735-c057-4bd0-8d23-85ad58b717fa"],

Cell[TextData[{
 "As we did in the solution to Computer Project 10 of Chapter 3, we will \
graphically compare the values of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Pi]", "(", "x", ")"}], TraditionalForm]],ExpressionUUID->
  "e0bbafc9-62f2-4aa0-abd9-a965c4da8565"],
 " to the function ",
 Cell[BoxData[
  FormBox[
   FractionBox["x", 
    RowBox[{"ln", " ", "x"}]], TraditionalForm]],ExpressionUUID->
  "96dfdad0-bec8-4e40-9245-7ccfbb66ea4d"],
 ". We will define two graphics objects and then combine them with the ",
 StyleBox[ButtonBox["Show",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Show"], "FunctionLink"],
 " function. Refer to Chapter 3 of this manual, particularly Section 3.3 and \
the solution to Computer Project 10, for detailed information about the \
commands ",
 StyleBox[ButtonBox["ListPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ListPlot"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Plot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plot"], "FunctionLink"],
 " that we use here."
}], "Text",ExpressionUUID->"2b3ee1c5-cf32-42be-8eef-6d2fb6939153"],

Cell[TextData[{
 "We also use the legending functions ",
 StyleBox[ButtonBox["Legended",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Legended"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["LineLegend",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/LineLegend"], "FunctionLink"],
 ". For a single application of ",
 StyleBox[ButtonBox["Plot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plot"], "FunctionLink"],
 ", you can use the ",
 StyleBox[ButtonBox["PlotLegends",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PlotLegends"], "FunctionLink"],
 " option to very easily add a legend to the plot. That option is not \
available to ",
 StyleBox[ButtonBox["Show",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Show"], "FunctionLink"],
 ", however. Instead, you must use the more general function ",
 StyleBox[ButtonBox["Legended",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Legended"], "FunctionLink"],
 " and manually construct the legend with ",
 StyleBox[ButtonBox["LineLegend",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/LineLegend"], "FunctionLink"],
 " (or one of the related functions such as ",
 StyleBox[ButtonBox["PointLegend",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PointLegend"], "FunctionLink"],
 " or ",
 StyleBox[ButtonBox["SwatchLegend",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/LineLegend"], "FunctionLink"],
 "). In this context, ",
 StyleBox[ButtonBox["Legended",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Legended"], "FunctionLink"],
 " can be thought of as a wrapper containing a graphics object, or more \
precisely an expression that produces a graphics object, as the first \
argument, and a call to a function that creates a legend as the second \
argument. The ",
 StyleBox[ButtonBox["LineLegend",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/LineLegend"], "FunctionLink"],
 " function generally takes two arguments: first a list of colors and second \
a list of labels for the color in the corresponding position."
}], "Text",ExpressionUUID->"5a4f46c7-16ef-40c6-b233-9dc05367f8f6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"piPlot", "=", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"piList", ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Blue"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[71]:=",ExpressionUUID->"e7d5817b-844a-4556-95ce-f53ad417fa3d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"xlnxPlot", "=", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"x", "/", 
      RowBox[{"Log", "[", "x", "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "2", ",", "1000"}], "}"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[72]:=",ExpressionUUID->"61a0bed0-8d5b-4195-8d0a-e014a1857d45"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Legended", "[", 
  RowBox[{
   RowBox[{"Show", "[", 
    RowBox[{"piPlot", ",", "xlnxPlot"}], "]"}], ",", 
   RowBox[{"LineLegend", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Blue", ",", "Red"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<\!\(\*Cell[TextData[Cell[BoxData[FormBox[RowBox[{\"\[Pi]\", \
RowBox[{\"(\", \"x\", \")\"}]}], \
TraditionalForm]],ExpressionUUID->\"853597b9-575f-4483-a4fb-9d08f7a51d8c\"]],\
ExpressionUUID->\"cf3c6c34-693e-4468-9e13-4b11d0f5f6d2\"]\)\>\"", ",", 
       "\"\<\!\(\*Cell[TextData[Cell[BoxData[FormBox[
FractionBox[\"x\", RowBox[{\"ln\", \"(\", \"x\", \")\"}]], \
TraditionalForm]],ExpressionUUID->\"7b8d233c-fd45-4ada-9181-46e96989d338\"]],\
ExpressionUUID->\"725e918f-179a-4122-99db-3357ddb6a782\"]\)\>\""}], "}"}]}], 
    "]"}]}], "]"}]], "Input",
 CellLabel->"In[73]:=",ExpressionUUID->"85548459-6a01-4a7b-85df-8f4c65ff3116"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {{{}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.0055000000000000005`], 
          AbsoluteThickness[1.6], 
          RGBColor[0, 0, 1]], 
         PointBox[CompressedData["
1:eJxd2znww0YVx/EdaFyqoHCRYskwjIdhGIXTnFlCEgwEEOEyt8iFIZCI2yQB
ltvcKl2qdKnS5ZYuVbrc0qVKlwzD+/2Z/brRfKzLkixp9723b33u1WdffJNz
7vZm5/47/d9nftyVn1B+vwjl9xX8llAut4QfwXoefhR+G/x27GcFvwP7fSf8
LriGH8PvfDf8Hvzu98Lvg98Pf8Cmj9p0DX8Q/hD8Yfgj8EdtqvP2Mfhxm+o8
htIRdh/HfNg9gfmyrssnSkfYPYn5sq7jU6WjrOv6dOkIu09ivqz/waZ0hN2n
MB92n8Z8Wf+rz5SOsHsG82H3WcyX9T/9XOko63/7+dIRdk3pAEc4yboPvlA6
wBFOsu6bZ0sH2e6jCCfYfbF0gCOcZN2XXyod4AgnWffxl0sHOMIJdl/B+rI9
FyKcYPfV0gGOcILdFuvL9hyKcILd10oH2Z5bEU6ynmNfLx3gCCdZz71vlA6y
PQcjnGD3zdJBtudmhBPsvlU6wBFOsPs21ocjnGD3HawPRzjJeg+0pT0c4Fa2
90SEBzjBGXbfLe3Neg8FuNXy9h6K8AAnOMPuudIeDnALR3gw6z2Z4Kzln7Dp
86U9HOAWjvBg1ns4wRl2L5T2cIBbs97rER7gBGdtT+2AF0t7OMAtHOHBrHZF
gjPsXirt4QC3ZrVTIjxoeWunJDjD7nulPRzgFo7wACc4mx/aUbvS3qx2VYBb
OMKDtmdOcNbyaod9v7SHA9zCER7gBGfY/QD7hwPcmtWOjPAAJzjD7uXSHg5w
C0d4gBOczQ/t3h+W9nCAW7PayREetLy1kxOcYfej0t6sdnaAWzjCA5zgrP2p
nf5KaW9WOz7ALRzhAU5wht2rpT0c4NasfkWEBzjBGXZd6cqsfoqHazjADdzC
nfZn/ZwI9/AAj3CCJ+3PnOFZy6sf9ePSFezhGg5wY1Y/rYU7OMK9tmf9uAEe
tbw5wROc4Rl2PyldwR6u4QA3ZvU7W7iDI9zDAzzCCZ7gDM+w+2npCvZwbVY/
OsAN3MKdtmf96Aj3ZvXDB3iEEzxpf+YMz7D7WekK9nANB7iBW7iDI9zDAzya
FYdI8ARneIbdz0tXZsU1PFzDAW7gFu7gCPfwAI9mxVkSPJkVd8nwDLtflK7M
itN4uIYD3MAt3JkV94lwDw/wCCd4gjM8mx/iTL8sXcEeruEAN2bFrVq4gyPc
wwM8mhUHS/AEZ3g2P8TN9qUr2MM1HODGrDhcC3dwhHt4gEc4wZNZcb8Mz7D7
VenKrDihh2s4wA3cwh0c4d6suOQAj3CCJzjDM+xeK13BHq7NipMGuDErbtrC
HRzhHh7gEU7wBGd4Nj/EcV8vXZkV1/VwDQe4gVu4MytOHOEeHuDRrLhygic4
wzPs3ihdmRWn9nANB7iBW7iDI9ybFRcf4BFO8GRWHD3Ds45XcfRfl65gD9dm
xeED3MAt3MER7uEBHuEET3CGZ/ND3uA3pSvYwzUc4AZu4c6sPEWEe3iAR7Py
Ggme4AzPsPtt6Qr2cG1WHiXADdzCnVl5lwj38ACPcIIns/I4GZ5hF0sv4Ape
wh5ewTW8hgO8MSvv1MBbs/JQLbyDO3gPR/gA9/ARHuATPMJnOMEXeIKvcIZv
ZuXlZvgOu9+VXsAVvDQrz+fhFVzDazjAG7iBt3AL78zKO3bwHo7wAe7ho1l5
zAE+wSN8hhN80fm2POcEX3W85gzf4Bm+w+73pRdm5V0reAl7eAXX8BoO8AZu
4K1ZeeAW3sEdvIcjfDArr9zDR3iAT/AIn83KUyf4YlbeeoKvcIZv8AzfzQ95
8D+UXsAVvIQ9vDIrr17DazjAG7Py8A28NSsv38I7uIP3cIQPcA8f4QE+wSN8
1vkyJ/gCT/AVzvANnuE77P5YemFWXUMFL82qc/DwCq7htVl1EQHewA28hVt4
p+Mxd/AejvAB7uGjzofVYQzwScdrHuEznOALPMFXOMM3eIbvsPtT6YVZdScV
vIQ9vDKrTqWG13CAN3ADb82qe2nhHdzBezjCB7iHjzpf5gE+wSN8hhN8gSf4
Cmf4puthnuE77P5cegFX8BL28MqsOqMaXsMB3sANvIVbeAd38N6suqcIH+Ae
PsIDfIJH+GxWnVWCL/AEX+EM38yq25rhO+z+UnoBV/DSrDowD6/gGl6bVTcW
4A3cwFu4hXdwB+/NqlOL8AHu4SM8wCez6t5G+Awn+GJWndwEX+EM3+AZvsPu
UHphVl1eBS9hD6/MquOr4TUc4A3cwFu4hXdwB+/hCB/gHj6aVZc4wCd4hM9w
gi/wBF/hDN/MqpOc4Tvs/lp6AVfwEvbwCq7hNRzgjVl1nQ28NavOs4V3cAfv
4Qgf4B4+wgN8MqvudITPZtWhJvgCT/DVrLrVDN/MqmOd4Tvs/lZ6AVfwEvbw
Cq7htVl1tQHewA28hVt4B3fwHo7wAe7hIzzAJ7PqhEf4DCf4YlZd8QRfzaoz
zvANnuG7OZnd30sv4Apewh5ewTW8hgO8gRt4C7fwzpzNHbyHI3wwqy67h49m
1WkP8Ake4bNZdd0JvsATfIUzfINn+A67f5RewBW8hD28gmt4DQd4Azfw1qw6
+BbewR28N6tuPsIHuIeP8ACf4BE+m1Wnn+ALPMFXOMM3eIbvsPtn6YVZ4wYq
eAl7eAXX8BoO8MascQoNvIVbeGfWuIYO3sMRPsA9fDRrnMQAn+ARPsMJvpg1
7mKCr3CGb/AM32H3r9ILuIKXsIdXcA2vzRpHEuAN3MBbs8adtPAO7uA9HOGD
WeNYevgID/AJHuGzWeNiEnyBJ/gKZ/gGz/DdrHE47t+lF3AFL2EPr8wa11PD
azj83/8BnnkG9A==
          "]]}, {}}}, {}, {}, {}, {}}, {{{{}, {}, 
        TagBox[{
          Directive[
           Opacity[1.], 
           AbsoluteThickness[1.6], 
           RGBColor[1, 0, 0]], 
          LineBox[CompressedData["
1:eJwVkGk4FAgAhl0zhoZkZhzVOqNkBrGRcnyi5MgxRpKrGVcqnZSropgizcRo
tClHK1utaNgok1zFZqaclQ62NoZl8Wyi2nbZ9sf3vH/eH+/zGXL2M6MV5OTk
tn/b//Ssu35LVU4OjlIfAWjKULVJGpMdUoB4g20um0pEZ7W7cduIEp4Iy1iC
NgJy6NrhJdu/eUGl+QlSArxuyC6mSlQgrrgYepREBNm0ri/IiYzayaumI5FE
SK9mqX8vUsfB8UrFn/uIaOffXEHK14BGD0mg568MUx/NjUckS0DIeWtIGFAG
l5wSMaxEQcD4cHl+NAmyzndpTCcqnIdOcAc/kVDhLqq3EGnBy6VrZ6WJKkxd
/BijwmWY/teV2ZxPBneh3jOwezlONX4NDLdUg6xRf1ebih4IBhr3KFI1BFw5
2uPrZICtC83DjoTFoCx1J9NFRrguKbir36ABAUWWMSxcCSfzdK1DehR0/mNF
fy9cC7N0TY/5ZctR0GxOkcZtgnuam9NyqSkoNddzFVi+sGDFDNM9LKDtlrnf
jstCpaEcbaHEGuLnxezfJcFQKSUUu7rYQtllyj+1PhynGHt7OrLtkWhWkOVG
5KCYdoFYLu+IcxNxA9vLo5B60+6BtjmQrLtjdRQtFpazs16ZIhesKWp6ayaO
w8pVBq7fMV3ReMZZKLPZC8HaHYOJPW7Yb/m5xap0H46tJBeXum3GHJVy41Lp
ATw5sC+3qtcd+lvqD1x8dRDJ1GvHjTZ6gGEi3D1jcRhl7MG0DKknusLz9GnH
EnC6f8FfydsbIU91WTW/JOLX35bqVFVthXT0TUMl8SisvEkhfnRfrLJjlBlt
TEJKTeWjqc1+2G11995sYTLudxUkGBL84cyNOMcfTQF12jHjwgN//Luk4G25
QRp0b+5JztzNRJm7Yox2wjE0pBv69hoHwLJ2YTdBdByRn59Zv+wKgH+qjnnD
6AmU/OH7tfjot1/n7qjHXE7HRF8aauiBuOZZ0VFpn4G0R67kF/2ByJup1TUa
zkDF3Ezk2pxt6Oj0fZxy9iTiB4Nc4zcE4YNDzbq8lafwJrrfQf5tEDSUrF2e
d59Ccq55sDhvO4xjklRe7svECK/2y6xtME7MeVs2qWRB0HwzMmAgGE9fO031
ibLgQDRobePugGbop70VPlzc9s5g/rkqBB5rnmT+9JmLeNuiMdpACBLL4kJj
Ck8j1GXImZoaignngjySzRkU1Y1Uhy4NA8vmTcTL12fwJYs/JGgPQ03L+GRs
cjY++PWLpDHhULymRTNZkQOSne3ge0oErtR1//BIkoNxVaNq78YI0CP9h4x3
nQWdFD+2n7ETVVHT4ttLcnHIbtN0ycmdMJFnBX+tzgVr/uO26Z6dkEk2s8y8
zmEDo5Oaps/GpYltY1kz5/BuEZEae5gN1wqGQ+l5HmyDTlJOtrBBstcUhwl4
SG5IiRlqZUMqmbNfJuTBrqn6zvqHbLD+arITFvFA3NazZaadjSgHpk1uBQ97
mPMuUVI2MnuPrE66z8M6cmj6phdstM836fiN8ZAURrQiTLKRk1deqDbBQzA9
YhF7ig2fFdlakkke4sXy7+9Ps/Hcg0ndPMND9l2T0wkf2BgtGF7sMM9D3fGP
V99/+tZnrqK8isqHdZKyWYsCB9LGyawRLT76q+iPlytxcN6vV+lHXT4GaFej
kwgc6BwpUtDT58NL/YTAksSBWQtjnrKaD6dn5LYrahxMBWge66HzIRM/2PRF
nYMa2dxXniUfuxQfPmRpcLCe3PxFZS0fd7w66xdROJgvLk/qsOPjlrbUPJbK
Qeua7E+Z6/l48crociuNA+7D+CMbHfko/PspSU+bA88g5uyCMx+Ob7oPJutw
8B9JOGaY
           "]]}, 
         Annotation[#, "Charting`Private`Tag$2345#1"]& ]}}, {}, {}}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, AxesOrigin -> {0, 0}, 
     PlotRange -> {{0, 1000.}, {0, 168.}}, PlotRangeClipping -> True, 
     ImagePadding -> All, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, PlotRange -> {{0, 1000.}, {0, 168.}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"\\!\\(\\*Cell[TextData[Cell[BoxData[FormBox[\\n \
RowBox[{\\\"\[Pi]\\\", RowBox[{\\\"(\\\", \\\"x\\\", \\\")\\\"}]}], \
TraditionalForm]]]]]\\)\"", 
       "\"\\!\\(\\*Cell[TextData[Cell[BoxData[FormBox[\\nFractionBox[\\\"x\\\"\
, RowBox[{\\\"ln\\\", \\\"(\\\", \\\"x\\\", \\\")\\\"}]], \\n  \
TraditionalForm]]]]]\\)\""}, "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0, 0, 1], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[1, 0, 0], Editable -> False, Selectable -> False]}], 
             "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellLabel->"Out[73]=",ExpressionUUID->"dccae6bd-a273-4789-8eb2-653b68c8032c"]
}, Open  ]],

Cell[TextData[{
 "Notice that while the blue line representing ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Pi]", "(", "x", ")"}], TraditionalForm]],ExpressionUUID->
  "5ce3f331-7cf1-42fb-adcb-d202caf2d86b"],
 " seems to remain above the red line representing ",
 Cell[BoxData[
  FormBox[
   FractionBox["x", 
    RowBox[{"ln", " ", "x"}]], TraditionalForm]],ExpressionUUID->
  "50def12c-f65a-4da8-a990-4c020b699f1f"],
 ", it is fairly clear from the graph that they grow at similar rates."
}], "Text",ExpressionUUID->"73cb0c62-3b88-45cf-9a97-d296fc4418f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Greatest Common Divisor and Least Common Multiple", "Subsection",
 CellTags->"Section3d",ExpressionUUID->"0bb3d7c7-e57b-4d19-8d83-fd834d38367e"],

Cell[TextData[{
 "The Wolfram Language provides the functions ",
 StyleBox[ButtonBox["GCD",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GCD"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["LCM",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/LCM"], "FunctionLink"],
 " for computing the greatest common divisor and the least common multiple of \
integers. To compute the greatest common divisor of two integers, you apply \
the ",
 StyleBox[ButtonBox["GCD",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GCD"], "FunctionLink"],
 " function to them."
}], "Text",ExpressionUUID->"752814ab-9a71-40ef-ac14-5f1ac15a988a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GCD", "[", 
  RowBox[{"6", ",", "9"}], "]"}]], "Input",
 CellLabel->"In[74]:=",ExpressionUUID->"7ebf778a-d286-4b0c-ba11-7d095cedf93f"],

Cell[BoxData["3"], "Output",
 CellLabel->"Out[74]=",ExpressionUUID->"9c96955a-ee88-4106-94f9-2323d4dc51d6"]
}, Open  ]],

Cell["\<\
You can also compute the greatest common divisor of more than two integers. \
For more than two integers, the greatest common divisor is defined to be the \
largest integer that is a divisor of all of them. For example, 3 divides 6, \
9, and 12, so:\
\>", "Text",ExpressionUUID->"9d8de1fb-c7b8-4a70-98e1-52d6402e1c9d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GCD", "[", 
  RowBox[{"6", ",", "9", ",", "12"}], "]"}]], "Input",
 CellLabel->"In[75]:=",ExpressionUUID->"d341e9d9-dc01-4626-88a6-bbcfe6a084f4"],

Cell[BoxData["3"], "Output",
 CellLabel->"Out[75]=",ExpressionUUID->"b97fe53c-61a2-4639-b934-bc7c525f73ea"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["LCM",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/LCM"], "FunctionLink"],
 " command finds the least common multiple of two or more integers. For \
example, "
}], "Text",ExpressionUUID->"2cd758ae-38a2-4727-a6e5-6436abd77695"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LCM", "[", 
  RowBox[{"6", ",", "9"}], "]"}]], "Input",
 CellLabel->"In[76]:=",ExpressionUUID->"3838faab-a08b-41d1-ae6e-56fd6b71d9ca"],

Cell[BoxData["18"], "Output",
 CellLabel->"Out[76]=",ExpressionUUID->"71e4b7f8-650c-46ed-b171-3fc96ce25d8d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LCM", "[", 
  RowBox[{"12", ",", "18", ",", "33"}], "]"}]], "Input",
 CellLabel->"In[77]:=",ExpressionUUID->"86f90bad-60a9-4d7f-9094-c1b15db61f44"],

Cell[BoxData["396"], "Output",
 CellLabel->"Out[77]=",ExpressionUUID->"70ce2b40-d0ce-4731-bfe8-fb8291c57174"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Relatively Prime", "Subsubsection",ExpressionUUID->"22856124-92d3-4ea8-988f-cd1ff5760e3d"],

Cell["\<\
Recall from the text that two numbers are said to be relatively prime if \
their greatest common divisor is 1. For example, consider 10 and 21. \
\>", "Text",ExpressionUUID->"d4d93fa9-9882-4df9-adee-9fe079eafde2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GCD", "[", 
  RowBox[{"10", ",", "21"}], "]"}]], "Input",
 CellLabel->"In[78]:=",ExpressionUUID->"c85d9722-5c97-4d98-a842-b7036ef1ed7b"],

Cell[BoxData["1"], "Output",
 CellLabel->"Out[78]=",ExpressionUUID->"37568045-7900-450d-86a4-f795b7d4394e"]
}, Open  ]],

Cell[TextData[{
 "Since ",
 StyleBox[ButtonBox["GCD",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GCD"], "FunctionLink"],
 " returned 1, we conclude that 10 and 21 are relatively prime. "
}], "Text",ExpressionUUID->"eede3e2e-27c1-46cf-9d8b-430b88b74fcd"],

Cell[TextData[{
 "The Wolfram Language function ",
 StyleBox[ButtonBox["CoprimeQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/CoprimeQ"], "FunctionLink"],
 ", applied to two integers, returns true if they are relatively prime and \
false if not."
}], "Text",ExpressionUUID->"36b3ee24-036f-4eb0-a478-3a7d84f21b4d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CoprimeQ", "[", 
  RowBox[{"3", ",", "6"}], "]"}]], "Input",
 CellLabel->"In[79]:=",ExpressionUUID->"b3efe2ca-e9a1-4016-a317-daff82b18ee5"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[79]=",ExpressionUUID->"f271de4a-feb2-4652-9a92-6cf4c500de00"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CoprimeQ", "[", 
  RowBox[{"22", ",", "15"}], "]"}]], "Input",
 CellLabel->"In[80]:=",ExpressionUUID->"6636c91d-ec2b-4c31-82d9-6f113c8f3f1b"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[80]=",ExpressionUUID->"43ee5d2c-aceb-4a80-beff-251baa42cda9"]
}, Open  ]],

Cell[TextData[{
 "Also recall that a list of integers ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "1"], ",", 
    SubscriptBox["a", "2"], ",", "\[Ellipsis]", ",", 
    SubscriptBox["a", "n"]}], TraditionalForm]],ExpressionUUID->
  "d5e7dfcc-4fa8-4ec8-818a-068e663971c1"],
 " are said to be pairwise relatively prime if ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"gcd", "(", 
     RowBox[{
      SubscriptBox["a", "i"], ",", 
      SubscriptBox["a", "j"]}], ")"}], "=", "1"}], TraditionalForm]],
  ExpressionUUID->"25c4d986-6561-488e-a001-760ac5b7165f"],
 " whenever ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "\[LessEqual]", "i", "<", "j", "\[LessEqual]", "n"}], 
   TraditionalForm]],ExpressionUUID->"abc5bdaf-a6f8-4339-911e-976273a6cdf5"],
 ". That is, when every pair is relatively prime. The ",
 StyleBox[ButtonBox["CoprimeQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/CoprimeQ"], "FunctionLink"],
 " function, applied to more than two integers, tests this property."
}], "Text",ExpressionUUID->"5ee47f5f-45d9-4572-8e15-aad7d9424d19"],

Cell["Observe that 14, 39, and 55 are pairwise relatively prime.", "Text",ExpressionUUID->"ac2cade1-86a3-4f1d-8ee7-5221a8d16aa5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CoprimeQ", "[", 
  RowBox[{"14", ",", "39", ",", "55"}], "]"}]], "Input",
 CellLabel->"In[81]:=",ExpressionUUID->"fc0498a9-2424-4a4e-92f2-192d933a6f9b"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[81]=",ExpressionUUID->"2836deff-d407-4b30-abe2-53f3d6550ff3"]
}, Open  ]],

Cell["\<\
However, 42, 165, and 182 are not pairwise relatively prime, since 42 and 182 \
are both even, even though the common GCD of all three integers is 1.\
\>", "Text",ExpressionUUID->"34b37f56-6d6f-4743-a902-1d8c63657862"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GCD", "[", 
  RowBox[{"42", ",", "165", ",", "182"}], "]"}]], "Input",
 CellLabel->"In[82]:=",ExpressionUUID->"e9fb41a8-8a2d-4bd3-8b19-eec41aaadf0d"],

Cell[BoxData["1"], "Output",
 CellLabel->"Out[82]=",ExpressionUUID->"261c5f66-3754-4ba1-a525-21bd4f1370d2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CoprimeQ", "[", 
  RowBox[{"42", ",", "165", ",", "182"}], "]"}]], "Input",
 CellLabel->"In[83]:=",ExpressionUUID->"ad8059a3-1fc9-464c-a658-fd356af9c0cc"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[83]=",ExpressionUUID->"6831f294-75d0-415e-98a2-d6080a63a52b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Extended Euclidean Algorithm", "Subsubsection",ExpressionUUID->"9cb8289c-fc00-4dc5-821e-da368270f4d5"],

Cell[TextData[{
 "While ",
 StyleBox[ButtonBox["GCD",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GCD"], "FunctionLink"],
 " is useful for calculating the greatest common divisor of integers, it is \
sometimes desirable to be able to express the greatest common divisor as an \
integral combination of the integers. Specifically, given integers ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "3175a529-71c6-42d3-959f-8869be133034"],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "48ab9f72-4ada-4811-89b9-91d192c8caa0"],
 ", we may wish to express ",
 Cell[BoxData[
  FormBox[
   RowBox[{"gcd", "(", 
    RowBox[{"a", ",", "b"}], ")"}], TraditionalForm]],ExpressionUUID->
  "97b742e4-75fb-49ee-bb66-646b3e8c2b8a"],
 " as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"s", "\[CenterDot]", "a"}], "+", 
    RowBox[{"t", "\[CenterDot]", "b"}]}], TraditionalForm]],ExpressionUUID->
  "e348168e-7d7d-4304-9382-16d06ba45744"],
 " where ",
 Cell[BoxData[
  FormBox["s", TraditionalForm]],ExpressionUUID->
  "26557606-7cb1-4988-8c08-a8370cc69eda"],
 " and ",
 Cell[BoxData[
  FormBox["t", TraditionalForm]],ExpressionUUID->
  "a904243c-d30a-43ee-b181-6216ab5e90bb"],
 " are integers. The fact that such integers always exist is known as B\
\[EAcute]zout\[CloseCurlyQuote]s Theorem, given in the text as Theorem 6 of \
Section 4.3. Following Theorem 6, the text describes the extended Euclidean \
algorithm, which produces not only the greatest common divisor but also the \
integers ",
 Cell[BoxData[
  FormBox["s", TraditionalForm]],ExpressionUUID->
  "068f968e-e723-4336-bb70-d8a260f23e5c"],
 " and ",
 Cell[BoxData[
  FormBox["t", TraditionalForm]],ExpressionUUID->
  "a74a6eb3-1f8c-4ed9-9fcf-5f22fd780ab3"],
 ", called the B\[EAcute]zout coefficients. "
}], "Text",ExpressionUUID->"5655f48d-7e6e-49bb-b353-c42c1ad498be"],

Cell[TextData[{
 "In the Wolfram Language, the function ",
 StyleBox[ButtonBox["ExtendedGCD",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ExtendedGCD"], "FunctionLink"],
 " is an implementation of the extended Euclidean algorithm. This function \
accepts two or more integers as arguments. It returns a list whose first \
element is the greatest common divisor of the arguments and whose second \
element is a sublist whose members are the B\[EAcute]zout coefficients. As an \
example, consider 252 and 198, the values used in Example 17 of the \
textbook."
}], "Text",ExpressionUUID->"d4daa894-2a25-49db-94cb-f43ef87f1a34"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExtendedGCD", "[", 
  RowBox[{"252", ",", "198"}], "]"}]], "Input",
 CellLabel->"In[84]:=",ExpressionUUID->"b705e0ad-f90c-4afd-b0aa-f49a369004dc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"18", ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", 
     RowBox[{"-", "5"}]}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[84]=",ExpressionUUID->"aa960ad3-6867-4867-8b16-154d3d347b7f"]
}, Open  ]],

Cell[TextData[{
 "The results above indicate that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"gcd", "(", 
     RowBox[{"252", ",", "198"}], ")"}], "=", 
    RowBox[{"18", "=", 
     RowBox[{
      RowBox[{"4", "\[CenterDot]", "252"}], "-", 
      RowBox[{"5", "\[CenterDot]", "198"}]}]}]}], TraditionalForm]],
  ExpressionUUID->"22e3b3b5-4285-4ddb-8ed6-7c027c1a6802"],
 ". Note that the order of the coefficients is the same as the order of the \
arguments to the function. "
}], "Text",ExpressionUUID->"733a3102-b868-429d-a515-e77c8c592292"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4.4 Solving Congruences", "Section",
 CellTags->"Section4",ExpressionUUID->"82e3ebb3-01a4-4304-bf7d-4f0041b20090"],

Cell[TextData[{
 "In this section, we will see how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can be used to solve congruences. We will begin the section by looking at \
how to find inverses and solve linear congruences. We will then consider the \
Chinese Remainder Theorem. Next, we will use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to find pseudoprimes, and we conclude with an exploration of primitive \
roots and discrete logarithms. "
}], "Text",ExpressionUUID->"1dca87a6-6cb3-4b36-8d4d-06d881d5be0d"],

Cell[CellGroupData[{

Cell["Modular Inverses", "Subsection",
 CellTags->"Section4a",ExpressionUUID->"40e9b378-fb11-4884-ba39-e6c0932264ee"],

Cell[TextData[{
 "Example 1 of Section 4.4 of the text demonstrates how B\[EAcute]zout \
coefficients can be used to find the inverse of an integer modulo a number. \
In the previous section of this manual, we saw that the ",
 StyleBox[ButtonBox["ExtendedGCD",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ExtendedGCD"], "FunctionLink"],
 " function can be used to obtain the B\[EAcute]zout coefficients. "
}], "Text",ExpressionUUID->"e1a23084-b448-4071-8e14-0fcd65a300ba"],

Cell[CellGroupData[{

Cell[TextData[{
 "Finding Inverses with ",
 StyleBox["ExtendedGCD", "Code"]
}], "Subsubsection",ExpressionUUID->"28af9588-c96d-4467-9859-7a073ea71cae"],

Cell[TextData[{
 "For example, to find the inverse of ",
 Cell[BoxData[
  FormBox["264", TraditionalForm]],ExpressionUUID->
  "2bec2d2d-1650-464b-935c-00e94716768a"],
 " modulo ",
 Cell[BoxData[
  FormBox["3185", TraditionalForm]],ExpressionUUID->
  "dbd027cc-387a-4ce9-aea3-8e265390b593"],
 ", we need to find ",
 Cell[BoxData[
  FormBox["s", TraditionalForm]],ExpressionUUID->
  "1c1c8162-888b-4ece-9517-95c141e33862"],
 " so that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"s", "\[CenterDot]", "264"}], "+", 
     RowBox[{"t", "\[CenterDot]", "3185"}]}], "=", "1"}], TraditionalForm]],
  ExpressionUUID->"8cec6ff1-af97-40c9-a5fc-2de1c1591a94"],
 ", provided that ",
 Cell[BoxData[
  FormBox["264", TraditionalForm]],ExpressionUUID->
  "6dacbddf-0d1f-4945-896b-10602ce6fed3"],
 " and ",
 Cell[BoxData[
  FormBox["3185", TraditionalForm]],ExpressionUUID->
  "d4dfcfc8-d3d3-464d-99b6-b7b058cb113f"],
 " are relatively prime. "
}], "Text",ExpressionUUID->"e800e89a-8c07-42e0-be94-308a01c097ef"],

Cell[TextData[{
 "Recall that ",
 StyleBox[ButtonBox["ExtendedGCD",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ExtendedGCD"], "FunctionLink"],
 " applied to two integers returns a structure of the form ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    StyleBox["gcd", "CodeVar"], ",", 
    RowBox[{"{", 
     RowBox[{
      StyleBox["s", "CodeVar"], ",", 
      RowBox[{
       StyleBox["t", "CodeVar"], 
       RowBox[{"}", "}"}]}]}]}]}]}]], "myCode",ExpressionUUID->
  "ab6e7dbb-e457-47a3-bc37-ac923001d665"],
 " where ",
 StyleBox["gcd", "CodeVar",
  IgnoreSpellCheck->True],
 " is the greatest common divisor of the two integers, and ",
 StyleBox["s", "CodeVar"],
 " and ",
 StyleBox["t", "CodeVar"],
 " are the B\[EAcute]zout coefficients. Knowing that this is always the form \
of the output, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " allows us to assign the result of ",
 StyleBox[ButtonBox["ExtendedGCD",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ExtendedGCD"], "FunctionLink"],
 " to a structure of that form. This has the effect of assigning the symbols \
to the corresponding numbers in the output."
}], "Text",ExpressionUUID->"6200cdc9-406d-4664-9685-f3c2cfc7496f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"gBezout", ",", 
    RowBox[{"{", 
     RowBox[{"sBezout", ",", "tBezout"}], "}"}]}], "}"}], "=", 
  RowBox[{"ExtendedGCD", "[", 
   RowBox[{"264", ",", "3185"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[85]:=",ExpressionUUID->"501df3c8-9495-48ca-8ba2-4183a774e210"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"{", 
    RowBox[{"374", ",", 
     RowBox[{"-", "31"}]}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[85]=",ExpressionUUID->"3c7cf789-4b38-44c6-9212-06d2e80a722e"]
}, Open  ]],

Cell[TextData[{
 "Since the first element is 1, we know that ",
 Cell[BoxData[
  FormBox["264", TraditionalForm]],ExpressionUUID->
  "de25128d-4dd9-4f75-a8b3-6f2c27012ad8"],
 " and ",
 Cell[BoxData[
  FormBox["3185", TraditionalForm]],ExpressionUUID->
  "55180019-ae28-446d-9dea-9e1de39e771a"],
 " are relatively prime. In addition, the assignment has caused the \
B\[EAcute]zout coefficients to be stored in the symbols."
}], "Text",ExpressionUUID->"b8fb4059-3943-4a25-b584-031747cb1d75"],

Cell[CellGroupData[{

Cell[BoxData["sBezout"], "Input",
 CellLabel->"In[86]:=",ExpressionUUID->"d4bcc6b6-be6c-4d93-96d5-79698fe29036"],

Cell[BoxData["374"], "Output",
 CellLabel->"Out[86]=",ExpressionUUID->"42d44469-9655-464a-b609-cb1278006737"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["tBezout"], "Input",
 CellLabel->"In[87]:=",ExpressionUUID->"cda8e975-b443-41d3-b4fa-de61dcee8596"],

Cell[BoxData[
 RowBox[{"-", "31"}]], "Output",
 CellLabel->"Out[87]=",ExpressionUUID->"83df8cca-979b-489e-b2d4-2c821cc24901"]
}, Open  ]],

Cell[TextData[{
 "This indicates that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "=", 
    RowBox[{
     RowBox[{"374", "\[CenterDot]", "264"}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"-", "31"}], ")"}], "\[CenterDot]", "3185"}]}]}], 
   TraditionalForm]],ExpressionUUID->"4403f87b-9da5-4b4e-9b26-a9a52385b19c"],
 ". And thus, ",
 Cell[BoxData[
  FormBox["374", TraditionalForm]],ExpressionUUID->
  "5c797982-3e14-4278-bb09-b0248e57addb"],
 " is the inverse of ",
 Cell[BoxData[
  FormBox["264", TraditionalForm]],ExpressionUUID->
  "458a8761-5dca-46df-85e8-ced02defd86f"],
 " modulo ",
 Cell[BoxData[
  FormBox["3185", TraditionalForm]],ExpressionUUID->
  "7a852017-5f8a-4073-85eb-5751f5f038c2"],
 ". We can confirm this by computing the product modulo ",
 Cell[BoxData[
  FormBox["3185", TraditionalForm]],ExpressionUUID->
  "ebc8094e-a771-4cc3-bd17-6ecea433ccfb"],
 "."
}], "Text",ExpressionUUID->"7f7544ff-8a92-4c85-904d-36629926ab98"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mod", "[", 
  RowBox[{
   RowBox[{"374", "*", "264"}], ",", "3185"}], "]"}]], "Input",
 CellLabel->"In[88]:=",ExpressionUUID->"c539d5f4-38ed-4bc7-beef-77bfd5257d88"],

Cell[BoxData["1"], "Output",
 CellLabel->"Out[88]=",ExpressionUUID->"0f9853f6-9438-4c99-9fd7-cb5e6427f49f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Finding Inverses with ",
 StyleBox["PowerMod", "Code"]
}], "Subsubsection",ExpressionUUID->"29260dfd-8326-471e-8e88-10accc9daa7b"],

Cell[TextData[{
 "The Wolfram Language provides a simpler way to compute the modular inverse. \
The textbook uses the notation ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["a", "_"], TraditionalForm]],ExpressionUUID->
  "231b9900-4ed5-494d-96c5-d05a1ceaa82e"],
 " to indicate the modular inverse of an integer. An alternate notation is ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["a", 
    RowBox[{"-", "1"}]], TraditionalForm]],ExpressionUUID->
  "cb45866c-16a5-468b-9b7a-449043507dbd"],
 ", which calls to mind the notation used for reciprocals, as in ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["3", 
     RowBox[{"-", "1"}]], "=", 
    FractionBox["1", "3"]}], TraditionalForm]],ExpressionUUID->
  "80cfb9bd-97a5-4a32-a13f-c03e57ae990b"],
 ". "
}], "Text",ExpressionUUID->"4b57636c-82ea-4262-960b-49e6554ecc52"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["PowerMod",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PowerMod"], "FunctionLink"],
 " function computes powers of integers in modular arithmetic. It takes three \
arguments: the base integer, the exponent, and the modulus. For example, the \
following computes ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["3", "4"], " ", 
    RowBox[{"(", 
     RowBox[{"mod", " ", "5"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "6ba0e108-0889-4a7d-9e89-0437249c609d"],
 "."
}], "Text",ExpressionUUID->"7c5629c7-d3db-4edd-aa44-55c14e7af2c4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PowerMod", "[", 
  RowBox[{"3", ",", "4", ",", "5"}], "]"}]], "Input",
 CellLabel->"In[89]:=",ExpressionUUID->"5f8df453-cd7f-4efb-b8be-8410109f4392"],

Cell[BoxData["1"], "Output",
 CellLabel->"Out[89]=",ExpressionUUID->"2f3666e4-df43-459f-b803-8eeb5e91c909"]
}, Open  ]],

Cell[TextData[{
 "For positive exponents, ",
 StyleBox[ButtonBox["PowerMod",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PowerMod"], "FunctionLink"],
 " is more efficient than applying ",
 StyleBox[ButtonBox["Mod",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Mod"], "FunctionLink"],
 " with the exponent computed in the argument. Moreover, ",
 StyleBox[ButtonBox["PowerMod",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PowerMod"], "FunctionLink"],
 " accepts negative (and even rational) exponents. In particular, applying ",
 StyleBox[ButtonBox["PowerMod",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PowerMod"], "FunctionLink"],
 " with second argument ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "1"}], TraditionalForm]],ExpressionUUID->
  "85b8af58-5ee4-49d0-8f1a-963dd56f22b4"],
 " computes the modular inverse."
}], "Text",ExpressionUUID->"4440cb4d-e240-435b-a6f2-9c0fdb5bfcac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PowerMod", "[", 
  RowBox[{"264", ",", 
   RowBox[{"-", "1"}], ",", "3185"}], "]"}]], "Input",
 CellLabel->"In[90]:=",ExpressionUUID->"fcdf4408-1f2e-42ff-a6b2-0cf2631fa496"],

Cell[BoxData["374"], "Output",
 CellLabel->"Out[90]=",ExpressionUUID->"5005bbcd-71b7-4c17-b6df-2b609a8b732d"]
}, Open  ]],

Cell["\<\
Note that if the integer and the modulus are not relatively prime, no inverse \
exists and an error is generated.\
\>", "Text",ExpressionUUID->"2ed5b9e5-2ccf-4503-9242-eb28f9117102"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PowerMod", "[", 
  RowBox[{"4", ",", 
   RowBox[{"-", "1"}], ",", "10"}], "]"}]], "Input",
 CellLabel->"In[91]:=",ExpressionUUID->"7323f55c-bb31-421a-bb0c-dee5c2c86163"],

Cell[BoxData[
 TemplateBox[{
  "PowerMod","ninv",
   "\"\\!\\(\\*RowBox[{\\\"4\\\"}]\\) is not invertible modulo \
\\!\\(\\*RowBox[{\\\"10\\\"}]\\).\"",2,91,1,22492274661582984514,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[91]:=",ExpressionUUID->"2acce2aa-af5a-4243-be21-ad3124c60b75"],

Cell[BoxData[
 RowBox[{"PowerMod", "[", 
  RowBox[{"4", ",", 
   RowBox[{"-", "1"}], ",", "10"}], "]"}]], "Output",
 CellLabel->"Out[91]=",ExpressionUUID->"3605fdf0-59f6-468c-8ce8-4dbbe24bbf71"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solving Congruences", "Subsubsection",ExpressionUUID->"42f722e1-23b4-4c77-81ab-9092044c9bde"],

Cell[TextData[{
 "We saw in Section 4.1 of this manual that the ",
 StyleBox[ButtonBox["Solve",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Solve"], "FunctionLink"],
 " function with ",
 StyleBox[ButtonBox["Modulus",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Modulus"], "FunctionLink"],
 " option can be used for solving congruences. We can use this command to \
solve linear congruences such as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"4", "x"}], "\[Congruent]", 
    RowBox[{"3", " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "11"}], ")"}]}]}], TraditionalForm]],
  ExpressionUUID->"ca080fcb-bfdf-4f21-b080-eabb186a89fe"],
 "."
}], "Text",ExpressionUUID->"6b3c0209-7abb-45f7-87e0-9f1087132bff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"4", "*", "x"}], "\[Equal]", "3"}], ",", 
   RowBox[{"Modulus", "\[Rule]", "11"}]}], "]"}]], "Input",
 CellLabel->"In[92]:=",ExpressionUUID->"7a9156eb-2310-452f-b17a-f6a14ae8074b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", "9"}], "}"}], "}"}]], "Output",
 CellLabel->"Out[92]=",ExpressionUUID->"eae1084a-9083-48d3-992b-eaaa89adb873"]
}, Open  ]],

Cell[TextData[{
 "The first argument to ",
 StyleBox[ButtonBox["Solve",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Solve"], "FunctionLink"],
 " is the congruence expressed with an ",
 StyleBox[ButtonBox["Equal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equal"], "FunctionLink"],
 " (",
 StyleBox["==", "Code"],
 ") symbol. Following the equation is a rule setting the ",
 StyleBox[ButtonBox["Modulus",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Modulus"], "FunctionLink"],
 " option to the modulus value. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " returns a list whose elements express the solutions to the congruence. If \
there is no solution, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " returns the empty list."
}], "Text",ExpressionUUID->"ba148b03-13ef-4ff0-8352-af477455a5c2"],

Cell[TextData[{
 "The following attempts to solve ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"4", "x"}], "\[Congruent]", 
    RowBox[{"1", " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "10"}], ")"}]}]}], TraditionalForm]],
  ExpressionUUID->"34188275-6e3c-4b8a-88d7-cec1cb92c6c8"],
 ", which is the same as finding an inverse for 4 modulo 10 and has no \
solution. "
}], "Text",ExpressionUUID->"0e1edf37-ce6b-473d-88cb-0aa3f4e625a5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"4", "*", "x"}], "\[Equal]", "1"}], ",", 
   RowBox[{"Modulus", "\[Rule]", "10"}]}], "]"}]], "Input",
 CellLabel->"In[93]:=",ExpressionUUID->"3646844c-3845-4859-98cc-1064e12bd12e"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellLabel->"Out[93]=",ExpressionUUID->"cf05a024-12b8-4a4d-a345-ea42921dc7f0"]
}, Open  ]],

Cell[TextData[{
 "It is also possible to have multiple solutions. For example, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"3", "x"}], "\[Congruent]", 
    RowBox[{"9", " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "12"}], ")"}]}]}], TraditionalForm]],
  ExpressionUUID->"fc75cb45-da14-4730-be33-fbf44137a888"],
 ". "
}], "Text",ExpressionUUID->"3a1ad0ed-febe-4ae0-9c51-1d9a44697cef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"3", "*", "x"}], "\[Equal]", "9"}], ",", 
   RowBox[{"Modulus", "\[Rule]", "12"}]}], "]"}]], "Input",
 CellLabel->"In[94]:=",ExpressionUUID->"66671be7-fff2-440f-9a54-036cbd5a2795"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", 
    RowBox[{"3", "+", 
     RowBox[{"4", " ", 
      RowBox[{"C", "[", "1", "]"}]}]}]}], "}"}], "}"}]], "Output",
 CellLabel->"Out[94]=",ExpressionUUID->"32c4df0d-bfb4-4df5-983c-679cda9d73a2"]
}, Open  ]],

Cell[TextData[{
 "The symbol ",
 StyleBox["C[1]", "Code"],
 " is used in the Wolfram Language to represent an arbitrary integer. This \
output indicates that any value of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "0247134d-df72-42d9-a9de-55623ea12bb2"],
 " of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{"3", "+", 
    RowBox[{"4", "\[CenterDot]", "C"}]}], TraditionalForm]],ExpressionUUID->
  "4e5e4e56-9e0f-4fc3-8f50-c1397504db15"],
 " will solve the congruence. We can obtain a specific solution by \
substituting a particular integer for the symbol ",
 StyleBox["C[1]", "Code"],
 ", using ",
 StyleBox[ButtonBox["ReplaceAll",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReplaceAll"], "FunctionLink"],
 " (",
 StyleBox["/.", "Code"],
 ")."
}], "Text",ExpressionUUID->"f080dd58-77ce-4840-8ac8-549723fa6f19"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"3", "*", "x"}], "\[Equal]", "9"}], ",", 
    RowBox[{"Modulus", "\[Rule]", "12"}]}], "]"}], "/.", 
  RowBox[{
   RowBox[{"C", "[", "1", "]"}], "\[Rule]", "1"}]}]], "Input",
 CellLabel->"In[95]:=",ExpressionUUID->"4db4d35e-5e4b-4653-8131-ebe74514f3cf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", "7"}], "}"}], "}"}]], "Output",
 CellLabel->"Out[95]=",ExpressionUUID->"52965715-8056-4c50-8b50-38b447c14f30"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Chinese Remainder Theorem", "Subsection",
 CellTags->"Section4b",ExpressionUUID->"5dffa0f8-17da-4bda-b186-52e5f480052d"],

Cell["\<\
The text describes two approaches to solving systems of congruences of the \
form\
\>", "Text",ExpressionUUID->"af449adb-3608-42e8-89af-a6c227dd3be5"],

Cell[BoxData[{
 FormBox[
  RowBox[{"x", "\[Congruent]", 
   SubscriptBox["a", "1"], " ", "(", "mod", " ", 
   SubscriptBox["m", "1"], ")"}], TraditionalForm], "\n", 
 FormBox[
  RowBox[{"x", "\[Congruent]", 
   RowBox[{
    SubscriptBox["a", "2"], " ", "(", 
    RowBox[{"mod", " ", 
     SubscriptBox["m", "2"]}], ")"}]}], TraditionalForm], "\n", 
 FormBox[
  RowBox[{"             ", "\[VerticalEllipsis]"}], TraditionalForm], "\n", 
 FormBox[
  RowBox[{"x", "\[Congruent]", 
   RowBox[{
    SubscriptBox["a", "n"], " ", 
    RowBox[{"(", 
     RowBox[{"mod", " ", 
      SubscriptBox["m", "n"]}], ")"}]}]}], TraditionalForm]}], "Equation",Expr\
essionUUID->"99331b12-a40a-4f7a-8c4c-5f42deead532"],

Cell[TextData[{
 "The Wolfram Language provides an implementation of the Chinese remainder \
theorem, ",
 StyleBox[ButtonBox["ChineseRemainder",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ChineseRemainder"], "FunctionLink"],
 ". The function takes two arguments: a list of the values ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["a", "1"], ",", 
     SubscriptBox["a", "2"], ",", "\[Ellipsis]", ",", 
     SubscriptBox["a", "n"]}], "}"}], TraditionalForm]],ExpressionUUID->
  "c2c369c8-0527-427b-bae8-7ec4a5c76fa0"],
 " first and a list of the moduli ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["m", "1"], ",", 
     SubscriptBox["m", "2"], ",", "\[Ellipsis]", ",", 
     SubscriptBox["m", "n"]}], "}"}], TraditionalForm]],ExpressionUUID->
  "9da1db52-8f64-4a21-bfef-3cc7551c9695"],
 " second. The result is the smallest positive integer that satisfies all of \
the congruences. As an example, we solve the congruences"
}], "Text",ExpressionUUID->"240a89ee-10c7-472a-a915-f094163bdbf8"],

Cell[BoxData[{
 FormBox[
  RowBox[{"x", "\[Congruent]", "2", " ", "(", "mod", " ", "3", ")"}], 
  TraditionalForm], "\n", 
 FormBox[
  RowBox[{"x", "\[Congruent]", "4", " ", "(", "mod", " ", "5", ")"}], 
  TraditionalForm], "\n", 
 FormBox[
  RowBox[{"x", "\[Congruent]", "6", " ", "(", "mod", " ", "7", ")"}], 
  TraditionalForm], "\n", 
 FormBox[
  RowBox[{"x", "\[Congruent]", "10", " ", "(", "mod", " ", "11", ")"}], 
  TraditionalForm]}], "Equation",ExpressionUUID->"86f04a41-613b-41d2-a9be-\
cd906b4b0b72"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ChineseRemainder", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "6", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5", ",", "7", ",", "11"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[96]:=",ExpressionUUID->"0068e831-1369-4459-9dc4-e150cef2f399"],

Cell[BoxData["1154"], "Output",
 CellLabel->"Out[96]=",ExpressionUUID->"d80083a8-a871-4e55-8158-84a71df09b79"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Creating a Function", "Subsubsection",ExpressionUUID->"e5910ab1-d2f7-4972-abff-ed7deeeba4fe"],

Cell[TextData[{
 "We will create a function for solving systems of congruences. This \
implementation will be based on the construction given in the proof of the \
Chinese remainder theorem. Although this will be less efficient than the \
built-in ",
 StyleBox[ButtonBox["ChineseRemainder",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ChineseRemainder"], "FunctionLink"],
 " function, implementing the algorithm can help you to better understand the \
proof of the theorem. "
}], "Text",ExpressionUUID->"d27eb6bf-7266-4d00-a3d1-b69a2f19bd96"],

Cell[TextData[{
 "Our function, which we call ",
 StyleBox["crTheorem", "Code"],
 ", will accept the same arguments as ",
 StyleBox[ButtonBox["ChineseRemainder",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ChineseRemainder"], "FunctionLink"],
 ": two lists, ",
 StyleBox["a", "Code"],
 " and ",
 StyleBox["m", "Code"],
 ", representing the values and the moduli of the congruences. It will begin \
with two tests to check that the lists are the same length and that the \
moduli are in fact pairwise relatively prime, as is required by the \
assumptions of the theorem. We use ",
 StyleBox[ButtonBox["CoprimeQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/CoprimeQ"], "FunctionLink"],
 ", described in Section 4.3 of this manual, to check that the moduli are \
pairwise relatively prime. If these tests fail, the following messages are \
generated."
}], "Text",ExpressionUUID->"af7380cd-66d5-4803-862d-f367e2d256a7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"crTheorem", "::", "argsize"}], "=", 
   "\"\<Arguments must be lists of the same size.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[97]:=",ExpressionUUID->"55337b07-af4c-481a-9ae8-c786a74dc0c7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"crTheorem", "::", "argcp"}], "=", 
   "\"\<Moduli must be pairwise relatively prime.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[98]:=",ExpressionUUID->"e6afd456-bea3-4656-adaf-75bde1efa97f"],

Cell[TextData[{
 "We will embed the tests inside a small function in order to make the ",
 StyleBox["crTheorem", "Code"],
 " function easier to read."
}], "Text",ExpressionUUID->"d6785725-6bb7-4b5a-b58c-818b1100c6f1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"crTestArgs", "[", 
   RowBox[{"a_", ",", "m_"}], "]"}], ":=", 
  RowBox[{"Check", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "a", "]"}], "\[NotEqual]", 
        RowBox[{"Length", "[", "m", "]"}]}], ",", 
       RowBox[{"Message", "[", 
        RowBox[{"crTheorem", "::", "argsize"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"Not", "[", 
        RowBox[{"Apply", "[", 
         RowBox[{"CoprimeQ", ",", "m"}], "]"}], "]"}], ",", 
       RowBox[{"Message", "[", 
        RowBox[{"crTheorem", "::", "argcp"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "True"}], ",", "\[IndentingNewLine]", "False"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[99]:=",ExpressionUUID->"166c8b2e-0489-4c7d-85d7-79b42f9c9f78"],

Cell[TextData[{
 "Most of the work of ",
 StyleBox["crTestArgs", "Code"],
 " is done in the two ",
 StyleBox[ButtonBox["If",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/If"], "FunctionLink"],
 " statements. The first compares the lengths of ",
 StyleBox["a", "Code"],
 " and ",
 StyleBox["m", "Code"],
 " and the second checks whether the moduli are relatively prime. If the \
lists are of different lengths or the moduli are not relatively prime, the \
appropriate message is issued. Note that the ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " function is used in the second ",
 StyleBox[ButtonBox["If",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/If"], "FunctionLink"],
 " statement in order to apply the function ",
 StyleBox[ButtonBox["CoprimeQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/CoprimeQ"], "FunctionLink"],
 ", which expects integer arguments, to the list ",
 StyleBox["m", "Code"],
 "."
}], "Text",ExpressionUUID->"58275f52-580e-421e-a981-725dd474de8b"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Check",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Check"], "FunctionLink"],
 " function is used to \[OpenCurlyDoubleQuote]listen\[CloseCurlyDoubleQuote] \
for messages. It evaluates its first argument, which in this case is the \
three lines ending with the expression ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 ". If no messages are generated, then the result of the ",
 StyleBox[ButtonBox["Check",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Check"], "FunctionLink"],
 " is the outcome of that evaluation. In this case, if the two ",
 StyleBox[ButtonBox["If",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/If"], "FunctionLink"],
 " statements do not raise messages, then the outcome of the ",
 StyleBox[ButtonBox["Check",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Check"], "FunctionLink"],
 " is ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 ". However, if any messages are raised while evaluating the first argument \
to ",
 StyleBox[ButtonBox["Check",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Check"], "FunctionLink"],
 ", then ",
 StyleBox[ButtonBox["Check",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Check"], "FunctionLink"],
 " returns its second argument instead. In this case, this means that if any \
messages are raised, then the result of the function will be ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"3711326a-0aec-4faf-b1ad-ec0de8137828"],

Cell[TextData[{
 "As you can see below, with valid input, ",
 StyleBox["crTestArgs", "Code"],
 " results in ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 ", and produces both error messages and returns ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 " for arguments that violate the rules."
}], "Text",ExpressionUUID->"b53200e5-c8b2-488d-a390-ae6518b17fc9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"crTestArgs", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "7", ",", "11"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[100]:=",ExpressionUUID->"311cec7b-e346-487d-9b8b-f909a3d9a9c8"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[100]=",ExpressionUUID->"c80234e7-3b27-4e76-a61a-cc50bcc90ab3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"crTestArgs", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[101]:=",ExpressionUUID->"8e70d366-b36b-4553-a3c4-b7e7587503bb"],

Cell[BoxData[
 TemplateBox[{
  "crTheorem","argsize","\"Arguments must be lists of the same size.\"",2,101,
   2,22492274661582984514,"Local","Global`crTheorem"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[101]:=",ExpressionUUID->"7cb96b15-6926-4c5a-a067-2a4a3513e0c2"],

Cell[BoxData[
 TemplateBox[{
  "crTheorem","argcp","\"Moduli must be pairwise relatively prime.\"",2,101,3,
   22492274661582984514,"Local","Global`crTheorem"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[101]:=",ExpressionUUID->"00e13268-db80-455d-bf67-9b5158b38ec4"],

Cell[BoxData["False"], "Output",
 CellLabel->
  "Out[101]=",ExpressionUUID->"91093f2e-c126-44a1-88e5-7e114a4b2275"]
}, Open  ]],

Cell[TextData[{
 "When we define the ",
 StyleBox["crTheorem", "Code"],
 " function, we will use patterns in the arguments to ensure that the \
arguments are lists of integers, and we will give ",
 StyleBox["crTestArgs", "Code"],
 " as a ",
 StyleBox[ButtonBox["Condition",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Condition"], "FunctionLink"],
 " (",
 StyleBox["/;", "Code"],
 "), as shown below."
}], "Text",ExpressionUUID->"b4232285-97de-492f-926e-209912cda9ac"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"crTheorem", "[", 
    RowBox[{
     RowBox[{"a", ":", 
      RowBox[{"{", "__Integer", "}"}]}], ",", 
     RowBox[{"m", ":", 
      RowBox[{"{", "__Integer", "}"}]}]}], "]"}], "/;", 
   RowBox[{"crTestArgs", "[", 
    RowBox[{"a", ",", "m"}], "]"}]}], ":=", "..."}]], "myCode",
 Editable->False,ExpressionUUID->"5e82409e-2cbb-4d00-a95f-224b168f186f"],

Cell[TextData[{
 "The syntax ",
 StyleBox["a:{__Integer}", "Code"],
 ", and likewise for ",
 StyleBox["m", "Code"],
 ", names the argument and imposes the pattern that it be a sequence of \
integers enclosed in braces, that is, a list of integers. On the right hand \
side of the ",
 StyleBox[ButtonBox["Condition",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Condition"], "FunctionLink"],
 " (",
 StyleBox["/;", "Code"],
 ") operator, we apply ",
 StyleBox["crTestArgs", "Code"],
 " to the arguments before the ",
 StyleBox[ButtonBox["SetDelayed",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SetDelayed"], "FunctionLink"],
 " (",
 StyleBox[":=", "Code"],
 ") operator. With a function definition of this form, when you enter a call \
to ",
 StyleBox["crTheorem", "Code"],
 ", ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will first check to see that the arguments match the specified patterns. \
If not, for instance if you provide a different number of arguments or \
attempt to use anything other than two lists of integers, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will simply return the expression unevaluated. Assuming that you enter two \
lists of integers, then ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will apply ",
 StyleBox["crTestArgs", "Code"],
 ". If this function returns ",
 StyleBox["False", "Code"],
 ", then ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will return the ",
 StyleBox["crTheorem", "Code"],
 " call unevaluated. Moreover, in this case, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will not attempt to evaluate the body of the function. Only after the \
arguments have matched the pattern and ",
 StyleBox["crTestArgs", "Code"],
 " has returned ",
 StyleBox["True", "Code"],
 ", will ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " evaluate the body of the function definition."
}], "Text",ExpressionUUID->"7dd08d93-a3cd-4347-8fe6-47df5dbaf663"],

Cell[TextData[{
 "While the above is a bit more complicated seeming than placing the tests in \
the body of the function and causing them to terminate execution with a ",
 StyleBox[ButtonBox["Return",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Return"], "FunctionLink"],
 " or an ",
 StyleBox[ButtonBox["Abort",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Abort"], "FunctionLink"],
 ", it is a more elegant way to ensure that the function is robust."
}], "Text",ExpressionUUID->"947a47d2-1ba5-4b23-85b1-41ae466d7c08"],

Cell[TextData[{
 "Turning now to the main work of ",
 StyleBox["crTheorem", "Code"],
 ", it begins by setting ",
 StyleBox["p", "Code"],
 " equal to the product of the moduli. (Note that ",
 StyleBox["p", "Code"],
 " corresponds to ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "4737790c-b62c-47fb-852d-1a4e41a7eaf7"],
 " in the statement of the theorem in the text. This is the only notational \
difference between the function defined here and the text.) Note that we use \
the ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " (",
 StyleBox["@@", "Code"],
 ") operator with the ",
 StyleBox[ButtonBox["Times",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Times"], "FunctionLink"],
 " (",
 StyleBox["*", "Code"],
 ") function in order to compute this product. ",
 StyleBox[ButtonBox["Times",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Times"], "FunctionLink"],
 " (",
 StyleBox["*", "Code"],
 ") is the functional version of the multiplication operator and combining it \
with ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " (",
 StyleBox["@@", "Code"],
 ") results in the product of the elements of the list ",
 StyleBox["m", "Code"],
 "."
}], "Text",ExpressionUUID->"c1995e95-db52-4dc6-8334-629572b5eec6"],

Cell[TextData[{
 "The function then needs to compute ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["M", "k"], TraditionalForm]],ExpressionUUID->
  "4247a0ba-d6ca-4d8c-9af7-4b25f1ce7a5c"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "k"], TraditionalForm]],ExpressionUUID->
  "cb28a2f2-b263-4959-a77c-a1aa150af5b4"],
 ". We use the indexed variables ",
 StyleBox["M", "Code"],
 " and ",
 StyleBox["y", "Code"],
 " for this. Note that this creates a subtle syntactic point to pay attention \
to. Specifically, the third element of the list ",
 StyleBox["m", "Code"],
 " is accessed via ",
 StyleBox["m[[3]]", "Code"],
 ", while ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["M", "3"], TraditionalForm]],ExpressionUUID->
  "b81fcec6-7c65-4b9b-9abd-539518aa735c"],
 " is referred to by ",
 StyleBox["M[3]", "Code"],
 ". The values are computed within a ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop. The values for ",
 StyleBox["M", "Code"],
 " are calculated by the formula ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["M", "k"], "=", 
    FractionBox["P", 
     SubscriptBox["m", "k"]]}], TraditionalForm]],ExpressionUUID->
  "ca4a8e72-dc3c-41fd-b8fd-35fe0859d868"],
 ". For ",
 StyleBox["y", "Code"],
 ", we use the fact that the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "k"], TraditionalForm]],ExpressionUUID->
  "afba1473-b1c1-4fb2-883f-d62cb516a1b7"],
 " are the inverses of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["M", "k"], TraditionalForm]],ExpressionUUID->
  "969fb6ad-2748-4034-b741-6219cf5bb485"],
 " modulo ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["m", "k"], TraditionalForm]],ExpressionUUID->
  "ffe002e9-f871-470a-9caf-bc3bb784284c"],
 ". That is, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["y", "k"], "\[Congruent]", 
    RowBox[{
     SuperscriptBox[
      SubscriptBox["M", "k"], 
      RowBox[{"-", "1"}]], " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", 
       SubscriptBox["m", "k"]}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "ce9e9f5f-2fee-4c1b-94c7-c48b9d7b4e02"],
 ". Finally, we compute the result ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["a", "1"], 
      SubscriptBox["M", "1"], 
      SubscriptBox["y", "1"]}], "+", 
     RowBox[{
      SubscriptBox["a", "2"], 
      SubscriptBox["M", "2"], 
      SubscriptBox["y", "2"]}], "+", "\[CenterEllipsis]", "+", 
     RowBox[{
      SubscriptBox["a", "n"], 
      SubscriptBox["M", "n"], 
      SubscriptBox["y", "n"]}]}]}], TraditionalForm]],ExpressionUUID->
  "73a832d0-c6b1-407d-8959-69d03744233b"],
 " using the ",
 StyleBox[ButtonBox["Sum",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sum"], "FunctionLink"],
 " function and return ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", " ", 
    RowBox[{"(", 
     RowBox[{"mod", " ", "p"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "6b79294d-bfda-4246-8584-dccc48911d92"],
 ". Here is the function."
}], "Text",ExpressionUUID->"f7bf37b1-8f56-4533-b07e-a7dc757b85fe"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"crTheorem", "[", 
    RowBox[{
     RowBox[{"a", ":", 
      RowBox[{"{", "__Integer", "}"}]}], ",", 
     RowBox[{"m", ":", 
      RowBox[{"{", "__Integer", "}"}]}]}], "]"}], "/;", 
   RowBox[{"crTestArgs", "[", 
    RowBox[{"a", ",", "m"}], "]"}]}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"p", ",", "M", ",", "y", ",", "i", ",", "x"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"p", "=", 
      RowBox[{"Times", "@@", "m"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"Length", "[", "a", "]"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"M", "[", "i", "]"}], "=", 
         RowBox[{"p", "/", 
          RowBox[{"m", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"y", "[", "i", "]"}], "=", 
         RowBox[{"PowerMod", "[", 
          RowBox[{
           RowBox[{"M", "[", "i", "]"}], ",", 
           RowBox[{"-", "1"}], ",", 
           RowBox[{"m", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"x", "=", 
      RowBox[{"Sum", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"a", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "*", 
         RowBox[{"M", "[", "i", "]"}], "*", 
         RowBox[{"y", "[", "i", "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Length", "[", "a", "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Mod", "[", 
      RowBox[{"x", ",", "p"}], "]"}]}]}], " ", "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[102]:=",ExpressionUUID->"e0827910-e6d4-47aa-811f-7d44240edc4f"],

Cell[TextData[{
 "Observe that our function produces the same result as ",
 StyleBox[ButtonBox["ChineseRemainder",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ChineseRemainder"], "FunctionLink"],
 " did above."
}], "Text",ExpressionUUID->"eaae3c02-2ad1-4554-8162-27eabf9fbf59"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"crTheorem", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "6", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5", ",", "7", ",", "11"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[103]:=",ExpressionUUID->"d413e771-2aa8-40e6-b941-7a2a3d4a5e0e"],

Cell[BoxData["1154"], "Output",
 CellLabel->
  "Out[103]=",ExpressionUUID->"b276b3cc-5386-486a-baa6-cb8197a58175"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pseudoprimes", "Subsection",
 CellTags->"Section4c",ExpressionUUID->"d01ad650-a145-4c36-a498-b8369dc89ba8"],

Cell[TextData[{
 "Recall from the text that a pseudoprime to the base ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "4317c401-2dc7-43dc-a632-7c2641c16ea3"],
 " is a composite number ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "3c83863f-5220-41ee-896b-c738ccb233ab"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["b", 
     RowBox[{"n", "-", "1"}]], "\[Congruent]", 
    RowBox[{"1", " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "n"}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "98f104f3-d453-43a6-b37d-acb7f05c1753"],
 ". We will write a function to find pseudoprimes. Our function will accept \
two arguments, the base ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "ee25788c-770d-4552-a023-73aa174d667f"],
 " and a maximum value for ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "af4adbba-1821-4702-8384-ace654a20dc1"],
 ", and will return a list of the pseudoprimes that it identifies. "
}], "Text",ExpressionUUID->"6f9b917c-c5dd-48fb-bf44-f732a534e172"],

Cell[TextData[{
 "The algorithm is fairly straightforward. We will use a ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop beginning at 3, ending with the specified maximum and increasing by 2 \
each time (so as to skip even integers). Within the loop, we test whether the \
congruence holds and whether the number is composite, using ",
 StyleBox[ButtonBox["CompositeQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/CompositeQ"], "FunctionLink"],
 ". Note that if the congruence fails, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will not bother testing primality. If the integer is composite, then ",
 StyleBox[ButtonBox["Sow",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sow"], "FunctionLink"],
 " is invoked. The ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " surrounding the loop collects the pseudoprimes into a list. As we have \
done in the past, we use ",
 StyleBox["[[2,1]]", "Code"],
 " to access the list of pseudoprimes without the additional information \
produced by ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"4ea84234-7fc4-47da-9c52-9edef85a4fb4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findPseudoprimes", "[", 
   RowBox[{"b_Integer", ",", "max_Integer"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "n", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Reap", "[", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"n", "=", "3"}], ",", 
        RowBox[{"n", "\[LessEqual]", "max"}], ",", 
        RowBox[{"n", "=", 
         RowBox[{"n", "+", "2"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"PowerMod", "[", 
             RowBox[{"b", ",", 
              RowBox[{"n", "-", "1"}], ",", "n"}], "]"}], "\[Equal]", "1"}], "&&", 
           RowBox[{"CompositeQ", "[", "n", "]"}]}], ",", 
          RowBox[{"Sow", "[", "n", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
       "]"}], "\[IndentingNewLine]", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[104]:=",ExpressionUUID->"912c9a96-6cd8-4df9-82f6-1984f12ade96"],

Cell[TextData[{
 "Note that we used the ",
 StyleBox[ButtonBox["PowerMod",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PowerMod"], "FunctionLink"],
 " function rather than the ",
 StyleBox[ButtonBox["Power",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Power"], "FunctionLink"],
 " (",
 StyleBox["^", "Code"],
 ") operator. The ",
 StyleBox[ButtonBox["PowerMod",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PowerMod"], "FunctionLink"],
 " function performs modular exponentiation intelligently, using techniques \
such as those discussed in Section 4.2 of the text for performing efficient \
modular exponentiation."
}], "Text",ExpressionUUID->"ff65442e-1290-4f4a-8d90-fd7556da54cb"],

Cell[TextData[{
 "Here are the pseudoprimes to the base 2 up to ",
 Cell[BoxData[
  FormBox["100000", TraditionalForm]],ExpressionUUID->
  "5f0e4ca3-0e12-4090-906e-83a4fc05431e"],
 "."
}], "Text",ExpressionUUID->"4ec1b77d-a104-4333-902b-d2770c517fef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findPseudoprimes", "[", 
  RowBox[{"2", ",", "100000"}], "]"}]], "Input",
 CellLabel->
  "In[105]:=",ExpressionUUID->"27648be5-c224-4e3a-9dd9-80c4fd9b32f8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "341", ",", "561", ",", "645", ",", "1105", ",", "1387", ",", "1729", ",", 
   "1905", ",", "2047", ",", "2465", ",", "2701", ",", "2821", ",", "3277", 
   ",", "4033", ",", "4369", ",", "4371", ",", "4681", ",", "5461", ",", 
   "6601", ",", "7957", ",", "8321", ",", "8481", ",", "8911", ",", "10261", 
   ",", "10585", ",", "11305", ",", "12801", ",", "13741", ",", "13747", ",", 
   "13981", ",", "14491", ",", "15709", ",", "15841", ",", "16705", ",", 
   "18705", ",", "18721", ",", "19951", ",", "23001", ",", "23377", ",", 
   "25761", ",", "29341", ",", "30121", ",", "30889", ",", "31417", ",", 
   "31609", ",", "31621", ",", "33153", ",", "34945", ",", "35333", ",", 
   "39865", ",", "41041", ",", "41665", ",", "42799", ",", "46657", ",", 
   "49141", ",", "49981", ",", "52633", ",", "55245", ",", "57421", ",", 
   "60701", ",", "60787", ",", "62745", ",", "63973", ",", "65077", ",", 
   "65281", ",", "68101", ",", "72885", ",", "74665", ",", "75361", ",", 
   "80581", ",", "83333", ",", "83665", ",", "85489", ",", "87249", ",", 
   "88357", ",", "88561", ",", "90751", ",", "91001", ",", "93961"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[105]=",ExpressionUUID->"4f6db6a3-24d5-4c53-8f42-de2eb92eec80"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Primitive Roots and Discrete Logarithms", "Subsection",
 CellTags->"Section4d",ExpressionUUID->"3eea5272-65fb-41f4-a77d-9345880c0d3e"],

Cell["\<\
The Wolfram Language includes several functions for computing primitive roots \
and discrete logarithms.\
\>", "Text",ExpressionUUID->"4dd108d0-be67-486e-bf8d-59638bcb6031"],

Cell[CellGroupData[{

Cell["Primitive Roots", "Subsubsection",ExpressionUUID->"750f2933-60fb-4030-ad3c-cad7e5a79476"],

Cell[TextData[{
 "The Wolfram Language function ",
 StyleBox[ButtonBox["PrimitiveRoot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PrimitiveRoot"], "FunctionLink"],
 " computes primitive roots. It takes a single argument, the modulus, and \
returns the smallest positive primitive root for that modulus. For example, \
the smallest positive primitive root of 13 is 2."
}], "Text",ExpressionUUID->"54ae8dc5-4c16-4cab-b573-96e2ad0f94fe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PrimitiveRoot", "[", "13", "]"}]], "Input",
 CellLabel->
  "In[106]:=",ExpressionUUID->"0ab7c010-1b05-4c31-a214-17bcf38e81ba"],

Cell[BoxData["2"], "Output",
 CellLabel->
  "Out[106]=",ExpressionUUID->"ab9f2af5-83fa-4792-94cf-15323df7a78f"]
}, Open  ]],

Cell[TextData[{
 "Note that the ",
 StyleBox[ButtonBox["PrimitiveRoot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PrimitiveRoot"], "FunctionLink"],
 " function applies to some ",
 StyleBox["nonprime",
  IgnoreSpellCheck->True],
 " moduli as well. The Wolfram Language uses a definition of primitive root \
that is more general than the definition in the text. Specifically, an \
integer ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "65d1b9c0-ac2c-44fd-a560-d3aa7ad2587c"],
 " is a primitive root modulo an integer ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "865347f3-1814-4697-9674-55f25be6fbb1"],
 " if every positive integer that is both less than ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "f8782a35-090d-43e2-a4ed-244fe8fea872"],
 " and relatively prime to ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "1c370ada-2944-4c1c-855a-73ca104c51c3"],
 " can be obtained as a power of ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "23311a03-8e25-415e-a9bc-8c557fe16af8"],
 ". "
}], "Text",ExpressionUUID->"5e6a964d-e682-4094-8765-2ae8f537775c"],

Cell[TextData[{
 "The Wolfram Language function ",
 StyleBox[ButtonBox["PrimitiveRootList",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PrimitiveRootList"], "FunctionLink"],
 " will generate a list of all primitive roots. However, it can be \
informative to build our own such function, which we will do by making use of \
the ",
 StyleBox[ButtonBox["MultiplicativeOrder",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MultiplicativeOrder"], "FunctionLink"],
 " function. The multiplicative order of ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "ab3d6d83-7325-463c-be1e-8d2630792209"],
 " modulo ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "6bbfd80d-4da5-443b-b0c0-be5434a8c511"],
 " is defined to be the smallest positive integer ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "6a07bc68-8d40-47f9-9b15-b2123703213b"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["r", "m"], "\[Congruent]", 
    RowBox[{"1", " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "p"}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "1252e976-68c6-467b-84e6-6dbc04276eb8"],
 ". Equivalently, one can say that the multiplicative order of ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "caf91061-1737-4f39-bffa-d272964bcd41"],
 " modulo ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "1825e32e-f740-41a0-9fae-f39c46ca4b4b"],
 " is the number of distinct powers of ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "677046dd-8f00-410f-8332-9314aa9e3e32"],
 ", that is, the number of different values of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["r", "k"], " ", "mod", " ", "p"}], TraditionalForm]],
  ExpressionUUID->"33d2ac62-5e57-414a-943e-b6cd1c4aac5b"],
 ". We leave it to the reader to prove the equivalence."
}], "Text",ExpressionUUID->"8b1e2328-02f5-4c58-b123-66468643f621"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["MultiplicativeOrder",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MultiplicativeOrder"], "FunctionLink"],
 " function accepts the element and modulus as arguments and returns the \
multiplicative order. For example, to compute the multiplicative order of 8 \
modulo 13, enter the following."
}], "Text",ExpressionUUID->"7b44f1b6-5a01-4726-90b3-69d8f65d2b53"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MultiplicativeOrder", "[", 
  RowBox[{"8", ",", "13"}], "]"}]], "Input",
 CellLabel->
  "In[107]:=",ExpressionUUID->"8dbea5af-79ae-4519-bf58-70e4653644dd"],

Cell[BoxData["4"], "Output",
 CellLabel->
  "Out[107]=",ExpressionUUID->"2a793706-0433-490f-b8c5-6653545de5f3"]
}, Open  ]],

Cell[TextData[{
 "We conclude from this that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["8", "1"], " ", 
    RowBox[{"(", 
     RowBox[{"mod", " ", "13"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "eac57bb6-ccfe-4048-807e-f63197ac5a2f"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["8", "2"], " ", 
    RowBox[{"(", 
     RowBox[{"mod", " ", "13"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "8800d1d1-b5b4-4d7f-b9a4-b4af2f8fb1ab"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["8", "3"], " ", 
    RowBox[{"(", 
     RowBox[{"mod", " ", "13"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "2eca0ee5-19c3-44fa-afcc-df155d7fb298"],
 ", and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["8", "4"], " ", 
    RowBox[{"(", 
     RowBox[{"mod", " ", "13"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "1f8816cc-8059-4d7a-b1f5-cf02b2ad6155"],
 " are all distinct, with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["8", "4"], "\[Congruent]", 
    RowBox[{"1", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "13"}], ")"}]}]}], TraditionalForm]],
  ExpressionUUID->"2e05907b-8f61-4dff-a930-f68ec40c4bf6"],
 ", but that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["8", "5"], "\[Congruent]", 
    RowBox[{
     SuperscriptBox["8", "1"], " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "13"}], ")"}]}]}], TraditionalForm]],
  ExpressionUUID->"e4e953f3-0d23-4f31-9489-d25a4e31ece8"],
 ". We can verify this by computing the values."
}], "Text",ExpressionUUID->"1d3b4b81-0234-4882-ac56-6ebcb756eb5a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"PowerMod", "[", 
    RowBox[{"8", ",", "k", ",", "13"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[108]:=",ExpressionUUID->"f7b140a0-e431-4fdb-9b53-1ff26a8fc613"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"8", ",", "12", ",", "5", ",", "1"}], "}"}]], "Output",
 CellLabel->
  "Out[108]=",ExpressionUUID->"a6f221f8-6fc5-48dc-9bb9-7abe33ddbb79"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PowerMod", "[", 
  RowBox[{"8", ",", "5", ",", "13"}], "]"}]], "Input",
 CellLabel->
  "In[109]:=",ExpressionUUID->"422f2fb0-ce79-42ba-93f6-3fc027b4fa18"],

Cell[BoxData["8"], "Output",
 CellLabel->
  "Out[109]=",ExpressionUUID->"dcaab218-9c3f-4586-92b9-fcc26455d81c"]
}, Open  ]],

Cell[TextData[{
 "Recall from Definition 3 of the textbook that a primitive root modulo a \
prime ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "eb1cf9d5-f8ce-4f8f-be96-6d2617c9c793"],
 " is an integer ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "2fd855d6-1b8d-4be6-9e20-2550484b0561"],
 " such that every nonzero element of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    StyleBox["Z",
     FontWeight->"Bold"], "p"], TraditionalForm]],ExpressionUUID->
  "567e2bf2-1413-42de-b595-f3321ea4cdc3"],
 " is a power of ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "8e0ae364-ee21-4c8a-8e99-4b46fad5d3d1"],
 ". Since there are ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "ef2e2cae-23c8-4787-bae5-a161fac8a44c"],
 " elements of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    StyleBox["Z",
     FontWeight->"Bold"], "p"], TraditionalForm]],ExpressionUUID->
  "fa2a09e9-c1d5-4e0a-98d2-91bb4bc41c69"],
 ", there are ",
 Cell[BoxData[
  FormBox[
   RowBox[{"p", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "33ea5cfa-9772-42ac-b560-2774cd024963"],
 " nonzero elements. Consequently, being a primitive root modulo a prime ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "a8f85dbd-f56d-4745-b912-c21467afc3b4"],
 " is identical to having multiplicative order ",
 Cell[BoxData[
  FormBox[
   RowBox[{"p", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "8750526d-d364-469b-a282-af9883e9f476"],
 ". The fact that, as we calculated above, the multiplicative order of ",
 Cell[BoxData[
  FormBox["8", TraditionalForm]],ExpressionUUID->
  "df807d54-fc5e-4b63-a55d-3e30047b19df"],
 " modulo ",
 Cell[BoxData[
  FormBox["13", TraditionalForm]],ExpressionUUID->
  "1abe2015-36d8-47af-a0d4-323bfe8f48d1"],
 " is ",
 Cell[BoxData[
  FormBox["4", TraditionalForm]],ExpressionUUID->
  "9b20c124-b478-4dc7-a132-2a0b593e222d"],
 ", not ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"13", "-", "1"}], "=", "12"}], TraditionalForm]],ExpressionUUID->
  "42b477de-4c5d-408a-b61a-9f8f92228da0"],
 " implies that ",
 Cell[BoxData[
  FormBox["8", TraditionalForm]],ExpressionUUID->
  "ef8eadfe-a769-4e8e-82b6-778f35901fce"],
 " is not a primitive root modulo 13. However, 6 has multiplicative order 12 \
modulo 13."
}], "Text",ExpressionUUID->"de8b16e1-dfd5-49c3-bd92-5414e963c4f7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MultiplicativeOrder", "[", 
  RowBox[{"6", ",", "13"}], "]"}]], "Input",
 CellLabel->
  "In[110]:=",ExpressionUUID->"4932a7ab-1e7f-46c7-9fbe-565a889ae525"],

Cell[BoxData["12"], "Output",
 CellLabel->
  "Out[110]=",ExpressionUUID->"9c2f8b4d-8917-4828-a451-605317568347"]
}, Open  ]],

Cell["Consequently, 6 is a primitive root modulo 13.", "Text",ExpressionUUID->"faa664f8-5567-4260-bb8e-27d8b98eb059"],

Cell[TextData[{
 "To summarize, for ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "b8be6451-5572-4341-b931-0b6977044c93"],
 " to be a primitive root modulo a prime ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "cbc7c87f-5440-4d54-ba27-2780ac4e1f00"],
 ", it is necessary and sufficient that the multiplicative order of ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "ca1d72bc-665d-4b7f-8990-db5ab55c392c"],
 " modulo ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "3ce4cb57-824e-4a0b-aa09-bb51ca7e135c"],
 " be equal to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"p", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "611082fd-654e-44d2-b307-e898b8f7ad32"],
 ". This observation provides us with a convenient way to list all of the \
primitive roots for a given prime. We just consider each possible ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "859999ec-a665-45f8-b6a0-8c34f13d0fb3"],
 " from 2 to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"p", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "ae53cd0a-454d-43c1-888b-7ff8b1324db9"],
 " and calculate their multiplicative order with ",
 StyleBox[ButtonBox["MultiplicativeOrder",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MultiplicativeOrder"], "FunctionLink"],
 ". Those whose order is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"p", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "9331e203-eedd-4860-a585-678870bcc0ce"],
 " are included in the list. Here is the function."
}], "Text",ExpressionUUID->"fc48431d-6538-4df5-996e-7e846bdc7f67"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allPrimitiveRoots", "[", 
   RowBox[{"p_", "?", "PrimeQ"}], "]"}], ":=", 
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"Range", "[", 
     RowBox[{"2", ",", 
      RowBox[{"p", "-", "1"}]}], "]"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"MultiplicativeOrder", "[", 
       RowBox[{"#", ",", "p"}], "]"}], "\[Equal]", 
      RowBox[{"p", "-", "1"}]}], "&"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[111]:=",ExpressionUUID->"f77948af-9b64-4ac9-b706-e83b5004598b"],

Cell[TextData[{
 "We make two comments about this function. First, we ensure that the \
argument is prime by using the ",
 ButtonBox["PatternTest",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PatternTest"],
 " syntax: the pattern, in this case ",
 StyleBox[ButtonBox["Blank",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Blank"], "FunctionLink"],
 " (",
 StyleBox["_", "Code"],
 ") is followed by a question mark and the name of a function, ",
 StyleBox[ButtonBox["PrimeQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PrimeQ"], "FunctionLink"],
 ", that performs a test."
}], "Text",ExpressionUUID->"db1b6959-459f-4648-a3af-c2fdd2148ae4"],

Cell[TextData[{
 "Second, the ",
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"], "FunctionLink"],
 " function is used to obtain, given a list and a condition, the sublist of \
those elements meeting the condition. ",
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"], "FunctionLink"],
 " requires two arguments. First, the initial list. Second, a function in one \
argument that returns ",
 StyleBox["True", "Code"],
 " for the desired elements. For the second argument, you can either provide \
the name of a function that accepts a single argument, or, as in the above, \
the function can be given as a pure ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " (",
 StyleBox["&", "Code"],
 "). Recall that a pure function is terminated with an ampersand (",
 StyleBox["&", "Code"],
 ") and uses a ",
 StyleBox[ButtonBox["Slot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Slot"], "FunctionLink"],
 " (",
 StyleBox["#", "Code"],
 ") for its argument."
}], "Text",ExpressionUUID->"81934573-08dc-4ee1-b2ce-27d64488618f"],

Cell[TextData[{
 "Applying the ",
 StyleBox["allPrimitiveRoots", "Code"],
 " function to 13 produces the list of all primitive roots modulo 13."
}], "Text",ExpressionUUID->"41704083-d3bb-468c-b998-34f493dab404"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"allPrimitiveRoots", "[", "13", "]"}]], "Input",
 CellLabel->
  "In[112]:=",ExpressionUUID->"5def34c8-38ac-4aa5-a32a-ba5b739d7330"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "6", ",", "7", ",", "11"}], "}"}]], "Output",
 CellLabel->
  "Out[112]=",ExpressionUUID->"294b5560-e2ef-4c6f-8b2c-437030f51c95"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discrete Logarithms", "Subsubsection",ExpressionUUID->"da2c3b39-bc64-4c71-85cb-55997cb5dfe2"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["MultiplicativeOrder",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MultiplicativeOrder"], "FunctionLink"],
 " function can also be used to find discrete logarithms. Recall that the \
discrete logarithm of ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "274dc9cf-f19c-45c7-9eb2-74979340e9fe"],
 " modulo the prime ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "5f83dbb5-2095-4571-b0ef-698aee952364"],
 " to the base ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "1f1674df-cd66-46eb-a3eb-95ff1b89ff36"],
 " is a number ",
 Cell[BoxData[
  FormBox["e", TraditionalForm]],ExpressionUUID->
  "56143712-0262-4870-90eb-1e72263b53e7"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["r", "e"], "\[Congruent]", 
    RowBox[{"a", " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "p"}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "6e7de80e-86ff-4d1b-b42a-9c0cc999d3f3"],
 ". The multiplicative order of ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "3094ced4-f95c-4e44-84b8-78b13c00740d"],
 " modulo ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "43a884fd-923d-457f-8ae7-c2f6ff9f7948"],
 ", as we defined it above, is the smallest positive ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "860897c2-f4e3-4466-82a9-eb1520bc39e7"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["r", "m"], "\[Congruent]", 
    RowBox[{"1", " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "p"}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "dbe736d6-0e5c-4670-9f2a-bd15110d63fd"],
 ". Notice that the congruences defining these two concepts are similar. \
Indeed, the discrete logarithm problem is more general than the \
multiplicative order problem, replacing the specific 1 with an arbitrary ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "54bdf32a-c65c-4777-8232-077ac661330f"],
 ". "
}], "Text",ExpressionUUID->"5d9ccd79-07f5-4a4c-b481-294a36ccb777"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["MultiplicativeOrder",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MultiplicativeOrder"], "FunctionLink"],
 " function accepts a third argument which generalizes it to include the \
computation of discrete logarithms. Recall that the first argument of ",
 StyleBox[ButtonBox["MultiplicativeOrder",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MultiplicativeOrder"], "FunctionLink"],
 " is the value ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "013abea1-9d18-4fa0-8af6-652b91a69176"],
 ", the second is the prime ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "0ec54740-2b5b-4e7c-a5b3-27562a541d60"],
 ". By providing a third argument, ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "15c20419-113a-4bc3-9560-52559c6475b8"],
 ", ",
 StyleBox[ButtonBox["MultiplicativeOrder",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MultiplicativeOrder"], "FunctionLink"],
 " will compute the discrete logarithm of ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "517989a0-ff72-4008-a059-f647441b72eb"],
 " modulo ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "a3f51b47-5720-4130-8218-20fb21731ec4"],
 " to the base ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "ac0065ff-6a2e-43b7-859a-39f250126673"],
 ". That is, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["log", "r"], "a"}], TraditionalForm]],ExpressionUUID->
  "2da74adf-e06c-473d-9f81-d40a8a85705e"],
 " is computed by ",
 Cell[BoxData[
  RowBox[{"MultiplicativeOrder", "[", 
   StyleBox["r", "CodeVar"], ",", 
   StyleBox["p", "CodeVar"], ",", 
   StyleBox["a", "CodeVar"], "]"}]], "myCode",ExpressionUUID->
  "c50b3c15-e82a-4619-ae7e-5e5b0e65ff7e"],
 "."
}], "Text",ExpressionUUID->"5efd1d15-e0b0-4cae-8cf6-1464d7bff913"],

Cell["\<\
To compute the discrete logarithm of 3 modulo 11 to the base 2, you enter the \
following.\
\>", "Text",ExpressionUUID->"17847b7e-9cc3-44ab-bf5d-2b4cfe8b42c5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MultiplicativeOrder", "[", 
  RowBox[{"2", ",", "11", ",", "3"}], "]"}]], "Input",
 CellLabel->
  "In[113]:=",ExpressionUUID->"6eb28b77-6109-48b2-abb8-32834a386970"],

Cell[BoxData["8"], "Output",
 CellLabel->
  "Out[113]=",ExpressionUUID->"3944d0ee-aeb3-40c9-b0f6-8bee693cd969"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4.5 Applications of Congruences", "Section",
 CellTags->"Section5",ExpressionUUID->"d655d461-0099-49a3-86c9-0aec1caab23a"],

Cell[TextData[{
 "In this section, we will see how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can be used to further explore the applications of congruences discussed \
in the text. In particular, we will see how to use a hashing function to \
store student information in a list, we will create a pseudorandom number \
generator, and we will write a function that will check the validity of an \
ISBN. "
}], "Text",ExpressionUUID->"e7ae60d8-c12e-4125-91cb-96a3cc4ee7c1"],

Cell[CellGroupData[{

Cell["Hashing Functions", "Subsection",
 CellTags->"Section5a",ExpressionUUID->"30fa250a-c871-4b0a-bfce-85128265ba6a"],

Cell["\<\
The first application we will explore is the hashing function. Suppose that a \
small school wants to store information about its students. In particular, \
each student has a unique four-digit identification number and a GPA, which \
is a real number between 0 and 4. \
\>", "Text",ExpressionUUID->"db3b6c82-69e5-46f4-84c6-440bd32a37d0"],

Cell[CellGroupData[{

Cell["Initial Examples", "Subsubsection",ExpressionUUID->"a0f891a7-c0b7-460b-aecc-ed70cf41ea06"],

Cell["\<\
Each student record will be stored as a list with first element the student \
ID and the second element the student\[CloseCurlyQuote]s GPA. Here are three \
example students.\
\>", "Text",ExpressionUUID->"90adeea0-d2c1-46dd-a3ba-d69c472bdcd0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"student1", "=", 
   RowBox[{"{", 
    RowBox[{"7319", ",", "3.21"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"student2", "=", 
   RowBox[{"{", 
    RowBox[{"2908", ",", "2.89"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"student3", "=", 
   RowBox[{"{", 
    RowBox[{"6578", ",", "3.42"}], "}"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[114]:=",ExpressionUUID->"14006800-5a1f-46f8-a97e-850296100cf2"],

Cell["\<\
Our student records are going to be stored in a list. Because the school is \
small, it will suffice to allocate space for 57 records in the school\
\[CloseCurlyQuote]s database, and so we create a list with 57 entries all \
initialized to 0. \
\>", "Text",ExpressionUUID->"4c85f9ba-0468-454c-9f89-be95959d33e6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"studentRecords", "=", 
  RowBox[{"Table", "[", 
   RowBox[{"0", ",", 
    RowBox[{"{", "57", "}"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[117]:=",ExpressionUUID->"ed293be7-af00-444c-9045-d42d58c435b1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}]], "Output",
 CellLabel->
  "Out[117]=",ExpressionUUID->"3cdcec75-7cba-4532-bf90-735b48087576"]
}, Open  ]],

Cell[TextData[{
 "In order to store a student record in the list (which represents the school\
\[CloseCurlyQuote]s database), we need to apply a hashing function to the \
unique student ID. The hashing function we use is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"h", "(", "k", ")"}], "=", 
    RowBox[{
     RowBox[{"k", " ", "mod", " ", "57"}], "+", "1"}]}], TraditionalForm]],
  ExpressionUUID->"f5dc46fc-2bd9-49c4-a8de-453655b355c3"],
 ". Note that the addition of 1 is to occur after the computation of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", " ", "mod", " ", "57"}], TraditionalForm]],ExpressionUUID->
  "16bcb903-e693-4f28-a653-5c289187e3cf"],
 ". It is included in our function because the indices in our ",
 StyleBox["studentRecords", "Code"],
 " list run from 1 to 57 while the values of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", " ", "mod", " ", "57"}], TraditionalForm]],ExpressionUUID->
  "058bd25d-82b6-4e9c-94e8-dc0039329aa4"],
 " range from 0 to 56. "
}], "Text",ExpressionUUID->"8fb82f07-4068-4f80-b1c8-528a702db6ca"],

Cell["\<\
The following function accepts a student ID as input and returns the result \
of applying the hashing function to the ID number. \
\>", "Text",ExpressionUUID->"48c73192-8378-48ff-89ee-1ca94c492e71"],

Cell[BoxData[
 RowBox[{
  RowBox[{"calculateHash", "[", "id_Integer", "]"}], ":=", 
  RowBox[{
   RowBox[{"Mod", "[", 
    RowBox[{"id", ",", "57"}], "]"}], "+", "1"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[118]:=",ExpressionUUID->"639c802f-98ac-4969-92d5-7db186e9e40b"],

Cell["For example,", "Text",ExpressionUUID->"9dca8751-ffc6-4eda-ab95-cbd9fbac9817"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"calculateHash", "[", 
  RowBox[{"student1", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[119]:=",ExpressionUUID->"34331792-f7f4-4638-9470-4703c651a3bb"],

Cell[BoxData["24"], "Output",
 CellLabel->
  "Out[119]=",ExpressionUUID->"473d848b-04d2-45a0-8522-79bc9afc9447"]
}, Open  ]],

Cell[TextData[{
 "This indicates that ",
 StyleBox["student1", "Code"],
 "\[CloseCurlyQuote]s record should be stored in location 24. We store a \
record in a particular location in the usual way."
}], "Text",ExpressionUUID->"6b8d3450-4fd0-43bd-811f-01602649f49d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"studentRecords", "[", 
   RowBox[{"[", "24", "]"}], "]"}], "=", "student1"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[120]:=",ExpressionUUID->"0979a285-a3af-437b-91d4-6224d00c9f3e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7319", ",", "3.21`"}], "}"}]], "Output",
 CellLabel->
  "Out[120]=",ExpressionUUID->"37316499-883f-488e-a74a-0f7ac0c203d0"]
}, Open  ]],

Cell["\<\
Note that accessing location 24 returns the list containing the student\
\[CloseCurlyQuote]s data.\
\>", "Text",ExpressionUUID->"4c83a8bb-cdc2-4ff3-9dd9-6ddad01c8277"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"studentRecords", "[", 
  RowBox[{"[", "24", "]"}], "]"}]], "Input",
 CellLabel->
  "In[121]:=",ExpressionUUID->"67fc7364-c8f3-4ae2-ac06-388ea949ef90"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7319", ",", "3.21`"}], "}"}]], "Output",
 CellLabel->
  "Out[121]=",ExpressionUUID->"ae012d33-661a-4c23-a635-a8502d24fc50"]
}, Open  ]],

Cell["\<\
To access the ID and GPA of the student stored in location 24, we can use a \
second pair of double brackets with 1 or 2 to access the ID or GPA.\
\>", "Text",ExpressionUUID->"79446468-8c64-4028-b71c-eb262eb873bd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"studentRecords", "[", 
   RowBox[{"[", "24", "]"}], "]"}], "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellLabel->
  "In[122]:=",ExpressionUUID->"0ab8867e-d67c-4f3e-b820-1f146ffc1959"],

Cell[BoxData["7319"], "Output",
 CellLabel->
  "Out[122]=",ExpressionUUID->"c4ef8b94-fa30-4b80-9210-89ac14f7eff3"]
}, Open  ]],

Cell[TextData[{
 "Or we can include the record number and the index of the particular piece \
of data in a single ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") operation."
}], "Text",ExpressionUUID->"4bc84119-2215-4147-bb9f-1129d70da0f9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"studentRecords", "[", 
  RowBox[{"[", 
   RowBox[{"24", ",", "1"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[123]:=",ExpressionUUID->"09839401-772d-45f1-883a-a2548b4822e5"],

Cell[BoxData["7319"], "Output",
 CellLabel->
  "Out[123]=",ExpressionUUID->"93b86b51-0361-443f-a01d-3575c6983f3c"]
}, Open  ]],

Cell[TextData[{
 "We can store ",
 StyleBox["student2", "Code"],
 "\[CloseCurlyQuote]s information in the same way."
}], "Text",ExpressionUUID->"b63274e6-2fa1-42c8-8e92-0fe5b63af76e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"calculateHash", "[", 
  RowBox[{"student2", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[124]:=",ExpressionUUID->"fb74bed0-5dcb-4cf5-8f77-2a69434c5628"],

Cell[BoxData["2"], "Output",
 CellLabel->
  "Out[124]=",ExpressionUUID->"10a939e9-351b-463c-b5f6-a7aa7ae177f3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"studentRecords", "[", 
   RowBox[{"[", "2", "]"}], "]"}], "=", "student2"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[125]:=",ExpressionUUID->"bca27333-2394-4490-9bba-65d95bfb0d0f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2908", ",", "2.89`"}], "}"}]], "Output",
 CellLabel->
  "Out[125]=",ExpressionUUID->"6c7f9814-a469-401e-815e-98060c139640"]
}, Open  ]],

Cell[TextData[{
 "If we try to store ",
 StyleBox["student3", "Code"],
 "\[CloseCurlyQuote]s data, we find that a collision occurs."
}], "Text",ExpressionUUID->"5521964b-6bf5-43fa-9125-01308d9d3e0b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"calculateHash", "[", 
  RowBox[{"student3", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[126]:=",ExpressionUUID->"2a748fbc-2503-43e3-a84a-e89b3b56b531"],

Cell[BoxData["24"], "Output",
 CellLabel->
  "Out[126]=",ExpressionUUID->"4493a229-e340-4b43-92b6-d307b0d9be10"]
}, Open  ]],

Cell[TextData[{
 "Since ",
 StyleBox["student3", "Code"],
 " has the same hash value as ",
 StyleBox["student1", "Code"],
 " did, we look for the next free location. Check location 25."
}], "Text",ExpressionUUID->"88829c67-f724-47d6-8824-fb2b503fa643"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"studentRecords", "[", 
   RowBox[{"[", "25", "]"}], "]"}], "\[Equal]", "0"}]], "Input",
 CellLabel->
  "In[127]:=",ExpressionUUID->"2418ef4d-ec61-467a-ae2f-3f42395a658a"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[127]=",ExpressionUUID->"c965efb2-20be-4073-abd4-2847023e6ef6"]
}, Open  ]],

Cell[TextData[{
 "Since location 25 is still equal to 0, we know that it has not been used \
and we store ",
 StyleBox["student3", "Code"],
 "\[CloseCurlyQuote]s record in location 25."
}], "Text",ExpressionUUID->"2285973e-8ceb-47a3-8535-c2ec434ce6a1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"studentRecords", "[", 
   RowBox[{"[", "25", "]"}], "]"}], "=", "student3"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[128]:=",ExpressionUUID->"a8e1a0ff-85cb-4de2-9ab2-393eed725d20"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6578", ",", "3.42`"}], "}"}]], "Output",
 CellLabel->
  "Out[128]=",ExpressionUUID->"608f7a2e-2f9e-41d3-bf54-95520efa2c03"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Printing Records", "Subsubsection",ExpressionUUID->"8edcec3b-1126-4689-b650-4bf27f38e3fe"],

Cell[TextData[{
 "Before going any further, take a look at the current state of ",
 StyleBox["studentRecords", "Code"],
 "."
}], "Text",ExpressionUUID->"e4727374-a773-4ed8-ad05-669cae54c243"],

Cell[CellGroupData[{

Cell[BoxData["studentRecords"], "Input",
 CellLabel->
  "In[129]:=",ExpressionUUID->"2e019bf1-20c1-4cc1-bf66-b8c25bb4e5cc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   RowBox[{"{", 
    RowBox[{"2908", ",", "2.89`"}], "}"}], ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", 
   RowBox[{"{", 
    RowBox[{"7319", ",", "3.21`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6578", ",", "3.42`"}], "}"}], ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[129]=",ExpressionUUID->"3f89acbc-bd47-4c77-b997-db930faa9b50"]
}, Open  ]],

Cell[TextData[{
 "This is not very easy to read. We need to write a function to print out the \
data in a more useful format. To do this, we loop through the elements of the \
list and, for those that are nonzero, print the index and the data stored in \
that position. Note that because we are potentially comparing numbers to \
lists, we must use ",
 StyleBox[ButtonBox["UnsameQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/UnsameQ"], "FunctionLink"],
 " (",
 StyleBox["=!=", "Code"],
 ") rather than ",
 StyleBox[ButtonBox["Unequal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Unequal"], "FunctionLink"],
 " (",
 StyleBox["!=", "Code"],
 ")."
}], "Text",ExpressionUUID->"ae87c954-4cd9-45fd-a1cf-f8ec280eb668"],

Cell[BoxData[
 RowBox[{
  RowBox[{"printRecords", "[", "database_List", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "i", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"i", "=", "1"}], ",", 
      RowBox[{"i", "\[LessEqual]", 
       RowBox[{"Length", "[", "database", "]"}]}], ",", 
      RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"database", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "=!=", "0"}], ",", 
        RowBox[{"Print", "[", 
         RowBox[{"i", ",", "\"\< \>\"", ",", 
          RowBox[{"database", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], "]"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->
  "In[130]:=",ExpressionUUID->"4d72c46b-73f8-46d6-9169-955a4c766e51"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"printRecords", "[", "studentRecords", "]"}]], "Input",
 CellLabel->
  "In[131]:=",ExpressionUUID->"557a9e39-f652-4228-99fe-e24e28f340c5"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"2", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2908", ",", "2.89`"}], "}"}]}],
  SequenceForm[2, " ", {2908, 2.89}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[131]:=",ExpressionUUID->"13b55270-0d30-44ba-adbe-0ca967891c61"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"24", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"7319", ",", "3.21`"}], "}"}]}],
  SequenceForm[24, " ", {7319, 3.21}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[131]:=",ExpressionUUID->"9183cb96-d4f3-4e7b-915b-814d8daeb19e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"25", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"6578", ",", "3.42`"}], "}"}]}],
  SequenceForm[25, " ", {6578, 3.42}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[131]:=",ExpressionUUID->"645207e3-845c-4a13-9bfd-fac427ab9886"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["A Function for Storing New Records", "Subsubsection",ExpressionUUID->"901066c1-a431-409a-a4a8-6bf2c3b515df"],

Cell[TextData[{
 "Next, we write a function ",
 StyleBox["storeRecord", "Code"],
 " to automate the process of adding records to the database. ",
 StyleBox["storeRecord", "Code"],
 " will accept two arguments, the ID and GPA of a student, and will add that \
student\[CloseCurlyQuote]s record to the ",
 StyleBox["studentRecords", "Code"],
 " list (the database). "
}], "Text",ExpressionUUID->"131192f6-9b08-4a19-a9ae-9adee2328bed"],

Cell[TextData[{
 "The first step in implementing ",
 StyleBox["storeRecord", "Code"],
 " will be to assign to a local variable, which we call ",
 StyleBox["record", "Code"],
 ", the list representing the student record. Then, ",
 StyleBox["storeRecord", "Code"],
 " needs to determine the location in the ",
 StyleBox["studentRecords", "Code"],
 " list in which the record will be stored. In particular, it will need to \
avoid collision. To do this, we will use something similar to the linear \
probing function defined in the text. Beginning with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"i", "=", "0"}], TraditionalForm]],ExpressionUUID->
  "ad6bf87c-57fd-4263-b931-638c3213f1b7"],
 ", we calculate ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"h", "(", 
     RowBox[{"k", "+", "i"}], ")"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"k", "+", "i"}], ")"}], " ", "mod", " ", "57"}], "+", "1"}]}], 
   TraditionalForm]],ExpressionUUID->"e0961162-48de-4613-9f61-c04f5933e9cb"],
 ". We store that value in the local name ",
 StyleBox["hash", "Code"],
 " and check to see if ",
 Cell["studentRecords[[hash]]", "myCode",ExpressionUUID->
  "1a659b10-ec90-4cd2-9730-7bd1b25826a7"],
 " is 0. If so, then we know the list does not already have a record stored \
in that location and we can stop our search for an open position. The ",
 StyleBox[ButtonBox["Break",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Break"], "FunctionLink"],
 " function causes the loop in which it is contained to terminate. If the \
location is not empty, we increment ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "ac4abefa-32c0-4937-b177-2487fabe4320"],
 " and continue looking. Once we have found an open position, we only need to \
assign our record to that position. We give ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 " as the final expression so that the function does not display anything \
when the record is successfully stored. "
}], "Text",ExpressionUUID->"ebe5a3e8-0cbc-43ba-9367-d611820e9528"],

Cell[TextData[{
 "Note that, for this function, we chose not to include the database as a \
parameter, but instead we have described the function in relation to the ",
 StyleBox["studentRecords", "Code"],
 " list that we began above. This can result in a significant improvement in \
performance, especially when the list of records is long, because the \
database does not have to be passed as an argument to the function and then \
returned from it each time a new record is to be stored. The disadvantage, of \
course, is that in order to use a different name for the database, we have to \
revise the ",
 StyleBox["storeRecord", "Code"],
 " function. "
}], "Text",ExpressionUUID->"535c0482-5f94-4019-a418-612ba77c64ad"],

Cell[TextData[{
 "Here is the completed ",
 StyleBox["storeRecord", "Code"],
 " function."
}], "Text",ExpressionUUID->"95b23074-da09-4782-9ecd-bc23d39a6979"],

Cell[BoxData[
 RowBox[{
  RowBox[{"storeRecord", "[", 
   RowBox[{"id_Integer", ",", "gpa_Real"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"record", ",", "hash", ",", "i"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"record", "=", 
      RowBox[{"{", 
       RowBox[{"id", ",", "gpa"}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "0"}], ",", 
       RowBox[{"i", "\[LessEqual]", "56"}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"hash", "=", 
         RowBox[{"calculateHash", "[", 
          RowBox[{"id", "+", "i"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"studentRecords", "[", 
            RowBox[{"[", "hash", "]"}], "]"}], "===", "0"}], ",", 
          RowBox[{"Break", "[", "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"studentRecords", "[", 
       RowBox[{"[", "hash", "]"}], "]"}], "=", "record"}], ";", 
     "\[IndentingNewLine]", "Null"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[132]:=",ExpressionUUID->"8d77a630-9593-47e8-9c45-b396c095dc6b"],

Cell["Now, we add a few records.", "Text",ExpressionUUID->"a077a773-0653-4320-a23a-fb300cdd7a33"],

Cell[BoxData[
 RowBox[{"storeRecord", "[", 
  RowBox[{"2216", ",", "1.98"}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[133]:=",ExpressionUUID->"c92a5076-6df9-46f2-bc50-ec0be9b96d3e"],

Cell[BoxData[
 RowBox[{"storeRecord", "[", 
  RowBox[{"1325", ",", "3.14"}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[134]:=",ExpressionUUID->"2515f32d-528f-488a-b80a-af010689d48c"],

Cell[BoxData[
 RowBox[{"storeRecord", "[", 
  RowBox[{"7061", ",", "3.51"}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[135]:=",ExpressionUUID->"e80761b0-6f18-4c3b-9ddb-1a055c412aa2"],

Cell[TextData[{
 "Look again at ",
 StyleBox["studentRecords", "Code"],
 "."
}], "Text",ExpressionUUID->"d6821e69-d546-4dc8-a4b7-bc1af2b268c5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"printRecords", "[", "studentRecords", "]"}]], "Input",
 CellLabel->
  "In[136]:=",ExpressionUUID->"4ca0ee7c-5142-4b2b-9ace-8136698b9435"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"2", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2908", ",", "2.89`"}], "}"}]}],
  SequenceForm[2, " ", {2908, 2.89}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[136]:=",ExpressionUUID->"70163d49-f64c-4b64-b200-7f8b04bdcfcb"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"15", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1325", ",", "3.14`"}], "}"}]}],
  SequenceForm[15, " ", {1325, 3.14}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[136]:=",ExpressionUUID->"a963711a-3c9d-4052-b8e0-e197fec2f486"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"24", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"7319", ",", "3.21`"}], "}"}]}],
  SequenceForm[24, " ", {7319, 3.21}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[136]:=",ExpressionUUID->"372f8e46-47a8-4735-a143-6cf36977547c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"25", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"6578", ",", "3.42`"}], "}"}]}],
  SequenceForm[25, " ", {6578, 3.42}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[136]:=",ExpressionUUID->"b6288b72-794f-409d-b652-5354dc272519"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"51", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2216", ",", "1.98`"}], "}"}]}],
  SequenceForm[51, " ", {2216, 1.98}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[136]:=",ExpressionUUID->"3d8752c4-5ea0-45ad-8ea6-e64777d58786"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"52", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"7061", ",", "3.51`"}], "}"}]}],
  SequenceForm[52, " ", {7061, 3.51}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[136]:=",ExpressionUUID->"2c9ca30c-b6f3-4172-b7bc-0763a234800c"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Retrieving Records", "Subsubsection",ExpressionUUID->"6b4e9cd1-be04-4e94-ba09-a071eb441d94"],

Cell["\<\
We now have functions for storing a student record in our database and for \
printing all of the records. We also need a way to retrieve the record for a \
particular student. Indeed, one of the benefits of hash functions is that \
they provide an efficient way to look up records\[LongDash]given the unique \
key, we only need to apply the hash function to determine the memory location \
in which the record is stored (subject to collision, of course). \
\>", "Text",ExpressionUUID->"64b7dfcc-a737-475c-8700-a82ad38a472a"],

Cell[TextData[{
 "Our ",
 StyleBox["retrieveRecord", "Code"],
 " function will accept a student ID number as its input and return the list \
storing the student\[CloseCurlyQuote]s record. Most of the work will take \
place within the same ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop as was in the ",
 StyleBox["storeRecord", "Code"],
 " function. This time, we enclose the loop in a ",
 StyleBox[ButtonBox["Catch",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Catch"], "FunctionLink"],
 ", as the means of short-circuiting the loop and passing the result, either ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 " or the record, out of the function. We test to make sure the location we \
are looking in is nonzero. If the location is 0, that tells us that the entry \
does not exist and the procedure will display the following message and \
return ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 ". "
}], "Text",ExpressionUUID->"3f820941-b9b9-434a-aef6-8af5040a17a5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"retrieveRecord", "::", "missing"}], "=", 
   "\"\<Desired record does not exist.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[137]:=",ExpressionUUID->"d93f44c7-6563-4e8a-bea3-5c3db06cc8d2"],

Cell["\<\
Assuming the location is not 0, we check to see if the ID of the record in \
that position is the ID we are looking for. If so, we return the student \
data. If the ID is not the one we are searching for, it must have been the \
case that our record was pushed down the line because of a collision and we \
continue the loop. \
\>", "Text",ExpressionUUID->"383b8940-2658-4b98-ab9b-1f2b9b85d356"],

Cell[BoxData[
 RowBox[{
  RowBox[{"retrieveRecord", "[", "id_Integer", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"hash", ",", "i"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Catch", "[", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "0"}], ",", 
       RowBox[{"i", "\[LessEqual]", "56"}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"hash", "=", 
         RowBox[{"calculateHash", "[", 
          RowBox[{"id", "+", "i"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"studentRecords", "[", 
            RowBox[{"[", "hash", "]"}], "]"}], "===", "0"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{"retrieveRecord", "::", "missing"}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Throw", "[", "Null", "]"}]}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"studentRecords", "[", 
             RowBox[{"[", "hash", "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "id"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Throw", "[", 
           RowBox[{"studentRecords", "[", 
            RowBox[{"[", "hash", "]"}], "]"}], "]"}]}], "\[IndentingNewLine]",
          "]"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[138]:=",ExpressionUUID->"2fec1474-fabf-43e0-9042-b18ee3e3f492"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"retrieveRecord", "[", "1325", "]"}]], "Input",
 CellLabel->
  "In[139]:=",ExpressionUUID->"54bf2acf-f888-45e8-8a49-d03177fe56e7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1325", ",", "3.14`"}], "}"}]], "Output",
 CellLabel->
  "Out[139]=",ExpressionUUID->"05ac3e14-f674-4e1b-82de-e1701e38260f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"retrieveRecord", "[", "7061", "]"}]], "Input",
 CellLabel->
  "In[140]:=",ExpressionUUID->"49034a8e-d6ee-4c39-af0d-fbedbf51e23a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7061", ",", "3.51`"}], "}"}]], "Output",
 CellLabel->
  "Out[140]=",ExpressionUUID->"a52cabc8-ec97-4d39-bef3-a25827686aca"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pseudorandom Numbers", "Subsection",
 CellTags->"Section5b",ExpressionUUID->"cba65204-f58b-4408-a469-44ed89a2ca26"],

Cell["\<\
Many applications require sequences of random numbers, which are important in \
cryptography and in generating data for computer simulations. It is \
impossible to produce a truly random stream of numbers using software only, \
since software employs algorithms. Anything that can be generated by an \
algorithm is, by definition, not random. Fortunately, for most applications, \
it is sufficient to generate a stream of pseudorandom numbers. This is a \
stream of numbers that, while not truly random, exhibits some of the same \
properties of a random number stream. Effective algorithms for generating \
pseudorandom numbers can be based on modular arithmetic. We will implement a \
linear congruential method, as described in the text. \
\>", "Text",ExpressionUUID->"ba1e6717-2d70-47a5-90bb-fb52f9b364fa"],

Cell[TextData[{
 "We must choose four integers: the modulus ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "395b0ae4-308c-4d8c-bcf8-90575f8e5faa"],
 ", the multiplier ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "3da641d0-a184-45b3-b698-a927f6ab400a"],
 " with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", "\[LessEqual]", "a", "<", "m"}], TraditionalForm]],
  ExpressionUUID->"022e7bc8-aaa6-47b2-ae84-b790709380ff"],
 ", the increment ",
 Cell[BoxData[
  FormBox["c", TraditionalForm]],ExpressionUUID->
  "1d951bf4-9013-4ba8-ac63-452471d75d0d"],
 " with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "\[LessEqual]", "c", "<", "m"}], TraditionalForm]],
  ExpressionUUID->"1ce31545-a0af-481d-a9fa-7cfa5ccff127"],
 ", and the seed ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "0"], TraditionalForm]],ExpressionUUID->
  "5c717bd7-add8-4b4d-b20c-81fef8226656"],
 " with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "\[LessEqual]", 
    SubscriptBox["x", "0"], "<", "m"}], TraditionalForm]],ExpressionUUID->
  "136f32c4-4a2a-4d75-8fba-5471d719ab10"],
 ". We create a sequence of pseudorandom numbers using the recursive formula ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", 
     RowBox[{"n", "+", "1"}]], "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"a", "\[CenterDot]", 
        SubscriptBox["x", "n"]}], "+", "c"}], ")"}], " ", "mod", " ", "m"}]}],
    TraditionalForm]],ExpressionUUID->
  "de95da41-ddcc-4408-8c2a-97a4a0f9596b"],
 ". It is common to have the seed chosen based on some physical property \
accessible by the computer, for instance the time. Alternately, the seed can \
be based on some truly random physical process, such as radioactive decay. \
For this example, we will generate a seed by multiplying by 1000 the result \
of the ",
 StyleBox[ButtonBox["SessionTime",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SessionTime"], "FunctionLink"],
 " function, which gives the total number of seconds since the beginning of \
the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " session. We apply ",
 StyleBox[ButtonBox["Floor",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Floor"], "FunctionLink"],
 " to be certain that we obtain an integer. "
}], "Text",ExpressionUUID->"9c0e882c-5583-4ab5-b047-85d0fd479a56"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Floor", "[", 
  RowBox[{"1000", "*", 
   RowBox[{"SessionTime", "[", "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[141]:=",ExpressionUUID->"b57972b7-fc72-45c5-a6d4-e06693c8effa"],

Cell[BoxData["14226"], "Output",
 CellLabel->
  "Out[141]=",ExpressionUUID->"823885ed-6053-4f6c-8bec-60a1a7b284c5"]
}, Open  ]],

Cell[TextData[{
 "We will write two functions that generate random student IDs and GPAs that \
we can use to add some random records to our ",
 StyleBox["studentRecords", "Code"],
 " from above. We first write the function ",
 StyleBox["randomIDs", "Code"],
 ", which will accept a positive integer as input to control the number of \
IDs to generate. It will return a sequence of that number of random student \
IDs. "
}], "Text",ExpressionUUID->"a6190c66-aeeb-491b-b389-9781b3bc6c92"],

Cell[TextData[{
 "Recall that a student ID, in the context described above, is a four-digit \
number. Therefore, our random numbers must be between 1000 and 9999. We can \
obtain such numbers by generating random integers between 0 and 8999 and \
adding 1000. Thus, our modulus will be 8999. We choose a multiplier of 57 and \
an increment of 328. (These values were chosen for no particular reason, but \
in practice the choice of ",
 Cell[BoxData[
  FormBox["c", TraditionalForm]],ExpressionUUID->
  "5fd8d3cf-2234-4ba0-bf71-06ee816c65c5"],
 " and ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "c5200a1e-81d7-4635-b6a1-a663725e9b27"],
 " can be an important consideration. See the references in the textbook for \
more information.) The seed will be determined from ",
 StyleBox[ButtonBox["SessionTime",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SessionTime"], "FunctionLink"],
 " as described above. "
}], "Text",ExpressionUUID->"c0ed49b0-ca6b-4df0-9a2d-4caab469d19f"],

Cell["The function is straightforward.", "Text",ExpressionUUID->"c624f549-6e2a-4927-a92d-ef670e4fcdc4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"randomIDs", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"m", "=", "8999"}], ",", 
      RowBox[{"a", "=", "57"}], ",", 
      RowBox[{"c", "=", "328"}], ",", "x", ",", "i"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"x", "=", 
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"Floor", "[", 
         RowBox[{"1000", "*", 
          RowBox[{"SessionTime", "[", "]"}]}], "]"}], ",", "m"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Reap", "[", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "1"}], ",", 
         RowBox[{"i", "\[LessEqual]", "n"}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Sow", "[", 
          RowBox[{"x", "=", 
           RowBox[{"Mod", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"a", "*", "x"}], "+", "c"}], ",", "m"}], "]"}]}], 
          "]"}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}],
       "[", 
      RowBox[{"[", 
       RowBox[{"2", ",", "1"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[142]:=",ExpressionUUID->"d90b2b14-a659-4917-aafe-a14a152c22d3"],

Cell["We generate 10 random IDs by applying the procedure. ", "Text",ExpressionUUID->"11de75ef-7a2b-4ecd-bf89-a9e0f83eef1b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"someIDs", "=", 
  RowBox[{"randomIDs", "[", "10", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[143]:=",ExpressionUUID->"3638db0f-0341-4630-aa0f-d6ef10cf6e26"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "8596", ",", "4354", ",", "5533", ",", "744", ",", "6740", ",", "6550", ",",
    "4719", ",", "8340", ",", "7760", ",", "1697"}], "}"}]], "Output",
 CellLabel->
  "Out[143]=",ExpressionUUID->"9588e49b-9f88-40ad-a8f9-c13512a4c2f8"]
}, Open  ]],

Cell[TextData[{
 "To generate GPAs, the approach will be essentially the same. We use the \
pure multiplicative generator mentioned in the text with modulus ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", "31"], "-", "1"}], TraditionalForm]],ExpressionUUID->
  "c0f317ec-1f50-43e9-9571-9f12d10d956d"],
 ", multiplier ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["7", "5"], TraditionalForm]],ExpressionUUID->
  "58f3d906-544c-4727-84dc-d63ce7b2b5dd"],
 ", and increment 0. This will produce integers between ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]],ExpressionUUID->
  "e2f62b64-d1ce-4a56-bcac-869262c07e68"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", "31"], "-", "2"}], TraditionalForm]],ExpressionUUID->
  "9f7c9099-6617-4f34-8a4a-f29ed244db54"],
 ". To obtain numbers between 0 and 4, we divide by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", "31"], "-", "2"}], TraditionalForm]],ExpressionUUID->
  "7d178191-b93e-47a7-ab7f-d87a0a975a33"],
 " and multiply by ",
 Cell[BoxData[
  FormBox["4", TraditionalForm]],ExpressionUUID->
  "d577f760-a93d-4f94-978d-92088eb6bee6"],
 ". "
}], "Text",ExpressionUUID->"f3e9414d-a684-4b8d-bc53-7bf4fe411042"],

Cell[BoxData[
 RowBox[{
  RowBox[{"randomGPAs", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"m", "=", 
       RowBox[{
        RowBox[{"2", "^", "31"}], "-", "1"}]}], ",", 
      RowBox[{"a", "=", 
       RowBox[{"7", "^", "5"}]}], ",", "x", ",", "i"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"x", "=", 
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"Floor", "[", 
         RowBox[{"1000", "*", 
          RowBox[{"SessionTime", "[", "]"}]}], "]"}], ",", "m"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Reap", "[", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "1"}], ",", 
         RowBox[{"i", "\[LessEqual]", "n"}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"x", "=", 
           RowBox[{"Mod", "[", 
            RowBox[{
             RowBox[{"a", "*", "x"}], ",", "m"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Sow", "[", 
           RowBox[{"Round", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"x", "/", 
                RowBox[{"(", 
                 RowBox[{"m", "-", "1"}], ")"}]}], ")"}], "*", "4"}], ",", 
             "0.01"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
       "\[IndentingNewLine]", "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"2", ",", "1"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[144]:=",ExpressionUUID->"edfcd7a5-bd3c-4b22-8946-c9551a357d12"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"someGPAs", "=", 
  RowBox[{"randomGPAs", "[", "10", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[145]:=",ExpressionUUID->"8a76b3de-9873-426d-9332-ef35a60a5656"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.45`", ",", "3.94`", ",", "0.03`", ",", "1.6500000000000001`", ",", 
   "2.21`", ",", "1.59`", ",", "3.56`", ",", "3.81`", ",", "0.77`", ",", 
   "0.73`"}], "}"}]], "Output",
 CellLabel->
  "Out[145]=",ExpressionUUID->"5db6422c-33fd-4b6b-987a-412dee3881b0"]
}, Open  ]],

Cell[TextData[{
 "Note that we use ",
 StyleBox[ButtonBox["Round",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Round"], "FunctionLink"],
 " to round the random number to the nearest hundredth, so that out output \
has at most two digits after the decimal place. The second argument to ",
 StyleBox[ButtonBox["Round",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Round"], "FunctionLink"],
 " being ",
 Cell[BoxData[
  FormBox["0.01", TraditionalForm]],ExpressionUUID->
  "9f4cc548-12d5-4e0f-88fb-5b6a9b05fa30"],
 " means that the result will be rounded to the nearest multiple of ",
 Cell[BoxData[
  FormBox["0.01", TraditionalForm]],ExpressionUUID->
  "539d992e-019c-4194-a6f5-8180e450a078"],
 "."
}], "Text",ExpressionUUID->"4d60026a-b3de-4688-910f-d5a3f3b77c77"],

Cell[TextData[{
 "We now add the random students to ",
 StyleBox["studentRecords", "Code"],
 "."
}], "Text",ExpressionUUID->"05414ff4-2ce0-4b4e-9ce9-cdf9f998bdc5"],

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "\[LessEqual]", "10"}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{"storeRecord", "[", 
    RowBox[{
     RowBox[{"someIDs", "[", 
      RowBox[{"[", "i", "]"}], "]"}], ",", 
     RowBox[{"someGPAs", "[", 
      RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[146]:=",ExpressionUUID->"2f23fe5b-04d2-4f38-9ef0-31198a7b7b4f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"printRecords", "[", "studentRecords", "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[147]:=",ExpressionUUID->"649ae6dd-2b3b-4d95-b07a-d18b492372da"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"2", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2908", ",", "2.89`"}], "}"}]}],
  SequenceForm[2, " ", {2908, 2.89}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[147]:=",ExpressionUUID->"4e1db6b9-a816-4027-997a-2657a66b62d3"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"4", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"744", ",", "1.6500000000000001`"}], "}"}]}],
  SequenceForm[4, " ", {744, 1.6500000000000001`}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[147]:=",ExpressionUUID->"468320b8-37d4-493e-9a92-3aad89ce0f4b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"5", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"5533", ",", "0.03`"}], "}"}]}],
  SequenceForm[5, " ", {5533, 0.03}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[147]:=",ExpressionUUID->"77a2b256-7953-44f3-8eb7-f3c37edf3094"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"9", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"7760", ",", "0.77`"}], "}"}]}],
  SequenceForm[9, " ", {7760, 0.77}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[147]:=",ExpressionUUID->"4c678ce6-642d-4590-8089-fda4f7744a90"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"15", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1325", ",", "3.14`"}], "}"}]}],
  SequenceForm[15, " ", {1325, 3.14}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[147]:=",ExpressionUUID->"21f449c5-956c-45ed-8b0f-d92cd88de4f6"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"16", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"6740", ",", "2.21`"}], "}"}]}],
  SequenceForm[16, " ", {6740, 2.21}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[147]:=",ExpressionUUID->"82fc02ce-b4ef-4ac9-a91f-e8219b9e3f01"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"19", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"8340", ",", "3.81`"}], "}"}]}],
  SequenceForm[19, " ", {8340, 3.81}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[147]:=",ExpressionUUID->"39113ebd-a1d6-46b9-b6b8-8f24e2f04458"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"23", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"4354", ",", "3.94`"}], "}"}]}],
  SequenceForm[23, " ", {4354, 3.94}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[147]:=",ExpressionUUID->"0c9ab8be-4bc6-41ca-a3c5-34dc6e4b680a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"24", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"7319", ",", "3.21`"}], "}"}]}],
  SequenceForm[24, " ", {7319, 3.21}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[147]:=",ExpressionUUID->"3a9d220e-cfb6-4793-977f-1af0128c009c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"25", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"6578", ",", "3.42`"}], "}"}]}],
  SequenceForm[25, " ", {6578, 3.42}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[147]:=",ExpressionUUID->"a50d846b-2111-4203-939f-22252ee15b3d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"45", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1697", ",", "0.73`"}], "}"}]}],
  SequenceForm[45, " ", {1697, 0.73}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[147]:=",ExpressionUUID->"008e6fa6-97da-495b-bc54-8886e0c5b418"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"46", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"4719", ",", "3.56`"}], "}"}]}],
  SequenceForm[46, " ", {4719, 3.56}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[147]:=",ExpressionUUID->"6ec43b63-e1df-496d-b9a7-15d23c0a1ca6"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"47", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"8596", ",", "0.45`"}], "}"}]}],
  SequenceForm[47, " ", {8596, 0.45}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[147]:=",ExpressionUUID->"070be4df-0eca-48d0-b04f-39b37e8f036d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"51", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2216", ",", "1.98`"}], "}"}]}],
  SequenceForm[51, " ", {2216, 1.98}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[147]:=",ExpressionUUID->"397ccf2f-1dfd-4be4-8de8-c750db3015f7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"52", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"7061", ",", "3.51`"}], "}"}]}],
  SequenceForm[52, " ", {7061, 3.51}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[147]:=",ExpressionUUID->"fd9a867d-41fc-417a-8472-3229300f7445"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"53", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"6550", ",", "1.59`"}], "}"}]}],
  SequenceForm[53, " ", {6550, 1.59}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[147]:=",ExpressionUUID->"6b8de52d-969d-48f3-8d2c-02bef7a22900"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Check Digits", "Subsection",
 CellTags->"Section5c",ExpressionUUID->"90dfbc64-800b-43d1-97cb-26b9ad6cc3ef"],

Cell["\<\
We conclude this section with a function to check the validity of an ISBN. \
Recall that the ISBN-10 code consists of 10 digits, the last of which is \
computed by the formula \
\>", "Text",ExpressionUUID->"7d3a2ad9-a14c-48ba-b31f-2c2d313e0a2b"],

Cell[BoxData[
 FormBox[Cell[TextData[{
   Cell[BoxData[
    FormBox[
     RowBox[{
      SubscriptBox["x", "10"], "="}], TraditionalForm]],ExpressionUUID->
    "6a72669e-a6ed-4d5e-9485-1eef08d3149d"],
   Cell[BoxData[
    FormBox[
     RowBox[{
      UnderoverscriptBox[
       StyleBox["\[Sum]",
        FontSize->16], 
       StyleBox[
        RowBox[{"i", "=", "1"}], "TI"], "9",
       LimitsPositioning->False], 
      RowBox[{
       RowBox[{"i", "\[CenterDot]", 
        SubscriptBox["x", "i"]}], " ", 
       RowBox[{"(", 
        RowBox[{"mod", " ", "11"}], ")"}]}]}], TraditionalForm]], 
    "InlineMath",ExpressionUUID->"249b68b2-4e21-411b-a6df-8641a8a30cbd"]
  }],ExpressionUUID->"3386ff25-2fba-493d-877a-af92fad34eb2"], 
  TraditionalForm]], "Equation",ExpressionUUID->"d8259654-dbc1-43db-85a5-\
340106855894"],

Cell[TextData[{
 "The symbol X is used in case ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "10"], "=", "10"}], TraditionalForm]],ExpressionUUID->
  "3baffd26-ce87-4149-8160-c36be8e3049a"],
 "."
}], "Text",ExpressionUUID->"fe0f2e5c-7028-403f-8c4d-8dc427f0d2f2"],

Cell[TextData[{
 "Our ",
 StyleBox["checkISBN", "Code"],
 " function will accept the ISBN as a string. It is necessary that we use \
strings in case the ISBN contains X as the check digit. Consider the ISBN \
below."
}], "Text",ExpressionUUID->"2e8cf14f-b8bb-48ca-b6cd-2d753e704d8c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isbnExample", "=", "\"\<0073383090\>\""}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[148]:=",ExpressionUUID->"0c4d5d7a-0924-4ccd-b62b-fbfb08e34eb5"],

Cell[BoxData["\<\"0073383090\"\>"], "Output",
 CellLabel->
  "Out[148]=",ExpressionUUID->"dd474ae7-4e9c-4557-b74e-2004ef11883e"]
}, Open  ]],

Cell[TextData[{
 "In the Wolfram Language, in order to access a character within a string, \
you use the ",
 StyleBox[ButtonBox["StringTake",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringTake"], "FunctionLink"],
 " function. The first argument to ",
 StyleBox[ButtonBox["StringTake",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringTake"], "FunctionLink"],
 " is the string. In order to obtain a single character, you provide as the \
second argument a list with the position of the character as the sole \
element. For example, the third character of our example is obtained as \
follows."
}], "Text",ExpressionUUID->"03b07e93-3e98-4d90-9b09-f5d14a1441b2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringTake", "[", 
  RowBox[{"isbnExample", ",", 
   RowBox[{"{", "3", "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[149]:=",ExpressionUUID->"4a874658-1654-48e1-93c3-44be99ca51fd"],

Cell[BoxData["\<\"7\"\>"], "Output",
 CellLabel->
  "Out[149]=",ExpressionUUID->"2faae4b3-12b0-43bf-8a7a-d3b4d7053fa2"]
}, Open  ]],

Cell["Note that the output is still a string, however.", "Text",ExpressionUUID->"3889ae4b-c004-407f-a337-aefc1857a9df"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringTake", "[", 
   RowBox[{"isbnExample", ",", 
    RowBox[{"{", "3", "}"}]}], "]"}], "//", "FullForm"}]], "Input",
 CellLabel->
  "In[150]:=",ExpressionUUID->"9cc16d1a-ae09-47ff-ba2e-98d8c31f3e61"],

Cell[BoxData[
 TagBox[
  StyleBox["\"\<7\>\"",
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[150]//FullForm=",ExpressionUUID->"d4f96daf-2f9f-4fac-8afb-\
8adfbfd12801"]
}, Open  ]],

Cell[TextData[{
 "In order to perform arithmetic, we need to turn the character into an \
integer. To do this, we can use the ",
 StyleBox[ButtonBox["ToExpression",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ToExpression"], "FunctionLink"],
 " function. When ",
 StyleBox[ButtonBox["ToExpression",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ToExpression"], "FunctionLink"],
 " is applied to a string, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " interprets the string as ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " input. In this example, the string \[OpenCurlyDoubleQuote]7\
\[CloseCurlyDoubleQuote] will be interpreted as if we had entered 7 on an \
input line. "
}], "Text",ExpressionUUID->"9098c9a2-d1da-435f-a7d2-40cc02f39a6f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ToExpression", "[", 
   RowBox[{"StringTake", "[", 
    RowBox[{"isbnExample", ",", 
     RowBox[{"{", "3", "}"}]}], "]"}], "]"}], "//", "FullForm"}]], "Input",
 CellLabel->
  "In[151]:=",ExpressionUUID->"3441978d-56c8-4ba6-a5d3-7b3f4bb430c3"],

Cell[BoxData[
 TagBox[
  StyleBox["7",
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[151]//FullForm=",ExpressionUUID->"443129b5-0386-416f-bb1c-\
3ba1d56b942a"]
}, Open  ]],

Cell[TextData[{
 "Conversely, the function ",
 StyleBox[ButtonBox["ToString",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ToString"], "FunctionLink"],
 " will convert an expression into a string. The following converts the \
number 7 into the string \[OpenCurlyDoubleQuote]7\[CloseCurlyDoubleQuote]."
}], "Text",ExpressionUUID->"fd44c47e-9ddf-4f3c-a73a-b2759b4378f1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ToString", "[", "7", "]"}], "//", "FullForm"}]], "Input",
 CellLabel->
  "In[152]:=",ExpressionUUID->"600f7bbf-1d94-4615-93c3-58665765e466"],

Cell[BoxData[
 TagBox[
  StyleBox["\"\<7\>\"",
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[152]//FullForm=",ExpressionUUID->"1064bc78-b410-475a-b054-\
66174b2fa6be"]
}, Open  ]],

Cell[TextData[{
 "Our function will compute the sum indicated by the formula above using ",
 StyleBox[ButtonBox["Sum",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sum"], "FunctionLink"],
 ". Recall that the first argument to ",
 StyleBox[ButtonBox["Sum",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sum"], "FunctionLink"],
 " is an expression in terms of an index variable and the second argument is \
the range for the variable. Once the value of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "10"], TraditionalForm]],ExpressionUUID->
  "dd88d6eb-e157-4a81-89dc-7cf97c0a524e"],
 " is determined, we compare it to the check digit. This is only slightly \
complicated by the fact that a check digit of 10 corresponds to the symbol X. \
Note that we must compare the check digit with the value of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "10"], TraditionalForm]],ExpressionUUID->
  "a4586169-b9f0-4f9e-8db1-3943bc12b96f"],
 " as strings in both the case that the ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "10"], "=", "10"}], TraditionalForm]],ExpressionUUID->
  "00d0788c-d811-4f07-8772-db42283006a2"],
 " and when ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "10"], "<", "10"}], TraditionalForm]],ExpressionUUID->
  "eb48ab41-8dd9-468e-89f4-824aefdadc54"],
 ". This is because the last digit may be X, whether it should be or not, and \
applying the ",
 StyleBox[ButtonBox["ToExpression",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ToExpression"], "FunctionLink"],
 " function to the string \[OpenCurlyDoubleQuote]X\[CloseCurlyDoubleQuote] \
will result in the symbol ",
 StyleBox["X", "Code"],
 ", which may in fact be assigned to an expression."
}], "Text",ExpressionUUID->"45321df6-96be-4848-86b7-b2c24899801c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"checkISBN", "[", "isbn_String", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", "check"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"check", "=", 
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"Sum", "[", 
         RowBox[{
          RowBox[{"i", "*", 
           RowBox[{"ToExpression", "[", 
            RowBox[{"StringTake", "[", 
             RowBox[{"isbn", ",", 
              RowBox[{"{", "i", "}"}]}], "]"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "9"}], "}"}]}], "]"}], ",", "11"}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"Which", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"check", "<", "10"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ToString", "[", "check", "]"}], "\[Equal]", 
        RowBox[{"StringTake", "[", 
         RowBox[{"isbn", ",", 
          RowBox[{"{", "10", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"check", "\[Equal]", "10"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"StringTake", "[", 
         RowBox[{"isbn", ",", 
          RowBox[{"{", "10", "}"}]}], "]"}], "\[Equal]", "\"\<X\>\""}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[153]:=",ExpressionUUID->"4d8cfeea-ad54-4c8f-80df-3a544a144f6b"],

Cell[TextData[{
 "Recall that a ",
 StyleBox[ButtonBox["Which",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Which"], "FunctionLink"],
 " statement evaluates the first argument and if it is true, returns the \
value of the second argument. If the first argument is false, then it moves \
to the third argument and evaluates that test, and so on."
}], "Text",ExpressionUUID->"b039169e-9984-413a-bf91-7c052da2097c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"checkISBN", "[", "isbnExample", "]"}]], "Input",
 CellLabel->
  "In[154]:=",ExpressionUUID->"3ad9072e-dc6c-4ee2-a7a1-2bfc1530671c"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[154]=",ExpressionUUID->"22148446-735d-4cd4-b1c6-2196e2ed3260"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"checkISBN", "[", "\"\<084930149X\>\"", "]"}]], "Input",
 CellLabel->
  "In[155]:=",ExpressionUUID->"00baaa06-4656-4e3e-b7a3-9c92d920e778"],

Cell[BoxData["False"], "Output",
 CellLabel->
  "Out[155]=",ExpressionUUID->"f42497ce-0722-44ed-9cbd-0c3967b46d50"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"checkISBN", "[", "\"\<232150031X\>\"", "]"}]], "Input",
 CellLabel->
  "In[156]:=",ExpressionUUID->"880025d7-0f6e-45ee-96c9-b3f26283afe1"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[156]=",ExpressionUUID->"dd06949b-9b88-454b-9091-384f73c992d6"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4.6 Cryptography", "Section",
 CellTags->"Section6",ExpressionUUID->"21df4450-aff1-41de-ab84-f9ff3385ac07"],

Cell[TextData[{
 "In this, the final section of Chapter 4, we will see how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can be used to encode and decode strings using two of the approaches \
described in the textbook. Specifically, we will see how to implement a \
classical affine cypher and the RSA system. "
}], "Text",ExpressionUUID->"f5eb7b11-b4b0-4668-8add-d14f5a5a7e7b"],

Cell[CellGroupData[{

Cell["Encoding Strings", "Subsection",
 CellTags->"Section6a",ExpressionUUID->"39e0cf2f-d527-4e2c-8ca5-e4b773ce5b10"],

Cell["\<\
Before we can implement the encryption algorithms, we need to encode strings \
as numbers. In this manual, we will deviate slightly from the convention used \
in the textbook. Instead of assigning the letter A to 0, B to 1, and so on \
with Z assigned to 25, we will assign the space character to 0, A to 1, B to \
2, and so on with Z set to 26. We will then work modulo 27 instead of 26. \
\>", "Text",ExpressionUUID->"46dc317e-81dc-4359-bcb8-a5623f305226"],

Cell[CellGroupData[{

Cell["Some Functions for Working with Strings", "Subsubsection",ExpressionUUID->"8c11525a-cc57-420d-a799-439c04c5ce06"],

Cell[TextData[{
 "The Wolfram Language includes a variety of functions for working with \
strings. We have already seen, in the previous section, the ",
 StyleBox[ButtonBox["StringTake",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringTake"], "FunctionLink"],
 " function. This function is used to obtain a substring of a given string. \
Its first argument is the initial string, and the second argument specifies \
what part of the string to return. "
}], "Text",ExpressionUUID->"bbab2dac-e99b-44c8-9605-6db9cbda2daf"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Characters",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Characters"], "FunctionLink"],
 " function and its inverse ",
 StyleBox[ButtonBox["StringJoin",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringJoin"], "FunctionLink"],
 " (",
 StyleBox["<>", "Code"],
 ") will be useful here. The ",
 StyleBox[ButtonBox["Characters",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Characters"], "FunctionLink"],
 " function takes a string and returns a list of characters."
}], "Text",ExpressionUUID->"e8b3528e-7d79-4f65-9359-5c6d4a1e17dd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Characters", "[", "\"\<THE QUICK BROWN FOX\>\"", "]"}]], "Input",
 CellLabel->
  "In[157]:=",ExpressionUUID->"4f6085a8-0eb1-4f1e-abe8-a7c01a1ae390"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"T\"\>", ",", "\<\"H\"\>", ",", "\<\"E\"\>", ",", "\<\" \"\>", 
   ",", "\<\"Q\"\>", ",", "\<\"U\"\>", ",", "\<\"I\"\>", ",", "\<\"C\"\>", 
   ",", "\<\"K\"\>", ",", "\<\" \"\>", ",", "\<\"B\"\>", ",", "\<\"R\"\>", 
   ",", "\<\"O\"\>", ",", "\<\"W\"\>", ",", "\<\"N\"\>", ",", "\<\" \"\>", 
   ",", "\<\"F\"\>", ",", "\<\"O\"\>", ",", "\<\"X\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[157]=",ExpressionUUID->"b2c4c23c-3df7-4514-9aef-7e58ea7a2af6"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["StringJoin",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringJoin"], "FunctionLink"],
 " function does the opposite. Given two or more strings as arguments, it \
joins them into one string."
}], "Text",ExpressionUUID->"3d34ddc7-b906-42be-8e85-9f57df7933a4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringJoin", "[", 
  RowBox[{"\"\<The quick\>\"", ",", "\"\< \>\"", ",", "\"\<brown fox\>\""}], 
  "]"}]], "Input",
 CellLabel->
  "In[158]:=",ExpressionUUID->"ac45aed4-c75f-4640-b5e0-c29cdaf3bb7c"],

Cell[BoxData["\<\"The quick brown fox\"\>"], "Output",
 CellLabel->
  "Out[158]=",ExpressionUUID->"7b721fd6-9aa0-42d3-9424-3e526ce33191"]
}, Open  ]],

Cell[TextData[{
 StyleBox[ButtonBox["StringJoin",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringJoin"], "FunctionLink"],
 " also has an operator form, ",
 StyleBox["<>", "Code"],
 "."
}], "Text",ExpressionUUID->"84ea6dc4-0663-455d-93d9-c96292d0d369"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\"\<The quick\>\"", " ", "<>", " ", "\"\< \>\"", " ", "<>", " ", 
  "\"\<brown fox\>\""}]], "Input",
 CellLabel->
  "In[159]:=",ExpressionUUID->"8cccfe22-6c72-4f50-bb20-ebd720254726"],

Cell[BoxData["\<\"The quick brown fox\"\>"], "Output",
 CellLabel->
  "Out[159]=",ExpressionUUID->"d9044050-f721-4a88-813b-1c2fb259a7a9"]
}, Open  ]],

Cell["\<\
It can also accept a list of strings as its arguments and will return the \
string formed by joining the members of the list. \
\>", "Text",ExpressionUUID->"aac2fe4f-fd79-4ab3-a06f-9fe419eeab00"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringJoin", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<T\>\"", ",", "\"\<H\>\"", ",", "\"\<E\>\"", ",", "\"\< \>\"", ",", 
    "\"\<Q\>\"", ",", "\"\<U\>\"", ",", "\"\<I\>\"", ",", "\"\<C\>\"", ",", 
    "\"\<K\>\"", ",", "\"\< \>\"", ",", "\"\<B\>\"", ",", "\"\<R\>\"", ",", 
    "\"\<O\>\"", ",", "\"\<W\>\"", ",", "\"\<N\>\"", ",", "\"\< \>\"", ",", 
    "\"\<F\>\"", ",", "\"\<O\>\"", ",", "\"\<X\>\""}], "}"}], "]"}]], "Input",\

 CellLabel->
  "In[160]:=",ExpressionUUID->"8d0f498a-b102-4e18-a35a-9d59429fb80c"],

Cell[BoxData["\<\"THE QUICK BROWN FOX\"\>"], "Output",
 CellLabel->
  "Out[160]=",ExpressionUUID->"57facb20-53c1-44fd-8756-5f5afb6d98ac"]
}, Open  ]],

Cell[TextData[{
 "The Wolfram Language also comes equipped with a function that maps \
characters to integers and its inverse. The ",
 StyleBox[ButtonBox["LetterNumber",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/LetterNumber"], "FunctionLink"],
 " function accepts a character and returns its position in the English \
alphabet. Note that it treats upper and lower case characters the same."
}], "Text",ExpressionUUID->"b59143e5-c317-4f18-b6a4-1169fd5d4d61"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LetterNumber", "[", "\"\<e\>\"", "]"}]], "Input",
 CellLabel->
  "In[161]:=",ExpressionUUID->"fa60e9db-2adb-4c3c-8ef1-f8e759aa1d3d"],

Cell[BoxData["5"], "Output",
 CellLabel->
  "Out[161]=",ExpressionUUID->"9db31b43-1f83-46e1-a8a3-f4fb6f47f21b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LetterNumber", "[", "\"\<E\>\"", "]"}]], "Input",
 CellLabel->
  "In[162]:=",ExpressionUUID->"be6b6b97-1749-4bad-b2c8-b9a80135345c"],

Cell[BoxData["5"], "Output",
 CellLabel->
  "Out[162]=",ExpressionUUID->"c2bfc25a-c269-487b-90b8-e525c9a17aa5"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["LetterNumber",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/LetterNumber"], "FunctionLink"],
 " function records the space character as position 0."
}], "Text",ExpressionUUID->"9234fc54-6d45-4b43-bce0-e47f042a2611"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LetterNumber", "[", "\"\< \>\"", "]"}]], "Input",
 CellLabel->
  "In[163]:=",ExpressionUUID->"b411829d-741d-40a8-9db3-6bd7df64fe04"],

Cell[BoxData["0"], "Output",
 CellLabel->
  "Out[163]=",ExpressionUUID->"4d210280-f117-4a00-a07c-3660529da441"]
}, Open  ]],

Cell["\<\
Moreover, it will accept a string of more than one character and output a \
list of the positions.\
\>", "Text",ExpressionUUID->"ca803098-b2ae-4228-9352-c89b7cbee773"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LetterNumber", "[", "\"\<The quick brown fox\>\"", "]"}]], "Input",
 CellLabel->
  "In[164]:=",ExpressionUUID->"d3b326f1-20ba-4643-b292-61d845e5eaf3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "20", ",", "8", ",", "5", ",", "0", ",", "17", ",", "21", ",", "9", ",", 
   "3", ",", "11", ",", "0", ",", "2", ",", "18", ",", "15", ",", "23", ",", 
   "14", ",", "0", ",", "6", ",", "15", ",", "24"}], "}"}]], "Output",
 CellLabel->
  "Out[164]=",ExpressionUUID->"8bd3487a-6ae7-4eb4-9a4e-05668cc709b8"]
}, Open  ]],

Cell[TextData[{
 "The function ",
 StyleBox[ButtonBox["FromLetterNumber",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FromLetterNumber"], "FunctionLink"],
 " does the reverse, but needs to be used in conjunction with ",
 StyleBox[ButtonBox["StringJoin",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringJoin"], "FunctionLink"],
 " to produce a single string rather than a list of characters."
}], "Text",ExpressionUUID->"0ed098ae-b50e-46f0-befc-fd685fdbac12"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromLetterNumber", "[", "17", "]"}]], "Input",
 CellLabel->
  "In[165]:=",ExpressionUUID->"dc0245b5-465b-4826-9a33-ed4820b01ea6"],

Cell[BoxData["\<\"q\"\>"], "Output",
 CellLabel->
  "Out[165]=",ExpressionUUID->"9740268f-d8e3-4527-8086-bbdff2d7ff86"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromLetterNumber", "[", 
  RowBox[{"{", 
   RowBox[{
   "8", ",", "5", ",", "12", ",", "12", ",", "15", ",", "0", ",", "23", ",", 
    "15", ",", "18", ",", "12", ",", "4"}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[166]:=",ExpressionUUID->"e186e8db-24fd-4769-8be9-828cc2445133"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"h\"\>", ",", "\<\"e\"\>", ",", "\<\"l\"\>", ",", "\<\"l\"\>", 
   ",", "\<\"o\"\>", ",", "\<\" \"\>", ",", "\<\"w\"\>", ",", "\<\"o\"\>", 
   ",", "\<\"r\"\>", ",", "\<\"l\"\>", ",", "\<\"d\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[166]=",ExpressionUUID->"fb3e28d1-313e-4565-8ac1-8f58d164a135"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringJoin", "[", 
  RowBox[{"FromLetterNumber", "[", 
   RowBox[{"{", 
    RowBox[{
    "8", ",", "5", ",", "12", ",", "12", ",", "15", ",", "0", ",", "23", ",", 
     "15", ",", "18", ",", "12", ",", "4"}], "}"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[167]:=",ExpressionUUID->"89393695-00b3-4fc1-ba37-a77d1d755188"],

Cell[BoxData["\<\"hello world\"\>"], "Output",
 CellLabel->
  "Out[167]=",ExpressionUUID->"f02a5e3d-6d26-4d3a-999e-9335e3e86527"]
}, Open  ]],

Cell["\<\
Now that we have the ability to convert strings into a numerical \
representation and back again, we are ready to implement our encryption \
algorithms. \
\>", "Text",ExpressionUUID->"3d8b8188-7e45-4a7a-8528-be07c107df7e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classical Cryptography", "Subsection",
 PageBreakWithin->False,
 CellTags->"Section6b",ExpressionUUID->"50aaae9f-67be-4484-bb10-f38d89340519"],

Cell["\<\
We will now implement an affine cipher. Recall from the text that a general \
affine cipher has the form\
\>", "Text",
 PageBreakAbove->False,
 PageBreakWithin->
  False,ExpressionUUID->"1c48c020-030d-43ec-bd41-85dd5d3ce547"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"f", "(", "p", ")"}], "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"a", "\[CenterDot]", "p"}], "+", "b"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "27"}], ")"}]}]}], ","}], 
  TraditionalForm]], "Equation",ExpressionUUID->"230c8ff8-3b8d-4d66-a96c-\
640f446234fb"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "b95a2107-f661-4814-a2a3-5e46cb59beed"],
 " is an integer corresponding to a character that is to be encrypted. We \
will refer to the pair ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"a", ",", "b"}], ")"}], TraditionalForm]],ExpressionUUID->
  "c08a4f84-600d-455f-a121-b144d244f79d"],
 " as the key to the cipher. For decryption to be feasible, the key must be \
chosen so that ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]],ExpressionUUID->
  "e6e2cd27-8bb6-42b5-85d9-c1fbe473a8a6"],
 " is a bijection. This amounts to choosing an ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "4d4b04d4-dd90-4557-ac0f-971beaa298b5"],
 " that is relatively prime to 27. (Note that the text uses a modulus of ",
 Cell[BoxData[
  FormBox["26", TraditionalForm]],ExpressionUUID->
  "a5584406-cb75-4e81-8007-904fb872d81a"],
 ", while we use ",
 Cell[BoxData[
  FormBox["27", TraditionalForm]],ExpressionUUID->
  "1ae9addf-6a03-45fe-91b8-4f830c95e095"],
 " because we are considering space to be an encodable character.) "
}], "Text",ExpressionUUID->"9a1ed72c-fe4a-4538-bad7-34737e3213aa"],

Cell[TextData[{
 "Encrypting a string requires three simple steps. First, the string is \
transformed into its numerical representation via ",
 StyleBox[ButtonBox["LetterNumber",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/LetterNumber"], "FunctionLink"],
 ". Second, the function ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]],ExpressionUUID->
  "142d84c1-882f-4775-8ec3-f59c34f108db"],
 " is applied to each number. And third, the ",
 StyleBox[ButtonBox["FromLetterNumber",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FromLetterNumber"], "FunctionLink"],
 " function transforms the result back into a string. Our ",
 StyleBox["affineCipher", "Code"],
 " function accepts as input a string and values of ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "cd52a1a6-1fea-4185-b899-d573af701289"],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "b9056c28-5c7a-434c-a53c-940bbbcfd958"],
 ". "
}], "Text",ExpressionUUID->"a8010e04-cf24-4d43-8520-7b95d99d68c1"],

Cell[TextData[{
 "We ensure that the argument ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "d1a76d62-09e9-4512-827e-e0ede8bab309"],
 " is relatively prime to 27 by imposing a ",
 StyleBox[ButtonBox["Condition",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Condition"], "FunctionLink"],
 " (",
 StyleBox["/;", "Code"],
 ") and creating a message if it is not. "
}], "Text",ExpressionUUID->"fc7df81c-35d3-433d-9f61-52d75983ecfd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"affineCipher", "::", "arga"}], "=", 
   "\"\<Second argument must be relatively prime to 27.\>\""}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[168]:=",ExpressionUUID->"4d9e9b9f-29ea-4006-9499-d41e324e57f0"],

Cell[TextData[{
 "Recall that following the name and arguments of a function definition with \
the condition operator ",
 StyleBox["/;", "Code"],
 " and an expression that results in true or false allows you to create \
functions that will not execute on invalid arguments."
}], "Text",ExpressionUUID->"db9a5ce0-5c2e-4d50-9863-c3d8ac948930"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"affineCipher", "[", 
    RowBox[{"s_String", ",", "a_Integer", ",", "b_Integer"}], "]"}], "/;", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"CoprimeQ", "[", 
      RowBox[{"a", ",", "27"}], "]"}], ",", "True", ",", 
     RowBox[{
      RowBox[{"Message", "[", 
       RowBox[{"affineCipher", "::", "arga"}], "]"}], ";", "False"}]}], 
    "]"}]}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"S", ",", "T"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"S", "=", 
      RowBox[{"LetterNumber", "[", "s", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"T", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"a", "*", "#"}], "+", "b"}], ",", "27"}], "]"}], "&"}], 
        ",", "S"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"FromLetterNumber", "[", "T", "]"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[169]:=",ExpressionUUID->"377e45a5-d413-4a0f-95c3-dc96f42a0cf2"],

Cell[TextData[{
 "Note the use of ",
 StyleBox[ButtonBox["Map",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Map"], "FunctionLink"],
 " (",
 StyleBox["/@", "Code"],
 ") to apply the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "p", ")"}], TraditionalForm]],ExpressionUUID->
  "686ca096-b55d-43b8-bbe2-46f4df506974"],
 ", defined as a pure function, to each character."
}], "Text",ExpressionUUID->"a4631d91-6051-4682-a836-acc7f4e0e93f"],

Cell[TextData[{
 "We now use the cipher to encrypt \[OpenCurlyDoubleQuote]The quick brown fox\
\[CloseCurlyDoubleQuote] with the key ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"5", ",", "3"}], ")"}], TraditionalForm]],ExpressionUUID->
  "8599fd71-ffdb-49d6-8fc0-e4d8dfd0a084"],
 "."
}], "Text",ExpressionUUID->"54a66775-3047-442d-9af3-12eff3670fa6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"affineCipher", "[", 
  RowBox[{"\"\<The quick brown fox\>\"", ",", "5", ",", "3"}], "]"}]], "Input",\

 CellLabel->
  "In[170]:=",ExpressionUUID->"235265af-8bc8-44e0-9242-472808a02fd8"],

Cell[BoxData["\<\"vpacg urdcmlxjscfxo\"\>"], "Output",
 CellLabel->
  "Out[170]=",ExpressionUUID->"08a1b101-ef2c-4971-bb3a-8e096ce5710f"]
}, Open  ]],

Cell[TextData[{
 "To decrypt the message, we use the same function. The discussion following \
Example 4 in Section 4.5 of the text indicates that decrypting amounts to \
solving the congruence ",
 Cell[BoxData[
  FormBox[
   RowBox[{"c", "\[Congruent]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"a", "\[CenterDot]", "p"}], "+", "b"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "27"}], ")"}]}]}], TraditionalForm]],
  ExpressionUUID->"7cf78d20-b63b-4223-809b-996770c31b5b"],
 " for ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "3a085c04-d43a-4a12-b342-35438bc7296f"],
 ". As the text shows, we obtain ",
 Cell[BoxData[
  FormBox[
   RowBox[{"p", "\[Congruent]", 
    RowBox[{
     RowBox[{
      SuperscriptBox["a", 
       RowBox[{"-", "1"}]], "(", 
      RowBox[{"c", "-", "b"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "27"}], ")"}]}], "\[Congruent]", 
    RowBox[{
     RowBox[{
      SuperscriptBox["a", 
       RowBox[{"-", "1"}]], "c"}], "-", 
     RowBox[{
      SuperscriptBox["a", 
       RowBox[{"-", "1"}]], "b", " ", 
      RowBox[{"(", 
       RowBox[{"mod", " ", "27"}], ")"}]}]}]}], TraditionalForm]],
  ExpressionUUID->"6994cbb7-07a2-44fd-a24d-94c203fe565e"],
 ". In other words, to decrypt a message encrypted using the key ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"a", ",", "b"}], ")"}], TraditionalForm]],ExpressionUUID->
  "4ba47c9e-4afe-47bb-ae09-62309a0110e1"],
 ", we use the same procedure but with key ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["a", 
      RowBox[{"-", "1"}]], ",", 
     RowBox[{
      RowBox[{"-", 
       SuperscriptBox["a", 
        RowBox[{"-", "1"}]]}], "b"}]}], ")"}], TraditionalForm]],
  ExpressionUUID->"76441df3-ea73-4fdb-b1c4-7501a15515e4"],
 "."
}], "Text",ExpressionUUID->"06dc42a1-71b3-4004-9ebe-5fcce969767f"],

Cell[TextData[{
 "First, compute the inverse of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "=", "5"}], TraditionalForm]],ExpressionUUID->
  "f8e9ecaa-84d7-442b-9397-85f8586f4d5a"],
 "."
}], "Text",ExpressionUUID->"5c2b5801-7993-4f0d-9f63-78e1f2be0ba1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PowerMod", "[", 
  RowBox[{"5", ",", 
   RowBox[{"-", "1"}], ",", "27"}], "]"}]], "Input",
 CellLabel->
  "In[171]:=",ExpressionUUID->"68c1f90c-fe6a-4574-a1c3-de3bd2c7a50f"],

Cell[BoxData["11"], "Output",
 CellLabel->
  "Out[171]=",ExpressionUUID->"e0b8726a-5922-4bc6-aac0-551d1ec5d8b0"]
}, Open  ]],

Cell[TextData[{
 "And then ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", 
     SuperscriptBox["a", 
      RowBox[{"-", "1"}]]}], "b"}], TraditionalForm]],ExpressionUUID->
  "9d440a29-ce47-4187-a29d-006442a2d286"],
 ", being sure to include the negative."
}], "Text",ExpressionUUID->"ac369a4c-10d4-4afc-b6b3-2d1aed35d89a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mod", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "11"}], "*", "3"}], ",", "27"}], "]"}]], "Input",
 CellLabel->
  "In[172]:=",ExpressionUUID->"885ea939-93ca-49e2-9829-b81a0356f994"],

Cell[BoxData["21"], "Output",
 CellLabel->
  "Out[172]=",ExpressionUUID->"eb406a28-4298-45ea-be9c-65f9f9d8a4da"]
}, Open  ]],

Cell[TextData[{
 "Thus, the decryption key is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"11", ",", "21"}], ")"}], TraditionalForm]],ExpressionUUID->
  "725d10c7-cb76-44c8-a2bd-7bb06210d2ad"],
 "."
}], "Text",ExpressionUUID->"94d3c4bd-967f-4a7b-947e-786f82f2dfb1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"affineCipher", "[", 
  RowBox[{"\"\<vpacg urdcmlxjscfxo\>\"", ",", "11", ",", "21"}], 
  "]"}]], "Input",
 CellLabel->
  "In[173]:=",ExpressionUUID->"d0a5fa36-f1c9-4a70-9fa5-679a7f12e8cc"],

Cell[BoxData["\<\"the quick brown fox\"\>"], "Output",
 CellLabel->
  "Out[173]=",ExpressionUUID->"cc2bbe86-99ae-4cd6-8342-f30328f326d8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["RSA Encryption", "Subsection",
 CellTags->"Section6c",ExpressionUUID->"18a5dd5e-401f-41df-a518-0217ba3a5b1d"],

Cell[TextData[{
 "We will now see how to use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to implement the RSA cryptosystem. Implementing the RSA system involves \
two steps: key generation and the encryption algorithm. "
}], "Text",ExpressionUUID->"70e6e9c1-abc7-49dd-974e-07fedbb0ea35"],

Cell["\<\
To construct keys in the RSA system, we need to find pairs of large primes, \
say with 300 digits each. Since messages can be decrypted by anyone who can \
factor the product of these primes, the two primes must be large enough so \
that their product is extremely difficult to factor. \
\>", "Text",ExpressionUUID->"dc7a7c67-432a-44cf-9447-cc82ecf7e680"],

Cell[TextData[{
 "Because the use of very large prime numbers would make our examples \
impractical as examples, we shall illustrate the RSA system using smaller \
primes. We will discuss at the end of this section how you can use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to generate large prime numbers. "
}], "Text",ExpressionUUID->"93de9ba4-2e0a-4f14-87ee-0f3063939408"],

Cell[CellGroupData[{

Cell["Key Generation", "Subsubsection",ExpressionUUID->"7ba4e9c7-d792-4a9d-9177-bb709fdacd35"],

Cell[TextData[{
 "The first step in key generation is to choose two distinct large prime \
numbers, ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "4ab3d482-8068-4a9a-8e45-92b2c09acb6d"],
 " and ",
 Cell[BoxData[
  FormBox["q", TraditionalForm]],ExpressionUUID->
  "fe24cdb1-3774-4ff5-8adb-08b688d63006"],
 ". From these, we produce the public key, which consists of the public \
modulus ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", 
    RowBox[{"p", "\[CenterDot]", "q"}]}], TraditionalForm]],ExpressionUUID->
  "75d1439c-1668-4855-9376-7a7ec3c46c7b"],
 " and the public exponent ",
 Cell[BoxData[
  FormBox["e", TraditionalForm]],ExpressionUUID->
  "22cd98f1-a368-4d6d-9b07-444076d3f267"],
 " which is relatively prime to ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Phi]", "(", "n", ")"}], "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"p", "-", "1"}], ")"}], 
     RowBox[{"(", 
      RowBox[{"q", "-", "1"}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "81c9c60f-e840-4e27-88e7-4cd5475d14fd"],
 ". We also produce the private key, consisting of the public modulus ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "8865e6a0-a18a-45a6-b051-285cd8b4f529"],
 " and the inverse of ",
 Cell[BoxData[
  FormBox["e", TraditionalForm]],ExpressionUUID->
  "c6c53199-e8b0-4618-91c8-6ea65f7f0c86"],
 " modulo ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"p", "-", "1"}], ")"}], 
    RowBox[{"(", 
     RowBox[{"q", "-", "1"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "01728e4c-5bf6-456d-a275-6cbeda90c9a4"],
 ". Since ",
 Cell[BoxData[
  FormBox["e", TraditionalForm]],ExpressionUUID->
  "6c687d43-9406-489f-9490-aeb794320fe0"],
 " is unrelated to the primes ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "6b666989-ab2b-4b95-9892-a118c4eecc7d"],
 " and ",
 Cell[BoxData[
  FormBox["q", TraditionalForm]],ExpressionUUID->
  "e8826172-c0d6-42b6-b566-95ead7187f67"],
 ", it can be generated in a number of ways. For our implementation below, we \
will take ",
 Cell[BoxData[
  FormBox["e", TraditionalForm]],ExpressionUUID->
  "a4869292-fdf7-4890-a88f-f661944687a0"],
 " to be ",
 Cell[BoxData[
  FormBox["13", TraditionalForm]],ExpressionUUID->
  "f72c5918-6bcf-4cf8-a9aa-55b381de6ce9"],
 ". "
}], "Text",ExpressionUUID->"c8008d22-ddcc-4260-8e09-05b823cc0c12"],

Cell[TextData[{
 "Here is a function to handle key generation. The ",
 StyleBox["generateKeys", "Code"],
 " function accepts as input two prime numbers. It returns a list of two \
lists where the sublists are the public and private keys. That is, it returns \
",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "e"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", 
       SuperscriptBox["e", 
        RowBox[{"-", "1"}]]}], "}"}]}], "}"}], TraditionalForm]],
  ExpressionUUID->"bcd6d5e6-45a5-4af4-90dd-5328080325d6"],
 ". Given the primes ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "e6e07dd9-6249-4348-89cd-de1eb3df0044"],
 " and ",
 Cell[BoxData[
  FormBox["q", TraditionalForm]],ExpressionUUID->
  "7ce86138-ebcb-40d4-9ee1-503c8a86ba43"],
 ", the procedure computes ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", 
    RowBox[{"p", "\[CenterDot]", "q"}]}], TraditionalForm]],ExpressionUUID->
  "f8c9c970-3867-4fed-9e61-b418d8c4671f"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Phi]", "(", "n", ")"}], "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"p", "-", "1"}], ")"}], 
     RowBox[{"(", 
      RowBox[{"q", "-", "1"}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "17967bb3-6152-4962-b7db-e0187b194833"],
 ", and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"d", "=", 
    RowBox[{
     SuperscriptBox["e", 
      RowBox[{"-", "1"}]], " ", "mod", " ", 
     RowBox[{"\[Phi]", "(", "n", ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "17027119-c5be-4015-96e0-d421b7abafc4"],
 ". "
}], "Text",ExpressionUUID->"bcadd9dc-e9af-4da1-8fb2-fe77171bc075"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generateKeys", "[", 
   RowBox[{
    RowBox[{"p_", "?", "PrimeQ"}], ",", 
    RowBox[{"q_", "?", "PrimeQ"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", ",", "phin", ",", "e", ",", "d"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"e", "=", "13"}], ";", "\[IndentingNewLine]", 
     RowBox[{"n", "=", 
      RowBox[{"p", "*", "q"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"phin", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"p", "-", "1"}], ")"}], "*", 
       RowBox[{"(", 
        RowBox[{"q", "-", "1"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"d", "=", 
      RowBox[{"PowerMod", "[", 
       RowBox[{"e", ",", 
        RowBox[{"-", "1"}], ",", "phin"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"n", ",", "e"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", "d"}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[174]:=",ExpressionUUID->"10de1c88-767b-4a0a-a8bf-840d5647483d"],

Cell[TextData[{
 "In a practical RSA implementation, we would likely use some of the \
techniques discussed at the end of this section to incorporate into our ",
 StyleBox["generateKeys", "Code"],
 " procedure the generation of the primes ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "4920213c-8a34-4cc5-8a83-5972cc161121"],
 " and ",
 Cell[BoxData[
  FormBox["q", TraditionalForm]],ExpressionUUID->
  "69313247-4757-4a65-901e-61aa1a98019d"],
 ", rather than passing them as arguments."
}], "Text",ExpressionUUID->"a24a3722-21a8-474a-ab5c-86a434491fc0"],

Cell[TextData[{
 "We generate keys using the prime numbers ",
 Cell[BoxData[
  FormBox[
   RowBox[{"p", "=", "59"}], TraditionalForm]],ExpressionUUID->
  "c00e8d54-219a-4032-9a96-0afb4aee1262"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"q", "=", "71"}], TraditionalForm]],ExpressionUUID->
  "e5f2d820-3cc7-478c-9a67-80ed1a06d0b2"],
 "."
}], "Text",ExpressionUUID->"f1c5f8e1-885b-43a9-9ce6-5ce1da519739"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"keys", "=", 
  RowBox[{"generateKeys", "[", 
   RowBox[{"59", ",", "71"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[175]:=",ExpressionUUID->"d2bc876f-214c-434d-8cb6-5054e7e24ee1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4189", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4189", ",", "937"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[175]=",ExpressionUUID->"a4fa4561-04d0-49f0-92c9-3d3cebeefb4d"]
}, Open  ]],

Cell["The public and private keys are:", "Text",ExpressionUUID->"1156271b-18da-4d5a-9771-50ed9af00714"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"publickey", "=", 
  RowBox[{"keys", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[176]:=",ExpressionUUID->"32b2d02a-c0f1-4be4-88c2-503f0678aca2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4189", ",", "13"}], "}"}]], "Output",
 CellLabel->
  "Out[176]=",ExpressionUUID->"25b0f63c-4fdd-4ce1-9609-3666d9b9f0d2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"privatekey", "=", 
  RowBox[{"keys", "[", 
   RowBox[{"[", "2", "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[177]:=",ExpressionUUID->"cc1d71af-7f7c-4edd-b4c1-10578ce844f7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4189", ",", "937"}], "}"}]], "Output",
 CellLabel->
  "Out[177]=",ExpressionUUID->"97e95d42-72dc-4c7b-ad98-3f492494d6fc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Encoding", "Subsubsection",ExpressionUUID->"4594302b-476c-4113-b34d-e5453a75c49b"],

Cell[TextData[{
 "Now that we have the keys, we turn to encoding the message. As described in \
the text, we encode the message in much the same way as for affine ciphers, \
except that we block groups of characters into single integers. The block \
length must be chosen so that, after conversion, the largest integer produced \
is less than the modulus ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "8bb7d3d5-4d72-4c0b-b691-faf885342617"],
 ". Here, we have ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", "4198"}], TraditionalForm]],ExpressionUUID->
  "df845454-d80d-4486-908d-9c15ea525d1f"],
 " and the largest block that can be produced is 2626 for \
\[OpenCurlyDoubleQuote]ZZ\[CloseCurlyDoubleQuote]. "
}], "Text",ExpressionUUID->"1519dfee-cac8-4265-aefa-0239bbc7f2af"],

Cell["\<\
We need to ensure that this part of the process is reversible. Consider the \
string \[OpenCurlyDoubleQuote]VA\[CloseCurlyDoubleQuote]. This comprises one \
block. Since \[OpenCurlyDoubleQuote]V\[CloseCurlyDoubleQuote] has code 22 and \
\[OpenCurlyDoubleQuote]A\[CloseCurlyDoubleQuote] has code 1, it is tempting \
to code \[OpenCurlyDoubleQuote]VA\[CloseCurlyDoubleQuote] as 221. However, \
when you go to convert this back to a string, it is impossible to tell if it \
was 22 and 1 indicating \[OpenCurlyDoubleQuote]VA\[CloseCurlyDoubleQuote] or \
if it was 2 and 21, which represents \[OpenCurlyDoubleQuote]BU\
\[CloseCurlyDoubleQuote]. To avoid this, we code \[OpenCurlyDoubleQuote]A\
\[CloseCurlyDoubleQuote] as 01. Or, what amounts to the same thing, when we \
compose the block, we multiply the value of the first character by 100. \
\>", "Text",ExpressionUUID->"b2a6322b-453e-4713-88b2-1498dc294644"],

Cell[TextData[{
 "For a specific example, consider the message \[OpenCurlyDoubleQuote]SECRET \
MESSAGE\[CloseCurlyDoubleQuote]. We can use the ",
 StyleBox[ButtonBox["LetterNumber",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/LetterNumber"], "FunctionLink"],
 " function from above to get the numeric representation of each character. "
}], "Text",ExpressionUUID->"65897ff3-37b2-422e-b7de-4001456cfd08"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"messageString", "=", 
  RowBox[{"LetterNumber", "[", "\"\<SECRET MESSAGE\>\"", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[178]:=",ExpressionUUID->"01d9c2f3-596b-40d2-985a-cb29492fe394"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "19", ",", "5", ",", "3", ",", "18", ",", "5", ",", "20", ",", "0", ",", 
   "13", ",", "5", ",", "19", ",", "19", ",", "1", ",", "7", ",", "5"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[178]=",ExpressionUUID->"3699c4fb-24c7-4ad4-9f7b-1b7c035c8a62"]
}, Open  ]],

Cell["\<\
You can see that the first pair should be encoded as 1905, the second as \
0318, and so on. Note that the extra 0 is unnecessary in second block, since \
0318 and 318 are numerically equal. We can obtain the desired results by \
multiplying the first number in each pair by 100 as follows. \
\>", "Text",ExpressionUUID->"03488769-091b-4917-b512-1b7a821cdba4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"messageCode", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"messageString", "[", 
       RowBox[{"[", 
        RowBox[{"i", "-", "1"}], "]"}], "]"}], "*", "100"}], "+", 
     RowBox[{"messageString", "[", 
      RowBox[{"[", "i", "]"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "2", ",", 
      RowBox[{"Length", "[", "messageString", "]"}], ",", "2"}], "}"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[179]:=",ExpressionUUID->"fcc3084f-374d-4355-a11c-3022963e49ff"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1905", ",", "318", ",", "520", ",", "13", ",", "519", ",", "1901", ",", 
   "705"}], "}"}]], "Output",
 CellLabel->
  "Out[179]=",ExpressionUUID->"144d116d-6d2e-44cf-ab6e-0d0e75d10342"]
}, Open  ]],

Cell["\<\
Note that the final 2 in the list describing the table variable indicates \
that the variable should be increased by 2 each iteration.\
\>", "Text",ExpressionUUID->"263d73e5-c90d-4c5d-a9fa-d80ccfe1242e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Encryption", "Subsubsection",ExpressionUUID->"38e039c5-4f31-4db5-a817-bea553e5e81d"],

Cell[TextData[{
 "The encryption algorithm will take as input this list of integers and the \
public key. Each message block ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["m", "i"], TraditionalForm]],ExpressionUUID->
  "df636fbc-ad92-49aa-b914-4146133b8e7a"],
 " is transformed into a ciphertext block ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "i"], TraditionalForm]],ExpressionUUID->
  "95b11802-dcb7-43d0-a0e2-34ea43a96d22"],
 " with the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "\[Congruent]", 
    RowBox[{
     SuperscriptBox["M", "e"], " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "n"}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "06c53907-0e98-4f7b-9cd1-bf51569d2132"],
 ". "
}], "Text",ExpressionUUID->"9a96ce9f-c690-4993-8394-9b3f667f39af"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RSA", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n_Integer", ",", "e_Integer"}], "}"}], ",", 
    RowBox[{"msg", ":", 
     RowBox[{"{", "__Integer", "}"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "c", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"c", "=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"PowerMod", "[", 
         RowBox[{"#", ",", "e", ",", "n"}], "]"}], "&"}], ",", "msg"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[180]:=",ExpressionUUID->"b9f4e25a-b9dd-42a9-9730-3eeb0b2256cd"],

Cell[TextData[{
 "Observe how the arguments for this function were defined. The function ",
 StyleBox["RSA", "Code"],
 " accepts a list consisting of two integers named ",
 StyleBox["n", "Code"],
 " and ",
 StyleBox["e", "Code"],
 " and a list of integers called ",
 StyleBox["msg", "Code",
  IgnoreSpellCheck->True],
 "."
}], "Text",ExpressionUUID->"f8ada41e-667f-442d-a1e5-0985788530e5"],

Cell["Our \[OpenCurlyDoubleQuote]SECRET MESSAGE\[CloseCurlyDoubleQuote] is \
encrypted as", "Text",ExpressionUUID->"5fd8eebf-2cba-48dd-807e-07134527465c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ciphertext", "=", 
  RowBox[{"RSA", "[", 
   RowBox[{"publickey", ",", "messageCode"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[181]:=",ExpressionUUID->"5796b2bb-d49e-4d92-af58-b9e988f6efe3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "723", ",", "3360", ",", "2306", ",", "1979", ",", "2695", ",", "917", ",", 
   "1863"}], "}"}]], "Output",
 CellLabel->
  "Out[181]=",ExpressionUUID->"e61ab6da-1b0f-4fa9-879a-764d58e83263"]
}, Open  ]],

Cell["\<\
Decryption is accomplished by applying the same algorithm with the private \
decryption key. \
\>", "Text",ExpressionUUID->"9676b7d8-aa16-4446-88f1-ae16b67b94f8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RSA", "[", 
  RowBox[{"privatekey", ",", "ciphertext"}], "]"}]], "Input",
 CellLabel->
  "In[182]:=",ExpressionUUID->"53fd3514-5d01-4f44-a714-6a33fc14ba9b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1905", ",", "318", ",", "520", ",", "13", ",", "519", ",", "1901", ",", 
   "705"}], "}"}]], "Output",
 CellLabel->
  "Out[182]=",ExpressionUUID->"bd45f13d-f148-4310-bf3c-d987e236eae1"]
}, Open  ]],

Cell[TextData[{
 "Note that the result is identical to ",
 StyleBox["messageCode", "Code"],
 " and it can be decoded into the message \[OpenCurlyDoubleQuote]SECRET \
MESSAGE\[CloseCurlyDoubleQuote]."
}], "Text",ExpressionUUID->"25c492af-eb30-4fcf-9edf-bad0f3e694d2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generating Large Primes", "Subsubsection",ExpressionUUID->"53485be1-2afa-4756-8dfa-f57d540266d7"],

Cell[TextData[{
 "If you were to use small primes, as we did in the example, there would be \
no real security. Anyone could factor ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "0ae3c7d5-b88f-497b-a10f-68b15844dccf"],
 ", the product of the primes, and then could compute the decrypting key ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "78dc536b-17ec-415d-8a69-c9d558250a27"],
 " from the encrypting key ",
 Cell[BoxData[
  FormBox["e", TraditionalForm]],ExpressionUUID->
  "86af3f0c-5bc4-4ebe-9bee-c3643c627462"],
 ". "
}], "Text",ExpressionUUID->"407e57a6-6ce5-4a0d-857f-9d31f4f23ff4"],

Cell[TextData[{
 "Using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s computational abilities, we can generate fairly large \
prime numbers for use in an RSA key. Remember that what is needed is a pair \
of prime numbers, each of about 300 digits. Moreover, they should be selected \
in an unpredictable fashion. To do this in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", we can use the ",
 StyleBox[ButtonBox["RandomPrime",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomPrime"], "FunctionLink"],
 " function."
}], "Text",ExpressionUUID->"f8ab08ee-ba7e-43be-be36-c245d15f9de4"],

Cell[TextData[{
 "The first argument to ",
 StyleBox[ButtonBox["RandomPrime",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomPrime"], "FunctionLink"],
 " is either an integer, in which case the function returns a prime up to \
that value, or a list of two integers, in which case the prime generated will \
be between them. The function can also accept a second argument in order to \
produce more than one at a time. For example, with second argument 2, the \
function will return a list of two primes."
}], "Text",ExpressionUUID->"24320a3e-1ae0-4e6f-98d0-08e7eefe889a"],

Cell[TextData[{
 "Of course, the primes generated by ",
 StyleBox[ButtonBox["RandomPrime",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomPrime"], "FunctionLink"],
 " are in fact pseudorandom, not truly random."
}], "Text",ExpressionUUID->"1ea0658b-ad4e-43b7-b7a0-434204c1840e"],

Cell[TextData[{
 "To produce two random primes that have between 300 and 400 digits, we call ",
 StyleBox[ButtonBox["RandomPrime",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomPrime"], "FunctionLink"],
 " as follows."
}], "Text",ExpressionUUID->"f81b2426-2214-4e14-a0d7-89f67915e833"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomPrime", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"10", "^", "300"}], ",", 
     RowBox[{"10", "^", "400"}]}], "}"}], ",", "2"}], "]"}]], "Input",
 CellLabel->
  "In[183]:=",ExpressionUUID->"457bba5c-6c19-436e-ad5d-2e15ebd0701b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "535043570717322241618956469734644793096115331062777105512561681342418196515\
555034342789196170592404234297340026593648197616502861843582861652438956365142\
418365381702631249186084214941655940545155255947186512626935240856030384980595\
792280210367595980519635563464953927891171168763518525005007046030741604766105\
582020130594189604898626827394207910674701536028477583305401449611349113077195\
1434622246727", ",", 
   "24568387131279129895604888436616292707285808012092557430552624121133328374\
185347495328855752807740302857900435649344355968771486340390222857399475894999\
696597038497114795494343918047882934334793293877709481659506336317673320131462\
514222276467880406694365277104424511874701583113530407201067696122945095857252\
030997361754957923836215222903835533593148324244309577907481931158754448751554\
49102043983633"}], "}"}]], "Output",
 CellLabel->
  "Out[183]=",ExpressionUUID->"15f13404-9d68-4d44-922e-d2bebcd0b1c2"]
}, Open  ]],

Cell[TextData[{
 "It is left to the reader to incorporate these ideas in improved versions of \
the ",
 StyleBox["generateKeys", "Code"],
 " and ",
 StyleBox["RSA", "Code"],
 " functions."
}], "Text",ExpressionUUID->"10b9f747-0c31-401d-8fc8-e16837466efc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Homomorphic Encryption", "Subsubsection",ExpressionUUID->"c63f527f-660f-43ab-8b03-ad1787c3a719"],

Cell["\<\
The text defines what it means for a cryptosystem to be homomorphic and \
demonstrates, in Example 11, that RSA is multiplicatively homomorphic. With \
our RSA encryption and decryption algorithms in place, we can make this fact \
a bit more concrete.\
\>", "Text",ExpressionUUID->"446f0eb1-2ba9-42ab-b988-527176b6275d"],

Cell[TextData[{
 "Suppose that, using the same keys as above, that we have encrypted and then \
stored the value ",
 Cell[BoxData[
  FormBox["23", TraditionalForm]],ExpressionUUID->
  "db11de5d-d1c3-4df2-97a0-bf68c7a04e00"],
 " in the cloud."
}], "Text",ExpressionUUID->"870af749-f50f-41e8-9ac8-2ba3b4389d37"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cloud", "=", 
  RowBox[{"RSA", "[", 
   RowBox[{"publickey", ",", 
    RowBox[{"{", "23", "}"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[184]:=",ExpressionUUID->"f4926a1b-9e15-4c29-beaa-4a8d47fb88a2"],

Cell[BoxData[
 RowBox[{"{", "3655", "}"}]], "Output",
 CellLabel->
  "Out[184]=",ExpressionUUID->"2b64925b-fada-4240-af2e-4e358a72273d"]
}, Open  ]],

Cell["\<\
Having stored this value, we later need to multiply it by 45. One option, of \
course, would be to retrieve and decrypt the value, perform the \
multiplication locally, and then encrypt and store the product. This, though, \
is rather inefficient. Particularly if this multiplication is but one of a \
vast number of operations we need to perform on stored data, running the \
computations on a very powerful remote machine can be desirable. That RSA is \
multiplicatively homomorphic means that we can, instead, encrypt the value 45 \
and have the multiplication performed on the cloud server.\
\>", "Text",ExpressionUUID->"cda825a4-1317-4a0a-84e9-5911e02c703a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cloud", "=", 
  RowBox[{"cloud", "*", 
   RowBox[{"RSA", "[", 
    RowBox[{"publickey", ",", 
     RowBox[{"{", "45", "}"}]}], "]"}]}]}]], "Input",
 CellLabel->
  "In[185]:=",ExpressionUUID->"3530f489-546c-4c1f-ada2-9a3615b966a6"],

Cell[BoxData[
 RowBox[{"{", "7894800", "}"}]], "Output",
 CellLabel->
  "Out[185]=",ExpressionUUID->"b2a8f040-6bf7-4e9d-9bb3-5918cd3c5f53"]
}, Open  ]],

Cell["\<\
After having the computations performed remotely, we now retrieve and decrypt \
the result.\
\>", "Text",ExpressionUUID->"61d404de-a51e-47a8-81a8-2862cea9e2c2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RSA", "[", 
  RowBox[{"privatekey", ",", "cloud"}], "]"}]], "Input",
 CellLabel->
  "In[186]:=",ExpressionUUID->"affb0156-166d-4f27-a7bc-e09569b230da"],

Cell[BoxData[
 RowBox[{"{", "1035", "}"}]], "Output",
 CellLabel->
  "Out[186]=",ExpressionUUID->"e169b641-e444-4d7d-bb9c-5a618802945f"]
}, Open  ]],

Cell[TextData[{
 "Observe that this is identical to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"23", "\[CenterDot]", "45"}], TraditionalForm]],ExpressionUUID->
  "5a586462-a7b7-4828-9a57-c0ae90b03767"],
 "."
}], "Text",ExpressionUUID->"030c51c6-c01c-4590-b92c-c89a16146023"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"23", "*", "45"}]], "Input",
 CellLabel->
  "In[187]:=",ExpressionUUID->"31753ae5-8e61-48c0-ac83-35c14106239c"],

Cell[BoxData["1035"], "Output",
 CellLabel->
  "Out[187]=",ExpressionUUID->"cf2160f5-50c8-4467-a997-19973877479b"]
}, Open  ]],

Cell["\<\
One issue to be aware of when performing computations this way is that, just \
like the message code must be less than the modulus above, the result of the \
computation should be less than the modulus.\
\>", "Text",ExpressionUUID->"cac714e8-464a-4322-8703-cf27a37f6414"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Solutions to Computer Projects and Computations and Explorations\
\>", "Section",
 PageBreakWithin->False,
 CellTags->"Solutions",ExpressionUUID->"dfbe6b4f-56dc-4326-9e8b-dcaa6cfa699b"],

Cell[CellGroupData[{

Cell["Computer Projects 3", "Subsection",
 PageBreakAbove->False,
 PageBreakWithin->False,
 CellTags->
  "SolutionsCP3",ExpressionUUID->"e1d36dda-f550-498d-88f5-7df694a65720"],

Cell["\<\
Given a positive integer, find the Cantor expansion of this integer (see the \
preamble to Exercise 54 of Section 4.2).\
\>", "Problem",ExpressionUUID->"51790093-6641-43be-9247-e23301789be8"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " Recall the definition of the Cantor expansion. Given an integer ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "5bf541f7-e557-4c82-a94f-d1f2e212f08b"],
 ", the Cantor expansion of ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "584cfa35-83a9-46c4-bcb5-4c9b49839195"],
 " is"
}], "Text",ExpressionUUID->"8f833987-663c-437e-9924-0dc90e7b2e6f"],

Cell[BoxData[
 FormBox[
  RowBox[{"a", "=", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "n"], 
     RowBox[{"n", "!"}]}], "+", 
    RowBox[{
     RowBox[{
      SubscriptBox["a", 
       RowBox[{"n", "-", "1"}]], "(", 
      RowBox[{"n", "-", "1"}], ")"}], "!"}], "+", "\[CenterEllipsis]", "+", 
    RowBox[{
     SubscriptBox["a", "2"], 
     RowBox[{"2", "!"}]}], "+", 
    RowBox[{
     SubscriptBox["a", "1"], 
     RowBox[{"1", "!"}]}]}]}], TraditionalForm]], "Equation",ExpressionUUID->\
"6c17f4f9-2e46-4a31-b004-bdcbfe50a5f5"],

Cell[TextData[{
 "Observe that every term except for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "1"], 
    RowBox[{"1", "!"}]}], TraditionalForm]],ExpressionUUID->
  "9dc0825d-a53c-4e8e-b02d-0642f536ad4a"],
 " is divisible by 2. That is, "
}], "Text",ExpressionUUID->"ad59d4a9-b34f-43e3-b5f3-91a99207530d"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{
     SubscriptBox["a", "n"], 
     RowBox[{"n", "!"}]}], "+", 
    RowBox[{
     RowBox[{
      SubscriptBox["a", 
       RowBox[{"n", "-", "1"}]], "(", 
      RowBox[{"n", "-", "1"}], ")"}], "!"}], "+", "\[CenterEllipsis]", "+", 
    RowBox[{
     SubscriptBox["a", "2"], 
     RowBox[{"2", "!"}]}], "+", 
    RowBox[{
     SubscriptBox["a", "1"], 
     RowBox[{"1", "!"}], " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "2"}], ")"}]}]}], "=", 
   SubscriptBox["a", "1"]}], TraditionalForm]], "Equation",ExpressionUUID->\
"938ba7da-ccdf-4e29-be4b-dd9356b3a3c3"],

Cell[TextData[{
 "Thus, set ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "1"], "=", 
    RowBox[{"a", " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "2"}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "cabeddc1-9d1f-45a4-a6c3-8d3a2d2ecfe0"],
 ", and let ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "1"], TraditionalForm]],ExpressionUUID->
  "d93c8679-e45c-4ac2-83d0-b9c5019eb696"],
 " be the remainder with the 2 divided out. In other words, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["y", "1"], "=", 
    FractionBox[
     RowBox[{"a", "-", 
      SubscriptBox["a", "1"]}], "2"]}], TraditionalForm]],ExpressionUUID->
  "788fa4c0-6eb6-4e5e-9244-40e0ef8939ee"],
 ", or"
}], "Text",ExpressionUUID->"10e7b4d1-7e70-41b1-9c76-46072fe520b8"],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["y", "1"], "=", 
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{
       SubscriptBox["a", "n"], 
       RowBox[{"n", "!"}]}], "+", 
      RowBox[{
       RowBox[{
        SubscriptBox["a", 
         RowBox[{"n", "-", "1"}]], "(", 
        RowBox[{"n", "-", "1"}], ")"}], "!"}], "+", "\[CenterEllipsis]", "+", 
      
      RowBox[{
       SubscriptBox["a", "2"], 
       RowBox[{"2", "!"}]}]}], "2"], "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["a", "n"], 
      FractionBox[
       RowBox[{"n", "!"}], "2"]}], "+", 
     RowBox[{
      SubscriptBox["a", 
       RowBox[{"n", "-", "1"}]], 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"n", "-", "1"}], ")"}], "!"}], "2"]}], "+", 
     "\[CenterEllipsis]", "+", 
     RowBox[{
      SubscriptBox["a", "3"], "3"}], "+", 
     SubscriptBox["a", "2"]}]}]}], TraditionalForm]], "Equation",ExpressionUUI\
D->"bfcdcf61-94ee-4a53-b43e-d3fde0085dd7"],

Cell[TextData[{
 "Now, every term other than the last contains a factor of ",
 Cell[BoxData[
  FormBox["3", TraditionalForm]],ExpressionUUID->
  "60405d90-c379-40bb-b92d-9f64af4287a2"],
 ", so set ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "2"], "=", 
    RowBox[{
     SubscriptBox["y", "1"], " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "3"}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "ec812626-848b-4c47-8f7f-d69697fee5c7"],
 " and let ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["y", "2"], "=", 
    FractionBox[
     RowBox[{
      SubscriptBox["y", "1"], "-", 
      SubscriptBox["a", "2"]}], "3"]}], TraditionalForm]],ExpressionUUID->
  "ba0e8266-e49d-4cc2-a7bf-72f981e34566"],
 "."
}], "Text",ExpressionUUID->"418b4bbf-f3ce-41e9-a797-04aad3b1eb3b"],

Cell[TextData[{
 "In general, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "k"], "=", 
    RowBox[{
     SubscriptBox["y", 
      RowBox[{"k", "-", "1"}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"mod", " ", "k"}], "+", "1"}], ")"}]}]}], TraditionalForm]],
  ExpressionUUID->"ca96ad1b-330c-457f-8717-8af70385b52a"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["y", "k"], "=", 
    FractionBox[
     RowBox[{
      SubscriptBox["y", 
       RowBox[{"k", "-", "1"}]], "-", 
      SubscriptBox["a", "k"]}], 
     RowBox[{"k", "+", "1"}]]}], TraditionalForm]],ExpressionUUID->
  "0cc4a74b-eff9-4e67-8a59-843638aa90a7"],
 ". It is left to the reader to verify that this process produces the Cantor \
expansion of ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "02e05a8e-b52c-4b91-8ea1-9108d750792a"],
 "."
}], "Text",ExpressionUUID->"5d466530-88fd-451c-9963-440d7d3ef2ae"],

Cell[TextData[{
 "The algorithm described above leads to the function below which accepts a \
positive integer as input and returns a list of integers ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["a", "1"], ",", 
     SubscriptBox["a", "2"], ",", "\[Ellipsis]", ",", 
     SubscriptBox["a", "n"]}], "}"}], TraditionalForm]],ExpressionUUID->
  "55841e1d-0a6f-4d52-8630-91a80abbf931"],
 "."
}], "Text",ExpressionUUID->"13752fde-6779-4fc4-bdb5-a5f468df7960"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cantorExpansion", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", 
      RowBox[{"k", "=", "1"}], ",", 
      RowBox[{"y", "=", "n"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Reap", "[", "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"y", "\[NotEqual]", "0"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"a", "=", 
          RowBox[{"Mod", "[", 
           RowBox[{"y", ",", 
            RowBox[{"k", "+", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Sow", "[", "a", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"y", "=", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"y", "-", "a"}], ")"}], "/", 
           RowBox[{"(", 
            RowBox[{"k", "+", "1"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"k", "++"}]}]}], "\[IndentingNewLine]", "]"}], 
      "\[IndentingNewLine]", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[188]:=",ExpressionUUID->"0adca5b8-1ab4-4634-98bd-66cd1dd75dda"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cantorExpansion", "[", "471", "]"}]], "Input",
 CellLabel->
  "In[189]:=",ExpressionUUID->"a30d3471-af92-4b9d-9932-ffdd08997eb3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1", ",", "2", ",", "4", ",", "3"}], "}"}]], "Output",
 CellLabel->
  "Out[189]=",ExpressionUUID->"23baa9df-0ef4-4163-b4e2-b22d0dc737c1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computer Projects 21", "Subsection",
 CellTags->
  "SolutionsCP21",ExpressionUUID->"db1b99de-dc01-4067-bb5a-25a41d4c39a5"],

Cell["\<\
Generate a shared key using the Diffie\[Dash]Hellman key exchange protocol.\
\>", "Problem",ExpressionUUID->"c8aff608-a9d8-4cce-a941-75d1cbf0c34a"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " Recall from Section 4.6 of the text the Diffie\[Dash]Hellman key exchange \
protocol. "
}], "Text",ExpressionUUID->"e58a0030-8568-459c-9e0e-bfb23656ff04"],

Cell[TextData[{
 "(1) Alice and Bob agree on a prime number ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "34a2941a-68cf-49d7-a277-00457b250cbb"],
 " and a primitive root ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "39aab375-8173-4190-be7c-3e21a25a27f0"],
 " of ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "e06cab84-d4c2-478d-9d3b-ddbf3b4c92cf"],
 ". For this example, we\[CloseCurlyQuote]ll use a relatively small prime, \
one with between 6 and 8 digits."
}], "Text",ExpressionUUID->"e613d0f6-b7c7-4921-9e6d-daa9cd774bbb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dhPrime", "=", 
  RowBox[{"RandomPrime", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"10", "^", "6"}], ",", 
     RowBox[{"10", "^", "8"}]}], "}"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[190]:=",ExpressionUUID->"e82e2c73-2fee-4412-a3c9-84b1bc4b38df"],

Cell[BoxData["70920961"], "Output",
 CellLabel->
  "Out[190]=",ExpressionUUID->"3bd0c2dd-2960-441f-b19a-2552fc113ae9"]
}, Open  ]],

Cell[TextData[{
 "For the primitive root, we\[CloseCurlyQuote]ll use ",
 StyleBox[ButtonBox["PrimitiveRoot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PrimitiveRoot"], "FunctionLink"],
 " to get the smallest primitive root of the prime."
}], "Text",ExpressionUUID->"bada91ec-b154-4487-941f-71381eff5818"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dhRoot", "=", 
  RowBox[{"PrimitiveRoot", "[", "dhPrime", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[191]:=",ExpressionUUID->"eabd36f4-b07d-4e25-a6f9-95251dc4b2bd"],

Cell[BoxData["7"], "Output",
 CellLabel->
  "Out[191]=",ExpressionUUID->"509d7658-2f73-4c97-9361-d4c0fcfba08d"]
}, Open  ]],

Cell[TextData[{
 "(2) Alice chooses a secret integer ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "1"], TraditionalForm]],ExpressionUUID->
  "8ad01439-1696-4ef9-a455-7be116ba87e1"],
 ". We choose 421 since this is Computer Project 21 in Chapter 4. We need to \
compute ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["a", 
     SubscriptBox["k", "1"]], "mod", " ", "p"}], TraditionalForm]],
  ExpressionUUID->"294dd7be-8e32-4735-b28c-7127fad38add"],
 " and send the resulting value to Bob. "
}], "Text",ExpressionUUID->"3d7d0ef8-ba14-4570-8aa7-f4a5855ed56f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"aliceSends", "=", 
  RowBox[{"PowerMod", "[", 
   RowBox[{"dhRoot", ",", "421", ",", "dhPrime"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[192]:=",ExpressionUUID->"c16a46cd-bba2-4749-bbca-421eaffcbfcf"],

Cell[BoxData["23144231"], "Output",
 CellLabel->
  "Out[192]=",ExpressionUUID->"929bfce9-05d3-42f6-ac9a-5ccd89036068"]
}, Open  ]],

Cell[TextData[{
 "Note that we use ",
 StyleBox[ButtonBox["PowerMod",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PowerMod"], "FunctionLink"],
 " so that the exponentiation is computed efficiently."
}], "Text",ExpressionUUID->"13ff71a8-3878-4898-9c39-918bf537775e"],

Cell[TextData[{
 "(3) Bob also chooses a secret integer ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "2"], TraditionalForm]],ExpressionUUID->
  "ccf7a0db-d161-4d12-a9f4-cd2f7089e9ea"],
 ". From the perspective of Alice, we will not know what value of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "2"], TraditionalForm]],ExpressionUUID->
  "632a57e4-98a8-4c15-a3db-a82d67f7b832"],
 " that Bob chooses, only the value of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["a", 
     SubscriptBox["k", "2"]], " ", "mod", " ", "p"}], TraditionalForm]],
  ExpressionUUID->"f7582517-824c-4d6f-8892-ad73b3ec9b55"],
 ". Therefore, we have ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " choose ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "2"], TraditionalForm]],ExpressionUUID->
  "684bae52-d919-435b-9a87-daf64d9f8869"],
 " randomly in the computation. "
}], "Text",ExpressionUUID->"7349d108-02ad-43f1-8393-38c025b418ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bobSends", "=", 
  RowBox[{"PowerMod", "[", 
   RowBox[{"dhRoot", ",", 
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "dhPrime"}], "}"}], "]"}], ",", "dhPrime"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[193]:=",ExpressionUUID->"f01b5c46-c171-4c18-9e46-1a578cafe138"],

Cell[BoxData["57868840"], "Output",
 CellLabel->
  "Out[193]=",ExpressionUUID->"fbdf89a1-c591-40d6-a069-f7f5f23255a1"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["RandomInteger",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomInteger"], "FunctionLink"],
 " function has similar syntax to ",
 StyleBox[ButtonBox["RandomPrime",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomPrime"], "FunctionLink"],
 ". Given a list of two integers as its argument, it returns a pseudorandom \
integer between the two integers. There are no necessary restrictions on the \
values of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "1"], TraditionalForm]],ExpressionUUID->
  "64d445e7-5836-4987-8eea-9241a5abba4f"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "2"], TraditionalForm]],ExpressionUUID->
  "0464e2ce-57ec-4c8e-9cce-2e6552710af5"],
 ", however, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["a", 
     RowBox[{"k", "+", "p"}]], "\[Congruent]", 
    RowBox[{
     SuperscriptBox["a", "k"], " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "p"}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "04ff4f17-a03e-481f-a48b-99a6a337eec7"],
 ", so it is no loss to assume the integers lie between 1 and ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "75f5283a-3123-4ad4-868b-784d92c0728a"],
 "."
}], "Text",ExpressionUUID->"b0600f7c-4c0a-4a64-a336-5c2ecbe31db4"],

Cell[TextData[{
 "(4) and (5) Alice computes ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      SuperscriptBox["a", 
       SubscriptBox["k", "2"]], ")"}], 
     SubscriptBox["k", "1"]], " ", "mod", " ", "p"}], TraditionalForm]],
  ExpressionUUID->"d929c6dc-d16d-46cd-a1e9-3325b6dc40a8"],
 " using the result that Bob transmitted and her ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "1"], TraditionalForm]],ExpressionUUID->
  "d8e8ff40-84d8-4f54-ba72-dcad80c3e581"],
 ". Bob does the same using the value he got from Alice and his secret ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "2"], TraditionalForm]],ExpressionUUID->
  "4f9b6ee6-eea9-49a8-b840-74447c22bb79"],
 ". "
}], "Text",ExpressionUUID->"e3801de8-429e-4b36-a4e5-eabde5269869"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sharedKey", "=", 
  RowBox[{"PowerMod", "[", 
   RowBox[{"bobSends", ",", "421", ",", "dhPrime"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[194]:=",ExpressionUUID->"4e84ccde-d284-4692-a60e-d5cca8bdaa94"],

Cell[BoxData["7143194"], "Output",
 CellLabel->
  "Out[194]=",ExpressionUUID->"1ded256e-9a83-480b-a8b3-4278e827f612"]
}, Open  ]],

Cell["\<\
At the conclusion, both Alice and Bob know this shared key, but no one else \
does. \
\>", "Text",ExpressionUUID->"08478b4f-2441-447e-a0fd-310dcac17151"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computations and Explorations 1", "Subsection",
 CellTags->
  "SolutionsCE1",ExpressionUUID->"b9716feb-232c-4ebf-a09f-df1f8559a2e0"],

Cell[TextData[{
 "Determine whether ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", "p"], "-", "1"}], TraditionalForm]],ExpressionUUID->
  "2159b4fd-4bfd-482c-9848-9864d197fb49"],
 " is prime for each of the primes not exceeding 100."
}], "Problem",ExpressionUUID->"0d07af14-b38d-4693-9f6f-f763a8a1c74a"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " To solve this problem, we will write a function that tests each prime ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "8098ae95-604b-4eca-b7d9-3ac830f4bb2c"],
 " less than or equal to a given value to see whether ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", "p"], "-", "1"}], TraditionalForm]],ExpressionUUID->
  "466ed782-3951-4edf-b062-e10d8a8743b7"],
 " is a Mersenne prime. The function will output a list of those primes ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "80617078-4b12-4db7-b7da-9ed96b72bb85"],
 " for which ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", "p"], "-", "1"}], TraditionalForm]],ExpressionUUID->
  "68df4ae4-103c-4a4a-ae54-3ad198d28193"],
 " is prime."
}], "Text",ExpressionUUID->"051576b4-2b3d-49a5-9969-09fe6ce420f8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"checkMersenne", "[", "max_Integer", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"p", "=", "2"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Reap", "[", "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"p", "\[LessEqual]", "max"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"PrimeQ", "[", 
            RowBox[{
             RowBox[{"2", "^", "p"}], "-", "1"}], "]"}], ",", 
           RowBox[{"Sow", "[", "p", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"p", "=", 
          RowBox[{"NextPrime", "[", "p", "]"}]}]}]}], "\[IndentingNewLine]", 
       "]"}], "\[IndentingNewLine]", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[195]:=",ExpressionUUID->"642a0229-90c8-4258-9ca4-f5576fe7d2f8"],

Cell[TextData[{
 "The primes ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "7c553c04-0604-4860-8e1e-7a0585df3302"],
 " less than 100 such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", "p"], "-", "1"}], TraditionalForm]],ExpressionUUID->
  "86dbdc19-9d02-4e4e-a804-b77d5fc04ad8"],
 " is prime are:"
}], "Text",ExpressionUUID->"b36ab3d5-df45-4918-83f4-7103678827b9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"checkMersenne", "[", "100", "]"}]], "Input",
 CellLabel->
  "In[196]:=",ExpressionUUID->"d91c7599-f2a0-4a3f-a22e-eb6efbfcb4f6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "3", ",", "5", ",", "7", ",", "13", ",", "17", ",", "19", ",", 
   "31", ",", "61", ",", "89"}], "}"}]], "Output",
 CellLabel->
  "Out[196]=",ExpressionUUID->"7c8712ef-aadc-40d6-b6ea-54e7b4b3b5fd"]
}, Open  ]],

Cell[TextData[{
 "It is of note that there is a better test, called the Lucas\[Dash]Lehmer \
test, that is more efficient than ",
 StyleBox[ButtonBox["PrimeQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PrimeQ"], "FunctionLink"],
 " for checking primality of numbers of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", "p"], "-", "1"}], TraditionalForm]],ExpressionUUID->
  "07ae5d5e-6179-4079-b977-104b904b1d73"],
 ", and can be implemented in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". For a complete description of that algorithm, consult Rosen\
\[CloseCurlyQuote]s text on number theory. "
}], "Text",ExpressionUUID->"a40c25ba-1328-4bf1-a416-ec12fefc3ebb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computations and Explorations 5", "Subsection",
 CellTags->
  "SolutionsCE5",ExpressionUUID->"984c9b9c-53a7-478a-bfde-0ef57e599b65"],

Cell[TextData[{
 "Find as many primes of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["n", "2"], "+", "1"}], TraditionalForm]],ExpressionUUID->
  "9326afd1-ba27-4f41-ad93-cc5a7f81f404"],
 " where ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "e3590ca8-de0c-40f0-aa8b-d4fe44e4a80f"],
 " is a positive integer as you can. It is not known whether there are \
infinitely many such primes."
}], "Problem",ExpressionUUID->"3f5c318b-4d5e-4f10-9636-a5c19f07efd4"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " We write a function that, given a maximum ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "e7aeb43e-391c-4471-98e7-37c2cb5f7918"],
 ", tests the integers of the given form."
}], "Text",ExpressionUUID->"a862e234-15b0-41b9-aa26-e35f7e61cfe8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ce5", "[", "max_Integer", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "n", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Reap", "[", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"n", "=", "1"}], ",", 
        RowBox[{"n", "\[LessEqual]", "max"}], ",", 
        RowBox[{"n", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"PrimeQ", "[", 
           RowBox[{
            RowBox[{"n", "^", "2"}], "+", "1"}], "]"}], ",", 
          RowBox[{"Sow", "[", 
           RowBox[{
            RowBox[{"n", "^", "2"}], "+", "1"}], "]"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[197]:=",ExpressionUUID->"95b378a9-148a-4e37-a8f2-1e7ee5f596a1"],

Cell[TextData[{
 "To save space, we only compute up to a maximum of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", "100"}], TraditionalForm]],ExpressionUUID->
  "c152f1c3-3e0f-47d2-bdca-a73d4db7aeda"],
 "."
}], "Text",ExpressionUUID->"1df93d0f-ba94-4d2a-ba35-6003c5b01c51"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ce5", "[", "100", "]"}]], "Input",
 CellLabel->
  "In[198]:=",ExpressionUUID->"b8d210c4-4987-4819-846e-31478ab58f48"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "5", ",", "17", ",", "37", ",", "101", ",", "197", ",", "257", 
   ",", "401", ",", "577", ",", "677", ",", "1297", ",", "1601", ",", "2917", 
   ",", "3137", ",", "4357", ",", "5477", ",", "7057", ",", "8101", ",", 
   "8837"}], "}"}]], "Output",
 CellLabel->
  "Out[198]=",ExpressionUUID->"41b33626-9986-4779-a8b0-a23fcc2fb97d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exercises", "Section",
 CellTags->"Exercises",ExpressionUUID->"10c60fdd-dd67-4af2-9458-1fc41d73026f"],

Cell[CellGroupData[{

Cell[TextData[{
 "Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to generate the list of the first 100 prime numbers larger than one \
million."
}], "Item1Exercise",ExpressionUUID->"d30c4357-fa22-481e-b32b-2855030a888d"],

Cell[TextData[{
 "Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to find the one\[CloseCurlyQuote]s complement of an arbitrary integer (see \
the prelude to Exercise 40 of Section 4.2)."
}], "Item1Exercise",ExpressionUUID->"fe9bfd2e-71e9-4113-9d6d-6631846d46fa"],

Cell[TextData[{
 "For which odd prime moduli are ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "1"}], TraditionalForm]],ExpressionUUID->
  "42cf1ef1-d287-4041-a9e6-ef1df89afb7f"],
 " a square? That is, for which prime numbers ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "6b64edb9-25ba-40e0-a713-a22857afb2d5"],
 " does there exist an integer ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "24a7efba-0101-4164-8003-69c0c33b4bf3"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "2"], "\[Congruent]", 
    RowBox[{
     RowBox[{"-", "1"}], " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "p"}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "c9c5c7d4-0070-4c14-b6d4-234f7a8f4fee"],
 "?"
}], "Item1Exercise",ExpressionUUID->"b8ca2054-2990-4daf-8057-3e39732ac609"],

Cell[TextData[{
 "Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to determine which numbers are perfect squares modulo ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "4ab188f0-acd5-424c-ab30-3813e16ba44b"],
 " for various values of the modulus ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "03f83fef-1101-43f1-8f0f-ff608d64a7bf"],
 ". For each perfect square ",
 Cell[BoxData[
  FormBox["s", TraditionalForm]],ExpressionUUID->
  "fd69514e-3f2d-485b-9d09-582339532123"],
 ", determine how many square roots ",
 Cell[BoxData[
  FormBox["s", TraditionalForm]],ExpressionUUID->
  "496aef57-573b-4d89-925f-98cb375c20ee"],
 " has. That is, for how many values of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "40693a6e-7590-4032-9732-ed9822d7d61d"],
 " is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "2"], "\[Congruent]", 
    RowBox[{"s", " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "n"}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "c4a142bd-7410-4974-9377-976c93058600"],
 ". What conjectures can you make about the number of different square roots \
an integer has modulo ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "f3eff62e-90be-45cf-ad2f-089e7b1502e5"],
 "? (The Wolfram Language functions ",
 StyleBox[ButtonBox["PowerMod",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PowerMod"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Solve",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Solve"], "FunctionLink"],
 " may be of use.)"
}], "Item1Exercise",ExpressionUUID->"9fda3c1a-7945-4b4c-a5f7-b53827a1f217"],

Cell[TextData[{
 "Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to find the base 2 expansion of the 4th Fermat number ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["F", "4"], "=", 
    RowBox[{
     SuperscriptBox["2", 
      SuperscriptBox["2", "4"]], "+", "1"}]}], TraditionalForm]],
  ExpressionUUID->"167f7047-85b1-42f7-8ae5-e60e05a1639e"],
 ". Do the following for several large integers ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "c64fe89a-4a67-4eef-a45e-3212fa0b7d0c"],
 ". Compute the time required to calculate the remainder modulo ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "377c701c-6b54-4b7f-b3c1-02ab49330b16"],
 " of various bases ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "66cbdde4-3302-4c44-b793-f772e00e3e7d"],
 " raised to the power ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["F", "4"], TraditionalForm]],ExpressionUUID->
  "af558e5e-aa42-42ca-9125-21f8c8ce53d6"],
 " (that is, to calculate ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["b", 
     SubscriptBox["F", "4"]], "(", 
    RowBox[{"mod", " ", "n"}], ")"}], TraditionalForm]],ExpressionUUID->
  "03888a8a-1fdd-40e9-aab3-cdbf9a48e435"],
 ") using two different methods. First, do the calculation by a \
straightforward exponentiation. Second, do it using the binary expansion of \
",
 Cell[BoxData[
  FormBox[
   SubscriptBox["F", "4"], TraditionalForm]],ExpressionUUID->
  "10b0305f-e778-4d07-be1b-bc9ec7f5eb71"],
 " with repeated squaring and multiplications. Why do you think ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["F", "4"], TraditionalForm]],ExpressionUUID->
  "1e36a196-886a-4a7f-affa-8d7828ad75af"],
 " is a good choice for the public exponent in the RSA encryption scheme? "
}], "Item1Exercise",ExpressionUUID->"de1e71fa-5a40-4ad2-b358-e95eaa5a164f"],

Cell[TextData[{
 "Modify the function ",
 StyleBox["generateKeys", "Code"],
 " that we developed to produce the keys for the RSA system to incorporate \
the techniques for generating random large primes. Make your procedure take \
as an argument a \[OpenCurlyDoubleQuote]security\[CloseCurlyDoubleQuote] \
parameter which measures the number of digits in the primes."
}], "Item1Exercise",ExpressionUUID->"45654efe-07e1-45fe-ab0b-a4452a90c135"],

Cell[TextData[{
 "Write ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions to encode and decode English sentences into lists of integers, \
appropriate for encryption with RSA. You may ignore punctuation and insist \
that all letters are uppercase. Your functions should accept the block size \
as input."
}], "Item1Exercise",ExpressionUUID->"25bdda03-a9be-4f84-a305-d99a439e79e0"],

Cell[TextData[{
 "There are infinitely many primes of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"4", "n"}], "+", "1"}], TraditionalForm]],ExpressionUUID->
  "9db485d8-3854-4dfa-a2d4-a65de71acd15"],
 " and infinitely many of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"4", "n"}], "+", "3"}], TraditionalForm]],ExpressionUUID->
  "7130aa15-333b-4035-a7e2-92b1e6d42564"],
 ". Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to determine for various values of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "ba508fe2-2c26-44d0-84e0-703208f0498f"],
 " whether there are more primes of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"4", "n"}], "+", "1"}], TraditionalForm]],ExpressionUUID->
  "13da71f2-af64-44f0-a808-accece48eef0"],
 " less than ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "d7bd755d-51a4-4e3a-bab3-8025fa562f03"],
 " than there are of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"4", "n"}], "+", "3"}], TraditionalForm]],ExpressionUUID->
  "f82e7cec-b619-40db-9d3d-8cafbfab9a19"],
 ". What conjectures can you make from this evidence?"
}], "Item1Exercise",ExpressionUUID->"90bb5841-576e-4877-ad93-6de557c780ac"],

Cell[TextData[{
 "Develop a function for determining whether Mersenne numbers are prime using \
the Lucas\[Dash]Lehmer test as described in number theory books, such as ",
 StyleBox["Elementary Number Theory and its Applications",
  FontSlant->"Italic"],
 " by K. Rosen. How many Mersenne numbers can you test for primality using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "? "
}], "Item1Exercise",ExpressionUUID->"8c4a2072-c510-46a8-9140-679659ec7e30"],

Cell[TextData[{
 StyleBox["Repunits",
  FontSlant->"Italic"],
 " are integers with decimal expansions consisting entirely of 1s (e.g., 11, \
111, 1111, etc.). Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to factor repunits. How many prime repunits can you find? Explore the same \
question for repunits in different base expansions."
}], "Item1Exercise",ExpressionUUID->"e1748f0b-b48e-439f-be0d-90e3e551c0b0"],

Cell[TextData[{
 "Compute the sequence of pseudorandom numbers generated by the linear \
congruential generator ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", 
     RowBox[{"n", "+", "1"}]], "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"a", "\[CenterDot]", 
        SubscriptBox["x", "n"]}], "+", "c"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"mod", " ", "m"}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "091b634a-20bf-473f-af59-2a850f288953"],
 " for various values of the multiplier ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "07d3ea61-6277-4c2b-81af-b492cbb9a5d2"],
 ", the increment ",
 Cell[BoxData[
  FormBox["c", TraditionalForm]],ExpressionUUID->
  "922431d7-42e8-404e-9ce7-c8b0c8c43cd1"],
 ", and the modulus ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "2a246e83-46fb-460a-a56c-9a15811e75f8"],
 ". For which values do you get a period of length ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "f5efd984-1091-4343-a2ab-3b8f4e4008a9"],
 " for the sequence that you generate? Formulate a conjecture."
}], "Item1Exercise",ExpressionUUID->"4ae68aaa-b77b-42a5-b211-638f045b5ebe"],

Cell[TextData[{
 "The Wolfram Language function ",
 StyleBox[ButtonBox["DivisorSigma",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/DivisorSigma"], "FunctionLink"],
 " implements the function defined, for all positive integers ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "9dd9e250-2d2d-4e0d-9409-62fa5bcbc182"],
 ", by: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Sigma]", "k"], "(", "n", ")"}], TraditionalForm]],
  ExpressionUUID->"ef42c6af-8ee2-4942-8fd9-3beb03c62c86"],
 " is the sum of the ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "96121e2a-9012-437a-9546-4363b237aaea"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " powers of the positive divisors of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "668968cf-69a8-44c3-8f6b-9547dd8996d3"],
 ", that is, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Sigma]", "k"], "(", "n", ")"}], "=", 
    RowBox[{
     UnderscriptBox[
      StyleBox["\[Sum]",
       FontSize->16], 
      RowBox[{"d", "|", "n"}],
      LimitsPositioning->False], " ", 
     SuperscriptBox["d", "k"]}]}], TraditionalForm]],ExpressionUUID->
  "3f3b2bdf-dbaf-4740-a2e9-bc7419337a5c"],
 ". For ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "=", "0"}], TraditionalForm]],ExpressionUUID->
  "37b734cf-45af-4634-bce2-9181f06a43e2"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Sigma]", "0"], "(", "n", ")"}], TraditionalForm]],
  ExpressionUUID->"a68364ad-b002-478f-b871-cc97b47b0448"],
 " is the number of positive divisors of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "9ca9d7b2-0531-4153-9dab-a97f3b2a848c"],
 ", which is sometimes also denoted ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Tau]", "(", "n", ")"}], TraditionalForm]],ExpressionUUID->
  "7d3c765b-b03b-4197-a965-4c237df8af3c"],
 ". Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to study the function ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Sigma]", "0"], TraditionalForm]],ExpressionUUID->
  "3648ec04-ff2c-4290-9c18-669861dc3df5"],
 ". What conjectures can you make about it? For example, when is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Sigma]", "0"], "(", "n", ")"}], TraditionalForm]],
  ExpressionUUID->"17aec9d7-444d-488e-a690-cf9f135b57c1"],
 " odd? Is there a formula for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Sigma]", "0"], "(", "n", ")"}], TraditionalForm]],
  ExpressionUUID->"fb301463-aa7e-4143-88e9-2ba5732fc6ec"],
 "? For which integers ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "d7422ac6-2f3d-4906-895a-697104fc5884"],
 " does ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Sigma]", "0"], "(", "n", ")"}], "=", "m"}], 
   TraditionalForm]],ExpressionUUID->"8987e4c3-6707-4bc9-b2b4-9609349e2468"],
 " have a solution for some integer ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "4966a2b4-5414-4ceb-8046-2f6a74f46fbe"],
 "? Is there a formula for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Sigma]", "0"], "(", 
    RowBox[{"m", "\[CenterDot]", "n"}], ")"}], TraditionalForm]],
  ExpressionUUID->"9d94d49b-9499-4028-82d2-882c097ea0c7"],
 " in terms of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Sigma]", "0"], "(", "m", ")"}], TraditionalForm]],
  ExpressionUUID->"7f6ff003-ddbf-46cb-94be-d8c92a4053dc"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Sigma]", "0"], "(", "n", ")"}], TraditionalForm]],
  ExpressionUUID->"66b61e16-5d41-457d-b17b-d1236b85e2ca"],
 "? (Note: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Sigma]", "0"], "(", "n", ")"}], TraditionalForm]],
  ExpressionUUID->"633c4fa4-c340-4618-bf38-7fa713dd9abc"],
 " is computed by ",
 StyleBox["DivisorSigma[0,n]", "Code"],
 ".)"
}], "Item1Exercise",ExpressionUUID->"8bee5f30-02ca-4b98-9316-33374df7df2f"],

Cell[TextData[{
 "A sequence ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "1"], ",", 
    SubscriptBox["a", "2"], ",", 
    SubscriptBox["a", "3"], ",", "\[Ellipsis]"}], TraditionalForm]],
  ExpressionUUID->"f699b2c3-258d-416f-a9e0-89e6ace34f42"],
 " is called ",
 StyleBox["periodic",
  FontSlant->"Italic"],
 " if there are positive integers ",
 Cell[BoxData[
  FormBox["N", TraditionalForm]],ExpressionUUID->
  "90043292-013e-4fa6-a6c2-ac64b47f986b"],
 " and ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "a43b50ea-0881-4b40-88a8-cdc8d174cdbc"],
 " for which ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "n"], "=", 
    SubscriptBox["a", 
     RowBox[{"n", "+", "p"}]]}], TraditionalForm]],ExpressionUUID->
  "4540359f-9025-476a-92d9-64e03b330e36"],
 " for all ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "\[GreaterEqual]", "N"}], TraditionalForm]],ExpressionUUID->
  "d0b849f2-754c-4ab8-ab01-a8bb9d869b4e"],
 ". The least integer ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "12187404-f303-4255-a21e-f14a59b7d14e"],
 " for which this is true is called the ",
 StyleBox["period",
  FontSlant->"Italic"],
 " of the sequence. The sequence is said to be ",
 StyleBox["periodic modulo",
  FontSlant->"Italic"],
 " ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "e0ead3ac-5f0c-4259-9a6a-767b275420b4"],
 ", for a positive integer ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "406f5f63-1854-4f67-9206-3d197d368faa"],
 ", if the sequence ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["a", "1"], " ", "mod", " ", "m"}], ",", 
     RowBox[{
      SubscriptBox["a", "2"], " ", "mod", " ", "m"}], ",", 
     RowBox[{
      SubscriptBox["a", "3"], " ", "mod", " ", "m"}], ","}], "\[Ellipsis]"}], 
   TraditionalForm]],ExpressionUUID->"98dc172f-30a8-41d8-9fb0-9ba75fbf2f75"],
 " is periodic. Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to determine whether the Fibonacci sequence is periodic modulo ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "fde8db59-8164-4e19-a032-5c3b89023c3f"],
 " for various integers ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "ac768123-4e7d-43d5-a284-9719eb906995"],
 " and, if so, find the period. Can you, by examining enough different values \
of ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "a91ce63b-4ca3-4a63-811a-6f7cb2f26e4c"],
 ", make any conjectures concerning the relationship between ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "43559e6c-fc00-4acb-bda9-b1ba6bf06df7"],
 " and the period? Do the same thing for other sequences that you find \
interesting."
}], "Item1Exercise",ExpressionUUID->"fbb3bc5e-d2e3-4a59-8c0d-66dc78c27153"],

Cell[TextData[{
 "Write a function to implement the ",
 StyleBox["Paillier",
  IgnoreSpellCheck->True],
 " cryptosystem, described in the preamble to Exercise 34 of Section 4.6 in \
the main text. Use your function to build a simple voting system with the \
Wolfram Language. Your system should store the number of votes for each \
candidate as a list in which the entries are encrypted. When a user casts a \
vote, their vote should be encrypted and then added to the encrypted totals, \
taking advantage of the fact that the ",
 StyleBox["Paillier",
  IgnoreSpellCheck->True],
 " system is additively homomorphic. (Keep in mind that addition of plaintext \
is accomplished through multiplication of ciphertext.)"
}], "Item1Exercise",ExpressionUUID->"099352ce-7dcd-4001-ab63-b8365d8be54b"],

Cell[TextData[{
 "(Class project) The Data Encryption Standard (DES) specifies a widely used \
algorithm for private key cryptography. Find a description of this algorithm \
(for example, in ",
 StyleBox["Cryptography, Theory and Practice",
  FontSlant->"Italic"],
 " by Douglas ",
 StyleBox["Stinson",
  IgnoreSpellCheck->True],
 "). Implement the DES in the Wolfram Language."
}], "Item1Exercise",ExpressionUUID->"f624c4a0-2b57-42fa-92b5-6c7a39131640"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
PrintingStyleEnvironment->"Working",
WindowSize->{725, 850},
WindowMargins->{{Automatic, 31}, {Automatic, 0}},
DockedCells->Cell[
  BoxData[
   TagBox[
    GridBox[{{"\"Exploring Discrete Mathematics with Mathematica\"", 
       ActionMenuBox[
       "\"Navigation\"", {
        "\"CloseAll\"" :> Module[{$CellContext`DJSection$}, SelectionMove[
             SelectedNotebook[], All, Notebook]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; 
           Do[NotebookLocate[$CellContext`DJSection$]; FrontEndExecute[
               FrontEndToken["OpenCloseGroup"]], {$CellContext`DJSection$, {
              "Section1a", "Section1b", "Section1c", "Section1d", "Section2a",
                "Section2b", "Section2c", "Section3a", "Section3b", 
               "Section3c", "Section3d", "Section4a", "Section4b", 
               "Section4c", "Section4d", "Section5a", "Section5b", 
               "Section5c", "Section6a", "Section6b", "Section6c", 
               "SolutionsCE1", "SolutionsCE5", "SolutionsCP21", 
               "SolutionsCP3", "Section1", "Section2", "Section3", "Section4",
                "Section5", "Section6", "Solutions", "Exercises"}}]; 
           SelectionMove[
             SelectedNotebook[], Before, Notebook]], "\"Section1\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section1"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section2\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section2"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section3\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section3"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section4\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section4"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section5\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section5"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section6\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section6"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Solutions\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Solutions"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Exercises\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Exercises"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Open All\"" :> 
         Module[{$CellContext`DJSection$}, 
           Do[NotebookLocate[$CellContext`DJSection$]; FrontEndExecute[
               FrontEndToken[
               "SelectionOpenAllGroups"]], {$CellContext`DJSection$, {
              "Exercises", "Section1", "Section1a", "Section1b", "Section1c", 
               "Section1d", "Section2", "Section2a", "Section2b", "Section2c",
                "Section3", "Section3a", "Section3b", "Section3c", 
               "Section3d", "Section4", "Section4a", "Section4b", "Section4c",
                "Section4d", "Section5", "Section5a", "Section5b", 
               "Section5c", "Section6", "Section6a", "Section6b", "Section6c",
                "Solutions", "SolutionsCE1", "SolutionsCE5", "SolutionsCP21", 
               "SolutionsCP3"}}] SelectionMove[
             SelectedNotebook[], Before, Notebook]]}]}}, 
     GridBoxAlignment -> {
      "Columns" -> {Left, Baseline}, "Rows" -> {Right, Baseline}}, AutoDelete -> 
     False, GridBoxItemSize -> {"Columns" -> {
         Scaled[0.8], 
         Scaled[0.2]}}], "Grid"]], "DockedCell", FontFamily -> "Times"],
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
Magnification->1,
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"Book"}, "Textbook.nb", CharacterEncoding -> 
       "UTF-8"]]], 
   Cell[
    StyleData[All, "Printout"], PageWidth -> PaperWidth, 
    CellHorizontalScrolling -> True, 
    CellLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
    ShowAutoStyles -> False, 
    AutoStyleOptions -> {"HighlightMisspelledWords" -> False}, ScriptMinSize -> 
    9, MenuSortingValue -> 1500, 
    PrivateFontOptions -> {"FontType" -> "Outline"}, Magnification -> 1], 
   Cell[
    StyleData["Title"], Editable -> False, ShowCellBracket -> Automatic, 
    CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
    DefaultNewInlineCellStyle -> {}, LanguageCategory -> "NaturalLanguage", 
    FontFamily -> "Helvetica", FontSize -> 25, FontWeight -> "Bold", 
    FontColor -> GrayLevel[0.137255]], 
   Cell[
    StyleData["BookChapterTitle", StyleDefinitions -> StyleData["Title"]], 
    CellFrame -> {{0, 0}, {1, 1}}, CellDingbat -> Cell[
      BoxData[
       GraphicsBox[{{
          RGBColor[0.09375, 0.570313, 0.816406], 
          RectangleBox[{0, 0}]}, {
          GrayLevel[1], FontSize -> 35, FontWeight -> Bold, FontFamily -> 
          "Helvetica", 
          InsetBox[
           CounterBox["ChapterNumber"], {0.5, 0.45}, {Center, Center}]}}, 
        ImageSize -> {70, 70}]], "Output"], 
    CellMargins -> {{100, 0}, {20, 20}}, CellFrameColor -> GrayLevel[1]], 
   Cell[
    StyleData["DockedCell"], CellMargins -> {{12, 12}, {20, 0}}, 
    CellGroupingRules -> "TitleGrouping", 
    ConversionRules :> {"TeX" -> {"\n\\chapter{", "}"}}, 
    TaggingRules :> {"CounterSettings" -> {"CounterTarget" -> "CellGroup"}}, 
    PageBreakAbove -> False, PageBreakBelow -> False, LineSpacing -> {1, 2}, 
    MenuSortingValue -> 1105, FontFamily -> "Helvetica", FontSize -> 27, 
    FontWeight -> "Bold", Background -> RGBColor[0.09375, 0.570313, 0.816406],
     CounterBoxOptions -> {
     CounterFunction :> Identity}, $CellContext`DefaultReturnCreatedCellStyle -> 
    "Section"], 
   Cell[
    StyleData["FunctionLink"], ConversionRules :> {"TeX" -> {{"", 
         $CellContext`ExportAsHyperRef[], ""}, {"", Automatic, ""}}}, 
    MenuSortingValue -> 1105, ButtonStyleMenuListing -> None, FontFamily -> 
    "Courier", FontVariations -> {"Underline" -> True}, FontColor -> 
    RGBColor[0, 0, 1], 
    ButtonBoxOptions -> {Active -> True, ButtonFunction :> (FrontEndExecute[{
         FrontEnd`NotebookLocate[#2]}]& ), ButtonNote -> ButtonData}], 
   Cell[
    StyleData["Problem"], CellMargins -> {{40, 12}, {15, 15}}, 
    CellGroupingRules -> {"GroupTogetherNestedGrouping", 15010}, 
    ConversionRules :> {
     "TeX" -> {{"", Automatic, ""}, {"\n\n", Automatic, ""}}}, 
    TaggingRules :> {
     "ExtraConversionRules" -> {"General" -> {"RestartList" -> False}}}], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item1Exercise"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Exercise"], "."}], CellSize -> {30, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{50, 12}, {3, 5}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterIncrements -> "Item1Exercise", 
       CounterAssignments -> {{"Item2Exercise", 0}}, MenuSortingValue -> 
       4100], 
      Cell[
       StyleData["Item1Exercise", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Exercise"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{35, 12}, {3, 5}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["ExerciseContinuation"], CellMargins -> {{50, 12}, {1, 3}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, MenuSortingValue -> 4101], 
      Cell[
       StyleData["ExerciseContinuation", "Printout"], 
       CellMargins -> {{35, 12}, {1, 3}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item2Exercise"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item2Exercise"], "."}], CellSize -> {32, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{75, 12}, {1, 2}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17100}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterIncrements -> "Item2Exercise", MenuSortingValue -> 4200, 
       CounterBoxOptions -> {CounterFunction :> (Part[
           CharacterRange["a", "z"], #]& )}], 
      Cell[
       StyleData["Item2Exercise", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item2Exercise"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{50, 12}, {1, 2}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterBoxOptions -> {CounterFunction :> (Part[
           CharacterRange["a", "z"], #]& )}]}, Open]], 
   Cell[
    StyleData["ExerciseEquation"], CellMargins -> {{36, 12}, {7, 7}}, 
    CellGroupingRules -> {"GroupTogetherNestedGrouping", 17200}, 
    CellHorizontalScrolling -> True, 
    CellFrameLabels -> {{None, None}, {None, None}}, DefaultFormatType -> 
    TraditionalForm, InputAutoReplacements -> {}, TextAlignment -> Center, 
    MenuSortingValue -> 4300, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}], 
   Cell[
    StyleData["myCode"], CellMargins -> {{66, 10}, {5, 10}}, 
    StyleKeyMapping -> {"=" -> "WolframAlphaShort"}, Evaluatable -> False, 
    CellGroupingRules -> "InputGrouping", TextClipboardType -> "InputText", 
    PageBreakWithin -> False, GroupPageBreakWithin -> False, 
    DefaultFormatType -> DefaultInputFormatType, ContextMenu -> 
    FEPrivate`FrontEndResource["ContextMenus", "myCode"], ShowAutoStyles -> 
    True, "TwoByteSyntaxCharacterAutoReplacement" -> True, 
    HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"}, 
    AutoItalicWords -> {}, AutoQuoteCharacters -> {}, 
    PasteAutoQuoteCharacters -> {}, LanguageCategory -> "Mathematica", 
    FormatType -> InputForm, NumberMarks -> True, 
    LinebreakAdjustments -> {0.85, 2, 10, 0, 1}, CounterIncrements -> "Code", 
    MenuSortingValue -> 1495, MenuCommandKey -> "8", FontWeight -> 
    "Bold", $CellContext`StripStyleOnPaste -> True], 
   Cell[
    StyleData["CodeVar"], DefaultFormatType -> DefaultInputFormatType, 
    LineBreakWithin -> False, MenuSortingValue -> 10000, FontWeight -> "Bold",
     FontSlant -> "Italic", FontColor -> GrayLevel[0.4]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Section"], CellFrame -> {{6, 0}, {0, 1}}, ShowCellBracket -> 
       Automatic, CellMargins -> {{12, 12}, {3, 24}}, 
       CellGroupingRules -> {"SectionGrouping", 30}, 
       ConversionRules :> {
        "TeX" -> {"\n\\section{", "}"}, 
         "HTML" -> {"<h3 class=\"Section\">", "</h3>"}}, 
       TaggingRules :> {
        "CounterSettings" -> {
          "CounterFormat" -> {"BookChapterNumber", ".", "Section"}, 
           "CounterTarget" -> "Cell", "XRefPrefix" -> "Section"}}, 
       PageBreakBelow -> False, CellFrameMargins -> {{8, 8}, {4, 6}}, 
       CellFrameColor -> RGBColor[0.09375, 0.570313, 0.816406], TabSpacings -> 
       2.1, CounterIncrements -> {
        "Section", "SectionHeader", "SubsectionHeader", "SubsubsectionHeader",
          "SubsubsubsectionHeader"}, FontFamily -> "Helvetica", FontSize -> 
       16, FontWeight -> "Bold", Background -> GrayLevel[0.999985]], 
      Cell[
       StyleData["Section", "Printout"], CellFrame -> {{4, 0}, {0, 0.5}}, 
       CellMargins -> {{2, 2}, {3, 21}}, CellFrameMargins -> {{6, 6}, {3, 5}},
        CellFrameColor -> RGBColor[0.09375, 0.570313, 0.816406]], 
      Cell[
       StyleData["Section", "DoubleSpacedPrintout"], 
       CellFrame -> {{4, 0}, {0, 0.5}}, CellMargins -> {{2, 2}, {3, 21}}, 
       CellFrameMargins -> {{6, 6}, {3, 5}}, CellFrameColor -> 
       RGBColor[0.09375, 0.570313, 0.816406], FontSize -> 14]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Subsubsection"], CellDingbat -> None, 
       CellMargins -> {{12, 12}, {0, 6}}, 
       CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
       CellGroupingRules -> {"SectionGrouping", 50}, 
       ConversionRules :> {
        "TeX" -> {"\n\\subsubsection{", "}"}, 
         "HTML" -> {"<h5 class=\"Subsubsection\">", "</h5>"}}, PageBreakBelow -> 
       False, CellFrameLabelMargins -> 4, 
       CounterIncrements -> {
        "Subsubsection", "SubsubsectionHeader", "SubsubsubsectionHeader"}, 
       FontFamily -> "Helvetica", FontSize -> 11, FontWeight -> "Bold", 
       FontSlant -> "Italic"], 
      Cell[
       StyleData["Subsubsection", "Printout"], FontFamily -> "Helvetica", 
       FontSize -> 11, FontWeight -> "Bold", FontSlant -> "Italic"]}, Open]], 
   
   Cell[
    StyleData["Equation"], CellMargins -> {{26, 10}, {7, 7}}, 
    ConversionRules :> {
     "HTML" -> {{"", ""}, {"<p class=\"Equation\">", "</p>"}}}, 
    CellHorizontalScrolling -> True, DefaultFormatType -> TraditionalForm, 
    InputAutoReplacements -> {}, TextAlignment -> Center, CounterIncrements -> 
    "Equation", ButtonBoxOptions -> {Appearance -> {Automatic, None}}], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item1Numbered"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Numbered"], "."}], CellSize -> {32, Inherited}, 
         TextAlignment -> Right, 
         TextJustification -> (FontWeight -> "Plain")], 
       CellMargins -> {{36, 12}, {1, 3}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 15000}, 
       ConversionRules :> {{"TeX" -> {"\n\\item ", ""}}, {
         "HTML" -> {"<li>", "</li>"}}}, 
       TaggingRules :> {
        "ExtraConversionRules" -> {
          "General" -> {"NestingLevel" -> 30}, 
           "TeX" -> {"CellGroupEnvironment" -> "enumerate"}, 
           "HTML" -> {"CellGroupEnvironment" -> "ol"}}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, TextJustification -> 1, CounterIncrements -> "Item1Numbered", 
       CounterAssignments -> {{"Item2Numbered", 0}, {"Item3Numbered", 0}}], 
      Cell[
       StyleData["Item1Numbered", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Numbered"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Plain"], 
       CellMargins -> {{24, 2}, {1, 2}}, CellFrameLabelMargins -> 3, 
       TextJustification -> 1]}, Open]], 
   Cell[
    StyleData["InitializationCell"], Background -> GrayLevel[1]], 
   Cell[
    StyleData["Item1"], TextJustification -> 1], 
   Cell[
    StyleData["Item1Printout"], TextJustification -> 1, MenuSortingValue -> 
    10000], 
   Cell[
    StyleData["Code"], FormatType -> InputForm]}, Visible -> False, 
  FrontEndVersion -> 
  "11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, 2018)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Section1"->{
  Cell[1656, 50, 136, 1, 55, "Section",ExpressionUUID->"45e39210-ea7d-432d-add2-609c9094feda",
   CellTags->"Section1"]},
 "Section1a"->{
  Cell[2517, 70, 138, 1, 32, "Subsection",ExpressionUUID->"7b34ef8e-6a1b-4a67-9c39-d2b95b64c645",
   CellTags->"Section1a"]},
 "Section1b"->{
  Cell[13667, 410, 112, 1, 32, "Subsection",ExpressionUUID->"f08b8e8b-59f1-40a4-8052-e7a203a92db9",
   CellTags->"Section1b"]},
 "Section1c"->{
  Cell[19660, 606, 242, 6, 33, "Subsection",ExpressionUUID->"da2ac877-9e58-4e10-a51d-73b34d3801f5",
   CellTags->"Section1c"]},
 "Section1d"->{
  Cell[26767, 823, 135, 1, 32, "Subsection",ExpressionUUID->"cd18b9c0-488f-4fb4-a4e6-1e4fa0f2aaf7",
   CellTags->"Section1d"]},
 "Section2"->{
  Cell[36655, 1136, 139, 1, 55, "Section",ExpressionUUID->"c07a0ced-7b7b-43c8-ab6e-b0c5ee202d84",
   CellTags->"Section2"]},
 "Section2a"->{
  Cell[37483, 1154, 116, 1, 32, "Subsection",ExpressionUUID->"695b7876-b5a9-4e1d-9521-ed9c14c6c389",
   CellTags->"Section2a"]},
 "Section2b"->{
  Cell[56156, 1702, 116, 1, 32, "Subsection",ExpressionUUID->"18c17686-5338-482a-8d86-79b0e9e0ebbe",
   CellTags->"Section2b"]},
 "Section2c"->{
  Cell[63818, 1914, 122, 1, 32, "Subsection",ExpressionUUID->"08d5dca5-e4f3-4190-a473-7ec5907606f7",
   CellTags->"Section2c"]},
 "Section3"->{
  Cell[70413, 2105, 136, 1, 55, "Section",ExpressionUUID->"3bf9488b-59e6-47a8-bcd7-f92c4038eac8",
   CellTags->"Section3"]},
 "Section3a"->{
  Cell[71011, 2121, 107, 1, 32, "Subsection",ExpressionUUID->"f1b12cb1-76c6-4e2b-a2a2-c420e9434856",
   CellTags->"Section3a"]},
 "Section3b"->{
  Cell[78062, 2341, 120, 1, 32, "Subsection",ExpressionUUID->"0000ed3d-24da-481e-a58c-0a8d084f113c",
   CellTags->"Section3b"]},
 "Section3c"->{
  Cell[84597, 2543, 127, 1, 32, "Subsection",ExpressionUUID->"a90e0e91-1b7d-42d3-a815-cd0a253b9340",
   CellTags->"Section3c"]},
 "Section3d"->{
  Cell[109275, 3112, 150, 1, 32, "Subsection",ExpressionUUID->"0bb3d7c7-e57b-4d19-8d83-fd834d38367e",
   CellTags->"Section3d"]},
 "Section4"->{
  Cell[119893, 3428, 120, 1, 55, "Section",ExpressionUUID->"82e3ebb3-01a4-4304-bf7d-4f0041b20090",
   CellTags->"Section4"]},
 "Section4a"->{
  Cell[120574, 3446, 117, 1, 32, "Subsection",ExpressionUUID->"40e9b378-fb11-4884-ba39-e6c0932264ee",
   CellTags->"Section4a"]},
 "Section4b"->{
  Cell[136086, 3939, 130, 1, 32, "Subsection",ExpressionUUID->"5dffa0f8-17da-4bda-b186-52e5f480052d",
   CellTags->"Section4b"]},
 "Section4c"->{
  Cell[157658, 4589, 113, 1, 32, "Subsection",ExpressionUUID->"d01ad650-a145-4c36-a498-b8369dc89ba8",
   CellTags->"Section4c"]},
 "Section4d"->{
  Cell[163784, 4750, 140, 1, 32, "Subsection",ExpressionUUID->"3eea5272-65fb-41f4-a77d-9345880c0d3e",
   CellTags->"Section4d"]},
 "Section5"->{
  Cell[183356, 5343, 128, 1, 55, "Section",ExpressionUUID->"d655d461-0099-49a3-86c9-0aec1caab23a",
   CellTags->"Section5"]},
 "Section5a"->{
  Cell[183995, 5359, 118, 1, 32, "Subsection",ExpressionUUID->"30fa250a-c871-4b0a-bfce-85128265ba6a",
   CellTags->"Section5a"]},
 "Section5b"->{
  Cell[211555, 6176, 121, 1, 32, "Subsection",ExpressionUUID->"cba65204-f58b-4408-a469-44ed89a2ca26",
   CellTags->"Section5b"]},
 "Section5c"->{
  Cell[229558, 6709, 113, 1, 32, "Subsection",ExpressionUUID->"90dfbc64-800b-43d1-97cb-26b9ad6cc3ef",
   CellTags->"Section5c"]},
 "Section6"->{
  Cell[240176, 7037, 113, 1, 55, "Section",ExpressionUUID->"21df4450-aff1-41de-ab84-f9ff3385ac07",
   CellTags->"Section6"]},
 "Section6a"->{
  Cell[240704, 7051, 117, 1, 32, "Subsection",ExpressionUUID->"39e0cf2f-d527-4e2c-8ca5-e4b773ce5b10",
   CellTags->"Section6a"]},
 "Section6b"->{
  Cell[250197, 7330, 148, 2, 32, "Subsection",ExpressionUUID->"50aaae9f-67be-4484-bb10-f38d89340519",
   PageBreakWithin->False,
   CellTags->"Section6b"]},
 "Section6c"->{
  Cell[260564, 7660, 115, 1, 32, "Subsection",ExpressionUUID->"18a5dd5e-401f-41df-a518-0217ba3a5b1d",
   CellTags->"Section6c"]},
 "Solutions"->{
  Cell[285188, 8386, 195, 4, 55, "Section",ExpressionUUID->"dfbe6b4f-56dc-4326-9e8b-dcaa6cfa699b",
   PageBreakWithin->False,
   CellTags->"Solutions"]},
 "SolutionsCP3"->{
  Cell[285408, 8394, 175, 4, 32, "Subsection",ExpressionUUID->"e1d36dda-f550-498d-88f5-7df694a65720",
   PageBreakAbove->False,
   PageBreakWithin->False,
   CellTags->"SolutionsCP3"]},
 "SolutionsCP21"->{
  Cell[293436, 8664, 128, 2, 32, "Subsection",ExpressionUUID->"db1b99de-dc01-4067-bb5a-25a41d4c39a5",
   CellTags->"SolutionsCP21"]},
 "SolutionsCE1"->{
  Cell[301101, 8910, 138, 2, 32, "Subsection",ExpressionUUID->"b9716feb-232c-4ebf-a09f-df1f8559a2e0",
   CellTags->"SolutionsCE1"]},
 "SolutionsCE5"->{
  Cell[305107, 9032, 138, 2, 32, "Subsection",ExpressionUUID->"984c9b9c-53a7-478a-bfde-0ef57e599b65",
   CellTags->"SolutionsCE5"]},
 "Exercises"->{
  Cell[307977, 9121, 107, 1, 55, "Section",ExpressionUUID->"10c60fdd-dd67-4af2-9458-1fc41d73026f",
   CellTags->"Exercises"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Section1", 344218, 9988},
 {"Section1a", 344356, 9991},
 {"Section1b", 344498, 9994},
 {"Section1c", 344642, 9997},
 {"Section1d", 344786, 10000},
 {"Section2", 344929, 10003},
 {"Section2a", 345070, 10006},
 {"Section2b", 345215, 10009},
 {"Section2c", 345360, 10012},
 {"Section3", 345504, 10015},
 {"Section3a", 345645, 10018},
 {"Section3b", 345790, 10021},
 {"Section3c", 345935, 10024},
 {"Section3d", 346080, 10027},
 {"Section4", 346225, 10030},
 {"Section4a", 346367, 10033},
 {"Section4b", 346513, 10036},
 {"Section4c", 346659, 10039},
 {"Section4d", 346805, 10042},
 {"Section5", 346950, 10045},
 {"Section5a", 347092, 10048},
 {"Section5b", 347238, 10051},
 {"Section5c", 347384, 10054},
 {"Section6", 347529, 10057},
 {"Section6a", 347671, 10060},
 {"Section6b", 347817, 10063},
 {"Section6c", 347990, 10067},
 {"Solutions", 348136, 10070},
 {"SolutionsCP3", 348309, 10074},
 {"SolutionsCP21", 348515, 10079},
 {"SolutionsCE1", 348668, 10082},
 {"SolutionsCE5", 348820, 10085},
 {"Exercises", 348969, 10088}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 167, 3, 108, "BookChapterTitle",ExpressionUUID->"a8aad678-2ac1-4bbd-b34f-f3fd4d38c1f5",
 CounterAssignments->{{"ChapterNumber", 4}}],
Cell[CellGroupData[{
Cell[772, 29, 86, 0, 55, "Section",ExpressionUUID->"214b2fc6-802f-4184-9fe4-48cffcb8dc04"],
Cell[861, 31, 758, 14, 80, "Text",ExpressionUUID->"a540b9e8-3e8e-4361-ae88-880eea478ac2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1656, 50, 136, 1, 55, "Section",ExpressionUUID->"45e39210-ea7d-432d-add2-609c9094feda",
 CellTags->"Section1"],
Cell[1795, 53, 697, 13, 65, "Text",ExpressionUUID->"f31c8533-0bcd-4bed-9c49-4cadac6bc49c"],
Cell[CellGroupData[{
Cell[2517, 70, 138, 1, 32, "Subsection",ExpressionUUID->"7b34ef8e-6a1b-4a67-9c39-d2b95b64c645",
 CellTags->"Section1a"],
Cell[2658, 73, 467, 11, 36, "Text",ExpressionUUID->"f47ef26b-be9a-4153-a6ed-23804f2d5c55"],
Cell[CellGroupData[{
Cell[3150, 88, 164, 3, 31, "Input",ExpressionUUID->"52e8da38-910e-4874-bd3a-60e2ea69fbdc"],
Cell[3317, 93, 106, 1, 31, "Output",ExpressionUUID->"5e01baa7-4432-497c-8c9f-2cadabdd6a07"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3460, 99, 159, 3, 31, "Input",ExpressionUUID->"6ed57ab6-ab25-41d6-b670-0be7dceb1bb8"],
Cell[3622, 104, 106, 1, 31, "Output",ExpressionUUID->"97568124-0ccc-49f0-92ee-4460e80e3991"]
}, Open  ]],
Cell[3743, 108, 393, 10, 20, "Text",ExpressionUUID->"5f57b59d-e157-4fcf-89c6-237685d87a3b"],
Cell[4139, 120, 987, 28, 39, "Text",ExpressionUUID->"1eb8b8a8-9bac-47be-84be-77b9ba480449"],
Cell[5129, 150, 320, 7, 21, "Text",ExpressionUUID->"45127d49-c2bf-4c04-8908-7195cb080a7f"],
Cell[CellGroupData[{
Cell[5474, 161, 173, 3, 31, "Input",ExpressionUUID->"08b20eb6-752d-4d95-854a-521a876dd3f6"],
Cell[5650, 166, 151, 3, 31, "Output",ExpressionUUID->"da7f5c49-53f6-419c-bbe5-6f2c9089ddd7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5838, 174, 101, 0, 18, "Subsubsection",ExpressionUUID->"9b06a469-7641-4ba6-8d19-c143272a2382"],
Cell[5942, 176, 374, 8, 37, "Text",ExpressionUUID->"12d5a003-14e8-4619-bc83-e31b05bfd9b7"],
Cell[CellGroupData[{
Cell[6341, 188, 159, 3, 31, "Input",ExpressionUUID->"563ab766-7a13-4245-b81e-9f856731d4d3"],
Cell[6503, 193, 106, 1, 31, "Output",ExpressionUUID->"3f859e44-b5b7-4ebd-afc8-a273c5de9eea"]
}, Open  ]],
Cell[6624, 197, 467, 10, 36, "Text",ExpressionUUID->"559d7190-1c8b-4fbe-8271-09016363017a"],
Cell[CellGroupData[{
Cell[7116, 211, 165, 3, 31, "Input",ExpressionUUID->"0ad2b623-94aa-4baf-8c28-f7b0d9913ed1"],
Cell[7284, 216, 109, 1, 31, "Output",ExpressionUUID->"7ffb5a3d-7447-4959-9c1f-effce4233e5e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7430, 222, 165, 3, 31, "Input",ExpressionUUID->"2d0d5112-a496-4af7-a42d-3638d15fe197"],
Cell[7598, 227, 110, 1, 31, "Output",ExpressionUUID->"b8508d1e-23b3-40ed-8495-6a107e0bde09"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[7757, 234, 86, 0, 18, "Subsubsection",ExpressionUUID->"b0a62a66-d9ed-4907-a770-1d92cc722d1f"],
Cell[7846, 236, 832, 22, 40, "Text",ExpressionUUID->"6351a13f-b0f8-409a-8fdf-42878e523a99"],
Cell[CellGroupData[{
Cell[8703, 262, 177, 4, 31, "Input",ExpressionUUID->"cb98d0e3-939d-4e07-a16e-62f93839e4e9"],
Cell[8883, 268, 106, 1, 31, "Output",ExpressionUUID->"8b9cd778-2119-4ea1-a0dd-1d4fe5791393"]
}, Open  ]],
Cell[9004, 272, 489, 10, 35, "Text",ExpressionUUID->"5b4acef2-f2e0-464a-9d2c-efb5c9f808b0"],
Cell[CellGroupData[{
Cell[9518, 286, 160, 3, 31, "Input",ExpressionUUID->"71f21183-867e-4546-b820-dd4cc6e97f31"],
Cell[9681, 291, 107, 1, 31, "Output",ExpressionUUID->"33d63c51-72d2-4d0e-afa4-1c907e94da9e"]
}, Open  ]],
Cell[9803, 295, 617, 14, 50, "Text",ExpressionUUID->"210c5b2e-02e9-482c-bb67-7b06ac2c9fc6"],
Cell[10423, 311, 1591, 43, 70, "Text",ExpressionUUID->"4c057ce7-bf7d-4182-b84f-a307035f844f"],
Cell[CellGroupData[{
Cell[12039, 358, 169, 3, 31, "Input",ExpressionUUID->"53a83679-b8c6-43b7-a2c0-3dd56155ed51"],
Cell[12211, 363, 106, 1, 31, "Output",ExpressionUUID->"691adfab-a317-4bec-9319-6a8b854ab427"]
}, Open  ]],
Cell[12332, 367, 906, 23, 50, "Text",ExpressionUUID->"5fe8283a-fc26-4c33-af98-ab8720dba167"],
Cell[CellGroupData[{
Cell[13263, 394, 216, 5, 31, "Input",ExpressionUUID->"f6272b78-daa7-448d-89a3-735142d9263f"],
Cell[13482, 401, 124, 2, 31, "Output",ExpressionUUID->"dd657dab-810d-4229-bf15-779c0e7b8347"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[13667, 410, 112, 1, 32, "Subsection",ExpressionUUID->"f08b8e8b-59f1-40a4-8052-e7a203a92db9",
 CellTags->"Section1b"],
Cell[13782, 413, 520, 14, 23, "Text",ExpressionUUID->"85ac39a0-7408-4284-89be-74bbc7e6a1c4"],
Cell[CellGroupData[{
Cell[14327, 431, 233, 6, 31, "Input",ExpressionUUID->"97ddd935-c3c2-42cb-97c9-6648b5d97a80"],
Cell[14563, 439, 107, 1, 31, "Output",ExpressionUUID->"9bf3b1c7-50c0-4a77-9bd4-91600e2bd54c"]
}, Open  ]],
Cell[14685, 443, 692, 20, 40, "Text",ExpressionUUID->"139c2a66-01bc-49bf-92b7-c53520758c63"],
Cell[CellGroupData[{
Cell[15402, 467, 249, 6, 31, "Input",ExpressionUUID->"b4679776-159f-4594-aeb3-af5abc53f60e"],
Cell[15654, 475, 110, 1, 31, "Output",ExpressionUUID->"2250a3c5-b4d7-4fb4-8f17-0a837186e6e4"]
}, Open  ]],
Cell[15779, 479, 387, 12, 24, "Text",ExpressionUUID->"53c18a3e-a630-48f4-b044-23454fd59a6c"],
Cell[CellGroupData[{
Cell[16191, 495, 99, 0, 18, "Subsubsection",ExpressionUUID->"6db3b318-ddea-4313-9e4d-76937ffce8d0"],
Cell[16293, 497, 1456, 41, 67, "Text",ExpressionUUID->"2fdd7cdd-fba8-49b7-86b0-99ecc49a2a22"],
Cell[CellGroupData[{
Cell[17774, 542, 339, 9, 31, "Input",ExpressionUUID->"5c637a9c-249c-4921-9882-c3d2d7853fb4"],
Cell[18116, 553, 239, 6, 31, "Output",ExpressionUUID->"70d47fcf-b3f4-4531-b2db-de4a283b1379"]
}, Open  ]],
Cell[18370, 562, 551, 15, 39, "Text",ExpressionUUID->"f6b9ecfb-1489-403c-81e3-c27a54aa7e4a"],
Cell[18924, 579, 271, 6, 21, "Text",ExpressionUUID->"3a9b627e-4551-422f-b83f-d2d5bb19a24c"],
Cell[CellGroupData[{
Cell[19220, 589, 252, 6, 31, "Input",ExpressionUUID->"808084cb-aad8-490c-8c39-0a100bf4fec8"],
Cell[19475, 597, 124, 2, 31, "Output",ExpressionUUID->"ec251b3a-6703-4743-9e39-e015663cc9c3"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[19660, 606, 242, 6, 33, "Subsection",ExpressionUUID->"da2ac877-9e58-4e10-a51d-73b34d3801f5",
 CellTags->"Section1c"],
Cell[19905, 614, 773, 22, 35, "Text",ExpressionUUID->"16d9b9d0-fce7-4b5e-8218-07d73afd3e22"],
Cell[20681, 638, 472, 8, 50, "Text",ExpressionUUID->"329df0ca-9a93-41fb-8b10-d9f9ed859f2b"],
Cell[21156, 648, 842, 21, 54, "Text",ExpressionUUID->"150d66d4-55e1-4fd7-917e-fb18233ac094"],
Cell[22001, 671, 267, 4, 20, "Text",ExpressionUUID->"d2e07522-06f8-43ee-ae61-cbce84f5973c"],
Cell[22271, 677, 436, 10, 36, "Text",ExpressionUUID->"4a1fc05b-e2a0-4f5b-bc17-9878ce6b9b35"],
Cell[CellGroupData[{
Cell[22732, 691, 171, 3, 31, "Input",ExpressionUUID->"09c36f40-4b3b-4f65-9a50-7db2cfbe83a2"],
Cell[22906, 696, 304, 10, 42, "Output",ExpressionUUID->"fabeb839-5843-492e-960a-f85b4a6d2641"]
}, Open  ]],
Cell[23225, 709, 819, 21, 36, "Text",ExpressionUUID->"b5ffe1fe-a1ec-46c0-851d-97633c8c0968"],
Cell[CellGroupData[{
Cell[24069, 734, 208, 4, 31, "Input",ExpressionUUID->"14c53f44-6222-44c8-bb17-276c9328d262"],
Cell[24280, 740, 372, 12, 42, "Output",ExpressionUUID->"ab5e4f61-6ae6-4e55-826b-a8cb4d1e31ed"]
}, Open  ]],
Cell[24667, 755, 407, 8, 50, "Text",ExpressionUUID->"16add328-9cd0-46f7-99db-0973d5b2c283"],
Cell[25077, 765, 299, 8, 31, "Input",ExpressionUUID->"e71b13a2-7425-4d23-a7e9-bb35eb4fd6bd",
 InitializationCell->True],
Cell[25379, 775, 274, 7, 31, "Input",ExpressionUUID->"515538ce-2896-4675-8d4f-5de3108af568",
 InitializationCell->True],
Cell[25656, 784, 499, 14, 20, "Text",ExpressionUUID->"eee946b7-47b9-4588-a198-0f1ec48a84a8"],
Cell[CellGroupData[{
Cell[26180, 802, 140, 2, 31, "Input",ExpressionUUID->"496320cf-b135-4a2b-ada3-dfcdab368067"],
Cell[26323, 806, 107, 1, 31, "Output",ExpressionUUID->"eda52ac7-d2b3-40e9-9103-80c3f95e6e2a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26467, 812, 141, 2, 31, "Input",ExpressionUUID->"a7c427a6-e35f-4db5-b1e0-f18cb1b1808d"],
Cell[26611, 816, 107, 1, 31, "Output",ExpressionUUID->"3ce410f5-d63b-4b8d-9bdb-75c8bfbb2c1b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[26767, 823, 135, 1, 32, "Subsection",ExpressionUUID->"cd18b9c0-488f-4fb4-a4e6-1e4fa0f2aaf7",
 CellTags->"Section1d"],
Cell[26905, 826, 152, 2, 20, "Text",ExpressionUUID->"9dd24174-6de7-4bc9-8282-917172c4463c"],
Cell[27060, 830, 813, 20, 53, "Text",ExpressionUUID->"5310ec9c-19aa-4aed-a9aa-9c5d2be70af6"],
Cell[27876, 852, 107, 0, 20, "Text",ExpressionUUID->"1f240f30-63c2-4c74-b02e-246aee955de7"],
Cell[CellGroupData[{
Cell[28008, 856, 413, 12, 31, "Input",ExpressionUUID->"b30ea314-367e-47ef-ba83-69b4d8fe77f1"],
Cell[28424, 870, 752, 22, 108, "Output",ExpressionUUID->"7d612bc0-652f-4449-9ca2-93f0162afa22"]
}, Open  ]],
Cell[29191, 895, 881, 20, 68, "Text",ExpressionUUID->"747cfc20-1bd7-4f32-829f-c90ea6b0a1c5"],
Cell[CellGroupData[{
Cell[30097, 919, 715, 20, 51, "Input",ExpressionUUID->"d7bc5e44-b493-4c99-b3c5-08ae092d459f"],
Cell[30815, 941, 1512, 52, 126, "Output",ExpressionUUID->"0c10d44c-8f52-488a-8b27-339a6f6c7962"]
}, Open  ]],
Cell[32342, 996, 227, 3, 35, "Text",ExpressionUUID->"02295b24-e214-48cb-92a3-451168c7abda"],
Cell[32572, 1001, 1103, 32, 70, "Input",ExpressionUUID->"e07de5bd-08b2-4301-8108-72d83719c5ce",
 InitializationCell->True],
Cell[33678, 1035, 1109, 32, 70, "Input",ExpressionUUID->"56c61fb1-9832-4402-ace6-25ec6ac7bd34",
 InitializationCell->True],
Cell[34790, 1069, 113, 0, 20, "Text",ExpressionUUID->"917f2ccf-5b1d-4bcf-8f24-633a89921e23"],
Cell[CellGroupData[{
Cell[34928, 1073, 151, 2, 31, "Input",ExpressionUUID->"b9238aac-d216-4588-b126-416afb6a638d"],
Cell[35082, 1077, 1512, 52, 126, "Output",ExpressionUUID->"a0581bdc-9a80-40d0-bd5b-87fe4cc99309"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[36655, 1136, 139, 1, 55, "Section",ExpressionUUID->"c07a0ced-7b7b-43c8-ab6e-b0c5ee202d84",
 CellTags->"Section2"],
Cell[36797, 1139, 661, 11, 65, "Text",ExpressionUUID->"32bb2280-0d0e-436c-b2d9-28d01a44cd20"],
Cell[CellGroupData[{
Cell[37483, 1154, 116, 1, 32, "Subsection",ExpressionUUID->"695b7876-b5a9-4e1d-9521-ed9c14c6c389",
 CellTags->"Section2a"],
Cell[37602, 1157, 571, 15, 37, "Text",ExpressionUUID->"52f18b91-0960-4f58-bfee-ca64a25bff4f"],
Cell[38176, 1174, 628, 13, 52, "Text",ExpressionUUID->"c5f8086e-ecc7-45ae-9101-c8788b5d20c8"],
Cell[CellGroupData[{
Cell[38829, 1191, 148, 2, 31, "Input",ExpressionUUID->"ccacb6f9-f099-40ec-be48-0b216afc7cce"],
Cell[38980, 1195, 172, 3, 31, "Output",ExpressionUUID->"1556f6b8-9bfe-489b-9847-a2f91215269e"]
}, Open  ]],
Cell[39167, 1201, 299, 5, 35, "Text",ExpressionUUID->"e60bc5bf-0e4d-4073-af6d-c7d50415c5c0"],
Cell[39469, 1208, 629, 16, 36, "Text",ExpressionUUID->"bdee2a54-5317-481c-b84b-d35f675b40c8"],
Cell[CellGroupData[{
Cell[40123, 1228, 171, 3, 31, "Input",ExpressionUUID->"edb07288-cc2a-4b6a-ae67-b16084dfa1ae"],
Cell[40297, 1233, 195, 4, 31, "Output",ExpressionUUID->"5e5c0162-b76a-4b07-8640-2ff185bf291c"]
}, Open  ]],
Cell[40507, 1240, 895, 22, 52, "Text",ExpressionUUID->"bb6ced8e-ccf3-4a5f-89fb-55c2af21659f"],
Cell[CellGroupData[{
Cell[41427, 1266, 174, 3, 31, "Input",ExpressionUUID->"c93eb24e-bb28-4121-ac04-9118f24124be"],
Cell[41604, 1271, 185, 3, 31, "Output",ExpressionUUID->"68d6e1d3-9ecd-4a6a-a68e-22685b4922bb"]
}, Open  ]],
Cell[41804, 1277, 640, 13, 51, "Text",ExpressionUUID->"c062f979-37de-4eb1-af7e-99ddf0ac5143"],
Cell[CellGroupData[{
Cell[42469, 1294, 181, 3, 31, "Input",ExpressionUUID->"51a8d493-f3db-4e4a-872d-016e0337b850"],
Cell[42653, 1299, 239, 5, 31, "Output",ExpressionUUID->"b4183722-82d7-4fba-b4be-c63d35e64d01"]
}, Open  ]],
Cell[42907, 1307, 748, 17, 52, "Text",ExpressionUUID->"56d2201c-c623-4bd7-b6e3-053fc422ec8c"],
Cell[CellGroupData[{
Cell[43680, 1328, 171, 3, 31, "Input",ExpressionUUID->"d7197cb7-50da-4556-9801-839e777004a3"],
Cell[43854, 1333, 120, 1, 31, "Output",ExpressionUUID->"e363cb42-48f5-4f12-abd6-6c3b68309fdf"]
}, Open  ]],
Cell[43989, 1337, 178, 3, 20, "Text",ExpressionUUID->"c8b856d5-33b8-49ef-a6bf-457a3b3a2514"],
Cell[CellGroupData[{
Cell[44192, 1344, 136, 2, 31, "Input",ExpressionUUID->"6858cc47-b041-42d7-bf90-57635b27b3c3"],
Cell[44331, 1348, 112, 1, 31, "Output",ExpressionUUID->"10891f2a-0a23-4155-a71b-81d254154421"]
}, Open  ]],
Cell[44458, 1352, 732, 16, 52, "Text",ExpressionUUID->"f294ac9e-749c-470a-a785-fd8dc26a2076"],
Cell[CellGroupData[{
Cell[45215, 1372, 174, 3, 31, "Input",ExpressionUUID->"a671f966-7846-4e1a-a434-e05bf625edc0"],
Cell[45392, 1377, 119, 1, 31, "Output",ExpressionUUID->"c17aa4cc-d7d4-4105-843c-08b43fe88db8"]
}, Open  ]],
Cell[45526, 1381, 625, 16, 37, "Text",ExpressionUUID->"c7d67263-4255-44e7-9865-96c615e4333f"],
Cell[46154, 1399, 751, 18, 52, "Text",ExpressionUUID->"00ad9411-e4ff-4dc9-ba92-61f877fae6b5"],
Cell[CellGroupData[{
Cell[46930, 1421, 209, 4, 31, "Input",ExpressionUUID->"bb94ca5b-c878-453e-889f-e02b81aa67f8"],
Cell[47142, 1427, 110, 1, 31, "Output",ExpressionUUID->"3dbdcb15-38e9-42fd-9308-fb1703cdaf6a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47289, 1433, 153, 2, 31, "Input",ExpressionUUID->"8632b1dc-5f17-4abc-91f7-5198b2cb0e8f"],
Cell[47445, 1437, 110, 1, 31, "Output",ExpressionUUID->"50a8544a-689d-4c90-96a7-c868a000f67b"]
}, Open  ]],
Cell[47570, 1441, 407, 9, 35, "Text",ExpressionUUID->"a3487376-c683-449f-90af-a34277b4822c"],
Cell[CellGroupData[{
Cell[48002, 1454, 258, 6, 31, "Input",ExpressionUUID->"a0fb1b88-8ec3-45a5-8757-a8413b141362"],
Cell[48263, 1462, 110, 1, 31, "Output",ExpressionUUID->"98424d2d-9b40-4784-b8a0-459f2375e2d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48410, 1468, 178, 3, 31, "Input",ExpressionUUID->"10bdd8a0-23e6-4c37-a460-1917d3355e35"],
Cell[48591, 1473, 110, 1, 31, "Output",ExpressionUUID->"4693ea34-59df-4e33-83a6-7c990a302b61"]
}, Open  ]],
Cell[48716, 1477, 386, 7, 36, "Text",ExpressionUUID->"456db0f7-2e69-42b2-b7be-166ad9171e1e"],
Cell[CellGroupData[{
Cell[49127, 1488, 178, 3, 31, "Input",ExpressionUUID->"cd946d90-6256-48a2-82dc-c9d1dfe26e18"],
Cell[49308, 1493, 112, 1, 31, "Output",ExpressionUUID->"27b75e3e-e723-4e74-99a7-ecb2b4c3bbb9"]
}, Open  ]],
Cell[49435, 1497, 556, 13, 39, "Text",ExpressionUUID->"36dd3b9e-390b-4a48-a013-27319556d631"],
Cell[CellGroupData[{
Cell[50016, 1514, 183, 3, 31, "Input",ExpressionUUID->"7cdaf8eb-1cf0-4948-a5ef-a34b6e11cc9e"],
Cell[50202, 1519, 120, 1, 31, "Output",ExpressionUUID->"c736368f-fb5c-4425-969d-256da1e87856"]
}, Open  ]],
Cell[CellGroupData[{
Cell[50359, 1525, 190, 3, 31, "Input",ExpressionUUID->"1523dd05-4a55-430a-9022-c165992d2603"],
Cell[50552, 1530, 110, 1, 31, "Output",ExpressionUUID->"e97eebde-1aa3-497f-9bf0-b5b777c681fa"]
}, Open  ]],
Cell[50677, 1534, 780, 19, 52, "Text",ExpressionUUID->"81e10801-bc19-48af-b5cc-0689c886ea6b"],
Cell[CellGroupData[{
Cell[51482, 1557, 169, 3, 31, "Input",ExpressionUUID->"6c1673fd-a888-4a39-917a-13354cdfa364"],
Cell[51654, 1562, 248, 8, 42, "Output",ExpressionUUID->"92dfbc71-9f05-451b-afe1-beef95a9ac89"]
}, Open  ]],
Cell[51917, 1573, 506, 11, 39, "Text",ExpressionUUID->"b4ff7d40-915b-442c-baa3-62a09bf9cff0"],
Cell[CellGroupData[{
Cell[52448, 1588, 111, 1, 31, "Input",ExpressionUUID->"0c79b1ca-6b0b-4aba-8334-f4796389ef0b"],
Cell[52562, 1591, 109, 1, 31, "Output",ExpressionUUID->"02658d3f-8cb0-4ed9-ba0c-749cdc4f5e32"]
}, Open  ]],
Cell[CellGroupData[{
Cell[52708, 1597, 115, 0, 18, "Subsubsection",ExpressionUUID->"9de6f41f-b85c-4e54-a310-832b2bfa2f35"],
Cell[52826, 1599, 578, 13, 36, "Text",ExpressionUUID->"c7e040e1-1a41-4636-975d-36ac1bcbd91b"],
Cell[CellGroupData[{
Cell[53429, 1616, 175, 3, 31, "Input",ExpressionUUID->"b957d1fa-6bb8-445a-ab6b-6dd0ffa99711"],
Cell[53607, 1621, 108, 1, 31, "Output",ExpressionUUID->"13433a93-ee39-454e-869a-7d300a44c91d"]
}, Open  ]],
Cell[53730, 1625, 241, 6, 21, "Text",ExpressionUUID->"e8f0afc4-b6bb-44b7-97f8-ae8249c396e8"],
Cell[CellGroupData[{
Cell[53996, 1635, 169, 3, 31, "Input",ExpressionUUID->"d6e516aa-c6b7-4724-931f-b46d7f1934ae"],
Cell[54168, 1640, 118, 1, 31, "Output",ExpressionUUID->"415807f8-81f6-4f3c-a673-5b7e44b5f1ed"]
}, Open  ]],
Cell[54301, 1644, 355, 11, 20, "Text",ExpressionUUID->"65b91415-cfc9-420d-b4b1-4175d0313f76"],
Cell[54659, 1657, 544, 12, 36, "Text",ExpressionUUID->"a159a39a-1407-4c1b-b618-9fac7775c004"],
Cell[55206, 1671, 366, 9, 31, "Input",ExpressionUUID->"b21db2e9-6a3e-4bf7-84ba-bfe6d5931645",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[55597, 1684, 188, 3, 31, "Input",ExpressionUUID->"f23342d9-6f1b-406c-9dd3-f3c46ba654cd"],
Cell[55788, 1689, 118, 1, 31, "Output",ExpressionUUID->"a3963466-bbe5-4623-a2fc-66a390da531b"]
}, Open  ]],
Cell[55921, 1693, 186, 3, 20, "Text",ExpressionUUID->"6fc64085-29de-41ef-aa71-8b33fd47c925"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[56156, 1702, 116, 1, 32, "Subsection",ExpressionUUID->"18c17686-5338-482a-8d86-79b0e9e0ebbe",
 CellTags->"Section2b"],
Cell[56275, 1705, 745, 12, 84, "Text",ExpressionUUID->"83b4ffe3-030b-4aee-b7d8-3a1081baf935"],
Cell[57023, 1719, 885, 20, 71, "Text",ExpressionUUID->"3f62e760-6cf5-4080-93e5-57f0506f5294"],
Cell[CellGroupData[{
Cell[57933, 1743, 221, 5, 31, "Input",ExpressionUUID->"de0792d5-e9d5-4161-95b8-9b98a99b2b36"],
Cell[58157, 1750, 205, 4, 31, "Output",ExpressionUUID->"e8d62e0c-c016-4b4a-9777-cca6bdecaa83"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58399, 1759, 176, 3, 31, "Input",ExpressionUUID->"8658b6d6-57ff-4136-9e73-b9c54f0728f1"],
Cell[58578, 1764, 226, 4, 31, "Output",ExpressionUUID->"45601f95-de90-4613-b954-57f463573ac9"]
}, Open  ]],
Cell[58819, 1771, 1670, 46, 88, "Text",ExpressionUUID->"a8ef3633-e274-449f-8c25-2906e492da48"],
Cell[60492, 1819, 397, 8, 36, "Text",ExpressionUUID->"426918e7-3003-4278-89d2-823775508795"],
Cell[60892, 1829, 2320, 61, 279, "Input",ExpressionUUID->"dade1647-d55c-4c80-a003-fdecc2bbf67f",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[63237, 1894, 324, 8, 31, "Input",ExpressionUUID->"8cd2f6e3-3045-4883-b66b-7d39d7d06162"],
Cell[63564, 1904, 205, 4, 31, "Output",ExpressionUUID->"6c491828-9468-45ef-b4c8-bfe4d08be21f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[63818, 1914, 122, 1, 32, "Subsection",ExpressionUUID->"08d5dca5-e4f3-4190-a473-7ec5907606f7",
 CellTags->"Section2c"],
Cell[63943, 1917, 355, 5, 35, "Text",ExpressionUUID->"e74cd3ed-b3c2-43da-84df-51743f37b085"],
Cell[64301, 1924, 918, 23, 53, "Text",ExpressionUUID->"c5d4d07a-70ff-404b-ab1c-a5dfe83498b0"],
Cell[CellGroupData[{
Cell[65244, 1951, 233, 5, 31, "Input",ExpressionUUID->"22ab3460-ff80-4c46-91f5-c0e9c6d34191",
 InitializationCell->True],
Cell[65480, 1958, 172, 3, 31, "Output",ExpressionUUID->"5c9a896e-4c82-414a-beed-43ba7bf4d102"]
}, Open  ]],
Cell[CellGroupData[{
Cell[65689, 1966, 236, 5, 31, "Input",ExpressionUUID->"6cdbda7e-b80d-4e99-900d-01220508602a"],
Cell[65928, 1973, 229, 5, 31, "Output",ExpressionUUID->"7969527d-ea5c-4e9e-a879-35c1a4595963"]
}, Open  ]],
Cell[66172, 1981, 385, 10, 39, "Text",ExpressionUUID->"ad488906-6901-4209-b77c-43bea1c04cdf"],
Cell[66560, 1993, 335, 9, 43, "Text",ExpressionUUID->"f43e77ef-e13a-4f7d-91aa-83b8cff3ca0d"],
Cell[66898, 2004, 773, 21, 77, "Text",ExpressionUUID->"830420e1-cbe3-4169-89df-d510df33d664"],
Cell[67674, 2027, 113, 0, 20, "Text",ExpressionUUID->"18b8f6e4-3dd3-4261-be81-c931e170accf"],
Cell[67790, 2029, 1936, 51, 279, "Input",ExpressionUUID->"bab42735-af8d-432a-b174-a7f0c3448cd0",
 InitializationCell->True],
Cell[69729, 2082, 126, 0, 20, "Text",ExpressionUUID->"33aa443d-7ff2-4862-b655-b12518c435ab"],
Cell[CellGroupData[{
Cell[69880, 2086, 287, 7, 31, "Input",ExpressionUUID->"4dfeed5e-318e-4891-ae5c-e1fa4faaae45"],
Cell[70170, 2095, 182, 3, 31, "Output",ExpressionUUID->"60ed64b9-3a3f-4ae6-aa7e-21f4118faf2f"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[70413, 2105, 136, 1, 55, "Section",ExpressionUUID->"3bf9488b-59e6-47a8-bcd7-f92c4038eac8",
 CellTags->"Section3"],
Cell[70552, 2108, 434, 9, 35, "Text",ExpressionUUID->"54ef3205-aee4-4859-b03a-525a9f75221d"],
Cell[CellGroupData[{
Cell[71011, 2121, 107, 1, 32, "Subsection",ExpressionUUID->"f1b12cb1-76c6-4e2b-a2a2-c420e9434856",
 CellTags->"Section3a"],
Cell[71121, 2124, 225, 3, 20, "Text",ExpressionUUID->"5091e1ff-2aa5-450e-927f-2d923703da9b"],
Cell[CellGroupData[{
Cell[71371, 2131, 101, 0, 18, "Subsubsection",ExpressionUUID->"e0f26d1c-d02c-4157-8f3c-d95839634b7f"],
Cell[71475, 2133, 290, 7, 21, "Text",ExpressionUUID->"12fbd0d2-7eb2-4904-b802-b18281a24759"],
Cell[CellGroupData[{
Cell[71790, 2144, 138, 2, 31, "Input",ExpressionUUID->"2a017949-92b8-4284-a4a5-c7db04160b69"],
Cell[71931, 2148, 110, 1, 31, "Output",ExpressionUUID->"ff3dfadd-08e4-4d76-bb59-2af56a84bc30"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72078, 2154, 139, 2, 31, "Input",ExpressionUUID->"1b9530c5-d9a7-4743-a10f-598ea402da91"],
Cell[72220, 2158, 111, 1, 31, "Output",ExpressionUUID->"82cbe500-1992-4ca0-9175-8899a0222c96"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72368, 2164, 186, 4, 31, "Input",ExpressionUUID->"9ede82b6-aad8-49cb-a890-20d35d10a4ee"],
Cell[72557, 2170, 110, 1, 31, "Output",ExpressionUUID->"75a9f3d3-9ae7-498f-92e2-7bba58f01bdb"]
}, Open  ]],
Cell[72682, 2174, 926, 19, 68, "Text",ExpressionUUID->"00eaecc7-c8ae-46aa-a496-c44d9abe2de7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73645, 2198, 94, 0, 18, "Subsubsection",ExpressionUUID->"6181aecf-d947-4fe0-9002-9ed5188e75a9"],
Cell[73742, 2200, 543, 16, 21, "Text",ExpressionUUID->"1b0cd69d-83d3-4c87-be40-91ff1dc56f7e"],
Cell[CellGroupData[{
Cell[74310, 2220, 137, 2, 31, "Input",ExpressionUUID->"d802bb6f-8c9e-4afc-9182-a8adb700be62"],
Cell[74450, 2224, 107, 1, 31, "Output",ExpressionUUID->"7943a8c7-f98a-4db5-b55f-73144b2c8570"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74594, 2230, 137, 2, 31, "Input",ExpressionUUID->"7ba08a89-9dcd-47e1-b1ba-131f40788366"],
Cell[74734, 2234, 107, 1, 31, "Output",ExpressionUUID->"ff8913ce-3a79-4c2d-8f0e-1f1418c97f10"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74878, 2240, 243, 6, 31, "Input",ExpressionUUID->"c2d0b778-b550-43d0-8549-88c5816edfd9"],
Cell[75124, 2248, 362, 7, 31, "Output",ExpressionUUID->"c7bc3dce-bba6-4bd5-b956-267751ae9a2b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75523, 2260, 142, 2, 31, "Input",ExpressionUUID->"09cd2010-3b15-4709-be19-1e9498e6bf67"],
Cell[75668, 2264, 113, 1, 31, "Output",ExpressionUUID->"3d76194c-eec2-4793-a94c-b6f5a99fb965"]
}, Open  ]],
Cell[75796, 2268, 400, 8, 36, "Text",ExpressionUUID->"4dc33b2a-4af7-407a-a01a-656feea9c83e"],
Cell[CellGroupData[{
Cell[76221, 2280, 144, 2, 31, "Input",ExpressionUUID->"b10d105d-3d06-4882-b0d9-cac56fba36da"],
Cell[76368, 2284, 110, 1, 31, "Output",ExpressionUUID->"3c84b787-d90e-4623-b9b0-84130de7cc7c"]
}, Open  ]],
Cell[76493, 2288, 868, 24, 54, "Text",ExpressionUUID->"3129ea2a-470a-4675-9d59-3748a094afa2"],
Cell[CellGroupData[{
Cell[77386, 2316, 167, 3, 31, "Input",ExpressionUUID->"35a6acb0-446f-447d-942c-337a8d25b89b"],
Cell[77556, 2321, 110, 1, 31, "Output",ExpressionUUID->"a1cd6962-fda2-4f3f-a8c9-64ded291e288"]
}, Open  ]],
Cell[CellGroupData[{
Cell[77703, 2327, 186, 4, 31, "Input",ExpressionUUID->"c624daa0-7414-4447-adb2-719c2cfdab88"],
Cell[77892, 2333, 109, 1, 31, "Output",ExpressionUUID->"345ca64d-4eb5-4458-afd4-68a0407ea81d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[78062, 2341, 120, 1, 32, "Subsection",ExpressionUUID->"0000ed3d-24da-481e-a58c-0a8d084f113c",
 CellTags->"Section3b"],
Cell[78185, 2344, 287, 7, 21, "Text",ExpressionUUID->"2433575e-6b9e-4f7c-ba3d-907f104a1f68"],
Cell[CellGroupData[{
Cell[78497, 2355, 147, 2, 31, "Input",ExpressionUUID->"efb80371-7c5f-4404-826f-33f2d4f7227c"],
Cell[78647, 2359, 250, 7, 31, "Output",ExpressionUUID->"01c6ec31-8448-4aaf-890f-cdd9165e5db1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78934, 2371, 153, 2, 31, "Input",ExpressionUUID->"e4477b46-47cd-41bb-a4a2-75f5536470a5"],
Cell[79090, 2375, 315, 9, 31, "Output",ExpressionUUID->"72672d36-57e2-468b-8288-752eefe694d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[79442, 2389, 171, 3, 31, "Input",ExpressionUUID->"07713543-89ab-4584-b7ed-d91f7f21cd59"],
Cell[79616, 2394, 395, 12, 31, "Output",ExpressionUUID->"d5b666d5-4aa6-4ffa-9e54-2c4bc80d9c14"]
}, Open  ]],
Cell[80026, 2409, 1687, 48, 76, "Text",ExpressionUUID->"6bd18def-8f2e-40f3-80ea-aba1a28e4443"],
Cell[81716, 2459, 663, 15, 55, "Text",ExpressionUUID->"5748a3af-8c53-44f1-8900-5dee2f0e9b9b"],
Cell[CellGroupData[{
Cell[82404, 2478, 189, 3, 31, "Input",ExpressionUUID->"3471b8a6-e8f6-4854-975c-6998137894b6"],
Cell[82596, 2483, 445, 13, 31, "Output",ExpressionUUID->"411d97d9-730c-4264-b166-5546a357a875"]
}, Open  ]],
Cell[CellGroupData[{
Cell[83078, 2501, 212, 4, 31, "Input",ExpressionUUID->"dd41077a-638a-4808-b48f-704056701f83"],
Cell[83293, 2507, 352, 10, 31, "Output",ExpressionUUID->"ce5bc10a-23f6-4433-8318-74ef7f8da8d1"]
}, Open  ]],
Cell[83660, 2520, 900, 18, 65, "Text",ExpressionUUID->"7686bf24-6c73-4181-b89f-f5563413c3e6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[84597, 2543, 127, 1, 32, "Subsection",ExpressionUUID->"a90e0e91-1b7d-42d3-a815-cd0a253b9340",
 CellTags->"Section3c"],
Cell[84727, 2546, 797, 20, 43, "Text",ExpressionUUID->"7a297d84-ea57-422c-b0ee-f1768e2b3e34"],
Cell[85527, 2568, 785, 20, 36, "Text",ExpressionUUID->"2baae527-53d3-41b0-81af-8594b98c2522"],
Cell[86315, 2590, 1164, 29, 68, "Text",ExpressionUUID->"817e3f20-97d5-4bb7-ae22-d652b87ac71a"],
Cell[CellGroupData[{
Cell[87504, 2623, 142, 2, 31, "Input",ExpressionUUID->"266e2b02-f4e8-4816-b54a-231969101036"],
Cell[87649, 2627, 109, 1, 31, "Output",ExpressionUUID->"596e58bc-1e46-4d68-82ba-d2a51563e5a9"]
}, Open  ]],
Cell[87773, 2631, 462, 13, 21, "Text",ExpressionUUID->"7e79abd8-0202-4f58-b165-e353ef5e24b7"],
Cell[88238, 2646, 357, 10, 31, "Input",ExpressionUUID->"736db735-c057-4bd0-8d23-85ad58b717fa"],
Cell[88598, 2658, 1092, 28, 60, "Text",ExpressionUUID->"2b3ee1c5-cf32-42be-8eef-6d2fb6939153"],
Cell[89693, 2688, 2049, 51, 115, "Text",ExpressionUUID->"5a4f46c7-16ef-40c6-b233-9dc05367f8f6"],
Cell[91745, 2741, 260, 6, 31, "Input",ExpressionUUID->"e7d5817b-844a-4556-95ce-f53ad417fa3d"],
Cell[92008, 2749, 388, 10, 31, "Input",ExpressionUUID->"61a0bed0-8d5b-4195-8d0a-e014a1857d45"],
Cell[CellGroupData[{
Cell[92421, 2763, 916, 20, 42, "Input",ExpressionUUID->"85548459-6a01-4a7b-85df-8f4c65ff3116"],
Cell[93340, 2785, 15328, 306, 240, "Output",ExpressionUUID->"dccae6bd-a273-4789-8eb2-653b68c8032c"]
}, Open  ]],
Cell[108683, 3094, 555, 13, 43, "Text",ExpressionUUID->"73cb0c62-3b88-45cf-9a97-d296fc4418f5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[109275, 3112, 150, 1, 32, "Subsection",ExpressionUUID->"0bb3d7c7-e57b-4d19-8d83-fd834d38367e",
 CellTags->"Section3d"],
Cell[109428, 3115, 622, 16, 37, "Text",ExpressionUUID->"752814ab-9a71-40ef-ac14-5f1ac15a988a"],
Cell[CellGroupData[{
Cell[110075, 3135, 158, 3, 31, "Input",ExpressionUUID->"7ebf778a-d286-4b0c-ba11-7d095cedf93f"],
Cell[110236, 3140, 107, 1, 31, "Output",ExpressionUUID->"9c96955a-ee88-4106-94f9-2323d4dc51d6"]
}, Open  ]],
Cell[110358, 3144, 328, 5, 35, "Text",ExpressionUUID->"9d8de1fb-c7b8-4a70-98e1-52d6402e1c9d"],
Cell[CellGroupData[{
Cell[110711, 3153, 169, 3, 31, "Input",ExpressionUUID->"d341e9d9-dc01-4626-88a6-bbcfe6a084f4"],
Cell[110883, 3158, 107, 1, 31, "Output",ExpressionUUID->"b97fe53c-61a2-4639-b934-bc7c525f73ea"]
}, Open  ]],
Cell[111005, 3162, 274, 7, 21, "Text",ExpressionUUID->"2cd758ae-38a2-4727-a6e5-6436abd77695"],
Cell[CellGroupData[{
Cell[111304, 3173, 158, 3, 31, "Input",ExpressionUUID->"3838faab-a08b-41d1-ae6e-56fd6b71d9ca"],
Cell[111465, 3178, 108, 1, 31, "Output",ExpressionUUID->"71e4b7f8-650c-46ed-b171-3fc96ce25d8d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[111610, 3184, 171, 3, 31, "Input",ExpressionUUID->"86f90bad-60a9-4d7f-9094-c1b15db61f44"],
Cell[111784, 3189, 109, 1, 31, "Output",ExpressionUUID->"70ce2b40-d0ce-4731-bfe8-fb8291c57174"]
}, Open  ]],
Cell[CellGroupData[{
Cell[111930, 3195, 96, 0, 18, "Subsubsection",ExpressionUUID->"22856124-92d3-4ea8-988f-cd1ff5760e3d"],
Cell[112029, 3197, 223, 3, 35, "Text",ExpressionUUID->"d4d93fa9-9882-4df9-adee-9fe079eafde2"],
Cell[CellGroupData[{
Cell[112277, 3204, 160, 3, 31, "Input",ExpressionUUID->"c85d9722-5c97-4d98-a842-b7036ef1ed7b"],
Cell[112440, 3209, 107, 1, 31, "Output",ExpressionUUID->"37568045-7900-450d-86a4-f795b7d4394e"]
}, Open  ]],
Cell[112562, 3213, 257, 6, 21, "Text",ExpressionUUID->"eede3e2e-27c1-46cf-9d8b-430b88b74fcd"],
Cell[112822, 3221, 317, 7, 21, "Text",ExpressionUUID->"36b3ee24-036f-4eb0-a478-3a7d84f21b4d"],
Cell[CellGroupData[{
Cell[113164, 3232, 163, 3, 31, "Input",ExpressionUUID->"b3efe2ca-e9a1-4016-a317-daff82b18ee5"],
Cell[113330, 3237, 111, 1, 31, "Output",ExpressionUUID->"f271de4a-feb2-4652-9a92-6cf4c500de00"]
}, Open  ]],
Cell[CellGroupData[{
Cell[113478, 3243, 165, 3, 31, "Input",ExpressionUUID->"6636c91d-ec2b-4c31-82d9-6f113c8f3f1b"],
Cell[113646, 3248, 110, 1, 31, "Output",ExpressionUUID->"43ee5d2c-aceb-4a80-beff-251baa42cda9"]
}, Open  ]],
Cell[113771, 3252, 1074, 28, 40, "Text",ExpressionUUID->"5ee47f5f-45d9-4572-8e15-aad7d9424d19"],
Cell[114848, 3282, 129, 0, 20, "Text",ExpressionUUID->"ac2cade1-86a3-4f1d-8ee7-5221a8d16aa5"],
Cell[CellGroupData[{
Cell[115002, 3286, 176, 3, 31, "Input",ExpressionUUID->"fc0498a9-2424-4a4e-92f2-192d933a6f9b"],
Cell[115181, 3291, 110, 1, 31, "Output",ExpressionUUID->"2836deff-d407-4b30-abe2-53f3d6550ff3"]
}, Open  ]],
Cell[115306, 3295, 228, 3, 35, "Text",ExpressionUUID->"34b37f56-6d6f-4743-a902-1d8c63657862"],
Cell[CellGroupData[{
Cell[115559, 3302, 173, 3, 31, "Input",ExpressionUUID->"e9fb41a8-8a2d-4bd3-8b19-eec41aaadf0d"],
Cell[115735, 3307, 107, 1, 31, "Output",ExpressionUUID->"261c5f66-3754-4ba1-a525-21bd4f1370d2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[115879, 3313, 178, 3, 31, "Input",ExpressionUUID->"ad8059a3-1fc9-464c-a658-fd356af9c0cc"],
Cell[116060, 3318, 111, 1, 31, "Output",ExpressionUUID->"6831f294-75d0-415e-98a2-d6080a63a52b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[116220, 3325, 112, 0, 18, "Subsubsection",ExpressionUUID->"9cb8289c-fc00-4dc5-821e-da368270f4d5"],
Cell[116335, 3327, 1879, 49, 81, "Text",ExpressionUUID->"5655f48d-7e6e-49bb-b353-c42c1ad498be"],
Cell[118217, 3378, 627, 11, 66, "Text",ExpressionUUID->"d4daa894-2a25-49db-94cb-f43ef87f1a34"],
Cell[CellGroupData[{
Cell[118869, 3393, 170, 3, 31, "Input",ExpressionUUID->"b705e0ad-f90c-4afd-b0aa-f49a369004dc"],
Cell[119042, 3398, 223, 6, 31, "Output",ExpressionUUID->"aa960ad3-6867-4867-8b16-154d3d347b7f"]
}, Open  ]],
Cell[119280, 3407, 552, 14, 35, "Text",ExpressionUUID->"733a3102-b868-429d-a515-e77c8c592292"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[119893, 3428, 120, 1, 55, "Section",ExpressionUUID->"82e3ebb3-01a4-4304-bf7d-4f0041b20090",
 CellTags->"Section4"],
Cell[120016, 3431, 533, 11, 50, "Text",ExpressionUUID->"1dca87a6-6cb3-4b36-8d4d-06d881d5be0d"],
Cell[CellGroupData[{
Cell[120574, 3446, 117, 1, 32, "Subsection",ExpressionUUID->"40e9b378-fb11-4884-ba39-e6c0932264ee",
 CellTags->"Section4a"],
Cell[120694, 3449, 475, 8, 36, "Text",ExpressionUUID->"e1a23084-b448-4071-8e14-0fcd65a300ba"],
Cell[CellGroupData[{
Cell[121194, 3461, 151, 3, 21, "Subsubsection",ExpressionUUID->"28af9588-c96d-4467-9859-7a073ea71cae"],
Cell[121348, 3466, 1017, 30, 35, "Text",ExpressionUUID->"e800e89a-8c07-42e0-be94-308a01c097ef"],
Cell[122368, 3498, 1199, 34, 70, "Text",ExpressionUUID->"6200cdc9-406d-4664-9685-f3c2cfc7496f"],
Cell[CellGroupData[{
Cell[123592, 3536, 338, 9, 31, "Input",ExpressionUUID->"501df3c8-9495-48ca-8ba2-4183a774e210",
 InitializationCell->True],
Cell[123933, 3547, 225, 6, 31, "Output",ExpressionUUID->"3c7cf789-4b38-44c6-9212-06d2e80a722e"]
}, Open  ]],
Cell[124173, 3556, 489, 11, 35, "Text",ExpressionUUID->"b8fb4059-3943-4a25-b584-031747cb1d75"],
Cell[CellGroupData[{
Cell[124687, 3571, 112, 1, 31, "Input",ExpressionUUID->"d4bcc6b6-be6c-4d93-96d5-79698fe29036"],
Cell[124802, 3574, 109, 1, 31, "Output",ExpressionUUID->"42d44469-9655-464a-b609-cb1278006737"]
}, Open  ]],
Cell[CellGroupData[{
Cell[124948, 3580, 112, 1, 31, "Input",ExpressionUUID->"cda8e975-b443-41d3-b4fa-de61dcee8596"],
Cell[125063, 3583, 125, 2, 31, "Output",ExpressionUUID->"83df8cca-979b-489e-b2d4-2c821cc24901"]
}, Open  ]],
Cell[125203, 3588, 957, 28, 35, "Text",ExpressionUUID->"7f7544ff-8a92-4c85-904d-36629926ab98"],
Cell[CellGroupData[{
Cell[126185, 3620, 189, 4, 31, "Input",ExpressionUUID->"c539d5f4-38ed-4bc7-beef-77bfd5257d88"],
Cell[126377, 3626, 107, 1, 31, "Output",ExpressionUUID->"0f9853f6-9438-4c99-9fd7-cb5e6427f49f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[126533, 3633, 148, 3, 21, "Subsubsection",ExpressionUUID->"29260dfd-8326-471e-8e88-10accc9daa7b"],
Cell[126684, 3638, 835, 22, 45, "Text",ExpressionUUID->"4b57636c-82ea-4262-960b-49e6554ecc52"],
Cell[127522, 3662, 596, 16, 39, "Text",ExpressionUUID->"7c5629c7-d3db-4edd-aa44-55c14e7af2c4"],
Cell[CellGroupData[{
Cell[128143, 3682, 173, 3, 31, "Input",ExpressionUUID->"5f8df453-cd7f-4efb-b8be-8410109f4392"],
Cell[128319, 3687, 107, 1, 31, "Output",ExpressionUUID->"2f3666e4-df43-459f-b803-8eeb5e91c909"]
}, Open  ]],
Cell[128441, 3691, 897, 23, 52, "Text",ExpressionUUID->"4440cb4d-e240-435b-a6f2-9c0fdb5bfcac"],
Cell[CellGroupData[{
Cell[129363, 3718, 197, 4, 31, "Input",ExpressionUUID->"fcdf4408-1f2e-42ff-a6b2-0cf2631fa496"],
Cell[129563, 3724, 109, 1, 31, "Output",ExpressionUUID->"5005bbcd-71b7-4c17-b6df-2b609a8b732d"]
}, Open  ]],
Cell[129687, 3728, 192, 3, 20, "Text",ExpressionUUID->"2ed5b9e5-2ccf-4503-9242-eb28f9117102"],
Cell[CellGroupData[{
Cell[129904, 3735, 193, 4, 31, "Input",ExpressionUUID->"7323f55c-bb31-421a-bb0c-dee5c2c86163"],
Cell[130100, 3741, 335, 8, 24, "Message",ExpressionUUID->"2acce2aa-af5a-4243-be21-ad3124c60b75"],
Cell[130438, 3751, 194, 4, 31, "Output",ExpressionUUID->"3605fdf0-59f6-468c-8ce8-4dbbe24bbf71"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[130681, 3761, 99, 0, 18, "Subsubsection",ExpressionUUID->"42f722e1-23b4-4c77-81ab-9092044c9bde"],
Cell[130783, 3763, 722, 20, 36, "Text",ExpressionUUID->"6b3c0209-7abb-45f7-87e0-9f1087132bff"],
Cell[CellGroupData[{
Cell[131530, 3787, 253, 6, 31, "Input",ExpressionUUID->"7a9156eb-2310-452f-b17a-f6a14ae8074b"],
Cell[131786, 3795, 182, 4, 31, "Output",ExpressionUUID->"eae1084a-9083-48d3-992b-eaaa89adb873"]
}, Open  ]],
Cell[131983, 3802, 818, 23, 55, "Text",ExpressionUUID->"ba148b03-13ef-4ff0-8352-af477455a5c2"],
Cell[132804, 3827, 448, 12, 20, "Text",ExpressionUUID->"0e1edf37-ce6b-473d-88cb-0aa3f4e625a5"],
Cell[CellGroupData[{
Cell[133277, 3843, 253, 6, 31, "Input",ExpressionUUID->"3646844c-3845-4859-98cc-1064e12bd12e"],
Cell[133533, 3851, 124, 2, 31, "Output",ExpressionUUID->"cf05a024-12b8-4a4d-a345-ea42921dc7f0"]
}, Open  ]],
Cell[133672, 3856, 398, 11, 20, "Text",ExpressionUUID->"3a1ad0ed-febe-4ae0-9c51-1d9a44697cef"],
Cell[CellGroupData[{
Cell[134095, 3871, 253, 6, 31, "Input",ExpressionUUID->"66671be7-fff2-440f-9a54-036cbd5a2795"],
Cell[134351, 3879, 265, 7, 31, "Output",ExpressionUUID->"32c4df0d-bfb4-4df5-983c-679cda9d73a2"]
}, Open  ]],
Cell[134631, 3889, 845, 24, 62, "Text",ExpressionUUID->"f080dd58-77ce-4840-8ac8-549723fa6f19"],
Cell[CellGroupData[{
Cell[135501, 3917, 339, 9, 31, "Input",ExpressionUUID->"4db4d35e-5e4b-4653-8131-ebe74514f3cf"],
Cell[135843, 3928, 182, 4, 31, "Output",ExpressionUUID->"52965715-8056-4c50-8b50-38b447c14f30"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[136086, 3939, 130, 1, 32, "Subsection",ExpressionUUID->"5dffa0f8-17da-4bda-b186-52e5f480052d",
 CellTags->"Section4b"],
Cell[136219, 3942, 160, 3, 20, "Text",ExpressionUUID->"af449adb-3608-42e8-89af-a6c227dd3be5"],
Cell[136382, 3947, 699, 20, 72, "Equation",ExpressionUUID->"99331b12-a40a-4f7a-8c4c-5f42deead532"],
Cell[137084, 3969, 1055, 26, 51, "Text",ExpressionUUID->"240a89ee-10c7-472a-a915-f094163bdbf8"],
Cell[138142, 3997, 512, 13, 72, "Equation",ExpressionUUID->"86f04a41-613b-41d2-a9be-cd906b4b0b72"],
Cell[CellGroupData[{
Cell[138679, 4014, 311, 7, 31, "Input",ExpressionUUID->"0068e831-1369-4459-9dc4-e150cef2f399"],
Cell[138993, 4023, 110, 1, 31, "Output",ExpressionUUID->"d80083a8-a871-4e55-8158-84a71df09b79"]
}, Open  ]],
Cell[CellGroupData[{
Cell[139140, 4029, 99, 0, 18, "Subsubsection",ExpressionUUID->"e5910ab1-d2f7-4972-abff-ed7deeeba4fe"],
Cell[139242, 4031, 545, 10, 51, "Text",ExpressionUUID->"d27eb6bf-7266-4d00-a3d1-b69a2f19bd96"],
Cell[139790, 4043, 922, 21, 85, "Text",ExpressionUUID->"af7380cd-66d5-4803-862d-f367e2d256a7"],
Cell[140715, 4066, 264, 6, 31, "Input",ExpressionUUID->"55337b07-af4c-481a-9ae8-c786a74dc0c7",
 InitializationCell->True],
Cell[140982, 4074, 262, 6, 31, "Input",ExpressionUUID->"e6afd456-bea3-4656-adaf-75bde1efa97f",
 InitializationCell->True],
Cell[141247, 4082, 217, 4, 24, "Text",ExpressionUUID->"d6785725-6bb7-4b5a-b58c-818b1100c6f1"],
Cell[141467, 4088, 933, 25, 108, "Input",ExpressionUUID->"166c8b2e-0489-4c7d-85d7-79b42f9c9f78",
 InitializationCell->True],
Cell[142403, 4115, 1042, 28, 74, "Text",ExpressionUUID->"58275f52-580e-421e-a981-725dd474de8b"],
Cell[143448, 4145, 1638, 42, 85, "Text",ExpressionUUID->"3711326a-0aec-4faf-b1ad-ec0de8137828"],
Cell[145089, 4189, 473, 12, 39, "Text",ExpressionUUID->"b53200e5-c8b2-488d-a390-ae6518b17fc9"],
Cell[CellGroupData[{
Cell[145587, 4205, 288, 8, 31, "Input",ExpressionUUID->"311cec7b-e346-487d-9b8b-f909a3d9a9c8"],
Cell[145878, 4215, 114, 2, 31, "Output",ExpressionUUID->"c80234e7-3b27-4e76-a61a-cc50bcc90ab3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146029, 4222, 277, 8, 31, "Input",ExpressionUUID->"8e70d366-b36b-4553-a3c4-b7e7587503bb"],
Cell[146309, 4232, 310, 7, 24, "Message",ExpressionUUID->"7cb96b15-6926-4c5a-a067-2a4a3513e0c2"],
Cell[146622, 4241, 308, 7, 24, "Message",ExpressionUUID->"00e13268-db80-455d-bf67-9b5158b38ec4"],
Cell[146933, 4250, 115, 2, 31, "Output",ExpressionUUID->"91093f2e-c126-44a1-88e5-7e114a4b2275"]
}, Open  ]],
Cell[147063, 4255, 471, 13, 43, "Text",ExpressionUUID->"b4232285-97de-492f-926e-209912cda9ac"],
Cell[147537, 4270, 397, 11, 31, "myCode",ExpressionUUID->"5e82409e-2cbb-4d00-a95f-224b168f186f"],
Cell[147937, 4283, 1947, 57, 164, "Text",ExpressionUUID->"7dd08d93-a3cd-4347-8fe6-47df5dbaf663"],
Cell[149887, 4342, 524, 11, 36, "Text",ExpressionUUID->"947a47d2-1ba5-4b23-85b1-41ae466d7c08"],
Cell[150414, 4355, 1357, 41, 77, "Text",ExpressionUUID->"c1995e95-db52-4dc6-8334-629572b5eec6"],
Cell[151774, 4398, 3077, 101, 105, "Text",ExpressionUUID->"f7bf37b1-8f56-4533-b07e-a7dc757b85fe"],
Cell[154854, 4501, 2010, 57, 203, "Input",ExpressionUUID->"e0827910-e6d4-47aa-811f-7d44240edc4f",
 InitializationCell->True],
Cell[156867, 4560, 280, 6, 21, "Text",ExpressionUUID->"eaae3c02-2ad1-4554-8162-27eabf9fbf59"],
Cell[CellGroupData[{
Cell[157172, 4570, 308, 8, 31, "Input",ExpressionUUID->"d413e771-2aa8-40e6-b941-7a2a3d4a5e0e"],
Cell[157483, 4580, 114, 2, 31, "Output",ExpressionUUID->"b276b3cc-5386-486a-baa6-cb8197a58175"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[157658, 4589, 113, 1, 32, "Subsection",ExpressionUUID->"d01ad650-a145-4c36-a498-b8369dc89ba8",
 CellTags->"Section4c"],
Cell[157774, 4592, 1094, 29, 53, "Text",ExpressionUUID->"6f9b917c-c5dd-48fb-bf44-f732a534e172"],
Cell[158871, 4623, 1290, 31, 87, "Text",ExpressionUUID->"4ea84234-7fc4-47da-9c52-9edef85a4fb4"],
Cell[160164, 4656, 1150, 30, 146, "Input",ExpressionUUID->"912c9a96-6cd8-4df9-82f6-1984f12ade96",
 InitializationCell->True],
Cell[161317, 4688, 691, 18, 54, "Text",ExpressionUUID->"ff65442e-1290-4f4a-8d90-fd7556da54cb"],
Cell[162011, 4708, 251, 6, 20, "Text",ExpressionUUID->"4ec1b77d-a104-4333-902b-d2770c517fef"],
Cell[CellGroupData[{
Cell[162287, 4718, 180, 4, 31, "Input",ExpressionUUID->"27648be5-c224-4e3a-9dd9-80c4fd9b32f8"],
Cell[162470, 4724, 1265, 20, 146, "Output",ExpressionUUID->"4f6db6a3-24d5-4c53-8f42-de2eb92eec80"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[163784, 4750, 140, 1, 32, "Subsection",ExpressionUUID->"3eea5272-65fb-41f4-a77d-9345880c0d3e",
 CellTags->"Section4d"],
Cell[163927, 4753, 183, 3, 20, "Text",ExpressionUUID->"4dd108d0-be67-486e-bf8d-59638bcb6031"],
Cell[CellGroupData[{
Cell[164135, 4760, 95, 0, 18, "Subsubsection",ExpressionUUID->"750f2933-60fb-4030-ad3c-cad7e5a79476"],
Cell[164233, 4762, 439, 8, 36, "Text",ExpressionUUID->"54ae8dc5-4c16-4cab-b573-96e2ad0f94fe"],
Cell[CellGroupData[{
Cell[164697, 4774, 150, 3, 31, "Input",ExpressionUUID->"0ab7c010-1b05-4c31-a214-17bcf38e81ba"],
Cell[164850, 4779, 111, 2, 31, "Output",ExpressionUUID->"ab9f2af5-83fa-4792-94cf-15323df7a78f"]
}, Open  ]],
Cell[164976, 4784, 1172, 31, 51, "Text",ExpressionUUID->"5e6a964d-e682-4094-8765-2ae8f537775c"],
Cell[166151, 4817, 1950, 51, 85, "Text",ExpressionUUID->"8b1e2328-02f5-4c58-b123-66468643f621"],
Cell[168104, 4870, 407, 8, 36, "Text",ExpressionUUID->"7b44f1b6-5a01-4726-90b3-69d8f65d2b53"],
Cell[CellGroupData[{
Cell[168536, 4882, 179, 4, 31, "Input",ExpressionUUID->"8dbea5af-79ae-4519-bf58-70e4653644dd"],
Cell[168718, 4888, 111, 2, 31, "Output",ExpressionUUID->"2a793706-0433-490f-b8c5-6653545de5f3"]
}, Open  ]],
Cell[168844, 4893, 1603, 53, 42, "Text",ExpressionUUID->"1d3b4b81-0234-4882-ac56-6ebcb756eb5a"],
Cell[CellGroupData[{
Cell[170472, 4950, 285, 8, 31, "Input",ExpressionUUID->"f7b140a0-e431-4fdb-9b53-1ff26a8fc613"],
Cell[170760, 4960, 177, 4, 31, "Output",ExpressionUUID->"a6f221f8-6fc5-48dc-9bb9-7abe33ddbb79"]
}, Open  ]],
Cell[CellGroupData[{
Cell[170974, 4969, 178, 4, 31, "Input",ExpressionUUID->"422f2fb0-ce79-42ba-93f6-3fc027b4fa18"],
Cell[171155, 4975, 111, 2, 31, "Output",ExpressionUUID->"dcaab218-9c3f-4586-92b9-fcc26455d81c"]
}, Open  ]],
Cell[171281, 4980, 2387, 70, 69, "Text",ExpressionUUID->"de8b16e1-dfd5-49c3-bd92-5414e963c4f7"],
Cell[CellGroupData[{
Cell[173693, 5054, 179, 4, 31, "Input",ExpressionUUID->"4932a7ab-1e7f-46c7-9fbe-565a889ae525"],
Cell[173875, 5060, 112, 2, 31, "Output",ExpressionUUID->"9c2f8b4d-8917-4828-a451-605317568347"]
}, Open  ]],
Cell[174002, 5065, 117, 0, 20, "Text",ExpressionUUID->"faa664f8-5567-4260-bb8e-27d8b98eb059"],
Cell[174122, 5067, 1610, 42, 66, "Text",ExpressionUUID->"fc48431d-6538-4df5-996e-7e846bdc7f67"],
Cell[175735, 5111, 536, 16, 51, "Input",ExpressionUUID->"f77948af-9b64-4ac9-b706-e83b5004598b",
 InitializationCell->True],
Cell[176274, 5129, 646, 17, 39, "Text",ExpressionUUID->"db1b6959-459f-4648-a3af-c2fdd2148ae4"],
Cell[176923, 5148, 1158, 30, 89, "Text",ExpressionUUID->"81934573-08dc-4ee1-b2ce-27d64488618f"],
Cell[178084, 5180, 211, 4, 24, "Text",ExpressionUUID->"41704083-d3bb-468c-b998-34f493dab404"],
Cell[CellGroupData[{
Cell[178320, 5188, 154, 3, 31, "Input",ExpressionUUID->"5def34c8-38ac-4aa5-a32a-ba5b739d7330"],
Cell[178477, 5193, 177, 4, 31, "Output",ExpressionUUID->"294b5560-e2ef-4c6f-8b2c-437030f51c95"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[178703, 5203, 99, 0, 18, "Subsubsection",ExpressionUUID->"da2c3b39-bc64-4c71-85cb-55997cb5dfe2"],
Cell[178805, 5205, 2102, 59, 66, "Text",ExpressionUUID->"5d9ccd79-07f5-4a4c-b481-294a36ccb777"],
Cell[180910, 5266, 1873, 52, 74, "Text",ExpressionUUID->"5efd1d15-e0b0-4cae-8cf6-1464d7bff913"],
Cell[182786, 5320, 169, 3, 20, "Text",ExpressionUUID->"17847b7e-9cc3-44ab-bf5d-2b4cfe8b42c5"],
Cell[CellGroupData[{
Cell[182980, 5327, 189, 4, 31, "Input",ExpressionUUID->"6eb28b77-6109-48b2-abb8-32834a386970"],
Cell[183172, 5333, 111, 2, 31, "Output",ExpressionUUID->"3944d0ee-aeb3-40c9-b0f6-8bee693cd969"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[183356, 5343, 128, 1, 55, "Section",ExpressionUUID->"d655d461-0099-49a3-86c9-0aec1caab23a",
 CellTags->"Section5"],
Cell[183487, 5346, 483, 9, 50, "Text",ExpressionUUID->"e7ae60d8-c12e-4125-91cb-96a3cc4ee7c1"],
Cell[CellGroupData[{
Cell[183995, 5359, 118, 1, 32, "Subsection",ExpressionUUID->"30fa250a-c871-4b0a-bfce-85128265ba6a",
 CellTags->"Section5a"],
Cell[184116, 5362, 348, 5, 35, "Text",ExpressionUUID->"db3b6c82-69e5-46f4-84c6-440bd32a37d0"],
Cell[CellGroupData[{
Cell[184489, 5371, 96, 0, 18, "Subsubsection",ExpressionUUID->"a0f891a7-c0b7-460b-aecc-ed70cf41ea06"],
Cell[184588, 5373, 253, 4, 35, "Text",ExpressionUUID->"90adeea0-d2c1-46dd-a3ba-d69c472bdcd0"],
Cell[184844, 5379, 501, 15, 70, "Input",ExpressionUUID->"14006800-5a1f-46f8-a97e-850296100cf2",
 InitializationCell->True],
Cell[185348, 5396, 322, 5, 35, "Text",ExpressionUUID->"4c85f9ba-0468-454c-9f89-be95959d33e6"],
Cell[CellGroupData[{
Cell[185695, 5405, 254, 7, 31, "Input",ExpressionUUID->"ed293be7-af00-444c-9045-d42d58c435b1",
 InitializationCell->True],
Cell[185952, 5414, 737, 12, 51, "Output",ExpressionUUID->"3cdcec75-7cba-4532-bf90-735b48087576"]
}, Open  ]],
Cell[186704, 5429, 1053, 24, 69, "Text",ExpressionUUID->"8fb82f07-4068-4f80-b1c8-528a702db6ca"],
Cell[187760, 5455, 208, 3, 20, "Text",ExpressionUUID->"48c73192-8378-48ff-89ee-1ca94c492e71"],
Cell[187971, 5460, 290, 8, 31, "Input",ExpressionUUID->"639c802f-98ac-4969-92d5-7db186e9e40b",
 InitializationCell->True],
Cell[188264, 5470, 83, 0, 20, "Text",ExpressionUUID->"9dca8751-ffc6-4eda-ab95-cbd9fbac9817"],
Cell[CellGroupData[{
Cell[188372, 5474, 208, 5, 31, "Input",ExpressionUUID->"34331792-f7f4-4638-9470-4703c651a3bb"],
Cell[188583, 5481, 112, 2, 31, "Output",ExpressionUUID->"473d848b-04d2-45a0-8522-79bc9afc9447"]
}, Open  ]],
Cell[188710, 5486, 264, 5, 24, "Text",ExpressionUUID->"6b8d3450-4fd0-43bd-811f-01602649f49d"],
Cell[CellGroupData[{
Cell[188999, 5495, 232, 6, 31, "Input",ExpressionUUID->"0979a285-a3af-437b-91d4-6224d00c9f3e",
 InitializationCell->True],
Cell[189234, 5503, 163, 4, 31, "Output",ExpressionUUID->"37316499-883f-488e-a74a-0f7ac0c203d0"]
}, Open  ]],
Cell[189412, 5510, 177, 3, 20, "Text",ExpressionUUID->"4c83a8bb-cdc2-4ff3-9dd9-6ddad01c8277"],
Cell[CellGroupData[{
Cell[189614, 5517, 174, 4, 31, "Input",ExpressionUUID->"67fc7364-c8f3-4ae2-ac06-388ea949ef90"],
Cell[189791, 5523, 163, 4, 31, "Output",ExpressionUUID->"ae012d33-661a-4c23-a635-a8502d24fc50"]
}, Open  ]],
Cell[189969, 5530, 224, 3, 35, "Text",ExpressionUUID->"79446468-8c64-4028-b71c-eb262eb873bd"],
Cell[CellGroupData[{
Cell[190218, 5537, 226, 6, 31, "Input",ExpressionUUID->"0ab8867e-d67c-4f3e-b820-1f146ffc1959"],
Cell[190447, 5545, 114, 2, 31, "Output",ExpressionUUID->"c4ef8b94-fa30-4b80-9210-89ac14f7eff3"]
}, Open  ]],
Cell[190576, 5550, 344, 9, 24, "Text",ExpressionUUID->"4bc84119-2215-4147-bb9f-1129d70da0f9"],
Cell[CellGroupData[{
Cell[190945, 5563, 198, 5, 31, "Input",ExpressionUUID->"09839401-772d-45f1-883a-a2548b4822e5"],
Cell[191146, 5570, 114, 2, 31, "Output",ExpressionUUID->"93b86b51-0361-443f-a01d-3575c6983f3c"]
}, Open  ]],
Cell[191275, 5575, 183, 4, 24, "Text",ExpressionUUID->"b63274e6-2fa1-42c8-8e92-0fe5b63af76e"],
Cell[CellGroupData[{
Cell[191483, 5583, 208, 5, 31, "Input",ExpressionUUID->"fb74bed0-5dcb-4cf5-8f77-2a69434c5628"],
Cell[191694, 5590, 111, 2, 31, "Output",ExpressionUUID->"10a939e9-351b-463c-b5f6-a7aa7ae177f3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[191842, 5597, 231, 6, 31, "Input",ExpressionUUID->"bca27333-2394-4490-9bba-65d95bfb0d0f",
 InitializationCell->True],
Cell[192076, 5605, 163, 4, 31, "Output",ExpressionUUID->"6c7f9814-a469-401e-815e-98060c139640"]
}, Open  ]],
Cell[192254, 5612, 199, 4, 24, "Text",ExpressionUUID->"5521964b-6bf5-43fa-9125-01308d9d3e0b"],
Cell[CellGroupData[{
Cell[192478, 5620, 208, 5, 31, "Input",ExpressionUUID->"2a748fbc-2503-43e3-a84a-e89b3b56b531"],
Cell[192689, 5627, 112, 2, 31, "Output",ExpressionUUID->"4493a229-e340-4b43-92b6-d307b0d9be10"]
}, Open  ]],
Cell[192816, 5632, 252, 6, 24, "Text",ExpressionUUID->"88829c67-f724-47d6-8824-fb2b503fa643"],
Cell[CellGroupData[{
Cell[193093, 5642, 205, 5, 31, "Input",ExpressionUUID->"2418ef4d-ec61-467a-ae2f-3f42395a658a"],
Cell[193301, 5649, 114, 2, 31, "Output",ExpressionUUID->"c965efb2-20be-4073-abd4-2847023e6ef6"]
}, Open  ]],
Cell[193430, 5654, 252, 5, 24, "Text",ExpressionUUID->"2285973e-8ceb-47a3-8535-c2ec434ce6a1"],
Cell[CellGroupData[{
Cell[193707, 5663, 232, 6, 31, "Input",ExpressionUUID->"a8e1a0ff-85cb-4de2-9ab2-393eed725d20",
 InitializationCell->True],
Cell[193942, 5671, 163, 4, 31, "Output",ExpressionUUID->"608f7a2e-2f9e-41d3-bf54-95520efa2c03"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[194154, 5681, 96, 0, 18, "Subsubsection",ExpressionUUID->"8edcec3b-1126-4689-b650-4bf27f38e3fe"],
Cell[194253, 5683, 191, 4, 24, "Text",ExpressionUUID->"e4727374-a773-4ed8-ad05-669cae54c243"],
Cell[CellGroupData[{
Cell[194469, 5691, 123, 2, 31, "Input",ExpressionUUID->"2e019bf1-20c1-4cc1-bf66-b8c25bb4e5cc"],
Cell[194595, 5695, 905, 18, 70, "Output",ExpressionUUID->"3f89acbc-bd47-4c77-b997-db930faa9b50"]
}, Open  ]],
Cell[195515, 5716, 720, 18, 54, "Text",ExpressionUUID->"ae87c954-4cd9-45fd-a1cf-f8ec280eb668"],
Cell[196238, 5736, 930, 25, 108, "Input",ExpressionUUID->"4d72c46b-73f8-46d6-9169-955a4c766e51",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[197193, 5765, 161, 3, 31, "Input",ExpressionUUID->"557a9e39-f652-4228-99fe-e24e28f340c5"],
Cell[CellGroupData[{
Cell[197379, 5772, 340, 9, 24, "Print",ExpressionUUID->"13b55270-0d30-44ba-adbe-0ca967891c61"],
Cell[197722, 5783, 342, 9, 24, "Print",ExpressionUUID->"9183cb96-d4f3-4e7b-915b-814d8daeb19e"],
Cell[198067, 5794, 342, 9, 24, "Print",ExpressionUUID->"645207e3-845c-4a13-9bfd-fac427ab9886"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[198470, 5810, 114, 0, 18, "Subsubsection",ExpressionUUID->"901066c1-a431-409a-a4a8-6bf2c3b515df"],
Cell[198587, 5812, 432, 9, 43, "Text",ExpressionUUID->"131192f6-9b08-4a19-a9ae-9adee2328bed"],
Cell[199022, 5823, 2099, 49, 143, "Text",ExpressionUUID->"ebe5a3e8-0cbc-43ba-9367-d611820e9528"],
Cell[201124, 5874, 723, 12, 88, "Text",ExpressionUUID->"535c0482-5f94-4019-a418-612ba77c64ad"],
Cell[201850, 5888, 157, 4, 24, "Text",ExpressionUUID->"95b23074-da09-4782-9ecd-bc23d39a6979"],
Cell[202010, 5894, 1344, 36, 184, "Input",ExpressionUUID->"8d77a630-9593-47e8-9c45-b396c095dc6b",
 InitializationCell->True],
Cell[203357, 5932, 97, 0, 20, "Text",ExpressionUUID->"a077a773-0653-4320-a23a-fb300cdd7a33"],
Cell[203457, 5934, 203, 5, 31, "Input",ExpressionUUID->"c92a5076-6df9-46f2-bc50-ec0be9b96d3e",
 InitializationCell->True],
Cell[203663, 5941, 203, 5, 31, "Input",ExpressionUUID->"2515f32d-528f-488a-b80a-af010689d48c",
 InitializationCell->True],
Cell[203869, 5948, 203, 5, 31, "Input",ExpressionUUID->"e80761b0-6f18-4c3b-9ddb-1a055c412aa2",
 InitializationCell->True],
Cell[204075, 5955, 143, 4, 24, "Text",ExpressionUUID->"d6821e69-d546-4dc8-a4b7-bc1af2b268c5"],
Cell[CellGroupData[{
Cell[204243, 5963, 161, 3, 31, "Input",ExpressionUUID->"4ca0ee7c-5142-4b2b-9ace-8136698b9435"],
Cell[CellGroupData[{
Cell[204429, 5970, 340, 9, 24, "Print",ExpressionUUID->"70163d49-f64c-4b64-b200-7f8b04bdcfcb"],
Cell[204772, 5981, 342, 9, 24, "Print",ExpressionUUID->"a963711a-3c9d-4052-b8e0-e197fec2f486"],
Cell[205117, 5992, 342, 9, 24, "Print",ExpressionUUID->"372f8e46-47a8-4735-a143-6cf36977547c"],
Cell[205462, 6003, 342, 9, 24, "Print",ExpressionUUID->"b6288b72-794f-409d-b652-5354dc272519"],
Cell[205807, 6014, 342, 9, 24, "Print",ExpressionUUID->"3d8752c4-5ea0-45ad-8ea6-e64777d58786"],
Cell[206152, 6025, 342, 9, 24, "Print",ExpressionUUID->"2c9ca30c-b6f3-4172-b7bc-0763a234800c"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[206555, 6041, 98, 0, 18, "Subsubsection",ExpressionUUID->"6b4e9cd1-be04-4e94-ba09-a071eb441d94"],
Cell[206656, 6043, 534, 7, 65, "Text",ExpressionUUID->"64b7dfcc-a737-475c-8700-a82ad38a472a"],
Cell[207193, 6052, 1147, 27, 90, "Text",ExpressionUUID->"3f820941-b9b9-434a-aef6-8af5040a17a5"],
Cell[208343, 6081, 262, 7, 31, "Input",ExpressionUUID->"d93f44c7-6563-4e8a-bea3-5c3db06cc8d2",
 InitializationCell->True],
Cell[208608, 6090, 405, 6, 50, "Text",ExpressionUUID->"383b8940-2658-4b98-ab9b-1f2b9b85d356"],
Cell[209016, 6098, 1778, 44, 279, "Input",ExpressionUUID->"2fec1474-fabf-43e0-9042-b18ee3e3f492",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[210819, 6146, 153, 3, 31, "Input",ExpressionUUID->"54bf2acf-f888-45e8-8a49-d03177fe56e7"],
Cell[210975, 6151, 163, 4, 31, "Output",ExpressionUUID->"05ac3e14-f674-4e1b-82de-e1701e38260f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[211175, 6160, 153, 3, 31, "Input",ExpressionUUID->"49034a8e-d6ee-4c39-af0d-fbedbf51e23a"],
Cell[211331, 6165, 163, 4, 31, "Output",ExpressionUUID->"a52cabc8-ec97-4d39-bef3-a25827686aca"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[211555, 6176, 121, 1, 32, "Subsection",ExpressionUUID->"cba65204-f58b-4408-a469-44ed89a2ca26",
 CellTags->"Section5b"],
Cell[211679, 6179, 820, 11, 95, "Text",ExpressionUUID->"ba1e6717-2d70-47a5-90bb-fb52f9b364fa"],
Cell[212502, 6192, 2325, 64, 97, "Text",ExpressionUUID->"9c0e882c-5583-4ab5-b047-85d0fd479a56"],
Cell[CellGroupData[{
Cell[214852, 6260, 201, 5, 31, "Input",ExpressionUUID->"b57972b7-fc72-45c5-a6d4-e06693c8effa"],
Cell[215056, 6267, 115, 2, 31, "Output",ExpressionUUID->"823885ed-6053-4f6c-8bec-60a1a7b284c5"]
}, Open  ]],
Cell[215186, 6272, 486, 9, 54, "Text",ExpressionUUID->"a6190c66-aeeb-491b-b389-9781b3bc6c92"],
Cell[215675, 6283, 1000, 20, 81, "Text",ExpressionUUID->"c0ed49b0-ca6b-4df0-9a2d-4caab469d19f"],
Cell[216678, 6305, 103, 0, 20, "Text",ExpressionUUID->"c624f549-6e2a-4927-a92d-ef670e4fcdc4"],
Cell[216784, 6307, 1359, 39, 165, "Input",ExpressionUUID->"d90b2b14-a659-4917-aafe-a14a152c22d3",
 InitializationCell->True],
Cell[218146, 6348, 124, 0, 20, "Text",ExpressionUUID->"11de75ef-7a2b-4ecd-bf89-a9e0f83eef1b"],
Cell[CellGroupData[{
Cell[218295, 6352, 202, 5, 31, "Input",ExpressionUUID->"3638db0f-0341-4630-aa0f-d6ef10cf6e26",
 InitializationCell->True],
Cell[218500, 6359, 272, 6, 31, "Output",ExpressionUUID->"9588e49b-9f88-40ad-a8f9-c13512a4c2f8"]
}, Open  ]],
Cell[218787, 6368, 1222, 34, 57, "Text",ExpressionUUID->"f3e9414d-a684-4b8d-bc53-7bf4fe411042"],
Cell[220012, 6404, 1694, 49, 184, "Input",ExpressionUUID->"edfcd7a5-bd3c-4b22-8946-c9551a357d12",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[221731, 6457, 204, 5, 31, "Input",ExpressionUUID->"8a76b3de-9873-426d-9332-ef35a60a5656",
 InitializationCell->True],
Cell[221938, 6464, 301, 7, 31, "Output",ExpressionUUID->"5db6422c-33fd-4b6b-987a-412dee3881b0"]
}, Open  ]],
Cell[222254, 6474, 769, 19, 37, "Text",ExpressionUUID->"4d60026a-b3de-4688-910f-d5a3f3b77c77"],
Cell[223026, 6495, 163, 4, 24, "Text",ExpressionUUID->"05414ff4-2ce0-4b4e-9ce9-cdf9f998bdc5"],
Cell[223192, 6501, 531, 15, 70, "Input",ExpressionUUID->"2f23fe5b-04d2-4f38-9ef0-31198a7b7b4f",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[223748, 6520, 188, 4, 31, "Input",ExpressionUUID->"649ae6dd-2b3b-4d95-b07a-d18b492372da",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[223961, 6528, 340, 9, 24, "Print",ExpressionUUID->"4e1db6b9-a816-4027-997a-2657a66b62d3"],
Cell[224304, 6539, 367, 9, 24, "Print",ExpressionUUID->"468320b8-37d4-493e-9a92-3aad89ce0f4b"],
Cell[224674, 6550, 340, 9, 24, "Print",ExpressionUUID->"77a2b256-7953-44f3-8eb7-f3c37edf3094"],
Cell[225017, 6561, 340, 9, 24, "Print",ExpressionUUID->"4c678ce6-642d-4590-8089-fda4f7744a90"],
Cell[225360, 6572, 342, 9, 24, "Print",ExpressionUUID->"21f449c5-956c-45ed-8b0f-d92cd88de4f6"],
Cell[225705, 6583, 342, 9, 24, "Print",ExpressionUUID->"82fc02ce-b4ef-4ac9-a91f-e8219b9e3f01"],
Cell[226050, 6594, 342, 9, 24, "Print",ExpressionUUID->"39113ebd-a1d6-46b9-b6b8-8f24e2f04458"],
Cell[226395, 6605, 342, 9, 24, "Print",ExpressionUUID->"0c9ab8be-4bc6-41ca-a3c5-34dc6e4b680a"],
Cell[226740, 6616, 342, 9, 24, "Print",ExpressionUUID->"3a9d220e-cfb6-4793-977f-1af0128c009c"],
Cell[227085, 6627, 342, 9, 24, "Print",ExpressionUUID->"a50d846b-2111-4203-939f-22252ee15b3d"],
Cell[227430, 6638, 342, 9, 24, "Print",ExpressionUUID->"008e6fa6-97da-495b-bc54-8886e0c5b418"],
Cell[227775, 6649, 342, 9, 24, "Print",ExpressionUUID->"6ec43b63-e1df-496d-b9a7-15d23c0a1ca6"],
Cell[228120, 6660, 342, 9, 24, "Print",ExpressionUUID->"070be4df-0eca-48d0-b04f-39b37e8f036d"],
Cell[228465, 6671, 342, 9, 24, "Print",ExpressionUUID->"397ccf2f-1dfd-4be4-8de8-c750db3015f7"],
Cell[228810, 6682, 342, 9, 24, "Print",ExpressionUUID->"fd9a867d-41fc-417a-8472-3229300f7445"],
Cell[229155, 6693, 342, 9, 24, "Print",ExpressionUUID->"6b8de52d-969d-48f3-8d2c-02bef7a22900"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[229558, 6709, 113, 1, 32, "Subsection",ExpressionUUID->"90dfbc64-800b-43d1-97cb-26b9ad6cc3ef",
 CellTags->"Section5c"],
Cell[229674, 6712, 255, 4, 35, "Text",ExpressionUUID->"7d3a2ad9-a14c-48ba-b31f-2c2d313e0a2b"],
Cell[229932, 6718, 823, 24, 52, "Equation",ExpressionUUID->"d8259654-dbc1-43db-85a5-340106855894"],
Cell[230758, 6744, 279, 8, 20, "Text",ExpressionUUID->"fe0f2e5c-7028-403f-8c4d-8dc427f0d2f2"],
Cell[231040, 6754, 283, 6, 39, "Text",ExpressionUUID->"2e8cf14f-b8bb-48ca-b6cd-2d753e704d8c"],
Cell[CellGroupData[{
Cell[231348, 6764, 186, 4, 31, "Input",ExpressionUUID->"0c4d5d7a-0924-4ccd-b62b-fbfb08e34eb5",
 InitializationCell->True],
Cell[231537, 6770, 128, 2, 31, "Output",ExpressionUUID->"dd474ae7-4e9c-4557-b74e-2004ef11883e"]
}, Open  ]],
Cell[231680, 6775, 670, 14, 52, "Text",ExpressionUUID->"03b07e93-3e98-4d90-9b09-f5d14a1441b2"],
Cell[CellGroupData[{
Cell[232375, 6793, 203, 5, 31, "Input",ExpressionUUID->"4a874658-1654-48e1-93c3-44be99ca51fd"],
Cell[232581, 6800, 119, 2, 31, "Output",ExpressionUUID->"2faae4b3-12b0-43bf-8a7a-d3b4d7053fa2"]
}, Open  ]],
Cell[232715, 6805, 119, 0, 20, "Text",ExpressionUUID->"3889ae4b-c004-407f-a337-aefc1857a9df"],
Cell[CellGroupData[{
Cell[232859, 6809, 236, 6, 31, "Input",ExpressionUUID->"9cc16d1a-ae09-47ff-ba2e-98d8c31f3e61"],
Cell[233098, 6817, 252, 9, 42, "Output",ExpressionUUID->"d4f96daf-2f9f-4fac-8afb-8adfbfd12801"]
}, Open  ]],
Cell[233365, 6829, 761, 19, 52, "Text",ExpressionUUID->"9098c9a2-d1da-435f-a7d2-40cc02f39a6f"],
Cell[CellGroupData[{
Cell[234151, 6852, 278, 7, 31, "Input",ExpressionUUID->"3441978d-56c8-4ba6-a5d3-7b3f4bb430c3"],
Cell[234432, 6861, 244, 9, 42, "Output",ExpressionUUID->"443129b5-0386-416f-bb1c-3ba1d56b942a"]
}, Open  ]],
Cell[234691, 6873, 370, 7, 21, "Text",ExpressionUUID->"fd44c47e-9ddf-4f3c-a73a-b2759b4378f1"],
Cell[CellGroupData[{
Cell[235086, 6884, 175, 4, 31, "Input",ExpressionUUID->"600f7bbf-1d94-4615-93c3-58665765e466"],
Cell[235264, 6890, 252, 9, 42, "Output",ExpressionUUID->"1064bc78-b410-475a-b054-66174b2fa6be"]
}, Open  ]],
Cell[235531, 6902, 1775, 43, 100, "Text",ExpressionUUID->"45321df6-96be-4848-86b7-b2c24899801c"],
Cell[237309, 6947, 1458, 38, 184, "Input",ExpressionUUID->"4d8cfeea-ad54-4c8f-80df-3a544a144f6b",
 InitializationCell->True],
Cell[238770, 6987, 415, 8, 36, "Text",ExpressionUUID->"b039169e-9984-413a-bf91-7c052da2097c"],
Cell[CellGroupData[{
Cell[239210, 6999, 155, 3, 31, "Input",ExpressionUUID->"3ad9072e-dc6c-4ee2-a7a1-2bfc1530671c"],
Cell[239368, 7004, 114, 2, 31, "Output",ExpressionUUID->"22148446-735d-4cd4-b1c6-2196e2ed3260"]
}, Open  ]],
Cell[CellGroupData[{
Cell[239519, 7011, 162, 3, 31, "Input",ExpressionUUID->"00baaa06-4656-4e3e-b7a3-9c92d920e778"],
Cell[239684, 7016, 115, 2, 31, "Output",ExpressionUUID->"f42497ce-0722-44ed-9cbd-0c3967b46d50"]
}, Open  ]],
Cell[CellGroupData[{
Cell[239836, 7023, 162, 3, 31, "Input",ExpressionUUID->"880025d7-0f6e-45ee-96c9-b3f26283afe1"],
Cell[240001, 7028, 114, 2, 31, "Output",ExpressionUUID->"dd06949b-9b88-454b-9091-384f73c992d6"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[240176, 7037, 113, 1, 55, "Section",ExpressionUUID->"21df4450-aff1-41de-ab84-f9ff3385ac07",
 CellTags->"Section6"],
Cell[240292, 7040, 387, 7, 35, "Text",ExpressionUUID->"f5eb7b11-b4b0-4668-8add-d14f5a5a7e7b"],
Cell[CellGroupData[{
Cell[240704, 7051, 117, 1, 32, "Subsection",ExpressionUUID->"39e0cf2f-d527-4e2c-8ca5-e4b773ce5b10",
 CellTags->"Section6a"],
Cell[240824, 7054, 468, 6, 50, "Text",ExpressionUUID->"46dc317e-81dc-4359-bcb8-a5623f305226"],
Cell[CellGroupData[{
Cell[241317, 7064, 119, 0, 18, "Subsubsection",ExpressionUUID->"8c11525a-cc57-420d-a799-439c04c5ce06"],
Cell[241439, 7066, 524, 9, 51, "Text",ExpressionUUID->"bbab2dac-e99b-44c8-9605-6db9cbda2daf"],
Cell[241966, 7077, 584, 16, 39, "Text",ExpressionUUID->"e8b3528e-7d79-4f65-9359-5c6d4a1e17dd"],
Cell[CellGroupData[{
Cell[242575, 7097, 172, 3, 31, "Input",ExpressionUUID->"4f6085a8-0eb1-4f1e-abe8-a7c01a1ae390"],
Cell[242750, 7102, 494, 8, 31, "Output",ExpressionUUID->"b2c4c23c-3df7-4514-9aef-7e58ea7a2af6"]
}, Open  ]],
Cell[243259, 7113, 308, 7, 21, "Text",ExpressionUUID->"3d34ddc7-b906-42be-8e85-9f57df7933a4"],
Cell[CellGroupData[{
Cell[243592, 7124, 222, 5, 31, "Input",ExpressionUUID->"ac45aed4-c75f-4640-b5e0-c29cdaf3bb7c"],
Cell[243817, 7131, 137, 2, 31, "Output",ExpressionUUID->"7b721fd6-9aa0-42d3-9424-3e526ce33191"]
}, Open  ]],
Cell[243969, 7136, 257, 7, 24, "Text",ExpressionUUID->"84ea6dc4-0663-455d-93d9-c96292d0d369"],
Cell[CellGroupData[{
Cell[244251, 7147, 207, 4, 31, "Input",ExpressionUUID->"8cccfe22-6c72-4f50-bb20-ebd720254726"],
Cell[244461, 7153, 137, 2, 31, "Output",ExpressionUUID->"d9044050-f721-4a88-813b-1c2fb259a7a9"]
}, Open  ]],
Cell[244613, 7158, 205, 3, 20, "Text",ExpressionUUID->"aac2fe4f-fd79-4ab3-a06f-9fe419eeab00"],
Cell[CellGroupData[{
Cell[244843, 7165, 541, 11, 51, "Input",ExpressionUUID->"8d0f498a-b102-4e18-a35a-9d59429fb80c"],
Cell[245387, 7178, 137, 2, 31, "Output",ExpressionUUID->"57facb20-53c1-44fd-8756-5f5afb6d98ac"]
}, Open  ]],
Cell[245539, 7183, 463, 8, 51, "Text",ExpressionUUID->"b59143e5-c317-4f18-b6a4-1169fd5d4d61"],
Cell[CellGroupData[{
Cell[246027, 7195, 156, 3, 31, "Input",ExpressionUUID->"fa60e9db-2adb-4c3c-8ef1-f8e759aa1d3d"],
Cell[246186, 7200, 111, 2, 31, "Output",ExpressionUUID->"9db31b43-1f83-46e1-a8a3-f4fb6f47f21b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[246334, 7207, 156, 3, 31, "Input",ExpressionUUID->"be6b6b97-1749-4bad-b2c8-b9a80135345c"],
Cell[246493, 7212, 111, 2, 31, "Output",ExpressionUUID->"c2bfc25a-c269-487b-90b8-e525c9a17aa5"]
}, Open  ]],
Cell[246619, 7217, 263, 6, 21, "Text",ExpressionUUID->"9234fc54-6d45-4b43-bce0-e47f042a2611"],
Cell[CellGroupData[{
Cell[246907, 7227, 156, 3, 31, "Input",ExpressionUUID->"b411829d-741d-40a8-9db3-6bd7df64fe04"],
Cell[247066, 7232, 111, 2, 31, "Output",ExpressionUUID->"4d210280-f117-4a00-a07c-3660529da441"]
}, Open  ]],
Cell[247192, 7237, 177, 3, 20, "Text",ExpressionUUID->"ca803098-b2ae-4228-9352-c89b7cbee773"],
Cell[CellGroupData[{
Cell[247394, 7244, 174, 3, 31, "Input",ExpressionUUID->"d3b326f1-20ba-4643-b292-61d845e5eaf3"],
Cell[247571, 7249, 347, 7, 31, "Output",ExpressionUUID->"8bd3487a-6ae7-4eb4-9a4e-05668cc709b8"]
}, Open  ]],
Cell[247933, 7259, 466, 10, 36, "Text",ExpressionUUID->"0ed098ae-b50e-46f0-befc-fd685fdbac12"],
Cell[CellGroupData[{
Cell[248424, 7273, 153, 3, 31, "Input",ExpressionUUID->"dc0245b5-465b-4826-9a33-ed4820b01ea6"],
Cell[248580, 7278, 119, 2, 31, "Output",ExpressionUUID->"9740268f-d8e3-4527-8086-bbdff2d7ff86"]
}, Open  ]],
Cell[CellGroupData[{
Cell[248736, 7285, 305, 7, 31, "Input",ExpressionUUID->"e186e8db-24fd-4769-8be9-828cc2445133"],
Cell[249044, 7294, 342, 6, 31, "Output",ExpressionUUID->"fb3e28d1-313e-4565-8ac1-8f58d164a135"]
}, Open  ]],
Cell[CellGroupData[{
Cell[249423, 7305, 346, 8, 31, "Input",ExpressionUUID->"89393695-00b3-4fc1-ba37-a77d1d755188"],
Cell[249772, 7315, 129, 2, 31, "Output",ExpressionUUID->"f02a5e3d-6d26-4d3a-999e-9335e3e86527"]
}, Open  ]],
Cell[249916, 7320, 232, 4, 35, "Text",ExpressionUUID->"3d8b8188-7e45-4a7a-8528-be07c107df7e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[250197, 7330, 148, 2, 32, "Subsection",ExpressionUUID->"50aaae9f-67be-4484-bb10-f38d89340519",
 PageBreakWithin->False,
 CellTags->"Section6b"],
Cell[250348, 7334, 235, 6, 20, "Text",ExpressionUUID->"1c48c020-030d-43ec-bd41-85dd5d3ce547",
 PageBreakAbove->False,
 PageBreakWithin->False],
Cell[250586, 7342, 363, 12, 26, "Equation",ExpressionUUID->"230c8ff8-3b8d-4d66-a96c-640f446234fb"],
Cell[250952, 7356, 1205, 30, 50, "Text",ExpressionUUID->"9a1ed72c-fe4a-4538-bad7-34737e3213aa"],
Cell[252160, 7388, 1016, 25, 56, "Text",ExpressionUUID->"a8010e04-cf24-4d43-8520-7b95d99d68c1"],
Cell[253179, 7415, 454, 12, 24, "Text",ExpressionUUID->"fc7df81c-35d3-433d-9f61-52d75983ecfd"],
Cell[253636, 7429, 277, 8, 31, "Input",ExpressionUUID->"4d9e9b9f-29ea-4006-9499-d41e324e57f0",
 InitializationCell->True],
Cell[253916, 7439, 341, 6, 39, "Text",ExpressionUUID->"db9a5ce0-5c2e-4d50-9863-c3d8ac948930"],
Cell[254260, 7447, 1182, 34, 146, "Input",ExpressionUUID->"377e45a5-d413-4a0f-95c3-dc96f42a0cf2",
 InitializationCell->True],
Cell[255445, 7483, 451, 13, 24, "Text",ExpressionUUID->"a4631d91-6051-4682-a836-acc7f4e0e93f"],
Cell[255899, 7498, 364, 9, 20, "Text",ExpressionUUID->"54a66775-3047-442d-9af3-12eff3670fa6"],
Cell[CellGroupData[{
Cell[256288, 7511, 209, 5, 31, "Input",ExpressionUUID->"235265af-8bc8-44e0-9242-472808a02fd8"],
Cell[256500, 7518, 137, 2, 31, "Output",ExpressionUUID->"08a1b101-ef2c-4971-bb3a-8e096ce5710f"]
}, Open  ]],
Cell[256652, 7523, 1902, 58, 74, "Text",ExpressionUUID->"06dc42a1-71b3-4004-9ebe-5fcce969767f"],
Cell[258557, 7583, 254, 7, 20, "Text",ExpressionUUID->"5c2b5801-7993-4f0d-9f63-78e1f2be0ba1"],
Cell[CellGroupData[{
Cell[258836, 7594, 197, 5, 31, "Input",ExpressionUUID->"68c1f90c-fe6a-4574-a1c3-de3bd2c7a50f"],
Cell[259036, 7601, 112, 2, 31, "Output",ExpressionUUID->"e0b8726a-5922-4bc6-aac0-551d1ec5d8b0"]
}, Open  ]],
Cell[259163, 7606, 333, 10, 23, "Text",ExpressionUUID->"ac369a4c-10d4-4afc-b6b3-2d1aed35d89a"],
Cell[CellGroupData[{
Cell[259521, 7620, 208, 6, 31, "Input",ExpressionUUID->"885ea939-93ca-49e2-9829-b81a0356f994"],
Cell[259732, 7628, 112, 2, 31, "Output",ExpressionUUID->"eb406a28-4298-45ea-be9c-65f9f9d8a4da"]
}, Open  ]],
Cell[259859, 7633, 279, 8, 20, "Text",ExpressionUUID->"94d3c4bd-967f-4a7b-947e-786f82f2dfb1"],
Cell[CellGroupData[{
Cell[260163, 7645, 212, 5, 31, "Input",ExpressionUUID->"d0a5fa36-f1c9-4a70-9fa5-679a7f12e8cc"],
Cell[260378, 7652, 137, 2, 31, "Output",ExpressionUUID->"cc2bbe86-99ae-4cd6-8342-f30328f326d8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[260564, 7660, 115, 1, 32, "Subsection",ExpressionUUID->"18a5dd5e-401f-41df-a518-0217ba3a5b1d",
 CellTags->"Section6c"],
Cell[260682, 7663, 298, 6, 35, "Text",ExpressionUUID->"70e6e9c1-abc7-49dd-974e-07fedbb0ea35"],
Cell[260983, 7671, 365, 5, 50, "Text",ExpressionUUID->"dc7a7c67-432a-44cf-9447-cc82ecf7e680"],
Cell[261351, 7678, 387, 7, 35, "Text",ExpressionUUID->"93de9ba4-2e0a-4f14-87ee-0f3063939408"],
Cell[CellGroupData[{
Cell[261763, 7689, 94, 0, 18, "Subsubsection",ExpressionUUID->"7ba4e9c7-d792-4a9d-9177-bb709fdacd35"],
Cell[261860, 7691, 2378, 71, 65, "Text",ExpressionUUID->"c8008d22-ddcc-4260-8e09-05b823cc0c12"],
Cell[264241, 7764, 1664, 52, 63, "Text",ExpressionUUID->"bcadd9dc-e9af-4da1-8fb2-fe77171bc075"],
Cell[265908, 7818, 1171, 35, 146, "Input",ExpressionUUID->"10de1c88-767b-4a0a-a8bf-840d5647483d",
 InitializationCell->True],
Cell[267082, 7855, 578, 13, 39, "Text",ExpressionUUID->"a24a3722-21a8-474a-ab5c-86a434491fc0"],
Cell[267663, 7870, 409, 12, 20, "Text",ExpressionUUID->"f1c5f8e1-885b-43a9-9ce6-5ce1da519739"],
Cell[CellGroupData[{
Cell[268097, 7886, 227, 6, 31, "Input",ExpressionUUID->"d2bc876f-214c-434d-8cb6-5054e7e24ee1",
 InitializationCell->True],
Cell[268327, 7894, 263, 8, 31, "Output",ExpressionUUID->"a4fa4561-04d0-49f0-92c9-3d3cebeefb4d"]
}, Open  ]],
Cell[268605, 7905, 103, 0, 20, "Text",ExpressionUUID->"1156271b-18da-4d5a-9771-50ed9af00714"],
Cell[CellGroupData[{
Cell[268733, 7909, 222, 6, 31, "Input",ExpressionUUID->"32b2d02a-c0f1-4be4-88c2-503f0678aca2",
 InitializationCell->True],
Cell[268958, 7917, 160, 4, 31, "Output",ExpressionUUID->"25b0f63c-4fdd-4ce1-9609-3666d9b9f0d2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[269155, 7926, 223, 6, 31, "Input",ExpressionUUID->"cc1d71af-7f7c-4edd-b4c1-10578ce844f7",
 InitializationCell->True],
Cell[269381, 7934, 161, 4, 31, "Output",ExpressionUUID->"97e95d42-72dc-4c7b-ad98-3f492494d6fc"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[269591, 7944, 88, 0, 18, "Subsubsection",ExpressionUUID->"4594302b-476c-4113-b34d-e5453a75c49b"],
Cell[269682, 7946, 801, 16, 65, "Text",ExpressionUUID->"1519dfee-cac8-4265-aefa-0239bbc7f2af"],
Cell[270486, 7964, 918, 12, 65, "Text",ExpressionUUID->"b2a6322b-453e-4713-88b2-1498dc294644"],
Cell[271407, 7978, 406, 7, 36, "Text",ExpressionUUID->"65897ff3-37b2-422e-b7de-4001456cfd08"],
Cell[CellGroupData[{
Cell[271838, 7989, 231, 5, 31, "Input",ExpressionUUID->"01d9c2f3-596b-40d2-985a-cb29492fe394",
 InitializationCell->True],
Cell[272072, 7996, 292, 7, 31, "Output",ExpressionUUID->"3699c4fb-24c7-4ad4-9f7b-1b7c035c8a62"]
}, Open  ]],
Cell[272379, 8006, 369, 5, 50, "Text",ExpressionUUID->"03488769-091b-4917-b512-1b7a821cdba4"],
Cell[CellGroupData[{
Cell[272773, 8015, 573, 17, 51, "Input",ExpressionUUID->"fcc3084f-374d-4355-a11c-3022963e49ff",
 InitializationCell->True],
Cell[273349, 8034, 228, 6, 31, "Output",ExpressionUUID->"144d116d-6d2e-44cf-ab6e-0d0e75d10342"]
}, Open  ]],
Cell[273592, 8043, 213, 3, 20, "Text",ExpressionUUID->"263d73e5-c90d-4c5d-a9fa-d80ccfe1242e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[273842, 8051, 90, 0, 18, "Subsubsection",ExpressionUUID->"38e039c5-4f31-4db5-a817-bea553e5e81d"],
Cell[273935, 8053, 781, 22, 35, "Text",ExpressionUUID->"9a96ce9f-c690-4993-8394-9b3f667f39af"],
Cell[274719, 8077, 668, 20, 70, "Input",ExpressionUUID->"b9f4e25a-b9dd-42a9-9730-3eeb0b2256cd",
 InitializationCell->True],
Cell[275390, 8099, 389, 11, 43, "Text",ExpressionUUID->"f8ada41e-667f-442d-a1e5-0985788530e5"],
Cell[275782, 8112, 154, 1, 20, "Text",ExpressionUUID->"5fd8eebf-2cba-48dd-807e-07134527465c"],
Cell[CellGroupData[{
Cell[275961, 8117, 240, 6, 31, "Input",ExpressionUUID->"5796b2bb-d49e-4d92-af58-b9e988f6efe3",
 InitializationCell->True],
Cell[276204, 8125, 232, 6, 31, "Output",ExpressionUUID->"e61ab6da-1b0f-4fa9-879a-764d58e83263"]
}, Open  ]],
Cell[276451, 8134, 172, 3, 20, "Text",ExpressionUUID->"9676b7d8-aa16-4446-88f1-ae16b67b94f8"],
Cell[CellGroupData[{
Cell[276648, 8141, 180, 4, 31, "Input",ExpressionUUID->"53fd3514-5d01-4f44-a714-6a33fc14ba9b"],
Cell[276831, 8147, 228, 6, 31, "Output",ExpressionUUID->"bd45f13d-f148-4310-bf3c-d987e236eae1"]
}, Open  ]],
Cell[277074, 8156, 266, 5, 24, "Text",ExpressionUUID->"25c492af-eb30-4fcf-9edf-bad0f3e694d2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[277377, 8166, 103, 0, 18, "Subsubsection",ExpressionUUID->"53485be1-2afa-4756-8dfa-f57d540266d7"],
Cell[277483, 8168, 637, 15, 35, "Text",ExpressionUUID->"407e57a6-6ce5-4a0d-857f-9d31f4f23ff4"],
Cell[278123, 8185, 623, 15, 51, "Text",ExpressionUUID->"f8ab08ee-ba7e-43be-be36-c245d15f9de4"],
Cell[278749, 8202, 577, 10, 51, "Text",ExpressionUUID->"24320a3e-1ae0-4e6f-98d0-08e7eefe889a"],
Cell[279329, 8214, 284, 6, 21, "Text",ExpressionUUID->"1ea0658b-ad4e-43b7-b7a0-434204c1840e"],
Cell[279616, 8222, 292, 6, 21, "Text",ExpressionUUID->"f81b2426-2214-4e14-a0d7-89f67915e833"],
Cell[CellGroupData[{
Cell[279933, 8232, 277, 8, 31, "Input",ExpressionUUID->"457bba5c-6c19-436e-ad5d-2e15ebd0701b"],
Cell[280213, 8242, 981, 16, 241, "Output",ExpressionUUID->"15f13404-9d68-4d44-922e-d2bebcd0b1c2"]
}, Open  ]],
Cell[281209, 8261, 255, 7, 24, "Text",ExpressionUUID->"10b9f747-0c31-401d-8fc8-e16837466efc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[281501, 8273, 102, 0, 18, "Subsubsection",ExpressionUUID->"c63f527f-660f-43ab-8b03-ad1787c3a719"],
Cell[281606, 8275, 330, 5, 35, "Text",ExpressionUUID->"446f0eb1-2ba9-42ab-b988-527176b6275d"],
Cell[281939, 8282, 309, 7, 20, "Text",ExpressionUUID->"870af749-f50f-41e8-9ac8-2ba3b4389d37"],
Cell[CellGroupData[{
Cell[282273, 8293, 224, 6, 31, "Input",ExpressionUUID->"f4926a1b-9e15-4c29-beaa-4a8d47fb88a2"],
Cell[282500, 8301, 136, 3, 31, "Output",ExpressionUUID->"2b64925b-fada-4240-af2e-4e358a72273d"]
}, Open  ]],
Cell[282651, 8307, 673, 9, 80, "Text",ExpressionUUID->"cda825a4-1317-4a0a-84e9-5911e02c703a"],
Cell[CellGroupData[{
Cell[283349, 8320, 254, 7, 31, "Input",ExpressionUUID->"3530f489-546c-4c1f-ada2-9a3615b966a6"],
Cell[283606, 8329, 139, 3, 31, "Output",ExpressionUUID->"b2a8f040-6bf7-4e9d-9bb3-5918cd3c5f53"]
}, Open  ]],
Cell[283760, 8335, 170, 3, 20, "Text",ExpressionUUID->"61d404de-a51e-47a8-81a8-2862cea9e2c2"],
Cell[CellGroupData[{
Cell[283955, 8342, 175, 4, 31, "Input",ExpressionUUID->"affb0156-166d-4f27-a7bc-e09569b230da"],
Cell[284133, 8348, 136, 3, 31, "Output",ExpressionUUID->"e169b641-e444-4d7d-bb9c-5a618802945f"]
}, Open  ]],
Cell[284284, 8354, 271, 7, 20, "Text",ExpressionUUID->"030c51c6-c01c-4590-b92c-c89a16146023"],
Cell[CellGroupData[{
Cell[284580, 8365, 134, 3, 31, "Input",ExpressionUUID->"31753ae5-8e61-48c0-ac83-35c14106239c"],
Cell[284717, 8370, 114, 2, 31, "Output",ExpressionUUID->"cf2160f5-50c8-4467-a997-19973877479b"]
}, Open  ]],
Cell[284846, 8375, 281, 4, 35, "Text",ExpressionUUID->"cac714e8-464a-4322-8703-cf27a37f6414"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[285188, 8386, 195, 4, 55, "Section",ExpressionUUID->"dfbe6b4f-56dc-4326-9e8b-dcaa6cfa699b",
 PageBreakWithin->False,
 CellTags->"Solutions"],
Cell[CellGroupData[{
Cell[285408, 8394, 175, 4, 32, "Subsection",ExpressionUUID->"e1d36dda-f550-498d-88f5-7df694a65720",
 PageBreakAbove->False,
 PageBreakWithin->False,
 CellTags->"SolutionsCP3"],
Cell[285586, 8400, 201, 3, 42, "Problem",ExpressionUUID->"51790093-6641-43be-9247-e23301789be8"],
Cell[285790, 8405, 453, 12, 20, "Text",ExpressionUUID->"8f833987-663c-437e-9924-0dc90e7b2e6f"],
Cell[286246, 8419, 538, 18, 26, "Equation",ExpressionUUID->"6c17f4f9-2e46-4a31-b004-bdcbfe50a5f5"],
Cell[286787, 8439, 326, 9, 20, "Text",ExpressionUUID->"ad59d4a9-b34f-43e3-b5f3-91a99207530d"],
Cell[287116, 8450, 626, 21, 26, "Equation",ExpressionUUID->"938ba7da-ccdf-4e29-be4b-dd9356b3a3c3"],
Cell[287745, 8473, 781, 25, 30, "Text",ExpressionUUID->"10e7b4d1-7e70-41b1-9c76-46072fe520b8"],
Cell[288529, 8500, 989, 35, 45, "Equation",ExpressionUUID->"bfcdcf61-94ee-4a53-b43e-d3fde0085dd7"],
Cell[289521, 8537, 803, 26, 30, "Text",ExpressionUUID->"418b4bbf-f3ce-41e9-a797-04aad3b1eb3b"],
Cell[290327, 8565, 944, 31, 30, "Text",ExpressionUUID->"5d466530-88fd-451c-9963-440d7d3ef2ae"],
Cell[291274, 8598, 487, 12, 35, "Text",ExpressionUUID->"13752fde-6779-4fc4-bdb5-a5f468df7960"],
Cell[291764, 8612, 1256, 33, 203, "Input",ExpressionUUID->"0adca5b8-1ab4-4634-98bd-66cd1dd75dda",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[293045, 8649, 153, 3, 31, "Input",ExpressionUUID->"a30d3471-af92-4b9d-9932-ffdd08997eb3"],
Cell[293201, 8654, 186, 4, 31, "Output",ExpressionUUID->"23baa9df-0ef4-4163-b4e2-b22d0dc737c1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[293436, 8664, 128, 2, 32, "Subsection",ExpressionUUID->"db1b99de-dc01-4067-bb5a-25a41d4c39a5",
 CellTags->"SolutionsCP21"],
Cell[293567, 8668, 157, 2, 42, "Problem",ExpressionUUID->"c8aff608-a9d8-4cce-a941-75d1cbf0c34a"],
Cell[293727, 8672, 220, 5, 20, "Text",ExpressionUUID->"e58a0030-8568-459c-9e0e-bfb23656ff04"],
Cell[293950, 8679, 600, 15, 35, "Text",ExpressionUUID->"e613d0f6-b7c7-4921-9e6d-daa9cd774bbb"],
Cell[CellGroupData[{
Cell[294575, 8698, 306, 9, 31, "Input",ExpressionUUID->"e82e2c73-2fee-4412-a3c9-84b1bc4b38df",
 InitializationCell->True],
Cell[294884, 8709, 118, 2, 31, "Output",ExpressionUUID->"3bd0c2dd-2960-441f-b19a-2552fc113ae9"]
}, Open  ]],
Cell[295017, 8714, 309, 6, 21, "Text",ExpressionUUID->"bada91ec-b154-4487-941f-71381eff5818"],
Cell[CellGroupData[{
Cell[295351, 8724, 210, 5, 31, "Input",ExpressionUUID->"eabd36f4-b07d-4e25-a6f9-95251dc4b2bd",
 InitializationCell->True],
Cell[295564, 8731, 111, 2, 31, "Output",ExpressionUUID->"509d7658-2f73-4c97-9361-d4c0fcfba08d"]
}, Open  ]],
Cell[295690, 8736, 575, 15, 38, "Text",ExpressionUUID->"3d7d0ef8-ba14-4570-8aa7-f4a5855ed56f"],
Cell[CellGroupData[{
Cell[296290, 8755, 250, 6, 31, "Input",ExpressionUUID->"c16a46cd-bba2-4749-bbca-421eaffcbfcf",
 InitializationCell->True],
Cell[296543, 8763, 118, 2, 31, "Output",ExpressionUUID->"929bfce9-05d3-42f6-ac9a-5ccd89036068"]
}, Open  ]],
Cell[296676, 8768, 268, 6, 21, "Text",ExpressionUUID->"13ff71a8-3878-4898-9c39-918bf537775e"],
Cell[296947, 8776, 946, 27, 38, "Text",ExpressionUUID->"7349d108-02ad-43f1-8393-38c025b418ae"],
Cell[CellGroupData[{
Cell[297918, 8807, 351, 10, 31, "Input",ExpressionUUID->"f01b5c46-c171-4c18-9e46-1a578cafe138",
 InitializationCell->True],
Cell[298272, 8819, 118, 2, 31, "Output",ExpressionUUID->"fbdf89a1-c591-40d6-a069-f7f5f23255a1"]
}, Open  ]],
Cell[298405, 8824, 1298, 37, 54, "Text",ExpressionUUID->"b0600f7c-4c0a-4a64-a336-5c2ecbe31db4"],
Cell[299706, 8863, 784, 22, 41, "Text",ExpressionUUID->"e3801de8-429e-4b36-a4e5-eabde5269869"],
Cell[CellGroupData[{
Cell[300515, 8889, 251, 6, 31, "Input",ExpressionUUID->"4e84ccde-d284-4692-a60e-d5cca8bdaa94",
 InitializationCell->True],
Cell[300769, 8897, 117, 2, 31, "Output",ExpressionUUID->"1ded256e-9a83-480b-a8b3-4278e827f612"]
}, Open  ]],
Cell[300901, 8902, 163, 3, 20, "Text",ExpressionUUID->"08478b4f-2441-447e-a0fd-310dcac17151"]
}, Open  ]],
Cell[CellGroupData[{
Cell[301101, 8910, 138, 2, 32, "Subsection",ExpressionUUID->"b9716feb-232c-4ebf-a09f-df1f8559a2e0",
 CellTags->"SolutionsCE1"],
Cell[301242, 8914, 321, 8, 42, "Problem",ExpressionUUID->"0d07af14-b38d-4693-9f6f-f763a8a1c74a"],
Cell[301566, 8924, 899, 24, 35, "Text",ExpressionUUID->"051576b4-2b3d-49a5-9969-09fe6ce420f8"],
Cell[302468, 8950, 1042, 28, 165, "Input",ExpressionUUID->"642a0229-90c8-4258-9ca4-f5576fe7d2f8",
 InitializationCell->True],
Cell[303513, 8980, 412, 12, 20, "Text",ExpressionUUID->"b36ab3d5-df45-4918-83f4-7103678827b9"],
Cell[CellGroupData[{
Cell[303950, 8996, 151, 3, 31, "Input",ExpressionUUID->"d91c7599-f2a0-4a3f-a22e-eb6efbfcb4f6"],
Cell[304104, 9001, 249, 6, 31, "Output",ExpressionUUID->"7c8712ef-aadc-40d6-b6ea-54e7b4b3b5fd"]
}, Open  ]],
Cell[304368, 9010, 702, 17, 51, "Text",ExpressionUUID->"a40c25ba-1328-4bf1-a416-ec12fefc3ebb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[305107, 9032, 138, 2, 32, "Subsection",ExpressionUUID->"984c9b9c-53a7-478a-bfde-0ef57e599b65",
 CellTags->"SolutionsCE5"],
Cell[305248, 9036, 503, 13, 58, "Problem",ExpressionUUID->"3f5c318b-4d5e-4f10-9636-a5c19f07efd4"],
Cell[305754, 9051, 328, 8, 20, "Text",ExpressionUUID->"a862e234-15b0-41b9-aa26-e35f7e61cfe8"],
Cell[306085, 9061, 1001, 27, 146, "Input",ExpressionUUID->"95b378a9-148a-4e37-a8f2-1e7ee5f596a1",
 InitializationCell->True],
Cell[307089, 9090, 276, 7, 20, "Text",ExpressionUUID->"1df93d0f-ba94-4d2a-ba35-6003c5b01c51"],
Cell[CellGroupData[{
Cell[307390, 9101, 141, 3, 31, "Input",ExpressionUUID->"b8d210c4-4987-4819-846e-31478ab58f48"],
Cell[307534, 9106, 382, 8, 51, "Output",ExpressionUUID->"41b33626-9986-4779-a8b0-a23fcc2fb97d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[307977, 9121, 107, 1, 55, "Section",ExpressionUUID->"10c60fdd-dd67-4af2-9458-1fc41d73026f",
 CellTags->"Exercises"],
Cell[CellGroupData[{
Cell[308109, 9126, 232, 6, 20, "Item1Exercise",ExpressionUUID->"d30c4357-fa22-481e-b32b-2855030a888d"],
Cell[308344, 9134, 274, 6, 20, "Item1Exercise",ExpressionUUID->"fe9bfd2e-71e9-4113-9d6d-6631846d46fa"],
Cell[308621, 9142, 844, 25, 36, "Item1Exercise",ExpressionUUID->"b8ca2054-2990-4daf-8057-3e39732ac609"],
Cell[309468, 9169, 1651, 47, 63, "Item1Exercise",ExpressionUUID->"9fda3c1a-7945-4b4c-a5f7-b53827a1f217"],
Cell[311122, 9218, 1863, 51, 82, "Item1Exercise",ExpressionUUID->"de1e71fa-5a40-4ad2-b358-e95eaa5a164f"],
Cell[312988, 9271, 443, 7, 50, "Item1Exercise",ExpressionUUID->"45654efe-07e1-45fe-ab0b-a4452a90c135"],
Cell[313434, 9280, 395, 8, 33, "Item1Exercise",ExpressionUUID->"25bdda03-a9be-4f84-a305-d99a439e79e0"],
Cell[313832, 9290, 1256, 37, 46, "Item1Exercise",ExpressionUUID->"90bb5841-576e-4877-ad93-6de557c780ac"],
Cell[315091, 9329, 463, 9, 46, "Item1Exercise",ExpressionUUID->"8c4a2072-c510-46a8-9140-679659ec7e30"],
Cell[315557, 9340, 423, 9, 33, "Item1Exercise",ExpressionUUID->"e1748f0b-b48e-439f-be0d-90e3e551c0b0"],
Cell[315983, 9351, 1209, 33, 46, "Item1Exercise",ExpressionUUID->"4ae68aaa-b77b-42a5-b211-638f045b5ebe"],
Cell[317195, 9386, 3958, 122, 93, "Item1Exercise",ExpressionUUID->"8bee5f30-02ca-4b98-9316-33374df7df2f"],
Cell[321156, 9510, 2853, 85, 88, "Item1Exercise",ExpressionUUID->"fbb3bc5e-d2e3-4a59-8c0d-66dc78c27153"],
Cell[324012, 9597, 790, 14, 72, "Item1Exercise",ExpressionUUID->"099352ce-7dcd-4001-ab63-b8365d8be54b"],
Cell[324805, 9613, 454, 10, 46, "Item1Exercise",ExpressionUUID->"f624c4a0-2b57-42fa-92b5-6c7a39131640"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

