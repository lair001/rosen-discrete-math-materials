(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    711348,      16950]
NotebookOptionsPosition[    614058,      15309]
NotebookOutlinePosition[    638477,      15800]
CellTagsIndexPosition[    637465,      15765]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Relations", "BookChapterTitle",
 CounterAssignments->{{
   "ChapterNumber", 
    9}},ExpressionUUID->"58c87dc1-da4d-4ad1-9b9e-244c902b875b"],

Cell[CellGroupData[{

Cell["Introduction", "Section",ExpressionUUID->"a79adaba-69f5-4755-845e-cbdf6f63257e"],

Cell[TextData[{
 "In this chapter, we will learn how to use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to work with relations. We explain how to represent binary relations using \
sets of ordered pairs, zero\[Dash]one matrices, and directed graphs. We show \
how to use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to determine whether a relation has various properties using these \
different representations."
}], "Text",ExpressionUUID->"d4375bb2-cfaa-4088-b72a-51aeeac8031b"],

Cell[TextData[{
 "We also describe how to compute closures of relations. In particular, we \
show how to find the transitive closure of a relation using two different \
algorithms and we compare the time performance of these algorithms. After \
explaining how to use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to work with equivalence relations, we show how to use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to work with partial orderings, to draw Hasse diagrams, and to implement \
topological sorting."
}], "Text",ExpressionUUID->"bfbafa32-0bb3-45a6-b397-ff2c28de74eb"],

Cell[TextData[{
 "Some readers may be familiar with the ",
 StyleBox["Combinatorica",
  FontSlant->"Italic"],
 " package. While this package has much to offer, many of the functions it \
was created to provide are now part of the Wolfram Language proper. In this \
manual, we tend to avoid use of the ",
 StyleBox["Combinatorica",
  FontSlant->"Italic"],
 " package functions, particularly when there are Wolfram Language functions \
that will suffice."
}], "Text",ExpressionUUID->"bb929fba-90a1-4d86-ab63-05916d1ebf18"]
}, Open  ]],

Cell[CellGroupData[{

Cell["9.1 Relations and Their Properties", "Section",
 CellTags->"Section1",ExpressionUUID->"a39053f7-ed0e-4ece-b12d-861463cf36db"],

Cell[TextData[{
 "The first step in understanding and manipulating relations in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is to determine how to represent them. There are no specific functions in \
the Wolfram Language designed to handle relations. We will implement \
relations using the most convenient form for the question at hand. In this \
chapter, we will make use of sets of ordered pairs, zero\[Dash]one matrices, \
and directed graphs in order to explore relations in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "."
}], "Text",ExpressionUUID->"0671c94e-0c9a-4e18-afee-cf101660da95"],

Cell[CellGroupData[{

Cell["Relations as Ordered Pairs", "Subsection",
 CellTags->"Section1a",ExpressionUUID->"d7f67218-9b4e-44da-946e-15ad6376a324"],

Cell["\<\
First, we will represent relations as lists of ordered pairs. We begin by \
defining a predicate to check that an expression is a relation, that is, a \
list of pairs. Our reason for defining a predicate is that it gives us a way \
to ensure that when arguments are passed to functions we write, the arguments \
are valid for that function. As an illustration of the utility of this \
approach, consider the function below.\
\>", "Text",ExpressionUUID->"ee92347b-5c7b-4053-8cb6-ce938f2c869b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"posIntQ", "[", "n_", "]"}], ":=", 
  RowBox[{
   RowBox[{"IntegerQ", "[", "n", "]"}], "&&", 
   RowBox[{"n", ">", "0"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[1]:=",ExpressionUUID->"101f51f4-1f75-4602-9517-ca233df06f36"],

Cell[BoxData[
 RowBox[{
  RowBox[{"myFactorial", "[", 
   RowBox[{"n_", "?", "posIntQ"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"n", "\[Equal]", "1"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "1", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"n", "*", 
        RowBox[{"myFactorial", "[", 
         RowBox[{"n", "-", "1"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[2]:=",ExpressionUUID->"ceb1ab20-3ff9-44a7-891a-7bf26bb255ce"],

Cell[TextData[{
 "In this simple example, we define a predicate ",
 StyleBox["posIntQ", "Code"],
 " that tests input for being both an integer and positive. Then, the \
function ",
 StyleBox["myFactorial", "Code"],
 " uses the ",
 StyleBox[ButtonBox["PatternTest",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PatternTest"], "FunctionLink"],
 " (",
 StyleBox["?", "Code"],
 ") structure to declare that the function\[CloseCurlyQuote]s definition is \
only valid for those inputs that satisfy the requirements of the ",
 StyleBox["posIntQ", "Code"],
 " predicate. Consider the result of attempting to compute the factorial of \
-3:"
}], "Text",ExpressionUUID->"fa62c895-4df6-46e6-8f40-673e3ede9350"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myFactorial", "[", 
  RowBox[{"-", "3"}], "]"}]], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"b5b64dfa-8381-4c8b-9543-09daea973c3b"],

Cell[BoxData[
 RowBox[{"myFactorial", "[", 
  RowBox[{"-", "3"}], "]"}]], "Output",
 CellLabel->"Out[3]=",ExpressionUUID->"ada34373-df6f-45a1-9507-3cb581660283"]
}, Open  ]],

Cell[TextData[{
 "The function does not try to execute, but simply echoes the input, \
indicating that the function was not able to operate on that input. It is \
usually better for a function to not try to compute on invalid input. In the \
case of ",
 StyleBox["myFactorial", "Code"],
 ", omitting the predicate would result in an infinite recursion."
}], "Text",ExpressionUUID->"99791887-50ff-46ec-86f7-4fda52dc9371"],

Cell[TextData[{
 "We could also deal with the problem of potentially invalid arguments by \
checking the arguments within the body of the function. The ",
 StyleBox[ButtonBox["PatternTest",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PatternTest"], "FunctionLink"],
 " (",
 StyleBox["?", "Code"],
 ") approach, however, makes the requirements for the arguments much clearer \
and also serves to keep the actual work of the function separate from input \
validation."
}], "Text",ExpressionUUID->"e9f17835-e31f-4eac-a2e6-0d1a7152f863"],

Cell[TextData[{
 "As mentioned, we are going to first represent relations as lists of ordered \
pairs. We will define two predicates. First, an ordered pair predicate that \
we call ",
 StyleBox["pairQ", "Code"],
 ". Second, the relation type, which will be called ",
 StyleBox["relationQ", "Code"],
 ", will be defined to be a list of pairs. We define the pair predicate as \
follows:"
}], "Text",ExpressionUUID->"940aac1e-b493-4b51-b111-ad2aab85cf6b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"pairQ", "[", 
    RowBox[{"{", 
     RowBox[{"_", ",", "_"}], "}"}], "]"}], ":=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pairQ", "[", "___", "]"}], ":=", "False"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[4]:=",ExpressionUUID->"9ba69cac-c64c-4dea-8735-5fe2048e5cef"],

Cell[TextData[{
 "The first line of the definition says what a pair is. If ",
 StyleBox["pairQ", "Code"],
 " is passed an argument that is a list containing two elements, then it \
returns ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 ". Those elements can be anything at all, including lists and other \
structures, which allows us to define relations among complex structures. The \
second line of the definition says that if ",
 StyleBox["pairQ", "Code"],
 " is passed any argument at all, or no argument, it should produce ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 ". The ",
 StyleBox[ButtonBox["BlankNullSequence",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BlankNullSequence"], "FunctionLink"],
 " (",
 StyleBox["___", "Code"],
 "), formed from three underscores, matches any expression, comma-separated \
sequence of expressions, or no expression at all. This is different from ",
 StyleBox[ButtonBox["BlankSequence",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BlankSequence"], "FunctionLink"],
 " (",
 StyleBox["__", "Code"],
 "), two underscores, which cannot match an empty argument. "
}], "Text",ExpressionUUID->"77e2299c-d3e2-4dc4-a839-e02172c5bf67"],

Cell[TextData[{
 "You might think that the second definition overwrites the first, since it \
is more general. In fact, in the Wolfram Language, both definitions remain \
valid. When applied to input, the more specific definition is attempted \
first, and the first definition that can match the input is applied. Thus, if \
you give ",
 StyleBox["pairQ", "Code"],
 " an argument that is in fact a pair, the argument will match the pattern of \
the first definition and return ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"3b9f4b23-7a4e-4da6-ae08-7d385916ec62"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pairQ", "[", 
  RowBox[{"{", 
   RowBox[{"5", ",", "\"\<b\>\""}], "}"}], "]"}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"539123af-3fa4-41ab-9f88-aa6915874b80"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[6]=",ExpressionUUID->"c1db0b1c-344b-49f5-9923-8cc761ea286a"]
}, Open  ]],

Cell[TextData[{
 "However, for any argument that does not match that pattern, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will go to the second definition, which matches anything, and output ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"181955db-199b-4297-853d-183798ce41c8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pairQ", "[", "5", "]"}]], "Input",
 CellLabel->"In[7]:=",ExpressionUUID->"dde9ebbf-82ed-4316-a133-d0daa4883217"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[7]=",ExpressionUUID->"2ce91cb5-cf64-4d32-a5de-696d2c1eed46"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pairQ", "[", 
  RowBox[{"{", 
   RowBox[{"5", ",", "6", ",", "7"}], "}"}], "]"}]], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"4a3bb3ed-1fa5-45c4-a7ea-6ad9b7705720"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[8]=",ExpressionUUID->"e6bc936d-775b-41e4-8dd0-21de54306606"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pairQ", "[", 
  RowBox[{"2", ",", "3"}], "]"}]], "Input",
 CellLabel->"In[9]:=",ExpressionUUID->"0e1c86ae-b413-4332-9e56-961fdd424f0f"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[9]=",ExpressionUUID->"045eac25-91ae-4a6e-9454-25d0dfc70be1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pairQ", "[", "]"}]], "Input",
 CellLabel->"In[10]:=",ExpressionUUID->"bfb3b999-fcfb-4880-bc15-7235447072ca"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[10]=",ExpressionUUID->"9d7f035d-44b8-478b-bb3f-f6b13d7f8b82"]
}, Open  ]],

Cell[TextData[{
 "With ",
 StyleBox["pairQ", "Code"],
 " in place, we define ",
 StyleBox["relationQ", "Code"],
 "."
}], "Text",ExpressionUUID->"ea8428ae-0e38-4a1f-aa35-19e073bc1b17"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"relationQ", "[", 
    RowBox[{"{", 
     RowBox[{"___", "?", "pairQ"}], "}"}], "]"}], ":=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"relationQ", "[", "___", "]"}], ":=", "False"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[11]:=",ExpressionUUID->"bd14b7c1-644b-48ba-8465-5d461227f36f"],

Cell[TextData[{
 "In this case, the first line insists that a relation must be a list \
containing a ",
 StyleBox[ButtonBox["BlankNullSequence",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BlankNullSequence"], "FunctionLink"],
 " (",
 StyleBox["___", "Code"],
 "), that is, a comma-separated sequence of expressions, each one of which \
satisfies ",
 StyleBox["pairQ", "Code"],
 ". In other words, a (binary) relation is a set of ordered pairs."
}], "Text",ExpressionUUID->"2b2b5105-7247-4bd9-9284-2cac53da6eb8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Creating Relations", "Subsection",
 CellTags->"Section1b",ExpressionUUID->"ff4d4283-0420-42be-8ff3-a07ac618b91c"],

Cell["\<\
Now that we have established the relation predicate, we will create an actual \
relation.\
\>", "Text",ExpressionUUID->"ff16af74-0b28-4f8b-b1b5-4281f763a50f"],

Cell[CellGroupData[{

Cell["The Divides Relation", "Subsubsection",ExpressionUUID->"978e1417-30cd-4e8c-956c-76cab68a9566"],

Cell[TextData[{
 "Example 4 in Section 9.1 describes the \[OpenCurlyDoubleQuote]divides \
relation,\[CloseCurlyDoubleQuote] that is, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"R", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"a", ",", "b"}], ")"}], "|", 
      RowBox[{"a", " ", "divides", " ", "b"}]}], "}"}]}], TraditionalForm]],
  ExpressionUUID->"5822464f-c999-42bd-8502-162904b4b858"],
 ". We will write a function to construct this relation. The function will \
consider every possible ordered pair of elements and will include them in the \
relation if they satisfy the condition that ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "b4ae3e32-cf24-42c3-9a1c-648c8e44150d"],
 " is divisible by ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "11f0a347-0be3-463c-bde7-cab998194aca"],
 ", using the ",
 StyleBox[ButtonBox["Divisible",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Divisible"], "FunctionLink"],
 " function."
}], "Text",ExpressionUUID->"6f0de316-3cfa-4b51-984e-a02054c7fdbf"],

Cell[TextData[{
 "We use the ",
 StyleBox[ButtonBox["Tuples",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Tuples"], "FunctionLink"],
 " function to generate all possible pairs of a list of elements. It takes \
two arguments: the list of elements is the first argument, and 2 will be the \
second argument to indicate that we desire pairs of elements. For example, \
the following creates all pairs of elements from ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], TraditionalForm]],
  ExpressionUUID->"236ae096-5348-424a-8671-1bc518883ba0"],
 "."
}], "Text",ExpressionUUID->"9df5bfdc-bea1-43ef-8288-723b6a514e23"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tuples", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", "2"}], "]"}]], "Input",
 CellLabel->"In[13]:=",ExpressionUUID->"016f2298-1fda-43be-a5fa-fb47af0cb15f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[13]=",ExpressionUUID->"4c20d436-ab79-4a68-8113-b3bbf8810e4c"]
}, Open  ]],

Cell[TextData[{
 "To the output of ",
 StyleBox[ButtonBox["Tuples",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Tuples"], "FunctionLink"],
 ", we apply ",
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"], "FunctionLink"],
 " to obtain the sublist of elements that satisfy the divisibility condition. \
",
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"], "FunctionLink"],
 " requires two arguments. The first is the list of elements to select from. \
The second is a function name or a pure ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " (",
 StyleBox["&", "Code"],
 ") that returns ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 " for the desired elements. We will use a pure ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " (",
 StyleBox["&", "Code"],
 ") to apply the ",
 StyleBox[ButtonBox["Divisible",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Divisible"], "FunctionLink"],
 " function to the arguments in reverse order."
}], "Text",ExpressionUUID->"2a57bf10-7c50-4f3e-81e0-b5cbe54823b2"],

Cell[TextData[{
 "The ",
 StyleBox["dividesRelation", "Code"],
 " function below uses these ideas. Its argument is a list of integers, and \
it produces the relation."
}], "Text",ExpressionUUID->"e7e2c409-1f29-4ed3-8260-f56d94b186f4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dividesRelation", "[", 
   RowBox[{"A", ":", 
    RowBox[{"{", "__Integer", "}"}]}], "]"}], ":=", 
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"Tuples", "[", 
     RowBox[{"A", ",", "2"}], "]"}], ",", 
    RowBox[{
     RowBox[{"Divisible", "[", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], ",", 
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[14]:=",ExpressionUUID->"613b7da0-ea1f-4bc9-be7c-691df03efe9b"],

Cell["\<\
We use the function to construct the divides relation on the integers 1 \
through 4.\
\>", "Text",ExpressionUUID->"1712bdeb-1a66-4439-8f0d-5c1a5d2b6898"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dividesRelation", "[", 
  RowBox[{"Range", "[", "4", "]"}], "]"}]], "Input",
 CellLabel->"In[15]:=",ExpressionUUID->"2046d16e-7064-48ec-8909-3b63b0696c10"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[15]=",ExpressionUUID->"059dd4b5-4c15-420f-bf36-8930fa75de62"]
}, Open  ]],

Cell[TextData[{
 "We can check that this function has produced an expression that satisfies \
",
 StyleBox["relationQ", "Code"],
 "."
}], "Text",ExpressionUUID->"7412970e-757c-4c97-8d93-bc7d4de9c671"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"relationQ", "[", "%", "]"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"6ca5477d-9be0-4f75-91fc-0c8525f5cf93"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[16]=",ExpressionUUID->"dcfae663-3b6d-476b-81ec-97dc3fcdec29"]
}, Open  ]],

Cell[TextData[{
 "For convenience, we can overload the ",
 StyleBox["dividesRelation", "Code"],
 " symbol to also accept a single positive integer ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "0d27a7fd-8e9b-4522-8e04-8c2c8976c6df"],
 " as the argument and construct the \[OpenCurlyDoubleQuote]divides relation\
\[CloseCurlyDoubleQuote] on ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", "n"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"054e53c5-98b0-4d29-b0d5-1a2964ffe602"],
 "."
}], "Text",ExpressionUUID->"b016d24d-1b2e-448c-a58b-15f208568324"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dividesRelation", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"Tuples", "[", 
     RowBox[{
      RowBox[{"Range", "[", "n", "]"}], ",", "2"}], "]"}], ",", 
    RowBox[{
     RowBox[{"Divisible", "[", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], ",", 
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[17]:=",ExpressionUUID->"fc48dc5b-acf5-427f-ba72-ff3dfe7bb7e1"],

Cell["For example:", "Text",ExpressionUUID->"ec6c6c30-57a6-4056-a1d6-f102e9101f44"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"div6", "=", 
  RowBox[{"dividesRelation", "[", "6", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[18]:=",ExpressionUUID->"e46c5315-f10f-4f17-8461-1047eb79ab60"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "6"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[18]=",ExpressionUUID->"720f819f-de48-4ca9-833b-aeaae1f18ade"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Inverse of a Relation", "Subsubsection",ExpressionUUID->"9f1cff5a-6edb-4a43-8dfd-85a4019beb3c"],

Cell["\<\
Now that we have seen an example of a function that creates a relation, we \
look at a simple example of a function that manipulates a relation.\
\>", "Text",ExpressionUUID->"46810674-a6bc-497c-b8d5-94889023bac5"],

Cell[TextData[{
 "For any relation ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "2dbabd61-7019-4158-9118-7601e41c31d5"],
 ", its inverse relation, denoted ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["R", 
    RowBox[{"-", "1"}]], TraditionalForm]],ExpressionUUID->
  "b5d04a25-b0be-422d-a5d1-6b1a3a97d683"],
 " is defined by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["R", 
     RowBox[{"-", "1"}]], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"b", ",", "a"}], ")"}], "|", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"a", ",", "b"}], ")"}], "\[Element]", "R"}]}], "}"}]}], 
   TraditionalForm]],ExpressionUUID->"0f9b4fe9-c160-43b8-8399-0325f158892d"],
 ". The following function computes the inverse of a relation."
}], "Text",ExpressionUUID->"7ea35bc6-7469-4005-a26d-944e46c8348b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"inverseRelation", "[", 
   RowBox[{"R_", "?", "relationQ"}], "]"}], ":=", 
  RowBox[{"Reverse", "[", 
   RowBox[{"R", ",", "2"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[19]:=",ExpressionUUID->"5e6253a8-4632-4788-a5eb-f85e62ed834c"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Reverse",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reverse"], "FunctionLink"],
 " function is used to reverse the elements of a list. Given a list as a sole \
argument, ",
 StyleBox[ButtonBox["Reverse",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reverse"], "FunctionLink"],
 " simply inverts the order."
}], "Text",ExpressionUUID->"16fe25b6-2d7e-40e9-bf9b-cffd826e1b18"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reverse", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"34e15c7c-872f-4195-80f5-ccc8b411e838"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "2", ",", "1"}], "}"}]], "Output",
 CellLabel->"Out[20]=",ExpressionUUID->"6324dce0-0a8e-4e11-848d-856b1aa9b4e7"]
}, Open  ]],

Cell[TextData[{
 StyleBox[ButtonBox["Reverse",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reverse"], "FunctionLink"],
 " accepts a second optional argument to specify a level. In this case, we \
use 2 to indicate that we want ",
 StyleBox[ButtonBox["Reverse",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reverse"], "FunctionLink"],
 " to change the order of the sublists of the relation, not the order of the \
elements of ",
 StyleBox["R", "Code"],
 " itself."
}], "Text",ExpressionUUID->"a92abd1c-1012-4c59-8ba1-c26447c5af05"],

Cell[TextData[{
 "Since we have defined the \[OpenCurlyDoubleQuote]divides\
\[CloseCurlyDoubleQuote] relation, we can use the ",
 StyleBox["inverseRelation", "Code"],
 " function to create the \[OpenCurlyDoubleQuote]multiple of\
\[CloseCurlyDoubleQuote] relation."
}], "Text",ExpressionUUID->"cb6c5a2c-86ad-4b5d-998f-78c8df74d82a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mul6", "=", 
  RowBox[{"inverseRelation", "[", "div6", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[21]:=",ExpressionUUID->"a6c17f8b-9469-4d97-ac2f-dfe5f801b189"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "6"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[21]=",ExpressionUUID->"2a64194a-65d4-432f-aa05-909877d66823"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Properties of Relations", "Subsection",
 CellTags->"Section1c",ExpressionUUID->"b0fd40d2-e4a4-4f2e-b8a0-da6dc7f620c1"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can be used to determine if a relation on a set has a particular property, \
such as reflexivity, symmetry, antisymmetry, or transitivity. This can be \
accomplished by creating functions with the Wolfram Language that take as \
input the given relation, examine the elements of the relation, and return ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 " or ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 " based on whether the relation has the property or not."
}], "Text",ExpressionUUID->"cbb27fae-d144-4368-ad6d-5aef836a0dc6"],

Cell[TextData[{
 "Before writing functions to test for properties of relations, it will be \
convenient to have a routine that extracts the domain of a given relation on \
a set. This function works by applying ",
 StyleBox[ButtonBox["Flatten",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Flatten"], "FunctionLink"],
 " to the relation. Note that it may be the case that the objects in our \
relation are themselves lists, for example, the subset relation. For this \
reason, we give ",
 StyleBox[ButtonBox["Flatten",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Flatten"], "FunctionLink"],
 " the second argument 1, indicating that it should only flatten the list \
down to the first level. This way, if the pairs in the relation are elements, \
the pairs will be preserved, as shown below."
}], "Text",ExpressionUUID->"b73e40a4-aac6-4f6c-bc17-91b7c9c902f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"subsets2", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "1", "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "2", "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "2", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}]}], "}"}]}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[22]:=",ExpressionUUID->"4bcb97f4-0024-4ca3-8a1c-008a7f990db3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{"subsets2", ",", "1"}], "]"}]], "Input",
 CellLabel->"In[23]:=",ExpressionUUID->"ca6c9319-a9d7-49a3-a209-a74065102e85"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[23]=",ExpressionUUID->"39872771-b743-49a3-ae73-d0911f5eefa1"]
}, Open  ]],

Cell[TextData[{
 "After flattening, we apply ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " to remove duplicates and put the output in canonical order. "
}], "Text",ExpressionUUID->"47a3b4dd-1d4d-4ce1-8d43-448ef024ade7"],

Cell["\<\
Note that, strictly speaking, the result from this function need not equal \
the domain of the relation, since there may exist elements in the domain that \
are not related to any object in the domain. It might be better to call this \
the \[OpenCurlyDoubleQuote]effective domain\[CloseCurlyDoubleQuote] of the \
relation. Also note that this function presumes that the relation is a \
relation on a set, as distinguished from a relation from one set to a \
different set.\
\>", "Text",ExpressionUUID->"460e9140-3fa2-4ac0-8aa5-8b19f16eb80a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findDomain", "[", 
   RowBox[{"R_", "?", "relationQ"}], "]"}], ":=", 
  RowBox[{"Union", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{"R", ",", "1"}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[24]:=",ExpressionUUID->"708858d1-633f-4268-83b1-76f9b9097138"],

Cell["\<\
Observe that this gives the expected output for both the \
\[OpenCurlyDoubleQuote]divides\[CloseCurlyDoubleQuote] relation and the \
subsets relation.\
\>", "Text",ExpressionUUID->"e572aa29-d48d-44a4-98a2-cae2446e21c8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findDomain", "[", "div6", "]"}]], "Input",
 CellLabel->"In[25]:=",ExpressionUUID->"1858b69b-9c55-4f80-8ba6-4ca55325b47b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
  "}"}]], "Output",
 CellLabel->"Out[25]=",ExpressionUUID->"866e6c74-fe57-4c15-bc1a-491ef1ab1e04"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findDomain", "[", "subsets2", "]"}]], "Input",
 CellLabel->"In[26]:=",ExpressionUUID->"4c7dfe21-3359-4844-9b88-fe8b658d3869"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[26]=",ExpressionUUID->"50ab0fd6-fc73-45ed-be59-2cc72b3b32e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Reflexivity", "Subsubsection",ExpressionUUID->"a9af6283-372a-4eec-a52d-4380da4e9623"],

Cell[TextData[{
 "We are now ready to begin testing relations for various properties. The \
first property we consider is reflexivity. Remember that a relation ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "cc9fbf95-d0b7-4499-8a01-3478f0d188c5"],
 " is reflexive if ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"a", ",", "a"}], ")"}], "\[Element]", "R"}], TraditionalForm]],
  ExpressionUUID->"312aa4f7-a27b-4f8d-8d7f-a2cb1a2a8baa"],
 " for every ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "9299e34f-7bbc-4c3a-a57d-207b2123d802"],
 " in the domain."
}], "Text",ExpressionUUID->"008d9bf8-c001-4642-95a4-22ca1a2d54e4"],

Cell[TextData[{
 "To check to see if a relation is reflexive, we compute the domain of the \
relation and then check each element ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "3b50c9bb-9a25-4627-9e40-4afa7d6fe609"],
 " of the domain to see if ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"a", ",", "a"}], ")"}], TraditionalForm]],ExpressionUUID->
  "33d03ab0-1bad-4491-bd97-f347c4bf45ff"],
 " is in the relation. If the function finds an element of the domain with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"a", ",", "a"}], ")"}], "\[NotElement]", "R"}], 
   TraditionalForm]],ExpressionUUID->"8b56ec3f-bb15-4608-9456-4ce9c568861e"],
 ", then it throws ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 " immediately. If the function checks all of the members of the domain with \
no failures, then it evaluates to ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"1ec2c866-1d01-4b3e-9ff0-9fd1623e4c82"],

Cell[BoxData[
 RowBox[{
  RowBox[{"reflexiveQ", "[", 
   RowBox[{"R_", "?", "relationQ"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "domain"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"domain", "=", 
      RowBox[{"findDomain", "[", "R", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"MemberQ", "[", 
             RowBox[{"R", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "a"}], "}"}]}], "]"}]}], ",", 
           RowBox[{"Throw", "[", "False", "]"}]}], "]"}], 
         "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"a", ",", "domain"}], "}"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Throw", "[", "True", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[27]:=",ExpressionUUID->"6d88f40a-5ed2-4c9a-98b5-f9f89e0fb971"],

Cell[TextData[{
 "Recall that the ",
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Do"], "FunctionLink"],
 " function\[CloseCurlyQuote]s second argument, ",
 StyleBox["{a,domain}", "Code"],
 " specifies that the variable ",
 StyleBox["a", "Code"],
 " is to be assigned to every member of the list ",
 StyleBox["domain", "Code"],
 ". Also recall that ",
 StyleBox[ButtonBox["MemberQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MemberQ"], "FunctionLink"],
 " expects its first argument to be the list and the second argument to be \
the element being sought. "
}], "Text",ExpressionUUID->"3f7d1058-d839-4aca-9eb6-3f917e149c41"],

Cell["We can use this on the \[OpenCurlyDoubleQuote]divides\
\[CloseCurlyDoubleQuote] relation.", "Text",ExpressionUUID->"294ef7ed-babe-\
4d4c-a735-6c89b812d31c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reflexiveQ", "[", "div6", "]"}]], "Input",
 CellLabel->"In[28]:=",ExpressionUUID->"8718612f-8d84-4ae3-8e7b-a03d329e118a"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[28]=",ExpressionUUID->"36beb014-b40b-445a-a55a-a4e1c907c236"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Symmetry", "Subsubsection",ExpressionUUID->"6036b5d2-94c2-4fc8-bf6e-3690fe3d89c2"],

Cell[TextData[{
 "Next, we will examine the symmetric and antisymmetric properties. To \
determine whether a relation is symmetric, we simply use the definition. That \
is, we check, for every member ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"a", ",", "b"}], ")"}], "\[Element]", "R"}], TraditionalForm]],
  ExpressionUUID->"028b39a2-986e-446d-8443-c8acb918dd36"],
 ", whether ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"b", ",", "a"}], ")"}], TraditionalForm]],ExpressionUUID->
  "95d3a20e-ec2c-404f-8684-6b9dee8916b8"],
 " is also a member of the relation. If we discover a pair in the relation \
for which the reverse pair is not in the relation, then we know that the \
relation is not symmetric. Otherwise, it must be symmetric. This is the logic \
employed by the following function."
}], "Text",ExpressionUUID->"0677f4af-3bf5-40cd-b009-b028156b21cc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"symmetricQ", "[", 
   RowBox[{"R_", "?", "relationQ"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "u", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Catch", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"R", ",", 
             RowBox[{"Reverse", "[", "u", "]"}]}], "]"}]}], ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"u", ",", "R"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"Throw", "[", "True", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[29]:=",ExpressionUUID->"262cbf99-9e81-4e10-9d4c-c67c84d6d5c3"],

Cell["\<\
For example, we can see that the \[OpenCurlyDoubleQuote]divides\
\[CloseCurlyDoubleQuote] relation is not symmetric.\
\>", "Text",ExpressionUUID->"6d2d631c-1c9b-4f95-bec1-2b117157f0c5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"symmetricQ", "[", "div6", "]"}]], "Input",
 CellLabel->"In[30]:=",ExpressionUUID->"a8cba9a0-d9ec-4a97-9253-6634b4fe4bf0"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[30]=",ExpressionUUID->"c2a64c93-2865-4d18-88ca-59a62ace4c4c"]
}, Open  ]],

Cell["\<\
The union of \[OpenCurlyDoubleQuote]divides\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]multiple of\[CloseCurlyDoubleQuote] is symmetric, \
however.\
\>", "Text",ExpressionUUID->"758b962c-ef0d-4220-aca7-641976da2a7f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"divOrMul6", "=", 
  RowBox[{"Union", "[", 
   RowBox[{"div6", ",", "mul6"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[31]:=",ExpressionUUID->"bfb0fdf9-8a31-4598-ae3f-f7156dab1dfc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "6"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[31]=",ExpressionUUID->"02d13bba-df25-468c-8cf9-0a1d253a5dab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"symmetricQ", "[", "divOrMul6", "]"}]], "Input",
 CellLabel->"In[32]:=",ExpressionUUID->"e6d200d8-7ee8-46ea-a79d-430bb17b6881"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[32]=",ExpressionUUID->"8fe08e5c-460f-4131-93ac-54ceb116c317"]
}, Open  ]],

Cell[TextData[{
 "To determine whether a given relation ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "02c8e060-6d96-4353-b800-b32254ecefcd"],
 " is antisymmetric, we again use the definition. Remember that a relation is \
antisymmetric when it has the property that whenever a pair ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"a", ",", "b"}], ")"}], TraditionalForm]],ExpressionUUID->
  "c844fc4e-b7a5-4949-a9c6-13eb078ac6e9"],
 " and its reverse ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"b", ",", "a"}], ")"}], TraditionalForm]],ExpressionUUID->
  "097cff30-3f2e-429e-888a-f37df65838d0"],
 " both belong to ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "93fb730e-a016-404e-ab84-4f1d1dc6674d"],
 ", then it must be that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "=", "b"}], TraditionalForm]],ExpressionUUID->
  "09b97b9c-9c0a-4a37-912f-8a1fa3ea87b1"],
 ". To check this, we simply loop over all members ",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],ExpressionUUID->
  "ba76f0d0-d485-4c3b-9c86-3f077adf548e"],
 " of ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "da6c6bff-5d4f-4614-9c6c-f48fd58d54a8"],
 " and see if the opposite pair belongs to ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "0ab20825-7b0f-449d-831e-ab0422a1ad85"],
 " and whether the members of the pair are different."
}], "Text",ExpressionUUID->"49981e08-fb16-48ab-aa2a-4ec08a4cfc8b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"antisymmetricQ", "[", 
   RowBox[{"R_", "?", "relationQ"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "u", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Catch", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"u", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "\[NotEqual]", 
            RowBox[{"u", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "&&", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"R", ",", 
             RowBox[{"Reverse", "[", "u", "]"}]}], "]"}]}], ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"u", ",", "R"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"Throw", "[", "True", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[33]:=",ExpressionUUID->"5257905d-8272-40ab-bd33-009def7986c0"],

Cell["\<\
We now use this function to check if the \[OpenCurlyDoubleQuote]divides\
\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]multiple of\
\[CloseCurlyDoubleQuote] relations defined earlier are antisymmetric.\
\>", "Text",ExpressionUUID->"688ca155-0eb7-48b5-b23f-4607581b555f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"antisymmetricQ", "[", "div6", "]"}]], "Input",
 CellLabel->"In[34]:=",ExpressionUUID->"f0e2a249-2e07-4dd9-ab5b-a71bd0b5c664"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[34]=",ExpressionUUID->"4655d71c-43e9-415b-8dd8-a7727a11ab64"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"antisymmetricQ", "[", "mul6", "]"}]], "Input",
 CellLabel->"In[35]:=",ExpressionUUID->"37ebb3e6-86b7-42e6-ae89-5522deb47f2c"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[35]=",ExpressionUUID->"2bb68554-d7fc-4d9e-9d7c-fd2cbf7cd5b1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Transitivity", "Subsubsection",ExpressionUUID->"4d8954f2-d793-4d7e-901a-c5072427e54c"],

Cell[TextData[{
 "The transitive property is the most difficult to check. Recall the \
definition of transitive relations: a relation ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "c895b2fd-eeaf-40f1-8ed7-a65d07108d79"],
 " is transitive if, whenever ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"a", ",", "b"}], ")"}], TraditionalForm]],ExpressionUUID->
  "c034fa0d-24a9-4066-aee0-86b1399a95ac"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"b", ",", "c"}], ")"}], TraditionalForm]],ExpressionUUID->
  "c1255bc7-948b-4138-8c13-088b996e3832"],
 " are in ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "aa5b8f65-2f03-4287-9db8-13cfcebf2706"],
 ", then ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"a", ",", "c"}], ")"}], TraditionalForm]],ExpressionUUID->
  "70e08a79-c221-41f3-8c6e-ac22a7c3790b"],
 " must be as well."
}], "Text",ExpressionUUID->"c28ec026-ef0f-450d-b1ba-3176f86ccdb9"],

Cell[TextData[{
 "To check transitivity, we will consider all possible ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "6375989f-2e48-486f-bb0b-372c9a496203"],
 ", ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "4336c904-32a2-4423-a47d-5a387639c228"],
 ", and ",
 Cell[BoxData[
  FormBox["c", TraditionalForm]],ExpressionUUID->
  "77f8ecad-a9fe-4cbc-8ec9-e1dd1b3953fc"],
 " in the domain of ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "1aded856-6787-407f-a69c-146e8c909891"],
 ". Then, if ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"a", ",", "b"}], ")"}], "\[Element]", "R"}], TraditionalForm]],
  ExpressionUUID->"fc53c93d-0241-4933-a7df-b45ee45cc8bf"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"b", ",", "c"}], ")"}], "\[Element]", "R"}], TraditionalForm]],
  ExpressionUUID->"e34b9d0b-b46c-4ade-a2ec-fb44ccfe46e4"],
 ", and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"a", ",", "c"}], ")"}], "\[NotElement]", "R"}], 
   TraditionalForm]],ExpressionUUID->"629aa442-062a-42d6-9e9c-d4897a99944a"],
 ", we know that the relation is not transitive. If there is no such triple \
",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", ",", "b", ",", "c"}], TraditionalForm]],ExpressionUUID->
  "63c5c49a-c165-442c-86c9-12c2bec114ba"],
 " to contradict transitivity, then we conclude that the relation is \
transitive."
}], "Text",ExpressionUUID->"4b4c6353-945a-4485-bf1e-956df55200b4"],

Cell["Here is the function.", "Text",ExpressionUUID->"f1418b4e-f637-45e2-b262-0f1185919dce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"transitiveQ", "[", 
   RowBox[{"R_", "?", "relationQ"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"domain", ",", "a", ",", "b", ",", "c"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"domain", "=", 
      RowBox[{"findDomain", "[", "R", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{"R", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b"}], "}"}]}], "]"}], "&&", 
            RowBox[{"MemberQ", "[", 
             RowBox[{"R", ",", 
              RowBox[{"{", 
               RowBox[{"b", ",", "c"}], "}"}]}], "]"}], "&&", 
            RowBox[{"!", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"R", ",", 
               RowBox[{"{", 
                RowBox[{"a", ",", "c"}], "}"}]}], "]"}]}]}], ",", 
           RowBox[{"Throw", "[", "False", "]"}]}], "]"}], 
         "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"a", ",", "domain"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"b", ",", "domain"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"c", ",", "domain"}], "}"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Throw", "[", "True", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[36]:=",ExpressionUUID->"3b9c71a0-54de-4e7c-beef-4fdd3b87e527"],

Cell[TextData[{
 "We see that the \[OpenCurlyDoubleQuote]divisible\[CloseCurlyDoubleQuote] \
relation is transitive. However, we can modify it to fail to be transitive by \
removing the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"1", ",", "6"}], ")"}], TraditionalForm]],ExpressionUUID->
  "3f54392b-03f5-446e-ba8b-79b4052974db"],
 " pair, since ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"1", ",", "2"}], ")"}], TraditionalForm]],ExpressionUUID->
  "ae75ef74-e9e3-4776-a836-7e741d1d966e"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"2", ",", "6"}], ")"}], TraditionalForm]],ExpressionUUID->
  "84375341-018c-4338-a93b-aa3912578943"],
 " are in ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "b6c0cf2c-91fe-456a-829d-004c363aa391"],
 "."
}], "Text",ExpressionUUID->"18b37236-f92a-447b-887f-348ba8bc1a07"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"transitiveQ", "[", "div6", "]"}]], "Input",
 CellLabel->"In[37]:=",ExpressionUUID->"0c12e45f-6f77-4bbe-8e9d-9f1a520ffa5a"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[37]=",ExpressionUUID->"2c942a64-9120-4f66-a75e-daf6f164a53b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"r2", "=", 
  RowBox[{"Complement", "[", 
   RowBox[{"div6", ",", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"1", ",", "6"}], "}"}], "}"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[38]:=",ExpressionUUID->"f3ccf05c-eb7e-4d8d-adda-e822021d6b48"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "6"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[38]=",ExpressionUUID->"27713d90-b758-4fd6-85e8-2130d58384ad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"transitiveQ", "[", "r2", "]"}]], "Input",
 CellLabel->"In[39]:=",ExpressionUUID->"bbe4ad70-d2dc-4853-b34c-a837488c5cfc"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[39]=",ExpressionUUID->"4cb7454c-0abd-499e-974e-8b2697e9a2fb"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "9.2 ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "d0f2aaf2-d52a-4d98-8e55-7e4d2b385dbc"],
 "-",
 StyleBox["ary",
  IgnoreSpellCheck->True],
 " Relations and Their Applications"
}], "Section",
 CellTags->"Section2",ExpressionUUID->"7100191d-a83f-40c0-9da0-f1992f5b9fcf"],

Cell[TextData[{
 "Using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", we can construct an ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "d26bff57-33e6-4f42-8e16-e741cdedda65"],
 "-",
 StyleBox["ary",
  IgnoreSpellCheck->True],
 " relation where ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "6a0d3b1e-2447-4edd-9c23-7dfaf47ba315"],
 " is a positive integer. As in the previous section, we will begin by \
defining predicates both for the elements of the relation (",
 StyleBox["tupleQ", "Code"],
 ") and for the ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "fcb69d4e-b8d0-4e27-8822-c0e0f211d17e"],
 "-",
 StyleBox["ary",
  IgnoreSpellCheck->True],
 " relation (",
 StyleBox["nrelationQ", "Code"],
 "). The only difference here, as compared to the predicates we defined in \
the previous section, is that we do not know the length of the list that \
makes up a tuple. "
}], "Text",ExpressionUUID->"8dd209fe-68e3-4539-ac12-6b13d3fd3c30"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"tupleQ", "[", "_List", "]"}], ":=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tupleQ", "[", "___", "]"}], ":=", "False"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[40]:=",ExpressionUUID->"40b0066c-ba9f-435a-b0e4-e171e8e2e0b2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"nrelationQ", "[", 
    RowBox[{"{", 
     RowBox[{"__", "?", "tupleQ"}], "}"}], "]"}], ":=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nrelationQ", "[", "___", "]"}], ":=", "False"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[42]:=",ExpressionUUID->"d671f3c2-5d79-441b-9fa6-074c25e8de47"],

Cell[TextData[{
 "Consider the following 4-",
 StyleBox["ary",
  IgnoreSpellCheck->True],
 " relation that represents student records. "
}], "Text",ExpressionUUID->"a385a458-3148-4c58-b316-70a9912d17d1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"r3", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<Adams\>\"", ",", "9012345", ",", "\"\<Politics\>\"", ",", "2.98"}],
       "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Woo\>\"", ",", "9100055", ",", "\"\<Film Studies\>\"", ",", 
       "4.99"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Warshall\>\"", ",", "9354321", ",", "\"\<Mathematics\>\"", ",", 
       "3.66"}], "}"}]}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[44]:=",ExpressionUUID->"3a06d3e9-0761-436f-8aea-099714f5b667"],

Cell[TextData[{
 "The first field represents the name of the student, the second field is the \
student ID number, the third field is the students\[CloseCurlyQuote] home \
department, and the last field stores the student\[CloseCurlyQuote]s grade \
point average. Note that this relation satisfies ",
 StyleBox["nrelationQ", "Code"],
 "."
}], "Text",ExpressionUUID->"1701be0d-e0b4-4729-9624-9c1e696a5673"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nrelationQ", "[", "r3", "]"}]], "Input",
 CellLabel->"In[45]:=",ExpressionUUID->"8834cb16-5d4c-49a4-9e31-d6dff15fb3d9"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[45]=",ExpressionUUID->"6564373b-ba50-4065-8441-100bd15d4bc2"]
}, Open  ]],

Cell[TextData[{
 "While we created a very generic ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "727e0ee8-43c4-4c97-8413-59c17b4d3ac6"],
 "-",
 StyleBox["ary",
  IgnoreSpellCheck->True],
 " relation predicate, you can also create more specific predicates for \
particular situations. For instance, the tuples in the relation above will \
always consist of a string, integer, string, and a floating point number. We \
make the following predicate specifically for that kind of relation."
}], "Text",ExpressionUUID->"9b106069-352c-4787-a46c-b561324d4297"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"studentRecordQ", "[", 
    RowBox[{"{", 
     RowBox[{"_String", ",", "_Integer", ",", "_String", ",", "_Real"}], 
     "}"}], "]"}], ":=", "True"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"studentRecordQ", "[", "___", "]"}], ":=", "False"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[46]:=",ExpressionUUID->"10561bbc-0011-42ea-afc0-c05396bfe6ea"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"studentRelationQ", "[", 
    RowBox[{"{", 
     RowBox[{"__", "?", "studentRecordQ"}], "}"}], "]"}], ":=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"studentRelationQ", "[", "___", "]"}], ":=", "False"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[48]:=",ExpressionUUID->"0365a8cb-7435-4dc4-8a11-c6aeb8f671de"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"studentRelationQ", "[", "r3", "]"}]], "Input",
 CellLabel->"In[50]:=",ExpressionUUID->"10754b9c-9ac8-4c72-ac57-785e92fe857e"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[50]=",ExpressionUUID->"cec2ad41-30a5-4fca-96d1-ce458bb87ec4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Operations on ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "1428f650-df57-45d9-8d91-2f2ba3341da7"],
 "-",
 StyleBox["ary",
  IgnoreSpellCheck->True],
 " Relations"
}], "Subsection",
 CellTags->"Section2a",ExpressionUUID->"511d05e9-9b8d-44f6-90ec-98244b968509"],

Cell[TextData[{
 "Now, we will create functions that act on ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "62ffd121-1236-43fe-9cc7-c2105d5256bc"],
 "-",
 StyleBox["ary",
  IgnoreSpellCheck->True],
 " relations to compute projections and the join of relations."
}], "Text",ExpressionUUID->"5bb30d10-a4d9-4023-9e67-7a0b65a39539"],

Cell[CellGroupData[{

Cell["Projection", "Subsubsection",ExpressionUUID->"341c04ba-ab0d-43f1-acaa-f163ae2d200b"],

Cell[TextData[{
 "We will construct a function for computing a projection of a relation. The \
function takes as input an expression satisfying ",
 StyleBox["nrelationQ", "Code"],
 " along with a list of integers representing the indices of the fields that \
are to remain. The output will be another ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "873cd0c5-0922-44f0-8f1d-c86b9d6ef3bc"],
 "-",
 StyleBox["ary",
  IgnoreSpellCheck->True],
 " relation."
}], "Text",ExpressionUUID->"33e90564-8573-4b60-879b-314010ec4dd7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"projectRelation", "[", 
   RowBox[{
    RowBox[{"R_", "?", "nrelationQ"}], ",", 
    RowBox[{"P", ":", 
     RowBox[{"{", "__Integer", "}"}]}]}], "]"}], ":=", 
  RowBox[{"R", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "P"}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[51]:=",ExpressionUUID->"8dc2addf-d35f-4b9c-a5ff-ad9a0512c2c3"],

Cell[TextData[{
 "The expression ",
 StyleBox["R[[All,P]]", "Code"],
 " returns the list formed by taking every element of ",
 StyleBox["R", "Code"],
 " and extracting the sublists defined by the indices in the list ",
 StyleBox["P", "Code"],
 "."
}], "Text",ExpressionUUID->"54d30f7d-7ed2-4625-97f7-3a04d0e353ca"],

Cell["\<\
We can use this function with the relation we created earlier. \
\>", "Text",ExpressionUUID->"9618783a-8c04-4a54-b1c6-45d3e82caf61"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"projectRelation", "[", 
  RowBox[{"r3", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[52]:=",ExpressionUUID->"5d9ee069-dca5-475e-887d-31fc84dc0998"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"9012345", ",", "2.98`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9100055", ",", "4.99`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9354321", ",", "3.66`"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[52]=",ExpressionUUID->"426096c4-96d9-4ad7-83b0-ae77640118b9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"projectRelation", "[", 
  RowBox[{"r3", ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[53]:=",ExpressionUUID->"eaf87bc4-eb49-447e-9824-d312ffb4198a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"Politics\"\>", ",", "2.98`", ",", "\<\"Adams\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Film Studies\"\>", ",", "4.99`", ",", "\<\"Woo\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Mathematics\"\>", ",", "3.66`", ",", "\<\"Warshall\"\>"}], 
    "}"}]}], "}"}]], "Output",
 CellLabel->"Out[53]=",ExpressionUUID->"7c7edaa7-ac29-43b7-8ae1-59baf664a216"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Join", "Subsubsection",ExpressionUUID->"194e17cb-b1d4-4585-a1a9-356d74df73bc"],

Cell["\<\
Now, consider joins of relations, as defined in the textbook in Section 9.2. \
The join operation has applications to databases when tables of information \
need to be combined in a meaningful manner.\
\>", "Text",ExpressionUUID->"15c3cb88-10fc-4dc1-affa-ee90378725f8"],

Cell["\<\
The join function that we will implement here follows the following outline:\
\>", "Text",ExpressionUUID->"9dc8cb5b-ad38-47e3-ba45-48b2d322a0c1"],

Cell[CellGroupData[{

Cell[TextData[{
 "Input two relations ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "861d03fc-bb10-47c2-a433-1d1bb37c80e1"],
 " and ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "bf5c3569-1d7a-4a31-9005-d8423bde27a2"],
 " and a positive integer ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "173d7984-d331-4c83-b0b1-62cf4cd94660"],
 ", representing the overlap between the relations."
}], "Item1Numbered",ExpressionUUID->"217a825e-94a9-4055-9abf-3d3fc7947516"],

Cell[TextData[{
 "Examine each element ",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],ExpressionUUID->
  "0f1df1cf-a72a-4380-bb6d-e0014878ef22"],
 " of ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "a9693120-f3d6-46fd-ad02-020145d36c07"],
 " and determine the last ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "ed631712-8401-43ce-a92f-a10bf86b5ac2"],
 " fields of ",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],ExpressionUUID->
  "04e3bcec-0f5c-4fbf-8be8-2ea92239cde3"],
 "."
}], "Item1Numbered",ExpressionUUID->"5cd31642-be53-4989-9456-91022d7d9cc5"],

Cell[TextData[{
 "Examine all elements ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "78289d28-fd58-4a26-b2ef-9ededf549ba6"],
 " of ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "fd495d58-7d9f-46f5-90db-ba3f222482a6"],
 " to determine if the first ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "3bb42dc1-fd5f-4363-8900-0fb01e2cda34"],
 " fields of ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "f1319823-e27b-4769-84cd-1d73f6e3eaad"],
 " match the last ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "8e5928bb-52ad-4820-b02b-4a2c214537b1"],
 " fields of ",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],ExpressionUUID->
  "8954ac77-50d5-443b-a344-dce040711f6b"],
 "."
}], "Item1Numbered",ExpressionUUID->"d065500d-0298-4b62-9fe7-ec5ee6fcb2db"],

Cell[TextData[{
 "Upon finding a match, we combine the elements and place the result in a \
relation ",
 Cell[BoxData[
  FormBox["T", TraditionalForm]],ExpressionUUID->
  "63818f80-8783-4e79-8bf3-13265549244c"],
 ", which is returned as the output of the function."
}], "Item1Numbered",ExpressionUUID->"d93e5d6f-875f-4973-ba3d-ca443a622ca3"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"joinRelation", "[", 
   RowBox[{
    RowBox[{"R_", "?", "nrelationQ"}], ",", 
    RowBox[{"S_", "?", "nrelationQ"}], ",", "p_Integer"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "overlapR", ",", "i", ",", "u", ",", "v", ",", "x", ",", "joinElement", 
      ",", 
      RowBox[{"T", "=", 
       RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"x", "=", 
         RowBox[{"u", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"-", "p"}], ";;", 
            RowBox[{"-", "1"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"v", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "p"}], "]"}], "]"}], "\[Equal]", "x"}], ",",
             "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"joinElement", "=", 
              RowBox[{"Join", "[", 
               RowBox[{"u", ",", 
                RowBox[{"v", "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{"p", "+", "1"}], ";;", 
                   RowBox[{"-", "1"}]}], "]"}], "]"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"T", ",", "joinElement"}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"v", ",", "S"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
       ",", 
       RowBox[{"{", 
        RowBox[{"u", ",", "R"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "T"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[54]:=",ExpressionUUID->"59fa9920-9e3e-4841-83ec-c61db5969e26"],

Cell[TextData[{
 "The ",
 StyleBox["joinRelation", "Code"],
 " function beings by initializing the return relation, ",
 StyleBox["T", "Code"],
 ", to the empty list. The outer ",
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Do"], "FunctionLink"],
 " loop assigns the variable ",
 StyleBox["u", "Code"],
 " to each tuple in the relation ",
 StyleBox["R", "Code"],
 ". It immediately assigns ",
 StyleBox["x", "Code"],
 " to the last ",
 StyleBox["p", "Code"],
 " elements of ",
 StyleBox["u", "Code"],
 ". This is the portion that is supposed to overlap with elements from the \
other relation. Note the use of the ",
 StyleBox[ButtonBox["Span",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Span"], "FunctionLink"],
 " (",
 StyleBox[";;", "Code"],
 ") operator. The span ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"-", "p"}], ";;", 
   RowBox[{"-", "1"}]}]], "myCode",ExpressionUUID->
  "5374ba91-26b0-4148-9473-22ea17070b3b"],
 " in the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") applied to ",
 StyleBox["u", "Code"],
 " refers to the span from ",
 StyleBox["-p", "Code"],
 " to ",
 StyleBox["-1", "Code"],
 ", that is, from the element ",
 StyleBox["p", "Code"],
 " from the end of the list ",
 StyleBox["u", "Code"],
 " to the last element of ",
 StyleBox["u", "Code"],
 "."
}], "Text",ExpressionUUID->"d35c56a2-ffed-434d-985f-801e2d095601"],

Cell[TextData[{
 "The inner ",
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Do"], "FunctionLink"],
 " loop assigns the variable ",
 StyleBox["v", "Code"],
 " to each tuple in the relation ",
 StyleBox["S", "Code"],
 ". The body of the loop is an ",
 StyleBox[ButtonBox["If",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/If"], "FunctionLink"],
 " statement that checks whether the first ",
 StyleBox["p", "Code"],
 " elements of ",
 StyleBox["v", "Code"],
 " agree with the last ",
 StyleBox["p", "Code"],
 " elements of ",
 StyleBox["u", "Code"],
 " (stored in ",
 StyleBox["x", "Code"],
 "). If that holds, that is, the two elements overlap, then ",
 StyleBox["joinElement", "Code"],
 " is created by applying the Wolfram Language ",
 StyleBox[ButtonBox["Join",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Join"], "FunctionLink"],
 " function to ",
 StyleBox["u", "Code"],
 " and the rest of ",
 StyleBox["v", "Code"],
 ". This new object is then added to the relation ",
 StyleBox["T", "Code"],
 ", which is the output of the function."
}], "Text",ExpressionUUID->"6d22e25a-192b-458f-ad57-f2bf9fca0d90"],

Cell[TextData[{
 "We apply the ",
 StyleBox["joinRelation", "Code"],
 " function to Example 11 of Section 9.2."
}], "Text",ExpressionUUID->"af79a156-6f5a-4f56-9bfa-f413cfdcd217"],

Cell[BoxData[
 RowBox[{
  RowBox[{"teachingAssignments", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Cruz\>\"", ",", "\"\<Zoology\>\"", ",", "335"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Cruz\>\"", ",", "\"\<Zoology\>\"", ",", "412"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Farber\>\"", ",", "\"\<Psychology\>\"", ",", "501"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Farber\>\"", ",", "\"\<Psychology\>\"", ",", "617"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Grammer\>\"", ",", "\"\<Physics\>\"", ",", "544"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Grammer\>\"", ",", "\"\<Physics\>\"", ",", "551"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Rosen\>\"", ",", "\"\<Computer Science\>\"", ",", "518"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Rosen\>\"", ",", "\"\<Mathematics\>\"", ",", "575"}], 
      "}"}]}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[55]:=",ExpressionUUID->"0e8b18af-f58e-4db7-9185-dd1752249692"],

Cell[BoxData[
 RowBox[{
  RowBox[{"classSchedule", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<Computer Science\>\"", ",", "518", ",", "\"\<N521\>\"", ",", 
       "\"\<2:00 P.M.\>\""}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Mathematics\>\"", ",", "575", ",", "\"\<N502\>\"", ",", 
       "\"\<3:00 P.M.\>\""}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Mathematics\>\"", ",", "611", ",", "\"\<N521\>\"", ",", 
       "\"\<4:00 P.M.\>\""}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Physics\>\"", ",", "544", ",", "\"\<B505\>\"", ",", 
       "\"\<4:00 P.M.\>\""}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Psychology\>\"", ",", "501", ",", "\"\<A100\>\"", ",", 
       "\"\<3:00 P.M.\>\""}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Psychology\>\"", ",", "617", ",", "\"\<A110\>\"", ",", 
       "\"\<11:00 A.M.\>\""}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Zoology\>\"", ",", "335", ",", "\"\<A100\>\"", ",", 
       "\"\<9:00 A.M.\>\""}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Zoology\>\"", ",", "412", ",", "\"\<A100\>\"", ",", 
       "\"\<8:00 A.M.\>\""}], "}"}]}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[56]:=",ExpressionUUID->"71402b43-f11d-4091-ae82-1f7b201e5b13"],

Cell[TextData[{
 "We apply ",
 StyleBox["joinRelation", "Code"],
 " and use ",
 StyleBox[ButtonBox["TableForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TableForm"], "FunctionLink"],
 " to make the output readable."
}], "Text",ExpressionUUID->"160adcc2-bffd-44ce-ada5-7d87836b1f50"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"joinRelation", "[", 
   RowBox[{"teachingAssignments", ",", "classSchedule", ",", "2"}], "]"}], "//",
   "TableForm"}]], "Input",
 CellLabel->"In[57]:=",ExpressionUUID->"309efd88-a199-48d2-be86-be13ed5969d1"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Cruz\"\>", "\<\"Zoology\"\>", 
     "335", "\<\"A100\"\>", "\<\"9:00 A.M.\"\>"},
    {"\<\"Cruz\"\>", "\<\"Zoology\"\>", 
     "412", "\<\"A100\"\>", "\<\"8:00 A.M.\"\>"},
    {"\<\"Farber\"\>", "\<\"Psychology\"\>", 
     "501", "\<\"A100\"\>", "\<\"3:00 P.M.\"\>"},
    {"\<\"Farber\"\>", "\<\"Psychology\"\>", 
     "617", "\<\"A110\"\>", "\<\"11:00 A.M.\"\>"},
    {"\<\"Grammer\"\>", "\<\"Physics\"\>", 
     "544", "\<\"B505\"\>", "\<\"4:00 P.M.\"\>"},
    {"\<\"Rosen\"\>", "\<\"Computer Science\"\>", 
     "518", "\<\"N521\"\>", "\<\"2:00 P.M.\"\>"},
    {"\<\"Rosen\"\>", "\<\"Mathematics\"\>", 
     "575", "\<\"N502\"\>", "\<\"3:00 P.M.\"\>"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[57]//TableForm=",ExpressionUUID->"ec9dcdfb-b90d-4e3a-8fa2-\
ae3a4fd7eb86"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Datasets", "Subsection",
 CellTags->"Section2b",ExpressionUUID->"1c9c62a7-7c7b-4ee9-ad8b-a3c0e735af88"],

Cell[TextData[{
 "The discussion above illustrates how one could implement ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "08600c0c-cac9-4f59-9228-b5cd81c0ad6e"],
 "-",
 StyleBox["ary",
  IgnoreSpellCheck->True],
 " relations using lists, one of the most basic data structures. However, \
with databases specifically in mind, the Wolfram Language ",
 StyleBox[ButtonBox["Dataset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dataset"], "FunctionLink"],
 " structure is much more powerful. On the surface, a ",
 StyleBox[ButtonBox["Dataset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dataset"], "FunctionLink"],
 " consists of nested ",
 StyleBox[ButtonBox["List",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/List"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 " objects. But wrapping those more basic structures inside a ",
 StyleBox[ButtonBox["Dataset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dataset"], "FunctionLink"],
 " provides access to sophisticated queries and operations."
}], "Text",ExpressionUUID->"c78de9f8-ca73-4a6a-ba8a-d0c1d9300370"],

Cell[TextData[{
 "We first described the ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 " structure in Section 2.2 of this manual in reference to fuzzy sets. In \
other languages, associations may be referred to as dictionaries, maps, or \
hash tables. An ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 " is comprised of a collection of key\[Dash]value pairs, with the keys being \
unique. You can enter an ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 " as a list of ",
 StyleBox[ButtonBox["Rule",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Rule"], "FunctionLink"],
 " (",
 StyleBox["->", "Code"],
 ") elements within the ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 " head or between the delimiters ",
 StyleBox["<|", "Code"],
 " and ",
 StyleBox["|>", "Code"],
 ". Be aware that the word association is used very differently in the \
textbook than it is in the Wolfram Language. Here, the word association will \
be used exclusively to refer to the data structure."
}], "Text",ExpressionUUID->"f75b5d7e-9b57-4c1b-a3dd-383eb7923201"],

Cell["\<\
Using the teaching assignments example from the text, we would implement each \
row of the table as an association, with the field names as the keys and the \
data in the row as the values. For example, Ken Rosen\[CloseCurlyQuote]s \
mathematics teaching assignment would be represented by the association shown \
below.\
\>", "Text",ExpressionUUID->"4981962d-929c-4b53-a774-8702976e1f45"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rosenmathclass", "=", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<Professor\>\"", "\[Rule]", "\"\<Rosen\>\""}], ",", 
    RowBox[{"\"\<Department\>\"", "\[Rule]", "\"\<Mathematics\>\""}], ",", 
    RowBox[{"\"\<Course_number\>\"", "\[Rule]", "575"}]}], "|>"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->"In[58]:=",ExpressionUUID->"bc701712-9e58-46db-aff4-3d9efc84be3e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Professor\"\>", "\[Rule]", "\<\"Rosen\"\>"}], ",", 
   RowBox[{"\<\"Department\"\>", "\[Rule]", "\<\"Mathematics\"\>"}], ",", 
   RowBox[{"\<\"Course_number\"\>", "\[Rule]", "575"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[58]=",ExpressionUUID->"5e142c4e-2af4-43b5-b91b-45676cd0c0a3"]
}, Open  ]],

Cell[TextData[{
 "Note that we have entered the values as strings and integers, which is \
appropriate to the kind of data being stored in those fields. We also used \
strings for the keys. While it is tempting, and allowed, to forgo typing the \
quotation marks and using symbols for the keys instead, there are some \
benefits to using strings as the keys in an ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 ". "
}], "Text",ExpressionUUID->"07c1171b-b996-478a-8ad0-8c5e93878e20"],

Cell["\<\
Accessing the value corresponding to a specific key is done using function \
notation.\
\>", "Text",ExpressionUUID->"40412df5-ec63-4913-9566-29777e33562c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rosenmathclass", "[", "\"\<Course_number\>\"", "]"}]], "Input",
 CellLabel->"In[59]:=",ExpressionUUID->"564c2131-ff9e-487a-9606-e68c84ce0a9d"],

Cell[BoxData["575"], "Output",
 CellLabel->"Out[59]=",ExpressionUUID->"c0ef762e-7648-467d-b221-dd24f8cd203d"]
}, Open  ]],

Cell[TextData[{
 "Combining this notation with ",
 StyleBox[ButtonBox["Set",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Set"], "FunctionLink"],
 " (=) can be used to change values, or even add keys."
}], "Text",ExpressionUUID->"dcb0d5a5-85e8-4351-b727-1816ea45e194"],

Cell[TextData[{
 "The functions ",
 StyleBox[ButtonBox["Keys",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Keys"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Values",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Values"], "FunctionLink"],
 " applied to an ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 " will produce a list of the keys and values."
}], "Text",ExpressionUUID->"3fc50414-2de6-48e5-9f33-4965c9acb1a2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Keys", "[", "rosenmathclass", "]"}]], "Input",
 CellLabel->"In[60]:=",ExpressionUUID->"e4831a1f-835d-48cf-9d35-e6a237f84261"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Professor\"\>", ",", "\<\"Department\"\>", 
   ",", "\<\"Course_number\"\>"}], "}"}]], "Output",
 CellLabel->"Out[60]=",ExpressionUUID->"b62a4a69-dcfa-42da-8245-b3fda251e5b1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Values", "[", "rosenmathclass", "]"}]], "Input",
 CellLabel->"In[61]:=",ExpressionUUID->"36c4d958-714f-4faf-8ba3-eac677259ce0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Rosen\"\>", ",", "\<\"Mathematics\"\>", ",", "575"}], 
  "}"}]], "Output",
 CellLabel->"Out[61]=",ExpressionUUID->"e66c2fd0-f568-40e8-b7e1-e9af09d8e14b"]
}, Open  ]],

Cell[TextData[{
 "Rather than type all of the rows in the teaching assignment database, we \
will make use of the ",
 StyleBox["teachingAssignments", "Code"],
 " list of lists above. The ",
 StyleBox[ButtonBox["AssociationThread",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AssociationThread"], "FunctionLink"],
 " function is designed to take a list of keys and a list of values and form \
the association in which each key is paired with the value in the \
corresponding position. For example, we can transform the first row of ",
 StyleBox["teachingAssignments", "Code"],
 " into an ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 " with the code below."
}], "Text",ExpressionUUID->"9e13aa1f-e43c-4be4-8b29-c723f67d050e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociationThread", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "\"\<Professor\>\"", ",", "\"\<Department\>\"", ",", 
     "\"\<Course_number\>\""}], "}"}], ",", 
   RowBox[{"teachingAssignments", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[62]:=",ExpressionUUID->"19c7bcf6-c9a5-4630-a37d-36983b38342f"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Professor\"\>", "\[Rule]", "\<\"Cruz\"\>"}], ",", 
   RowBox[{"\<\"Department\"\>", "\[Rule]", "\<\"Zoology\"\>"}], ",", 
   RowBox[{"\<\"Course_number\"\>", "\[Rule]", "335"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[62]=",ExpressionUUID->"ba7b4a1c-577d-4523-a80d-f8b1f88ab084"]
}, Open  ]],

Cell[TextData[{
 "Thus, we can form the list of associations corresponding to the teaching \
assignments table by applying ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " over all the elements of ",
 StyleBox["teachingAssignments", "Code"],
 "."
}], "Text",ExpressionUUID->"23e3a1d2-8aa1-4694-8801-e1c6dfcbefaf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"AssociationThread", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<Professor\>\"", ",", "\"\<Department\>\"", ",", 
       "\"\<Course_number\>\""}], "}"}], ",", "row"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"row", ",", "teachingAssignments"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[63]:=",ExpressionUUID->"e1f5b836-86ec-4413-91ee-4de629dabe98"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Professor\"\>", "\[Rule]", "\<\"Cruz\"\>"}], ",", 
     RowBox[{"\<\"Department\"\>", "\[Rule]", "\<\"Zoology\"\>"}], ",", 
     RowBox[{"\<\"Course_number\"\>", "\[Rule]", "335"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Professor\"\>", "\[Rule]", "\<\"Cruz\"\>"}], ",", 
     RowBox[{"\<\"Department\"\>", "\[Rule]", "\<\"Zoology\"\>"}], ",", 
     RowBox[{"\<\"Course_number\"\>", "\[Rule]", "412"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Professor\"\>", "\[Rule]", "\<\"Farber\"\>"}], ",", 
     RowBox[{"\<\"Department\"\>", "\[Rule]", "\<\"Psychology\"\>"}], ",", 
     RowBox[{"\<\"Course_number\"\>", "\[Rule]", "501"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Professor\"\>", "\[Rule]", "\<\"Farber\"\>"}], ",", 
     RowBox[{"\<\"Department\"\>", "\[Rule]", "\<\"Psychology\"\>"}], ",", 
     RowBox[{"\<\"Course_number\"\>", "\[Rule]", "617"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Professor\"\>", "\[Rule]", "\<\"Grammer\"\>"}], ",", 
     RowBox[{"\<\"Department\"\>", "\[Rule]", "\<\"Physics\"\>"}], ",", 
     RowBox[{"\<\"Course_number\"\>", "\[Rule]", "544"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Professor\"\>", "\[Rule]", "\<\"Grammer\"\>"}], ",", 
     RowBox[{"\<\"Department\"\>", "\[Rule]", "\<\"Physics\"\>"}], ",", 
     RowBox[{"\<\"Course_number\"\>", "\[Rule]", "551"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Professor\"\>", "\[Rule]", "\<\"Rosen\"\>"}], ",", 
     RowBox[{"\<\"Department\"\>", "\[Rule]", "\<\"Computer Science\"\>"}], 
     ",", 
     RowBox[{"\<\"Course_number\"\>", "\[Rule]", "518"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Professor\"\>", "\[Rule]", "\<\"Rosen\"\>"}], ",", 
     RowBox[{"\<\"Department\"\>", "\[Rule]", "\<\"Mathematics\"\>"}], ",", 
     RowBox[{"\<\"Course_number\"\>", "\[Rule]", "575"}]}], 
    "\[RightAssociation]"}]}], "}"}]], "Output",
 CellLabel->"Out[63]=",ExpressionUUID->"e955d5e7-c7b9-434a-84b4-6d7308ab756b"]
}, Open  ]],

Cell[TextData[{
 "This is exactly the input required to create a ",
 StyleBox[ButtonBox["Dataset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dataset"], "FunctionLink"],
 " with named columns."
}], "Text",ExpressionUUID->"acf28ab9-54e1-48c2-afac-1230eee57fd8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"teachingAssignmentDB", "=", 
  RowBox[{"Dataset", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"AssociationThread", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<Professor\>\"", ",", "\"\<Department\>\"", ",", 
         "\"\<Course_number\>\""}], "}"}], ",", "row"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"row", ",", "teachingAssignments"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[64]:=",ExpressionUUID->"523e6dd5-d92b-4da1-9ada-135786c41b6f"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 8, "Length" -> 8, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"Professor", "Department", "Course_number"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["Cruz", "Farber", "Grammer", "Rosen"]], 
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "Computer Science", "Mathematics", "Physics", "Psychology", 
              "Zoology"]], 
            TypeSystem`Atom[Integer]}], 8], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "Professor"} -> 1, {All, "Department"} -> 
           1, {All, "Course_number"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Professor" -> TypeSystem`PackageScope`AtomShape[63.], 
              "Department" -> TypeSystem`PackageScope`AtomShape[144.], 
              "Course_number" -> TypeSystem`PackageScope`AtomShape[34]]]], 
           8, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[493854948], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Struct[{"Professor", "Department", "Course_number"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["Cruz", "Farber", "Grammer", "Rosen"]], 
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "Computer Science", "Mathematics", "Physics", "Psychology", 
              "Zoology"]], 
            TypeSystem`Atom[Integer]}], 8], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[493854948]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Professor\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Professor\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1693941315][{All, "Professor"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[All, "Professor"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1693941315][{All, "Department"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[All, "Department"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1693941315][{All, "Course_number"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[All, "Course_number"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cruz", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[1, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Zoology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[1, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["335"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[1, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cruz", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[2, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Zoology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[2, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["412"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[2, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Farber", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[3, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Psychology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[3, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["501"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[3, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Farber", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[4, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Psychology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[4, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["617"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[4, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Grammer", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[5, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Physics", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[5, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["544"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[5, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Grammer", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[6, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Physics", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[6, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["551"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[6, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Rosen", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[7, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Computer Science", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[7, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["518"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[7, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Rosen", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[8, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Mathematics", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[8, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["575"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
                  GeneralUtilities`Slice[8, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1693941315][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1693941315]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1693941315][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[
         TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {331., {117.3544921875, 122.6455078125}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellLabel->"Out[64]=",ExpressionUUID->"06941a1c-db6e-422d-b175-d5b0cbe6158d"]
}, Open  ]],

Cell[TextData[{
 "To recover the list of associations from a ",
 StyleBox[ButtonBox["Dataset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dataset"], "FunctionLink"],
 ", apply the ",
 StyleBox[ButtonBox["Normal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Normal"], "FunctionLink"],
 " function."
}], "Text",ExpressionUUID->"44070ed5-4bf1-45d3-b937-45e08a0ad716"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normal", "[", "teachingAssignmentDB", "]"}]], "Input",
 CellLabel->"In[65]:=",ExpressionUUID->"b8975bf9-8a6c-4a6a-b48a-355fb17a003a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Professor\"\>", "\[Rule]", "\<\"Cruz\"\>"}], ",", 
     RowBox[{"\<\"Department\"\>", "\[Rule]", "\<\"Zoology\"\>"}], ",", 
     RowBox[{"\<\"Course_number\"\>", "\[Rule]", "335"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Professor\"\>", "\[Rule]", "\<\"Cruz\"\>"}], ",", 
     RowBox[{"\<\"Department\"\>", "\[Rule]", "\<\"Zoology\"\>"}], ",", 
     RowBox[{"\<\"Course_number\"\>", "\[Rule]", "412"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Professor\"\>", "\[Rule]", "\<\"Farber\"\>"}], ",", 
     RowBox[{"\<\"Department\"\>", "\[Rule]", "\<\"Psychology\"\>"}], ",", 
     RowBox[{"\<\"Course_number\"\>", "\[Rule]", "501"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Professor\"\>", "\[Rule]", "\<\"Farber\"\>"}], ",", 
     RowBox[{"\<\"Department\"\>", "\[Rule]", "\<\"Psychology\"\>"}], ",", 
     RowBox[{"\<\"Course_number\"\>", "\[Rule]", "617"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Professor\"\>", "\[Rule]", "\<\"Grammer\"\>"}], ",", 
     RowBox[{"\<\"Department\"\>", "\[Rule]", "\<\"Physics\"\>"}], ",", 
     RowBox[{"\<\"Course_number\"\>", "\[Rule]", "544"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Professor\"\>", "\[Rule]", "\<\"Grammer\"\>"}], ",", 
     RowBox[{"\<\"Department\"\>", "\[Rule]", "\<\"Physics\"\>"}], ",", 
     RowBox[{"\<\"Course_number\"\>", "\[Rule]", "551"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Professor\"\>", "\[Rule]", "\<\"Rosen\"\>"}], ",", 
     RowBox[{"\<\"Department\"\>", "\[Rule]", "\<\"Computer Science\"\>"}], 
     ",", 
     RowBox[{"\<\"Course_number\"\>", "\[Rule]", "518"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Professor\"\>", "\[Rule]", "\<\"Rosen\"\>"}], ",", 
     RowBox[{"\<\"Department\"\>", "\[Rule]", "\<\"Mathematics\"\>"}], ",", 
     RowBox[{"\<\"Course_number\"\>", "\[Rule]", "575"}]}], 
    "\[RightAssociation]"}]}], "}"}]], "Output",
 CellLabel->"Out[65]=",ExpressionUUID->"be0b8c51-f174-4137-a2e2-0bd82db164da"]
}, Open  ]],

Cell[TextData[{
 "With a ",
 StyleBox[ButtonBox["Dataset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dataset"], "FunctionLink"],
 ", we can access parts of the database using the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[", "Code"],
 "\[Ellipsis]",
 StyleBox["]]", "Code"],
 ") operator. Keep in mind that the underlying structure is a list of \
associations. So we can access the third row by"
}], "Text",ExpressionUUID->"a911f856-a777-4a46-b406-f23f6beedf16"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"teachingAssignmentDB", "[", 
  RowBox[{"[", "3", "]"}], "]"}]], "Input",
 CellLabel->"In[66]:=",ExpressionUUID->"61c74e91-2a0c-488c-bbd9-4b885527145d"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
        TypeSystem`Struct[{"Professor", "Department", "Course_number"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["Cruz", "Farber", "Grammer", "Rosen"]], 
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "Computer Science", "Mathematics", "Physics", "Psychology", 
             "Zoology"]], 
           TypeSystem`Atom[Integer]}], "Shape" -> 
        TypeSystem`PackageScope`DocumentShape[
          
          Association[{"Professor"} -> 
           TypeSystem`PackageScope`AtomShape[63.], {"Department"} -> 
           TypeSystem`PackageScope`AtomShape[144.], {"Course_number"} -> 
           TypeSystem`PackageScope`AtomShape[34]], 1], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[191789236], "Type" -> 
        TypeSystem`Struct[{"Professor", "Department", "Course_number"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["Cruz", "Farber", "Grammer", "Rosen"]], 
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "Computer Science", "Mathematics", "Physics", "Psychology", 
             "Zoology"]], 
           TypeSystem`Atom[Integer]}], "HandleQ" -> True, "RowTarget" -> 20, 
        "Data" -> TypeSystem`PackageScope`CacheHandle[191789236]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Professor\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Professor\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1499608332][{
                    Key["Professor"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1499608332][
                  GeneralUtilities`Slice[
                   Key["Professor"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Farber", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1499608332][
                  GeneralUtilities`Slice[
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1499608332][{
                    Key["Department"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1499608332][
                  GeneralUtilities`Slice[
                   Key["Department"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Psychology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1499608332][
                  GeneralUtilities`Slice[
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1499608332][{
                    Key["Course_number"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1499608332][
                  GeneralUtilities`Slice[
                   Key["Course_number"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["501"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1499608332][
                  GeneralUtilities`Slice[
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1499608332][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1499608332]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1499608332][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1499608332][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {259., {42.8544921875, 48.1455078125}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellLabel->"Out[66]=",ExpressionUUID->"4e4eeebc-51f7-498b-adc0-6a0c77552df9"]
}, Open  ]],

Cell[TextData[{
 "However, one of the benefits of the ",
 StyleBox[ButtonBox["Dataset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dataset"], "FunctionLink"],
 " is that the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[", "Code"],
 "\[Ellipsis]",
 StyleBox["]]", "Code"],
 ") operator is extended by the query syntax (",
 StyleBox["[", "Code"],
 "\[Ellipsis]",
 StyleBox["]", "Code"],
 "). All of the usual syntax you would normally use with ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[", "Code"],
 "\[Ellipsis]",
 StyleBox["]]", "Code"],
 ") can be used in single brackets with a ",
 StyleBox[ButtonBox["Dataset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dataset"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"c663f128-94cb-4f7e-b306-99b762e57b30"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"teachingAssignmentDB", "[", "3", "]"}]], "Input",
 CellLabel->"In[67]:=",ExpressionUUID->"350ca58e-0ae6-46b5-9a47-bd6432964ba0"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
        TypeSystem`Struct[{"Professor", "Department", "Course_number"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["Cruz", "Farber", "Grammer", "Rosen"]], 
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "Computer Science", "Mathematics", "Physics", "Psychology", 
             "Zoology"]], 
           TypeSystem`Atom[Integer]}], "Shape" -> 
        TypeSystem`PackageScope`DocumentShape[
          
          Association[{"Professor"} -> 
           TypeSystem`PackageScope`AtomShape[63.], {"Department"} -> 
           TypeSystem`PackageScope`AtomShape[144.], {"Course_number"} -> 
           TypeSystem`PackageScope`AtomShape[34]], 1], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[21286259], "Type" -> 
        TypeSystem`Struct[{"Professor", "Department", "Course_number"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["Cruz", "Farber", "Grammer", "Rosen"]], 
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "Computer Science", "Mathematics", "Physics", "Psychology", 
             "Zoology"]], 
           TypeSystem`Atom[Integer]}], "HandleQ" -> True, "RowTarget" -> 20, 
        "Data" -> TypeSystem`PackageScope`CacheHandle[21286259]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Professor\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Professor\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1106516640][{
                    Key["Professor"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1106516640][
                  GeneralUtilities`Slice[
                   Key["Professor"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Farber", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1106516640][
                  GeneralUtilities`Slice[
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1106516640][{
                    Key["Department"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1106516640][
                  GeneralUtilities`Slice[
                   Key["Department"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Psychology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1106516640][
                  GeneralUtilities`Slice[
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1106516640][{
                    Key["Course_number"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1106516640][
                  GeneralUtilities`Slice[
                   Key["Course_number"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["501"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1106516640][
                  GeneralUtilities`Slice[
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1106516640][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1106516640]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1106516640][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1106516640][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {259., {42.8544921875, 48.1455078125}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellLabel->"Out[67]=",ExpressionUUID->"54c761c7-a0a8-4b16-87ed-74b742a40d1d"]
}, Open  ]],

Cell["\<\
To access the department of the teaching assignment in the third row, we enter\
\>", "Text",ExpressionUUID->"2d826fc6-1f35-4122-a6d3-bfc0d4bf7af3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"teachingAssignmentDB", "[", 
  RowBox[{"3", ",", "\"\<Department\>\""}], "]"}]], "Input",
 CellLabel->"In[68]:=",ExpressionUUID->"525809af-a729-4340-a9d9-350d52b3fb4c"],

Cell[BoxData["\<\"Psychology\"\>"], "Output",
 CellLabel->"Out[68]=",ExpressionUUID->"7ac2c239-1b27-403c-b79c-21d85b7f2cc3"]
}, Open  ]],

Cell["\<\
We can use lists and ranges to extract different pieces of the database, just \
as we have done with lists. The code below accesses the department and course \
number for the second through fourth rows of the database.\
\>", "Text",ExpressionUUID->"e080d7c6-9ca3-4015-9f3f-2a0f9260eed4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"teachingAssignmentDB", "[", 
  RowBox[{
   RowBox[{"2", ";;", "4"}], ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Department\>\"", ",", "\"\<Course_number\>\""}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->"In[69]:=",ExpressionUUID->"606d8f55-1b6a-4a73-8fd9-0b6cbb3e32da"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 3, "Length" -> 3, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"Department", "Course_number"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "Computer Science", "Mathematics", "Physics", "Psychology", 
              "Zoology"]], 
            TypeSystem`Atom[Integer]}], 3], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          Association[{All, "Department"} -> 1, {All, "Course_number"} -> 1], 
          
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Department" -> TypeSystem`PackageScope`AtomShape[144.], 
              "Course_number" -> TypeSystem`PackageScope`AtomShape[34]]]], 
           3, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1142264023], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Struct[{"Department", "Course_number"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "Computer Science", "Mathematics", "Physics", "Psychology", 
              "Zoology"]], 
            TypeSystem`Atom[Integer]}], 3], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[1142264023]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1217480804][{All, "Department"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1217480804][
                  GeneralUtilities`Slice[All, "Department"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1217480804][{All, "Course_number"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1217480804][
                  GeneralUtilities`Slice[All, "Course_number"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Zoology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1217480804][
                  GeneralUtilities`Slice[1, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["412"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1217480804][
                  GeneralUtilities`Slice[1, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Psychology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1217480804][
                  GeneralUtilities`Slice[2, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["501"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1217480804][
                  GeneralUtilities`Slice[2, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Psychology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1217480804][
                  GeneralUtilities`Slice[3, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["617"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1217480804][
                  GeneralUtilities`Slice[3, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1217480804][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1217480804]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1217480804][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1217480804][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {259., {54.8544921875, 60.1455078125}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellLabel->"Out[69]=",ExpressionUUID->"b2294056-0f86-4569-96bd-caaf7157e3d5"]
}, Open  ]],

Cell[TextData[{
 "The symbol ",
 StyleBox["All", "Code"],
 " can be used as well."
}], "Text",ExpressionUUID->"473b6a43-ab7d-4b3f-b022-ff7c02b0d9e8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"teachingAssignmentDB", "[", 
  RowBox[{"All", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Department\>\"", ",", "\"\<Course_number\>\""}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->"In[70]:=",ExpressionUUID->"1e2312fc-1e31-43ee-a9e0-a218c0883a70"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 8, "Length" -> 8, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"Department", "Course_number"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "Computer Science", "Mathematics", "Physics", "Psychology", 
              "Zoology"]], 
            TypeSystem`Atom[Integer]}], 8], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          Association[{All, "Department"} -> 1, {All, "Course_number"} -> 1], 
          
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Department" -> TypeSystem`PackageScope`AtomShape[144.], 
              "Course_number" -> TypeSystem`PackageScope`AtomShape[34]]]], 
           8, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1761319382], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Struct[{"Department", "Course_number"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "Computer Science", "Mathematics", "Physics", "Psychology", 
              "Zoology"]], 
            TypeSystem`Atom[Integer]}], 8], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[1761319382]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1190131892][{All, "Department"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
                  GeneralUtilities`Slice[All, "Department"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1190131892][{All, "Course_number"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
                  GeneralUtilities`Slice[All, "Course_number"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Zoology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
                  GeneralUtilities`Slice[1, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["335"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
                  GeneralUtilities`Slice[1, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Zoology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
                  GeneralUtilities`Slice[2, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["412"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
                  GeneralUtilities`Slice[2, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Psychology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
                  GeneralUtilities`Slice[3, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["501"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
                  GeneralUtilities`Slice[3, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Psychology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
                  GeneralUtilities`Slice[4, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["617"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
                  GeneralUtilities`Slice[4, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Physics", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
                  GeneralUtilities`Slice[5, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["544"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
                  GeneralUtilities`Slice[5, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Physics", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
                  GeneralUtilities`Slice[6, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["551"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
                  GeneralUtilities`Slice[6, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Computer Science", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
                  GeneralUtilities`Slice[7, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["518"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
                  GeneralUtilities`Slice[7, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Mathematics", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
                  GeneralUtilities`Slice[8, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["575"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
                  GeneralUtilities`Slice[8, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1190131892][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1190131892]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1190131892][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {259., {117.3544921875, 122.6455078125}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellLabel->"Out[70]=",ExpressionUUID->"2c612ce5-8e13-4250-92f0-78bdef667b31"]
}, Open  ]],

Cell["Note that the above is the projection operation.", "Text",ExpressionUUID->"038727a6-5450-4f76-aed9-22d64d8e1f1f"],

Cell[TextData[{
 "We create a ",
 StyleBox[ButtonBox["Dataset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dataset"], "FunctionLink"],
 " for the class schedule table in the same way."
}], "Text",ExpressionUUID->"1cd10200-ce0f-4997-9402-a9325ffd0031"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classScheduleDB", "=", 
  RowBox[{"Dataset", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"AssociationThread", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<Department\>\"", ",", "\"\<Course_number\>\"", ",", 
         "\"\<Room\>\"", ",", "\"\<Time\>\""}], "}"}], ",", "row"}], "]"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"row", ",", "classSchedule"}], "}"}]}], "]"}], "]"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->"In[71]:=",ExpressionUUID->"1be2ce76-e957-4d99-893a-bb5858044556"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 8, "Length" -> 8, "InitialType" -> TypeSystem`Vector[
          
          TypeSystem`Struct[{"Department", "Course_number", "Room", "Time"}, {
           
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "Computer Science", "Mathematics", "Physics", "Psychology", 
              "Zoology"]], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["A100", "A110", "B505", "N502", "N521"]], 
            
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "11:00 A.M.", "2:00 P.M.", "3:00 P.M.", "4:00 P.M.", "8:00 A.M.",
               "9:00 A.M."]]}], 8], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "Department"} -> 1, {All, "Course_number"} -> 
           1, {All, "Room"} -> 1, {All, "Time"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Department" -> TypeSystem`PackageScope`AtomShape[144.], 
              "Course_number" -> TypeSystem`PackageScope`AtomShape[34], 
              "Room" -> TypeSystem`PackageScope`AtomShape[36.], "Time" -> 
              TypeSystem`PackageScope`AtomShape[90.]]]], 8, {}]], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[337889612], 
        "Type" -> TypeSystem`Vector[
          
          TypeSystem`Struct[{"Department", "Course_number", "Room", "Time"}, {
           
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "Computer Science", "Mathematics", "Physics", "Psychology", 
              "Zoology"]], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["A100", "A110", "B505", "N502", "N521"]], 
            
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "11:00 A.M.", "2:00 P.M.", "3:00 P.M.", "4:00 P.M.", "8:00 A.M.",
               "9:00 A.M."]]}], 8], "HandleQ" -> True, "RowTarget" -> 20, 
        "Data" -> TypeSystem`PackageScope`CacheHandle[337889612]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2061883523][{All, "Department"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[All, "Department"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2061883523][{All, "Course_number"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[All, "Course_number"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Room\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Room\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2061883523][{All, "Room"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[All, "Room"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Time\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Time\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    2061883523][{All, "Time"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[All, "Time"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Computer Science", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[1, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["518"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[1, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["N521", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[1, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["2:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[1, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Mathematics", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[2, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["575"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[2, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["N502", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[2, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["3:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[2, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Mathematics", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[3, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["611"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[3, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["N521", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[3, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["4:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[3, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Physics", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[4, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["544"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[4, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["B505", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[4, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["4:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[4, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Psychology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[5, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["501"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[5, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A100", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[5, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["3:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[5, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Psychology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[6, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["617"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[6, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A110", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[6, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["11:00 A.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[6, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Zoology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[7, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["335"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[7, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A100", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[7, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["9:00 A.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[7, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Zoology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[8, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["412"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[8, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A100", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[8, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["8:00 A.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
                  GeneralUtilities`Slice[8, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2061883523][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 2061883523]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[2061883523][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {405., {117.3544921875, 122.6455078125}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellLabel->"Out[71]=",ExpressionUUID->"45973824-e9de-4c21-9257-d3a7f12c70fd"]
}, Open  ]],

Cell[TextData[{
 "The query syntax, though, is much more flexible than the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[", "Code"],
 "\[Ellipsis]",
 StyleBox["]]", "Code"],
 ") operator. Suppose, for example, we wish to extract all of the courses \
held in room A100. If we were dealing with a list, we use use the ",
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"], "FunctionLink"],
 " function. With a ",
 StyleBox[ButtonBox["Dataset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dataset"], "FunctionLink"],
 ", we use ",
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"], "FunctionLink"],
 " in conjunction with the query syntax."
}], "Text",ExpressionUUID->"cfec4bbe-933d-4431-94c7-ca22914f2dfd"],

Cell[TextData[{
 "The argument to ",
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"], "FunctionLink"],
 " will be a function, in this case, a pure function that applies to an ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 " and returns true or false. When defining a pure function that operates on \
an ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 ", there is a special ",
 StyleBox[ButtonBox["Slot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Slot"], "FunctionLink"],
 " (",
 StyleBox["#", "Code"],
 ") syntax. Provided that the key has been defined as a string, the value \
associated to the key ",
 StyleBox["\[OpenCurlyDoubleQuote]", "Code"],
 StyleBox["key", "CodeVar"],
 StyleBox["\[CloseCurlyDoubleQuote]", "Code"],
 " can be referenced by ",
 StyleBox["#", "Code"],
 StyleBox["key", "CodeVar"],
 "."
}], "Text",ExpressionUUID->"a7c21c96-dc4b-4bf5-8785-2f6d4c21970b"],

Cell[TextData[{
 "To select the classes in room A100, we just need to define the function \
that tests whether ",
 StyleBox["#Room", "Code"],
 " equals ",
 StyleBox["\[OpenCurlyDoubleQuote]A100\[CloseCurlyDoubleQuote]", "Code"],
 ". Remember to terminate the ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " definition with an ampersand."
}], "Text",ExpressionUUID->"53bcdefa-f49f-436b-9c31-45ede865e066"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classScheduleDB", "[", 
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"#Room", "\[Equal]", "\"\<A100\>\""}], "&"}], "]"}], 
  "]"}]], "Input",
 CellLabel->"In[72]:=",ExpressionUUID->"70fbf5ea-e46f-4ed0-9cd7-eb6e8a96238a"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 3, "Length" -> 3, "InitialType" -> TypeSystem`Vector[
          
          TypeSystem`Struct[{"Department", "Course_number", "Room", "Time"}, {
           
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "Computer Science", "Mathematics", "Physics", "Psychology", 
              "Zoology"]], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["A100", "A110", "B505", "N502", "N521"]], 
            
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "11:00 A.M.", "2:00 P.M.", "3:00 P.M.", "4:00 P.M.", "8:00 A.M.",
               "9:00 A.M."]]}], 3], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "Department"} -> 1, {All, "Course_number"} -> 
           1, {All, "Room"} -> 1, {All, "Time"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Department" -> TypeSystem`PackageScope`AtomShape[144.], 
              "Course_number" -> TypeSystem`PackageScope`AtomShape[34], 
              "Room" -> TypeSystem`PackageScope`AtomShape[36.], "Time" -> 
              TypeSystem`PackageScope`AtomShape[90.]]]], 3, {}]], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[1889582739], 
        "Type" -> TypeSystem`Vector[
          
          TypeSystem`Struct[{"Department", "Course_number", "Room", "Time"}, {
           
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "Computer Science", "Mathematics", "Physics", "Psychology", 
              "Zoology"]], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["A100", "A110", "B505", "N502", "N521"]], 
            
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "11:00 A.M.", "2:00 P.M.", "3:00 P.M.", "4:00 P.M.", "8:00 A.M.",
               "9:00 A.M."]]}], 3], "HandleQ" -> True, "RowTarget" -> 20, 
        "Data" -> TypeSystem`PackageScope`CacheHandle[1889582739]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1260925208][{All, "Department"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1260925208][
                  GeneralUtilities`Slice[All, "Department"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1260925208][{All, "Course_number"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1260925208][
                  GeneralUtilities`Slice[All, "Course_number"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Room\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Room\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1260925208][{All, "Room"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1260925208][
                  GeneralUtilities`Slice[All, "Room"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Time\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Time\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1260925208][{All, "Time"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1260925208][
                  GeneralUtilities`Slice[All, "Time"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Psychology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1260925208][
                  GeneralUtilities`Slice[1, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["501"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1260925208][
                  GeneralUtilities`Slice[1, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A100", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1260925208][
                  GeneralUtilities`Slice[1, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["3:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1260925208][
                  GeneralUtilities`Slice[1, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Zoology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1260925208][
                  GeneralUtilities`Slice[2, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["335"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1260925208][
                  GeneralUtilities`Slice[2, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A100", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1260925208][
                  GeneralUtilities`Slice[2, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["9:00 A.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1260925208][
                  GeneralUtilities`Slice[2, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Zoology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1260925208][
                  GeneralUtilities`Slice[3, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["412"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1260925208][
                  GeneralUtilities`Slice[3, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A100", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1260925208][
                  GeneralUtilities`Slice[3, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["8:00 A.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1260925208][
                  GeneralUtilities`Slice[3, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1260925208][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1260925208]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1260925208][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1260925208][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {405., {55.3544921875, 60.6455078125}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellLabel->"Out[72]=",ExpressionUUID->"e0242652-b3cc-45d5-9095-02046c6c5bbe"]
}, Open  ]],

Cell["\<\
When the key is more complicated, it may be necessary to include quotation \
marks; the following selects the courses with numbers greater than 500. \
Without the quotation marks, it would raise an error.\
\>", "Text",ExpressionUUID->"2607f5ac-1ca6-41f2-a47d-577b102959ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classScheduleDB", "[", 
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"#\"Course_number\"", ">", "500"}], "&"}], "]"}], "]"}]], "Input",\

 CellLabel->"In[73]:=",ExpressionUUID->"2cd82fbf-e3d4-4723-85a1-6dab6120d106"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 6, "Length" -> 6, "InitialType" -> TypeSystem`Vector[
          
          TypeSystem`Struct[{"Department", "Course_number", "Room", "Time"}, {
           
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "Computer Science", "Mathematics", "Physics", "Psychology", 
              "Zoology"]], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["A100", "A110", "B505", "N502", "N521"]], 
            
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "11:00 A.M.", "2:00 P.M.", "3:00 P.M.", "4:00 P.M.", "8:00 A.M.",
               "9:00 A.M."]]}], 6], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "Department"} -> 1, {All, "Course_number"} -> 
           1, {All, "Room"} -> 1, {All, "Time"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Department" -> TypeSystem`PackageScope`AtomShape[144.], 
              "Course_number" -> TypeSystem`PackageScope`AtomShape[34], 
              "Room" -> TypeSystem`PackageScope`AtomShape[36.], "Time" -> 
              TypeSystem`PackageScope`AtomShape[90.]]]], 6, {}]], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[1366991548], 
        "Type" -> TypeSystem`Vector[
          
          TypeSystem`Struct[{"Department", "Course_number", "Room", "Time"}, {
           
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "Computer Science", "Mathematics", "Physics", "Psychology", 
              "Zoology"]], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["A100", "A110", "B505", "N502", "N521"]], 
            
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "11:00 A.M.", "2:00 P.M.", "3:00 P.M.", "4:00 P.M.", "8:00 A.M.",
               "9:00 A.M."]]}], 6], "HandleQ" -> True, "RowTarget" -> 20, 
        "Data" -> TypeSystem`PackageScope`CacheHandle[1366991548]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 103419293][{
                    All, "Department"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[All, "Department"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 103419293][{
                    All, "Course_number"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[All, "Course_number"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Room\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Room\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 103419293][{
                    All, "Room"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[All, "Room"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Time\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Time\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 103419293][{
                    All, "Time"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[All, "Time"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Computer Science", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[1, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["518"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[1, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["N521", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[1, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["2:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[1, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Mathematics", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[2, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["575"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[2, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["N502", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[2, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["3:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[2, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Mathematics", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[3, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["611"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[3, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["N521", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[3, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["4:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[3, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Physics", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[4, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["544"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[4, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["B505", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[4, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["4:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[4, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Psychology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[5, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["501"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[5, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A100", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[5, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["3:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[5, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Psychology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[6, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["617"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[6, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A110", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[6, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["11:00 A.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
                 
                  GeneralUtilities`Slice[6, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 103419293][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 103419293]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[103419293][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {405., {92.3544921875, 97.6455078125}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellLabel->"Out[73]=",ExpressionUUID->"773dcb16-13ed-4157-9ee3-ae8fdf8b554c"]
}, Open  ]],

Cell[TextData[{
 "The Wolfram Language provides a more flexible version of join, called ",
 StyleBox[ButtonBox["JoinAcross",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/JoinAcross"], "FunctionLink"],
 ", than is described in the textbook. In particular, there is no requirement \
that the matching columns be at the end and beginning of the two databases. \
Rather, the keys are used to determine which values need to agree in order \
for two rows to be joined."
}], "Text",ExpressionUUID->"fbe168d2-67ee-4fd1-952f-f9a3ee058cb9"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["JoinAcross",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/JoinAcross"], "FunctionLink"],
 " function requires three arguments. The first two are ",
 StyleBox[ButtonBox["Dataset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dataset"], "FunctionLink"],
 " objects or lists of associations. The third argument is a key or list of \
keys which specify which fields must agree for two database entries to be \
combined. As in Example 11 of the textbook, we will combine the teaching \
assignment and class schedule databases by joining rows which have matching \
department and course number."
}], "Text",ExpressionUUID->"2bd07c06-5a30-4a97-a836-26776909b582"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"JoinAcross", "[", 
  RowBox[{"teachingAssignmentDB", ",", "classScheduleDB", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Department\>\"", ",", "\"\<Course_number\>\""}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->"In[74]:=",ExpressionUUID->"5a07824d-ea40-4480-85e7-f4358341aabe"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 7, "Length" -> 7, "InitialType" -> TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "Professor", "Department", "Course_number", "Room", "Time"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["Cruz", "Farber", "Grammer", "Rosen"]], 
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "Computer Science", "Mathematics", "Physics", "Psychology", 
              "Zoology"]], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["A100", "A110", "B505", "N502", "N521"]], 
            
            TypeSystem`Atom[String]}], 7], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "Professor"} -> 1, {All, "Department"} -> 
           1, {All, "Course_number"} -> 1, {All, "Room"} -> 1, {All, "Time"} -> 
           1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Professor" -> TypeSystem`PackageScope`AtomShape[63.], 
              "Department" -> TypeSystem`PackageScope`AtomShape[144.], 
              "Course_number" -> TypeSystem`PackageScope`AtomShape[34], 
              "Room" -> TypeSystem`PackageScope`AtomShape[36.], "Time" -> 
              TypeSystem`PackageScope`AtomShape[96.00000000000001]]]], 
           7, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[178701409], "Type" -> 
        TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "Professor", "Department", "Course_number", "Room", "Time"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["Cruz", "Farber", "Grammer", "Rosen"]], 
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "Computer Science", "Mathematics", "Physics", "Psychology", 
              "Zoology"]], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["A100", "A110", "B505", "N502", "N521"]], 
            
            TypeSystem`Atom[String]}], 7], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[178701409]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Professor\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Professor\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 28138130][{
                    All, "Professor"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[All, "Professor"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 28138130][{
                    All, "Department"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[All, "Department"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 28138130][{
                    All, "Course_number"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[All, "Course_number"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Room\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Room\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 28138130][{
                    All, "Room"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[All, "Room"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Time\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Time\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 28138130][{
                    All, "Time"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[All, "Time"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Rosen", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[1, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Computer Science", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[1, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["518"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[1, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["N521", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[1, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["2:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[1, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{96.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Rosen", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[2, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Mathematics", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[2, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["575"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[2, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["N502", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[2, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["3:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[2, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{96.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Grammer", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[3, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Physics", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[3, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["544"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[3, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["B505", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[3, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["4:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[3, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{96.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Farber", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[4, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Psychology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[4, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["501"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[4, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A100", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[4, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["3:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[4, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{96.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Farber", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[5, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Psychology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[5, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["617"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[5, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A110", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[5, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["11:00 A.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[5, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{96.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cruz", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[6, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Zoology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[6, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["335"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[6, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A100", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[6, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["9:00 A.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[6, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{96.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cruz", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[7, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Zoology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[7, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["412"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[7, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A100", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[7, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["8:00 A.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
                  GeneralUtilities`Slice[7, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{96.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            Module[{
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 28138130][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 28138130]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[28138130][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {484., {104.8544921875, 110.1455078125}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellLabel->"Out[74]=",ExpressionUUID->"dfa8bde9-b256-46d2-b5df-c11a7cb4e134"]
}, Open  ]],

Cell[TextData[{
 "Observe that, as with the solution to the example in the text, entries in \
one table without a corresponding entry in the other do not appear in the \
joined ",
 StyleBox[ButtonBox["Dataset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dataset"], "FunctionLink"],
 ". This is the default behavior, but there are other options. Adding ",
 StyleBox["\[OpenCurlyDoubleQuote]Outer\[CloseCurlyDoubleQuote]", "Code"],
 " as a fourth argument will produce a ",
 StyleBox[ButtonBox["Dataset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dataset"], "FunctionLink"],
 " that includes all the data of both of the original two databases."
}], "Text",ExpressionUUID->"4a5232c0-b1e3-4f05-85e9-583a007fed1e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"JoinAcross", "[", 
  RowBox[{"teachingAssignmentDB", ",", "classScheduleDB", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Department\>\"", ",", "\"\<Course_number\>\""}], "}"}], ",", 
   "\"\<Outer\>\""}], "]"}]], "Input",
 CellLabel->"In[75]:=",ExpressionUUID->"6fd6e536-d19d-4095-9d96-c7b02007597f"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 9, "Length" -> 9, "InitialType" -> TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "Professor", "Department", "Course_number", "Room", "Time"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["Cruz", "Farber", "Grammer", "Rosen"]], 
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "Computer Science", "Mathematics", "Physics", "Psychology", 
              "Zoology"]], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["A100", "A110", "B505", "N502", "N521"]], 
            
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "11:00 A.M.", "2:00 P.M.", "3:00 P.M.", "4:00 P.M.", "8:00 A.M.",
               "9:00 A.M."]]}], 9], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "Professor"} -> 1, {All, "Department"} -> 
           1, {All, "Course_number"} -> 1, {All, "Room"} -> 1, {All, "Time"} -> 
           1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Professor" -> TypeSystem`PackageScope`AtomShape[63.], 
              "Department" -> TypeSystem`PackageScope`AtomShape[144.], 
              "Course_number" -> TypeSystem`PackageScope`AtomShape[34], 
              "Room" -> TypeSystem`PackageScope`AtomShape[36.], "Time" -> 
              TypeSystem`PackageScope`AtomShape[90.]]]], 9, {}]], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[2098175963], 
        "Type" -> TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "Professor", "Department", "Course_number", "Room", "Time"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["Cruz", "Farber", "Grammer", "Rosen"]], 
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "Computer Science", "Mathematics", "Physics", "Psychology", 
              "Zoology"]], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["A100", "A110", "B505", "N502", "N521"]], 
            
            TypeSystem`Atom[
             TypeSystem`Enumeration[
             "11:00 A.M.", "2:00 P.M.", "3:00 P.M.", "4:00 P.M.", "8:00 A.M.",
               "9:00 A.M."]]}], 9], "HandleQ" -> True, "RowTarget" -> 20, 
        "Data" -> TypeSystem`PackageScope`CacheHandle[2098175963]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Professor\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Professor\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 785304258][{
                    All, "Professor"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[All, "Professor"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Department\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 785304258][{
                    All, "Department"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[All, "Department"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Course_number\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 785304258][{
                    All, "Course_number"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[All, "Course_number"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Room\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Room\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 785304258][{
                    All, "Room"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[All, "Room"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Time\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Time\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 785304258][{
                    All, "Time"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[All, "Time"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Rosen", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[1, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Computer Science", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[1, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["518"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[1, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["N521", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[1, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["2:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[1, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Rosen", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[2, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Mathematics", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[2, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["575"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[2, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["N502", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[2, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["3:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[2, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[3, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Mathematics", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[3, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["611"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[3, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["N521", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[3, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["4:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[3, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Grammer", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[4, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Physics", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[4, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["544"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[4, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["B505", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[4, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["4:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[4, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Farber", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[5, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Psychology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[5, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["501"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[5, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A100", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[5, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["3:00 P.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[5, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Farber", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[6, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Psychology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[6, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["617"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[6, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A110", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[6, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["11:00 A.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[6, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cruz", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[7, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Zoology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[7, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["335"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[7, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A100", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[7, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["9:00 A.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[7, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Cruz", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[8, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Zoology", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[8, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["412"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[8, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["A100", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[8, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["8:00 A.M.", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[8, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Grammer", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[9, 
                   Key["Professor"]]], "Mouse"], 
                ImageSize -> {{63., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Physics", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[9, 
                   Key["Department"]]], "Mouse"], 
                ImageSize -> {{144., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["551"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[9, 
                   Key["Course_number"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[9, 
                   Key["Room"]]], "Mouse"], 
                ImageSize -> {{36., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 Item[
                 "\[LongDash]", Alignment -> {Left, Baseline}, BaseStyle -> 
                  GrayLevel[0.85]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
                 
                  GeneralUtilities`Slice[9, 
                   Key["Time"]]], "Mouse"], 
                ImageSize -> {{90., Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 785304258][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 785304258]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[785304258][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {477., {129.8544921875, 135.1455078125}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellLabel->"Out[75]=",ExpressionUUID->"5e228fe4-4c51-485b-ba85-b7f78be4769a"]
}, Open  ]],

Cell[TextData[{
 "Other options are ",
 StyleBox["\[OpenCurlyDoubleQuote]Left\[CloseCurlyDoubleQuote]", "Code"],
 " and ",
 StyleBox["\[OpenCurlyDoubleQuote]Right\[CloseCurlyDoubleQuote]", "Code"],
 ", which ensure that all of the data in the respective argument are \
included, and ",
 StyleBox["\[OpenCurlyDoubleQuote]Inner\[CloseCurlyDoubleQuote]", "Code"],
 ", which is the default."
}], "Text",ExpressionUUID->"5045f68b-8f7f-4e7d-a42b-a5f3caadf2b0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["9.3 Representing Relations", "Section",
 CellTags->"Section3",ExpressionUUID->"845c284e-9df7-4afc-a912-35cf7bdfd172"],

Cell["\<\
From this point forward, we will consider binary relations exclusively. This \
gives us additional options for how we represent relations. In this section, \
we will see how to represent binary relations with zero\[Dash]one matrices \
and digraphs.\
\>", "Text",ExpressionUUID->"10f885ad-ecd5-4a2f-85db-2c55ea16a1a1"],

Cell[CellGroupData[{

Cell["Representing Relations Using Matrices", "Subsection",
 CellTags->"Section3a",ExpressionUUID->"963b2763-ce77-4fda-b8a5-6b84f9658d69"],

Cell["\<\
We begin with representations of relations with zero\[Dash]one matrices. \
\>", "Text",ExpressionUUID->"c0b6c413-1e41-496a-b9bf-3197bdd7171a"],

Cell[CellGroupData[{

Cell["A First Example", "Subsubsection",ExpressionUUID->"85f03eec-8f23-4eb1-b5dd-abbd148fb86b"],

Cell[TextData[{
 "We create a matrix as a list of lists, where the inner lists store the \
elements in the rows of the matrix. The ",
 StyleBox[ButtonBox["MatrixForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MatrixForm"], "FunctionLink"],
 " function will display the matrix in the usual form."
}], "Text",ExpressionUUID->"07b0f009-fe61-4f9f-8013-8590aac9d6e8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}]}], "}"}], "//", "MatrixForm"}]], "Input",
 CellLabel->"In[76]:=",ExpressionUUID->"f0536831-6882-4b11-9517-8a464ca6fbd8"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "2"},
     {"3", "4"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[76]//MatrixForm=",ExpressionUUID->"3747705e-0e03-44fe-aa4f-\
c042883ed99f"]
}, Open  ]],

Cell[TextData[{
 "Be careful to not use ",
 StyleBox[ButtonBox["MatrixForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MatrixForm"], "FunctionLink"],
 " in conjunction with an assignment, lest the ",
 StyleBox[ButtonBox["MatrixForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MatrixForm"], "FunctionLink"],
 " be permanently attached to the matrix, which can cause other functions to \
fail."
}], "Text",ExpressionUUID->"e219b6d7-43c2-4028-ad3b-b17e9b835eb7"],

Cell[TextData[{
 "When working with matrix representations of relations, it can be useful to \
begin with a matrix of the correct size filled entirely with 0s, and then \
modify that matrix as needed. To do this, you can use the ",
 StyleBox[ButtonBox["ConstantArray",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ConstantArray"], "FunctionLink"],
 " function. The first argument to ",
 StyleBox[ButtonBox["ConstantArray",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ConstantArray"], "FunctionLink"],
 " is the constant that will be used as the filler in the resulting list. The \
second argument specifies the dimension. For an ordinary list, the second \
argument is the length of the list. For a matrix, the second argument must be \
a pair specifying the number of rows and the number of columns. "
}], "Text",ExpressionUUID->"8897b77a-f710-402b-96db-e326d70830ed"],

Cell[TextData[{
 "For example, to create a ",
 Cell[BoxData[
  FormBox[
   RowBox[{"4", "\[Times]", "4"}], TraditionalForm]],ExpressionUUID->
  "fe96bb0e-09d5-485a-b02e-f064b873dbdc"],
 " matrix filled with 0s, you would enter the following expression."
}], "Text",ExpressionUUID->"e1005f43-469a-4118-a651-6217e30f0806"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"exampleMatrix", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"exampleMatrix", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[77]:=",ExpressionUUID->"0de78262-d968-42c0-9e3e-0ca4965e0496"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[78]//MatrixForm=",ExpressionUUID->"dda43daf-f9d8-426a-9d46-\
ff0168b3aadd"]
}, Open  ]],

Cell[TextData[{
 "Right now, this matrix does not represent a very interesting relation. We \
need to change entries to 1 to represent elements of the domain that are \
related to each other. For instance, if ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", ",", "2"}], ")"}], "\[Element]", "R"}], TraditionalForm]],
  ExpressionUUID->"1b94c0de-ab8e-480b-a62f-39c387d2e312"],
 " then we need to change the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"1", ",", "2"}], ")"}], TraditionalForm]],ExpressionUUID->
  "00d4934a-78d5-4b14-bba1-e3b81f1eb3e7"],
 " entry to a 1. To do this, we use ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") and ",
 StyleBox[ButtonBox["Set",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Set"], "FunctionLink"],
 " (",
 StyleBox["=", "Code"],
 ") to specify the location and make the assignment."
}], "Text",ExpressionUUID->"d314a6c3-27b5-4627-96d5-a3fec3148291"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"exampleMatrix", "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "2"}], "]"}], "]"}], "=", "1"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[79]:=",ExpressionUUID->"c6b20f8f-1943-4eda-931e-b58b753ffb86"],

Cell[BoxData["1"], "Output",
 CellLabel->"Out[79]=",ExpressionUUID->"d248e84f-a3b3-4db8-b781-9f60b45812f3"]
}, Open  ]],

Cell["We can see that it modified the matrix.", "Text",ExpressionUUID->"65b66689-5478-4a7f-bff0-ed155e6ca072"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exampleMatrix", "//", "MatrixForm"}]], "Input",
 CellLabel->"In[80]:=",ExpressionUUID->"40bfe1f1-27ce-45ec-9118-524d30de10da"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "1", "0", "0"},
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[80]//MatrixForm=",ExpressionUUID->"185318d9-ce68-4a6d-a2f8-\
277caee64254"]
}, Open  ]],

Cell[TextData[{
 "We make this matrix represent the relation \[OpenCurlyDoubleQuote]is one \
less than\[CloseCurlyDoubleQuote] on ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], TraditionalForm]],
  ExpressionUUID->"5d1d17d2-0d23-4ce5-98f5-f6e45525c80a"],
 ", as in, \[OpenCurlyDoubleQuote]1 is one less than 2.\
\[CloseCurlyDoubleQuote]"
}], "Text",ExpressionUUID->"488c0fdf-6b35-4279-a27c-0359a947c4ff"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"exampleMatrix", "[", 
    RowBox[{"[", 
     RowBox[{"2", ",", "3"}], "]"}], "]"}], "=", "1"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"exampleMatrix", "[", 
    RowBox[{"[", 
     RowBox[{"3", ",", "4"}], "]"}], "]"}], "=", "1"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"exampleMatrix", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[81]:=",ExpressionUUID->"358b010e-7111-4fb4-8164-5d5b7b66c65d"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "1", "0", "0"},
     {"0", "0", "1", "0"},
     {"0", "0", "0", "1"},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[83]//MatrixForm=",ExpressionUUID->"4a86a173-4f8c-4b2e-9823-\
9cb956d16f4a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Transforming a Set of Pairs Representation into a Matrix Representation\
\>", "Subsubsection",ExpressionUUID->"6b9f4378-712b-4371-a443-dcf1f3902445"],

Cell[TextData[{
 "Now, we create a function to turn a relation satisfying ",
 StyleBox["relationQ", "Code"],
 " (defined in Section 9.1 of this manual) into a matrix representation. \
Doing so is fairly straightforward. Given a relation ",
 StyleBox["R", "Code"],
 ", whose domain consists of integers, we can use ",
 StyleBox["findDomain", "Code"],
 " from above to extract the domain. We then create a square matrix whose \
size is equal to the largest integer in the domain, which we can obtain with \
the ",
 StyleBox[ButtonBox["Max",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Max"], "FunctionLink"],
 " function. Then, we simply loop through the elements of the relation and \
set the value of the corresponding entry in the matrix to 1."
}], "Text",ExpressionUUID->"7ee4e23c-0956-41ea-bbb3-74546bfe35f1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"relationToMatrix", "[", 
   RowBox[{"R_", "?", "relationQ"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"u", ",", "max", ",", "m"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"max", "=", 
      RowBox[{"Max", "[", 
       RowBox[{"findDomain", "[", "R", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"m", "=", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"0", ",", 
        RowBox[{"{", 
         RowBox[{"max", ",", "max"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"m", "=", 
        RowBox[{"ReplacePart", "[", 
         RowBox[{"m", ",", 
          RowBox[{"u", "\[Rule]", "1"}]}], "]"}]}], "\[IndentingNewLine]", 
       ",", 
       RowBox[{"{", 
        RowBox[{"u", ",", "R"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "m"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[84]:=",ExpressionUUID->"f864b904-acd0-46ef-9428-1cddf5fd1751"],

Cell[TextData[{
 "Note the use of ",
 StyleBox[ButtonBox["ReplacePart",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReplacePart"], "FunctionLink"],
 " to modify the matrix ",
 StyleBox["m", "Code"],
 ". Recall that elements of the relation ",
 StyleBox["R", "Code"],
 " are pairs, such as ",
 StyleBox["{1,2}", "Code"],
 ". The expression ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"m", "[", 
    RowBox[{"[", "u", "]"}], "]"}], "=", "1"}]], "myCode",ExpressionUUID->
  "9d760fe7-5677-4b92-9b95-39c539c34e28"],
 ", therefore, would be resolved to an expression of the form ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"m", "[", 
    RowBox[{"[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}], "=", "1"}]], "myCode",
  ExpressionUUID->"dc0d725d-0d14-4f34-b282-3a7382460c82"],
 ". This does not set the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"1", ",", "2"}], ")"}], TraditionalForm]],ExpressionUUID->
  "1f3d82d7-e4c3-4627-bb63-8849348f15f4"],
 " element of ",
 StyleBox["m", "Code"],
 " to 1, however. Rather, ",
 StyleBox["m[[{1,2}]]", "Code"],
 " represents the list consisting of the first and second elements of ",
 StyleBox["m", "Code"],
 ", that is, ",
 StyleBox["m[[{1,2}]]", "Code"],
 " is the first two rows of ",
 StyleBox["m", "Code"],
 ". ",
 StyleBox[ButtonBox["ReplacePart",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReplacePart"], "FunctionLink"],
 " allows us to use the pair {1,2} to reference the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"1", ",", "2"}], ")"}], TraditionalForm]],ExpressionUUID->
  "93b2cf45-6966-4c06-b72e-0834e8744cd3"],
 " entry of ",
 StyleBox["m", "Code"],
 ". The ",
 StyleBox[ButtonBox["ReplacePart",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReplacePart"], "FunctionLink"],
 " function\[CloseCurlyQuote]s first argument is an expression to be \
manipulated, such as the matrix ",
 StyleBox["m", "Code"],
 ". Its second argument is a ",
 StyleBox[ButtonBox["Rule",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Rule"], "FunctionLink"],
 " (",
 StyleBox["->", "Code"],
 ") with left operand a location specification and right operand the new \
value. "
}], "Text",ExpressionUUID->"ba09dd17-4785-4b4b-a82d-eda2f915b340"],

Cell[TextData[{
 "We use the function above to convert the relations we defined earlier, \
specifically ",
 StyleBox["div6", "Code"],
 " and ",
 StyleBox["divOrMul6", "Code"],
 " into matrices."
}], "Text",ExpressionUUID->"5ce4af58-bd92-41cb-be17-8f69ea6646b3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"div6M", "=", 
   RowBox[{"relationToMatrix", "[", "div6", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"div6M", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[85]:=",ExpressionUUID->"d2c8805f-f8a0-4cb9-a5c1-7361003de3ad"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", "1", "1", "1", "1"},
     {"0", "1", "0", "1", "0", "1"},
     {"0", "0", "1", "0", "0", "1"},
     {"0", "0", "0", "1", "0", "0"},
     {"0", "0", "0", "0", "1", "0"},
     {"0", "0", "0", "0", "0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[86]//MatrixForm=",ExpressionUUID->"549c4ed4-caa6-443e-82ea-\
5d1d5928a51e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"divOrMul6M", "=", 
   RowBox[{"relationToMatrix", "[", "divOrMul6", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"divOrMul6M", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[87]:=",ExpressionUUID->"685bf492-c39f-4709-885b-4c56a32c7bcc"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", "1", "1", "1", "1"},
     {"1", "1", "0", "1", "0", "1"},
     {"1", "0", "1", "0", "0", "1"},
     {"1", "1", "0", "1", "0", "0"},
     {"1", "0", "0", "0", "1", "0"},
     {"1", "1", "1", "0", "0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[88]//MatrixForm=",ExpressionUUID->"9672f4f3-6d29-4350-a143-\
6bd52616633f"]
}, Open  ]],

Cell["\<\
As before, it can be useful to have a predicate that we can use to ensure \
that an argument to a function is in fact the matrix associated to a \
relation. Any such matrix must be square and consist entirely of 0s and 1s.\
\>", "Text",ExpressionUUID->"4d109d20-8f01-4915-8a9f-5f2a52fac4af"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["MatrixQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MatrixQ"], "FunctionLink"],
 " function can be used to ensure that an expression does represent a matrix. \
It requires only one argument and returns ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 " only if the expression is a list of lists. ",
 StyleBox[ButtonBox["MatrixQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MatrixQ"], "FunctionLink"],
 " can also accept a second optional argument to place specific demands on \
the allowed elements of the matrix. Here, we insist that the elements be 0 or \
1, so we create a pure ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " (",
 StyleBox["&", "Code"],
 ") that tests equality for 0 or 1."
}], "Text",ExpressionUUID->"e3600943-3822-4e98-937b-2e862e9b336c"],

Cell[TextData[{
 "The other requirement is that the matrix be square. We use the ",
 StyleBox[ButtonBox["Dimensions",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dimensions"], "FunctionLink"],
 " function to obtain a list containing the number of rows and columns and \
compare those values. Here is the predicate. "
}], "Text",ExpressionUUID->"93bcfc8c-79dd-4231-80b3-c24c425e74b4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"matrix01Q", "[", "m_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"MatrixQ", "[", 
     RowBox[{"m", ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"#", "\[Equal]", "0"}], "||", 
         RowBox[{"#", "\[Equal]", "1"}]}], ")"}], "&"}]}], "]"}], "&&", 
    RowBox[{
     RowBox[{
      RowBox[{"Dimensions", "[", "m", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
     RowBox[{
      RowBox[{"Dimensions", "[", "m", "]"}], "[", 
      RowBox[{"[", "2", "]"}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"matrix01Q", "[", "___", "]"}], "=", "False"}], ";"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[89]:=",ExpressionUUID->"a739b15b-7e00-4012-842b-fa8d9bfc155e"],

Cell["\<\
Now that we have zero\[Dash]one matrix representations of relations to work \
with, we can use these matrices to check properties of the relations. It is \
sometimes easier to determine whether a relation is reflexive, symmetric, or \
antisymmetric using the matrix form. \
\>", "Text",ExpressionUUID->"c65a3756-e372-4fb4-ad64-0481853a34f7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Checking Properties", "Subsubsection",ExpressionUUID->"7ed60136-ff7f-4694-8075-e62a0bf0e426"],

Cell["\<\
For example, to determine whether or not a relation is reflexive from its \
zero\[Dash]one matrix representation, we only need to check the diagonal \
entries. If any diagonal entry is 0, then the relation is not reflexive. \
\>", "Text",ExpressionUUID->"9394b628-ca4e-4659-9d3f-9e118128a5b2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"reflexiveMatrixQ", "[", 
   RowBox[{"m_", "?", "matrix01Q"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", "dim"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"dim", "=", 
      RowBox[{
       RowBox[{"Dimensions", "[", "m", "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "1"}], ",", 
         RowBox[{"i", "\[LessEqual]", "dim"}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"m", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "i"}], "]"}], "]"}], "\[Equal]", "0"}], ",", 
           RowBox[{"Throw", "[", "False", "]"}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Throw", "[", "True", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[91]:=",ExpressionUUID->"796d356a-580c-4c08-b171-84ebc2c489d8"],

Cell["We can now use this to test a few of the relations above. ", "Text",ExpressionUUID->"8973eba0-de3f-4139-8664-e954d94352bf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reflexiveMatrixQ", "[", "exampleMatrix", "]"}]], "Input",
 CellLabel->"In[92]:=",ExpressionUUID->"fcf2c74f-8aca-4778-8ab8-8bafc206b906"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[92]=",ExpressionUUID->"c9072ebd-7660-4be6-bb8c-8d9f240cf32d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reflexiveMatrixQ", "[", "div6M", "]"}]], "Input",
 CellLabel->"In[93]:=",ExpressionUUID->"1bc42209-88ef-46e4-afc8-ca7356b265d7"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[93]=",ExpressionUUID->"d6189838-c92e-4d56-be01-0c38b42432e5"]
}, Open  ]],

Cell[TextData[{
 "Symmetry is particularly easy to test, because of the fact that a relation \
is symmetric if and only if its matrix representation is symmetric. The \
Wolfram Language has a built-in test, ",
 StyleBox[ButtonBox["SymmetricMatrixQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SymmetricMatrixQ"], "FunctionLink"],
 ", that checks symmetry."
}], "Text",ExpressionUUID->"2577668f-abf6-4761-bf76-77a7abfdfe8d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SymmetricMatrixQ", "[", "div6M", "]"}]], "Input",
 CellLabel->"In[94]:=",ExpressionUUID->"cb83160b-0e4f-4224-bdb5-2a941ce16496"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[94]=",ExpressionUUID->"42f87231-0c30-43f9-a282-f3fc93a5bd64"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SymmetricMatrixQ", "[", "divOrMul6M", "]"}]], "Input",
 CellLabel->"In[95]:=",ExpressionUUID->"35be4a89-6a75-449d-b73e-824e6868dfdf"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[95]=",ExpressionUUID->"c682932c-c880-4640-9646-f49578a6c177"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Representing Relations Using Digraphs", "Subsection",
 CellTags->"Section3b",ExpressionUUID->"948e77f4-93ff-4596-8ac0-00ad440c4ec9"],

Cell[TextData[{
 "Now, we turn to representing relations with directed graphs, commonly \
called digraphs. You create a graph in the Wolfram Language with ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 ". Note that graphs and ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 " are discussed in much more detail in Chapter 10 of this manual. "
}], "Text",ExpressionUUID->"ae040dd1-7974-4ff8-841d-a72a156389de"],

Cell[TextData[{
 "The only required argument to ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 " is a list specifying the edges in the graph. For simplicity, in this \
chapter we will require all edges to be given as rules. For example, consider \
Bob and his sister Barb, whose parents are Ann and Abe. We can make a \
directed graph representing the relation \[OpenCurlyDoubleQuote]parent of\
\[CloseCurlyDoubleQuote] as follows."
}], "Text",ExpressionUUID->"87bd208e-ea5f-41aa-b7f4-bb8ef813f740"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\"\<Ann\>\"", "\[Rule]", "\"\<Bob\>\""}], ",", 
    RowBox[{"\"\<Ann\>\"", "\[Rule]", "\"\<Barb\>\""}], ",", 
    RowBox[{"\"\<Abe\>\"", "\[Rule]", "\"\<Bob\>\""}], ",", 
    RowBox[{"\"\<Abe\>\"", "\[Rule]", "\"\<Barb\>\""}]}], "}"}], 
  "]"}]], "Input",
 CellLabel->"In[96]:=",ExpressionUUID->"ab8d0ac5-6004-45d3-834e-53b4c2bdeead"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Ann", "Bob", "Barb", "Abe"}, {{{1, 2}, {1, 3}, {4, 2}, {4, 3}}, 
       Null}]]}, 
    TagBox[
     GraphicsGroupBox[
      GraphicsComplexBox[{{0., 1.}, {0., 0.}, {1., 0.}, {1., 1.}}, {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
         ArrowBox[{1, 2}, 0.01273], ArrowBox[{1, 3}, 0.01273], 
         ArrowBox[{4, 2}, 0.01273], ArrowBox[{4, 3}, 0.01273]}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         DiskBox[1, 0.01273], DiskBox[2, 0.01273], DiskBox[3, 0.01273], 
         DiskBox[4, 0.01273]}}]],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->"Out[96]=",ExpressionUUID->"6161e5cd-d0fe-48d3-bc4b-b512dd5d2bef"]
}, Open  ]],

Cell[TextData[{
 "To make this more informative, we need to provide some options. In \
particular, we want to see the names of the people associated with each \
vertex. To do this, we use the option ",
 StyleBox[ButtonBox["VertexLabels",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexLabels"], "FunctionLink"],
 " with value ",
 StyleBox["\[OpenCurlyDoubleQuote]Name\[CloseCurlyDoubleQuote]", "Code"],
 "."
}], "Text",ExpressionUUID->"d848ba1d-e54d-4a6b-98ad-2842c77ffc66"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<Ann\>\"", "\[Rule]", "\"\<Bob\>\""}], ",", 
     RowBox[{"\"\<Ann\>\"", "\[Rule]", "\"\<Barb\>\""}], ",", 
     RowBox[{"\"\<Abe\>\"", "\[Rule]", "\"\<Bob\>\""}], ",", 
     RowBox[{"\"\<Abe\>\"", "\[Rule]", "\"\<Barb\>\""}]}], "}"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]], "Input",
 CellLabel->"In[97]:=",ExpressionUUID->"9e99bfd9-5c22-4428-a2e3-5b1d2fe9700b"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Ann", "Bob", "Barb", "Abe"}, {{{1, 2}, {1, 3}, {4, 2}, {4, 3}}, 
       Null}, {VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{0., 1.}, {0., 0.}}, 0.01273], 
        ArrowBox[{{0., 1.}, {1., 0.}}, 0.01273], 
        ArrowBox[{{1., 1.}, {0., 0.}}, 0.01273], 
        ArrowBox[{{1., 1.}, {1., 0.}}, 0.01273]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 1.}, 0.01273], 
         InsetBox["\<\"Ann\"\>", Offset[{2, 2}, {0.01273, 1.01273}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.01273], 
         InsetBox["\<\"Bob\"\>", Offset[{2, 2}, {0.01273, 0.01273}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.01273], 
         InsetBox["\<\"Barb\"\>", Offset[{2, 2}, {1.01273, 0.01273}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.01273], 
         InsetBox["\<\"Abe\"\>", Offset[{2, 2}, {1.01273, 1.01273}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->"Out[97]=",ExpressionUUID->"fb0dcccc-c3d7-4466-924b-174417140265"]
}, Open  ]],

Cell[TextData[{
 "Listing the name of each vertex to the side like that can be difficult to \
read. So instead, we will increase the size of each vertex with the ",
 StyleBox[ButtonBox["VertexSize",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexSize"], "FunctionLink"],
 " option and use the ",
 StyleBox[ButtonBox["Placed",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Placed"], "FunctionLink"],
 " wrapper to put the name of each vertex in its center."
}], "Text",ExpressionUUID->"c42cf3c5-7bb3-4b4c-966c-497ac86c146d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<Ann\>\"", "\[Rule]", "\"\<Bob\>\""}], ",", 
     RowBox[{"\"\<Ann\>\"", "\[Rule]", "\"\<Barb\>\""}], ",", 
     RowBox[{"\"\<Abe\>\"", "\[Rule]", "\"\<Bob\>\""}], ",", 
     RowBox[{"\"\<Abe\>\"", "\[Rule]", "\"\<Barb\>\""}]}], "}"}], ",", 
   RowBox[{"VertexSize", "\[Rule]", "Small"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Name\>\"", ",", "Center"}], "]"}]}]}], "]"}]], "Input",
 CellLabel->"In[98]:=",ExpressionUUID->"58c6cad9-82fe-4d10-bc90-59a30674b916"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Ann", "Bob", "Barb", "Abe"}, {{{1, 2}, {1, 3}, {4, 2}, {4, 3}}, 
       Null}, {VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Small}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{0., 1.}, {0., 0.}}, 0.05], 
        ArrowBox[{{0., 1.}, {1., 0.}}, 0.05], 
        ArrowBox[{{1., 1.}, {0., 0.}}, 0.05], 
        ArrowBox[{{1., 1.}, {1., 0.}}, 0.05]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 1.}, 0.05], InsetBox["\<\"Ann\"\>", {0., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.05], 
         InsetBox["\<\"Bob\"\>", {0., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.05], 
         InsetBox["\<\"Barb\"\>", {1., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.05], 
         InsetBox["\<\"Abe\"\>", {1., 1.},
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->"Out[98]=",ExpressionUUID->"7de613d4-c991-44c2-b217-ea5bede86759"]
}, Open  ]],

Cell[TextData[{
 "Possible value for ",
 StyleBox[ButtonBox["VertexSize",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexSize"], "FunctionLink"],
 " include ",
 StyleBox["Tiny", "Code"],
 ", ",
 StyleBox["Small", "Code"],
 ", ",
 StyleBox["Medium", "Code"],
 ", and ",
 StyleBox["Large", "Code"],
 ", or a number between 0 and 1. A number causes the diameter of the vertices \
to be that proportion of the distance between the closest two vertices. More \
details about the use of ",
 StyleBox[ButtonBox["VertexLabels",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexLabels"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Placed",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Placed"], "FunctionLink"],
 " will be given in Chapter 10. "
}], "Text",ExpressionUUID->"7d2c7739-1455-43c1-ae0c-dd25e26a8ae0"],

Cell[TextData[{
 "Given an adjacency matrix, the function ",
 StyleBox[ButtonBox["AdjacencyGraph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AdjacencyGraph"], "FunctionLink"],
 " will produce the ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 ". The following draws a graph of the \[OpenCurlyDoubleQuote]divisible\
\[CloseCurlyDoubleQuote] relation using the ",
 StyleBox["div6M", "Code"],
 " matrix. Note that the labels in this case are automatically chosen to be \
the integers from 1 to ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "b712b116-ef82-433d-ab6b-7cd7e333896c"],
 ", where ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "dcb1b6b9-c25d-4e3b-8063-ae24ed9717d6"],
 " is the size of the matrix. An optional first argument can be provided to \
specify the vertex names."
}], "Text",ExpressionUUID->"9f0d5227-6c23-4652-bc63-a79fceb57f83"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AdjacencyGraph", "[", 
  RowBox[{"div6M", ",", 
   RowBox[{"VertexSize", "\[Rule]", "Medium"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Name\>\"", ",", "Center"}], "]"}]}]}], "]"}]], "Input",
 CellLabel->"In[99]:=",ExpressionUUID->"4f0212f7-931b-4cd5-8510-9def4ae285f5"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 6}, {
      SparseArray[
       Automatic, {6, 6}, 0, {
        1, {{0, 6, 9, 11, 12, 13, 14}, {{1}, {2}, {3}, {4}, {5}, {6}, {2}, {
          4}, {6}, {3}, {6}, {4}, {5}, {6}}}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
         1, 1, 1, 1}}], Null}, {VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Medium}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{0., 2.}, {0., 1.}}, 0.1], 
        ArrowBox[{{0., 2.}, {1., 1.}}, 0.1], 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQjQYcZvKamy4+tGL/JPewZ68s/9vLrV8TfOvwrv18
pkejDgX/s6/aM1P07OSj+4tO+MS2+f611/g0fYLHsXP79zC+fWum/sfepybj
7PqaK/vfPljKc+XBL/sn6UpSnWK39rOnle+Mrfpp//6ujXiExIP9HBMTv1z+
/N1e1sa8dVLq4/2fElP2mvl+s6/2Y7j++dOz/Ydu1Iu0tX2xj5gcKmp/88X+
1C4VP7X6z/bnWkJ9Qtpe7b/fK2T7NvuT/SMlhhrjX6/36z/2fHjL56N9f27o
kjsmb/eHdJ2yeq/4wf5aSuhRf7N3++ezaU4OufbWficHw/2ef+/2O83xl5YI
fG1vFhn6cXLv+/0Tr3LwaW55Ye8XFvon5fH7/T2bQrLb/z+1hwTLh/3GYPAY
zp+3sfu6ff4DOP8cf/eUxuW37RmhfPGcg2I5B6/B5SUrdpna61yC81ekv3n0
9fxpOH+K3cvJdi8Pw/kPXl77s8FjJ5z/T+tMJx/rCjgfFmEAJyTJ2Q==
         "]], 0.1], 
        ArrowBox[{{0., 2.}, {-2., 1.}}, 0.1], 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQjQYc8vev+PPl0w575l1SERkW/+1PCU14VKty2v7y
v2uKO3z/2c/piRRrZbhmn3vOJPa9/V/7hp1x6/rb79tf1DDh4uP/Y895YnXM
euGn9v94r2qI7P5lr8axSPrn+1f232rFdzK6/LTv4+PsClrzwX5Hxe9d11Z+
ty9l/rfoptoXe9d/DXqT33y1P/Zo/Y2Jz7/bz+FbIWzO88X+wLrX3D5tP+13
qDnub5L7bL+NNV4p7eQv+/7SNcwfFD/ZL3nOKfNgw297ud8vH9SJfbTvCHnz
Y6fNH/uTeZ/Xxv14b5/mw7bzcw6QH7L9NNOyt/Z258Njeh3/2FutkJd+Zfra
nu/ug0dtu37by2TqzBFZ8cL+RulCnwfXf9nnT7/r1/Tnqf2smSDw094YDB7b
n79x9PV88x/28zZ2X7fPf2D/+bBS6oOX3+zP8XdPaVx+2549egNr9Iav9uI5
B8VyDl6zZ5+Xd5a/+4u9ZMUuU3udS/Zfe2L3/Kv8bL8i/c2jr+dP219SrwWi
T/ZT7F5Otnt52B6sfMpH+wcvr/3Z4LHTPiLRr0TjwAf7f1pnOvlYV9hDoumD
PSzCAPqf3xU=
         "]], 0.1], 
        ArrowBox[BezierCurveBox[{{0., 2.}, {-0.28933755257078453`, 
         2.1341854347188893`}, {-0.3748666889890278, 
         2.43579957945292}, {-0.285453852010028, 2.628663380559333}, {
         0.28545385201002776`, 2.628663380559333}, {0.3748666889890277, 
         2.4357995794529206`}, {0.28933755257078453`, 2.1341854347188893`}, {
         0., 2.}},
         SplineDegree->7], 0.1], ArrowBox[{{0., 1.}, {-1., 0.}}, 0.1], 
        ArrowBox[{{0., 1.}, {1., 0.}}, 0.1], 
        ArrowBox[BezierCurveBox[{{0., 1.}, {0.18210546221036392`, 
         1.430428627189827}, {0.39936740862500514`, 1.4993102371676186`}, {
         0.5476555514121827, 1.4591980431399016`}, {0.7119530043698294, 
         1.0625489039461953`}, {0.6354610574407263, 0.9293297482065539}, {
         0.433127008322802, 0.824409006117316}, {0., 1.}},
         SplineDegree->7], 0.1], ArrowBox[{{1., 1.}, {1., 0.}}, 0.1], 
        ArrowBox[BezierCurveBox[{{1., 1.}, {1.0132464889680084`, 
         1.3186635855386826`}, {1.2591710405119212`, 1.5131049402655432`}, {
         1.4715707702690874`, 1.5043040316232572`}, {1.6900476900071553`, 
         0.9768540889261161}, {1.546081582955237, 0.8204416175110697}, {
         1.2346958644278136`, 0.7840374999245701}, {1., 1.}},
         SplineDegree->7], 0.1], 
        ArrowBox[BezierCurveBox[{{-1., 
         0.}, {-0.78403749992457, -0.23469586442781354`}, \
{-0.8204416175110695, -0.546081582955237}, {-0.9768540889261157, \
-0.6900476900071553}, {-1.5043040316232568`, -0.47157077026908745`}, \
{-1.513104940265543, -0.2591710405119212}, {-1.3186635855386823`, \
-0.013246488968008452`}, {-1., 0.}},
         SplineDegree->7], 0.1], 
        ArrowBox[BezierCurveBox[{{-2., 1.}, {-1.99062341425038, 
         0.6811990748789634}, {-2.2221455138730724`, 
         0.4698135435235948}, {-2.434634778051478, 
         0.4635355022074675}, {-2.6899524650649127`, 
         0.9741708762343373}, {-2.5574364735049677`, 
         1.1403954627873851`}, {-2.2494147886470572`, 
         1.198781823672318}, {-2., 1.}},
         SplineDegree->7], 0.1], 
        ArrowBox[BezierCurveBox[{{1., 0.}, {
         1.2893375525707844`, -0.13418543471888908`}, {
         1.3748666889890278`, -0.43579957945292014`}, {
         1.2854538520100278`, -0.6286633805593327}, {
         0.7145461479899722, -0.6286633805593327}, {
         0.6251333110109722, -0.4357995794529201}, {
         0.7106624474292155, -0.13418543471888908`}, {1., 0.}},
         SplineDegree->7], 0.1]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 2.}, 0.1], InsetBox["1", {0., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], 
         InsetBox["2", {0., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], 
         InsetBox["3", {1., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 0.}, 0.1], 
         InsetBox["4", {-1., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{-2., 1.}, 0.1], 
         InsetBox["5", {-2., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.1], 
         InsetBox["6", {1., 0.},
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->"Out[99]=",ExpressionUUID->"f70cb329-9c53-4ad5-bac0-fe3291c1d8a1"]
}, Open  ]],

Cell[TextData[{
 "Note that the reflexivity of the divisibility relation is apparent from the \
fact that all vertices have self-loops. When there are more than just a few \
vertices, this can become distracting. One way to remove the self-loops is by \
applying the ",
 StyleBox[ButtonBox["SimpleGraph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SimpleGraph"], "FunctionLink"],
 " function. Note that this does not merely suppress the display of the \
loops; it actually deletes those edges from the graph."
}], "Text",ExpressionUUID->"0ccdbc3c-909f-4354-918e-f39adb5b06bd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SimpleGraph", "[", 
  RowBox[{
   RowBox[{"AdjacencyGraph", "[", "div6M", "]"}], ",", 
   RowBox[{"VertexSize", "\[Rule]", "Medium"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Name\>\"", ",", "Center"}], "]"}]}]}], "]"}]], "Input",
 CellLabel->
  "In[100]:=",ExpressionUUID->"6df7fd4a-9125-497b-ad28-6f2e6b3d552c"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 6}, {
       SparseArray[
       Automatic, {6, 6}, 0, {
        1, {{0, 5, 7, 8, 8, 8, 8}, {{2}, {3}, {4}, {5}, {6}, {4}, {6}, {6}}}, 
         Pattern}], Null}, {VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Medium}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{0., 2.}, {0., 1.}}, 0.1], 
        ArrowBox[{{0., 2.}, {1., 1.}}, 0.1], 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQjQYcZvKamy4+tGL/JPewZ68s/9vLrV8TfOvwrv18
pkejDgX/s6/aM1P07OSj+4tO+MS2+f611/g0fYLHsXP79zC+fWum/sfepybj
7PqaK/vfPljKc+XBL/sn6UpSnWK39rOnle+Mrfpp//6ujXiExIP9HBMTv1z+
/N1e1sa8dVLq4/2fElP2mvl+s6/2Y7j++dOz/Ydu1Iu0tX2xj5gcKmp/88X+
1C4VP7X6z/bnWkJ9Qtpe7b/fK2T7NvuT/SMlhhrjX6/36z/2fHjL56N9f27o
kjsmb/eHdJ2yeq/4wf5aSuhRf7N3++ezaU4OufbWficHw/2ef+/2O83xl5YI
fG1vFhn6cXLv+/0Tr3LwaW55Ye8XFvon5fH7/T2bQrLb/z+1hwTLh/3GYPAY
zp+3sfu6ff4DOP8cf/eUxuW37RmhfPGcg2I5B6/B5SUrdpna61yC81ekv3n0
9fxpOH+K3cvJdi8Pw/kPXl77s8FjJ5z/T+tMJx/rCjgfFmEAJyTJ2Q==
         "]], 0.1], 
        ArrowBox[{{0., 2.}, {-2., 1.}}, 0.1], 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQjQYc8vev+PPl0w575l1SERkW/+1PCU14VKty2v7y
v2uKO3z/2c/piRRrZbhmn3vOJPa9/V/7hp1x6/rb79tf1DDh4uP/Y895YnXM
euGn9v94r2qI7P5lr8axSPrn+1f232rFdzK6/LTv4+PsClrzwX5Hxe9d11Z+
ty9l/rfoptoXe9d/DXqT33y1P/Zo/Y2Jz7/bz+FbIWzO88X+wLrX3D5tP+13
qDnub5L7bL+NNV4p7eQv+/7SNcwfFD/ZL3nOKfNgw297ud8vH9SJfbTvCHnz
Y6fNH/uTeZ/Xxv14b5/mw7bzcw6QH7L9NNOyt/Z258Njeh3/2FutkJd+Zfra
nu/ug0dtu37by2TqzBFZ8cL+RulCnwfXf9nnT7/r1/Tnqf2smSDw094YDB7b
n79x9PV88x/28zZ2X7fPf2D/+bBS6oOX3+zP8XdPaVx+2549egNr9Iav9uI5
B8VyDl6zZ5+Xd5a/+4u9ZMUuU3udS/Zfe2L3/Kv8bL8i/c2jr+dP219SrwWi
T/ZT7F5Otnt52B6sfMpH+wcvr/3Z4LHTPiLRr0TjwAf7f1pnOvlYV9hDoumD
PSzCAPqf3xU=
         "]], 0.1], ArrowBox[{{0., 1.}, {-1., 0.}}, 0.1], 
        ArrowBox[{{0., 1.}, {1., 0.}}, 0.1], 
        ArrowBox[{{1., 1.}, {1., 0.}}, 0.1]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 2.}, 0.1], InsetBox["1", {0., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], 
         InsetBox["2", {0., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], 
         InsetBox["3", {1., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 0.}, 0.1], 
         InsetBox["4", {-1., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{-2., 1.}, 0.1], 
         InsetBox["5", {-2., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.1], 
         InsetBox["6", {1., 0.},
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->
  "Out[100]=",ExpressionUUID->"dc698ee5-a902-4802-a4ca-a21a3a2c3987"]
}, Open  ]],

Cell[TextData[{
 "A different approach, which preserves the edges internally while not \
displaying them, is to use the ",
 StyleBox[ButtonBox["EdgeShapeFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/EdgeShapeFunction"], "FunctionLink"],
 " option. A full discussion of this option would be rather involved, but \
generally, ",
 StyleBox[ButtonBox["EdgeShapeFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/EdgeShapeFunction"], "FunctionLink"],
 " allows you to define the function that controls how edges are drawn. \
Below, we use ",
 StyleBox[ButtonBox["EdgeShapeFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/EdgeShapeFunction"], "FunctionLink"],
 " in combination with a pattern to suppress the drawing of self-loops."
}], "Text",ExpressionUUID->"a35aa1f0-2e1c-47ee-a8ef-e13d36dfdbd8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AdjacencyGraph", "[", 
  RowBox[{"div6M", ",", 
   RowBox[{"VertexSize", "\[Rule]", "Medium"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Name\>\"", ",", "Center"}], "]"}]}], ",", 
   RowBox[{"EdgeShapeFunction", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x_", "\[DirectedEdge]", "x_"}], "\[Rule]", "None"}], "}"}]}]}],
   "]"}]], "Input",
 CellLabel->
  "In[101]:=",ExpressionUUID->"128245cc-cbe3-445a-a92e-1ebdfdefb63d"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 6}, {
      SparseArray[
       Automatic, {6, 6}, 0, {
        1, {{0, 6, 9, 11, 12, 13, 14}, {{1}, {2}, {3}, {4}, {5}, {6}, {2}, {
          4}, {6}, {3}, {6}, {4}, {5}, {6}}}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
         1, 1, 1, 1}}], Null}, {
      EdgeShapeFunction -> {
        DirectedEdge[4, 4] -> None, DirectedEdge[1, 1] -> None, 
         DirectedEdge[2, 2] -> None, DirectedEdge[6, 6] -> None, 
         DirectedEdge[5, 5] -> None, DirectedEdge[3, 3] -> None}, 
       VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Medium}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[{{Medium, 0.8}}], 
        ArrowBox[{{0., 2.}, {0., 1.}}], ArrowBox[{{0., 2.}, {1., 1.}}], 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQjQYcZvKamy4+tGL/JPewZ68s/9vLrV8TfOvwrv18
pkejDgX/s6/aM1P07OSj+4tO+MS2+f611/g0fYLHsXP79zC+fWum/sfepybj
7PqaK/vfPljKc+XBL/sn6UpSnWK39rOnle+Mrfpp//6ujXiExIP9HBMTv1z+
/N1e1sa8dVLq4/2fElP2mvl+s6/2Y7j++dOz/Ydu1Iu0tX2xj5gcKmp/88X+
1C4VP7X6z/bnWkJ9Qtpe7b/fK2T7NvuT/SMlhhrjX6/36z/2fHjL56N9f27o
kjsmb/eHdJ2yeq/4wf5aSuhRf7N3++ezaU4OufbWficHw/2ef+/2O83xl5YI
fG1vFhn6cXLv+/0Tr3LwaW55Ye8XFvon5fH7/T2bQrLb/z+1hwTLh/3GYPAY
zp+3sfu6ff4DOP8cf/eUxuW37RmhfPGcg2I5B6/B5SUrdpna61yC81ekv3n0
9fxpOH+K3cvJdi8Pw/kPXl77s8FjJ5z/T+tMJx/rCjgfFmEAJyTJ2Q==
         "]]], 
        ArrowBox[{{0., 2.}, {-2., 1.}}], 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQjQYc8vev+PPl0w575l1SERkW/+1PCU14VKty2v7y
v2uKO3z/2c/piRRrZbhmn3vOJPa9/V/7hp1x6/rb79tf1DDh4uP/Y895YnXM
euGn9v94r2qI7P5lr8axSPrn+1f232rFdzK6/LTv4+PsClrzwX5Hxe9d11Z+
ty9l/rfoptoXe9d/DXqT33y1P/Zo/Y2Jz7/bz+FbIWzO88X+wLrX3D5tP+13
qDnub5L7bL+NNV4p7eQv+/7SNcwfFD/ZL3nOKfNgw297ud8vH9SJfbTvCHnz
Y6fNH/uTeZ/Xxv14b5/mw7bzcw6QH7L9NNOyt/Z258Njeh3/2FutkJd+Zfra
nu/ug0dtu37by2TqzBFZ8cL+RulCnwfXf9nnT7/r1/Tnqf2smSDw094YDB7b
n79x9PV88x/28zZ2X7fPf2D/+bBS6oOX3+zP8XdPaVx+2549egNr9Iav9uI5
B8VyDl6zZ5+Xd5a/+4u9ZMUuU3udS/Zfe2L3/Kv8bL8i/c2jr+dP219SrwWi
T/ZT7F5Otnt52B6sfMpH+wcvr/3Z4LHTPiLRr0TjwAf7f1pnOvlYV9hDoumD
PSzCAPqf3xU=
         "]]], {}, ArrowBox[{{0., 1.}, {-1., 0.}}], 
        ArrowBox[{{0., 1.}, {1., 0.}}], {}, 
        ArrowBox[{{1., 1.}, {1., 0.}}], {}, {}, {}, {}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 2.}, 0.1], InsetBox["1", {0., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], 
         InsetBox["2", {0., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], 
         InsetBox["3", {1., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 0.}, 0.1], 
         InsetBox["4", {-1., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{-2., 1.}, 0.1], 
         InsetBox["5", {-2., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.1], 
         InsetBox["6", {1., 0.},
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->
  "Out[101]=",ExpressionUUID->"ecc2209a-a1ff-4741-b989-1b367fa4758c"]
}, Open  ]],

Cell[TextData[{
 "In order to represent a relation satisfying ",
 StyleBox["relationQ", "Code"],
 " as a graph, we will create a function ",
 StyleBox["drawRelation", "Code"],
 ". At minimum, we need to transform the ordered pairs of the relation into \
rules. To do this, we can use the ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " function at level 1 as shown below."
}], "Text",ExpressionUUID->"5578572e-b8ab-493a-9e66-08967888d877"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"Rule", ",", "div6", ",", 
   RowBox[{"{", "1", "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[102]:=",ExpressionUUID->"17dd6efe-ca8a-41b4-a660-533655b7c594"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "1"}], ",", 
   RowBox[{"1", "\[Rule]", "2"}], ",", 
   RowBox[{"1", "\[Rule]", "3"}], ",", 
   RowBox[{"1", "\[Rule]", "4"}], ",", 
   RowBox[{"1", "\[Rule]", "5"}], ",", 
   RowBox[{"1", "\[Rule]", "6"}], ",", 
   RowBox[{"2", "\[Rule]", "2"}], ",", 
   RowBox[{"2", "\[Rule]", "4"}], ",", 
   RowBox[{"2", "\[Rule]", "6"}], ",", 
   RowBox[{"3", "\[Rule]", "3"}], ",", 
   RowBox[{"3", "\[Rule]", "6"}], ",", 
   RowBox[{"4", "\[Rule]", "4"}], ",", 
   RowBox[{"5", "\[Rule]", "5"}], ",", 
   RowBox[{"6", "\[Rule]", "6"}]}], "}"}]], "Output",
 CellLabel->
  "Out[102]=",ExpressionUUID->"b40d52c3-4da5-4b5a-989e-3bf4fda90cc0"]
}, Open  ]],

Cell[TextData[{
 "Recall that ",
 StyleBox["@@@", "Code"],
 " is the operator form of the above expression."
}], "Text",ExpressionUUID->"6d94ffcf-0e69-4f32-8a19-66dca1dd8c29"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Rule", "@@@", "div6"}]], "Input",
 CellLabel->
  "In[103]:=",ExpressionUUID->"331082b9-622d-4544-8f3a-9d94929c6b10"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "1"}], ",", 
   RowBox[{"1", "\[Rule]", "2"}], ",", 
   RowBox[{"1", "\[Rule]", "3"}], ",", 
   RowBox[{"1", "\[Rule]", "4"}], ",", 
   RowBox[{"1", "\[Rule]", "5"}], ",", 
   RowBox[{"1", "\[Rule]", "6"}], ",", 
   RowBox[{"2", "\[Rule]", "2"}], ",", 
   RowBox[{"2", "\[Rule]", "4"}], ",", 
   RowBox[{"2", "\[Rule]", "6"}], ",", 
   RowBox[{"3", "\[Rule]", "3"}], ",", 
   RowBox[{"3", "\[Rule]", "6"}], ",", 
   RowBox[{"4", "\[Rule]", "4"}], ",", 
   RowBox[{"5", "\[Rule]", "5"}], ",", 
   RowBox[{"6", "\[Rule]", "6"}]}], "}"}]], "Output",
 CellLabel->
  "Out[103]=",ExpressionUUID->"8101c7b2-0d05-4ff9-96f3-480ed8404783"]
}, Open  ]],

Cell["That is all that is necessary to graph the relation.", "Text",ExpressionUUID->"ec217666-ba00-4d82-8ab7-f047e0158578"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"Rule", "@@@", "div6"}], ",", 
   RowBox[{"VertexSize", "\[Rule]", "Medium"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Name\>\"", ",", "Center"}], "]"}]}]}], "]"}]], "Input",
 CellLabel->
  "In[104]:=",ExpressionUUID->"2bbad3d6-2543-49a3-b4f1-74cae2ca07b2"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 
      6}, {{{1, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {2, 2}, {2, 4}, {
       2, 6}, {3, 3}, {3, 6}, {4, 4}, {5, 5}, {6, 6}}, Null}, {VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Medium}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{0., 2.}, {0., 1.}}, 0.1], 
        ArrowBox[{{0., 2.}, {1., 1.}}, 0.1], 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQjQYcZvKamy4+tGL/JPewZ68s/9vLrV8TfOvwrv18
pkejDgX/s6/aM1P07OSj+4tO+MS2+f611/g0fYLHsXP79zC+fWum/sfepybj
7PqaK/vfPljKc+XBL/sn6UpSnWK39rOnle+Mrfpp//6ujXiExIP9HBMTv1z+
/N1e1sa8dVLq4/2fElP2mvl+s6/2Y7j++dOz/Ydu1Iu0tX2xj5gcKmp/88X+
1C4VP7X6z/bnWkJ9Qtpe7b/fK2T7NvuT/SMlhhrjX6/36z/2fHjL56N9f27o
kjsmb/eHdJ2yeq/4wf5aSuhRf7N3++ezaU4OufbWficHw/2ef+/2O83xl5YI
fG1vFhn6cXLv+/0Tr3LwaW55Ye8XFvon5fH7/T2bQrLb/z+1hwTLh/3GYPAY
zp+3sfu6ff4DOP8cf/eUxuW37RmhfPGcg2I5B6/B5SUrdpna61yC81ekv3n0
9fxpOH+K3cvJdi8Pw/kPXl77s8FjJ5z/T+tMJx/rCjgfFmEAJyTJ2Q==
         "]], 0.1], 
        ArrowBox[{{0., 2.}, {-2., 1.}}, 0.1], 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQjQYc8vev+PPl0w575l1SERkW/+1PCU14VKty2v7y
v2uKO3z/2c/piRRrZbhmn3vOJPa9/V/7hp1x6/rb79tf1DDh4uP/Y895YnXM
euGn9v94r2qI7P5lr8axSPrn+1f232rFdzK6/LTv4+PsClrzwX5Hxe9d11Z+
ty9l/rfoptoXe9d/DXqT33y1P/Zo/Y2Jz7/bz+FbIWzO88X+wLrX3D5tP+13
qDnub5L7bL+NNV4p7eQv+/7SNcwfFD/ZL3nOKfNgw297ud8vH9SJfbTvCHnz
Y6fNH/uTeZ/Xxv14b5/mw7bzcw6QH7L9NNOyt/Z258Njeh3/2FutkJd+Zfra
nu/ug0dtu37by2TqzBFZ8cL+RulCnwfXf9nnT7/r1/Tnqf2smSDw094YDB7b
n79x9PV88x/28zZ2X7fPf2D/+bBS6oOX3+zP8XdPaVx+2549egNr9Iav9uI5
B8VyDl6zZ5+Xd5a/+4u9ZMUuU3udS/Zfe2L3/Kv8bL8i/c2jr+dP219SrwWi
T/ZT7F5Otnt52B6sfMpH+wcvr/3Z4LHTPiLRr0TjwAf7f1pnOvlYV9hDoumD
PSzCAPqf3xU=
         "]], 0.1], 
        ArrowBox[BezierCurveBox[{{0., 2.}, {-0.28933755257078453`, 
         2.1341854347188893`}, {-0.3748666889890278, 
         2.43579957945292}, {-0.285453852010028, 2.628663380559333}, {
         0.28545385201002776`, 2.628663380559333}, {0.3748666889890277, 
         2.4357995794529206`}, {0.28933755257078453`, 2.1341854347188893`}, {
         0., 2.}},
         SplineDegree->7], 0.1], ArrowBox[{{0., 1.}, {-1., 0.}}, 0.1], 
        ArrowBox[{{0., 1.}, {1., 0.}}, 0.1], 
        ArrowBox[BezierCurveBox[{{0., 1.}, {0.18210546221036392`, 
         1.430428627189827}, {0.39936740862500514`, 1.4993102371676186`}, {
         0.5476555514121827, 1.4591980431399016`}, {0.7119530043698294, 
         1.0625489039461953`}, {0.6354610574407263, 0.9293297482065539}, {
         0.433127008322802, 0.824409006117316}, {0., 1.}},
         SplineDegree->7], 0.1], ArrowBox[{{1., 1.}, {1., 0.}}, 0.1], 
        ArrowBox[BezierCurveBox[{{1., 1.}, {1.0132464889680084`, 
         1.3186635855386826`}, {1.2591710405119212`, 1.5131049402655432`}, {
         1.4715707702690874`, 1.5043040316232572`}, {1.6900476900071553`, 
         0.9768540889261161}, {1.546081582955237, 0.8204416175110697}, {
         1.2346958644278136`, 0.7840374999245701}, {1., 1.}},
         SplineDegree->7], 0.1], 
        ArrowBox[BezierCurveBox[{{-1., 
         0.}, {-0.78403749992457, -0.23469586442781354`}, \
{-0.8204416175110695, -0.546081582955237}, {-0.9768540889261157, \
-0.6900476900071553}, {-1.5043040316232568`, -0.47157077026908745`}, \
{-1.513104940265543, -0.2591710405119212}, {-1.3186635855386823`, \
-0.013246488968008452`}, {-1., 0.}},
         SplineDegree->7], 0.1], 
        ArrowBox[BezierCurveBox[{{-2., 1.}, {-1.99062341425038, 
         0.6811990748789634}, {-2.2221455138730724`, 
         0.4698135435235948}, {-2.434634778051478, 
         0.4635355022074675}, {-2.6899524650649127`, 
         0.9741708762343373}, {-2.5574364735049677`, 
         1.1403954627873851`}, {-2.2494147886470572`, 
         1.198781823672318}, {-2., 1.}},
         SplineDegree->7], 0.1], 
        ArrowBox[BezierCurveBox[{{1., 0.}, {
         1.2893375525707844`, -0.13418543471888908`}, {
         1.3748666889890278`, -0.43579957945292014`}, {
         1.2854538520100278`, -0.6286633805593327}, {
         0.7145461479899722, -0.6286633805593327}, {
         0.6251333110109722, -0.4357995794529201}, {
         0.7106624474292155, -0.13418543471888908`}, {1., 0.}},
         SplineDegree->7], 0.1]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 2.}, 0.1], InsetBox["1", {0., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], 
         InsetBox["2", {0., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], 
         InsetBox["3", {1., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 0.}, 0.1], 
         InsetBox["4", {-1., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{-2., 1.}, 0.1], 
         InsetBox["5", {-2., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.1], 
         InsetBox["6", {1., 0.},
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->
  "Out[104]=",ExpressionUUID->"6a0eab17-d7e9-447b-b5b7-c6b59a752382"]
}, Open  ]],

Cell[TextData[{
 "Observe, however, that the graph is upside-down compared to the typical \
orientation. This is because the Wolfram Language has a preference for \
directed edges pointing downwards. To position the vertex 1 at the bottom, we \
reverse the direction of the edges. The ",
 StyleBox[ButtonBox["Reverse",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reverse"], "FunctionLink"],
 " function reverses the order of the elements. For example,"
}], "Text",ExpressionUUID->"45314b09-7fde-4397-a404-9f9b7f7e347d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reverse", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[105]:=",ExpressionUUID->"f77d3305-5ed2-4289-bb63-987eab2a172b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "2", ",", "1"}], "}"}]], "Output",
 CellLabel->
  "Out[105]=",ExpressionUUID->"097308b8-9e6d-4e75-a7ab-fbe862897cc9"]
}, Open  ]],

Cell["\<\
An optional second argument specifies the level, in order to reverse \
subexpressions.\
\>", "Text",ExpressionUUID->"1dc93312-2853-4b9b-8e0d-52b0dc66847a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reverse", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "5"}], "}"}]}], "}"}], ",", "2"}], 
  "]"}]], "Input",
 CellLabel->
  "In[106]:=",ExpressionUUID->"9f82c353-d667-4a51-ad41-820e06301f91"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "4", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[106]=",ExpressionUUID->"b243cffb-ea95-425c-8938-db5f1c611c35"]
}, Open  ]],

Cell["\<\
Thus, the desired graph representation of our divides relation is obtained as \
follows:\
\>", "Text",ExpressionUUID->"eb5b5a45-c3d4-49a0-8038-8e262e963543"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"Apply", "[", 
    RowBox[{"Rule", ",", 
     RowBox[{"Reverse", "[", 
      RowBox[{"div6", ",", "2"}], "]"}], ",", "2"}], "]"}], ",", 
   RowBox[{"VertexSize", "\[Rule]", "Medium"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Name\>\"", ",", "Center"}], "]"}]}], ",", 
   RowBox[{"EdgeShapeFunction", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x_", "\[DirectedEdge]", "x_"}], "\[Rule]", "None"}], "}"}]}]}],
   "]"}]], "Input",
 CellLabel->
  "In[107]:=",ExpressionUUID->"0d48beed-bc17-4749-b171-c1bf424f422a"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 
      6}, {{{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {2, 2}, {4, 2}, {
       6, 2}, {3, 3}, {6, 3}, {4, 4}, {5, 5}, {6, 6}}, Null}, {
      EdgeShapeFunction -> {
        DirectedEdge[4, 4] -> None, DirectedEdge[1, 1] -> None, 
         DirectedEdge[2, 2] -> None, DirectedEdge[6, 6] -> None, 
         DirectedEdge[5, 5] -> None, DirectedEdge[3, 3] -> None}, 
       VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Medium}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[{{Medium, 0.8}}], {}, 
        ArrowBox[{{0., 1.}, {0., 0.}}], {}, 
        ArrowBox[{{1., 1.}, {0., 0.}}], {}, 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEf9kMZDjD+8nkbu6/b/7eH8ZMmGn0oyf5nzwjl
691o0r3R9Bcuz1O8yJmx7Q+c/ysRpOE3gr/EH4QQ6m3uzpIX+wnnG6pbiSSc
+A7np4HBN3vfsNA/KY/f79+xLNTLhuGrvVlk6MfJve/3m0/9XfF66Wf7XRwM
93v+vdv/wDDiU3H4J/trKaFH/c3e7d9Qk73tqshH+77c0CV3TN7uj3id1aW4
5739IyWGGuNfr/cvssyx9Up7a3++JdQnpO3Vfqcnt1pVNV7bR0wOFbW/+WK/
6ettyZsZX9pX+zFc//zp2X4obS9jY946KfXxfiht//6ujXiExIP9UNr+WbqS
VKfYrf1Q2t6nJuPs+por+6G0vfqn6RM8jp3bD6Xtq/fMFD07+eh+KG0vt35N
8K3Du/ZDaft5vOamiw+t2A+l7RnQAADU7ced
         "]]], 
        ArrowBox[{{-1., 2.}, {0., 1.}}], {}, 
        ArrowBox[{{-2., 1.}, {0., 0.}}], {}, 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEf7KEMh/BEvxKNAx/sl8/b2H3d/r/9vLyz/N1T
PtonTTT6UJL9z/6yeu0l9dpP9no3mnRvNP21/9oTu+df5Wd7nuJFzoxtf+zZ
wBq+2P9KBGn4bc8WvYE1esNX+19L/EHI/sthpdQHL7/Z89jcnSUv9tP+wo2j
r+eb/7A3VLcSSTjx3X7WTBD4aZ8GBt/sr5cu9Hlw/Ze9u8nEG/sYv9rz3X3w
qG3Xb/ui0y83fl392d7+fHhMr+Mf+yfaBZ+4Uj/Zp/mw7fyc88d+TqjKrH86
H+07Qt782Gnzx362B9vKC8wf7Bc955R5sOG3/RFOHTumy2/tt7LGK6Wd/GX/
QGT5D/k9r+0PrXvN7dP20753U23jr0Mv7Y89Wn9j4vPvUPq5fTHzv0U31b5A
6Sf2/XycXUFrPkDpB/aaHIukf75/BaVv2XOeWB2zXvgplL5qX7czbl1/+30o
fd5+bk+kWCvDNSh9zP6U0IRHtSqnofRu++L9K/58+bQDSq+wZ0ADAG5i4Tk=

         "]]], ArrowBox[{{1., 2.}, {0., 1.}}], 
        ArrowBox[{{1., 2.}, {1., 1.}}], {}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.}, 0.1], InsetBox["1", {0., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], 
         InsetBox["2", {0., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], 
         InsetBox["3", {1., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 2.}, 0.1], 
         InsetBox["4", {-1., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{-2., 1.}, 0.1], 
         InsetBox["5", {-2., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], 
         InsetBox["6", {1., 2.},
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->
  "Out[107]=",ExpressionUUID->"e508bc2f-9082-45c7-8e97-7c959eda45b1"]
}, Open  ]],

Cell[TextData[{
 "The example above shows us how to define ",
 StyleBox["drawRelation", "Code"],
 ". "
}], "Text",ExpressionUUID->"a4666d90-bec8-4a86-8ac4-11215f1ab03f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"drawRelation", "[", 
   RowBox[{
    RowBox[{"R_", "?", "relationQ"}], ",", 
    RowBox[{"size_:", "Medium"}]}], "]"}], ":=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"Apply", "[", 
     RowBox[{"Rule", ",", 
      RowBox[{"Reverse", "[", 
       RowBox[{"R", ",", "2"}], "]"}], ",", "2"}], "]"}], ",", 
    RowBox[{"VertexSize", "\[Rule]", "size"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", 
     RowBox[{"Placed", "[", 
      RowBox[{"\"\<Name\>\"", ",", "Center"}], "]"}]}], ",", 
    RowBox[{"EdgeShapeFunction", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x_", "\[DirectedEdge]", "x_"}], "\[Rule]", "None"}], 
      "}"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[108]:=",ExpressionUUID->"311190ac-b52e-461d-a713-fab1ac1cf549"],

Cell[TextData[{
 "Note that we define the function with two arguments: the relation and a ",
 StyleBox["size", "Code"],
 " argument. The colon after the ",
 StyleBox[ButtonBox["Blank",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Blank"], "FunctionLink"],
 " (",
 StyleBox["_", "Code"],
 ") specifies the default value. If the function is called with only one \
argument, the symbol ",
 StyleBox["Medium", "Code"],
 " is used as the value of ",
 StyleBox["size", "Code"],
 ". But if we need to make the vertices larger or smaller, we can choose a \
different value in the function call."
}], "Text",ExpressionUUID->"e31aa5ef-ac28-4150-969a-d680d7f02061"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"drawRelation", "[", "div6", "]"}]], "Input",
 CellLabel->
  "In[109]:=",ExpressionUUID->"4e3f0e29-8fdf-4734-878a-1211bed52659"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 
      6}, {{{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {2, 2}, {4, 2}, {
       6, 2}, {3, 3}, {6, 3}, {4, 4}, {5, 5}, {6, 6}}, Null}, {
      EdgeShapeFunction -> {
        DirectedEdge[4, 4] -> None, DirectedEdge[1, 1] -> None, 
         DirectedEdge[2, 2] -> None, DirectedEdge[6, 6] -> None, 
         DirectedEdge[5, 5] -> None, DirectedEdge[3, 3] -> None}, 
       VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Medium}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[{{Medium, 0.8}}], {}, 
        ArrowBox[{{0., 1.}, {0., 0.}}], {}, 
        ArrowBox[{{1., 1.}, {0., 0.}}], {}, 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEf9kMZDjD+8nkbu6/b/7eH8ZMmGn0oyf5nzwjl
691o0r3R9Bcuz1O8yJmx7Q+c/ysRpOE3gr/EH4QQ6m3uzpIX+wnnG6pbiSSc
+A7np4HBN3vfsNA/KY/f79+xLNTLhuGrvVlk6MfJve/3m0/9XfF66Wf7XRwM
93v+vdv/wDDiU3H4J/trKaFH/c3e7d9Qk73tqshH+77c0CV3TN7uj3id1aW4
5739IyWGGuNfr/cvssyx9Up7a3++JdQnpO3Vfqcnt1pVNV7bR0wOFbW/+WK/
6ettyZsZX9pX+zFc//zp2X4obS9jY946KfXxfiht//6ujXiExIP9UNr+WbqS
VKfYrf1Q2t6nJuPs+por+6G0vfqn6RM8jp3bD6Xtq/fMFD07+eh+KG0vt35N
8K3Du/ZDaft5vOamiw+t2A+l7RnQAADU7ced
         "]]], 
        ArrowBox[{{-1., 2.}, {0., 1.}}], {}, 
        ArrowBox[{{-2., 1.}, {0., 0.}}], {}, 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEf7KEMh/BEvxKNAx/sl8/b2H3d/r/9vLyz/N1T
PtonTTT6UJL9z/6yeu0l9dpP9no3mnRvNP21/9oTu+df5Wd7nuJFzoxtf+zZ
wBq+2P9KBGn4bc8WvYE1esNX+19L/EHI/sthpdQHL7/Z89jcnSUv9tP+wo2j
r+eb/7A3VLcSSTjx3X7WTBD4aZ8GBt/sr5cu9Hlw/Ze9u8nEG/sYv9rz3X3w
qG3Xb/ui0y83fl392d7+fHhMr+Mf+yfaBZ+4Uj/Zp/mw7fyc88d+TqjKrH86
H+07Qt782Gnzx362B9vKC8wf7Bc955R5sOG3/RFOHTumy2/tt7LGK6Wd/GX/
QGT5D/k9r+0PrXvN7dP20753U23jr0Mv7Y89Wn9j4vPvUPq5fTHzv0U31b5A
6Sf2/XycXUFrPkDpB/aaHIukf75/BaVv2XOeWB2zXvgplL5qX7czbl1/+30o
fd5+bk+kWCvDNSh9zP6U0IRHtSqnofRu++L9K/58+bQDSq+wZ0ADAG5i4Tk=

         "]]], ArrowBox[{{1., 2.}, {0., 1.}}], 
        ArrowBox[{{1., 2.}, {1., 1.}}], {}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.}, 0.1], InsetBox["1", {0., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], 
         InsetBox["2", {0., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], 
         InsetBox["3", {1., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 2.}, 0.1], 
         InsetBox["4", {-1., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{-2., 1.}, 0.1], 
         InsetBox["5", {-2., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], 
         InsetBox["6", {1., 2.},
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->
  "Out[109]=",ExpressionUUID->"589b5cc8-aef8-4788-904f-4b2e86b73a36"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"drawRelation", "[", 
  RowBox[{"dividesRelation", "[", "10", "]"}], "]"}]], "Input",
 CellLabel->
  "In[110]:=",ExpressionUUID->"1174cf3e-9393-450d-8f7b-eb0af1e230a9"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 
      10}, {{{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {
       9, 1}, {10, 1}, {2, 2}, {4, 2}, {6, 2}, {8, 2}, {10, 2}, {3, 3}, {6, 
       3}, {9, 3}, {4, 4}, {8, 4}, {5, 5}, {10, 5}, {6, 6}, {7, 7}, {8, 8}, {
       9, 9}, {10, 10}}, Null}, {
      EdgeShapeFunction -> {
        DirectedEdge[8, 8] -> None, DirectedEdge[9, 9] -> None, 
         DirectedEdge[4, 4] -> None, DirectedEdge[10, 10] -> None, 
         DirectedEdge[1, 1] -> None, DirectedEdge[2, 2] -> None, 
         DirectedEdge[6, 6] -> None, DirectedEdge[5, 5] -> None, 
         DirectedEdge[3, 3] -> None, DirectedEdge[7, 7] -> None}, 
       VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Medium}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[{{Medium, 0.8}}], {}, 
        ArrowBox[{{-2., 1.}, {0., 0.}}], {}, 
        ArrowBox[{{0., 1.}, {0., 0.}}], {}, 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEcB6AMh/9gwH5g+byN3dft/9vD5JMmGn0oyf5n
zwjl691o0r3R9Bcuz1O8yJmx7Q+c/ysRpOE3gr/EH4QQ6m3uzpIX+wnnG6pb
iSSc+A7np4HBN/v2VT4n07+xH3gjHhekwvHVXnGVker8m+wH2KNkZ3Yf/Wx/
8t9G4WUr2Q9s0VliNWfeJ/uGFaem1KSxH/jY/8ksbPJHe8/lNSuUBNgPHGjm
6Nu5+IO90u/jfjOWsR1wFjhT3zP/vT3XkjXtdzXZDmhZic38offOnmmRVvCn
mawHzFrfp2//+sae+6vjxmvfWA6kfAx/c+Lza/tpD4SfGzQzHpC9lt85LfK5
/RHfLfsPrPuz/4ZxhZa2/GP7e/2a5qeefduvIfpoHm/nPfvS9naTunUf98/Z
suVD0OTr9nKZc/J3cr/aL+KW4aUWe9E+VO934+mbD/dLT/4Zzn/2uL343jCH
1L6r+xX+nAi9s3ePvdjzzRq7/Q/vlzNxNVuyf6U9AxoAACJJv+Y=
         "]]], 
        ArrowBox[{{-3., 2.}, {-2., 1.}}], {}, 
        ArrowBox[{{1., 1.}, {0., 0.}}], {}, 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEf9kMZDjD+8nkbu6/b/7eH8ZMmGn0oyf5nzwjl
691o0r3R9Bcuz1O8yJmx7Q+c/ysRpOE3gr/EH4QQ6m3uzpIX+wnnG6pbiSSc
+A7np4HBN3vfsNA/KY/f79+xLNTLhuGrvVlk6MfJve/3m0/9XfF66Wf7XRwM
93v+vdv/wDDiU3H4J/trKaFH/c3e7d9Qk73tqshH+77c0CV3TN7uj3id1aW4
5739IyWGGuNfr/cvssyx9Up7a3++JdQnpO3Vfqcnt1pVNV7bR0wOFbW/+WK/
6ettyZsZX9pX+zFc//zp2X4obS9jY946KfXxfiht//6ujXiExIP9UNr+WbqS
VKfYrf1Q2t6nJuPs+por+6G0vfqn6RM8jp3bD6Xtq/fMFD07+eh+KG0vt35N
8K3Du/ZDaft5vOamiw+t2A+l7RnQAADU7ced
         "]]], 
        ArrowBox[{{-1., 2.}, {-2., 1.}}], ArrowBox[{{-1., 2.}, {0., 1.}}], {},
         ArrowBox[{{-4., 1.}, {0., 0.}}], {}, 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQUHIBSHA0PyM94lkr/3T71bG1Yxnd2hT0TpgMT7
L/u3N67d9UaY3cFPM013D8Pr/Slv+nRiS9kc1HpT3S6YXt4/R1ZpzcndrA5K
/1bbTF12xT5eNN3S6DmLwznhWdzvUj7Yr78ce2Xad2aH7publdOe/LHvimCr
/f6GySFGY89pthBWh4+LE4xDjjM6rN9TbPzpOo/D460539e0MTiYrX65uLOR
10F7x4Hf3gkMDqLP6xJ1xfkcvl6LU2TRZHAIKDDOuTuDz6Fdpe/CqoP/7R+6
sR+ZycbvoHbl04J6/v/2Z7N+ZSQl8Duc2fN6c5v1P3uROzzR5sv4HSruVXAe
cP1rv2WW3SyJG/wOGpazFmrr/bFfu6xfje0bv8O9M/41J7/8soeEi4BDGhh8
s1+pI2BlAJR/Lmj8ciHnV/sVmxxeHADqf+9Y+KXx9Gf7nxMncm1azu9Q/02h
g23NJ/vZp5gWMifzO0zWd1qiv/qj/aSYKau3cvE76L294vH3xAf7O+5uWifm
8Tn4698szWf9YF/VIyFrLc/n8Ob13DCeg+/sc7S4W/h6eB08mnIuNW15a79B
US7e6SmPA4R+Y29w+c3nRAkOBwj9wn720//P7TYyO0Dox/Z3N64r2xT/H0rf
tw+JenY7UeMHlL5hP/fIsv/dez5C6Yv2ZQ/vH060eAGlT9ivqGLndpK9C6X3
2icVPxEIf38SSq+0Z0ADABF9C2s=
         "]]], 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQUHIBSHA4wfcv7G0dfz2eH8TR6SFbtM2R0YoXzx
nINiOQfZ4PJtlhcXMjgj+H83gDSwwvl1l9RrL6kj+Bzz8s7yd7PA+TOFZbkM
njDD+SbGIIDgXwFpr2WC8wtljgMRI9w9QoIgwAiX38gavYE1mgHOX/DFc/4X
z//2MP69uyDwF86XBRlX+AfOj9kAMuA3nD9rJgj8hPPBwWP+A87/fFgp9cHL
b/Yw97CDrN/wFS7PDvbvFzj/a0/snn+Vn+F8cPDUfoLzwcqnfITzIxL9SjQO
fIDzIdQHewD8y3WQ
         "]]], ArrowBox[{{-2., 3.}, {-3., 2.}}], {}, 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQUOMHq1gbqVSAKDw/J5G7uv2/+399/+rN31FIND
0kSjDyXZ/+xfTbZ7OdmO0UHvRpPujaa/9tXH9OL+72F04Cle5MzY9seeGayB
yeFXIkjDb/tmXZBCIH+JPwjZ/wSLMzvw2NydJS/20z7jzaOv56VZHAxB1p74
bn8GDFgc0sDgm31rxJRazWxWB1nTOXx1rF/tvzypO6dxi9XhxDnRrk+7PtuL
FfXsPyXJ5pBhfPnG4bZP9i/+7wng12Jz+J505dfHjI/2eX0CTd+42ByqYyU/
1CR+sF8h2x7csIfV4aGrS+HJB+/sp6xVOLrGjtVhS9rdFUHab+1N7O5eq57I
4pAt+69t6qLX9m3n93S83cLswJG1jHuS2yv7fZfi6q63MDgE5dWtKGF7Zj9R
IP66u+Zv+8QEe6tW6Uf23g9iFy498dU+peFSYzv3XfulIruiTjz/YN8m/aMi
oeuavVv0c7YE3pf2+pPeR07dfMG+O0zUfKfXQ/tdJwo9ffiO22uZ/em24L9q
b+kRkOotssd+4eK2cyoCh+21b3Hsu5210p4BDQAAMyTIAg==
         "]]], 
        ArrowBox[{{2., 2.}, {0., 1.}}], {}, 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEf7KEMh/BEvxKNAx/sl8/b2H3d/r/9vLyz/N1T
PtonTTT6UJL9z/6yeu0l9dpP9no3mnRvNP21/9oTu+df5Wd7nuJFzoxtf+zZ
wBq+2P9KBGn4bc8WvYE1esNX+19L/EHI/sthpdQHL7/Z89jcnSUv9tP+wo2j
r+eb/7A3VLcSSTjx3X7WTBD4aZ8GBt/sr5cu9Hlw/Ze9u8nEG/sYv9rz3X3w
qG3Xb/ui0y83fl392d7+fHhMr+Mf+yfaBZ+4Uj/Zp/mw7fyc88d+TqjKrH86
H+07Qt782Gnzx362B9vKC8wf7Bc955R5sOG3/RFOHTumy2/tt7LGK6Wd/GX/
QGT5D/k9r+0PrXvN7dP20753U23jr0Mv7Y89Wn9j4vPvUPq5fTHzv0U31b5A
6Sf2/XycXUFrPkDpB/aaHIukf75/BaVv2XOeWB2zXvgplL5qX7czbl1/+30o
fd5+bk+kWCvDNSh9zP6U0IRHtSqnofRu++L9K/58+bQDSq+wZ0ADAG5i4Tk=

         "]]], ArrowBox[{{1., 2.}, {-2., 1.}}], 
        ArrowBox[{{1., 2.}, {1., 1.}}], {}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.}, 0.1], InsetBox["1", {0., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{-2., 1.}, 0.1], 
         InsetBox["2", {-2., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], 
         InsetBox["3", {0., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{-3., 2.}, 0.1], 
         InsetBox["4", {-3., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], 
         InsetBox["5", {1., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 2.}, 0.1], 
         InsetBox["6", {-1., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{-4., 1.}, 0.1], 
         InsetBox["7", {-4., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{-2., 3.}, 0.1], 
         InsetBox["8", {-2., 3.},
          BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.1], 
         InsetBox["9", {2., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], 
         InsetBox["10", {1., 2.},
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->
  "Out[110]=",ExpressionUUID->"f3d68074-8dcb-4726-b1cb-8426c9a3c437"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"drawRelation", "[", 
  RowBox[{
   RowBox[{"dividesRelation", "[", "10", "]"}], ",", "Large"}], 
  "]"}]], "Input",
 CellLabel->
  "In[111]:=",ExpressionUUID->"3e9eb162-a072-40d5-8abb-5182b158eff1"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 
      10}, {{{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {
       9, 1}, {10, 1}, {2, 2}, {4, 2}, {6, 2}, {8, 2}, {10, 2}, {3, 3}, {6, 
       3}, {9, 3}, {4, 4}, {8, 4}, {5, 5}, {10, 5}, {6, 6}, {7, 7}, {8, 8}, {
       9, 9}, {10, 10}}, Null}, {
      EdgeShapeFunction -> {
        DirectedEdge[8, 8] -> None, DirectedEdge[9, 9] -> None, 
         DirectedEdge[4, 4] -> None, DirectedEdge[10, 10] -> None, 
         DirectedEdge[1, 1] -> None, DirectedEdge[2, 2] -> None, 
         DirectedEdge[6, 6] -> None, DirectedEdge[5, 5] -> None, 
         DirectedEdge[3, 3] -> None, DirectedEdge[7, 7] -> None}, 
       VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Large}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[{{Medium, 0.8}}], {}, 
        ArrowBox[{{-2., 1.}, {0., 0.}}], {}, 
        ArrowBox[{{0., 1.}, {0., 0.}}], {}, 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEcB6AMh/9gwH5g+byN3dft/9vD5JMmGn0oyf5n
zwjl691o0r3R9Bcuz1O8yJmx7Q+c/ysRpOE3gr/EH4QQ6m3uzpIX+wnnG6pb
iSSc+A7np4HBN/v2VT4n07+xH3gjHhekwvHVXnGVker8m+wH2KNkZ3Yf/Wx/
8t9G4WUr2Q9s0VliNWfeJ/uGFaem1KSxH/jY/8ksbPJHe8/lNSuUBNgPHGjm
6Nu5+IO90u/jfjOWsR1wFjhT3zP/vT3XkjXtdzXZDmhZic38offOnmmRVvCn
mawHzFrfp2//+sae+6vjxmvfWA6kfAx/c+Lza/tpD4SfGzQzHpC9lt85LfK5
/RHfLfsPrPuz/4ZxhZa2/GP7e/2a5qeefduvIfpoHm/nPfvS9naTunUf98/Z
suVD0OTr9nKZc/J3cr/aL+KW4aUWe9E+VO934+mbD/dLT/4Zzn/2uL343jCH
1L6r+xX+nAi9s3ePvdjzzRq7/Q/vlzNxNVuyf6U9AxoAACJJv+Y=
         "]]], 
        ArrowBox[{{-3., 2.}, {-2., 1.}}], {}, 
        ArrowBox[{{1., 1.}, {0., 0.}}], {}, 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEf9kMZDjD+8nkbu6/b/7eH8ZMmGn0oyf5nzwjl
691o0r3R9Bcuz1O8yJmx7Q+c/ysRpOE3gr/EH4QQ6m3uzpIX+wnnG6pbiSSc
+A7np4HBN3vfsNA/KY/f79+xLNTLhuGrvVlk6MfJve/3m0/9XfF66Wf7XRwM
93v+vdv/wDDiU3H4J/trKaFH/c3e7d9Qk73tqshH+77c0CV3TN7uj3id1aW4
5739IyWGGuNfr/cvssyx9Up7a3++JdQnpO3Vfqcnt1pVNV7bR0wOFbW/+WK/
6ettyZsZX9pX+zFc//zp2X4obS9jY946KfXxfiht//6ujXiExIP9UNr+WbqS
VKfYrf1Q2t6nJuPs+por+6G0vfqn6RM8jp3bD6Xtq/fMFD07+eh+KG0vt35N
8K3Du/ZDaft5vOamiw+t2A+l7RnQAADU7ced
         "]]], 
        ArrowBox[{{-1., 2.}, {-2., 1.}}], ArrowBox[{{-1., 2.}, {0., 1.}}], {},
         ArrowBox[{{-4., 1.}, {0., 0.}}], {}, 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQUHIBSHA0PyM94lkr/3T71bG1Yxnd2hT0TpgMT7
L/u3N67d9UaY3cFPM013D8Pr/Slv+nRiS9kc1HpT3S6YXt4/R1ZpzcndrA5K
/1bbTF12xT5eNN3S6DmLwznhWdzvUj7Yr78ce2Xad2aH7publdOe/LHvimCr
/f6GySFGY89pthBWh4+LE4xDjjM6rN9TbPzpOo/D460539e0MTiYrX65uLOR
10F7x4Hf3gkMDqLP6xJ1xfkcvl6LU2TRZHAIKDDOuTuDz6Fdpe/CqoP/7R+6
sR+ZycbvoHbl04J6/v/2Z7N+ZSQl8Duc2fN6c5v1P3uROzzR5sv4HSruVXAe
cP1rv2WW3SyJG/wOGpazFmrr/bFfu6xfje0bv8O9M/41J7/8soeEi4BDGhh8
s1+pI2BlAJR/Lmj8ciHnV/sVmxxeHADqf+9Y+KXx9Gf7nxMncm1azu9Q/02h
g23NJ/vZp5gWMifzO0zWd1qiv/qj/aSYKau3cvE76L294vH3xAf7O+5uWifm
8Tn4698szWf9YF/VIyFrLc/n8Ob13DCeg+/sc7S4W/h6eB08mnIuNW15a79B
US7e6SmPA4R+Y29w+c3nRAkOBwj9wn720//P7TYyO0Dox/Z3N64r2xT/H0rf
tw+JenY7UeMHlL5hP/fIsv/dez5C6Yv2ZQ/vH060eAGlT9ivqGLndpK9C6X3
2icVPxEIf38SSq+0Z0ADABF9C2s=
         "]]], 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQUHIBSHA4wfcv7G0dfz2eH8TR6SFbtM2R0YoXzx
nINiOQfZ4PJtlhcXMjgj+H83gDSwwvl1l9RrL6kj+Bzz8s7yd7PA+TOFZbkM
njDD+SbGIIDgXwFpr2WC8wtljgMRI9w9QoIgwAiX38gavYE1mgHOX/DFc/4X
z//2MP69uyDwF86XBRlX+AfOj9kAMuA3nD9rJgj8hPPBwWP+A87/fFgp9cHL
b/Yw97CDrN/wFS7PDvbvFzj/a0/snn+Vn+F8cPDUfoLzwcqnfITzIxL9SjQO
fIDzIdQHewD8y3WQ
         "]]], ArrowBox[{{-2., 3.}, {-3., 2.}}], {}, 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQUOMHq1gbqVSAKDw/J5G7uv2/+399/+rN31FIND
0kSjDyXZ/+xfTbZ7OdmO0UHvRpPujaa/9tXH9OL+72F04Cle5MzY9seeGayB
yeFXIkjDb/tmXZBCIH+JPwjZ/wSLMzvw2NydJS/20z7jzaOv56VZHAxB1p74
bn8GDFgc0sDgm31rxJRazWxWB1nTOXx1rF/tvzypO6dxi9XhxDnRrk+7PtuL
FfXsPyXJ5pBhfPnG4bZP9i/+7wng12Jz+J505dfHjI/2eX0CTd+42ByqYyU/
1CR+sF8h2x7csIfV4aGrS+HJB+/sp6xVOLrGjtVhS9rdFUHab+1N7O5eq57I
4pAt+69t6qLX9m3n93S83cLswJG1jHuS2yv7fZfi6q63MDgE5dWtKGF7Zj9R
IP66u+Zv+8QEe6tW6Uf23g9iFy498dU+peFSYzv3XfulIruiTjz/YN8m/aMi
oeuavVv0c7YE3pf2+pPeR07dfMG+O0zUfKfXQ/tdJwo9ffiO22uZ/em24L9q
b+kRkOotssd+4eK2cyoCh+21b3Hsu5210p4BDQAAMyTIAg==
         "]]], 
        ArrowBox[{{2., 2.}, {0., 1.}}], {}, 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEf7KEMh/BEvxKNAx/sl8/b2H3d/r/9vLyz/N1T
PtonTTT6UJL9z/6yeu0l9dpP9no3mnRvNP21/9oTu+df5Wd7nuJFzoxtf+zZ
wBq+2P9KBGn4bc8WvYE1esNX+19L/EHI/sthpdQHL7/Z89jcnSUv9tP+wo2j
r+eb/7A3VLcSSTjx3X7WTBD4aZ8GBt/sr5cu9Hlw/Ze9u8nEG/sYv9rz3X3w
qG3Xb/ui0y83fl392d7+fHhMr+Mf+yfaBZ+4Uj/Zp/mw7fyc88d+TqjKrH86
H+07Qt782Gnzx362B9vKC8wf7Bc955R5sOG3/RFOHTumy2/tt7LGK6Wd/GX/
QGT5D/k9r+0PrXvN7dP20753U23jr0Mv7Y89Wn9j4vPvUPq5fTHzv0U31b5A
6Sf2/XycXUFrPkDpB/aaHIukf75/BaVv2XOeWB2zXvgplL5qX7czbl1/+30o
fd5+bk+kWCvDNSh9zP6U0IRHtSqnofRu++L9K/58+bQDSq+wZ0ADAG5i4Tk=

         "]]], ArrowBox[{{1., 2.}, {-2., 1.}}], 
        ArrowBox[{{1., 2.}, {1., 1.}}], {}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.}, 0.2], InsetBox["1", {0., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{-2., 1.}, 0.2], 
         InsetBox["2", {-2., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.2], 
         InsetBox["3", {0., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{-3., 2.}, 0.2], 
         InsetBox["4", {-3., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.2], 
         InsetBox["5", {1., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 2.}, 0.2], 
         InsetBox["6", {-1., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{-4., 1.}, 0.2], 
         InsetBox["7", {-4., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{-2., 3.}, 0.2], 
         InsetBox["8", {-2., 3.},
          BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.2], 
         InsetBox["9", {2., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.2], 
         InsetBox["10", {1., 2.},
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->
  "Out[111]=",ExpressionUUID->"f6711f2d-3732-4f8f-9280-36109d0ebba5"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "The ",
 StyleBox["Graph", "Code"],
 " Object"
}], "Subsection",
 CellTags->"Section3c",ExpressionUUID->"769a94e9-bbba-4a35-bd70-69f0e14577e8"],

Cell[TextData[{
 "In addition to being able to draw graphs, as described above, the Wolfram \
Language treats a ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 " as an object that can be computed with. "
}], "Text",ExpressionUUID->"304833a6-41fd-4f12-a805-3acc29f00818"],

Cell[TextData[{
 "To create a graph as an object, you use the ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 " function, which is also the head of the object. Just as with ",
 StyleBox[ButtonBox["GraphPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GraphPlot"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["LayeredGraphPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/LayeredGraphPlot"], "FunctionLink"],
 ", you can use a list of rules indicating the edges as the input to ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 ". For example, the following defines a ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 " object representing the ",
 StyleBox["div6", "Code"],
 " relation."
}], "Text",ExpressionUUID->"5f739b7e-6dab-4634-9b25-a2af9d1c4333"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"div6G", "=", 
  RowBox[{"drawRelation", "[", "div6", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[112]:=",ExpressionUUID->"f7156f2d-df3d-4fd8-9550-972b6040160d"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 
      6}, {{{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {2, 2}, {4, 2}, {
       6, 2}, {3, 3}, {6, 3}, {4, 4}, {5, 5}, {6, 6}}, Null}, {
      EdgeShapeFunction -> {
        DirectedEdge[4, 4] -> None, DirectedEdge[1, 1] -> None, 
         DirectedEdge[2, 2] -> None, DirectedEdge[6, 6] -> None, 
         DirectedEdge[5, 5] -> None, DirectedEdge[3, 3] -> None}, 
       VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Medium}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[{{Medium, 0.8}}], {}, 
        ArrowBox[{{0., 1.}, {0., 0.}}], {}, 
        ArrowBox[{{1., 1.}, {0., 0.}}], {}, 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEf9kMZDjD+8nkbu6/b/7eH8ZMmGn0oyf5nzwjl
691o0r3R9Bcuz1O8yJmx7Q+c/ysRpOE3gr/EH4QQ6m3uzpIX+wnnG6pbiSSc
+A7np4HBN3vfsNA/KY/f79+xLNTLhuGrvVlk6MfJve/3m0/9XfF66Wf7XRwM
93v+vdv/wDDiU3H4J/trKaFH/c3e7d9Qk73tqshH+77c0CV3TN7uj3id1aW4
5739IyWGGuNfr/cvssyx9Up7a3++JdQnpO3Vfqcnt1pVNV7bR0wOFbW/+WK/
6ettyZsZX9pX+zFc//zp2X4obS9jY946KfXxfiht//6ujXiExIP9UNr+WbqS
VKfYrf1Q2t6nJuPs+por+6G0vfqn6RM8jp3bD6Xtq/fMFD07+eh+KG0vt35N
8K3Du/ZDaft5vOamiw+t2A+l7RnQAADU7ced
         "]]], 
        ArrowBox[{{-1., 2.}, {0., 1.}}], {}, 
        ArrowBox[{{-2., 1.}, {0., 0.}}], {}, 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEf7KEMh/BEvxKNAx/sl8/b2H3d/r/9vLyz/N1T
PtonTTT6UJL9z/6yeu0l9dpP9no3mnRvNP21/9oTu+df5Wd7nuJFzoxtf+zZ
wBq+2P9KBGn4bc8WvYE1esNX+19L/EHI/sthpdQHL7/Z89jcnSUv9tP+wo2j
r+eb/7A3VLcSSTjx3X7WTBD4aZ8GBt/sr5cu9Hlw/Ze9u8nEG/sYv9rz3X3w
qG3Xb/ui0y83fl392d7+fHhMr+Mf+yfaBZ+4Uj/Zp/mw7fyc88d+TqjKrH86
H+07Qt782Gnzx362B9vKC8wf7Bc955R5sOG3/RFOHTumy2/tt7LGK6Wd/GX/
QGT5D/k9r+0PrXvN7dP20753U23jr0Mv7Y89Wn9j4vPvUPq5fTHzv0U31b5A
6Sf2/XycXUFrPkDpB/aaHIukf75/BaVv2XOeWB2zXvgplL5qX7czbl1/+30o
fd5+bk+kWCvDNSh9zP6U0IRHtSqnofRu++L9K/58+bQDSq+wZ0ADAG5i4Tk=

         "]]], ArrowBox[{{1., 2.}, {0., 1.}}], 
        ArrowBox[{{1., 2.}, {1., 1.}}], {}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.}, 0.1], InsetBox["1", {0., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], 
         InsetBox["2", {0., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], 
         InsetBox["3", {1., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 2.}, 0.1], 
         InsetBox["4", {-1., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{-2., 1.}, 0.1], 
         InsetBox["5", {-2., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], 
         InsetBox["6", {1., 2.},
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->
  "Out[112]=",ExpressionUUID->"1ae25b6b-5b65-483b-83c6-ca502e8238d4"]
}, Open  ]],

Cell[TextData[{
 "Observe that the output is a plot of the graph. However, ",
 StyleBox["div6G", "Code"],
 " stores a ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 " object, not an image."
}], "Text",ExpressionUUID->"7154f27e-6bee-452e-a1b0-e71bea4d372f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", "div6G", "]"}]], "Input",
 CellLabel->
  "In[113]:=",ExpressionUUID->"1c9f4790-01ea-47ec-9bee-38adea31a225"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"List", "[", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "]"}], 
     ",", 
     RowBox[{"List", "[", 
      RowBox[{
       RowBox[{"DirectedEdge", "[", 
        RowBox[{"1", ",", "1"}], "]"}], ",", 
       RowBox[{"DirectedEdge", "[", 
        RowBox[{"2", ",", "1"}], "]"}], ",", 
       RowBox[{"DirectedEdge", "[", 
        RowBox[{"3", ",", "1"}], "]"}], ",", 
       RowBox[{"DirectedEdge", "[", 
        RowBox[{"4", ",", "1"}], "]"}], ",", 
       RowBox[{"DirectedEdge", "[", 
        RowBox[{"5", ",", "1"}], "]"}], ",", 
       RowBox[{"DirectedEdge", "[", 
        RowBox[{"6", ",", "1"}], "]"}], ",", 
       RowBox[{"DirectedEdge", "[", 
        RowBox[{"2", ",", "2"}], "]"}], ",", 
       RowBox[{"DirectedEdge", "[", 
        RowBox[{"4", ",", "2"}], "]"}], ",", 
       RowBox[{"DirectedEdge", "[", 
        RowBox[{"6", ",", "2"}], "]"}], ",", 
       RowBox[{"DirectedEdge", "[", 
        RowBox[{"3", ",", "3"}], "]"}], ",", 
       RowBox[{"DirectedEdge", "[", 
        RowBox[{"6", ",", "3"}], "]"}], ",", 
       RowBox[{"DirectedEdge", "[", 
        RowBox[{"4", ",", "4"}], "]"}], ",", 
       RowBox[{"DirectedEdge", "[", 
        RowBox[{"5", ",", "5"}], "]"}], ",", 
       RowBox[{"DirectedEdge", "[", 
        RowBox[{"6", ",", "6"}], "]"}]}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{
       RowBox[{"Rule", "[", 
        RowBox[{"EdgeShapeFunction", ",", 
         RowBox[{"List", "[", 
          RowBox[{
           RowBox[{"Rule", "[", 
            RowBox[{
             RowBox[{"DirectedEdge", "[", 
              RowBox[{"4", ",", "4"}], "]"}], ",", "None"}], "]"}], ",", 
           RowBox[{"Rule", "[", 
            RowBox[{
             RowBox[{"DirectedEdge", "[", 
              RowBox[{"1", ",", "1"}], "]"}], ",", "None"}], "]"}], ",", 
           RowBox[{"Rule", "[", 
            RowBox[{
             RowBox[{"DirectedEdge", "[", 
              RowBox[{"2", ",", "2"}], "]"}], ",", "None"}], "]"}], ",", 
           RowBox[{"Rule", "[", 
            RowBox[{
             RowBox[{"DirectedEdge", "[", 
              RowBox[{"6", ",", "6"}], "]"}], ",", "None"}], "]"}], ",", 
           RowBox[{"Rule", "[", 
            RowBox[{
             RowBox[{"DirectedEdge", "[", 
              RowBox[{"5", ",", "5"}], "]"}], ",", "None"}], "]"}], ",", 
           RowBox[{"Rule", "[", 
            RowBox[{
             RowBox[{"DirectedEdge", "[", 
              RowBox[{"3", ",", "3"}], "]"}], ",", "None"}], "]"}]}], "]"}]}],
         "]"}], ",", 
       RowBox[{"Rule", "[", 
        RowBox[{"VertexLabels", ",", 
         RowBox[{"List", "[", 
          RowBox[{"Placed", "[", 
           RowBox[{"\"\<Name\>\"", ",", "Center"}], "]"}], "]"}]}], "]"}], 
       ",", 
       RowBox[{"Rule", "[", 
        RowBox[{"VertexSize", ",", 
         RowBox[{"List", "[", "Medium", "]"}]}], "]"}]}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[113]//FullForm=",ExpressionUUID->"cc7349f2-8d08-4d4b-852a-\
7041eed194f5"]
}, Open  ]],

Cell[TextData[{
 "The main benefit of the ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 " object is that the Wolfram Language can accept a ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 " as an argument to many functions. For example, we can use this \
representation to determine whether or not the relation is transitive. To do \
this, we use the Wolfram Language\[CloseCurlyQuote]s implementation of the \
Floyd-Warshall all-pairs shortest path algorithm called ",
 StyleBox[ButtonBox["GraphDistanceMatrix",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GraphDistanceMatrix"], "FunctionLink"],
 ". This function returns a matrix whose ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"i", ",", "j"}], ")"}], TraditionalForm]],ExpressionUUID->
  "f51fb3eb-ccae-411b-91ac-0f9f78702227"],
 " entry represents the shortest path from vertex ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "6d0d3fa2-f146-41cd-a25a-a4fd672b77ea"],
 " to vertex ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "05b8bfac-c3dc-4d38-98db-2847344f5caf"],
 ". For example, the distance matrix for the ",
 StyleBox["div6", "Code"],
 " relation is:"
}], "Text",ExpressionUUID->"78568ad3-cb54-4c71-a2a0-7e93b132c965"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"GraphDistanceMatrix", "[", "div6G", "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[114]:=",ExpressionUUID->"c69afc11-5800-466f-8d2d-6f43a0754734"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "\[Infinity]", "\[Infinity]", "\[Infinity]", "\[Infinity]", 
      "\[Infinity]"},
     {"1", "0", "\[Infinity]", "\[Infinity]", "\[Infinity]", "\[Infinity]"},
     {"1", "\[Infinity]", "0", "\[Infinity]", "\[Infinity]", "\[Infinity]"},
     {"1", "1", "\[Infinity]", "0", "\[Infinity]", "\[Infinity]"},
     {"1", "\[Infinity]", "\[Infinity]", "\[Infinity]", "0", "\[Infinity]"},
     {"1", "1", "1", "\[Infinity]", "\[Infinity]", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[114]//MatrixForm=",ExpressionUUID->"70648683-571b-4f74-a1a9-\
127cbc4859e8"]
}, Open  ]],

Cell[TextData[{
 "In a graph of a transitive relation, the distance between any two distinct \
elements must be either 1 or infinite (meaning there is no path between \
them). To see this, assume that you have a transitive relation and suppose \
there are elements ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "1588656f-8b75-4d66-bc71-f0382b50b23e"],
 " and ",
 Cell[BoxData[
  FormBox["Z", TraditionalForm]],ExpressionUUID->
  "ffcba3c3-09a5-476a-bc21-a837016ffbb8"],
 " that the all-pairs algorithm has determined have distance 3. That means \
there must be two elements, say ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]],ExpressionUUID->
  "bb51ade0-3aa8-4b7f-904d-7d465f54f1f0"],
 " and ",
 Cell[BoxData[
  FormBox["N", TraditionalForm]],ExpressionUUID->
  "84eb3e88-db2c-4780-bb77-155b5efdca89"],
 ", such that ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "6d1a33eb-c0f1-489f-ad0a-363ccb7592b4"],
 " is connected to ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]],ExpressionUUID->
  "3da8594b-2ca9-4a1f-ba28-0f6d85be5aa5"],
 " is connected to ",
 Cell[BoxData[
  FormBox["N", TraditionalForm]],ExpressionUUID->
  "0af39ad8-3f65-41bc-aeb7-97f25017f753"],
 " is connected to ",
 Cell[BoxData[
  FormBox["Z", TraditionalForm]],ExpressionUUID->
  "aa5a7607-13be-4d1a-a2f8-61948d0cb8e6"],
 ". From the point of view of the relation, then, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"A", ",", "M"}], ")"}], TraditionalForm]],ExpressionUUID->
  "691b08cf-8c0d-4101-83b0-3f9ec4de64d9"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"M", ",", "N"}], ")"}], TraditionalForm]],ExpressionUUID->
  "5229ded8-cb59-43b5-894e-50141fe6a22c"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"N", ",", "Z"}], ")"}], TraditionalForm]],ExpressionUUID->
  "16c4a0aa-08f3-441b-b631-a404bf0bf9b5"],
 " are all members of the relation. However, if the relation is transitive, \
the fact that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"A", ",", "M"}], ")"}], TraditionalForm]],ExpressionUUID->
  "6f700de1-00f7-45e4-bfdd-06ed16013551"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"M", ",", "N"}], ")"}], TraditionalForm]],ExpressionUUID->
  "8c7c86e4-4a25-4fa8-a7b3-8dc35f575413"],
 " are in the relation means that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"A", ",", "N"}], ")"}], TraditionalForm]],ExpressionUUID->
  "cf8ac769-d243-4517-a229-edb7542a7531"],
 " is in the relation. In this case, ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "e7e975e4-4e00-46c9-9efe-363126f9def2"],
 " to ",
 Cell[BoxData[
  FormBox["N", TraditionalForm]],ExpressionUUID->
  "80f98b9e-f1bb-40ff-bc30-fdbf2ad2dbd0"],
 " to ",
 Cell[BoxData[
  FormBox["Z", TraditionalForm]],ExpressionUUID->
  "601b7fc6-eb36-4007-9607-52ed7751afc8"],
 " is a shorter path (of length 2). Applying transitivity again shows that ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "00484a1e-6f74-4b62-a01b-6fb7f3fcd9f0"],
 " and ",
 Cell[BoxData[
  FormBox["Z", TraditionalForm]],ExpressionUUID->
  "01080b70-ab33-4119-8379-8a19e328cc91"],
 " would be adjacent. While this does not amount to a proof, it should be \
convincing that we can check for transitivity by making sure that no two \
vertices in the graph of a relation have distance which is finite and greater \
than 1."
}], "Text",ExpressionUUID->"c3b45408-9a7a-44db-9b5f-b1f29832b4a9"],

Cell["Here is the function.", "Text",ExpressionUUID->"9c194bc2-567b-454c-9951-fcb93de71cbe"],

Cell[BoxData[
 RowBox[{
  RowBox[{"transitiveGraphQ", "[", "g_Graph", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"d", ",", "i", ",", "j"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"d", "=", 
      RowBox[{"GraphDistanceMatrix", "[", "g", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Cases", "[", 
       RowBox[{
        RowBox[{"Flatten", "[", "d", "]"}], ",", 
        RowBox[{"Except", "[", 
         RowBox[{"0", "|", "1", "|", "Infinity"}], "]"}]}], "]"}], "\[Equal]", 
      RowBox[{"{", "}"}]}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[115]:=",ExpressionUUID->"ecaad778-91d6-43d2-ae27-a7dd8be3b573"],

Cell[TextData[{
 "After computing the distance matrix, the function uses ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " to identify any elements of the matrix that are not 0, 1, or \[Infinity]. ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " takes a list as the first argument, for which we ",
 StyleBox[ButtonBox["Flatten",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Flatten"], "FunctionLink"],
 " the distance matrix, and a pattern as the second argument. In this case, \
we apply ",
 StyleBox[ButtonBox["Except",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Except"], "FunctionLink"],
 " to 0, 1, and ",
 StyleBox[ButtonBox["Infinity",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Infinity"], "FunctionLink"],
 ", separated by the ",
 StyleBox[ButtonBox["Alternatives",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Alternatives"], "FunctionLink"],
 " (",
 StyleBox["|", "Code"],
 ") operator. This means that anything other than those three symbols will \
match the pattern. The result of ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " will be the list of all the elements of the matrix that are other than 0, \
1, and ",
 StyleBox[ButtonBox["Infinity",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Infinity"], "FunctionLink"],
 ". Consequently, the relation is transitive if and only if that output is \
equal to the empty list."
}], "Text",ExpressionUUID->"72f21e5e-215a-4eb5-a9a6-4f520d874bb1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"transitiveGraphQ", "[", "div6G", "]"}]], "Input",
 CellLabel->
  "In[116]:=",ExpressionUUID->"6bec72e9-1ce5-482d-8178-7585bf9d9953"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[116]=",ExpressionUUID->"2082e86b-0b1b-46ea-8f0b-eeea4970e228"]
}, Open  ]],

Cell["\<\
In this section, we have barely scratched the surface of graphs in the \
Wolfram Language. We will return to them in much greater detail in Chapter 10.\
\>", "Text",ExpressionUUID->"dae28899-202c-4cc8-a791-886369ba8716"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["9.4 Closures of Relations", "Section",
 CellTags->"Section4",ExpressionUUID->"9a29cc1b-62fb-410d-a881-5501b026facc"],

Cell["\<\
In this section, we develop algorithms to compute the reflexive, symmetric, \
and transitive closures of binary relations. We begin with the reflexive \
closure. \
\>", "Text",ExpressionUUID->"4bf168cb-bf8c-447f-a8bf-348d49bc2fec"],

Cell[CellGroupData[{

Cell["Reflexive Closure", "Subsection",
 PageBreakWithin->False,
 CellTags->"Section4a",ExpressionUUID->"26fb0ee2-9529-4093-b2c1-1519160f15c0"],

Cell["\<\
The algorithm for computing the reflexive closure of a relation, with the \
matrix representation, is very simple. We simply set each diagonal entry \
equal to 1. The resulting matrix represents the reflexive closure of the \
relation. \
\>", "Text",
 PageBreakAbove->False,
 PageBreakWithin->
  False,ExpressionUUID->"2b0929f4-0209-4990-b050-54f4ad07106d"],

Cell[TextData[{
 "Note that this function will accept a matrix as input and return a modified \
version of that matrix. Internally, the function will need to work with a \
copy of the argument. That is, we will need to declare a local variable and \
set it equal to the argument. The reason for this is that when you execute a \
function in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", the argument is immediately substituted for the symbol used to represent \
it everywhere it appears. Thus, if ",
 StyleBox["x", "Code"],
 " is the argument to a function and you call the function with a value of 3, \
an assignment such as ",
 StyleBox["x=5", "Code"],
 " will be interpreted as the illegal assignment ",
 StyleBox["3=5", "Code"],
 "."
}], "Text",ExpressionUUID->"8da6b07a-3563-40e0-b979-f38fd925f8fe"],

Cell["\<\
Here is the function for computing the reflexive closure on a matrix \
representation.\
\>", "Text",ExpressionUUID->"4ddb2c4c-be3b-4a0b-ab2f-30986ba67f0a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"reflexiveClosure", "[", 
   RowBox[{"m_", "?", "matrix01Q"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ans", "=", "m"}], ",", "i"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"ans", "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", "i"}], "]"}], "]"}], "=", "1"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{
          RowBox[{"Dimensions", "[", "m", "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "ans"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[117]:=",ExpressionUUID->"74cefd8d-d8b8-4e8f-a49c-d4fc96e3a44b"],

Cell[TextData[{
 "(Note that all the closure operations only apply to a relation on a set and \
are generally not valid for a relation from one set to a different set. This \
means we may assume that the matrix representation of the relation is square, \
which is imposed by ",
 StyleBox["matrix01Q", "Code"],
 ".)"
}], "Text",ExpressionUUID->"73a21bb8-0426-45e0-84b3-c65a6c8ed6fb"],

Cell["\<\
We use this function to find the reflexive closure of the example relation we \
introduced earlier in the chapter.\
\>", "Text",ExpressionUUID->"ff91596d-3949-4c47-a9b8-b7fb7b1ea75d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"reflexiveClosure", "[", "exampleMatrix", "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[118]:=",ExpressionUUID->"895bfda0-1e92-4693-8714-3a717b023487"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", "0", "0"},
     {"0", "1", "1", "0"},
     {"0", "0", "1", "1"},
     {"0", "0", "0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[118]//MatrixForm=",ExpressionUUID->"05ecdb24-13c7-4372-ad45-\
09c514ca0dab"]
}, Open  ]],

Cell[TextData[{
 "Recall that ",
 StyleBox["exampleMatrix", "Code"],
 " represented the \[OpenCurlyDoubleQuote]is one less than\
\[CloseCurlyDoubleQuote] relation. Looking at the matrix above, you can see \
that the reflexive closure includes equality."
}], "Text",ExpressionUUID->"6e4cf2aa-c80c-4a35-8d4d-cc2f46db5793"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Symmetric Closure", "Subsection",
 CellTags->"Section4b",ExpressionUUID->"eae04551-00ea-438d-b05a-f16cd0be7181"],

Cell[TextData[{
 "Next, we write a function for constructing the symmetric closure of a \
relation ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "252a35c7-0f94-4a67-b74b-eba904bb9621"],
 ". We use the observation that if ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"a", ",", "b"}], ")"}], TraditionalForm]],ExpressionUUID->
  "12de0b4a-c091-4726-bd79-0c608679c636"],
 " is a member of ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "faf9ac7f-9670-49fb-bb92-c6804a65e0ca"],
 " then ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"b", ",", "a"}], ")"}], TraditionalForm]],ExpressionUUID->
  "079b6ac7-cc32-4aaf-b30f-71afd0273eca"],
 " must be included in the symmetric closure, so we can simply add it to the \
relation."
}], "Text",ExpressionUUID->"8411b9d5-e240-4d97-b771-c38fe9ec5db7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"symmetricClosure", "[", 
   RowBox[{"m_", "?", "matrix01Q"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ans", "=", "m"}], ",", "i", ",", "j"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ans", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "j"}], "]"}], "]"}], "\[Equal]", "1"}], ",", 
         RowBox[{
          RowBox[{"ans", "[", 
           RowBox[{"[", 
            RowBox[{"j", ",", "i"}], "]"}], "]"}], "=", "1"}]}], "]"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{
          RowBox[{"Dimensions", "[", "m", "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", 
         RowBox[{
          RowBox[{"Dimensions", "[", "m", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "ans"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[119]:=",ExpressionUUID->"8e7e190c-216c-4f99-9e65-3d74630324ed"],

Cell[TextData[{
 "Applying this to our ",
 StyleBox["exampleMatrix", "Code"],
 " yields the \[OpenCurlyDoubleQuote]different by 1\[CloseCurlyDoubleQuote] \
relation, and applying it to the \[OpenCurlyDoubleQuote]is a divisor of\
\[CloseCurlyDoubleQuote] relation yields the \[OpenCurlyDoubleQuote]is a \
divisor or multiple of\[CloseCurlyDoubleQuote] relation."
}], "Text",ExpressionUUID->"55c76988-ffd9-4c62-a571-d21adfbf86d0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"symmetricClosure", "[", "exampleMatrix", "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[120]:=",ExpressionUUID->"3121a0e3-4771-4fe8-b077-7f8076a2ceb4"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "1", "0", "0"},
     {"1", "0", "1", "0"},
     {"0", "1", "0", "1"},
     {"0", "0", "1", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[120]//MatrixForm=",ExpressionUUID->"fc0eb056-1f3c-41c3-a1b6-\
118265925ff3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"symmetricClosure", "[", "div6M", "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[121]:=",ExpressionUUID->"78de3355-9986-4532-b1ec-bdcb781ce20a"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", "1", "1", "1", "1"},
     {"1", "1", "0", "1", "0", "1"},
     {"1", "0", "1", "0", "0", "1"},
     {"1", "1", "0", "1", "0", "0"},
     {"1", "0", "0", "0", "1", "0"},
     {"1", "1", "1", "0", "0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[121]//MatrixForm=",ExpressionUUID->"a6cdae3c-86f4-4e1d-90c3-\
84021b8cd1ef"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Transitive Closure", "Subsection",
 CellTags->"Section4c",ExpressionUUID->"37768dbb-1383-4f99-b01e-5f4141a2b984"],

Cell["\<\
Having created functions to compute the reflexive and symmetric closures, we \
turn to implementing a function in the Wolfram Language to find the \
transitive closure of a relation. This is a more difficult problem than the \
earlier cases, both in terms of computational complexity and implementation. \
In the text, there are two algorithms outlined (a generic transitive closure \
and Warshall\[CloseCurlyQuote]s algorithm) and both will be covered in this \
section.\
\>", "Text",ExpressionUUID->"a789748f-612a-4f9d-8495-31ef72d98b1b"],

Cell[CellGroupData[{

Cell["A Transitive Closure Function", "Subsubsection",ExpressionUUID->"445ec238-c952-409f-ba46-9bf2785bea5d"],

Cell[TextData[{
 "First, we will implement the transitive closure algorithm presented as \
Algorithm 1 in Section 9.4 of the textbook. This will require the Boolean \
join and Boolean product operations on zero\[Dash]one matrices that were \
introduced in Chapter 2. Recall from Section 2.6 of this manual that the ",
 StyleBox[ButtonBox["BitAnd",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitAnd"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["BitOr",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitOr"], "FunctionLink"],
 " functions correspond to the Boolean operations \[And] and \[Or]. Here are \
some examples."
}], "Text",ExpressionUUID->"9c1794e2-6a2b-4ac9-9326-80a9d2da9230"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BitAnd", "[", 
  RowBox[{"1", ",", "1"}], "]"}]], "Input",
 CellLabel->
  "In[122]:=",ExpressionUUID->"e078bbb2-1097-4a76-a25d-511e1f0111dc"],

Cell[BoxData["1"], "Output",
 CellLabel->
  "Out[122]=",ExpressionUUID->"9203fdad-7689-4f9f-a2cd-d6dbbf1e3433"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BitAnd", "[", 
  RowBox[{"1", ",", "0"}], "]"}]], "Input",
 CellLabel->
  "In[123]:=",ExpressionUUID->"87de6e15-eb62-4dfa-8318-dcb3627f1c65"],

Cell[BoxData["0"], "Output",
 CellLabel->
  "Out[123]=",ExpressionUUID->"c6f13b78-4b18-448b-bdc2-63ce3e99dbfa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BitOr", "[", 
  RowBox[{"0", ",", "1"}], "]"}]], "Input",
 CellLabel->
  "In[124]:=",ExpressionUUID->"8ba84933-3eb2-467b-9f0d-72a0990bcea8"],

Cell[BoxData["1"], "Output",
 CellLabel->
  "Out[124]=",ExpressionUUID->"4ddb93c6-6852-441b-bbeb-025819926d63"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BitOr", "[", 
  RowBox[{"1", ",", "1"}], "]"}]], "Input",
 CellLabel->
  "In[125]:=",ExpressionUUID->"95999ed7-0bf1-4916-8159-4814e728a25a"],

Cell[BoxData["1"], "Output",
 CellLabel->
  "Out[125]=",ExpressionUUID->"cc9d20e0-91e2-4020-8a62-31dd4ed53760"]
}, Open  ]],

Cell[TextData[{
 "Recall that for zero\[Dash]one matrices ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "3e6197f2-f197-4609-8f5c-8075e1eb8145"],
 " and ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "4af9c021-3f48-4764-be32-25cdca89ebcb"],
 " of the same size, the Boolean join of ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "42ecd55e-4545-4999-8721-6ef3e83bbe13"],
 " and ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "8554946e-3b65-43bf-8cbe-3ff1c6447979"],
 " is the matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "\[Or]", "B"}], TraditionalForm]],ExpressionUUID->
  "4799fa14-ff22-497d-9cda-bbeb2a51d809"],
 " whose ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"i", ",", "j"}], ")"}], TraditionalForm]],ExpressionUUID->
  "2c68e207-68bb-4bbf-92e6-cf35664db8ba"],
 " entry is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["A", 
     RowBox[{"i", " ", "j"}]], "\[Or]", 
    SubscriptBox["B", 
     RowBox[{"i", " ", "j"}]]}], TraditionalForm]],ExpressionUUID->
  "551ccbdc-6740-48ff-95ad-f17fdf39614c"],
 ". Since ",
 StyleBox[ButtonBox["BitOr",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitOr"], "FunctionLink"],
 " automatically threads over lists, it serves the role of the matrix join \
function without any additional work. For example,"
}], "Text",ExpressionUUID->"9db74818-dbc9-4c9c-8c10-a0ac8f6824ae"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"joinA", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"joinA", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[126]:=",ExpressionUUID->"e555cb50-6473-4dbe-9b28-201dedf66126"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0"},
     {"0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[127]//MatrixForm=",ExpressionUUID->"eeb4cf63-abcd-4346-8bbd-\
91aefc3b5fd6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"joinB", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"joinB", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[128]:=",ExpressionUUID->"3770cf3d-ca96-4d54-a2fc-58b072528acc"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1"},
     {"0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[129]//MatrixForm=",ExpressionUUID->"4a7734a9-0683-4581-a2d3-\
667460b7fa96"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"BitOr", "[", 
   RowBox[{"joinA", ",", "joinB"}], "]"}], "//", "MatrixForm"}]], "Input",
 CellLabel->
  "In[130]:=",ExpressionUUID->"5a699d60-d797-4d48-a78c-aae281589fc3"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1"},
     {"0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[130]//MatrixForm=",ExpressionUUID->"12e24d06-d831-49ff-8dfb-\
5f5f4c504e42"]
}, Open  ]],

Cell[TextData[{
 "Next, recall that for appropriately sized zero\[Dash]one matrices, the \
Boolean product ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "\[CircleDot]", "B"}], TraditionalForm]],ExpressionUUID->
  "419b9056-f9e4-42c1-9a62-af7f8dd28b33"],
 " is the matrix whose ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"i", ",", "j"}], ")"}], TraditionalForm]],ExpressionUUID->
  "ebde66ec-4243-43a9-8d0e-772ebe4a3a38"],
 " entry is obtained by the formula"
}], "Text",ExpressionUUID->"2ce3bf66-3523-4a0a-ae34-3a57833d3d10"],

Cell[BoxData[
 FormBox[
  RowBox[{
   UnderoverscriptBox[
    StyleBox["\[Or]",
     FontSize->24], 
    RowBox[{"k", "=", "1"}], "n"], 
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["a", 
      RowBox[{"i", " ", "k"}]], "\[And]", 
     SubscriptBox["b", 
      RowBox[{"k", " ", "j"}]]}], ")"}]}], TraditionalForm]], "Equation",Expre\
ssionUUID->"c218ad88-330f-4e46-a40b-23ce1d2b4bff"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "41a2b8e0-00a6-4f3b-8971-e34c073f1594"],
 " is the number of columns of ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "144cd429-f889-43c6-b33e-08555251ad58"],
 ", which is also the number of rows of ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "fbfdfed9-a26f-401f-a8e9-68f1d7d3cfb7"],
 ". This is implemented in the ",
 StyleBox["boolProduct", "Code"],
 " function. Refer to Section 2.6 where we first developed this function."
}], "Text",ExpressionUUID->"3466a22b-924f-45b8-9dd7-c42ae7a4b81e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"boolProduct", "::", "dimMismatch"}], "=", 
   "\"\<The dimensions of the input matrices do not match.\>\""}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[131]:=",ExpressionUUID->"d927f860-0f27-42c9-97ea-f9650cf84803"],

Cell[BoxData[
 RowBox[{
  RowBox[{"boolProduct", "[", 
   RowBox[{
    RowBox[{"A_", "?", "matrix01Q"}], ",", 
    RowBox[{"B_", "?", "matrix01Q"}]}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "m", ",", "kA", ",", "kB", ",", "n", ",", "output", ",", "i", ",", "j", 
      ",", "c", ",", "p"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "kA"}], "}"}], "=", 
      RowBox[{"Dimensions", "[", "A", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"kB", ",", "n"}], "}"}], "=", 
      RowBox[{"Dimensions", "[", "B", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"kA", "\[NotEqual]", "kB"}], ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{"boolProduct", "::", "dimmismatch"}], "]"}], ";", 
        RowBox[{"Return", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"output", "=", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"0", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "n"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", "m"}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"j", "=", "1"}], ",", 
         RowBox[{"j", "\[LessEqual]", "n"}], ",", 
         RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"c", "=", 
           RowBox[{"BitAnd", "[", 
            RowBox[{
             RowBox[{"A", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", 
             RowBox[{"B", "[", 
              RowBox[{"[", 
               RowBox[{"1", ",", "j"}], "]"}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"p", "=", "2"}], ",", 
            RowBox[{"p", "\[LessEqual]", "kA"}], ",", 
            RowBox[{"p", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"c", "=", 
              RowBox[{"BitOr", "[", 
               RowBox[{"c", ",", 
                RowBox[{"BitAnd", "[", 
                 RowBox[{
                  RowBox[{"A", "[", 
                   RowBox[{"[", 
                    RowBox[{"i", ",", "p"}], "]"}], "]"}], ",", 
                  RowBox[{"B", "[", 
                   RowBox[{"[", 
                    RowBox[{"p", ",", "j"}], "]"}], "]"}]}], "]"}]}], "]"}]}],
              ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"output", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "j"}], "]"}], "]"}], "=", "c"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "output"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[132]:=",ExpressionUUID->"aa27c8bb-5c77-4d95-a283-6295a46f1e5b"],

Cell["As an example,", "Text",ExpressionUUID->"f78b39f4-2f4a-49e8-814a-d4aa5ebdcab1"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"productA", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"productA", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[133]:=",ExpressionUUID->"e169cc43-6cdc-4772-9055-30a50cd4fe76"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "1"},
     {"0", "1", "0"},
     {"1", "0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[134]//MatrixForm=",ExpressionUUID->"39a591f3-3e3c-4f18-bd2d-\
5da5e10c9578"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"productB", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"productB", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[135]:=",ExpressionUUID->"eaab734c-f334-4c3d-a079-3ea1c26e0c73"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", "0"},
     {"0", "1", "0"},
     {"0", "0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[136]//MatrixForm=",ExpressionUUID->"10949aff-887f-47f5-880a-\
3b8c64f881ab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"boolProduct", "[", 
   RowBox[{"productA", ",", "productB"}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[137]:=",ExpressionUUID->"77b763e3-9a35-4890-8c74-1e5a45065c21"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", "1"},
     {"0", "1", "0"},
     {"1", "1", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[137]//MatrixForm=",ExpressionUUID->"919cd6f2-5b13-433c-8d15-\
71b03a2752a1"]
}, Open  ]],

Cell[TextData[{
 "We are now ready to implement Algorithm 1 from Section 9.4 for calculating \
the transitive closure. Recall that the idea of this algorithm is that we \
compute Boolean powers of the matrix of the relation, up to the size of the \
domain. At each step, we use the Boolean join on ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", 
    SuperscriptBox["M", 
     RowBox[{"[", "i", "]"}]]}], TraditionalForm]],ExpressionUUID->
  "08e3a9b7-db92-4e53-97cf-cfaac483c4c7"],
 " and the result matrix ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "f7fb4a56-d8cf-4d1a-8b05-22a46e78346c"],
 "."
}], "Text",ExpressionUUID->"84b8c45d-2b56-4907-ae31-27ed853cba35"],

Cell[BoxData[
 RowBox[{
  RowBox[{"transitiveClosure", "[", 
   RowBox[{"m_", "?", "matrix01Q"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"a", "=", "m"}], ",", 
      RowBox[{"b", "=", "m"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"a", "=", 
         RowBox[{"boolProduct", "[", 
          RowBox[{"a", ",", "m"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"b", "=", 
         RowBox[{"BitOr", "[", 
          RowBox[{"b", ",", "a"}], "]"}]}]}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "2", ",", 
         RowBox[{
          RowBox[{"Dimensions", "[", "m", "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "b"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->
  "In[138]:=",ExpressionUUID->"dae17823-fbe1-45ed-b910-81a98bd1ca20"],

Cell["\<\
We test our transitive closure function on Example 7 from Section 9.4, where \
it was found that the relation with matrix representation\
\>", "Text",ExpressionUUID->"007642e7-6626-474b-b5b8-df70e08a343f"],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["M", "R"], "=", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"1", "0", "1"},
      {"0", "1", "0"},
      {"1", "1", "0"}
     }], "\[NoBreak]", ")"}]}], TraditionalForm]], "Equation",ExpressionUUID->\
"a1df3e3c-6953-4494-a781-c72c9dab22b4"],

Cell["has transitive closure", "Text",ExpressionUUID->"27500386-7582-448f-984d-5c81e8a02af1"],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["M", 
    SuperscriptBox["R", "*"]], "=", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"1", "1", "1"},
      {"0", "1", "0"},
      {"1", "1", "1"}
     }], "\[NoBreak]", ")"}]}], TraditionalForm]], "Equation",ExpressionUUID->\
"5960a95c-e568-485d-8bfa-f03372e63d6a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"example7", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"example7", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[139]:=",ExpressionUUID->"afe0e0dc-ef12-47ed-bf90-6776d7463787"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "1"},
     {"0", "1", "0"},
     {"1", "1", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[140]//MatrixForm=",ExpressionUUID->"c3360f98-81a2-49ad-980d-\
c98ec13cdae3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"transitiveClosure", "[", "example7", "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[141]:=",ExpressionUUID->"d2190130-c76f-47d2-8116-e2aa97d2d468"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", "1"},
     {"0", "1", "0"},
     {"1", "1", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[141]//MatrixForm=",ExpressionUUID->"edf61dbd-0232-4e51-9aae-\
084cf3a12acf"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Warshall\[CloseCurlyQuote]s Algorithm", "Subsubsection",ExpressionUUID->"3a97f3ad-1bba-4275-b232-2b354c1163b9"],

Cell["\<\
Next, we consider Warshall\[CloseCurlyQuote]s algorithm, presented as \
Algorithm 2 in Section 9.4. This algorithm is straightforward to implement. \
\>", "Text",ExpressionUUID->"104883a7-a1ad-44be-8883-50172b16b749"],

Cell[BoxData[
 RowBox[{
  RowBox[{"warshall", "[", 
   RowBox[{"m_", "?", "matrix01Q"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", "j", ",", "k", ",", 
      RowBox[{"w", "=", "m"}], ",", "n"}], "}"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{
     RowBox[{"n", "=", 
      RowBox[{
       RowBox[{"Dimensions", "[", "m", "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"k", "=", "1"}], ",", 
       RowBox[{"k", "\[LessEqual]", "n"}], ",", 
       RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "1"}], ",", 
         RowBox[{"i", "\[LessEqual]", "n"}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"j", "=", "1"}], ",", 
           RowBox[{"j", "\[LessEqual]", "n"}], ",", 
           RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"w", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "j"}], "]"}], "]"}], "=", 
            RowBox[{"BitOr", "[", 
             RowBox[{
              RowBox[{"w", "[", 
               RowBox[{"[", 
                RowBox[{"i", ",", "j"}], "]"}], "]"}], ",", 
              RowBox[{"BitAnd", "[", 
               RowBox[{
                RowBox[{"w", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", ",", "k"}], "]"}], "]"}], ",", 
                RowBox[{"w", "[", 
                 RowBox[{"[", 
                  RowBox[{"k", ",", "j"}], "]"}], "]"}]}], "]"}]}], "]"}]}]}],
           "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "w"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[142]:=",ExpressionUUID->"a81e8074-0414-4dad-9b98-94063f93c3bf"],

Cell["\<\
Applying this to the same example as before, we see that the result is \
correct.\
\>", "Text",ExpressionUUID->"c93d5a08-1a68-488f-9149-4d386e53c2bb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"warshall", "[", "example7", "]"}], "//", "MatrixForm"}]], "Input",
 CellLabel->
  "In[143]:=",ExpressionUUID->"480462b8-5d37-4271-9149-43c4fe972369"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", "1"},
     {"0", "1", "0"},
     {"1", "1", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[143]//MatrixForm=",ExpressionUUID->"8c046dbb-40dc-420b-86cc-\
f9512a697e4e"]
}, Open  ]],

Cell[TextData[{
 "We can compare these two functions in terms of execution time using the \
Wolfram Language ",
 StyleBox[ButtonBox["Timing",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Timing"], "FunctionLink"],
 " function. However, we must point out that this comparison for a single \
example does not prove anything about the complexity or relative performance \
of the two algorithms. Rather, it serves as a demonstration that, even for \
relations on small domains, the difference in the computational complexity of \
the algorithms is noticeable. We shall consider the following zero\[Dash]one \
matrix that represents a relation on the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"91ffe73e-fa18-42f9-bf28-8a2fdd11062d"],
 "."
}], "Text",ExpressionUUID->"b17be13a-395f-4ecb-b271-6635854a728d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"transitiveCompare", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0"}], 
      "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"transitiveCompare", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[144]:=",ExpressionUUID->"a7db8350-3bc4-4f17-b6b6-94966cfeb41b"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0", "0", "0", "1"},
     {"1", "0", "1", "0", "0", "0"},
     {"1", "0", "0", "1", "0", "0"},
     {"1", "0", "0", "0", "1", "0"},
     {"1", "0", "0", "0", "0", "1"},
     {"0", "1", "0", "0", "0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[145]//MatrixForm=",ExpressionUUID->"6c1b1ee7-14e4-4d4b-9703-\
0c21994f8586"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"warshall", "[", "transitiveCompare", "]"}], "]"}]], "Input",
 CellLabel->
  "In[146]:=",ExpressionUUID->"b26c1049-fd6c-42b5-beb2-4a8fbb553ed4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000837`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[146]=",ExpressionUUID->"7e6a89c0-9046-4bca-94e4-4cc3d60b5ac8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"transitiveClosure", "[", "transitiveCompare", "]"}], 
  "]"}]], "Input",
 CellLabel->
  "In[147]:=",ExpressionUUID->"ad6bb264-c2a5-4aed-bb32-3768a0c079c5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.003448`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[147]=",ExpressionUUID->"3b1a62af-2d80-4fbb-b1af-dc223f1b1f29"]
}, Open  ]],

Cell[TextData[{
 "From this example, we can see that Warshall\[CloseCurlyQuote]s algorithm \
can be a substantial improvement over the alternative, at least on this \
specific example. The reader is encouraged to explore this further. The \
reader may also wish to explore the Wolfram Language function ",
 StyleBox[ButtonBox["TransitiveClosureGraph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TransitiveClosureGraph"], "FunctionLink"],
 ", which implements the Warshall algorithm and two other algorithms for \
finding transitive closures."
}], "Text",ExpressionUUID->"6161bfd4-c99d-4c1c-93df-ee210a2d60d8"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["9.5 Equivalence Relations", "Section",
 CellTags->"Section5",ExpressionUUID->"e4ffae0a-5939-4b3a-901e-223c8a26cf55"],

Cell[TextData[{
 "In this section, we will examine how we can use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to compute with equivalence relations. There are three specific problems \
that we will address here: given an equivalence relation on a set, how to \
compute the equivalence class of an element; how to determine the number of \
equivalence relations on a finite set; and how to compute the smallest \
equivalence relation that contains a given relation on a finite set. Note \
that in this section, relations are assumed to be represented as in the start \
of this chapter, as lists of pairs satisfying ",
 StyleBox["relationQ", "Code"],
 "."
}], "Text",ExpressionUUID->"f81ad6ac-904c-41f8-aea9-ac856de84dc4"],

Cell["\<\
First, we provide a test that determines whether or not a relation is an \
equivalence relation. Using the work that we have already done and recalling \
that an equivalence relation is simply a relation that is reflexive, \
symmetric, and transitive, this task is a simple one.\
\>", "Text",ExpressionUUID->"49017c59-6dc2-4cd6-9ab8-a691fc29535a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"equivalenceQ", "[", 
   RowBox[{"R_", "?", "relationQ"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"reflexiveQ", "[", "R", "]"}], "&&", 
   RowBox[{"symmetricQ", "[", "R", "]"}], "&&", 
   RowBox[{"transitiveQ", "[", "R", "]"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[148]:=",ExpressionUUID->"19b8ca35-490d-4e08-9710-42809ad2e334"],

Cell[TextData[{
 "As an example, define the equivalence relation \
\[OpenCurlyDoubleQuote]congruent mod 4\[CloseCurlyDoubleQuote] on the \
integers from 0 to ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "c2c62e68-9a2e-48e0-b488-0a858a5b7361"],
 "."
}], "Text",ExpressionUUID->"a73e103a-a6b2-419c-bf91-2588e4fbb06a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"makeMod4", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", "j"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Reap", "[", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Mod", "[", 
            RowBox[{
             RowBox[{"i", "-", "j"}], ",", "4"}], "]"}], "\[Equal]", "0"}], 
          ",", 
          RowBox[{"Sow", "[", 
           RowBox[{"{", 
            RowBox[{"i", ",", "j"}], "}"}], "]"}]}], "]"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "0", ",", "n"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "0", ",", "n"}], "}"}]}], "]"}], 
      "\[IndentingNewLine]", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[149]:=",ExpressionUUID->"31c752a3-3aed-457f-a447-f509d72cde8d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mod4to8", "=", 
  RowBox[{"makeMod4", "[", "8", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[150]:=",ExpressionUUID->"acabc060-d556-474a-bfcd-c4f67e59da7a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "8"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[150]=",ExpressionUUID->"c457d09d-1088-42e1-be74-482acb962e95"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"equivalenceQ", "[", "mod4to8", "]"}]], "Input",
 CellLabel->
  "In[151]:=",ExpressionUUID->"e41c5060-651b-4c4d-bae4-a47eeee30abf"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[151]=",ExpressionUUID->"4b8525d6-24c7-4d88-959d-cbb2c1809d24"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Equivalence Classes", "Subsection",
 CellTags->"Section5a",ExpressionUUID->"306c3e8b-1047-4cf7-a4db-36a809bc5df6"],

Cell[TextData[{
 "Recall that, given an equivalence relation ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "1934f190-7350-4887-b6ad-4eaa21e952f0"],
 " and a member ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "b951b38e-5027-4b70-9af8-8e481c5e255c"],
 " of the domain of ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "f4cc6489-0c29-4e01-bfe3-48bed77e00b7"],
 ", the equivalence class of ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "e4ebe895-4a5f-41f7-a74a-af060fd9d4b7"],
 " is the set of all members ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "3f885408-4c1d-4579-bc1f-c3908c5bda29"],
 " of the domain for which the pair ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"a", ",", "b"}], ")"}], TraditionalForm]],ExpressionUUID->
  "e0c7ae02-cd48-42de-89fb-f4bcc04f89e3"],
 " belongs to ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "d0e17e5b-a85b-42b9-82c3-f38263aea739"],
 ". In other words, it is the set of all elements in the domain that are ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "a4c7779d-52b5-4c21-9164-a1462d23d213"],
 "-equivalent to ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "5008227a-442d-4bf1-9fad-1ecb769b2141"],
 ". Therefore, the algorithm that determines the equivalence class of a \
particular element of the domain is fairly simple. We just search through ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "1067a057-710e-45d4-a588-12915685ade3"],
 " looking for all pairs of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"a", ",", "b"}], ")"}], TraditionalForm]],ExpressionUUID->
  "3181bf32-e342-4983-aa9c-f0c9ff147a19"],
 ", adding each such second element ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "27c74ee3-0129-4982-8cdc-f15bdddf3720"],
 " to the class. We do not have to search for pairs of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"b", ",", "a"}], ")"}], TraditionalForm]],ExpressionUUID->
  "1528c0de-0132-4508-9516-8dc6f4d7c25d"],
 " because equivalence relations are symmetric. "
}], "Text",ExpressionUUID->"9d6e18df-b41c-4bf3-b617-0a95c4403807"],

Cell[TextData[{
 "We can use the ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " function to implement this approach. Previously, we have used ",
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"], "FunctionLink"],
 " as a way to compute a sublist based on a criteria. ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " is similar, with two important differences. First, where ",
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"], "FunctionLink"],
 " uses a function to decide which elements of the original list to include, ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " uses a pattern. For example, to find all of the elements of ",
 StyleBox["mod4to8", "Code"],
 " with first element 3, we would need to match the pattern ",
 StyleBox["{3,_}", "Code"],
 ", as shown below."
}], "Text",ExpressionUUID->"22636d39-f5a4-4d40-b056-da943a36f2cc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{"mod4to8", ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "_"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[152]:=",ExpressionUUID->"530a99db-a06d-47a0-870b-980c03bfebbe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "7"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[152]=",ExpressionUUID->"b119c0f4-3426-444a-bb95-f785880074e6"]
}, Open  ]],

Cell[TextData[{
 "The second difference is that ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " can not only list those elements of the original list that match the \
pattern, but it can use a rule so that the output involves a modified version \
of the elements that match the pattern. For example, in order to return only \
the second elements of each pair (referring to the output above, the 3 and \
7), we enter the following."
}], "Text",ExpressionUUID->"61a39588-23d5-4020-8743-38870eb764a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{"mod4to8", ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "b_"}], "}"}], "\[Rule]", "b"}]}], "]"}]], "Input",
 CellLabel->
  "In[153]:=",ExpressionUUID->"1bd6d87f-0f20-44ae-a365-4519029bc579"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "7"}], "}"}]], "Output",
 CellLabel->
  "Out[153]=",ExpressionUUID->"4599eeb7-fc43-4e03-99a9-4922bd216ea4"]
}, Open  ]],

Cell[TextData[{
 "The following function returns the equivalence class for a given \
equivalence relation and a point in the domain. We use ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " as illustrated above and apply ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " to be certain that there are no duplicates in the output and to order the \
result."
}], "Text",ExpressionUUID->"e63fb6b9-dc2b-4bcf-8966-4167d3c37538"],

Cell[BoxData[
 RowBox[{
  RowBox[{"equivalenceClass", "[", 
   RowBox[{
    RowBox[{"R_", "?", "equivalenceQ"}], ",", "a_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "b", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Union", "[", 
     RowBox[{"Cases", "[", 
      RowBox[{"R", ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"a", ",", "b_"}], "}"}], "\[Rule]", "b"}]}], "]"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[154]:=",ExpressionUUID->"20ec96af-991e-43d8-8f62-ef837d2b3353"],

Cell[TextData[{
 "As an example, we compute the equivalence class of 3 in the modulo 4 \
relation on the domain ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", "30"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"270bd18f-dac7-4128-8b0e-eebf0752d9c8"],
 "."
}], "Text",ExpressionUUID->"cfb55c6d-5046-4727-a6d3-37436b481d39"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"equivalenceClass", "[", 
  RowBox[{
   RowBox[{"makeMod4", "[", "30", "]"}], ",", "3"}], "]"}]], "Input",
 CellLabel->
  "In[155]:=",ExpressionUUID->"24dc8149-8f39-4d29-b5fd-5dbf2e6d5e44"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "7", ",", "11", ",", "15", ",", "19", ",", "23", ",", "27"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[155]=",ExpressionUUID->"b3242a38-4ce6-4dfe-8f4b-9cc410b3bb9f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Number of Equivalence Relations on a Set", "Subsection",
 CellTags->"Section5b",ExpressionUUID->"6fa392b5-bfed-407c-af16-f28728d14761"],

Cell[TextData[{
 "Next, we consider how to construct all of the equivalence relations on a \
given (finite) set. The straightforward way to do this is to construct all \
relations on the given domain and then check them to see if they are \
equivalence relations. Since a relation on a set ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "2c08d8f1-6a88-45a3-b4de-308fd28d34dd"],
 " is merely a subset of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "\[Times]", "A"}], TraditionalForm]],ExpressionUUID->
  "6fdcb27e-0035-438e-9085-208983bf1231"],
 ", generating all relations is the same as generating all subsets of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "\[Times]", "A"}], TraditionalForm]],ExpressionUUID->
  "74daa85d-2da7-4d65-84fb-635b6e301993"],
 "."
}], "Text",ExpressionUUID->"c009d416-1965-4491-bda3-0673cb34039e"],

Cell[TextData[{
 "To implement this, we begin by creating the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "\[Times]", "A"}], TraditionalForm]],ExpressionUUID->
  "bf6477de-65ce-4d95-a955-edbcb1296e00"],
 " using the Wolfram Language ",
 StyleBox[ButtonBox["Tuples",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Tuples"], "FunctionLink"],
 " function. ",
 StyleBox[ButtonBox["Tuples",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Tuples"], "FunctionLink"],
 " will take a list and a positive integer (e.g., 2) and return the list of \
all possible tuples of the specified length. In effect, ",
 StyleBox["Tuples[A,2]", "Code"],
 " produces ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "\[Times]", "A"}], TraditionalForm]],ExpressionUUID->
  "22857697-ed23-490c-b843-bd085911af46"],
 ". For example, to compute ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], "\[Times]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], TraditionalForm]],ExpressionUUID->
  "13a7d598-0cb8-46f9-ba65-464ef7ee80f9"],
 ", we would enter the following:"
}], "Text",ExpressionUUID->"0db7d28b-52fc-460a-a835-b232ee23e760"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tuples", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", "2"}], "]"}]], "Input",
 CellLabel->
  "In[156]:=",ExpressionUUID->"cf7f908a-e338-404c-a1d7-aaffff1d5976"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[156]=",ExpressionUUID->"de487773-c303-4302-a232-877bb8e78e33"]
}, Open  ]],

Cell[TextData[{
 "We apply the ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " function to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "\[Times]", "A"}], TraditionalForm]],ExpressionUUID->
  "3ec4407a-0903-4107-91e0-a515fc1d569c"],
 " in order to find all subsets. Given a list, ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " produces the list of all sublists. For example, applying ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " to the output from ",
 StyleBox[ButtonBox["Tuples",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Tuples"], "FunctionLink"],
 " above produces the following."
}], "Text",ExpressionUUID->"e732ec1e-34a9-4d23-85e1-e57ce7b4bf87"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Subsets", "[", 
  RowBox[{"Tuples", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", "2"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[157]:=",ExpressionUUID->"1d3d8f64-e1c2-4482-8482-935573a7b4a4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"2", ",", "2"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[157]=",ExpressionUUID->"37505762-f479-468c-888e-d7e6ea39ed16"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Column",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Column"], "FunctionLink"],
 " function will place each element of the output from ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " on a separate line, so as to make it easier to read. As is our habit for \
functions that modify the display of output, we apply ",
 StyleBox[ButtonBox["Column",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Column"], "FunctionLink"],
 " in the postfix form."
}], "Text",ExpressionUUID->"5221cb76-b032-47a1-97a9-3ac40d414944"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Subsets", "[", 
   RowBox[{"Tuples", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", "2"}], "]"}], "]"}], "//", 
  "Column"}]], "Input",
 CellLabel->
  "In[158]:=",ExpressionUUID->"4af1584b-df2d-4f56-ae14-6811b291be2f"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"{", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1"}], "}"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"2", ",", "2"}], "}"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]}], "}"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellLabel->
  "Out[158]=",ExpressionUUID->"81d6b2bc-7be1-4e16-ace7-888bd1f25816"]
}, Open  ]],

Cell[TextData[{
 "To complete the process, we need to limit the output to those subsets of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "\[Times]", "A"}], TraditionalForm]],ExpressionUUID->
  "e93bd8e8-a864-4289-b5ce-0d12413d4708"],
 " which are equivalence relations. For this, we will apply ",
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"], "FunctionLink"],
 ". Recall that ",
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"], "FunctionLink"],
 " applied to a list and a function will produce the sublist of the original \
for which the function returns ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 ". In this case, the function we use will be ",
 StyleBox["equivalenceQ", "Code"],
 "."
}], "Text",ExpressionUUID->"10d9f072-c573-41be-97a7-a87234081a73"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"Subsets", "[", 
     RowBox[{"Tuples", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", "2"}], "]"}], "]"}], ",", 
    "equivalenceQ"}], "]"}], "//", "Column"}]], "Input",
 CellLabel->
  "In[159]:=",ExpressionUUID->"ed1956bb-5bb4-49f2-a527-b6b3d1ffc8c6"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"{", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"2", ",", "2"}], "}"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]}], "}"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellLabel->
  "Out[159]=",ExpressionUUID->"69d3b2d1-3483-41d1-9104-993bc25b01dd"]
}, Open  ]],

Cell[TextData[{
 "This example shows us how to build a more general function. ",
 StyleBox["allEquivalenceRelations", "Code"],
 " below will accept a list as its argument and will output all of the \
equivalence relations."
}], "Text",ExpressionUUID->"76a21b85-3f0f-4cb1-8d02-f57e2b499964"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allEquivalenceRelations", "[", "A_List", "]"}], ":=", 
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"Subsets", "[", 
     RowBox[{"Tuples", "[", 
      RowBox[{"A", ",", "2"}], "]"}], "]"}], ",", "equivalenceQ"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[160]:=",ExpressionUUID->"77292d5d-5310-4bcc-ae80-2bfac967969f"],

Cell[TextData[{
 "For example, there are 15 equivalence relations on ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], TraditionalForm]],
  ExpressionUUID->"6aa36687-1899-4552-8296-0d5d096b7a7f"],
 "."
}], "Text",ExpressionUUID->"94fc3497-e1e5-4509-91a9-e378124ea674"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"allEquivalenceRelations", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[161]:=",ExpressionUUID->"4e35a1e6-daff-4cb5-8fe1-72258d3edbbd"],

Cell[BoxData["15"], "Output",
 CellLabel->
  "Out[161]=",ExpressionUUID->"102b178c-3c2f-4279-901a-61ff3d48210a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Closure", "Subsection",
 CellTags->"Section5c",ExpressionUUID->"67704b38-1a32-4dc8-9a21-194e3e34ff7b"],

Cell[TextData[{
 "The last question to be considered in this section is the problem of \
finding the smallest equivalence relation containing a relation ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "f7b76039-1bd8-4839-affa-1f9d00721934"],
 "."
}], "Text",ExpressionUUID->"abaf785e-54f9-42b3-b4f0-917c6dda69be"],

Cell[TextData[{
 "The key idea is that we need to find the smallest relation containing ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "79de5ee2-e78e-4f34-9859-037e0c472722"],
 " that is reflexive, symmetric, and transitive. Recalling the previous \
section on closures, it is natural to think that we may compute the reflexive \
closure, the symmetric closure, and then the transitive closure, one after \
the other. The only concern would be that one closure would no longer have \
one of the previous properties. The argument below explains why applying this \
sequence of closure operations does in fact yield an equivalence relation; \
however, contrast this with Exercise 36 of Section 9.4 of the textbook."
}], "Text",ExpressionUUID->"205f8235-5c70-43f6-9088-3048fc0cee79"],

Cell[CellGroupData[{

Cell[TextData[{
 "Create the reflexive closure of ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "a33d2201-7634-4d78-b73d-8462ecb48be2"],
 ", call it ",
 Cell[BoxData[
  FormBox["P", TraditionalForm]],ExpressionUUID->
  "59fe57d6-9ff3-40bb-bb5d-8945bfd21335"],
 "."
}], "Item1Numbered",ExpressionUUID->"62afb484-4353-4831-9c70-09a2fbd378ff"],

Cell[TextData[{
 "Compute the symmetric closure of ",
 Cell[BoxData[
  FormBox["P", TraditionalForm]],ExpressionUUID->
  "d08e7e45-4718-4472-8524-bef8c2873b3e"],
 " and call this ",
 Cell[BoxData[
  FormBox["Q", TraditionalForm]],ExpressionUUID->
  "7733cca0-74cb-425d-821e-b3c016b23389"],
 ". Note that ",
 Cell[BoxData[
  FormBox["Q", TraditionalForm]],ExpressionUUID->
  "b0c2b44b-40f5-4f5e-94da-1c09c5accaa7"],
 " is still reflexive since no pairs were removed from the relation and no \
elements were added to the domain. Thus, ",
 Cell[BoxData[
  FormBox["Q", TraditionalForm]],ExpressionUUID->
  "dfb500e1-bc17-4018-a3da-80bc99298566"],
 " is both symmetric and reflexive."
}], "Item1Numbered",ExpressionUUID->"217c92c8-344a-4961-b8c0-c078b1a022f8"],

Cell[TextData[{
 "Compute the transitive closure of ",
 Cell[BoxData[
  FormBox["Q", TraditionalForm]],ExpressionUUID->
  "4bb55f81-bab5-4c84-a172-63d903e33418"],
 " and name this ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "f21e9dde-2d73-4a83-b7aa-2aedad1fff16"],
 ". Note that ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "d0b2fa3a-f35a-48ad-b20a-da457a9bd5e8"],
 " is still reflexive for the same reason as above. Moreover, ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "5d1656c4-c70a-4282-8ab6-378e721fcf43"],
 " is still symmetric since, if ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"a", ",", "b"}], ")"}], TraditionalForm]],ExpressionUUID->
  "558acf51-446b-4102-89ed-3fa164839370"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"b", ",", "c"}], ")"}], TraditionalForm]],ExpressionUUID->
  "15a9263b-7f55-4c6e-81ea-f8e7e7c51042"],
 " are in ",
 Cell[BoxData[
  FormBox["Q", TraditionalForm]],ExpressionUUID->
  "39d43502-1c2b-4b8b-9c16-8b4239876596"],
 " to force the addition of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"a", ",", "c"}], ")"}], TraditionalForm]],ExpressionUUID->
  "020dae4a-20f6-4319-b476-99d36f3bffd4"],
 ", then since ",
 Cell[BoxData[
  FormBox["Q", TraditionalForm]],ExpressionUUID->
  "c138f9fa-5bb7-488c-8f70-a11976c1ce3f"],
 " is symmetric, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"c", ",", "b"}], ")"}], TraditionalForm]],ExpressionUUID->
  "e2454297-9d8b-4b08-a9b5-7482f65db29d"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"b", ",", "a"}], ")"}], TraditionalForm]],ExpressionUUID->
  "c181b820-1bab-4954-b1db-b2738b4bf546"],
 " must also be in ",
 Cell[BoxData[
  FormBox["Q", TraditionalForm]],ExpressionUUID->
  "d0709437-6ec3-4998-9bac-f104de3ffb49"],
 " forcing ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"c", ",", "a"}], ")"}], TraditionalForm]],ExpressionUUID->
  "66846531-0636-438b-afbf-c8380bcab67c"],
 " to also be included in ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "42cd48b3-94db-4576-8706-12b9d1b8b0b1"],
 ". Hence, ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "4eb076ca-5b4b-484a-b15a-9425011924eb"],
 " is an equivalence relation."
}], "Item1Numbered",ExpressionUUID->"acce78c1-1d4d-4a56-a010-69f08916f4b2"]
}, Open  ]],

Cell[TextData[{
 "We implement this method as the composition of the four methods ",
 StyleBox["relationToMatrix", "Code"],
 ", ",
 StyleBox["reflexiveClosure", "Code"],
 ", ",
 StyleBox["symmetricClosure", "Code"],
 ", and then ",
 StyleBox["transitiveClosure", "Code"],
 ". "
}], "Text",ExpressionUUID->"005b8b4b-e801-4623-86a0-85141366ba92"],

Cell[BoxData[
 RowBox[{
  RowBox[{"equivalenceClosure", "[", 
   RowBox[{"R_", "?", "relationQ"}], "]"}], ":=", 
  RowBox[{"transitiveClosure", "[", 
   RowBox[{"symmetricClosure", "[", 
    RowBox[{"reflexiveClosure", "[", 
     RowBox[{"relationToMatrix", "[", "R", "]"}], "]"}], "]"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[162]:=",ExpressionUUID->"205ab2af-bceb-48e0-8bd5-3b4b2bcc5d92"],

Cell[TextData[{
 "As an example, recall the ",
 StyleBox["div6", "Code"],
 " relation representing the \[OpenCurlyDoubleQuote]is a divisor of\
\[CloseCurlyDoubleQuote] relation on ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"1248f2e1-fba4-40a4-bce3-2127709e8211"],
 ". We can see that the smallest equivalence relation that contains ",
 StyleBox["div6", "Code"],
 " is the relation in which every number is related to every other number."
}], "Text",ExpressionUUID->"39e2388b-7f11-4a48-8f60-911ad7dd9af5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"equivalenceClosure", "[", "div6", "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[163]:=",ExpressionUUID->"2eadb702-e36c-45a2-9bcb-9a10560734a9"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[163]//MatrixForm=",ExpressionUUID->"f67dfb21-770c-4072-81eb-\
4669e6fe69f5"]
}, Open  ]],

Cell["\<\
This is unsurprising, since 1 is a divisor of every number meaning that, in \
any equivalence relation containing the \[OpenCurlyDoubleQuote]divides\
\[CloseCurlyDoubleQuote] relation, 1 is related to every number. We can make \
this example slightly more interesting by removing 1.\
\>", "Text",ExpressionUUID->"7e7fd163-78c1-486e-bc4a-f43431c9a37d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"div17minus1", "=", 
  RowBox[{"dividesRelation", "[", 
   RowBox[{"Range", "[", 
    RowBox[{"2", ",", "17"}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[164]:=",ExpressionUUID->"fe026007-c06e-4057-8740-34843129087b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "12"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "12"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "12"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "12"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "11"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "12"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"13", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"16", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"17", ",", "17"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[164]=",ExpressionUUID->"83df855c-30b8-4eed-af14-3e64489d2534"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"equivalenceClosure", "[", "div17minus1", "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[165]:=",ExpressionUUID->"25d2b8be-0e18-4e60-8683-93c94627827d"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0"},
     {"0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", 
      "1", "1", "0"},
     {"0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", 
      "1", "1", "0"},
     {"0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", 
      "1", "1", "0"},
     {"0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", 
      "1", "1", "0"},
     {"0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", 
      "1", "1", "0"},
     {"0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", 
      "1", "1", "0"},
     {"0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", 
      "1", "1", "0"},
     {"0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", 
      "1", "1", "0"},
     {"0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", 
      "1", "1", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", 
      "0", "0", "0"},
     {"0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", 
      "1", "1", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", 
      "0", "0", "0"},
     {"0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", 
      "1", "1", "0"},
     {"0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", 
      "1", "1", "0"},
     {"0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", 
      "1", "1", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[165]//MatrixForm=",ExpressionUUID->"d123ce33-9e36-44d5-8304-\
34591ea4303a"]
}, Open  ]],

Cell[TextData[{
 "(Note the first row and column still correspond to 1 because of the way the \
matrix is constructed in ",
 StyleBox["relationToMatrix", "Code"],
 ".) In this example, you see that 11, 13, and 17 become isolated, being the \
three primes in the set which do not have multiples of them also included."
}], "Text",ExpressionUUID->"2f1ce9a1-6ae7-44df-ba7c-d7216302c0c2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["9.6 Partial Orderings", "Section",
 CellTags->"Section6",ExpressionUUID->"7fb3821e-5dea-44fa-b3f6-8ce949e15a03"],

Cell["\<\
In this section, we consider partial orderings (also called partial orders) \
and related topics, including maximal and minimal elements, Hasse diagrams, \
and lattices. \
\>", "Text",ExpressionUUID->"ae49ce27-097f-4797-bc69-62e5559e0614"],

Cell[CellGroupData[{

Cell["Partial Orders and Examples", "Subsection",
 CellTags->"Section6a",ExpressionUUID->"f6628a7b-d6f4-406d-86ff-05f366b99374"],

Cell["\<\
First, we will define a new predicate in the Wolfram Language for partial \
orders and create some examples of them.\
\>", "Text",ExpressionUUID->"2c35d41d-36f8-47b8-848c-d3430b0a4e7a"],

Cell[TextData[{
 "Recall that a partial order is a binary relation on a set that satisfies \
the three conditions of being reflexive, antisymmetric, and transitive. We \
define the predicate to be a function that tests an object against the \
definition of a partial order. It is very similar to the ",
 StyleBox["equivalenceQ", "Code"],
 " function we created in the previous section."
}], "Text",ExpressionUUID->"0d0ac398-37b3-4e31-878e-2b7a39dd48d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"partialOrderQ", "[", 
   RowBox[{"R_", "?", "relationQ"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"reflexiveQ", "[", "R", "]"}], "&&", 
   RowBox[{"antisymmetricQ", "[", "R", "]"}], "&&", 
   RowBox[{"transitiveQ", "[", "R", "]"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[166]:=",ExpressionUUID->"95e4a138-4309-482a-a381-fe7f9745d389"],

Cell[TextData[{
 "Now, we can use the ",
 StyleBox["partialOrderQ", "Code"],
 " function to determine whether a list is a partial order. For example, we \
can check that the ",
 StyleBox["div6", "Code"],
 " relation we defined earlier (recall that this is the \
\[OpenCurlyDoubleQuote]divides\[CloseCurlyDoubleQuote] relation on the set 1 \
through 6) is a partial order."
}], "Text",ExpressionUUID->"83f900f6-d1e6-43ed-a84b-755fee20421f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"partialOrderQ", "[", "div6", "]"}]], "Input",
 CellLabel->
  "In[167]:=",ExpressionUUID->"b5859a59-7933-41fd-9207-597ddd9e6bdb"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[167]=",ExpressionUUID->"87a7d444-9234-440b-bc18-bb57c4c7e5b2"]
}, Open  ]],

Cell[TextData[{
 "We create some additional examples of partial orderings that we can use in \
the remainder of the section. The ",
 StyleBox["div17minus1", "Code"],
 " relation (this is the \[OpenCurlyDoubleQuote]divides\
\[CloseCurlyDoubleQuote] relation on the set 2 through 17 defined in the \
previous section) is a partial order."
}], "Text",ExpressionUUID->"6e5bb7ec-90bc-4765-b5aa-e72e61264fc3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"partialOrderQ", "[", "div17minus1", "]"}]], "Input",
 CellLabel->
  "In[168]:=",ExpressionUUID->"ac1bc78d-8e6a-40ac-b71c-10bb179798a6"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[168]=",ExpressionUUID->"6f6abfd9-58ba-4cf1-9334-2b200fd9def8"]
}, Open  ]],

Cell[TextData[{
 "Indeed, all the relations created via the ",
 StyleBox["dividesRelation", "Code"],
 " function will be partial orders."
}], "Text",ExpressionUUID->"06a7e1fb-e8bc-4893-a965-6254d65d6266"],

Cell[TextData[{
 "Next, we create a function to produce examples of a class of lattices (we \
will discuss lattices more below, for now it is enough that these examples \
are partial orders). The ",
 StyleBox["divisorLattice", "Code"],
 " function will create the partial order whose domain is the set of positive \
divisors of a given number and whose order is defined by the \
\[OpenCurlyDoubleQuote]divides\[CloseCurlyDoubleQuote] relation. We only need \
to apply the ",
 StyleBox["dividesRelation", "Code"],
 " function to the divisors of the given number."
}], "Text",ExpressionUUID->"98741f42-4e78-421e-8bf4-64176e97e92e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"divisorLattice", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"dividesRelation", "[", 
   RowBox[{"Divisors", "[", "n", "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[169]:=",ExpressionUUID->"6c456230-9153-4606-999b-21e25c5d5e3c"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Divisors",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Divisors"], "FunctionLink"],
 " function produces the list of positive divisors of the given integer."
}], "Text",ExpressionUUID->"2a74489b-5866-4426-b738-948f63efa930"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"divisorLattice", "[", "10", "]"}]], "Input",
 CellLabel->
  "In[170]:=",ExpressionUUID->"d2720ebe-9182-4e22-8f3f-f6eecd24a6f9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "10"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[170]=",ExpressionUUID->"2ea199ca-ebf6-467c-98d4-d5996e190a6f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"partialOrderQ", "[", 
  RowBox[{"divisorLattice", "[", "10", "]"}], "]"}]], "Input",
 CellLabel->
  "In[171]:=",ExpressionUUID->"e85e8401-d35a-4cc2-9aef-476089cb29fa"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[171]=",ExpressionUUID->"02dba576-d8cf-4cf6-abbf-09077448dfee"]
}, Open  ]],

Cell["\<\
Finally, for a bit of variety, we create the posets whose Hasse diagrams are \
shown in Figure 8(a) and Figure 10 in Section 9.6. \
\>", "Text",ExpressionUUID->"1c048347-4778-4b33-b399-95bcb118d4a0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fig8A", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<a\>\"", ",", "\"\<a\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<a\>\"", ",", "\"\<b\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<a\>\"", ",", "\"\<c\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<a\>\"", ",", "\"\<d\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<a\>\"", ",", "\"\<e\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<a\>\"", ",", "\"\<f\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<b\>\"", ",", "\"\<b\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<b\>\"", ",", "\"\<c\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<b\>\"", ",", "\"\<d\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<b\>\"", ",", "\"\<e\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<b\>\"", ",", "\"\<f\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<c\>\"", ",", "\"\<c\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<c\>\"", ",", "\"\<e\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<c\>\"", ",", "\"\<f\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<d\>\"", ",", "\"\<d\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<d\>\"", ",", "\"\<e\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<d\>\"", ",", "\"\<f\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<e\>\"", ",", "\"\<e\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<e\>\"", ",", "\"\<f\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<f\>\"", ",", "\"\<f\>\""}], "}"}]}], "}"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[172]:=",ExpressionUUID->"159bcf9e-f87f-41bc-b95d-eacacaed4158"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"partialOrderQ", "[", "fig8A", "]"}]], "Input",
 CellLabel->
  "In[173]:=",ExpressionUUID->"f33b95fe-6af4-4ddc-af1e-7cb77ed8b3ec"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[173]=",ExpressionUUID->"47064216-7c19-48ee-b5a3-fa725008fddf"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"fig10", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<A\>\"", ",", "\"\<A\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<A\>\"", ",", "\"\<B\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<A\>\"", ",", "\"\<D\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<A\>\"", ",", "\"\<F\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<A\>\"", ",", "\"\<G\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<B\>\"", ",", "\"\<B\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<B\>\"", ",", "\"\<D\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<B\>\"", ",", "\"\<F\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<B\>\"", ",", "\"\<G\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<C\>\"", ",", "\"\<C\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<C\>\"", ",", "\"\<B\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<C\>\"", ",", "\"\<D\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<C\>\"", ",", "\"\<F\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<C\>\"", ",", "\"\<G\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<D\>\"", ",", "\"\<D\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<D\>\"", ",", "\"\<G\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<E\>\"", ",", "\"\<E\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<E\>\"", ",", "\"\<F\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<E\>\"", ",", "\"\<G\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<F\>\"", ",", "\"\<F\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<F\>\"", ",", "\"\<G\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<G\>\"", ",", "\"\<G\>\""}], "}"}]}], "}"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[174]:=",ExpressionUUID->"b4e71cea-e5f1-4f6e-b7c3-fe73810f1a4f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"partialOrderQ", "[", "fig10", "]"}]], "Input",
 CellLabel->
  "In[175]:=",ExpressionUUID->"c9609f58-b198-4e55-9f64-330e5a3752fb"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[175]=",ExpressionUUID->"0d3fb777-8117-428a-ad74-9cab15ec6e14"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Hasse Diagrams", "Subsection",
 CellTags->"Section6b",ExpressionUUID->"2430efd8-aa3b-4510-b451-a53f634376d3"],

Cell[TextData[{
 "Now that we have defined a predicate and have examples at our disposal, we \
turn to the problem of using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to draw Hasse diagrams of partial orders. As illustrated in the textbook, \
a Hasse diagram is a very useful tool for visualizing and understanding \
posets. Drawing the Hasse diagram for a poset is not as simple as drawing all \
of the elements of the set and then connecting all related pairs with an \
edge. Doing so would create an extremely messy, and not very useful, diagram. \
Instead, a Hasse diagram contains only those edges that are absolutely \
necessary to reveal the structure of the poset."
}], "Text",ExpressionUUID->"6a98bfb0-687e-4132-9be6-648142279ba0"],

Cell[TextData[{
 "The Wolfram Language includes the function ",
 StyleBox[ButtonBox["TransitiveReductionGraph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TransitiveReductionGraph"], "FunctionLink"],
 ", which can be used to create a Hasse diagram from the ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 " representing a relation. For example, if we begin with the relation \
described by Figure 10 from the textbook and use ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " at level 1 (",
 StyleBox["@@@", "Code"],
 ") to transform each pair in the relation to a ",
 StyleBox[ButtonBox["Rule",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Rule"], "FunctionLink"],
 ", we have the needed data to construct a ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"546857c1-8405-4ba0-bf59-845403f0cbf5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"Rule", "@@@", "fig10"}], "]"}]], "Input",
 CellLabel->
  "In[176]:=",ExpressionUUID->"efbf96b2-c58b-4781-a549-046f06856c26"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "A", "B", "D", "F", "G", "C", "E"}, {{{1, 1}, {1, 2}, {1, 3}, {1, 4}, {
       1, 5}, {2, 2}, {2, 3}, {2, 4}, {2, 5}, {6, 6}, {6, 2}, {6, 3}, {6, 
       4}, {6, 5}, {3, 3}, {3, 5}, {7, 7}, {7, 4}, {7, 5}, {4, 4}, {4, 5}, {5,
        5}}, Null}]]}, 
    TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJx1WAk8lN33nxnL2MYMg1YVLV6ylCXlVeeWN6GSRFlaCCUt2l9labNUFCll
KZVky5u9VV0RSSQtaKImZF/Gztj+Mkuf8fn972c+n+Pree59zjnf59znnq/S
TndLFxKBQLhGJBB+W8Ehhrh/TLIsELS8MRnzBg0JrsfC/3s9/nMIk3DO/8aT
5/Ew73m8/0+OQ+7/wfy4MA9HUPT17uUmwNu5C4/03iSjWSnJmxh5z+B85E6N
n6pkdDI7Qr7kaj4sc47TzIsTRX913QgxKXgP30/3HY+ii6J1Xq4lKV6f4TjL
UtTtoAiq2608/YICA4QznldpvhBGHdWGU2ymMsG3cBG7aVAIKRrq+4W61MLg
ovTtUQuEkKc5oaK7qx4cW0HCyIiEbK5ay8PXRtBeLatyFRPRe1/rdVb+zdBh
fCG6T4+IapQJXjrsFgjvjD24P46Agvdbx1bptoHaapdb/TQCKne2zt+wpB0s
zl0zVWsZhadihB9Bo+2g/D6eEpQwAktsrTuvXuqAQjfhADm7YTDfbD3sXNsB
a2yTsvLG2HzeIyN+j0E+Lq3Mb7mtP8DH3XnKLsymPiByMdk+VcQ+tZd/nRx9
oIQa2MPHvUHbskdPdPPxRxXv8V8XH0/cfq2Tj20czY/+lfPnfbOacIDM45WQ
bjLN45neHzxl3yuFfa9E+dh/WdldgtEfPJL6e4IIH/tMOPAHi004IMzHEXRF
iUV1Qnysq/N7/MGfJ/wn8fGhmW/Gf0Q+lpX5Pf7gNJHfCfrz/t/pMb3dYzrG
j+979e8xwseKv5c7NMzHW3+nV2SIjwX5IRAE+SEQePzwsCA/41iAHwJBkB8C
QZAfAkGQHwKBx88ChtjLb25P8Y0q8hWrSDJaZmLhslauGGPvL7HbZpPR08JD
puukK/CxWte/ZwSLIq3QDtuwDCZ+Tsm1utQkggJmDHg4XKzHwcNMVoamCNp5
+uOZAMk23JOSTw3eLowcHcDAb0YXblQ5mDbrhBDadMAn4ahoH97nzPyy04eE
xNziJEON2djHRcHb/gARXc6/uVTp5BCO80DRdlOIaBXZxv3MhWG8Ka7QemEW
ASlrVaakHx3B59sf3itZQ0DqyxXZmX+PYr+Yeuq56DFwXqxifv77KBa7tVBE
+sYoFEr2PVDfNoYji9VVDE+MgE3xBXrM4zGsv7j5GGX1MCgcqfFtbBvDNUVO
nWfYvPoh5OyaGH3864p6N6V9RHrBjju/8L38xa5n3VDEXd9V51Nlnn8X//n9
Oz+zO107geef57ZpLC9HFszh+v9z9T+H3jLbYSU3vsxd1QmWC9uAF/9exVH/
sJgW4OWHY5vBkps/jh3fd7j55dgacObmn2OrwZ/LD8eWA48/jv0Az7j8cuwb
4PHPsdmwkPt+cGwivPGxeZNCOI0bJGfao/F9e8XhuGX2pbmYwdZ6eUNDDIXK
X1+85HIZViWfwMREMVS64cisVesq8d0LVPVwV3FESSVd2j6lGts4yXUMb5VA
Yipvvype+oFzJUPvhB2WRJpRro+HT/7AgZdJ0rOuSiH1D8f2utdUYR3rD4cP
xVPQ92/aXXkDFdjWTTvTJUIabT2z+cA35TJs/6rmTKg1FSnLn3ecz3iFMzXF
GT+KqSjhvFwC2pKUrXZAe/B5LxUt4FwH3nUrznzgza/krA+89VU4zwfe81U5
/kEQ1z8Rjv+Qx/VfghMf8OIr4cQPMdz4ufkBXn60OPmDr9z8cfMLvPxy30cU
H50WWAH8/QbtvKLNOrp3lLt/E5Bm5VmNyrP8/QdJHYkxIvrz9x/Edvw9YegP
jt3w+/fnfsPqyNkK/P0ILVYxkHMo7OfjSfUAk+oBJtUDTKoHmFQPMKkeYFI9
wKR6gEn1AJPqASbVA0yqB5hUDzCpHmBSPcCkeoBJ9QC8evDepxFzM3IIbhXf
ly94R0QbQ/ZvCfBjQ5rG/PU+tiQ0quWzftqjQdhxbLmlA0kIzRE6++H2kkFo
Md3PEnsphKokqTfdKYNgmWvx94Jzwkg5uXnrNcNB+KaQQGlfI4JCc7oePno1
CEv21J2OJImi4vc/fi67zoZCjWzN+kRRFJLqLBGSMgSrO/poZ8e/p2M3Pmvn
jA2Dr83reaeiyejWAm3i1OOjIE/0C437wf/eItWJeiCjtNZdY92vCYh/PTOs
fvZpIuLNfxxfwtb/i4SMuetHTqVRazNJiPf8x7f9E+bNFkJ6XP/aEy+WZTmO
x8X1X/bkwGKT8X2fF9/B0ZdTUp2FUDM3fmIjsu2eJ4R4+anUN7UyfEFC6dz8
5Zo2PUzTJqFobn4XhF9krJXugeXbaxLoS1lAlZ4yM+9LL0Q+013VNI0FTtRW
d/b5fmB7V586P6cD5CxQUK/0IEjZmM+dYtwGUYH+/RYb2fA02cHgOW4Gw1Nl
soHLh0DBzUYrJL0BXjtmy8sVDEFWCzH1wNo6kCwM3C5fOwQL022v2WYzwXGK
0f260CGwNNB5vvwIA3LSbx2dyWADyTZ37L+2T1D5Gp2xyRuE+oP2Ds+Ci6F1
qf+riO0DsNn0rW14Yh7oDyxZZp/TBya+f+3x2fIcdqT2DDoTemHmJmzgWZUF
CQ4Sdw4s7QbWQFhfuvZj+NvJfuv9s51AOxk4/bQxhuaAAK/NrA4oGm0xuf6h
AKxMauPW7miDNWpXwln2HyDR9Elszb8t4DGljVzkVA4msTVfFDY3g3tH6Vs9
lWowMNtvHijRDKJRaTm7lGqg+EvWpusRzZCzXtibEv8LdlQMRROHWkBq+tLM
d6xGkPIofEqxzMCSeiiggPULboa6EmuWZmO/Ob+GZetqICHr9pcgvXy8uapC
SVOdCYxDQlMbw97jkn7HJn/GN2CQX7N2MD/jc987PfdcrIQtcoe3vqR9wyWv
PjdNvVYOiqalbYzXTGy47EVXqkw5zAyoOnWVXYvHAixzB8QrIJQ+qPJptB5b
MbVyxA5+BeaCYvfjiU14ppL26r651XCBbv43qaIFp1okz1vBZoK5+uNaT7c2
TBp94Zn/oRZKHliWNpu347uqjeLvO+ohfXqQp7tHO07693Z3qUYzyPbYePys
a8OturMM4sfzKHq9flZrVCvW6frCdNUYf5+mefslPGzG23+2HP/o2QnxP/aO
Pl3SiM+qfn308EIXFKTM7x2w+oWlb0TU9Zl0w1ab5LoXWjX44ZLgj09TusEw
tNOw4Gc1fmnhvPDOk25I+pZeohVQgQ0exJ7TceoGFZJDmlFsGb5at/dMXUYX
uHZ9LkWt4XD6lNKRTPfD+Dj9SeEMkddgcSKjrKM/ASu0RqQgmzJ4tFLaf3hH
DraTVZX3Hi6HkCSdNw0a7/HrslxikzcDNm1wObfItALL7NmqKn/9GxwMDfxE
kmHij+8oBsJaDPjpeCav8t86HBtk9LDOuRx6JMzNE083Ymt54SuMcx8gcj39
nTOjBX9X+9dMUjgXxGvSHZ6ubMdoEyuYEOwNVXunxtj7d2CpGqpKREMOpvXY
Nn643IGd6S1PBsTK8FCVxCp3u3Z88M3JaeU3K3Hyxbdv3YituMHNy2zeje9Y
x1ncpiO9EfuTFDtr4SfeyZj5fF9aHX6jlvF1hnAN9oqNqdyxnomNuy/t/HT+
J94f0D9IelmBFWN3arqn/MDZkvem7B55j3PyWasuzWfgsy5Rsygir/Dn+cFh
prUfcUi0kcb9h0k4tHa+FLvnNc75fOnhmfke2C4xw/fXyghMWGt3fkWtA78f
FexPaIjXnxC5WLA/oSHB/oSGBPsTGhLsT2hIsD+hIcH+hIZ4/cn5pHVvd/dR
0YCklqqsLwkpJWnPv/2VioT+u1ycX0NERaNp9LhEKrJTsFQ030BEpxOKrnnt
Gr9/zYkZD94SkGm8V4IyjYqYK4XfVG0cPy8PvTEPj5NGymL1UFA6BhKxyQHV
qtJIQTFwndeUMSDFqG3qiqCgqNz+jG8nR0Gyd2VaeZ8USh9YeLxucASuM+kN
i86JI+mWx/+8Sx6CmgWMHQ5bRFHbNMOwsOBB6HhzbYbLESG01u/JbqOYfnie
ZzQdKghIRUMj+3NdLwTrvn9cJTICfjKRoaZbekDtxkjOr9YBcNYea7472AXG
KfIWEU69kBu8Nb/6XSfUeim49O/pgruq6UojJSzYNMELlc9P2gQvVD4/Uyd4
kebz4zfBizSfn+EJXih8fji8UPj8iE7wIsXnJ3yCF0k+PxO06Ejy+ZlmhU0z
TkigkOnmZHyWhK6UlJqbPRVHzg0Sq09UE1HkbedVA51iKDNiT6ujERFpFnnP
ezFXDHktdhvxyCQgq/UzesPNyejFQymPl4sISFx1eWbgYVHUqRzzxPngGKzf
VusYFiyC7DIOWCWGjYJyM2U0674weiR9Ks+sbAT8S7PPt2UKIWG9TyKmc0fg
5cftPhW+499zfbAyEBqCK7QdFWtUh2Bx6uxbuePnirXMbXfvF/bCtDtHmT9X
9cN9uWd2hQ0sqBFdMSs8pheM7RtEHShNEFTnufmXeg8EbpbXf2r2E6Yu07zw
9mcXqC0ZDlxK/QK+wtaP/nnVCXfv+b+fR8uDj8as6s3vWDDjgJux32Ia4ukv
2enme6h7aYinv9SVJLtGJ9MQT3+5gn3/0e6jIZ7+kh9QPly0Rgbx9BefBTFX
XO/KIJ7+8jKqgSQpJIt4+otvQ5xF+j5ZxNNfPogzT27/Lot4+otbelKNygw6
4ukvkakXLxRZ0BFPf9kmfNrd+BQd8fSX9P8uXouKoyOe/hKZnDTwtoCOePrL
VCIzquwHHfH0F5UHaj7pnXTE01+Kki7e3jdMR4L6ixz/vNy7sCRCYoiO5vrp
rQmV6IUvKbq71VrpiCntuc+otBvuBi5x3fGJjm4J6ZefyOwCa/zxZmIqHW12
2uOr96wTes3ERcR96YiqKfvvcSYLTmky7nivp6MCp8UPDVVY0LNn9UEyhY7Y
Ypc30RQ7wGrE7EhcrixymhP3KU29HaIbmxPtDsiiIsqDqm3ebRBNOaidlSmN
zA4t6A0JaYSNQurRV2niKJ7EqltFqQPrdPEbFiwh9Owc1aah/ges15M1qIwf
hcpt364Z+1dCmIeVQ/HxPki6anT63kAZjG7NXDkU2Q67zEJ0hz0LQeahcX/F
lhrIMo0NtLV9AR8Lce42kw/QxNAu20lJAh3yWr8VLCoaPw+9KCWJofB5d3MN
vksj8SannUu2iSHdFZL3g1gUZJl0PK6UII7C1aKf/mNAQUrVG7S8mOJot2kk
m1gkhfzdwyTWNkugI7PTruUnSKE9W7YqNItJoaDz6wkGX6XQgm7ZUvv5FHR0
LM7IawsFeT/Y6FL6lzT651zGq73TpNHm0sfLj41Ko1isrnWSSkUF/VHGamFU
hLOenOqVpaFwy9tVFUwqGo6Utda9R0PPflgJ7/tGRb4bPt9rUJdBSh311M1+
4/3k6K1qofsyKDtoSZr3L2l0RLYqrp4oizZuLNXKEpNGNQXwYKahLPpaqaOc
TqCgW6G0KLa5LDL1iS+8WyOJ3O2+SI4slUWBhHDd4/kSKNw/NLBhSAa9yPqs
SM0RRz+UzrneuSmD5mtdXeTcIIYej0nIFyvLoKk15DPl68RQQlLpskXhNNSt
eea/d8NkZBa1Q6qFTEOHdfvMU0Z43zMWFuwfWViwf2Rhwf6RhQX7RxYW7B/H
sUD/OH6/QP/IwoL9Iwvz6mE9R6/ET+KszQzHz71cPRPrhw15tNzvhmccvRMz
F9t0HdnSBVw9FKd67X30Ra4TLnP0UmzT4nZRKbsDuHoqjlm2b7nZrjYo5eit
eFUdw2/+Xy3A1WOxXssjpwxiE3D1WszTbWdy9FzMtcDVezFP963n6MGYa4Gr
F2OebqzC0ZMx14InR2/GXAtcPRrzdOlojl6NuRbu1c/oylVk4dUz1A/r94yB
/Hcp6ph5F3YI9txSv38MMp2GljoG9+CiCI9bGy+Ogcem6qb/Uvvwqr69jPC5
BPTe0aJWJWAA6wfOUkwtIiDEkrOSbRvEJjOxP/k/Irqc6JjzOJ+Nwxvit//7
hIQu5on4PR5j42GNE7SgCiHUv3F5stt1Nv4m8jFhRbcw8nIgHDMKHcSLTjck
l/SIoPQnurWzxQawlULYjpA3oohIVFp1a0ofpr9rG4i2I6Nm+ZL+y43deNXU
nW81Ysho5E3A8+L4TmxyyvLgqXAyanXSDdEhd+A5Gfue2K0Y/x6smP6uekML
VgtPuM+OFEXXqxC7/lgjdg/fOHziuQhiSGw0qcqox1fTqlQL0oRR4ylGc7lG
Pe6fJTdeAkKowN6k5np7PX4knlmcdpyEduX0/R1X34hdoj9+n32EiHouLwi8
3taCf8l8d1l7i4Ac9d8pQf74OXV31yJ7UQL6P/2F4kM=
       "], {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
         ArrowBox[{1, 2}, 0.043048128342245986`], 
         ArrowBox[BezierCurveBox[{1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 
          28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 3}],
           0.043048128342245986`], 
         ArrowBox[BezierCurveBox[{1, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 
          54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 4}],
           0.043048128342245986`], 
         ArrowBox[BezierCurveBox[{1, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 
          80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 
          97, 98, 99, 100, 101, 102, 103, 104, 5}], 0.043048128342245986`], 
         ArrowBox[BezierCurveBox[{1, 108, 111, 113, 119, 121, 124, 1},
          SplineDegree->7], 0.043048128342245986`], 
         ArrowBox[{2, 3}, 0.043048128342245986`], 
         ArrowBox[{2, 4}, 0.043048128342245986`], 
         ArrowBox[BezierCurveBox[{2, 128, 129, 130, 131, 132, 133, 134, 135, 
          136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 
          149, 150, 151, 152, 153, 5}], 0.043048128342245986`], 
         ArrowBox[BezierCurveBox[{2, 157, 160, 162, 168, 170, 173, 2},
          SplineDegree->7], 0.043048128342245986`], 
         ArrowBox[{3, 5}, 0.043048128342245986`], 
         ArrowBox[BezierCurveBox[{3, 180, 183, 185, 191, 193, 196, 3},
          SplineDegree->7], 0.043048128342245986`], 
         ArrowBox[{4, 5}, 0.043048128342245986`], 
         ArrowBox[BezierCurveBox[{4, 203, 206, 208, 214, 216, 219, 4},
          SplineDegree->7], 0.043048128342245986`], 
         ArrowBox[BezierCurveBox[{5, 226, 229, 231, 237, 239, 242, 5},
          SplineDegree->7], 0.043048128342245986`], 
         ArrowBox[{6, 2}, 0.043048128342245986`], 
         ArrowBox[BezierCurveBox[{6, 246, 247, 248, 249, 250, 251, 252, 253, 
          254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 
          267, 268, 269, 270, 271, 3}], 0.043048128342245986`], 
         ArrowBox[BezierCurveBox[{6, 272, 273, 274, 275, 276, 277, 278, 279, 
          280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 
          293, 294, 295, 296, 297, 4}], 0.043048128342245986`], 
         ArrowBox[BezierCurveBox[{6, 298, 299, 300, 301, 302, 303, 304, 305, 
          306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 
          319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 
          332, 5}], 0.043048128342245986`], 
         ArrowBox[BezierCurveBox[{6, 336, 339, 341, 347, 349, 352, 6},
          SplineDegree->7], 0.043048128342245986`], 
         ArrowBox[{7, 4}, 0.043048128342245986`], 
         ArrowBox[BezierCurveBox[{7, 356, 357, 358, 359, 360, 361, 362, 363, 
          364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 
          377, 378, 379, 380, 381, 5}], 0.043048128342245986`], 
         ArrowBox[BezierCurveBox[{7, 385, 388, 390, 396, 398, 401, 7},
          SplineDegree->7], 0.043048128342245986`]}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         DiskBox[1, 0.043048128342245986], DiskBox[2, 0.043048128342245986], 
         DiskBox[3, 0.043048128342245986], DiskBox[4, 0.043048128342245986], 
         DiskBox[5, 0.043048128342245986], DiskBox[6, 0.043048128342245986], 
         DiskBox[7, 0.043048128342245986]}}]],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->
  "Out[176]=",ExpressionUUID->"b341d9d3-b154-4feb-ba04-bfdf2c10fb44"]
}, Open  ]],

Cell[TextData[{
 "As discussed in Section 9.3 of this manual, the Wolfram Language defaults \
to drawing arrows pointed downward. We use ",
 StyleBox[ButtonBox["Reverse",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reverse"], "FunctionLink"],
 " in combination with ",
 StyleBox[ButtonBox["Map",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Map"], "FunctionLink"],
 " (",
 StyleBox["/@", "Code"],
 ") in order to reverse the direction of the edges."
}], "Text",ExpressionUUID->"29660cf8-ae42-4039-bf51-5a22ec4b7cf2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fig10Graph", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{"Rule", "@@@", 
    RowBox[{"Reverse", "/@", "fig10"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[177]:=",ExpressionUUID->"2939671d-4293-42b0-84b4-8867583b4df5"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "A", "B", "D", "F", "G", "C", "E"}, {{{1, 1}, {2, 1}, {3, 1}, {4, 1}, {
       5, 1}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 6}, {2, 6}, {3, 6}, {4, 
       6}, {5, 6}, {3, 3}, {5, 3}, {7, 7}, {4, 7}, {5, 7}, {4, 4}, {5, 4}, {5,
        5}}, Null}]]}, 
    TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJx9mAk4lVvbx/fA3uZpE4kGnUhzkorqvpsnVKIUFYUUidKs1Kk4pAh1GkQa
JKnQ7NDaoaiMlSmFyDxt25B5v+w8+1z63vdb176u+/o/a3jWWtbv+d/LmG17
zOwZNBotmE6jDcT/UfBX4MGvKIH//Tntt+dUOwXqOVW4/308Siv8pqlC6f8T
yW/zIf//vJT/hxa151L1AfsD16md8ATaq6P8iPytJHprZWJF7WsI0GLpn8yM
JocrI93dNbLB74nBjTNhScTEdKu0jk0uFM65n+uUnk0muS7/6mpeADaGN1fJ
HSgkp5QtpkcmFMBdo7mn7Uy+E/5aRTm3gDwQZHaF7iYVZGy6dZ5jTw4kOcZV
Fz6tIazwIOs/Et/CnWem6qtK6skU26cHzdvvgWanCetzVyM5dyvRxoX3jEQt
qM2Y/K2J7Jh9pMD9cQaRO1LmPc29idR+mjG8fEs+0TKbpbg8rYEUqcW6h4cU
k+NKu0endteSTaNCF2gJvpOJZPIR7eVVZPbdo0V3fMtJ7YOwLMfOMiIby6Bp
5ZSTv/jvipnZX8kOxvP1TellpPrwpHaP8k8kz/t0Zn1gKblkc2Xxz7RUIlUe
ox4R/oX8pb/K5M3Xp8SSrzaVE/SRBKzmf9rZeYFkesq2j4VkYmPTK7d+nA+4
apG80QmehLbxZaxLsRVsUB7/U8eIgWYrL7vC02ro2L63MzWVgfFdh6YU7K+E
/JK/l8lNZ6LbxvydOmnlsLaP58B1Y6JrsOlIo8xSuJRd++6uFxMXyCEr16oI
XtuqR8W7MFG2OfJrjWYu3NxnaaQ7kYlLU1ZWjbHLhARZToApYeClkE1y2qnJ
cMygrvHMNAaKlQbF38h/CvL5nBeVZ+gYoMS050mFw3J/87m1qf3nJlfCt23V
GtH5Kp1WEF1vc5q4fl/vPdG1D2iff9WXry3w12vtgROD/dlBulqtod3QU/Jr
fO8fhSXbTnbB5cH3J6qt9nlwrxMWDM7Pc+6H+75anSAxOP/cLROcY/gdMG9w
fZuZI/U8NTqBWr8ZZruWX+/Xg/ujMHuErKtrF7wY3D+z/EeKMT7dQO2vQFjY
eDc09mw+CEQ8brugx3N36gP6oJ5S8Ofkgj97RfUy+24uonv1iHSX7UCH7n/1
7dUDv3/bz/12ddSwTpGermOobJP2U6QdhKUdvKOM3+1oZ2O96hazPyTaYEyU
3riwQjayN2leOfumBd71xXIi7rHxyaTbhiGhfDgR+T7Yw4GNzf58g/VBzbDi
rkeklgIbuackzr+8xQOt7lTTyxEsXKSQ7ukX1gRSt6O9v+mycILhsCsdUxqB
cXPCOv4VcTQ407TjeVs9SLctiM1rF0O75g31aS11cKmUUzXtFB018/b4XNpY
BSkmTwj3YQ8UzDg0YeKocij21531vrIdxquUhcr6FMN+b2/94w+bIeTJE55Z
UD6M3Bmy56V0LSgvdVypvTkHLKZ0n/xQ+B1GBHVukM9IBdXE9Wh/PhdG96RZ
fE1MgGFVj8f/szoZRuovMbhN7oHB189+UtslMHDZ+sraOQI4bH/948g8CZSb
+WZT0ro+SLu2MWfuRkncm2a82cukF7Q8JX3s6iUxgd7QYKDTA77yDzov+kth
Q+kdmc+lXdBrvHhszkJpZDscfLn5SCd4zMoSH8aSQYkLtq2fWn6CRJZJuF2h
DPJt7RINTNohjMNtS0iQxaQCT2Uvr1bIs7N4s9pADu19/zDV9mwBfVsVzsVw
OSw5pzSvwYkP8RK0Er8+OZxavuL7F+Nm2G6lojvLRB7Nfd8bNo3hwcyNFs1B
5+QxjKUbZJ7XAFMZ3Fm3iDwuDFk9Qm1tHZiut+ixK5fHC7kScrpPqiHYQgUK
O+TRL87cyVtQIfKHGcJSLtLC47unVKQz5c8Gn7xbNHh+FVDV+fUw59d5ovrh
h+JnwqSPIh25o76sLeuDSAfPrwmaX5Ms0qU1eT0xy1+KdN+EdB858Ug4Ye3f
uMSJjUZz6wJ+jKUj0WzRdVZm43DpFQqrVRloL5hhYdrHwnMv/wnIVGOi5Jhq
d5sJbLwQ8vHVQVUx3DT7smHiRTbyql1o/gxxtCodFb9+jgQ+lHKuDX8vjjdS
XivtlpJEvy/jVM5uY+GGoA5Y1C2JdYWm81ZzWXhv9blprB4pNOB76775xsLT
hp9a87qlsfN4gHHvCxZGv7jnVVkjg+02RebbzFlo9SX3TMAzWdwqjOLYInwu
hzHCdmLYLuwnhz7CcZioLxxXDh8I38PAGuF75dBaOA/64Lzk8LZwnvTBefeP
L1wHbXBdshjvOm3/kYkCCBSuWwbVFmbXcM37wE+4L9KY2bcjKqSnF9SF+yaF
J40q1xWM74Nf+yqJjJcjv53N6wNt/+j03H2NQPGgscv36em79UDxUB5wJV7m
Wi1QPBxgfinabVoNFA9Fr1cNj3xdARQPcumNe/9pLQOKB63FXjmrs0qA4iHN
+0LbF/1CoHiQ2i5Yq6b+ESgebsTdi2JeSweKh5T6e5kPK98AxYOHu0BeT5UL
FA/+Qebf1Dc+A4qHX/2jgeLhV/sbQPHwq94PKB7uCbUzDOWBRhvKA402lAca
jeKB0kN5oNGG8kCjDeWhPz8cwgONNpQHGo3i4ZfiwVA/4cFQP+HBUD/hwVA/
4cFQP+nXQ/ykv/0QP+HBUD/hAeUnvCiH3dM4PKD8hHv/6tPXxjyg/MSVEVLw
OJoHlJ8IHu7KY81oBspPXGJZj+JLmoHyk1eSrtuy4vhA+UnD8wje4ugWoPyk
55+ojSPSW4HykzoVj+tmSu1A+cnn+QXTQzt7gPKTUYXjboRF0pHyE6XZTj+u
+okh5SdL5yZUcMezkfKTlxVqtxWPSSLlJ076J0ed85FGyk+2jG/bMMNUFik/
8X/tbiL2QQ5FfqK04NXklCow1xjlrpwqgEO6k1f66fwAy9FZPXEVAnhERoWw
npSC59KfLU9m0zBz4jCz+7OLoKumrX54LA07po46VzgiD44UuwpGWtBxpLKd
7T/WH+G4p8TVjSMYmM1/nGqjlw1nGv7e4djBwK66ez/nHM4C3tZK/6slTLzx
ckqSHiMHXA1NjKKSxbCXLintxvsEep/G3/b8WxwLKx/cXWJdAC7leqeaTVmY
bK9h/EysGG6Fp7w/WMLC9ha5ZJNVZaBhNNvlLbKR3urg9LigAh7sijRbtpuN
K6dklq0/UAP1F+scnbexMaLlgKFyUz28mKZrmDuajdp746v4bB5MGD6VLIlm
YZrPec5Oi2Z4J6kluUeahc7vdmSmGvPB166k2m+ZOKbmOZ0tKuFD/nJXw2In
MVQI1YvXY7XA9mm9oYLTTPQ7XVx8JZEPLW9QS+8GA6d7edUZSfGhIuLinsvv
6ahxquaqxKVemFqnvYd+hY3/rKl95BDSBaNfrNVUVGdjviMD1Dk/IcvhhNTU
Uyx0+zB9+dguPsz/GWdg9VkcVZp5l5i36sF5Z034RVlxXFEafcFJrwysE8ca
F08Rw8oLmxldPu9BqsV25szZTLSWnO8mNyONHJa6vfmqLgMnfma/2VRUTu4y
a1NkmXSU+GsgwaokcSPFtAOTaKgTEDfywN1qst8tvnCBOw296kcZ2V6tJbxu
mVINNRqOvc4P98V6Ah4/3ZZaC4ApzJcaiIKr7Lt7zn0wRphfNRLTT1Zvttv2
DuZjTaTjTpmDu2EPjBbmb02EUx3+oOiniF9C8Wki9Psm8iLCYuVcWhsYCPOD
JjLrYvehujstg/lEIymdbsnft4E/mH80khgPp2e5ys1wfrfF7a/6DcSybpfv
mIQmKNOieczoqiM35zjPW+nQAFmnLYzNvWrJwh9fzowbXweWQQMJRTWZWfds
+2N6DRw1peW38CvJYASNubPOBNqXk8EITd/mqlqqlZLBCJU7tNR9hn0hgxGM
PRwzHnl8JoMRdPh/Byx/m0kGIxxNuKKSEfSGDEYY+Sh63ZfkeDIYIVR21sxb
SZFkMIruE+ZZBW/qwthI6bjlA1/o/vM+qH99v1mieq85OeG0Rf/q3piBDuIi
ffyjzrGPOv9qiVCXDPmzYiJ9haMpNe0HU6T1hX7yr/480P0YQ6TdNFL7f3TR
fJQUBwpdVB8rbhUjbvXvvftG64qw1hUC0fqKvw2UXpHWHBjOrUekrWMGBugW
6atXBkqnSAu3Z1aHSLcka9mX1rQDNR/2wOtj2kT1bOF6W0W6zW9zQt/hFpEW
bs8xvkgLmwc3i7Slran7eC4PXOefjevWpyPF8618qcj0WAZSPF/6cLx07wEx
pHhepl5l1fgnCyme45MXqUO+BFI8N6QGj7DfJ40Uz9+1v2y12SCHFM+reD77
Lr9WQIrnM103LJ2OKiHFM23tRd3OdCWkeGaZ5SU3KnOQ4vlC73Yd43UcpHi+
s26+ueJfHKR4RnP7lfMfc5Di2U5QIPnpMwcpnhUsrgRm1XOQ4nmxRcSPGd0c
HMqzsuj+9i7KN8y5h4MUz9r3JxyPa+YgxbMavfRaTgkHKZ6vRUd1vHvLQYrn
uAe+wdciOEjxbC12Ys9STw5SPF+N8fV5v4aDFM/OcVFlOiM4SPGcLVl6ZEux
ElI8n66KWBPnrIQUz+RaFUOaqYQUzye0b15wDFdEiue33nk975cpIsVzIDm9
WK9dASmef2REO4ZGKyDFc2Kc6U55JwWkeNZw2bX0zPT++8ggz0Fu5ZoqST2g
55Jwa+FlNm4YM//YoxcdMDHlbpOKKhuXySuMzCpvgRp6UvlhDxa+PRBHq/aq
h9060idc0sQx5pJDwKEtJfBM/1RKS5cYxqToToiVvA1vBoKyGH6eJICfPt/I
VRZtaQyHiTYRhVXJ03hE/4PYqapOOtosmvvq9PtOEnxwtuOjtzTMMx8moanW
TfaU2K0qCaRhu9p0wwPze4j4GcvahNU0jPf3Mw+Y10seZ2v7BnQJYOzL8Ruc
VPrIR6WJzxmzBGBwUXwh+20fcclOtMruz9+bxo5VsVstIH9KlhzsXNcLpvYn
s0/GCojCq/PSx/V7wHzjaHebegFRa0wftqWdOi807m88c3/jmfsbz9zfeOb+
xjP3N565v/HM/Y1nLsXz5Rn8ww7GAqD3lV+ylpbA+ddn2rb+0QuGF0JjVddL
4MwnL8ZdNuqGu5vqVHxqJHBKtJJhxtNOcFWJfGgf338vY7yId4ntgPtTslQf
vui/h816xXBZ2AFTVT1MqrOlMeqmcfgqtw7om+MSeL1BBm9vN7vlatgJXtce
mgg6ZPGJp1O7+/kuMJ3PvxlYLIfjh2efMFnXAzLxW8WT/OTx6OGs9ysd+sBg
TQjDoF0eb47ZdN6m/+/EinzksltSAW2KQnsCHek4TdDVcLxUHqufZDTp7WRg
QvnWu73b5NHsj/GHLs9jYvQDxbaWW3K4/7Hv9+O5TEz/k5PIjJPFHF/f2EXj
xHDVrbS2J2Ey2HPkx7v32mI4TDVihdSf0vhsOH9meyETtVR8NCtcpHB/suSB
yMVMjNNL8bY8KomPJqaPWLuXgWbvDirLxEvgSF3+OZl9dBxu0tyb0X+PNQx0
He24iYbDxSy+uYpJ4Liwmzvq2ApIg5IDM79ZQ6DPuYyfVxTwxAL08FriA+zE
/LF6uorIVW3RzKi5QD7NeG2lGaWINtsfWf5R+JTkHdgzZ5uSEpbtGpO0KTWV
qB/xjrq1UQmVZ/ZJZJV9IvWW005NOKKED+LaxY9kfSVO9rSiTW5K6MbWsDLo
LCMtV8vCakAJy81lXcWXVxF//W9KmTWKmKQRIPu0u5YYzY+35O1XRP09U1Yv
SGsgKTnJEdcaFJD6f+qZU7lOxEoB387ZfmDqt/485djPvzQvy+PtT7dGfOxq
JDfGdB8eHSyHXyqMo7Cknrxz4Btv48riYlONmKSnNeREelRb8WRZPLSGY7uU
VBBfU92O9dUy2DkJTCaafCf6nftVt7TJ4DBxTuWB/YVEJTstq3qdLDbNnbEr
9kM2OXnx+QfbHln0yxwLn68nEenyt9eWfJdDCUenLkZqNNl7tkhvNk8eaeny
f+cUbiG7S33DmisERMYxZc+UwiYocGxVP7y0j9Dp21wtw+phoSDdw2ViL/E0
ktsddb0aysKvvT1zv4cs1fb5uFP7B+xsFj9Ez+khzwKbrgZPKIGNd3q/l1zu
/z6c3e03LiAPbtO9y9Va+gjrLxX6VutMsA6ber7FlsY9vWvDikuzk6E+4+sw
+j46F09MubZ1xksIqXk+LvMSg0tbsPHePPlnkFPw+Av/KZPbk/qsfOmSRDjF
u9np8FKMywi5ueLJ6FQwejb56yY/ce5+VSXn5zU50OFgl1amyeLe3PdxrFRR
ISwPrLYz28bibi3eVxVi8x1YimznSeYs7oKvGvwUfgVM35W4PahVnOuVkak4
ZmktOOWorNFbJc4N9p8aVkxvhH0/rOeH2YtxVVcWj49y5sHWfbtWLl7P5KZe
Tp+pvKIZ7m27eLxCj8HVjXbe53m6GcxK3pV9V6JzfcbYpeioN0N04argdbL9
35vjDZnBSjz4D7pyyeU=
       "], {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
         ArrowBox[BezierCurveBox[{1, 21, 24, 26, 32, 34, 37, 1},
          SplineDegree->7], 0.04847715736040609], 
         ArrowBox[{2, 1}, 0.04847715736040609], 
         ArrowBox[{2, 6}, 0.04847715736040609], 
         ArrowBox[BezierCurveBox[{2, 44, 47, 49, 55, 57, 60, 2},
          SplineDegree->7], 0.04847715736040609], 
         ArrowBox[BezierCurveBox[{3, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 
          74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 1}],
           0.04847715736040609], ArrowBox[{3, 2}, 0.04847715736040609], 
         ArrowBox[BezierCurveBox[{3, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 
          100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 
          113, 114, 115, 6}], 0.04847715736040609], 
         ArrowBox[BezierCurveBox[{3, 119, 122, 124, 130, 132, 135, 3},
          SplineDegree->7], 0.04847715736040609], 
         ArrowBox[BezierCurveBox[{4, 139, 140, 141, 142, 143, 144, 145, 146, 
          147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 
          160, 161, 162, 163, 164, 1}], 0.04847715736040609], 
         ArrowBox[{4, 2}, 0.04847715736040609], 
         ArrowBox[BezierCurveBox[{4, 165, 166, 167, 168, 169, 170, 171, 172, 
          173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 
          186, 187, 188, 189, 190, 6}], 0.04847715736040609], 
         ArrowBox[{4, 7}, 0.04847715736040609], 
         ArrowBox[BezierCurveBox[{4, 194, 197, 199, 205, 207, 210, 4},
          SplineDegree->7], 0.04847715736040609], 
         ArrowBox[BezierCurveBox[{5, 214, 215, 216, 217, 218, 219, 220, 221, 
          222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 
          235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 
          248, 1}], 0.04847715736040609], 
         ArrowBox[BezierCurveBox[{5, 249, 250, 251, 252, 253, 254, 255, 256, 
          257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 
          270, 271, 272, 273, 274, 2}], 0.04847715736040609], 
         ArrowBox[{5, 3}, 0.04847715736040609], 
         ArrowBox[{5, 4}, 0.04847715736040609], 
         ArrowBox[BezierCurveBox[{5, 275, 276, 277, 278, 279, 280, 281, 282, 
          283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 
          296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 
          309, 6}], 0.04847715736040609], 
         ArrowBox[BezierCurveBox[{5, 310, 311, 312, 313, 314, 315, 316, 317, 
          318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 
          331, 332, 333, 334, 335, 7}], 0.04847715736040609], 
         ArrowBox[BezierCurveBox[{5, 339, 342, 344, 350, 352, 355, 5},
          SplineDegree->7], 0.04847715736040609], 
         ArrowBox[BezierCurveBox[{6, 362, 365, 367, 373, 375, 378, 6},
          SplineDegree->7], 0.04847715736040609], 
         ArrowBox[BezierCurveBox[{7, 385, 388, 390, 396, 398, 401, 7},
          SplineDegree->7], 0.04847715736040609]}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         DiskBox[1, 0.04847715736040609], DiskBox[2, 0.04847715736040609], 
         DiskBox[3, 0.04847715736040609], DiskBox[4, 0.04847715736040609], 
         DiskBox[5, 0.04847715736040609], DiskBox[6, 0.04847715736040609], 
         DiskBox[7, 0.04847715736040609]}}]],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->
  "Out[177]=",ExpressionUUID->"00c04682-10e2-4b60-a100-2cf889d79294"]
}, Open  ]],

Cell[TextData[{
 "Applying ",
 StyleBox[ButtonBox["TransitiveReductionGraph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TransitiveReductionGraph"], "FunctionLink"],
 ", we can see that the result is, except for some slight repositioning of \
the vertices, the same graph shown in Figure 10. Refer back to Section 9.3 of \
this manual for the use of ",
 StyleBox[ButtonBox["VertexSize",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexSize"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["VertexLabels",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexLabels"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"25ab8dc1-9241-40ff-87d2-6dc79026e037"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TransitiveReductionGraph", "[", 
  RowBox[{"fig10Graph", ",", 
   RowBox[{"VertexSize", "\[Rule]", "Medium"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Name\>\"", ",", "Center"}], "]"}]}]}], "]"}]], "Input",
 CellLabel->
  "In[178]:=",ExpressionUUID->"e2f61e6d-18b4-4085-aada-610954203f63"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"A", "B", "D", "F", "G", "C", "E"}, {
       SparseArray[
       Automatic, {7, 7}, 0, {
        1, {{0, 0, 2, 3, 5, 7, 7, 7}, {{1}, {6}, {2}, {2}, {7}, {3}, {4}}}, 
         Pattern}], Null}, {VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Medium}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{1., 1.}, {0., 0.}}, 0.1], 
        ArrowBox[{{1., 1.}, {1., 0.}}, 0.1], 
        ArrowBox[{{1., 2.}, {1., 1.}}, 0.1], 
        ArrowBox[{{0., 2.}, {1., 1.}}, 0.1], 
        ArrowBox[{{0., 2.}, {0., 1.}}, 0.1], 
        ArrowBox[{{0., 3.}, {1., 2.}}, 0.1], 
        ArrowBox[{{0., 3.}, {0., 2.}}, 0.1]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.}, 0.1], InsetBox["\<\"A\"\>", {0., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], 
         InsetBox["\<\"B\"\>", {1., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], 
         InsetBox["\<\"D\"\>", {1., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], 
         InsetBox["\<\"F\"\>", {0., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.1], 
         InsetBox["\<\"G\"\>", {0., 3.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.1], 
         InsetBox["\<\"C\"\>", {1., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], 
         InsetBox["\<\"E\"\>", {0., 1.},
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->
  "Out[178]=",ExpressionUUID->"341c236b-c9cf-46b9-a9e6-e9d179a4457c"]
}, Open  ]],

Cell["\<\
While the Wolfram Language contains this useful function, we will develop our \
own functions for producing Hasse diagrams in order to better understand the \
connection between the partial order as a set of ordered pairs and the \
diagram.\
\>", "Text",ExpressionUUID->"eb1bc8b1-8ea5-400d-9d25-b4b8ef7a33c8"],

Cell[CellGroupData[{

Cell["Covering Relations", "Subsubsection",ExpressionUUID->"6b4526d5-1546-445b-8d60-2ddb2236ed79"],

Cell["\<\
The covering relation for a partial order is a minimal representation of the \
partial order, from which the partial order can be reconstructed via \
transitive and reflexive closure. \
\>", "Text",ExpressionUUID->"9afea712-3e97-4430-a5a6-31a21ffe06b4"],

Cell[TextData[{
 "Let \[PrecedesSlantEqual] be a partial order on a set ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "442dca31-2382-4a06-bc86-269d7bb71087"],
 ". Recall that an element ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "fedf49ae-6534-4fe5-b8e1-eb32372efa92"],
 " in ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "0e9a18a4-a7a0-40ab-b3eb-33d04b44e8b6"],
 " covers an element ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "f91c56a6-fd6b-4a3a-b558-3fd86fc0c179"],
 " in ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "e5b934cb-4313-4ef9-bbca-a5211fd00ed7"],
 " if ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "\[Precedes]", "y"}], TraditionalForm]],ExpressionUUID->
  "42015e99-262e-42d2-96ea-00b0cf24d02f"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "\[NotEqual]", "y"}], TraditionalForm]],ExpressionUUID->
  "5e841889-17b2-4fb8-8c86-3cef0b638581"],
 ", and there is no element ",
 Cell[BoxData[
  FormBox["z", TraditionalForm]],ExpressionUUID->
  "a119109b-a4bb-4bdd-98a0-4b1c0c30edb2"],
 " of ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "6c515cb8-1def-48c2-90de-7a3fbed789eb"],
 ", different from ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "c94b4c16-f36e-4b67-a6b2-601d7a25c5de"],
 " and ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "9f2c3667-47e9-4b21-aa08-547ab8c88047"],
 ", such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "\[Precedes]", "z", "\[Precedes]", "y"}], TraditionalForm]],
  ExpressionUUID->"cf2d46e4-7603-4ec5-a528-64e1576390e2"],
 ". In other words, ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "43c08cc1-9290-4248-b0e3-8ac3c7fc43a2"],
 " covers ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "0fffd970-9c05-4791-952e-768bdc9b809f"],
 " if ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "eafac032-b8d5-42b7-a023-2dfb3e54bbcd"],
 " is greater than ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "710b9327-5dd2-40e2-9ad0-6893ed92bd26"],
 " and there is no intermediary element. The set of pairs ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"x", ",", "y"}], ")"}], TraditionalForm]],ExpressionUUID->
  "04b352b8-fbe8-47eb-8fbf-7f433be99f29"],
 " for which ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "e0581416-1428-4211-8776-083aa3c3e1f0"],
 " covers ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "14ab5985-a31e-42ed-b19d-4f6414cd064d"],
 " is the covering relation of \[PrecedesSlantEqual]."
}], "Text",ExpressionUUID->"2c3f6af7-e4c8-4619-a676-97f2029a9d24"],

Cell[TextData[{
 "As a simple example, consider the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], TraditionalForm]],
  ExpressionUUID->"23cdbaaf-766c-4282-bb2b-4968bb653702"],
 " ordered by magnitude, that is, the usual \[OpenCurlyDoubleQuote]less than \
or equal to\[CloseCurlyDoubleQuote] relation. This relation consists of 10 \
ordered pairs:"
}], "Text",ExpressionUUID->"3136ec74-dc8e-499a-9039-3d1d3f528660"],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", ",", "1"}], ")"}], ",", 
    RowBox[{"(", 
     RowBox[{"1", ",", "2"}], ")"}], ",", 
    RowBox[{"(", 
     RowBox[{"1", ",", "3"}], ")"}], ",", 
    RowBox[{"(", 
     RowBox[{"1", ",", "4"}], ")"}], ",", 
    RowBox[{"(", 
     RowBox[{"2", ",", "2"}], ")"}], ",", 
    RowBox[{"(", 
     RowBox[{"2", ",", "3"}], ")"}], ",", 
    RowBox[{"(", 
     RowBox[{"2", ",", "4"}], ")"}], ",", 
    RowBox[{"(", 
     RowBox[{"3", ",", "3"}], ")"}], ",", 
    RowBox[{"(", 
     RowBox[{"3", ",", "4"}], ")"}], ",", 
    RowBox[{"(", 
     RowBox[{"4", ",", "4"}], ")"}]}], "}"}], TraditionalForm]], "Equation",Ex\
pressionUUID->"6e71e0c5-8c95-45f7-a50d-a4598add011d"],

Cell["Its covering relation is the set ", "Text",ExpressionUUID->"754e99a5-c614-4bdd-87ab-ea5311cdf153"],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", ",", "2"}], ")"}], ",", 
    RowBox[{"(", 
     RowBox[{"2", ",", "3"}], ")"}], ",", 
    RowBox[{"(", 
     RowBox[{"3", ",", "4"}], ")"}]}], "}"}], TraditionalForm]], "Equation",Ex\
pressionUUID->"353c47b3-90cc-4498-b44d-f04aadff885f"],

Cell[TextData[{
 "which consists of only three pairs. All the other pairs of the partial \
order can be inferred from the covering relation using transitivity and \
reflexivity. For instance, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"1", ",", "3"}], ")"}], TraditionalForm]],ExpressionUUID->
  "7f7b92c4-f852-4eea-8cfa-7d62284ff63e"],
 " can be recovered from ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"1", ",", "2"}], ")"}], TraditionalForm]],ExpressionUUID->
  "cc286ba0-59ad-46fc-b486-75f5b5cb7ab8"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"2", ",", "3"}], ")"}], TraditionalForm]],ExpressionUUID->
  "5b0ec2c9-298c-4d1d-93d3-e96d0e4ecdd8"],
 " via transitivity. Note that the covering relation involves many fewer \
pairs and thus is a much more efficient way to represent the partial order, \
at least in terms of storage."
}], "Text",ExpressionUUID->"94cc7534-e057-4068-9e50-e174ade43612"],

Cell["\<\
Our goal is to write a function in the Wolfram Language to draw the Hasse \
diagram of a given partial order. Since a Hasse diagram is, in fact, the \
graph of the associated covering relation, most of the work will be done in a \
function to find the covering relation of the partial order.\
\>", "Text",ExpressionUUID->"27b5d273-a8ec-4c26-ac10-81a0bf588376"],

Cell["\<\
First, we need a test to check whether a given element covers another. \
\>", "Text",ExpressionUUID->"f99e93c7-d67f-41e6-92b7-c9d7896a2ffb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"coversQ", "[", 
   RowBox[{
    RowBox[{"R_", "?", "partialOrderQ"}], ",", 
    RowBox[{"{", 
     RowBox[{"x_", ",", "y_"}], "}"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"z", ",", "checkSet"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Catch", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"x", "\[Equal]", "y"}], ",", 
        RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"MemberQ", "[", 
          RowBox[{"R", ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", "y"}], "}"}]}], "]"}]}], ",", 
        RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"checkSet", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{
         RowBox[{"findDomain", "[", "R", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", "y"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{"R", ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", "z"}], "}"}]}], "]"}], "&&", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"R", ",", 
             RowBox[{"{", 
              RowBox[{"z", ",", "y"}], "}"}]}], "]"}]}], ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"z", ",", "checkSet"}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Throw", "[", "True", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[179]:=",ExpressionUUID->"942d6d58-53e8-45c9-b0c1-931907936cf1"],

Cell[TextData[{
 "This function works by first checking to see if the two elements ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "7ca1e1b3-754a-4601-888f-11b417526fdf"],
 " and ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "ea327327-0b52-4cfb-8eb6-4d3bee723254"],
 " are equal to each other or if the pair ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"x", ",", "y"}], ")"}], TraditionalForm]],ExpressionUUID->
  "0e2d60ac-f561-4c96-ba12-b9165a2d6d3b"],
 " fails to be in the partial order. In either of these situations, ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "d9592ba7-92da-4ec4-b39c-234a1f181784"],
 " does not cover ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "68d6a55e-2429-4615-89bf-e5e5fd1927b8"],
 ". Assuming the pair of elements passes these basic hurdles, the function \
then checks every other element of the domain. If it can find an element that \
sits between ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "79d3e616-8e3f-4472-90ee-84a5270a18a8"],
 " and ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "6821791a-9e37-424f-bfa6-0103e0e1275b"],
 ", then we know they do not cover. If no element sits between them, then in \
fact ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "d628f039-0574-4859-b0f1-d89a542a3644"],
 " does cover ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "9528c905-2c4a-4563-bd42-4ff9894f3763"],
 "."
}], "Text",ExpressionUUID->"8ebb356c-b1ba-485e-a675-9fc4a134dd51"],

Cell[TextData[{
 "We can now construct the covering relation of a partial order. The function \
below simply checks every element of the given relation to see if one covers \
the other and includes only those that do in the output relation. It uses ",
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"], "FunctionLink"],
 " to execute the check over each element of the given relation and eliminate \
those that do not belong. The test used is a pure ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " (",
 StyleBox["&", "Code"],
 ") formed from ",
 StyleBox["coversQ", "Code"],
 ". "
}], "Text",ExpressionUUID->"46a6ced9-657e-4b16-a2fa-7c006709ec83"],

Cell[BoxData[
 RowBox[{
  RowBox[{"coveringRelation", "[", 
   RowBox[{"R_", "?", "partialOrderQ"}], "]"}], ":=", 
  RowBox[{"Select", "[", 
   RowBox[{"R", ",", 
    RowBox[{
     RowBox[{"coversQ", "[", 
      RowBox[{"R", ",", "#"}], "]"}], "&"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[180]:=",ExpressionUUID->"961c4086-e003-46c8-993f-3db44658967d"],

Cell[TextData[{
 "We consider two examples. First, the example described above, of the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], TraditionalForm]],
  ExpressionUUID->"29b49af1-efef-4167-8ea3-7ebf2dae2fd0"],
 " ordered by magnitude."
}], "Text",ExpressionUUID->"95529395-e08d-4444-bba0-d59ff9021d3b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"coveringRelation", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "4"}], "}"}]}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[181]:=",ExpressionUUID->"607a0407-2745-4c7c-92dd-2e6abe642396"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[181]=",ExpressionUUID->"207042f3-1a06-46de-9c90-34c4b348fb7c"]
}, Open  ]],

Cell["Second, we find the covering relation of a lattice.", "Text",ExpressionUUID->"fd494174-41bb-498b-a8e1-19c835a01a73"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"coveringRelation", "[", 
  RowBox[{"divisorLattice", "[", "30", "]"}], "]"}]], "Input",
 CellLabel->
  "In[182]:=",ExpressionUUID->"de09a3d4-204b-4f8e-8890-75eef29b959f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "30"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "30"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "30"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[182]=",ExpressionUUID->"5a3af428-0e3c-4d04-9437-f8106d68f8ec"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Drawing Hasse Diagrams", "Subsubsection",ExpressionUUID->"9062dc44-2259-4edd-8614-eeee14b550d9"],

Cell[TextData[{
 "Now, we will use the covering relation in order to write a function to draw \
the Hasse diagram for partial orders. By using the ",
 StyleBox["coveringRelation", "Code"],
 " function that we just completed, we can create the graph associated to a \
partial order. "
}], "Text",ExpressionUUID->"f7406b9d-9f67-44e4-9cfb-51eda6d2665e"],

Cell[TextData[{
 "As above, we use ",
 StyleBox[ButtonBox["Map",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Map"], "FunctionLink"],
 " (",
 StyleBox["/@", "Code"],
 ") to ",
 StyleBox[ButtonBox["Reverse",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reverse"], "FunctionLink"],
 " the order of the pairs and then ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " at level 1 (",
 StyleBox["@@@", "Code"],
 ") to transform the pairs of the relation into lists. "
}], "Text",ExpressionUUID->"a6285590-42f3-4815-ad43-5d64fcfa645e"],

Cell[TextData[{
 "As in Section 9.3 of this manual, we include an optional argument to \
control the size of vertices, with default value ",
 StyleBox["Medium", "Code"],
 ". "
}], "Text",ExpressionUUID->"ec87f687-9933-47b1-a568-1b190892c80d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hasseDiagram", "[", 
   RowBox[{
    RowBox[{"R_", "?", "partialOrderQ"}], ",", 
    RowBox[{"size_:", "Medium"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "edges", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"edges", "=", 
      RowBox[{"Rule", "@@@", 
       RowBox[{"Reverse", "/@", 
        RowBox[{"coveringRelation", "[", "R", "]"}]}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Graph", "[", 
      RowBox[{"edges", ",", 
       RowBox[{"VertexSize", "\[Rule]", "size"}], ",", 
       RowBox[{"VertexLabels", "\[Rule]", 
        RowBox[{"Placed", "[", 
         RowBox[{"\"\<Name\>\"", ",", "Center"}], "]"}]}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[183]:=",ExpressionUUID->"285ce2af-6f8e-4c01-979c-9bc97d2dbf7c"],

Cell["\<\
As an example, here is a diagram representing the divisor lattice of 210. \
\>", "Text",ExpressionUUID->"4a8ec4b2-213e-40ae-b8bc-44ee63cde5c9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hasseDiagram", "[", 
  RowBox[{
   RowBox[{"divisorLattice", "[", 
    RowBox[{"2", "*", "3", "*", "5", "*", "7"}], "]"}], ",", "Large"}], 
  "]"}]], "Input",
 CellLabel->
  "In[184]:=",ExpressionUUID->"be906016-b3f7-4639-b2df-d44ee6f8aa5e"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{2, 1, 3, 5, 7, 6, 10, 14, 15, 21, 35, 30, 42, 70, 105, 
      210}, {{{1, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 1}, {7, 1}, {8, 1}, {6, 
       3}, {9, 3}, {10, 3}, {7, 4}, {9, 4}, {11, 4}, {12, 6}, {13, 6}, {8, 
       5}, {10, 5}, {11, 5}, {12, 7}, {14, 7}, {13, 8}, {14, 8}, {12, 9}, {15,
        9}, {13, 10}, {15, 10}, {16, 12}, {14, 11}, {15, 11}, {16, 13}, {16, 
       14}, {16, 15}}, Null}, {VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Large}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{0., 1.}, {1., 0.}}, 0.2], 
        ArrowBox[{{1., 1.}, {1., 0.}}, 0.2], 
        ArrowBox[{{2., 1.}, {1., 0.}}, 0.2], 
        ArrowBox[{{3., 1.}, {1., 0.}}, 0.2], 
        ArrowBox[{{-1., 2.}, {0., 1.}}, 0.2], 
        ArrowBox[{{-1., 2.}, {1., 1.}}, 0.2], 
        ArrowBox[{{0., 2.}, {0., 1.}}, 0.2], 
        ArrowBox[{{0., 2.}, {2., 1.}}, 0.2], 
        ArrowBox[{{1., 2.}, {0., 1.}}, 0.2], 
        ArrowBox[{{1., 2.}, {3., 1.}}, 0.2], 
        ArrowBox[{{2., 2.}, {1., 1.}}, 0.2], 
        ArrowBox[{{2., 2.}, {2., 1.}}, 0.2], 
        ArrowBox[{{3., 2.}, {1., 1.}}, 0.2], 
        ArrowBox[{{3., 2.}, {3., 1.}}, 0.2], 
        ArrowBox[{{4., 2.}, {2., 1.}}, 0.2], 
        ArrowBox[{{4., 2.}, {3., 1.}}, 0.2], 
        ArrowBox[{{0., 3.}, {-1., 2.}}, 0.2], 
        ArrowBox[{{0., 3.}, {0., 2.}}, 0.2], 
        ArrowBox[{{0., 3.}, {2., 2.}}, 0.2], 
        ArrowBox[{{1., 3.}, {-1., 2.}}, 0.2], 
        ArrowBox[{{1., 3.}, {1., 2.}}, 0.2], 
        ArrowBox[{{1., 3.}, {3., 2.}}, 0.2], 
        ArrowBox[{{2., 3.}, {0., 2.}}, 0.2], 
        ArrowBox[{{2., 3.}, {1., 2.}}, 0.2], 
        ArrowBox[{{2., 3.}, {4., 2.}}, 0.2], 
        ArrowBox[{{3., 3.}, {2., 2.}}, 0.2], 
        ArrowBox[{{3., 3.}, {3., 2.}}, 0.2], 
        ArrowBox[{{3., 3.}, {4., 2.}}, 0.2], 
        ArrowBox[{{2., 4.}, {0., 3.}}, 0.2], 
        ArrowBox[{{2., 4.}, {1., 3.}}, 0.2], 
        ArrowBox[{{2., 4.}, {2., 3.}}, 0.2], 
        ArrowBox[{{2., 4.}, {3., 3.}}, 0.2]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 1.}, 0.2], InsetBox["2", {0., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.2], 
         InsetBox["1", {1., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.2], 
         InsetBox["3", {1., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.2], 
         InsetBox["5", {2., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{3., 1.}, 0.2], 
         InsetBox["7", {3., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 2.}, 0.2], 
         InsetBox["6", {-1., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.2], 
         InsetBox["10", {0., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.2], 
         InsetBox["14", {1., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.2], 
         InsetBox["15", {2., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{3., 2.}, 0.2], 
         InsetBox["21", {3., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{4., 2.}, 0.2], 
         InsetBox["35", {4., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.2], 
         InsetBox["30", {0., 3.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.2], 
         InsetBox["42", {1., 3.},
          BaseStyle->"Graphics"]}, {DiskBox[{2., 3.}, 0.2], 
         InsetBox["70", {2., 3.},
          BaseStyle->"Graphics"]}, {DiskBox[{3., 3.}, 0.2], 
         InsetBox["105", {3., 3.},
          BaseStyle->"Graphics"]}, {DiskBox[{2., 4.}, 0.2], 
         InsetBox["210", {2., 4.},
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->
  "Out[184]=",ExpressionUUID->"d35c16d5-58bb-441b-9357-1ea6f50c3751"]
}, Open  ]],

Cell["\<\
Here are the Hasse diagrams for some of the other examples we discussed in \
this section.\
\>", "Text",ExpressionUUID->"418454dd-eae9-4a40-9f44-8545f7d51133"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hasseDiagram", "[", "fig8A", "]"}]], "Input",
 CellLabel->
  "In[185]:=",ExpressionUUID->"e6c065bc-fb5c-4adc-ad11-89894f246a51"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "b", "a", "c", "d", "e", "f"}, {{{1, 2}, {3, 1}, {4, 1}, {5, 3}, {5, 
       4}, {6, 5}}, Null}, {VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Medium}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{0., 1.}, {0., 0.}}, 0.1], 
        ArrowBox[{{0., 2.}, {0., 1.}}, 0.1], 
        ArrowBox[{{1., 2.}, {0., 1.}}, 0.1], 
        ArrowBox[{{0., 3.}, {0., 2.}}, 0.1], 
        ArrowBox[{{0., 3.}, {1., 2.}}, 0.1], 
        ArrowBox[{{0., 4.}, {0., 3.}}, 0.1]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 1.}, 0.1], InsetBox["\<\"b\"\>", {0., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.1], 
         InsetBox["\<\"a\"\>", {0., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], 
         InsetBox["\<\"c\"\>", {0., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], 
         InsetBox["\<\"d\"\>", {1., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.1], 
         InsetBox["\<\"e\"\>", {0., 3.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 4.}, 0.1], 
         InsetBox["\<\"f\"\>", {0., 4.},
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->
  "Out[185]=",ExpressionUUID->"98f086e8-0673-4ed7-ab2e-5c678f9e0e82"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hasseDiagram", "[", 
  RowBox[{"div17minus1", ",", "Large"}], "]"}]], "Input",
 CellLabel->
  "In[186]:=",ExpressionUUID->"fe5a6857-87a8-4bc4-8d6c-78c4bfb4966c"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{4, 2, 6, 10, 14, 3, 9, 15, 8, 12, 5, 7, 
      16}, {{{1, 2}, {3, 2}, {4, 2}, {5, 2}, {3, 6}, {7, 6}, {8, 6}, {9, 1}, {
       10, 1}, {4, 11}, {8, 11}, {10, 3}, {5, 12}, {13, 9}}, Null}, {
      VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Large}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{0., 1.}, {0., 0.}}, 0.2], 
        ArrowBox[{{1., 1.}, {0., 0.}}, 0.2], 
        ArrowBox[{{1., 1.}, {1., 0.}}, 0.2], 
        ArrowBox[{{-3., 1.}, {0., 0.}}, 0.2], 
        ArrowBox[{{-3., 1.}, {-3., 0.}}, 0.2], 
        ArrowBox[{{-1., 1.}, {0., 0.}}, 0.2], 
        ArrowBox[{{-1., 1.}, {-1., 0.}}, 0.2], 
        ArrowBox[{{2., 1.}, {1., 0.}}, 0.2], 
        ArrowBox[{{-2., 1.}, {1., 0.}}, 0.2], 
        ArrowBox[{{-2., 1.}, {-3., 0.}}, 0.2], 
        ArrowBox[{{0., 2.}, {0., 1.}}, 0.2], 
        ArrowBox[{{1., 2.}, {0., 1.}}, 0.2], 
        ArrowBox[{{1., 2.}, {1., 1.}}, 0.2], 
        ArrowBox[{{0., 3.}, {0., 2.}}, 0.2]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 1.}, 0.2], InsetBox["4", {0., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.2], 
         InsetBox["2", {0., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.2], 
         InsetBox["6", {1., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{-3., 1.}, 0.2], 
         InsetBox["10", {-3., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 1.}, 0.2], 
         InsetBox["14", {-1., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.2], 
         InsetBox["3", {1., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.2], 
         InsetBox["9", {2., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{-2., 1.}, 0.2], 
         InsetBox["15", {-2., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.2], 
         InsetBox["8", {0., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.2], 
         InsetBox["12", {1., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{-3., 0.}, 0.2], 
         InsetBox["5", {-3., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 0.}, 0.2], 
         InsetBox["7", {-1., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.2], 
         InsetBox["16", {0., 3.},
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->
  "Out[186]=",ExpressionUUID->"71be8a76-3ce6-49f4-8d2e-e4fb18d82b81"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hasseDiagram", "[", "fig10", "]"}]], "Input",
 CellLabel->
  "In[187]:=",ExpressionUUID->"da2c2b44-fe25-44f5-a594-c6d09deb521b"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "B", "A", "D", "F", "C", "G", "E"}, {{{1, 2}, {3, 1}, {4, 1}, {1, 5}, {
       6, 3}, {4, 7}, {6, 4}}, Null}, {VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Medium}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{0., 1.}, {0., 0.}}, 0.1], 
        ArrowBox[{{0., 1.}, {1., 0.}}, 0.1], 
        ArrowBox[{{0., 2.}, {0., 1.}}, 0.1], 
        ArrowBox[{{-1., 2.}, {0., 1.}}, 0.1], 
        ArrowBox[{{-1., 2.}, {-1., 1.}}, 0.1], 
        ArrowBox[{{-1., 3.}, {0., 2.}}, 0.1], 
        ArrowBox[{{-1., 3.}, {-1., 2.}}, 0.1]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 1.}, 0.1], InsetBox["\<\"B\"\>", {0., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.1], 
         InsetBox["\<\"A\"\>", {0., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], 
         InsetBox["\<\"D\"\>", {0., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 2.}, 0.1], 
         InsetBox["\<\"F\"\>", {-1., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.1], 
         InsetBox["\<\"C\"\>", {1., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 3.}, 0.1], 
         InsetBox["\<\"G\"\>", {-1., 3.},
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 1.}, 0.1], 
         InsetBox["\<\"E\"\>", {-1., 1.},
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->
  "Out[187]=",ExpressionUUID->"1d1380d2-c44d-4bd3-9890-3a0431cd1619"]
}, Open  ]],

Cell[TextData[{
 "Comparing this last example to the diagram given in the textbook \
illustrates that, while using the ",
 StyleBox[ButtonBox["LayeredGraphPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/LayeredGraphPlot"], "FunctionLink"],
 " function does not result in quite as appealing graphs as those that are \
created by hand, it still provides a fairly useful graph. Also note that you \
can tweak the results of ",
 StyleBox[ButtonBox["LayeredGraphPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/LayeredGraphPlot"], "FunctionLink"],
 " dynamically. To adjust the location of a vertex, place the mouse pointer \
over the vertex, double-click to enter editing mode for the graph, and \
double-click again to edit the vertex. You can then click and drag the vertex \
to specify a different position. "
}], "Text",ExpressionUUID->"a2295564-f6d0-4f4a-ab56-9f03e0bd5f51"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Maximal and Minimal Elements", "Subsection",
 CellTags->"Section6c",ExpressionUUID->"202dc708-c76a-4370-a5f6-c915af9c5814"],

Cell["\<\
We will construct a function that determines the set of minimal elements of a \
partially ordered set.\
\>", "Text",ExpressionUUID->"bb4c2ea3-d6bb-46e4-b281-bb2fec04b048"],

Cell[TextData[{
 "The function takes two arguments: a partial order ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "16b8b078-c7a0-46fa-9c14-729cdaaa5afd"],
 " and a subset ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "2c1205d2-8d55-404f-b582-42f89b2acae0"],
 " of the domain of ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "29129ef1-af87-4cd3-bfe1-5292a91ed400"],
 ". It returns the set of minimal elements of ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "fff78159-25a2-453b-9f0f-7fe10c55aee5"],
 " with respect to ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "29ddcfb6-149f-42ae-97c0-2af61dce4587"],
 ". It first initializes the set of minimal elements to all of ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "e1793fb5-0823-4543-9cfb-ec50dacb7fb8"],
 " and then removes those that are not minimal."
}], "Text",ExpressionUUID->"c650bebb-91d5-4ee7-a146-baf72e408957"],

Cell[BoxData[
 RowBox[{
  RowBox[{"minimalElements", "[", 
   RowBox[{
    RowBox[{"R_", "?", "partialOrderQ"}], ",", "S_List"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"M", ",", "s", ",", "t"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"M", "=", "S"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{"R", ",", 
             RowBox[{"{", 
              RowBox[{"t", ",", "s"}], "}"}]}], "]"}], ",", 
           RowBox[{"M", "=", 
            RowBox[{"Complement", "[", 
             RowBox[{"M", ",", 
              RowBox[{"{", "s", "}"}]}], "]"}]}]}], "]"}], 
         "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"t", ",", 
           RowBox[{"Complement", "[", 
            RowBox[{"S", ",", 
             RowBox[{"{", "s", "}"}]}], "]"}]}], "}"}]}], "]"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"s", ",", "S"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "M"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[188]:=",ExpressionUUID->"fc60ddf0-895c-48f3-aca7-bb48d49999b9"],

Cell[TextData[{
 "We can see this work on our ",
 StyleBox["div6", "Code"],
 " partial order. As we will be using the ",
 StyleBox["div6", "Code"],
 " partial order for many examples in this section, its Hasse diagram may \
also be useful."
}], "Text",ExpressionUUID->"4eff99c7-abe1-4a74-8900-ffb26926669a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hasseDiagram", "[", "div6", "]"}]], "Input",
 CellLabel->
  "In[189]:=",ExpressionUUID->"058913a7-857d-4c32-b773-5eef571c2029"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{2, 1, 3, 5, 4, 
      6}, {{{1, 2}, {3, 2}, {4, 2}, {5, 1}, {6, 1}, {6, 3}}, Null}, {
      VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Medium}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{0., 1.}, {0., 0.}}, 0.1], 
        ArrowBox[{{1., 1.}, {0., 0.}}, 0.1], 
        ArrowBox[{{-1., 1.}, {0., 0.}}, 0.1], 
        ArrowBox[{{0., 2.}, {0., 1.}}, 0.1], 
        ArrowBox[{{1., 2.}, {0., 1.}}, 0.1], 
        ArrowBox[{{1., 2.}, {1., 1.}}, 0.1]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 1.}, 0.1], InsetBox["2", {0., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.1], 
         InsetBox["1", {0., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], 
         InsetBox["3", {1., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 1.}, 0.1], 
         InsetBox["5", {-1., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], 
         InsetBox["4", {0., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], 
         InsetBox["6", {1., 2.},
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->
  "Out[189]=",ExpressionUUID->"1a486914-7f9b-4218-8c10-f5475591cbc4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"minimalElements", "[", 
  RowBox[{"div6", ",", 
   RowBox[{"Range", "[", "6", "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[190]:=",ExpressionUUID->"ed0a23ef-7c89-47d2-8d1c-0a3d9070bbb4"],

Cell[BoxData[
 RowBox[{"{", "1", "}"}]], "Output",
 CellLabel->
  "Out[190]=",ExpressionUUID->"ea915f06-5b03-41ea-a186-54402110df30"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"minimalElements", "[", 
  RowBox[{"div6", ",", 
   RowBox[{"Range", "[", 
    RowBox[{"2", ",", "6"}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[191]:=",ExpressionUUID->"47f7b911-80de-4b4f-86e4-b90e789cdcb5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "5"}], "}"}]], "Output",
 CellLabel->
  "Out[191]=",ExpressionUUID->"1017ce57-9357-4c85-80e9-3d4995c7f4c2"]
}, Open  ]],

Cell["\<\
Note that, by reversing the relation and thus the order, we can compute \
maximal elements very easily.\
\>", "Text",ExpressionUUID->"96ce9bfe-92fb-4bfd-a595-6e85ac99c65e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maximalElements", "[", 
   RowBox[{
    RowBox[{"R_", "?", "partialOrderQ"}], ",", "S_List"}], "]"}], ":=", 
  RowBox[{"minimalElements", "[", 
   RowBox[{
    RowBox[{"inverseRelation", "[", "R", "]"}], ",", "S"}], "]"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->
  "In[192]:=",ExpressionUUID->"ff92e81f-c904-4599-9e91-a9872a3121c3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"maximalElements", "[", 
  RowBox[{"div6", ",", 
   RowBox[{"Range", "[", "6", "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[193]:=",ExpressionUUID->"5bedecef-a12d-4ac2-84ca-c28e2bdf844f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "5", ",", "6"}], "}"}]], "Output",
 CellLabel->
  "Out[193]=",ExpressionUUID->"70b41333-97e1-475b-b1f9-77a74776aba2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Least Upper Bound", "Subsection",
 CellTags->"Section6d",ExpressionUUID->"df01284f-122e-4aaf-ab9f-0c80645d32f0"],

Cell[TextData[{
 "Next, we will write a function for computing the least upper bound of a set \
with respect to a partial order, if it exists. Our function will return the \
value ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 " in the case that the set has no least upper bound."
}], "Text",ExpressionUUID->"7e1e6f0b-f3d1-40e1-bbec-86db9697201c"],

Cell[TextData[{
 "First, we create a function ",
 StyleBox["upperBoundQ", "Code"],
 " that determines whether a given element is an upper bound of a set with \
respect to a relation. It accomplishes this by checking to make sure that the \
given element is greater than every element of the set."
}], "Text",ExpressionUUID->"dd2a936e-f7e0-49ec-a159-25c54c3789ad"],

Cell[BoxData[
 RowBox[{
  RowBox[{"upperBoundQ", "[", 
   RowBox[{
    RowBox[{"R_", "?", "partialOrderQ"}], ",", "S_List", ",", "u_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "s", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Catch", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"R", ",", 
             RowBox[{"{", 
              RowBox[{"s", ",", "u"}], "}"}]}], "]"}]}], ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"s", ",", "S"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"Throw", "[", "True", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[194]:=",ExpressionUUID->"17d9ea0a-d9c1-4cff-8dcb-408bcd0a9d14"],

Cell[TextData[{
 "For example, under the ",
 StyleBox["div6", "Code"],
 " relation, 6 is an upper bound of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], TraditionalForm]],
  ExpressionUUID->"0b18b27b-c34b-47ca-bb51-f015d7405eba"],
 ", but not of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], TraditionalForm]],
  ExpressionUUID->"f37ccace-7101-4a51-81f8-2305cd9b586e"],
 "."
}], "Text",ExpressionUUID->"cf6c256a-1c57-494e-9102-9ffbeb493d12"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"upperBoundQ", "[", 
  RowBox[{"div6", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", "6"}], "]"}]], "Input",
 CellLabel->
  "In[195]:=",ExpressionUUID->"0e1596d5-42cf-4264-9255-3361cbae2892"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[195]=",ExpressionUUID->"9528e7ae-a397-42c3-8a8b-be42d5e3322b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"upperBoundQ", "[", 
  RowBox[{"div6", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", "6"}], 
  "]"}]], "Input",
 CellLabel->
  "In[196]:=",ExpressionUUID->"8595562c-f029-47f0-9b48-171b9d38dd1f"],

Cell[BoxData["False"], "Output",
 CellLabel->
  "Out[196]=",ExpressionUUID->"a17611fd-c1a1-4505-a1a2-01df986acdab"]
}, Open  ]],

Cell[TextData[{
 "Second, we write a function to find all of the upper bounds for a given \
set. We do this by considering every element of the domain of the relation \
and checking to see which are upper bounds, using the ",
 StyleBox["upperBoundQ", "Code"],
 " function."
}], "Text",ExpressionUUID->"1d75ee79-f5b5-48c1-b9bd-71f34750c4f4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"upperBounds", "[", 
   RowBox[{
    RowBox[{"R_", "?", "partialOrderQ"}], ",", "S_List"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"domR", ",", "d", ",", 
      RowBox[{"U", "=", 
       RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"domR", "=", 
      RowBox[{"findDomain", "[", "R", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"upperBoundQ", "[", 
          RowBox[{"R", ",", "S", ",", "d"}], "]"}], ",", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"U", ",", "d"}], "]"}]}], "]"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"d", ",", "domR"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "U"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->
  "In[197]:=",ExpressionUUID->"df5394b7-bdd4-4be4-9b28-f59f2d7aeb76"],

Cell[TextData[{
 "For instance, the upper bounds of the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], TraditionalForm]],ExpressionUUID->
  "2288bfdc-a170-444a-ba68-f48b7e76a413"],
 " under ",
 StyleBox["div6", "Code"],
 " are:"
}], "Text",ExpressionUUID->"31bf592a-d9a7-4a77-97e2-69cf6037d527"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"upperBounds", "[", 
  RowBox[{"div6", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[198]:=",ExpressionUUID->"44efae1f-755a-4b9c-bbca-6d093b12b75b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "4", ",", "6"}], "}"}]], "Output",
 CellLabel->
  "Out[198]=",ExpressionUUID->"0aef393e-b74b-4d2d-a95e-9fd5a06fa0e8"]
}, Open  ]],

Cell[TextData[{
 "To complete the task of finding the least upper bound of a set, we merely \
use ",
 StyleBox["upperBounds", "Code"],
 " to compute all of the upper bounds for the set, use ",
 StyleBox["minimalElements", "Code"],
 " to see which of the upper bounds are minimal, and then check to see how \
many minimal upper bounds are found. If there is exactly one minimal upper \
bound, then this is the least upper bound. Otherwise, the set has no least \
upper bound."
}], "Text",ExpressionUUID->"2043eb47-1a5a-43e1-9200-538db160485d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"leastUpperBound", "[", 
   RowBox[{
    RowBox[{"R_", "?", "partialOrderQ"}], ",", "S_List"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"U", ",", "M"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"U", "=", 
      RowBox[{"upperBounds", "[", 
       RowBox[{"R", ",", "S"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"M", "=", 
      RowBox[{"minimalElements", "[", 
       RowBox[{"R", ",", "U"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "M", "]"}], "\[NotEqual]", "1"}], ",", "Null", 
       ",", 
       RowBox[{"M", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[199]:=",ExpressionUUID->"ff360ad1-6ea4-41c3-806a-719358a320da"],

Cell[TextData[{
 "For example, the least upper bounds of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], TraditionalForm]],ExpressionUUID->
  "2007143f-0e75-46a2-b7ef-3fc371a743d1"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], TraditionalForm]],
  ExpressionUUID->"9c3e4065-6633-44ee-a7a3-aa8164e8e997"],
 " are found below, while ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"4", ",", "5"}], "}"}], TraditionalForm]],ExpressionUUID->
  "5347a755-272e-4c9c-be5d-bd55b55c04f6"],
 " has no least upper bound in the domain of ",
 StyleBox["div6", "Code"],
 " and so does not return a value."
}], "Text",ExpressionUUID->"61272c4a-c261-472d-a531-2ccb53ae10a4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"leastUpperBound", "[", 
  RowBox[{"div6", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[200]:=",ExpressionUUID->"0a3075a3-e92b-49d0-887f-9537a4e82752"],

Cell[BoxData["2"], "Output",
 CellLabel->
  "Out[200]=",ExpressionUUID->"fba5eb3d-05b9-4afd-85c9-6e1df8558a3c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"leastUpperBound", "[", 
  RowBox[{"div6", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[201]:=",ExpressionUUID->"49778d83-44da-43ef-9ff6-a7c5adb21bdd"],

Cell[BoxData["6"], "Output",
 CellLabel->
  "Out[201]=",ExpressionUUID->"e0559bcb-3a78-490a-9a14-094857efec08"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"leastUpperBound", "[", 
  RowBox[{"div6", ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[202]:=",ExpressionUUID->"c57fdd8d-ec05-41ec-a8f9-0632b39f734f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Lattices", "Subsection",
 CellTags->"Section6e",ExpressionUUID->"77bc9eab-d482-4e09-b7a4-33bfe26bf83a"],

Cell[TextData[{
 "As the last topic in this section, we will consider the problem of \
determining whether a partial order is a lattice. The approach we will take \
is a good example of top\[Dash]down programming. The test we design here will \
confirm that the function ",
 StyleBox["divisorLattice", "Code"],
 " written at the beginning of this section does indeed produce lattices."
}], "Text",ExpressionUUID->"31e28334-cab4-45d6-9432-d9f1540d3ea0"],

Cell["\<\
Recall that a partial order is a lattice if every pair of elements has both a \
least upper bound and a greatest lower bound (in lattices, these are also \
referred to as the supremum and infimum of the pair or as their meet and \
join). With this in mind, we can write the following function (with the \
understanding that the helper functions still need to be written).\
\>", "Text",ExpressionUUID->"404e0300-0232-4e1f-ae50-20f709d676c4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"latticeQ", "[", 
   RowBox[{"R_", "?", "partialOrderQ"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"hasLUBs", "[", "R", "]"}], "&&", 
   RowBox[{"hasGLBs", "[", "R", "]"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[203]:=",ExpressionUUID->"768098c4-f8e2-43b6-96c6-1345b4d53e42"],

Cell[TextData[{
 "We need to write the two helper functions: ",
 StyleBox["hasLUBs", "Code"],
 " to determine if the partial order satisfies the property that every pair \
of elements has a least upper bound, and ",
 StyleBox["hasGLBs", "Code"],
 " to determine if every pair has a greatest lower bound. Just as we did \
above with the ",
 StyleBox["maximalElements", "Code"],
 " function, we really only need to write one function if we recognize that a \
partial order satisfies the greatest lower bound property if the inverse \
relation satisfies the least upper bound property. So, we compose ",
 StyleBox["hasLUBs", "Code"],
 " with the ",
 StyleBox["inverseRelation", "Code"],
 " function to create ",
 StyleBox["hasGLBs", "Code"],
 "."
}], "Text",ExpressionUUID->"93c965b4-5f98-41c8-8f24-3f8a3f8e8aca"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hasGLBs", "[", 
   RowBox[{"R_", "?", "partialOrderQ"}], "]"}], ":=", 
  RowBox[{"hasLUBs", "[", 
   RowBox[{"inverseRelation", "[", "R", "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[204]:=",ExpressionUUID->"74f0fed9-ab7b-44f6-9788-34c10bebd2eb"],

Cell[TextData[{
 "We complete the work by coding the ",
 StyleBox["hasLUBs", "Code"],
 " function. We must test whether, for a given relation ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "ba86fd67-ad68-4622-868d-86887d36348d"],
 ", each pair ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "88377f44-954c-4034-b74d-9162af6f6791"],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "ad9946d7-493b-4102-bbd4-084b67eef2f5"],
 " in the domain of ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "66d6c488-208c-4413-a804-0b28a6c7173c"],
 " has a least upper bound with respect to ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "93ca415b-c3d3-4e10-a504-aa3f930b4109"],
 "."
}], "Text",ExpressionUUID->"079bab32-8d70-4083-87a5-6d5cdb4916e3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hasLUBs", "[", 
   RowBox[{"R_", "?", "partialOrderQ"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"domR", ",", "a", ",", "b"}], "}"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{
     RowBox[{"domR", "=", 
      RowBox[{"findDomain", "[", "R", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"leastUpperBound", "[", 
             RowBox[{"R", ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "b"}], "}"}]}], "]"}], "===", "Null"}], ",", 
           
           RowBox[{"Throw", "[", "False", "]"}]}], "]"}], 
         "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"a", ",", "domR"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"b", ",", "domR"}], "}"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Throw", "[", "True", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[205]:=",ExpressionUUID->"54a5c330-de72-4254-8823-56ce3c9c30ef"],

Cell[TextData[{
 "Finally, all of the subroutines that go into making up the ",
 StyleBox["latticeQ", "Code"],
 " program are complete, and we can test it on some examples. Contrast the \
relations constructed by the ",
 StyleBox["dividesRelation", "Code"],
 " function versus those made by ",
 StyleBox["divisorLattice", "Code"],
 "."
}], "Text",ExpressionUUID->"8ec85f19-fbeb-4a3b-9669-4b7569ad78ea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"latticeQ", "[", 
  RowBox[{"dividesRelation", "[", "10", "]"}], "]"}]], "Input",
 CellLabel->
  "In[206]:=",ExpressionUUID->"f71fff69-7215-4e79-9d5d-7c35f8ca1336"],

Cell[BoxData["False"], "Output",
 CellLabel->
  "Out[206]=",ExpressionUUID->"b119612f-a0a4-497a-bcf3-f75b87fc46d8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"latticeQ", "[", 
  RowBox[{"divisorLattice", "[", "20", "]"}], "]"}]], "Input",
 CellLabel->
  "In[207]:=",ExpressionUUID->"43f0efd2-6e3e-4316-9c9c-9a7f883e0ebd"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[207]=",ExpressionUUID->"371e61cb-8dba-4793-84b3-1bc56bfc4777"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Solutions to Computer Projects and Computations and Explorations\
\>", "Section",
 CellTags->"Solutions",ExpressionUUID->"d8cb4622-7e7a-44f9-a6f7-dc077ab39394"],

Cell[CellGroupData[{

Cell["Computer Projects 15", "Subsection",
 CellTags->
  "SolutionsCP15",ExpressionUUID->"ef73e59b-a955-4e30-9ebb-5712564ad40f"],

Cell["\<\
Given a partial ordering on a finite set, find a total ordering compatible \
with it using topological sorting.\
\>", "Problem",ExpressionUUID->"5a9bc35f-4830-4d06-afae-604968a4eadd"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " The textbook contains a detailed explanation of topological sorting and \
summarizes it as Algorithm 1 of Section 9.6."
}], "Text",ExpressionUUID->"86b40b8e-ec91-4306-9bf5-ce7f937cabba"],

Cell[TextData[{
 "The set ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "5c759f76-4a36-4e82-a05e-0bb892a0af87"],
 " is initialized to the domain of the given relation. At each step, find a \
minimal element (using the ",
 StyleBox["minimalElements", "Code"],
 " function we created above) of ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "2d72bc8c-7edd-4c28-b86b-49bc2bc83cd0"],
 ". This minimal element is removed from ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "2bd60760-f3c6-46c2-86e2-6a61566dd0bc"],
 " and added as the next largest element of the total ordering. This repeats \
until ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "9d1ef795-fc30-498d-95c0-05062c3d2056"],
 " is empty and consequently all elements are in the total order."
}], "Text",ExpressionUUID->"87399064-1ba6-4f7c-af0c-0944b15d7719"],

Cell[BoxData[
 RowBox[{
  RowBox[{"topologicalSort", "[", 
   RowBox[{"R_", "?", "partialOrderQ"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"S", ",", "a", ",", "T"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"T", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"S", "=", 
      RowBox[{"findDomain", "[", "R", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"S", "\[NotEqual]", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"a", "=", 
         RowBox[{
          RowBox[{"minimalElements", "[", 
           RowBox[{"R", ",", "S"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"S", "=", 
         RowBox[{"Complement", "[", 
          RowBox[{"S", ",", 
           RowBox[{"{", "a", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"T", "=", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"T", ",", "a"}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", "T"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[208]:=",ExpressionUUID->"1c54c142-9891-4da6-b7d2-2184b89f8a30"],

Cell[TextData[{
 "We apply this procedure to ",
 StyleBox["fig10", "Code"],
 "."
}], "Text",ExpressionUUID->"b3dcbcfd-f38f-4555-b063-80acf63e6633"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"topologicalSort", "[", "fig10", "]"}]], "Input",
 CellLabel->
  "In[209]:=",ExpressionUUID->"029de1d5-45a9-4f47-b060-c49e78b7a380"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"A\"\>", ",", "\<\"C\"\>", ",", "\<\"B\"\>", ",", "\<\"D\"\>", 
   ",", "\<\"E\"\>", ",", "\<\"F\"\>", ",", "\<\"G\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[209]=",ExpressionUUID->"d06e0d8d-06bf-4de9-9693-b78b74bfc2c9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computations and Explorations 1", "Subsection",
 CellTags->
  "SolutionsCE1",ExpressionUUID->"acba0d73-2f67-4fe1-867f-5f006496bf52"],

Cell["\<\
Display all the different relations on a set with four elements.\
\>", "Problem",ExpressionUUID->"a3e36e92-ee2a-447f-9b3f-0a39ea15cc1f"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " As is often the case, the specific question can be solved as an instance \
of a more general problem. We provide a very simple function that will \
compute all relations on any finite set. This procedure merely constructs the \
Cartesian product ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "=", 
    RowBox[{"S", "\[Times]", "S"}]}], TraditionalForm]],ExpressionUUID->
  "81db63a5-110c-4981-a598-7fb6ee6ef6f7"],
 " using ",
 StyleBox[ButtonBox["Tuples",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Tuples"], "FunctionLink"],
 " and then makes use of the ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " function to obtain all of the relations on the set."
}], "Text",ExpressionUUID->"8ef3b552-5a80-4649-b142-227d867f24e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allRelations", "[", "S_List", "]"}], ":=", 
  RowBox[{"Subsets", "[", 
   RowBox[{"Tuples", "[", 
    RowBox[{"S", ",", "2"}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[210]:=",ExpressionUUID->"98c35010-5ee4-45c2-960f-4d46e7b963c4"],

Cell[TextData[{
 "We now test our procedure on a set with 2 elements. (This keeps the output \
to a reasonable length.) We use ",
 StyleBox[ButtonBox["Column",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Column"], "FunctionLink"],
 " to display each relation on its own line."
}], "Text",ExpressionUUID->"b1da8d77-a977-4687-93b9-38f18c8c1c40"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"allRelations", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], "]"}], "//", "Column"}]], "Input",
 CellLabel->
  "In[211]:=",ExpressionUUID->"619a3b42-dcf0-430a-b2d3-75f7fd4dfc91"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"{", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1"}], "}"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"2", ",", "2"}], "}"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]}], "}"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellLabel->
  "Out[211]=",ExpressionUUID->"a8f1d4e4-15c7-4419-a3ce-812ab615a995"]
}, Open  ]],

Cell[TextData[{
 "The reader is encouraged to determine the running time and output length \
for the function when the input set has cardinality 4 or 5. Keep in mind that \
there are ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", 
    SuperscriptBox["n", "2"]], TraditionalForm]],ExpressionUUID->
  "8ead076b-362c-462d-9c15-afbd1566410d"],
 " relations on a set with ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "ff9731b2-ddf3-44da-b5d5-4d2fbafe9e32"],
 " members."
}], "Text",ExpressionUUID->"322dfe80-0190-4c17-8684-6f44a1961be5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computations and Explorations 4", "Subsection",
 CellTags->
  "SolutionsCE4",ExpressionUUID->"b3548c04-de6e-469c-bb64-0c52af7f256b"],

Cell[TextData[{
 "Determine how many transitive relations there are on a set with ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "04f65c8f-5a80-47ae-aab0-a3bd48d4b594"],
 " elements for all positive integers ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "a48426f0-256c-4051-8aa1-c44a413cc235"],
 " with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "\[LessEqual]", "7"}], TraditionalForm]],ExpressionUUID->
  "f1bd5e43-2f09-4ae9-8e17-6fb60d380513"],
 "."
}], "Problem",ExpressionUUID->"51a84553-a16a-4e6b-9799-7487edf0dc06"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " We will construct each possible ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "\[Times]", "n"}], TraditionalForm]],ExpressionUUID->
  "c27de6db-fbd6-4a52-9246-b955124e6ed2"],
 " zero\[Dash]one matrix using an algorithm similar to binary counting. The \
approach is as follows:"
}], "Text",ExpressionUUID->"efba4495-13c0-41d5-9aa0-8efd62d3dd7e"],

Cell[CellGroupData[{

Cell[TextData[{
 "For each number from 0 to ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", 
     SuperscriptBox["n", "2"]], "-", "1"}], TraditionalForm]],ExpressionUUID->
  "2a04115a-c446-4b98-b4c6-c0057b497965"],
 ", we create a list of 0s and 1s that is the base 2 representation of that \
integer. We can do this with the ",
 StyleBox[ButtonBox["IntegerDigits",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerDigits"], "FunctionLink"],
 " function. The syntax ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"IntegerDigits", "["}], "i", ",", "2", ",", 
   RowBox[{"n", "^", "2"}], "]"}]], "myCode",ExpressionUUID->
  "217dc5d6-d32a-4fdb-9ccb-695df9b36f0e"],
 " returns a list whose entries are the base 2 representation of the integer ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "9cb70f4c-0022-4907-90fb-22ddb456ba0b"],
 ", padded with 0s if necessary to obtain a list of length ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "2"], TraditionalForm]],ExpressionUUID->
  "9bc280b6-d57c-4974-aa49-eb934580ca42"],
 "."
}], "Item1Numbered",ExpressionUUID->"8dfbf6f7-f2be-472c-94c7-c253828347cc"],

Cell[TextData[{
 "Then, create a matrix ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]],ExpressionUUID->
  "e8f5b1fd-ae31-48b0-99ac-0ef09aa43aa6"],
 " whose entries are that list of values. These are all possible ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", 
    SuperscriptBox["n", "2"]], TraditionalForm]],ExpressionUUID->
  "cedc3c97-6b1f-49f0-9edd-8b0ea3b7d7e1"],
 " zero\[Dash]one matrices (the reader is encouraged to prove this \
statement). We use the ",
 StyleBox[ButtonBox["Partition",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Partition"], "FunctionLink"],
 " function on the list with second argument ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "f7914d08-8d34-4303-97fd-f3a906260cee"],
 " to split the list of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "2"], TraditionalForm]],ExpressionUUID->
  "27866bbf-007d-4801-af01-d9d149c91987"],
 " values into a ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "\[Times]", "n"}], TraditionalForm]],ExpressionUUID->
  "7d30c364-3c05-4006-90e6-d1d4caeaac92"],
 " matrix. "
}], "Item1Numbered",ExpressionUUID->"c0337e88-6f86-4824-ba2c-590b274f90e2"],

Cell[TextData[{
 "Finally, evaluate the transitive closure of each of those matrices, using \
the ",
 StyleBox["warshall", "Code",
  IgnoreSpellCheck->True],
 " function from Section 9.4 above. We test to see if the matrix is \
transitive by checking to see if it is equal to its transitive closure. If \
so, it is counted as a transitive relation."
}], "Item1Numbered",ExpressionUUID->"f2298066-f48a-45c0-a1a1-298253b3965e"]
}, Open  ]],

Cell["The implementation is as follows:", "Text",ExpressionUUID->"3a3ddea1-953b-488b-957d-737a96cacc59"],

Cell[BoxData[
 RowBox[{
  RowBox[{"countTransitive", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", "j", ",", "T", ",", "M", ",", 
      RowBox[{"count", "=", "0"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "0"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{
         RowBox[{"2", "^", 
          RowBox[{"(", 
           RowBox[{"n", "^", "2"}], ")"}]}], "-", "1"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"T", "=", 
         RowBox[{"IntegerDigits", "[", 
          RowBox[{"i", ",", "2", ",", 
           RowBox[{"n", "^", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"M", "=", 
         RowBox[{"Partition", "[", 
          RowBox[{"T", ",", "n"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"warshall", "[", "M", "]"}], "\[Equal]", "M"}], ",", 
          RowBox[{"count", "++"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", "count"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[212]:=",ExpressionUUID->"8aaf11c4-d6c9-4bbb-9da1-06b68faf30b5"],

Cell["\<\
We use the function on a relatively small value and leave further \
computations to the reader.\
\>", "Text",ExpressionUUID->"84b02a19-a91f-46ba-b220-cba0dfbbee6d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"countTransitive", "[", "3", "]"}]], "Input",
 CellLabel->
  "In[213]:=",ExpressionUUID->"d43d52b4-7c99-4c22-bb29-4472b6432604"],

Cell[BoxData["171"], "Output",
 CellLabel->
  "Out[213]=",ExpressionUUID->"baabd8f5-91d0-4397-b6d5-f5d0d7a8b83c"]
}, Open  ]],

Cell[TextData[{
 "There are more efficient approaches than the one presented here. For \
example, we know that any relation between (in the subset sense) a relation \
and its transitive closure is not transitive. Using that fact suggests an \
algorithm in which each application of ",
 StyleBox["warshall", "Code",
  IgnoreSpellCheck->True],
 " can potentially eliminate intermediate relations from future consideration."
}], "Text",ExpressionUUID->"47a7b7ea-1139-49aa-a377-d6e953e69226"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computations and Explorations 5", "Subsection",
 CellTags->
  "SolutionsCE5",ExpressionUUID->"4d4bd232-ab4a-4794-bc8a-301db7012641"],

Cell["\<\
Find the transitive closure of a relation of your choice on a set with at \
least 20 elements. Either use a relation that corresponds to direct links in \
a particular transportation or communications network or use a randomly \
generated relation. \
\>", "Problem",ExpressionUUID->"6dfc9963-f268-45e2-ae34-eaaac52a989c"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " We will generate a random zero\[Dash]one matrix with dimension ",
 Cell[BoxData[
  FormBox[
   RowBox[{"8", "\[Times]", "8"}], TraditionalForm]],ExpressionUUID->
  "11eef428-1e01-4275-9f19-2fc529e75591"],
 ", and then apply Warshall\[CloseCurlyQuote]s algorithm to compute the \
transitive closure. (We use a smaller size than specified in the problem so \
as to be able to display the result easily.)"
}], "Text",ExpressionUUID->"70970b63-413c-4135-a34d-01a98c7b416f"],

Cell[TextData[{
 "To generate a random zero\[Dash]one matrix, we use the ",
 StyleBox[ButtonBox["RandomVariate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomVariate"], "FunctionLink"],
 " function. This function was first discussed in Section 7.2. The first \
argument to ",
 StyleBox[ButtonBox["RandomVariate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomVariate"], "FunctionLink"],
 " must be a probability distribution. We will use the ",
 StyleBox[ButtonBox["BernoulliDistribution",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BernoulliDistribution"], "FunctionLink"],
 ", which randomly chooses 0 or 1, with parameter .1. This means that 1 is \
chosen with probability ",
 Cell[BoxData[
  FormBox[".1", TraditionalForm]],ExpressionUUID->
  "3f74b66f-e054-4d32-a98a-f6ff1d35659f"],
 ", resulting in a fairly sparse matrix. This increases the chance that the \
transitive closure will have entries that are not 1. The second argument to \
",
 StyleBox[ButtonBox["RandomVariate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomVariate"], "FunctionLink"],
 " specifies the number of times to sample the distribution. By using a list, \
for example ",
 StyleBox["{8,8}", "Code"],
 ", the function will output a matrix of that size."
}], "Text",ExpressionUUID->"0841f6b4-40be-40ae-9c0d-32e6aed6aab3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"randomMatrix", "=", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"BernoulliDistribution", "[", ".1", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", "8"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"randomMatrix", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[214]:=",ExpressionUUID->"c4a94bf0-cdd0-41eb-92a3-e800da0b9cab"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "1"},
     {"0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "1", "0", "0", "0", "0", "0", "1"},
     {"0", "0", "0", "0", "0", "0", "0", "1"},
     {"0", "1", "0", "0", "0", "0", "1", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[215]//MatrixForm=",ExpressionUUID->"b056fbdd-79cb-42bc-8b51-\
24285a1078f7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"warshall", "[", "randomMatrix", "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[216]:=",ExpressionUUID->"dd311133-7f3b-4acf-8af6-94aeeeb74bac"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "1"},
     {"0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "1", "0", "0", "0", "0", "0", "1"},
     {"0", "0", "0", "0", "0", "0", "0", "1"},
     {"0", "1", "0", "0", "0", "0", "1", "1"},
     {"0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[216]//MatrixForm=",ExpressionUUID->"1484fbb6-5488-483c-8897-\
8f94b49e310c"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exercises", "Section",
 CellTags->"Exercises",ExpressionUUID->"70a28eb3-2be5-490c-9238-bba3b748c76b"],

Cell[CellGroupData[{

Cell[TextData[{
 "The ",
 StyleBox["relationToMatrix", "Code"],
 " function converts a relation satisfying ",
 StyleBox["relationQ", "Code"],
 " to a zero\[Dash]one matrix representation. Write a function to convert a \
zero\[Dash]one matrix representation of a relation to a ",
 StyleBox["relationQ", "Code"],
 " representation."
}], "Item1Exercise",ExpressionUUID->"0add5582-fb65-476e-872d-326ffbbc61c2"],

Cell["Write a function in the Wolfram Language with the signature", \
"Item1Exercise",ExpressionUUID->"9298dd36-9e12-4bf9-9847-432e95037f0b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"makeRelation", "[", 
  RowBox[{
   RowBox[{"S", ":", 
    RowBox[{"{", "__Integer", "}"}]}], ",", "f_Function"}], "]"}]], "myCode",
 Editable->False,ExpressionUUID->"00cbd785-6ea5-4bf7-8523-2c44dc531f65"],

Cell[TextData[{
 "that creates the relation ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"a", ",", "b"}], ")"}], "\[Element]", 
     RowBox[{"S", "\[Times]", 
      RowBox[{"S", ":", 
       RowBox[{
        RowBox[{"f", "(", 
         RowBox[{"a", ",", "b"}], ")"}], " ", "is", " ", "true"}]}]}]}], 
    "}"}], TraditionalForm]],ExpressionUUID->
  "7a5665d2-6b9b-448a-a75b-7a6486a1c977"],
 ". That is, ",
 StyleBox["makeRelation", "Code"],
 " should return the set of all ordered pairs ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"a", ",", "b"}], ")"}], TraditionalForm]],ExpressionUUID->
  "c559e666-1514-42c4-bbf8-b04914961fb5"],
 " of elements of ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "35f81a12-85d7-474f-a6e7-ee9b078aeb19"],
 " for which the pure ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " (&) ",
 StyleBox["f", "Code"],
 " evaluates to true when ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "6b461ee0-a73d-4b46-9026-af4ddc04d024"],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "631db0fb-09e3-4d5e-9e08-5d4baeafc525"],
 " are substituted for the ",
 StyleBox[ButtonBox["Slot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Slot"], "FunctionLink"],
 "s (#) in ",
 StyleBox["f", "Code"],
 ". For example, your function should accept an expression such as"
}], "ExerciseContinuation",ExpressionUUID->"1bafec91-2240-433f-bd0e-\
dc806f403bf1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#1", "+", "#2"}], "<", 
   RowBox[{"#1", "*", "#2"}]}], "&"}]], "myCode",
 Editable->False,ExpressionUUID->"b94046bd-db3a-4c67-858e-7e1b1e5b0c68"],

Cell[CellGroupData[{

Cell["\<\
Write a function in the Wolfram Language to generate a random relation on a \
given finite set of integers.\
\>", "Item1Exercise",ExpressionUUID->"c88b8dfd-a2c1-4a1f-9ece-3dd16368c0fc"],

Cell["\<\
Use the function you wrote in the preceding exercise to investigate the \
probability that an arbitrary relation has each of the following properties: \
(a) reflexivity; (b) symmetry; (c) anti-symmetry; and (d) transitivity.\
\>", "Item1Exercise",ExpressionUUID->"a4b31814-9527-4935-86f4-9609c1c709ab"],

Cell["\<\
Write functions to determine whether a given relation is irreflexive or \
asymmetric. (See the text for definitions of these properties.)\
\>", "Item1Exercise",ExpressionUUID->"6132723a-367d-4084-a26e-6c2241c0b37f"],

Cell[TextData[{
 "Implement Tables 11 and 12 from Section 9.2 as ",
 StyleBox[ButtonBox["Dataset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dataset"], "FunctionLink"],
 " objects. Then:"
}], "Item1Exercise",ExpressionUUID->"0e983e53-13b7-418e-bcdd-8fc97d09b9d5"],

Cell[CellGroupData[{

Cell["\<\
Find the projection of the Parts_inventory database onto the Part_number and \
Color_code fields.\
\>", "Item2Exercise",ExpressionUUID->"40243f2d-96a0-49f9-a637-0381e9efe99b"],

Cell["\<\
Join the two databases across the Part_number and Project fields.\
\>", "Item2Exercise",ExpressionUUID->"c68686e7-62c6-4530-bc87-b195aa986db8"],

Cell["Select those entries for which the Quantity is less than 10.", \
"Item2Exercise",ExpressionUUID->"2983767b-8c41-49ea-99f0-abca4867e05c"]
}, Open  ]],

Cell[TextData[{
 "Write functions to compute the count and support of an ",
 StyleBox["itemset",
  IgnoreSpellCheck->True],
 ". Then write a function to test whether an ",
 StyleBox["itemset",
  IgnoreSpellCheck->True],
 " is frequent relative to a given threshold; your function should accept the \
",
 StyleBox["itemset",
  IgnoreSpellCheck->True],
 ", the set of transactions, and the threshold as arguments."
}], "Item1Exercise",ExpressionUUID->"77408f26-9719-403f-a25c-2ea8672d158a"],

Cell[TextData[{
 "Investigate the ",
 StyleBox["Apriori",
  IgnoreSpellCheck->True],
 " algorithm (see Exercise 40 from Section 9.2 and Writing Project 3) and \
then implement this algorithm in the Wolfram Language."
}], "Item1Exercise",ExpressionUUID->"b3190026-3ccb-44c5-a703-6d19a8a34588"],

Cell["\<\
Investigate the ratio of the size of an arbitrary relation to the size of its \
transitive closure. How much does the transitive closure make a relation \
\"grow\" on average?\
\>", "Item1Exercise",ExpressionUUID->"6abd81d6-a403-4c10-9a0f-ef09a47de992"],

Cell[TextData[{
 "Examine the function \[CurlyPhi] defined as follows. For a positive integer \
",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "fbc6b811-218d-47cb-a0d0-e27a3febde72"],
 ", we define ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[CurlyPhi]", "(", "n", ")"}], TraditionalForm]],ExpressionUUID->
  "5560d6cb-4a27-457a-a26a-39cf59d63e1a"],
 " to be the number of relations on a set of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "22fe438b-0fff-40ef-9127-e38d0ae80e62"],
 " elements whose transitive closure is the \[OpenCurlyDoubleQuote]all\
\[CloseCurlyDoubleQuote] relation. (If ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "8523d9d9-72fb-4a73-b616-c09c132a5e5f"],
 " is a set, then the \[OpenCurlyDoubleQuote]all\[CloseCurlyDoubleQuote] \
relation on ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "7fe18d4f-268c-4220-9045-dc161d2851c8"],
 " is the relation ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "\[Times]", "A"}], TraditionalForm]],ExpressionUUID->
  "f9ed5236-a8ff-4791-8c02-8ed10d2e5c95"],
 " with respect to which every member of ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "ebdbc16a-05ff-4cb1-b560-7133b2eb94ff"],
 " is related to every other member of ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "04440d09-f45a-4118-8b7b-6639a10735b0"],
 ", including itself.)"
}], "Item1Exercise",ExpressionUUID->"77a49a96-ab61-4595-8206-2c05a7917632"],

Cell["\<\
Write a function in the Wolfram Language that finds the antichain with the \
greatest number of elements in a partial ordering. (See the text for the \
definition of antichain.)\
\>", "Item1Exercise",ExpressionUUID->"1b4976dd-7491-499f-894b-f9fb46da35bc"],

Cell[TextData[{
 "The transitive reduction of a relation ",
 Cell[BoxData[
  FormBox["G", TraditionalForm]],ExpressionUUID->
  "655f6855-c7d1-408f-b3e8-662740b1fcf7"],
 " is the smallest relation ",
 Cell[BoxData[
  FormBox["H", TraditionalForm]],ExpressionUUID->
  "c541b209-1c18-4d42-b593-e43d46448d3f"],
 " such that the transitive closure of ",
 Cell[BoxData[
  FormBox["H", TraditionalForm]],ExpressionUUID->
  "d85fbda6-e659-4749-9787-86544a6ce0f2"],
 " is equal to the transitive closure of ",
 Cell[BoxData[
  FormBox["G", TraditionalForm]],ExpressionUUID->
  "875da512-6cf2-4fd5-a55a-f5425a7bf9b3"],
 ". Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to generate some random relations on a set with ten elements and find the \
transitive reduction of each of these random relations."
}], "Item1Exercise",ExpressionUUID->"6e63f5f8-d3c9-4a40-95f9-da7b0c656ef2"],

Cell["\<\
Write a function that computes a partial order, given its covering relation.\
\>", "Item1Exercise",ExpressionUUID->"4bfb6606-9da0-4492-a16d-5eee0112d7c5"],

Cell["\<\
Write a function to determine whether a given lattice is a Boolean algebra, \
by checking whether it is distributive and complemented. (See the text for \
definitions.)\
\>", "Item1Exercise",ExpressionUUID->"ee194304-8c8d-4f04-a985-ab8383bdcb40"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
PrintingStyleEnvironment->"Working",
WindowSize->{725, 850},
WindowMargins->{{Automatic, 108}, {Automatic, 0}},
DockedCells->Cell[
  BoxData[
   TagBox[
    GridBox[{{"\"Exploring Discrete Mathematics with Mathematica\"", 
       ActionMenuBox[
       "\"Navigation\"", {
        "\"CloseAll\"" :> Module[{$CellContext`DJSection$}, SelectionMove[
             SelectedNotebook[], All, Notebook]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; 
           Do[NotebookLocate[$CellContext`DJSection$]; FrontEndExecute[
               FrontEndToken["OpenCloseGroup"]], {$CellContext`DJSection$, {
              "Section1a", "Section1b", "Section1c", "Section2a", "Section2b",
                "Section3a", "Section3b", "Section3c", "Section4a", 
               "Section4b", "Section4c", "Section5a", "Section5b", 
               "Section5c", "Section6a", "Section6b", "Section6c", 
               "Section6d", "Section6e", "SolutionsCE1", "SolutionsCE4", 
               "SolutionsCE5", "SolutionsCP15", "Section1", "Section2", 
               "Section3", "Section4", "Section5", "Section6", "Solutions", 
               "Exercises"}}]; SelectionMove[
             SelectedNotebook[], Before, Notebook]], "\"Section1\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section1"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section2\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section2"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section3\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section3"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section4\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section4"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section5\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section5"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section6\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section6"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Solutions\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Solutions"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Exercises\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Exercises"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Open All\"" :> 
         Module[{$CellContext`DJSection$}, 
           Do[NotebookLocate[$CellContext`DJSection$]; FrontEndExecute[
               FrontEndToken[
               "SelectionOpenAllGroups"]], {$CellContext`DJSection$, {
              "Exercises", "Section1", "Section1a", "Section1b", "Section1c", 
               "Section2", "Section2a", "Section2b", "Section3", "Section3a", 
               "Section3b", "Section3c", "Section4", "Section4a", "Section4b",
                "Section4c", "Section5", "Section5a", "Section5b", 
               "Section5c", "Section6", "Section6a", "Section6b", "Section6c",
                "Section6d", "Section6e", "Solutions", "SolutionsCE1", 
               "SolutionsCE4", "SolutionsCE5", "SolutionsCP15"}}] 
           SelectionMove[
             SelectedNotebook[], Before, Notebook]]}]}}, 
     GridBoxAlignment -> {
      "Columns" -> {Left, Baseline}, "Rows" -> {Right, Baseline}}, AutoDelete -> 
     False, GridBoxItemSize -> {"Columns" -> {
         Scaled[0.8], 
         Scaled[0.2]}}], "Grid"]], "DockedCell", FontFamily -> "Times"],
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
Magnification->1,
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"Book"}, "Textbook.nb", CharacterEncoding -> 
       "UTF-8"]]], 
   Cell[
    StyleData[All, "Printout"], PageWidth -> PaperWidth, 
    CellHorizontalScrolling -> True, 
    CellLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
    ShowAutoStyles -> False, 
    AutoStyleOptions -> {"HighlightMisspelledWords" -> False}, ScriptMinSize -> 
    9, MenuSortingValue -> 1500, 
    PrivateFontOptions -> {"FontType" -> "Outline"}, Magnification -> 1], 
   Cell[
    StyleData["Title"], Editable -> False, ShowCellBracket -> Automatic, 
    CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
    DefaultNewInlineCellStyle -> {}, LanguageCategory -> "NaturalLanguage", 
    FontFamily -> "Helvetica", FontSize -> 25, FontWeight -> "Bold", 
    FontColor -> GrayLevel[0.137255]], 
   Cell[
    StyleData["BookChapterTitle", StyleDefinitions -> StyleData["Title"]], 
    CellFrame -> {{0, 0}, {1, 1}}, CellDingbat -> Cell[
      BoxData[
       GraphicsBox[{{
          RGBColor[0.09375, 0.570313, 0.816406], 
          RectangleBox[{0, 0}]}, {
          GrayLevel[1], FontSize -> 35, FontWeight -> Bold, FontFamily -> 
          "Helvetica", 
          InsetBox[
           CounterBox["ChapterNumber"], {0.5, 0.45}, {Center, Center}]}}, 
        ImageSize -> {70, 70}]], "Output"], 
    CellMargins -> {{100, 0}, {20, 20}}, CellFrameColor -> GrayLevel[1]], 
   Cell[
    StyleData["DockedCell"], CellMargins -> {{12, 12}, {20, 0}}, 
    CellGroupingRules -> "TitleGrouping", 
    ConversionRules :> {"TeX" -> {"\n\\chapter{", "}"}}, 
    TaggingRules :> {"CounterSettings" -> {"CounterTarget" -> "CellGroup"}}, 
    PageBreakAbove -> False, PageBreakBelow -> False, LineSpacing -> {1, 2}, 
    MenuSortingValue -> 1105, FontFamily -> "Helvetica", FontSize -> 27, 
    FontWeight -> "Bold", Background -> RGBColor[0.09375, 0.570313, 0.816406],
     CounterBoxOptions -> {
     CounterFunction :> Identity}, $CellContext`DefaultReturnCreatedCellStyle -> 
    "Section"], 
   Cell[
    StyleData["FunctionLink"], ConversionRules :> {"TeX" -> {{"", 
         $CellContext`ExportAsHyperRef[], ""}, {"", Automatic, ""}}}, 
    MenuSortingValue -> 1105, ButtonStyleMenuListing -> None, FontFamily -> 
    "Courier", FontVariations -> {"Underline" -> True}, FontColor -> 
    RGBColor[0, 0, 1], 
    ButtonBoxOptions -> {Active -> True, ButtonFunction :> (FrontEndExecute[{
         FrontEnd`NotebookLocate[#2]}]& ), ButtonNote -> ButtonData}], 
   Cell[
    StyleData["Problem"], CellMargins -> {{40, 12}, {15, 15}}, 
    CellGroupingRules -> {"GroupTogetherNestedGrouping", 15010}, 
    ConversionRules :> {
     "TeX" -> {{"", Automatic, ""}, {"\n\n", Automatic, ""}}}, 
    TaggingRules :> {
     "ExtraConversionRules" -> {"General" -> {"RestartList" -> False}}}], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item1Exercise"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Exercise"], "."}], CellSize -> {30, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{50, 12}, {3, 5}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterIncrements -> "Item1Exercise", 
       CounterAssignments -> {{"Item2Exercise", 0}}, MenuSortingValue -> 
       4100], 
      Cell[
       StyleData["Item1Exercise", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Exercise"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{35, 12}, {3, 5}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["ExerciseContinuation"], CellMargins -> {{50, 12}, {1, 3}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, MenuSortingValue -> 4101], 
      Cell[
       StyleData["ExerciseContinuation", "Printout"], 
       CellMargins -> {{35, 12}, {1, 3}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item2Exercise"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item2Exercise"], "."}], CellSize -> {32, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{75, 12}, {1, 2}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17100}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterIncrements -> "Item2Exercise", MenuSortingValue -> 4200, 
       CounterBoxOptions -> {CounterFunction :> (Part[
           CharacterRange["a", "z"], #]& )}], 
      Cell[
       StyleData["Item2Exercise", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item2Exercise"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{50, 12}, {1, 2}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterBoxOptions -> {CounterFunction :> (Part[
           CharacterRange["a", "z"], #]& )}]}, Open]], 
   Cell[
    StyleData["ExerciseEquation"], CellMargins -> {{36, 12}, {7, 7}}, 
    CellGroupingRules -> {"GroupTogetherNestedGrouping", 17200}, 
    CellHorizontalScrolling -> True, 
    CellFrameLabels -> {{None, None}, {None, None}}, DefaultFormatType -> 
    TraditionalForm, InputAutoReplacements -> {}, TextAlignment -> Center, 
    MenuSortingValue -> 4300, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}], 
   Cell[
    StyleData["myCode"], CellMargins -> {{66, 10}, {5, 10}}, 
    StyleKeyMapping -> {"=" -> "WolframAlphaShort"}, Evaluatable -> False, 
    CellGroupingRules -> "InputGrouping", TextClipboardType -> "InputText", 
    PageBreakWithin -> False, GroupPageBreakWithin -> False, 
    DefaultFormatType -> DefaultInputFormatType, ContextMenu -> 
    FEPrivate`FrontEndResource["ContextMenus", "myCode"], ShowAutoStyles -> 
    True, "TwoByteSyntaxCharacterAutoReplacement" -> True, 
    HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"}, 
    AutoItalicWords -> {}, AutoQuoteCharacters -> {}, 
    PasteAutoQuoteCharacters -> {}, LanguageCategory -> "Mathematica", 
    FormatType -> InputForm, NumberMarks -> True, 
    LinebreakAdjustments -> {0.85, 2, 10, 0, 1}, CounterIncrements -> "Code", 
    MenuSortingValue -> 1495, MenuCommandKey -> "8", FontWeight -> 
    "Bold", $CellContext`StripStyleOnPaste -> True], 
   Cell[
    StyleData["CodeVar"], DefaultFormatType -> DefaultInputFormatType, 
    LineBreakWithin -> False, MenuSortingValue -> 10000, FontWeight -> "Bold",
     FontSlant -> "Italic", FontColor -> GrayLevel[0.4]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Section"], CellFrame -> {{6, 0}, {0, 1}}, ShowCellBracket -> 
       Automatic, CellMargins -> {{12, 12}, {3, 24}}, 
       CellGroupingRules -> {"SectionGrouping", 30}, 
       ConversionRules :> {
        "TeX" -> {"\n\\section{", "}"}, 
         "HTML" -> {"<h3 class=\"Section\">", "</h3>"}}, 
       TaggingRules :> {
        "CounterSettings" -> {
          "CounterFormat" -> {"BookChapterNumber", ".", "Section"}, 
           "CounterTarget" -> "Cell", "XRefPrefix" -> "Section"}}, 
       PageBreakBelow -> False, CellFrameMargins -> {{8, 8}, {4, 6}}, 
       CellFrameColor -> RGBColor[0.09375, 0.570313, 0.816406], TabSpacings -> 
       2.1, CounterIncrements -> {
        "Section", "SectionHeader", "SubsectionHeader", "SubsubsectionHeader",
          "SubsubsubsectionHeader"}, FontFamily -> "Helvetica", FontSize -> 
       16, FontWeight -> "Bold", Background -> GrayLevel[0.999985]], 
      Cell[
       StyleData["Section", "Printout"], CellFrame -> {{4, 0}, {0, 0.5}}, 
       CellMargins -> {{2, 2}, {3, 21}}, CellFrameMargins -> {{6, 6}, {3, 5}},
        CellFrameColor -> RGBColor[0.09375, 0.570313, 0.816406]], 
      Cell[
       StyleData["Section", "DoubleSpacedPrintout"], 
       CellFrame -> {{4, 0}, {0, 0.5}}, CellMargins -> {{2, 2}, {3, 21}}, 
       CellFrameMargins -> {{6, 6}, {3, 5}}, CellFrameColor -> 
       RGBColor[0.09375, 0.570313, 0.816406], FontSize -> 14]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Subsubsection"], CellDingbat -> None, 
       CellMargins -> {{12, 12}, {0, 6}}, 
       CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
       CellGroupingRules -> {"SectionGrouping", 50}, 
       ConversionRules :> {
        "TeX" -> {"\n\\subsubsection{", "}"}, 
         "HTML" -> {"<h5 class=\"Subsubsection\">", "</h5>"}}, PageBreakBelow -> 
       False, CellFrameLabelMargins -> 4, 
       CounterIncrements -> {
        "Subsubsection", "SubsubsectionHeader", "SubsubsubsectionHeader"}, 
       FontFamily -> "Helvetica", FontSize -> 11, FontWeight -> "Bold", 
       FontSlant -> "Italic"], 
      Cell[
       StyleData["Subsubsection", "Printout"], FontFamily -> "Helvetica", 
       FontSize -> 11, FontWeight -> "Bold", FontSlant -> "Italic"]}, Open]], 
   
   Cell[
    StyleData["Equation"], CellMargins -> {{26, 10}, {7, 7}}, 
    ConversionRules :> {
     "HTML" -> {{"", ""}, {"<p class=\"Equation\">", "</p>"}}}, 
    CellHorizontalScrolling -> True, DefaultFormatType -> TraditionalForm, 
    InputAutoReplacements -> {}, TextAlignment -> Center, CounterIncrements -> 
    "Equation", ButtonBoxOptions -> {Appearance -> {Automatic, None}}], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item1Numbered"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Numbered"], "."}], CellSize -> {32, Inherited}, 
         TextAlignment -> Right, 
         TextJustification -> (FontWeight -> "Plain")], 
       CellMargins -> {{36, 12}, {1, 3}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 15000}, 
       ConversionRules :> {{"TeX" -> {"\n\\item ", ""}}, {
         "HTML" -> {"<li>", "</li>"}}}, 
       TaggingRules :> {
        "ExtraConversionRules" -> {
          "General" -> {"NestingLevel" -> 30}, 
           "TeX" -> {"CellGroupEnvironment" -> "enumerate"}, 
           "HTML" -> {"CellGroupEnvironment" -> "ol"}}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, TextJustification -> 1, CounterIncrements -> "Item1Numbered", 
       CounterAssignments -> {{"Item2Numbered", 0}, {"Item3Numbered", 0}}], 
      Cell[
       StyleData["Item1Numbered", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Numbered"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Plain"], 
       CellMargins -> {{24, 2}, {1, 2}}, CellFrameLabelMargins -> 3, 
       TextJustification -> 1]}, Open]], 
   Cell[
    StyleData["InitializationCell"], Background -> GrayLevel[1]], 
   Cell[
    StyleData["Item1"], TextJustification -> 1], 
   Cell[
    StyleData["Item1Printout"], TextJustification -> 1, MenuSortingValue -> 
    10000], 
   Cell[
    StyleData["Code"], FormatType -> InputForm]}, Visible -> False, 
  FrontEndVersion -> 
  "11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, 2018)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Section1"->{
  Cell[2498, 74, 131, 1, 55, "Section",ExpressionUUID->"a39053f7-ed0e-4ece-b12d-861463cf36db",
   CellTags->"Section1"]},
 "Section1a"->{
  Cell[3271, 93, 127, 1, 32, "Subsection",ExpressionUUID->"d7f67218-9b4e-44da-946e-15ad6376a324",
   CellTags->"Section1a"]},
 "Section1b"->{
  Cell[12725, 360, 119, 1, 32, "Subsection",ExpressionUUID->"ff4d4283-0420-42be-8ff3-a07ac618b91c",
   CellTags->"Section1b"]},
 "Section1c"->{
  Cell[26330, 788, 124, 1, 32, "Subsection",ExpressionUUID->"b0fd40d2-e4a4-4f2e-b8a0-da6dc7f620c1",
   CellTags->"Section1c"]},
 "Section2"->{
  Cell[51796, 1550, 312, 10, 56, "Section",ExpressionUUID->"7100191d-a83f-40c0-9da0-f1992f5b9fcf",
   CellTags->"Section2"]},
 "Section2a"->{
  Cell[57058, 1712, 303, 10, 33, "Subsection",ExpressionUUID->"511d05e9-9b8d-44f6-90ec-98244b968509",
   CellTags->"Section2a"]},
 "Section2b"->{
  Cell[73048, 2199, 109, 1, 32, "Subsection",ExpressionUUID->"1c9c62a7-7c7b-4ee9-ad8b-a3c0e735af88",
   CellTags->"Section2b"]},
 "Section3"->{
  Cell[321130, 7335, 123, 1, 55, "Section",ExpressionUUID->"845c284e-9df7-4afc-a912-35cf7bdfd172",
   CellTags->"Section3"]},
 "Section3a"->{
  Cell[321608, 7347, 138, 1, 32, "Subsection",ExpressionUUID->"963b2763-ce77-4fda-b8a5-6b84f9658d69",
   CellTags->"Section3a"]},
 "Section3b"->{
  Cell[343815, 7997, 138, 1, 32, "Subsection",ExpressionUUID->"948e77f4-93ff-4596-8ac0-00ad440c4ec9",
   CellTags->"Section3b"]},
 "Section3c"->{
  Cell[400461, 9286, 160, 5, 35, "Subsection",ExpressionUUID->"769a94e9-bbba-4a35-bd70-69f0e14577e8",
   CellTags->"Section3c"]},
 "Section4"->{
  Cell[418136, 9765, 122, 1, 55, "Section",ExpressionUUID->"9a29cc1b-62fb-410d-a881-5501b026facc",
   CellTags->"Section4"]},
 "Section4a"->{
  Cell[418527, 9776, 143, 2, 32, "Subsection",ExpressionUUID->"26fb0ee2-9529-4093-b2c1-1519160f15c0",
   PageBreakWithin->False,
   CellTags->"Section4a"]},
 "Section4b"->{
  Cell[422801, 9901, 118, 1, 32, "Subsection",ExpressionUUID->"eae04551-00ea-438d-b05a-f16cd0be7181",
   CellTags->"Section4b"]},
 "Section4c"->{
  Cell[427615, 10052, 119, 1, 32, "Subsection",ExpressionUUID->"37768dbb-1383-4f99-b01e-5f4141a2b984",
   CellTags->"Section4c"]},
 "Section5"->{
  Cell[457633, 10979, 122, 1, 55, "Section",ExpressionUUID->"e4ffae0a-5939-4b3a-901e-223c8a26cf55",
   CellTags->"Section5"]},
 "Section5a"->{
  Cell[462623, 11132, 120, 1, 32, "Subsection",ExpressionUUID->"306c3e8b-1047-4cf7-a4db-36a809bc5df6",
   CellTags->"Section5a"]},
 "Section5b"->{
  Cell[469664, 11342, 141, 1, 32, "Subsection",ExpressionUUID->"6fa392b5-bfed-407c-af16-f28728d14761",
   CellTags->"Section5b"]},
 "Section5c"->{
  Cell[484041, 11833, 108, 1, 32, "Subsection",ExpressionUUID->"67704b38-1a32-4dc8-9a21-194e3e34ff7b",
   CellTags->"Section5c"]},
 "Section6"->{
  Cell[497259, 12218, 118, 1, 55, "Section",ExpressionUUID->"7fb3821e-5dea-44fa-b3f6-8ce949e15a03",
   CellTags->"Section6"]},
 "Section6a"->{
  Cell[497654, 12229, 128, 1, 32, "Subsection",ExpressionUUID->"f6628a7b-d6f4-406d-86ff-05f366b99374",
   CellTags->"Section6a"]},
 "Section6b"->{
  Cell[507519, 12519, 115, 1, 32, "Subsection",ExpressionUUID->"2430efd8-aa3b-4510-b451-a53f634376d3",
   CellTags->"Section6b"]},
 "Section6c"->{
  Cell[563747, 13811, 129, 1, 32, "Subsection",ExpressionUUID->"202dc708-c76a-4370-a5f6-c915af9c5814",
   CellTags->"Section6c"]},
 "Section6d"->{
  Cell[570429, 14010, 118, 1, 32, "Subsection",ExpressionUUID->"df01284f-122e-4aaf-ab9f-0c80645d32f0",
   CellTags->"Section6d"]},
 "Section6e"->{
  Cell[579067, 14282, 109, 1, 32, "Subsection",ExpressionUUID->"77bc9eab-d482-4e09-b7a4-33bfe26bf83a",
   CellTags->"Section6e"]},
 "Solutions"->{
  Cell[584790, 14447, 170, 3, 55, "Section",ExpressionUUID->"d8cb4622-7e7a-44f9-a6f7-dc077ab39394",
   CellTags->"Solutions"]},
 "SolutionsCP15"->{
  Cell[584985, 14454, 128, 2, 32, "Subsection",ExpressionUUID->"ef73e59b-a955-4e30-9ebb-5712564ad40f",
   CellTags->"SolutionsCP15"]},
 "SolutionsCE1"->{
  Cell[588437, 14554, 138, 2, 32, "Subsection",ExpressionUUID->"acba0d73-2f67-4fe1-867f-5f006496bf52",
   CellTags->"SolutionsCE1"]},
 "SolutionsCE4"->{
  Cell[594155, 14751, 138, 2, 32, "Subsection",ExpressionUUID->"b3548c04-de6e-469c-bb64-0c52af7f256b",
   CellTags->"SolutionsCE4"]},
 "SolutionsCE5"->{
  Cell[600492, 14930, 138, 2, 32, "Subsection",ExpressionUUID->"4d4bd232-ab4a-4794-bc8a-301db7012641",
   CellTags->"SolutionsCE5"]},
 "Exercises"->{
  Cell[605631, 15071, 107, 1, 55, "Section",ExpressionUUID->"70a28eb3-2be5-490c-9238-bba3b748c76b",
   CellTags->"Exercises"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Section1", 632910, 15668},
 {"Section1a", 633048, 15671},
 {"Section1b", 633190, 15674},
 {"Section1c", 633334, 15677},
 {"Section2", 633477, 15680},
 {"Section2a", 633619, 15683},
 {"Section2b", 633765, 15686},
 {"Section3", 633909, 15689},
 {"Section3a", 634051, 15692},
 {"Section3b", 634197, 15695},
 {"Section3c", 634343, 15698},
 {"Section4", 634488, 15701},
 {"Section4a", 634630, 15704},
 {"Section4b", 634803, 15708},
 {"Section4c", 634949, 15711},
 {"Section5", 635095, 15714},
 {"Section5a", 635238, 15717},
 {"Section5b", 635385, 15720},
 {"Section5c", 635532, 15723},
 {"Section6", 635678, 15726},
 {"Section6a", 635821, 15729},
 {"Section6b", 635968, 15732},
 {"Section6c", 636115, 15735},
 {"Section6d", 636262, 15738},
 {"Section6e", 636409, 15741},
 {"Solutions", 636556, 15744},
 {"SolutionsCP15", 636704, 15747},
 {"SolutionsCE1", 636858, 15750},
 {"SolutionsCE4", 637011, 15753},
 {"SolutionsCE5", 637164, 15756},
 {"Exercises", 637314, 15759}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 146, 3, 108, "BookChapterTitle",ExpressionUUID->"58c87dc1-da4d-4ad1-9b9e-244c902b875b",
 CounterAssignments->{{"ChapterNumber", 9}}],
Cell[CellGroupData[{
Cell[751, 29, 86, 0, 55, "Section",ExpressionUUID->"a79adaba-69f5-4755-845e-cbdf6f63257e"],
Cell[840, 31, 500, 11, 50, "Text",ExpressionUUID->"d4375bb2-cfaa-4088-b72a-51aeeac8031b"],
Cell[1343, 44, 595, 12, 65, "Text",ExpressionUUID->"bfbafa32-0bb3-45a6-b397-ff2c28de74eb"],
Cell[1941, 58, 520, 11, 50, "Text",ExpressionUUID->"bb929fba-90a1-4d86-ab63-05916d1ebf18"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2498, 74, 131, 1, 55, "Section",ExpressionUUID->"a39053f7-ed0e-4ece-b12d-861463cf36db",
 CellTags->"Section1"],
Cell[2632, 77, 614, 12, 65, "Text",ExpressionUUID->"0671c94e-0c9a-4e18-afee-cf101660da95"],
Cell[CellGroupData[{
Cell[3271, 93, 127, 1, 32, "Subsection",ExpressionUUID->"d7f67218-9b4e-44da-946e-15ad6376a324",
 CellTags->"Section1a"],
Cell[3401, 96, 502, 7, 50, "Text",ExpressionUUID->"ee92347b-5c7b-4053-8cb6-ce938f2c869b"],
Cell[3906, 105, 274, 7, 31, "Input",ExpressionUUID->"101f51f4-1f75-4602-9517-ca233df06f36",
 InitializationCell->True],
Cell[4183, 114, 699, 17, 127, "Input",ExpressionUUID->"ceb1ab20-3ff9-44a7-891a-7bf26bb255ce",
 InitializationCell->True],
Cell[4885, 133, 700, 17, 62, "Text",ExpressionUUID->"fa62c895-4df6-46e6-8f40-673e3ede9350"],
Cell[CellGroupData[{
Cell[5610, 154, 160, 3, 31, "Input",ExpressionUUID->"b5b64dfa-8381-4c8b-9543-09daea973c3b"],
Cell[5773, 159, 161, 3, 31, "Output",ExpressionUUID->"ada34373-df6f-45a1-9507-3cb581660283"]
}, Open  ]],
Cell[5949, 165, 420, 7, 54, "Text",ExpressionUUID->"99791887-50ff-46ec-86f7-4fda52dc9371"],
Cell[6372, 174, 536, 11, 54, "Text",ExpressionUUID->"e9f17835-e31f-4eac-a2e6-0d1a7152f863"],
Cell[6911, 187, 453, 9, 54, "Text",ExpressionUUID->"940aac1e-b493-4b51-b111-ad2aab85cf6b"],
Cell[7367, 198, 354, 10, 51, "Input",ExpressionUUID->"9ba69cac-c64c-4dea-8735-5fe2048e5cef",
 InitializationCell->True],
Cell[7724, 210, 1292, 30, 112, "Text",ExpressionUUID->"77e2299c-d3e2-4dc4-a839-e02172c5bf67"],
Cell[9019, 242, 651, 13, 70, "Text",ExpressionUUID->"3b9f4b23-7a4e-4da6-ae08-7d385916ec62"],
Cell[CellGroupData[{
Cell[9695, 259, 191, 4, 31, "Input",ExpressionUUID->"539123af-3fa4-41ab-9f88-aa6915874b80"],
Cell[9889, 265, 109, 1, 31, "Output",ExpressionUUID->"c1db0b1c-344b-49f5-9923-8cc761ea286a"]
}, Open  ]],
Cell[10013, 269, 378, 9, 36, "Text",ExpressionUUID->"181955db-199b-4297-853d-183798ce41c8"],
Cell[CellGroupData[{
Cell[10416, 282, 136, 2, 31, "Input",ExpressionUUID->"dde9ebbf-82ed-4316-a133-d0daa4883217"],
Cell[10555, 286, 110, 1, 31, "Output",ExpressionUUID->"2ce91cb5-cf64-4d32-a5de-696d2c1eed46"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10702, 292, 193, 4, 31, "Input",ExpressionUUID->"4a3bb3ed-1fa5-45c4-a7ea-6ad9b7705720"],
Cell[10898, 298, 110, 1, 31, "Output",ExpressionUUID->"e6bc936d-775b-41e4-8dd0-21de54306606"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11045, 304, 159, 3, 31, "Input",ExpressionUUID->"0e1c86ae-b413-4332-9e56-961fdd424f0f"],
Cell[11207, 309, 110, 1, 31, "Output",ExpressionUUID->"045eac25-91ae-4a6e-9454-25d0dfc70be1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11354, 315, 132, 2, 31, "Input",ExpressionUUID->"bfb3b999-fcfb-4880-bc15-7235447072ca"],
Cell[11489, 319, 111, 1, 31, "Output",ExpressionUUID->"9d7f035d-44b8-478b-bb3f-f6b13d7f8b82"]
}, Open  ]],
Cell[11615, 323, 183, 6, 24, "Text",ExpressionUUID->"ea8428ae-0e38-4a1f-aa35-19e073bc1b17"],
Cell[11801, 331, 369, 10, 51, "Input",ExpressionUUID->"bd14b7c1-644b-48ba-8465-5d461227f36f",
 InitializationCell->True],
Cell[12173, 343, 515, 12, 43, "Text",ExpressionUUID->"2b2b5105-7247-4bd9-9284-2cac53da6eb8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12725, 360, 119, 1, 32, "Subsection",ExpressionUUID->"ff4d4283-0420-42be-8ff3-a07ac618b91c",
 CellTags->"Section1b"],
Cell[12847, 363, 168, 3, 20, "Text",ExpressionUUID->"ff16af74-0b28-4f8b-b1b5-4281f763a50f"],
Cell[CellGroupData[{
Cell[13040, 370, 100, 0, 18, "Subsubsection",ExpressionUUID->"978e1417-30cd-4e8c-956c-76cab68a9566"],
Cell[13143, 372, 1066, 27, 53, "Text",ExpressionUUID->"6f0de316-3cfa-4b51-984e-a02054c7fdbf"],
Cell[14212, 401, 659, 15, 51, "Text",ExpressionUUID->"9df5bfdc-bea1-43ef-8288-723b6a514e23"],
Cell[CellGroupData[{
Cell[14896, 420, 220, 5, 31, "Input",ExpressionUUID->"016f2298-1fda-43be-a5fa-fb47af0cb15f"],
Cell[15119, 427, 663, 21, 31, "Output",ExpressionUUID->"4c20d436-ab79-4a68-8113-b3bbf8810e4c"]
}, Open  ]],
Cell[15797, 451, 1264, 36, 74, "Text",ExpressionUUID->"2a57bf10-7c50-4f3e-81e0-b5cbe54823b2"],
Cell[17064, 489, 234, 5, 24, "Text",ExpressionUUID->"e7e2c409-1f29-4ed3-8260-f56d94b186f4"],
Cell[17301, 496, 583, 17, 31, "Input",ExpressionUUID->"613b7da0-ea1f-4bc9-be7c-691df03efe9b",
 InitializationCell->True],
Cell[17887, 515, 163, 3, 20, "Text",ExpressionUUID->"1712bdeb-1a66-4439-8f0d-5c1a5d2b6898"],
Cell[CellGroupData[{
Cell[18075, 522, 179, 3, 31, "Input",ExpressionUUID->"2046d16e-7064-48ec-8909-3b63b0696c10"],
Cell[18257, 527, 604, 19, 31, "Output",ExpressionUUID->"059dd4b5-4c15-420f-bf36-8930fa75de62"]
}, Open  ]],
Cell[18876, 549, 200, 5, 24, "Text",ExpressionUUID->"7412970e-757c-4c97-8d93-bc7d4de9c671"],
Cell[CellGroupData[{
Cell[19101, 558, 141, 2, 31, "Input",ExpressionUUID->"6ca5477d-9be0-4f75-91fc-0c8525f5cf93"],
Cell[19245, 562, 110, 1, 31, "Output",ExpressionUUID->"dcfae663-3b6d-476b-81ec-97dc3fcdec29"]
}, Open  ]],
Cell[19370, 566, 626, 15, 39, "Text",ExpressionUUID->"b016d24d-1b2e-448c-a58b-15f208568324"],
Cell[19999, 583, 570, 16, 51, "Input",ExpressionUUID->"fc48dc5b-acf5-427f-ba72-ff3dfe7bb7e1",
 InitializationCell->True],
Cell[20572, 601, 83, 0, 20, "Text",ExpressionUUID->"ec6c6c30-57a6-4056-a1d6-f102e9101f44"],
Cell[CellGroupData[{
Cell[20680, 605, 200, 4, 31, "Input",ExpressionUUID->"e46c5315-f10f-4f17-8461-1047eb79ab60",
 InitializationCell->True],
Cell[20883, 611, 958, 31, 51, "Output",ExpressionUUID->"720f819f-de48-4ca9-833b-aeaae1f18ade"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[21890, 648, 105, 0, 18, "Subsubsection",ExpressionUUID->"9f1cff5a-6edb-4a43-8dfd-85a4019beb3c"],
Cell[21998, 650, 223, 3, 35, "Text",ExpressionUUID->"46810674-a6bc-497c-b8d5-94889023bac5"],
Cell[22224, 655, 865, 26, 40, "Text",ExpressionUUID->"7ea35bc6-7469-4005-a26d-944e46c8348b"],
Cell[23092, 683, 289, 7, 31, "Input",ExpressionUUID->"5e6253a8-4632-4788-a5eb-f85e62ed834c",
 InitializationCell->True],
Cell[23384, 692, 426, 11, 21, "Text",ExpressionUUID->"16fe25b6-2d7e-40e9-bf9b-cffd826e1b18"],
Cell[CellGroupData[{
Cell[23835, 707, 196, 4, 31, "Input",ExpressionUUID->"34e15c7c-872f-4195-80f5-ccc8b411e838"],
Cell[24034, 713, 162, 3, 31, "Output",ExpressionUUID->"6324dce0-0a8e-4e11-848d-856b1aa9b4e7"]
}, Open  ]],
Cell[24211, 719, 535, 13, 40, "Text",ExpressionUUID->"a92abd1c-1012-4c59-8ba1-c26447c5af05"],
Cell[24749, 734, 331, 6, 24, "Text",ExpressionUUID->"cb6c5a2c-86ad-4b5d-998f-78c8df74d82a"],
Cell[CellGroupData[{
Cell[25105, 744, 203, 4, 31, "Input",ExpressionUUID->"a6c17f8b-9469-4d97-ac2f-dfe5f801b189",
 InitializationCell->True],
Cell[25311, 750, 958, 31, 51, "Output",ExpressionUUID->"2a64194a-65d4-432f-aa05-909877d66823"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[26330, 788, 124, 1, 32, "Subsection",ExpressionUUID->"b0fd40d2-e4a4-4f2e-b8a0-da6dc7f620c1",
 CellTags->"Section1c"],
Cell[26457, 791, 711, 15, 51, "Text",ExpressionUUID->"cbb27fae-d144-4368-ad6d-5aef836a0dc6"],
Cell[27171, 808, 864, 16, 82, "Text",ExpressionUUID->"b73e40a4-aac6-4f6c-bc17-91b7c9c902f9"],
Cell[28038, 826, 1053, 35, 51, "Input",ExpressionUUID->"4bcb97f4-0024-4ca3-8a1c-008a7f990db3",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[29116, 865, 169, 3, 31, "Input",ExpressionUUID->"ca6c9319-a9d7-49a3-a209-a74065102e85"],
Cell[29288, 870, 650, 20, 31, "Output",ExpressionUUID->"39872771-b743-49a3-ae73-d0911f5eefa1"]
}, Open  ]],
Cell[29953, 893, 281, 6, 21, "Text",ExpressionUUID->"47a3b4dd-1d4d-4ce1-8d43-448ef024ade7"],
Cell[30237, 901, 551, 8, 50, "Text",ExpressionUUID->"460e9140-3fa2-4ac0-8aa5-8b19f16eb80a"],
Cell[30791, 911, 318, 8, 31, "Input",ExpressionUUID->"708858d1-633f-4268-83b1-76f9b9097138",
 InitializationCell->True],
Cell[31112, 921, 229, 4, 20, "Text",ExpressionUUID->"e572aa29-d48d-44a4-98a2-cae2446e21c8"],
Cell[CellGroupData[{
Cell[31366, 929, 145, 2, 31, "Input",ExpressionUUID->"1858b69b-9c55-4f80-8ba6-4ca55325b47b"],
Cell[31514, 933, 195, 4, 31, "Output",ExpressionUUID->"866e6c74-fe57-4c15-bc1a-491ef1ab1e04"]
}, Open  ]],
Cell[CellGroupData[{
Cell[31746, 942, 149, 2, 31, "Input",ExpressionUUID->"4c7dfe21-3359-4844-9b88-fe8b658d3869"],
Cell[31898, 946, 288, 8, 31, "Output",ExpressionUUID->"50ab0fd6-fc73-45ed-be59-2cc72b3b32e6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32223, 959, 91, 0, 18, "Subsubsection",ExpressionUUID->"a9af6283-372a-4eec-a52d-4380da4e9623"],
Cell[32317, 961, 694, 18, 35, "Text",ExpressionUUID->"008d9bf8-c001-4642-95a4-22ca1a2d54e4"],
Cell[33014, 981, 1113, 29, 52, "Text",ExpressionUUID->"1ec2c866-1d01-4b3e-9ff0-9fd1623e4c82"],
Cell[34130, 1012, 1141, 30, 165, "Input",ExpressionUUID->"6d88f40a-5ed2-4c9a-98b5-f9f89e0fb971",
 InitializationCell->True],
Cell[35274, 1044, 657, 17, 58, "Text",ExpressionUUID->"3f7d1058-d839-4aca-9eb6-3f917e149c41"],
Cell[35934, 1063, 162, 2, 20, "Text",ExpressionUUID->"294ef7ed-babe-4d4c-a735-6c89b812d31c"],
Cell[CellGroupData[{
Cell[36121, 1069, 145, 2, 31, "Input",ExpressionUUID->"8718612f-8d84-4ae3-8e7b-a03d329e118a"],
Cell[36269, 1073, 110, 1, 31, "Output",ExpressionUUID->"36beb014-b40b-445a-a55a-a4e1c907c236"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[36428, 1080, 88, 0, 18, "Subsubsection",ExpressionUUID->"6036b5d2-94c2-4fc8-bf6e-3690fe3d89c2"],
Cell[36519, 1082, 902, 20, 65, "Text",ExpressionUUID->"0677f4af-3bf5-40cd-b009-b028156b21cc"],
Cell[37424, 1104, 941, 25, 146, "Input",ExpressionUUID->"262cbf99-9e81-4e10-9d4c-c67c84d6d5c3",
 InitializationCell->True],
Cell[38368, 1131, 195, 3, 20, "Text",ExpressionUUID->"6d2d631c-1c9b-4f95-bec1-2b117157f0c5"],
Cell[CellGroupData[{
Cell[38588, 1138, 145, 2, 31, "Input",ExpressionUUID->"a8cba9a0-d9ec-4a97-9253-6634b4fe4bf0"],
Cell[38736, 1142, 111, 1, 31, "Output",ExpressionUUID->"c2a64c93-2865-4d18-88ca-59a62ace4c4c"]
}, Open  ]],
Cell[38862, 1146, 236, 4, 20, "Text",ExpressionUUID->"758b962c-ef0d-4220-aca7-641976da2a7f"],
Cell[CellGroupData[{
Cell[39123, 1154, 225, 5, 31, "Input",ExpressionUUID->"bfb0fdf9-8a31-4598-ae3f-f7156dab1dfc",
 InitializationCell->True],
Cell[39351, 1161, 1430, 47, 51, "Output",ExpressionUUID->"02d13bba-df25-468c-8cf9-0a1d253a5dab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40818, 1213, 150, 2, 31, "Input",ExpressionUUID->"e6d200d8-7ee8-46ea-a79d-430bb17b6881"],
Cell[40971, 1217, 110, 1, 31, "Output",ExpressionUUID->"8fe08e5c-460f-4131-93ac-54ceb116c317"]
}, Open  ]],
Cell[41096, 1221, 1489, 40, 50, "Text",ExpressionUUID->"49981e08-fb16-48ab-aa2a-4ec08a4cfc8b"],
Cell[42588, 1263, 1137, 30, 146, "Input",ExpressionUUID->"5257905d-8272-40ab-bd33-009def7986c0",
 InitializationCell->True],
Cell[43728, 1295, 286, 4, 20, "Text",ExpressionUUID->"688ca155-0eb7-48b5-b23f-4607581b555f"],
Cell[CellGroupData[{
Cell[44039, 1303, 149, 2, 31, "Input",ExpressionUUID->"f0e2a249-2e07-4dd9-ab5b-a71bd0b5c664"],
Cell[44191, 1307, 110, 1, 31, "Output",ExpressionUUID->"4655d71c-43e9-415b-8dd8-a7727a11ab64"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44338, 1313, 149, 2, 31, "Input",ExpressionUUID->"37ebb3e6-86b7-42e6-ae89-5522deb47f2c"],
Cell[44490, 1317, 110, 1, 31, "Output",ExpressionUUID->"2bb68554-d7fc-4d9e-9d7c-fd2cbf7cd5b1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[44649, 1324, 92, 0, 18, "Subsubsection",ExpressionUUID->"4d8954f2-d793-4d7e-901a-c5072427e54c"],
Cell[44744, 1326, 979, 29, 35, "Text",ExpressionUUID->"c28ec026-ef0f-450d-b1ba-3176f86ccdb9"],
Cell[45726, 1357, 1534, 46, 50, "Text",ExpressionUUID->"4b4c6353-945a-4485-bf1e-956df55200b4"],
Cell[47263, 1405, 92, 0, 20, "Text",ExpressionUUID->"f1418b4e-f637-45e2-b262-0f1185919dce"],
Cell[47358, 1407, 1666, 44, 184, "Input",ExpressionUUID->"3b9c71a0-54de-4e7c-beef-4fdd3b87e527",
 InitializationCell->True],
Cell[49027, 1453, 880, 26, 35, "Text",ExpressionUUID->"18b37236-f92a-447b-887f-348ba8bc1a07"],
Cell[CellGroupData[{
Cell[49932, 1483, 146, 2, 31, "Input",ExpressionUUID->"0c12e45f-6f77-4bbe-8e9d-9f1a520ffa5a"],
Cell[50081, 1487, 110, 1, 31, "Output",ExpressionUUID->"2c942a64-9120-4f66-a75e-daf6f164a53b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[50228, 1493, 298, 8, 31, "Input",ExpressionUUID->"f3ccf05c-eb7e-4d8d-adda-e822021d6b48",
 InitializationCell->True],
Cell[50529, 1503, 899, 29, 51, "Output",ExpressionUUID->"27713d90-b758-4fd6-85e8-2130d58384ad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51465, 1537, 144, 2, 31, "Input",ExpressionUUID->"bbe4ad70-d2dc-4853-b34c-a837488c5cfc"],
Cell[51612, 1541, 111, 1, 31, "Output",ExpressionUUID->"4cb7454c-0abd-499e-974e-8b2697e9a2fb"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[51796, 1550, 312, 10, 56, "Section",ExpressionUUID->"7100191d-a83f-40c0-9da0-f1992f5b9fcf",
 CellTags->"Section2"],
Cell[52111, 1562, 1018, 30, 54, "Text",ExpressionUUID->"8dd209fe-68e3-4539-ac12-6b13d3fd3c30"],
Cell[53132, 1594, 310, 8, 51, "Input",ExpressionUUID->"40b0066c-ba9f-435a-b0e4-e171e8e2e0b2",
 InitializationCell->True],
Cell[53445, 1604, 371, 10, 51, "Input",ExpressionUUID->"d671f3c2-5d79-441b-9fa6-074c25e8de47",
 InitializationCell->True],
Cell[53819, 1616, 203, 5, 20, "Text",ExpressionUUID->"a385a458-3148-4c58-b316-70a9912d17d1"],
Cell[54025, 1623, 612, 18, 51, "Input",ExpressionUUID->"3a06d3e9-0761-436f-8aea-099714f5b667",
 InitializationCell->True],
Cell[54640, 1643, 405, 7, 39, "Text",ExpressionUUID->"1701be0d-e0b4-4729-9624-9c1e696a5673"],
Cell[CellGroupData[{
Cell[55070, 1654, 143, 2, 31, "Input",ExpressionUUID->"8834cb16-5d4c-49a4-9e31-d6dff15fb3d9"],
Cell[55216, 1658, 110, 1, 31, "Output",ExpressionUUID->"6564373b-ba50-4065-8441-100bd15d4bc2"]
}, Open  ]],
Cell[55341, 1662, 577, 12, 50, "Text",ExpressionUUID->"9b106069-352c-4787-a46c-b561324d4297"],
Cell[55921, 1676, 419, 10, 51, "Input",ExpressionUUID->"10561bbc-0011-42ea-afc0-c05396bfe6ea",
 InitializationCell->True],
Cell[56343, 1688, 391, 10, 51, "Input",ExpressionUUID->"0365a8cb-7435-4dc4-8a11-c6aeb8f671de",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[56759, 1702, 149, 2, 31, "Input",ExpressionUUID->"10754b9c-9ac8-4c72-ac57-785e92fe857e"],
Cell[56911, 1706, 110, 1, 31, "Output",ExpressionUUID->"cec2ad41-30a5-4fca-96d1-ce458bb87ec4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[57058, 1712, 303, 10, 33, "Subsection",ExpressionUUID->"511d05e9-9b8d-44f6-90ec-98244b968509",
 CellTags->"Section2a"],
Cell[57364, 1724, 351, 9, 20, "Text",ExpressionUUID->"5bb30d10-a4d9-4023-9e67-7a0b65a39539"],
Cell[CellGroupData[{
Cell[57740, 1737, 90, 0, 18, "Subsubsection",ExpressionUUID->"341c04ba-ab0d-43f1-acaa-f163ae2d200b"],
Cell[57833, 1739, 542, 13, 54, "Text",ExpressionUUID->"33e90564-8573-4b60-879b-314010ec4dd7"],
Cell[58378, 1754, 395, 11, 31, "Input",ExpressionUUID->"8dc2addf-d35f-4b9c-a5ff-ad9a0512c2c3",
 InitializationCell->True],
Cell[58776, 1767, 314, 8, 43, "Text",ExpressionUUID->"54d30f7d-7ed2-4625-97f7-3a04d0e353ca"],
Cell[59093, 1777, 142, 2, 20, "Text",ExpressionUUID->"9618783a-8c04-4a54-b1c6-45d3e82caf61"],
Cell[CellGroupData[{
Cell[59260, 1783, 220, 5, 31, "Input",ExpressionUUID->"5d9ee069-dca5-475e-887d-31fc84dc0998"],
Cell[59483, 1790, 339, 9, 31, "Output",ExpressionUUID->"426096c4-96d9-4ad7-83b0-ae77640118b9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[59859, 1804, 230, 5, 31, "Input",ExpressionUUID->"eaf87bc4-eb49-447e-9824-d312ffb4198a"],
Cell[60092, 1811, 453, 12, 31, "Output",ExpressionUUID->"7c7edaa7-ac29-43b7-8ae1-59baf664a216"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[60594, 1829, 84, 0, 18, "Subsubsection",ExpressionUUID->"194e17cb-b1d4-4585-a1a9-356d74df73bc"],
Cell[60681, 1831, 279, 4, 35, "Text",ExpressionUUID->"15c3cb88-10fc-4dc1-affa-ee90378725f8"],
Cell[60963, 1837, 155, 2, 20, "Text",ExpressionUUID->"9dc8cb5b-ad38-47e3-ba45-48b2d322a0c1"],
Cell[CellGroupData[{
Cell[61143, 1843, 532, 14, 16, "Item1Numbered",ExpressionUUID->"217a825e-94a9-4055-9abf-3d3fc7947516"],
Cell[61678, 1859, 608, 18, 16, "Item1Numbered",ExpressionUUID->"5cd31642-be53-4989-9456-91022d7d9cc5"],
Cell[62289, 1879, 864, 26, 16, "Item1Numbered",ExpressionUUID->"d065500d-0298-4b62-9fe7-ec5ee6fcb2db"],
Cell[63156, 1907, 341, 7, 29, "Item1Numbered",ExpressionUUID->"d93e5d6f-875f-4973-ba3d-ca443a622ca3"]
}, Open  ]],
Cell[63512, 1917, 2003, 54, 260, "Input",ExpressionUUID->"59fa9920-9e3e-4841-83ec-c61db5969e26",
 InitializationCell->True],
Cell[65518, 1973, 1479, 51, 81, "Text",ExpressionUUID->"d35c56a2-ffed-434d-985f-801e2d095601"],
Cell[67000, 2026, 1138, 36, 81, "Text",ExpressionUUID->"6d22e25a-192b-458f-ad57-f2bf9fca0d90"],
Cell[68141, 2064, 178, 4, 24, "Text",ExpressionUUID->"af79a156-6f5a-4f56-9bfa-f413cfdcd217"],
Cell[68322, 2070, 1287, 30, 184, "Input",ExpressionUUID->"0e8b18af-f58e-4db7-9185-dd1752249692",
 InitializationCell->True],
Cell[69612, 2102, 1550, 38, 184, "Input",ExpressionUUID->"71402b43-f11d-4091-ae82-1f7b201e5b13",
 InitializationCell->True],
Cell[71165, 2142, 288, 8, 24, "Text",ExpressionUUID->"160adcc2-bffd-44ce-ada5-7d87836b1f50"],
Cell[CellGroupData[{
Cell[71478, 2154, 243, 5, 31, "Input",ExpressionUUID->"309efd88-a199-48d2-be86-be13ed5969d1"],
Cell[71724, 2161, 1263, 31, 142, "Output",ExpressionUUID->"ec9dcdfb-b90d-4e3a-8fa2-ae3a4fd7eb86"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[73048, 2199, 109, 1, 32, "Subsection",ExpressionUUID->"1c9c62a7-7c7b-4ee9-ad8b-a3c0e735af88",
 CellTags->"Section2b"],
Cell[73160, 2202, 1189, 30, 67, "Text",ExpressionUUID->"c78de9f8-ca73-4a6a-ba8a-d0c1d9300370"],
Cell[74352, 2234, 1326, 33, 90, "Text",ExpressionUUID->"f75b5d7e-9b57-4c1b-a3dd-383eb7923201"],
Cell[75681, 2269, 399, 6, 50, "Text",ExpressionUUID->"4981962d-929c-4b53-a774-8702976e1f45"],
Cell[CellGroupData[{
Cell[76105, 2279, 407, 9, 51, "Input",ExpressionUUID->"bc701712-9e58-46db-aff4-3d9efc84be3e",
 InitializationCell->True],
Cell[76515, 2290, 375, 7, 33, "Output",ExpressionUUID->"5e142c4e-2af4-43b5-b91b-45676cd0c0a3"]
}, Open  ]],
Cell[76905, 2300, 553, 10, 51, "Text",ExpressionUUID->"07c1171b-b996-478a-8ad0-8c5e93878e20"],
Cell[77461, 2312, 165, 3, 20, "Text",ExpressionUUID->"40412df5-ec63-4913-9566-29777e33562c"],
Cell[CellGroupData[{
Cell[77651, 2319, 166, 2, 31, "Input",ExpressionUUID->"564c2131-ff9e-487a-9606-e68c84ce0a9d"],
Cell[77820, 2323, 109, 1, 31, "Output",ExpressionUUID->"c0ef762e-7648-467d-b221-dd24f8cd203d"]
}, Open  ]],
Cell[77944, 2327, 270, 6, 21, "Text",ExpressionUUID->"dcb0d5a5-85e8-4351-b727-1816ea45e194"],
Cell[78217, 2335, 497, 14, 21, "Text",ExpressionUUID->"3fc50414-2de6-48e5-9f33-4965c9acb1a2"],
Cell[CellGroupData[{
Cell[78739, 2353, 149, 2, 31, "Input",ExpressionUUID->"e4831a1f-835d-48cf-9d35-e6a237f84261"],
Cell[78891, 2357, 219, 4, 31, "Output",ExpressionUUID->"b62a4a69-dcfa-42da-8245-b3fda251e5b1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[79147, 2366, 151, 2, 31, "Input",ExpressionUUID->"36c4d958-714f-4faf-8ba3-eac677259ce0"],
Cell[79301, 2370, 197, 4, 31, "Output",ExpressionUUID->"e66c2fd0-f568-40e8-b7e1-e9af09d8e14b"]
}, Open  ]],
Cell[79513, 2377, 798, 17, 74, "Text",ExpressionUUID->"9e13aa1f-e43c-4be4-8b29-c723f67d050e"],
Cell[CellGroupData[{
Cell[80336, 2398, 367, 9, 51, "Input",ExpressionUUID->"19c7bcf6-c9a5-4630-a37d-36983b38342f"],
Cell[80706, 2409, 370, 7, 33, "Output",ExpressionUUID->"ba7b4a1c-577d-4523-a80d-f8b1f88ab084"]
}, Open  ]],
Cell[81091, 2419, 372, 9, 40, "Text",ExpressionUUID->"23e3a1d2-8aa1-4694-8801-e1c6dfcbefaf"],
Cell[CellGroupData[{
Cell[81488, 2432, 432, 11, 51, "Input",ExpressionUUID->"e1f5b836-86ec-4413-91ee-4de629dabe98"],
Cell[81923, 2445, 2449, 52, 181, "Output",ExpressionUUID->"e955d5e7-c7b9-434a-84b4-6d7308ab756b"]
}, Open  ]],
Cell[84387, 2500, 264, 6, 21, "Text",ExpressionUUID->"acf28ab9-54e1-48c2-afac-1230eee57fd8"],
Cell[CellGroupData[{
Cell[84676, 2510, 558, 15, 70, "Input",ExpressionUUID->"523e6dd5-d92b-4da1-9ada-135786c41b6f",
 InitializationCell->True],
Cell[85237, 2527, 22665, 443, 257, "Output",ExpressionUUID->"06941a1c-db6e-422d-b175-d5b0cbe6158d"]
}, Open  ]],
Cell[107917, 2973, 371, 10, 21, "Text",ExpressionUUID->"44070ed5-4bf1-45d3-b937-45e08a0ad716"],
Cell[CellGroupData[{
Cell[108313, 2987, 157, 2, 31, "Input",ExpressionUUID->"b8975bf9-8a6c-4a6a-b48a-355fb17a003a"],
Cell[108473, 2991, 2449, 52, 181, "Output",ExpressionUUID->"be0b8c51-f174-4137-a2e2-0bd82db164da"]
}, Open  ]],
Cell[110937, 3046, 547, 15, 39, "Text",ExpressionUUID->"a911f856-a777-4a46-b406-f23f6beedf16"],
Cell[CellGroupData[{
Cell[111509, 3065, 175, 3, 31, "Input",ExpressionUUID->"61c74e91-2a0c-488c-bbd9-4b885527145d"],
Cell[111687, 3070, 14982, 283, 109, "Output",ExpressionUUID->"4e4eeebc-51f7-498b-adc0-6a0c77552df9"]
}, Open  ]],
Cell[126684, 3356, 922, 30, 43, "Text",ExpressionUUID->"c663f128-94cb-4f7e-b306-99b762e57b30"],
Cell[CellGroupData[{
Cell[127631, 3390, 152, 2, 31, "Input",ExpressionUUID->"350ca58e-0ae6-46b5-9a47-bd6432964ba0"],
Cell[127786, 3394, 14980, 283, 109, "Output",ExpressionUUID->"54c761c7-a0a8-4b16-87ed-74b742a40d1d"]
}, Open  ]],
Cell[142781, 3680, 157, 2, 20, "Text",ExpressionUUID->"2d826fc6-1f35-4122-a6d3-bfc0d4bf7af3"],
Cell[CellGroupData[{
Cell[142963, 3686, 192, 3, 31, "Input",ExpressionUUID->"525809af-a729-4340-a9d9-350d52b3fb4c"],
Cell[143158, 3691, 124, 1, 31, "Output",ExpressionUUID->"7ac2c239-1b27-403c-b79c-21d85b7f2cc3"]
}, Open  ]],
Cell[143297, 3695, 297, 4, 35, "Text",ExpressionUUID->"e080d7c6-9ca3-4015-9f3f-2a0f9260eed4"],
Cell[CellGroupData[{
Cell[143619, 3703, 289, 7, 31, "Input",ExpressionUUID->"606d8f55-1b6a-4a73-8fd9-0b6cbb3e32da"],
Cell[143911, 3712, 14568, 275, 133, "Output",ExpressionUUID->"b2294056-0f86-4569-96bd-caaf7157e3d5"]
}, Open  ]],
Cell[158494, 3990, 149, 4, 24, "Text",ExpressionUUID->"473b6a43-ab7d-4b3f-b022-ff7c02b0d9e8"],
Cell[CellGroupData[{
Cell[158668, 3998, 266, 6, 31, "Input",ExpressionUUID->"1e2312fc-1e31-43ee-a9e0-a218c0883a70"],
Cell[158937, 4006, 18138, 350, 257, "Output",ExpressionUUID->"2c612ce5-8e13-4250-92f0-78bdef667b31"]
}, Open  ]],
Cell[177090, 4359, 119, 0, 20, "Text",ExpressionUUID->"038727a6-5450-4f76-aed9-22d64d8e1f1f"],
Cell[177212, 4361, 255, 6, 21, "Text",ExpressionUUID->"1cd10200-ce0f-4997-9402-a9325ffd0031"],
Cell[CellGroupData[{
Cell[177492, 4371, 567, 16, 70, "Input",ExpressionUUID->"1be2ce76-e957-4d99-893a-bb5858044556",
 InitializationCell->True],
Cell[178062, 4389, 27168, 539, 257, "Output",ExpressionUUID->"45973824-e9de-4c21-9257-d3a7f12c70fd"]
}, Open  ]],
Cell[205245, 4931, 855, 23, 55, "Text",ExpressionUUID->"cfec4bbe-933d-4431-94c7-ca22914f2dfd"],
Cell[206103, 4956, 1060, 29, 59, "Text",ExpressionUUID->"a7c21c96-dc4b-4bf5-8785-2f6d4c21970b"],
Cell[207166, 4987, 470, 11, 40, "Text",ExpressionUUID->"53bcdefa-f49f-436b-9c31-45ede865e066"],
Cell[CellGroupData[{
Cell[207661, 5002, 249, 6, 31, "Input",ExpressionUUID->"70fbf5ea-e46f-4ed0-9cd7-eb6e8a96238a"],
Cell[207913, 5010, 20247, 394, 133, "Output",ExpressionUUID->"e0242652-b3cc-45d5-9095-02046c6c5bbe"]
}, Open  ]],
Cell[228175, 5407, 283, 4, 35, "Text",ExpressionUUID->"2607f5ac-1ca6-41f2-a47d-577b102959ae"],
Cell[CellGroupData[{
Cell[228483, 5415, 245, 6, 31, "Input",ExpressionUUID->"2cd82fbf-e3d4-4723-85a1-6dab6120d106"],
Cell[228731, 5423, 24876, 509, 207, "Output",ExpressionUUID->"773dcb16-13ed-4157-9ee3-ae8fdf8b554c"]
}, Open  ]],
Cell[253622, 5935, 532, 9, 51, "Text",ExpressionUUID->"fbe168d2-67ee-4fd1-952f-f9a3ee058cb9"],
Cell[254157, 5946, 706, 14, 66, "Text",ExpressionUUID->"2bd07c06-5a30-4a97-a836-26776909b582"],
Cell[CellGroupData[{
Cell[254888, 5964, 297, 6, 31, "Input",ExpressionUUID->"5a07824d-ea40-4480-85e7-f4358341aabe"],
Cell[255188, 5972, 29714, 590, 233, "Output",ExpressionUUID->"dfa8bde9-b256-46d2-b5df-c11a7cb4e134"]
}, Open  ]],
Cell[284917, 6565, 718, 14, 55, "Text",ExpressionUUID->"4a5232c0-b1e3-4f05-85e9-583a007fed1e"],
Cell[CellGroupData[{
Cell[285660, 6583, 320, 6, 51, "Input",ExpressionUUID->"6fd6e536-d19d-4095-9d96-c7b02007597f"],
Cell[285983, 6591, 34629, 726, 283, "Output",ExpressionUUID->"5e228fe4-4c51-485b-ba85-b7f78be4769a"]
}, Open  ]],
Cell[320627, 7320, 454, 9, 39, "Text",ExpressionUUID->"5045f68b-8f7f-4e7d-a42b-a5f3caadf2b0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[321130, 7335, 123, 1, 55, "Section",ExpressionUUID->"845c284e-9df7-4afc-a912-35cf7bdfd172",
 CellTags->"Section3"],
Cell[321256, 7338, 327, 5, 35, "Text",ExpressionUUID->"10f885ad-ecd5-4a2f-85db-2c55ea16a1a1"],
Cell[CellGroupData[{
Cell[321608, 7347, 138, 1, 32, "Subsection",ExpressionUUID->"963b2763-ce77-4fda-b8a5-6b84f9658d69",
 CellTags->"Section3a"],
Cell[321749, 7350, 152, 2, 20, "Text",ExpressionUUID->"c0b6c413-1e41-496a-b9bf-3197bdd7171a"],
Cell[CellGroupData[{
Cell[321926, 7356, 95, 0, 18, "Subsubsection",ExpressionUUID->"85f03eec-8f23-4eb1-b5dd-abbd148fb86b"],
Cell[322024, 7358, 368, 7, 36, "Text",ExpressionUUID->"07b0f009-fe61-4f9f-8013-8590aac9d6e8"],
Cell[CellGroupData[{
Cell[322417, 7369, 287, 8, 31, "Input",ExpressionUUID->"f0536831-6882-4b11-9517-8a464ca6fbd8"],
Cell[322707, 7379, 681, 20, 58, "Output",ExpressionUUID->"3747705e-0e03-44fe-aa4f-c042883ed99f"]
}, Open  ]],
Cell[323403, 7402, 469, 11, 36, "Text",ExpressionUUID->"e219b6d7-43c2-4028-ad3b-b17e9b835eb7"],
Cell[323875, 7415, 874, 15, 82, "Text",ExpressionUUID->"8897b77a-f710-402b-96db-e326d70830ed"],
Cell[324752, 7432, 320, 7, 20, "Text",ExpressionUUID->"e1005f43-469a-4118-a651-6217e30f0806"],
Cell[CellGroupData[{
Cell[325097, 7443, 378, 9, 51, "Input",ExpressionUUID->"0de78262-d968-42c0-9e3e-0ca4965e0496",
 InitializationCell->True],
Cell[325478, 7454, 755, 22, 92, "Output",ExpressionUUID->"dda43daf-f9d8-426a-9d46-ff0168b3aadd"]
}, Open  ]],
Cell[326248, 7479, 1038, 29, 54, "Text",ExpressionUUID->"d314a6c3-27b5-4627-96d5-a3fec3148291"],
Cell[CellGroupData[{
Cell[327311, 7512, 244, 6, 31, "Input",ExpressionUUID->"c6b20f8f-1943-4eda-931e-b58b753ffb86",
 InitializationCell->True],
Cell[327558, 7520, 107, 1, 31, "Output",ExpressionUUID->"d248e84f-a3b3-4db8-b781-9f60b45812f3"]
}, Open  ]],
Cell[327680, 7524, 110, 0, 20, "Text",ExpressionUUID->"65b66689-5478-4a7f-bff0-ed155e6ca072"],
Cell[CellGroupData[{
Cell[327815, 7528, 150, 2, 31, "Input",ExpressionUUID->"40bfe1f1-27ce-45ec-9118-524d30de10da"],
Cell[327968, 7532, 755, 22, 92, "Output",ExpressionUUID->"185318d9-ce68-4a6d-a2f8-277caee64254"]
}, Open  ]],
Cell[328738, 7557, 459, 10, 20, "Text",ExpressionUUID->"488c0fdf-6b35-4279-a27c-0359a947c4ff"],
Cell[CellGroupData[{
Cell[329222, 7571, 505, 15, 70, "Input",ExpressionUUID->"358b010e-7111-4fb4-8164-5d5b7b66c65d",
 InitializationCell->True],
Cell[329730, 7588, 755, 22, 92, "Output",ExpressionUUID->"4a86a173-4f8c-4b2e-9823-9cb956d16f4a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[330534, 7616, 159, 2, 18, "Subsubsection",ExpressionUUID->"6b9f4378-712b-4371-a443-dcf1f3902445"],
Cell[330696, 7620, 815, 16, 89, "Text",ExpressionUUID->"7ee4e23c-0956-41ea-bbb3-74546bfe35f1"],
Cell[331514, 7638, 1081, 30, 146, "Input",ExpressionUUID->"f864b904-acd0-46ef-9428-1cddf5fd1751",
 InitializationCell->True],
Cell[332598, 7670, 2226, 68, 119, "Text",ExpressionUUID->"ba09dd17-4785-4b4b-a82d-eda2f915b340"],
Cell[334827, 7740, 261, 7, 24, "Text",ExpressionUUID->"5ce4af58-bd92-41cb-be17-8f69ea6646b3"],
Cell[CellGroupData[{
Cell[335113, 7751, 293, 7, 51, "Input",ExpressionUUID->"d2c8805f-f8a0-4cb9-a5c1-7361003de3ad",
 InitializationCell->True],
Cell[335409, 7760, 869, 24, 126, "Output",ExpressionUUID->"549c4ed4-caa6-443e-82ea-5d1d5928a51e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[336315, 7789, 308, 7, 51, "Input",ExpressionUUID->"685bf492-c39f-4709-885b-4c56a32c7bcc",
 InitializationCell->True],
Cell[336626, 7798, 869, 24, 126, "Output",ExpressionUUID->"9672f4f3-6d29-4350-a143-6bd52616633f"]
}, Open  ]],
Cell[337510, 7825, 301, 4, 35, "Text",ExpressionUUID->"4d109d20-8f01-4915-8a9f-5f2a52fac4af"],
Cell[337814, 7831, 936, 23, 71, "Text",ExpressionUUID->"e3600943-3822-4e98-937b-2e862e9b336c"],
Cell[338753, 7856, 386, 7, 36, "Text",ExpressionUUID->"93bcfc8c-79dd-4231-80b3-c24c425e74b4"],
Cell[339142, 7865, 800, 23, 70, "Input",ExpressionUUID->"a739b15b-7e00-4012-842b-fa8d9bfc155e",
 InitializationCell->True],
Cell[339945, 7890, 351, 5, 35, "Text",ExpressionUUID->"c65a3756-e372-4fb4-ad64-0481853a34f7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[340333, 7900, 99, 0, 18, "Subsubsection",ExpressionUUID->"7ed60136-ff7f-4694-8075-e62a0bf0e426"],
Cell[340435, 7902, 303, 4, 35, "Text",ExpressionUUID->"9394b628-ca4e-4659-9d3f-9e118128a5b2"],
Cell[340741, 7908, 1240, 31, 184, "Input",ExpressionUUID->"796d356a-580c-4c08-b171-84ebc2c489d8",
 InitializationCell->True],
Cell[341984, 7941, 129, 0, 20, "Text",ExpressionUUID->"8973eba0-de3f-4139-8664-e954d94352bf"],
Cell[CellGroupData[{
Cell[342138, 7945, 160, 2, 31, "Input",ExpressionUUID->"fcf2c74f-8aca-4778-8ab8-8bafc206b906"],
Cell[342301, 7949, 111, 1, 31, "Output",ExpressionUUID->"c9072ebd-7660-4be6-bb8c-8d9f240cf32d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[342449, 7955, 152, 2, 31, "Input",ExpressionUUID->"1bc42209-88ef-46e4-afc8-ca7356b265d7"],
Cell[342604, 7959, 110, 1, 31, "Output",ExpressionUUID->"d6189838-c92e-4d56-be01-0c38b42432e5"]
}, Open  ]],
Cell[342729, 7963, 427, 8, 36, "Text",ExpressionUUID->"2577668f-abf6-4761-bf76-77a7abfdfe8d"],
Cell[CellGroupData[{
Cell[343181, 7975, 152, 2, 31, "Input",ExpressionUUID->"cb83160b-0e4f-4224-bdb5-2a941ce16496"],
Cell[343336, 7979, 111, 1, 31, "Output",ExpressionUUID->"42f87231-0c30-43f9-a282-f3fc93a5bd64"]
}, Open  ]],
Cell[CellGroupData[{
Cell[343484, 7985, 157, 2, 31, "Input",ExpressionUUID->"35be4a89-6a75-449d-b73e-824e6868dfdf"],
Cell[343644, 7989, 110, 1, 31, "Output",ExpressionUUID->"c682932c-c880-4640-9646-f49578a6c177"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[343815, 7997, 138, 1, 32, "Subsection",ExpressionUUID->"948e77f4-93ff-4596-8ac0-00ad440c4ec9",
 CellTags->"Section3b"],
Cell[343956, 8000, 525, 11, 36, "Text",ExpressionUUID->"ae040dd1-7974-4ff8-841d-a72a156389de"],
Cell[344484, 8013, 558, 10, 51, "Text",ExpressionUUID->"87bd208e-ea5f-41aa-b7f4-bb8ef813f740"],
Cell[CellGroupData[{
Cell[345067, 8027, 413, 9, 31, "Input",ExpressionUUID->"ab8d0ac5-6004-45d3-834e-53b4c2bdeead"],
Cell[345483, 8038, 1015, 22, 374, "Output",ExpressionUUID->"6161e5cd-d0fe-48d3-bc4b-b512dd5d2bef"]
}, Open  ]],
Cell[346513, 8063, 480, 10, 39, "Text",ExpressionUUID->"d848ba1d-e54d-4a6b-98ad-2842c77ffc66"],
Cell[CellGroupData[{
Cell[347018, 8077, 491, 10, 51, "Input",ExpressionUUID->"9e99bfd9-5c22-4428-a2e3-5b1d2fe9700b"],
Cell[347512, 8089, 1608, 33, 366, "Output",ExpressionUUID->"fb0dcccc-c3d7-4466-924b-174417140265"]
}, Open  ]],
Cell[349135, 8125, 530, 11, 36, "Text",ExpressionUUID->"c42cf3c5-7bb3-4b4c-966c-497ac86c146d"],
Cell[CellGroupData[{
Cell[349690, 8140, 610, 13, 51, "Input",ExpressionUUID->"58c6cad9-82fe-4d10-bc90-59a30674b916"],
Cell[350303, 8155, 1391, 29, 374, "Output",ExpressionUUID->"7de613d4-c991-44c2-b217-ea5bede86759"]
}, Open  ]],
Cell[351709, 8187, 820, 24, 55, "Text",ExpressionUUID->"7d2c7739-1455-43c1-ae0c-dd25e26a8ae0"],
Cell[352532, 8213, 958, 23, 55, "Text",ExpressionUUID->"9f0d5227-6c23-4652-bc63-a79fceb57f83"],
Cell[CellGroupData[{
Cell[353515, 8240, 345, 7, 31, "Input",ExpressionUUID->"4f0212f7-931b-4cd5-8510-9def4ae285f5"],
Cell[353863, 8249, 5462, 102, 286, "Output",ExpressionUUID->"f70cb329-9c53-4ad5-bac0-fe3291c1d8a1"]
}, Open  ]],
Cell[359340, 8354, 580, 10, 51, "Text",ExpressionUUID->"0ccdbc3c-909f-4354-918e-f39adb5b06bd"],
Cell[CellGroupData[{
Cell[359945, 8368, 388, 9, 51, "Input",ExpressionUUID->"6df7fd4a-9125-497b-ad28-6f2e6b3d552c"],
Cell[360336, 8379, 3027, 61, 225, "Output",ExpressionUUID->"dc698ee5-a902-4802-a4ca-a21a3a2c3987"]
}, Open  ]],
Cell[363378, 8443, 821, 17, 68, "Text",ExpressionUUID->"a35aa1f0-2e1c-47ee-a8ef-e13d36dfdbd8"],
Cell[CellGroupData[{
Cell[364224, 8464, 511, 13, 51, "Input",ExpressionUUID->"128245cc-cbe3-445a-a92e-1ebdfdefb63d"],
Cell[364738, 8479, 3325, 66, 225, "Output",ExpressionUUID->"ecc2209a-a1ff-4741-b989-1b367fa4758c"]
}, Open  ]],
Cell[368078, 8548, 499, 11, 40, "Text",ExpressionUUID->"5578572e-b8ab-493a-9e66-08967888d877"],
Cell[CellGroupData[{
Cell[368602, 8563, 204, 5, 31, "Input",ExpressionUUID->"17dd6efe-ca8a-41b4-a660-533655b7c594"],
Cell[368809, 8570, 696, 18, 51, "Output",ExpressionUUID->"b40d52c3-4da5-4b5a-989e-3bf4fda90cc0"]
}, Open  ]],
Cell[369520, 8591, 175, 4, 24, "Text",ExpressionUUID->"6d94ffcf-0e69-4f32-8a19-66dca1dd8c29"],
Cell[CellGroupData[{
Cell[369720, 8599, 140, 3, 31, "Input",ExpressionUUID->"331082b9-622d-4544-8f3a-9d94929c6b10"],
Cell[369863, 8604, 696, 18, 51, "Output",ExpressionUUID->"8101c7b2-0d05-4ff9-96f3-480ed8404783"]
}, Open  ]],
Cell[370574, 8625, 123, 0, 20, "Text",ExpressionUUID->"ec217666-ba00-4d82-8ab7-f047e0158578"],
Cell[CellGroupData[{
Cell[370722, 8629, 368, 9, 31, "Input",ExpressionUUID->"2bbad3d6-2543-49a3-b4f1-74cae2ca07b2"],
Cell[371093, 8640, 5365, 100, 286, "Output",ExpressionUUID->"6a0eab17-d7e9-447b-b5b7-c6b59a752382"]
}, Open  ]],
Cell[376473, 8743, 522, 9, 51, "Text",ExpressionUUID->"45314b09-7fde-4397-a404-9f9b7f7e347d"],
Cell[CellGroupData[{
Cell[377020, 8756, 200, 5, 31, "Input",ExpressionUUID->"f77d3305-5ed2-4289-bb63-987eab2a172b"],
Cell[377223, 8763, 166, 4, 31, "Output",ExpressionUUID->"097308b8-9e6d-4e75-a7ab-fbe862897cc9"]
}, Open  ]],
Cell[377404, 8770, 165, 3, 20, "Text",ExpressionUUID->"1dc93312-2853-4b9b-8e0d-52b0dc66847a"],
Cell[CellGroupData[{
Cell[377594, 8777, 334, 11, 31, "Input",ExpressionUUID->"9f82c353-d667-4a51-ad41-820e06301f91"],
Cell[377931, 8790, 264, 8, 31, "Output",ExpressionUUID->"b243cffb-ea95-425c-8938-db5f1c611c35"]
}, Open  ]],
Cell[378210, 8801, 167, 3, 20, "Text",ExpressionUUID->"eb5b5a45-c3d4-49a0-8038-8e262e963543"],
Cell[CellGroupData[{
Cell[378402, 8808, 636, 17, 51, "Input",ExpressionUUID->"0d48beed-bc17-4749-b171-c1bf424f422a"],
Cell[379041, 8827, 3079, 62, 225, "Output",ExpressionUUID->"e508bc2f-9082-45c7-8e97-7c959eda45b1"]
}, Open  ]],
Cell[382135, 8892, 169, 4, 24, "Text",ExpressionUUID->"a4666d90-bec8-4a86-8ac4-11215f1ab03f"],
Cell[382307, 8898, 826, 23, 70, "Input",ExpressionUUID->"311190ac-b52e-461d-a713-fab1ac1cf549",
 InitializationCell->True],
Cell[383136, 8923, 656, 16, 58, "Text",ExpressionUUID->"e31aa5ef-ac28-4150-969a-d680d7f02061"],
Cell[CellGroupData[{
Cell[383817, 8943, 151, 3, 31, "Input",ExpressionUUID->"4e3f0e29-8fdf-4734-878a-1211bed52659"],
Cell[383971, 8948, 3079, 62, 225, "Output",ExpressionUUID->"589b5cc8-aef8-4788-904f-4b2e86b73a36"]
}, Open  ]],
Cell[CellGroupData[{
Cell[387087, 9015, 191, 4, 31, "Input",ExpressionUUID->"1174cf3e-9393-450d-8f7b-eb0af1e230a9"],
Cell[387281, 9021, 6435, 123, 166, "Output",ExpressionUUID->"f3d68074-8dcb-4726-b1cb-8426c9a3c437"]
}, Open  ]],
Cell[CellGroupData[{
Cell[393753, 9149, 222, 6, 31, "Input",ExpressionUUID->"3e9eb162-a072-40d5-8abb-5182b158eff1"],
Cell[393978, 9157, 6434, 123, 173, "Output",ExpressionUUID->"f6711f2d-3732-4f8f-9280-36109d0ebba5"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[400461, 9286, 160, 5, 35, "Subsection",ExpressionUUID->"769a94e9-bbba-4a35-bd70-69f0e14577e8",
 CellTags->"Section3c"],
Cell[400624, 9293, 328, 7, 36, "Text",ExpressionUUID->"304833a6-41fd-4f12-a805-3acc29f00818"],
Cell[400955, 9302, 935, 24, 56, "Text",ExpressionUUID->"5f739b7e-6dab-4634-9b25-a2af9d1c4333"],
Cell[CellGroupData[{
Cell[401915, 9330, 205, 5, 31, "Input",ExpressionUUID->"f7156f2d-df3d-4fd8-9550-972b6040160d",
 InitializationCell->True],
Cell[402123, 9337, 3079, 62, 225, "Output",ExpressionUUID->"1ae25b6b-5b65-483b-83c6-ca502e8238d4"]
}, Open  ]],
Cell[405217, 9402, 315, 8, 24, "Text",ExpressionUUID->"7154f27e-6bee-452e-a1b0-e71bea4d372f"],
Cell[CellGroupData[{
Cell[405557, 9414, 148, 3, 31, "Input",ExpressionUUID->"1c9f4790-01ea-47ec-9bee-38adea31a225"],
Cell[405708, 9419, 3186, 84, 195, "Output",ExpressionUUID->"cc7349f2-8d08-4d4b-852a-7041eed194f5"]
}, Open  ]],
Cell[408909, 9506, 1361, 33, 86, "Text",ExpressionUUID->"78568ad3-cb54-4c71-a2a0-7e93b132c965"],
Cell[CellGroupData[{
Cell[410295, 9543, 195, 5, 31, "Input",ExpressionUUID->"c69afc11-5800-466f-8d2d-6f43a0754734"],
Cell[410493, 9550, 1097, 25, 126, "Output",ExpressionUUID->"70648683-571b-4f74-a1a9-127cbc4859e8"]
}, Open  ]],
Cell[411605, 9578, 3496, 98, 125, "Text",ExpressionUUID->"c3b45408-9a7a-44db-9b5f-b1f29832b4a9"],
Cell[415104, 9678, 92, 0, 20, "Text",ExpressionUUID->"9c194bc2-567b-454c-9951-fcb93de71cbe"],
Cell[415199, 9680, 748, 20, 90, "Input",ExpressionUUID->"ecaad778-91d6-43d2-ae27-a7dd8be3b573",
 InitializationCell->True],
Cell[415950, 9702, 1594, 40, 88, "Text",ExpressionUUID->"72f21e5e-215a-4eb5-a9a6-4f520d874bb1"],
Cell[CellGroupData[{
Cell[417569, 9746, 156, 3, 31, "Input",ExpressionUUID->"6bec72e9-1ce5-482d-8178-7585bf9d9953"],
Cell[417728, 9751, 114, 2, 31, "Output",ExpressionUUID->"2082e86b-0b1b-46ea-8f0b-eeea4970e228"]
}, Open  ]],
Cell[417857, 9756, 230, 3, 35, "Text",ExpressionUUID->"dae28899-202c-4cc8-a791-886369ba8716"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[418136, 9765, 122, 1, 55, "Section",ExpressionUUID->"9a29cc1b-62fb-410d-a881-5501b026facc",
 CellTags->"Section4"],
Cell[418261, 9768, 241, 4, 35, "Text",ExpressionUUID->"4bf168cb-bf8c-447f-a8bf-348d49bc2fec"],
Cell[CellGroupData[{
Cell[418527, 9776, 143, 2, 32, "Subsection",ExpressionUUID->"26fb0ee2-9529-4093-b2c1-1519160f15c0",
 PageBreakWithin->False,
 CellTags->"Section4a"],
Cell[418673, 9780, 367, 8, 35, "Text",ExpressionUUID->"2b0929f4-0209-4990-b050-54f4ad07106d",
 PageBreakAbove->False,
 PageBreakWithin->False],
Cell[419043, 9790, 814, 17, 88, "Text",ExpressionUUID->"8da6b07a-3563-40e0-b979-f38fd925f8fe"],
Cell[419860, 9809, 165, 3, 20, "Text",ExpressionUUID->"4ddb2c4c-be3b-4a0b-ab2f-30986ba67f0a"],
Cell[420028, 9814, 836, 26, 89, "Input",ExpressionUUID->"74cefd8d-d8b8-4e8f-a49c-d4fc96e3a44b",
 InitializationCell->True],
Cell[420867, 9842, 382, 7, 39, "Text",ExpressionUUID->"73a21bb8-0426-45e0-84b3-c65a6c8ed6fb"],
Cell[421252, 9851, 193, 3, 20, "Text",ExpressionUUID->"ff91596d-3949-4c47-a9b8-b7fb7b1ea75d"],
Cell[CellGroupData[{
Cell[421470, 9858, 200, 5, 31, "Input",ExpressionUUID->"895bfda0-1e92-4693-8714-3a717b023487"],
Cell[421673, 9865, 756, 22, 92, "Output",ExpressionUUID->"05ecdb24-13c7-4372-ad45-09c514ca0dab"]
}, Open  ]],
Cell[422444, 9890, 320, 6, 39, "Text",ExpressionUUID->"6e4cf2aa-c80c-4a35-8d4d-cc2f46db5793"]
}, Open  ]],
Cell[CellGroupData[{
Cell[422801, 9901, 118, 1, 32, "Subsection",ExpressionUUID->"eae04551-00ea-438d-b05a-f16cd0be7181",
 CellTags->"Section4b"],
Cell[422922, 9904, 858, 24, 35, "Text",ExpressionUUID->"8411b9d5-e240-4d97-b771-c38fe9ec5db7"],
Cell[423783, 9930, 1266, 38, 108, "Input",ExpressionUUID->"8e7e190c-216c-4f99-9e65-3d74630324ed",
 InitializationCell->True],
Cell[425052, 9970, 428, 7, 39, "Text",ExpressionUUID->"55c76988-ffd9-4c62-a571-d21adfbf86d0"],
Cell[CellGroupData[{
Cell[425505, 9981, 200, 5, 31, "Input",ExpressionUUID->"3121a0e3-4771-4fe8-b077-7f8076a2ceb4"],
Cell[425708, 9988, 756, 22, 92, "Output",ExpressionUUID->"fc0eb056-1f3c-41c3-a1b6-118265925ff3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[426501, 10015, 192, 5, 31, "Input",ExpressionUUID->"78de3355-9986-4532-b1ec-bdcb781ce20a"],
Cell[426696, 10022, 870, 24, 126, "Output",ExpressionUUID->"a6cdae3c-86f4-4e1d-90c3-84021b8cd1ef"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[427615, 10052, 119, 1, 32, "Subsection",ExpressionUUID->"37768dbb-1383-4f99-b01e-5f4141a2b984",
 CellTags->"Section4c"],
Cell[427737, 10055, 550, 8, 65, "Text",ExpressionUUID->"a789748f-612a-4f9d-8495-31ef72d98b1b"],
Cell[CellGroupData[{
Cell[428312, 10067, 109, 0, 18, "Subsubsection",ExpressionUUID->"445ec238-c952-409f-ba46-9bf2785bea5d"],
Cell[428424, 10069, 695, 14, 51, "Text",ExpressionUUID->"9c1794e2-6a2b-4ac9-9326-80a9d2da9230"],
Cell[CellGroupData[{
Cell[429144, 10087, 165, 4, 31, "Input",ExpressionUUID->"e078bbb2-1097-4a76-a25d-511e1f0111dc"],
Cell[429312, 10093, 111, 2, 31, "Output",ExpressionUUID->"9203fdad-7689-4f9f-a2cd-d6dbbf1e3433"]
}, Open  ]],
Cell[CellGroupData[{
Cell[429460, 10100, 165, 4, 31, "Input",ExpressionUUID->"87de6e15-eb62-4dfa-8318-dcb3627f1c65"],
Cell[429628, 10106, 111, 2, 31, "Output",ExpressionUUID->"c6f13b78-4b18-448b-bdc2-63ce3e99dbfa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[429776, 10113, 164, 4, 31, "Input",ExpressionUUID->"8ba84933-3eb2-467b-9f0d-72a0990bcea8"],
Cell[429943, 10119, 111, 2, 31, "Output",ExpressionUUID->"4ddb93c6-6852-441b-bbeb-025819926d63"]
}, Open  ]],
Cell[CellGroupData[{
Cell[430091, 10126, 164, 4, 31, "Input",ExpressionUUID->"95999ed7-0bf1-4916-8159-4814e728a25a"],
Cell[430258, 10132, 111, 2, 31, "Output",ExpressionUUID->"cc9d20e0-91e2-4020-8a62-31dd4ed53760"]
}, Open  ]],
Cell[430384, 10137, 1443, 43, 54, "Text",ExpressionUUID->"9db74818-dbc9-4c9c-8c10-a0ac8f6824ae"],
Cell[CellGroupData[{
Cell[431852, 10184, 402, 12, 51, "Input",ExpressionUUID->"e555cb50-6473-4dbe-9b28-201dedf66126",
 InitializationCell->True],
Cell[432257, 10198, 682, 20, 58, "Output",ExpressionUUID->"eeb4cf63-abcd-4346-8bbd-91aefc3b5fd6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[432976, 10223, 402, 12, 51, "Input",ExpressionUUID->"3770cf3d-ca96-4d54-a2fc-58b072528acc",
 InitializationCell->True],
Cell[433381, 10237, 682, 20, 58, "Output",ExpressionUUID->"4a7734a9-0683-4581-a2d3-667460b7fa96"]
}, Open  ]],
Cell[CellGroupData[{
Cell[434100, 10262, 206, 5, 31, "Input",ExpressionUUID->"5a699d60-d797-4d48-a78c-aae281589fc3"],
Cell[434309, 10269, 682, 20, 58, "Output",ExpressionUUID->"12e24d06-d831-49ff-8dfb-5f5f4c504e42"]
}, Open  ]],
Cell[435006, 10292, 539, 14, 35, "Text",ExpressionUUID->"2ce3bf66-3523-4a0a-ae34-3a57833d3d10"],
Cell[435548, 10308, 388, 13, 51, "Equation",ExpressionUUID->"c218ad88-330f-4e46-a40b-23ce1d2b4bff"],
Cell[435939, 10323, 637, 16, 39, "Text",ExpressionUUID->"3466a22b-924f-45b8-9dd7-c42ae7a4b81e"],
Cell[436579, 10341, 286, 8, 31, "Input",ExpressionUUID->"d927f860-0f27-42c9-97ea-f9650cf84803",
 InitializationCell->True],
Cell[436868, 10351, 3184, 83, 336, "Input",ExpressionUUID->"aa27c8bb-5c77-4d95-a283-6295a46f1e5b",
 InitializationCell->True],
Cell[440055, 10436, 85, 0, 20, "Text",ExpressionUUID->"f78b39f4-2f4a-49e8-814a-d4aa5ebdcab1"],
Cell[CellGroupData[{
Cell[440165, 10440, 504, 15, 51, "Input",ExpressionUUID->"e169cc43-6cdc-4772-9055-30a50cd4fe76",
 InitializationCell->True],
Cell[440672, 10457, 714, 21, 74, "Output",ExpressionUUID->"39a591f3-3e3c-4f18-bd2d-5da5e10c9578"]
}, Open  ]],
Cell[CellGroupData[{
Cell[441423, 10483, 504, 15, 51, "Input",ExpressionUUID->"eaab734c-f334-4c3d-a079-3ea1c26e0c73",
 InitializationCell->True],
Cell[441930, 10500, 714, 21, 74, "Output",ExpressionUUID->"10949aff-887f-47f5-880a-3b8c64f881ab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[442681, 10526, 221, 6, 31, "Input",ExpressionUUID->"77b763e3-9a35-4890-8c74-1e5a45065c21"],
Cell[442905, 10534, 714, 21, 74, "Output",ExpressionUUID->"919cd6f2-5b13-433c-8d15-71b03a2752a1"]
}, Open  ]],
Cell[443634, 10558, 692, 16, 53, "Text",ExpressionUUID->"84b8c45d-2b56-4907-ae31-27ed853cba35"],
Cell[444329, 10576, 1026, 29, 127, "Input",ExpressionUUID->"dae17823-fbe1-45ed-b910-81a98bd1ca20",
 InitializationCell->True],
Cell[445358, 10607, 215, 3, 20, "Text",ExpressionUUID->"007642e7-6626-474b-b5b8-df70e08a343f"],
Cell[445576, 10612, 295, 9, 60, "Equation",ExpressionUUID->"a1df3e3c-6953-4494-a781-c72c9dab22b4"],
Cell[445874, 10623, 93, 0, 20, "Text",ExpressionUUID->"27500386-7582-448f-984d-5c81e8a02af1"],
Cell[445970, 10625, 321, 10, 60, "Equation",ExpressionUUID->"5960a95c-e568-485d-8bfa-f03372e63d6a"],
Cell[CellGroupData[{
Cell[446316, 10639, 504, 15, 51, "Input",ExpressionUUID->"afe0e0dc-ef12-47ed-bf90-6776d7463787",
 InitializationCell->True],
Cell[446823, 10656, 714, 21, 74, "Output",ExpressionUUID->"c3360f98-81a2-49ad-980d-c98ec13cdae3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[447574, 10682, 196, 5, 31, "Input",ExpressionUUID->"d2190130-c76f-47d2-8116-e2aa97d2d468"],
Cell[447773, 10689, 714, 21, 74, "Output",ExpressionUUID->"edf61dbd-0232-4e51-9aae-084cf3a12acf"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[448536, 10716, 117, 0, 18, "Subsubsection",ExpressionUUID->"3a97f3ad-1bba-4275-b232-2b354c1163b9"],
Cell[448656, 10718, 227, 3, 20, "Text",ExpressionUUID->"104883a7-a1ad-44be-8883-50172b16b749"],
Cell[448886, 10723, 2003, 52, 222, "Input",ExpressionUUID->"a81e8074-0414-4dad-9b98-94063f93c3bf",
 InitializationCell->True],
Cell[450892, 10777, 160, 3, 20, "Text",ExpressionUUID->"c93d5a08-1a68-488f-9149-4d386e53c2bb"],
Cell[CellGroupData[{
Cell[451077, 10784, 184, 4, 31, "Input",ExpressionUUID->"480462b8-5d37-4271-9149-43c4fe972369"],
Cell[451264, 10790, 714, 21, 74, "Output",ExpressionUUID->"8c046dbb-40dc-420b-86cc-f9512a697e4e"]
}, Open  ]],
Cell[451993, 10814, 924, 18, 81, "Text",ExpressionUUID->"b17be13a-395f-4ecb-b271-6635854a728d"],
Cell[CellGroupData[{
Cell[452942, 10836, 955, 26, 70, "Input",ExpressionUUID->"a7db8350-3bc4-4f17-b6b6-94966cfeb41b",
 InitializationCell->True],
Cell[453900, 10864, 870, 24, 126, "Output",ExpressionUUID->"6c1b1ee7-14e4-4d4b-9703-0c21994f8586"]
}, Open  ]],
Cell[CellGroupData[{
Cell[454807, 10893, 193, 4, 31, "Input",ExpressionUUID->"b26c1049-fd6c-42b5-beb2-4a8fbb553ed4"],
Cell[455003, 10899, 848, 24, 51, "Output",ExpressionUUID->"7e6a89c0-9046-4bca-94e4-4cc3d60b5ac8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[455888, 10928, 205, 5, 31, "Input",ExpressionUUID->"ad6bb264-c2a5-4aed-bb32-3768a0c079c5"],
Cell[456096, 10935, 848, 24, 51, "Output",ExpressionUUID->"3b1a62af-2d80-4fbb-b1af-dc223f1b1f29"]
}, Open  ]],
Cell[456959, 10962, 613, 10, 66, "Text",ExpressionUUID->"6161bfd4-c99d-4c1c-93df-ee210a2d60d8"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[457633, 10979, 122, 1, 55, "Section",ExpressionUUID->"e4ffae0a-5939-4b3a-901e-223c8a26cf55",
 CellTags->"Section5"],
Cell[457758, 10982, 731, 13, 84, "Text",ExpressionUUID->"f81ad6ac-904c-41f8-aea9-ac856de84dc4"],
Cell[458492, 10997, 357, 5, 35, "Text",ExpressionUUID->"49017c59-6dc2-4cd6-9ab8-a691fc29535a"],
Cell[458852, 11004, 382, 10, 31, "Input",ExpressionUUID->"19b8ca35-490d-4e08-9710-42809ad2e334",
 InitializationCell->True],
Cell[459237, 11016, 340, 8, 20, "Text",ExpressionUUID->"a73e103a-a6b2-419c-bf91-2588e4fbb06a"],
Cell[459580, 11026, 1095, 32, 127, "Input",ExpressionUUID->"31c752a3-3aed-457f-a447-f509d72cde8d",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[460700, 11062, 200, 5, 31, "Input",ExpressionUUID->"acabc060-d556-474a-bfcd-c4f67e59da7a",
 InitializationCell->True],
Cell[460903, 11069, 1375, 46, 51, "Output",ExpressionUUID->"c457d09d-1088-42e1-be74-482acb962e95"]
}, Open  ]],
Cell[CellGroupData[{
Cell[462315, 11120, 154, 3, 31, "Input",ExpressionUUID->"e41c5060-651b-4c4d-bae4-a47eeee30abf"],
Cell[462472, 11125, 114, 2, 31, "Output",ExpressionUUID->"4b8525d6-24c7-4d88-959d-cbb2c1809d24"]
}, Open  ]],
Cell[CellGroupData[{
Cell[462623, 11132, 120, 1, 32, "Subsection",ExpressionUUID->"306c3e8b-1047-4cf7-a4db-36a809bc5df6",
 CellTags->"Section5a"],
Cell[462746, 11135, 2286, 61, 80, "Text",ExpressionUUID->"9d6e18df-b41c-4bf3-b617-0a95c4403807"],
Cell[465035, 11198, 1092, 26, 75, "Text",ExpressionUUID->"22636d39-f5a4-4d40-b056-da943a36f2cc"],
Cell[CellGroupData[{
Cell[466152, 11228, 219, 6, 31, "Input",ExpressionUUID->"530a99db-a06d-47a0-870b-980c03bfebbe"],
Cell[466374, 11236, 254, 8, 31, "Output",ExpressionUUID->"b119c0f4-3426-444a-bb95-f785880074e6"]
}, Open  ]],
Cell[466643, 11247, 558, 10, 51, "Text",ExpressionUUID->"61a39588-23d5-4020-8743-38870eb764a0"],
Cell[CellGroupData[{
Cell[467226, 11261, 252, 7, 31, "Input",ExpressionUUID->"1bd6d87f-0f20-44ae-a365-4519029bc579"],
Cell[467481, 11270, 156, 4, 31, "Output",ExpressionUUID->"4599eeb7-fc43-4e03-99a9-4922bd216ea4"]
}, Open  ]],
Cell[467652, 11277, 538, 12, 37, "Text",ExpressionUUID->"e63fb6b9-dc2b-4bcf-8966-4167d3c37538"],
Cell[468193, 11291, 587, 17, 70, "Input",ExpressionUUID->"20ec96af-991e-43d8-8f62-ef837d2b3353",
 InitializationCell->True],
Cell[468783, 11310, 375, 9, 20, "Text",ExpressionUUID->"cfb55c6d-5046-4727-a6d3-37436b481d39"],
Cell[CellGroupData[{
Cell[469183, 11323, 212, 5, 31, "Input",ExpressionUUID->"24dc8149-8f39-4d29-b5fd-5dbf2e6d5e44"],
Cell[469398, 11330, 217, 6, 31, "Output",ExpressionUUID->"b3242a38-4ce6-4dfe-8f4b-9cc410b3bb9f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[469664, 11342, 141, 1, 32, "Subsection",ExpressionUUID->"6fa392b5-bfed-407c-af16-f28728d14761",
 CellTags->"Section5b"],
Cell[469808, 11345, 851, 19, 50, "Text",ExpressionUUID->"c009d416-1965-4491-bda3-0673cb34039e"],
Cell[470662, 11366, 1163, 32, 55, "Text",ExpressionUUID->"0db7d28b-52fc-460a-a835-b232ee23e760"],
Cell[CellGroupData[{
Cell[471850, 11402, 214, 6, 31, "Input",ExpressionUUID->"cf7f908a-e338-404c-a1d7-aaffff1d5976"],
Cell[472067, 11410, 372, 12, 31, "Output",ExpressionUUID->"de487773-c303-4302-a232-877bb8e78e33"]
}, Open  ]],
Cell[472454, 11425, 851, 23, 37, "Text",ExpressionUUID->"e732ec1e-34a9-4d23-85e1-e57ce7b4bf87"],
Cell[CellGroupData[{
Cell[473330, 11452, 251, 7, 31, "Input",ExpressionUUID->"1d3d8f64-e1c2-4482-8482-935573a7b4a4"],
Cell[473584, 11461, 2698, 95, 89, "Output",ExpressionUUID->"37505762-f479-468c-888e-d7e6ea39ed16"]
}, Open  ]],
Cell[476297, 11559, 623, 15, 37, "Text",ExpressionUUID->"5221cb76-b032-47a1-97a9-3ac40d414944"],
Cell[CellGroupData[{
Cell[476945, 11578, 287, 9, 31, "Input",ExpressionUUID->"4af1584b-df2d-4f56-ae14-6811b291be2f"],
Cell[477235, 11589, 3056, 115, 285, "Output",ExpressionUUID->"81d6b2bc-7be1-4e16-ace7-888bd1f25816"]
}, Open  ]],
Cell[480306, 11707, 891, 22, 55, "Text",ExpressionUUID->"10d9f072-c573-41be-97a7-a87234081a73"],
Cell[CellGroupData[{
Cell[481222, 11733, 367, 11, 31, "Input",ExpressionUUID->"ed1956bb-5bb4-49f2-a527-b6b3d1ffc8c6"],
Cell[481592, 11746, 1002, 36, 97, "Output",ExpressionUUID->"69d3b2d1-3483-41d1-9104-993bc25b01dd"]
}, Open  ]],
Cell[482609, 11785, 290, 5, 39, "Text",ExpressionUUID->"76a21b85-3f0f-4cb1-8d02-f57e2b499964"],
Cell[482902, 11792, 386, 11, 31, "Input",ExpressionUUID->"77292d5d-5310-4bcc-ae80-2bfac967969f",
 InitializationCell->True],
Cell[483291, 11805, 310, 8, 20, "Text",ExpressionUUID->"94fc3497-e1e5-4509-91a9-e378124ea674"],
Cell[CellGroupData[{
Cell[483626, 11817, 251, 6, 31, "Input",ExpressionUUID->"4e35a1e6-daff-4cb5-8fe1-72258d3edbbd"],
Cell[483880, 11825, 112, 2, 31, "Output",ExpressionUUID->"102b178c-3c2f-4279-901a-61ff3d48210a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[484041, 11833, 108, 1, 32, "Subsection",ExpressionUUID->"67704b38-1a32-4dc8-9a21-194e3e34ff7b",
 CellTags->"Section5c"],
Cell[484152, 11836, 335, 7, 20, "Text",ExpressionUUID->"abaf785e-54f9-42b3-b4f0-917c6dda69be"],
Cell[484490, 11845, 803, 12, 80, "Text",ExpressionUUID->"205f8235-5c70-43f6-9088-3048fc0cee79"],
Cell[CellGroupData[{
Cell[485318, 11861, 364, 10, 16, "Item1Numbered",ExpressionUUID->"62afb484-4353-4831-9c70-09a2fbd378ff"],
Cell[485685, 11873, 756, 19, 29, "Item1Numbered",ExpressionUUID->"217c92c8-344a-4961-b8c0-c078b1a022f8"],
Cell[486444, 11894, 2394, 74, 42, "Item1Numbered",ExpressionUUID->"acce78c1-1d4d-4a56-a010-69f08916f4b2"]
}, Open  ]],
Cell[488853, 11971, 344, 10, 43, "Text",ExpressionUUID->"005b8b4b-e801-4623-86a0-85141366ba92"],
Cell[489200, 11983, 421, 11, 51, "Input",ExpressionUUID->"205ab2af-bceb-48e0-8bd5-3b4b2bcc5d92",
 InitializationCell->True],
Cell[489624, 11996, 621, 13, 43, "Text",ExpressionUUID->"39e2388b-7f11-4a48-8f60-911ad7dd9af5"],
Cell[CellGroupData[{
Cell[490270, 12013, 193, 5, 31, "Input",ExpressionUUID->"2eadb702-e36c-45a2-9bcb-9a10560734a9"],
Cell[490466, 12020, 870, 24, 126, "Output",ExpressionUUID->"f67dfb21-770c-4072-81eb-4669e6fe69f5"]
}, Open  ]],
Cell[491351, 12047, 361, 5, 35, "Text",ExpressionUUID->"7e7fd163-78c1-486e-bc4a-f43431c9a37d"],
Cell[CellGroupData[{
Cell[491737, 12056, 270, 7, 31, "Input",ExpressionUUID->"fe026007-c06e-4057-8740-34843129087b",
 InitializationCell->True],
Cell[492010, 12065, 2230, 74, 89, "Output",ExpressionUUID->"83df855c-30b8-4eed-af14-3e64489d2534"]
}, Open  ]],
Cell[CellGroupData[{
Cell[494277, 12144, 200, 5, 31, "Input",ExpressionUUID->"25d2b8be-0e18-4e60-8683-93c94627827d"],
Cell[494480, 12151, 2331, 52, 312, "Output",ExpressionUUID->"d123ce33-9e36-44d5-8304-34591ea4303a"]
}, Open  ]],
Cell[496826, 12206, 384, 6, 54, "Text",ExpressionUUID->"2f1ce9a1-6ae7-44df-ba7c-d7216302c0c2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[497259, 12218, 118, 1, 55, "Section",ExpressionUUID->"7fb3821e-5dea-44fa-b3f6-8ce949e15a03",
 CellTags->"Section6"],
Cell[497380, 12221, 249, 4, 35, "Text",ExpressionUUID->"ae49ce27-097f-4797-bc69-62e5559e0614"],
Cell[CellGroupData[{
Cell[497654, 12229, 128, 1, 32, "Subsection",ExpressionUUID->"f6628a7b-d6f4-406d-86ff-05f366b99374",
 CellTags->"Section6a"],
Cell[497785, 12232, 195, 3, 20, "Text",ExpressionUUID->"2c35d41d-36f8-47b8-848c-d3430b0a4e7a"],
Cell[497983, 12237, 453, 7, 54, "Text",ExpressionUUID->"0d0ac398-37b3-4e31-878e-2b7a39dd48d6"],
Cell[498439, 12246, 387, 10, 31, "Input",ExpressionUUID->"95e4a138-4309-482a-a381-fe7f9745d389",
 InitializationCell->True],
Cell[498829, 12258, 439, 9, 43, "Text",ExpressionUUID->"83f900f6-d1e6-43ed-a84b-755fee20421f"],
Cell[CellGroupData[{
Cell[499293, 12271, 152, 3, 31, "Input",ExpressionUUID->"b5859a59-7933-41fd-9207-597ddd9e6bdb"],
Cell[499448, 12276, 114, 2, 31, "Output",ExpressionUUID->"87a7d444-9234-440b-bc18-bb57c4c7e5b2"]
}, Open  ]],
Cell[499577, 12281, 403, 7, 39, "Text",ExpressionUUID->"6e5bb7ec-90bc-4765-b5aa-e72e61264fc3"],
Cell[CellGroupData[{
Cell[500005, 12292, 159, 3, 31, "Input",ExpressionUUID->"ac1bc78d-8e6a-40ac-b71c-10bb179798a6"],
Cell[500167, 12297, 114, 2, 31, "Output",ExpressionUUID->"6f6abfd9-58ba-4cf1-9334-2b200fd9def8"]
}, Open  ]],
Cell[500296, 12302, 204, 4, 24, "Text",ExpressionUUID->"06a7e1fb-e8bc-4893-a965-6254d65d6266"],
Cell[500503, 12308, 629, 11, 73, "Text",ExpressionUUID->"98741f42-4e78-421e-8bf4-64176e97e92e"],
Cell[501135, 12321, 287, 7, 31, "Input",ExpressionUUID->"6c456230-9153-4606-999b-21e25c5d5e3c",
 InitializationCell->True],
Cell[501425, 12330, 273, 6, 21, "Text",ExpressionUUID->"2a74489b-5866-4426-b738-948f63efa930"],
Cell[CellGroupData[{
Cell[501723, 12340, 151, 3, 31, "Input",ExpressionUUID->"d2720ebe-9182-4e22-8f3f-f6eecd24a6f9"],
Cell[501877, 12345, 672, 22, 31, "Output",ExpressionUUID->"2ea199ca-ebf6-467c-98d4-d5996e190a6f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[502586, 12372, 191, 4, 31, "Input",ExpressionUUID->"e85e8401-d35a-4cc2-9aef-476089cb29fa"],
Cell[502780, 12378, 114, 2, 31, "Output",ExpressionUUID->"02dba576-d8cf-4cf6-abbf-09077448dfee"]
}, Open  ]],
Cell[502909, 12383, 209, 3, 20, "Text",ExpressionUUID->"1c048347-4778-4b33-b399-95bcb118d4a0"],
Cell[503121, 12388, 1793, 48, 89, "Input",ExpressionUUID->"159bcf9e-f87f-41bc-b95d-eacacaed4158",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[504939, 12440, 153, 3, 31, "Input",ExpressionUUID->"f33b95fe-6af4-4ddc-af1e-7cb77ed8b3ec"],
Cell[505095, 12445, 114, 2, 31, "Output",ExpressionUUID->"47064216-7c19-48ee-b5a3-fa725008fddf"]
}, Open  ]],
Cell[505224, 12450, 1951, 52, 89, "Input",ExpressionUUID->"b4e71cea-e5f1-4f6e-b7c3-fe73810f1a4f",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[507200, 12506, 153, 3, 31, "Input",ExpressionUUID->"c9609f58-b198-4e55-9f64-330e5a3752fb"],
Cell[507356, 12511, 114, 2, 31, "Output",ExpressionUUID->"0d3fb777-8117-428a-ad74-9cab15ec6e14"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[507519, 12519, 115, 1, 32, "Subsection",ExpressionUUID->"2430efd8-aa3b-4510-b451-a53f634376d3",
 CellTags->"Section6b"],
Cell[507637, 12522, 752, 12, 80, "Text",ExpressionUUID->"6a98bfb0-687e-4132-9be6-648142279ba0"],
Cell[508392, 12536, 1007, 25, 56, "Text",ExpressionUUID->"546857c1-8405-4ba0-bf59-845403f0cbf5"],
Cell[CellGroupData[{
Cell[509424, 12565, 173, 4, 31, "Input",ExpressionUUID->"efbf96b2-c58b-4781-a549-046f06856c26"],
Cell[509600, 12571, 10652, 176, 263, "Output",ExpressionUUID->"b341d9d3-b154-4feb-ba04-bfdf2c10fb44"]
}, Open  ]],
Cell[520267, 12750, 521, 13, 40, "Text",ExpressionUUID->"29660cf8-ae42-4039-bf51-5a22ec4b7cf2"],
Cell[CellGroupData[{
Cell[520813, 12767, 238, 6, 31, "Input",ExpressionUUID->"2939671d-4293-42b0-84b4-8867583b4df5"],
Cell[521054, 12775, 10795, 179, 240, "Output",ExpressionUUID->"00c04682-10e2-4b60-a100-2cf889d79294"]
}, Open  ]],
Cell[531864, 12957, 666, 16, 37, "Text",ExpressionUUID->"25ab8dc1-9241-40ff-87d2-6dc79026e037"],
Cell[CellGroupData[{
Cell[532555, 12977, 364, 8, 51, "Input",ExpressionUUID->"e2f61e6d-18b4-4085-aada-610954203f63"],
Cell[532922, 12987, 1929, 41, 447, "Output",ExpressionUUID->"341c236b-c9cf-46b9-a9e6-e9d179a4457c"]
}, Open  ]],
Cell[534866, 13031, 319, 5, 35, "Text",ExpressionUUID->"eb1bc8b1-8ea5-400d-9d25-b4b8ef7a33c8"],
Cell[CellGroupData[{
Cell[535210, 13040, 98, 0, 18, "Subsubsection",ExpressionUUID->"6b4526d5-1546-445b-8d60-2ddb2236ed79"],
Cell[535311, 13042, 263, 4, 35, "Text",ExpressionUUID->"9afea712-3e97-4430-a5a6-31a21ffe06b4"],
Cell[535577, 13048, 2753, 83, 50, "Text",ExpressionUUID->"2c3f6af7-e4c8-4619-a676-97f2029a9d24"],
Cell[538333, 13133, 474, 10, 35, "Text",ExpressionUUID->"3136ec74-dc8e-499a-9039-3d1d3f528660"],
Cell[538810, 13145, 752, 24, 26, "Equation",ExpressionUUID->"6e71e0c5-8c95-45f7-a50d-a4598add011d"],
Cell[539565, 13171, 104, 0, 20, "Text",ExpressionUUID->"754e99a5-c614-4bdd-87ab-ea5311cdf153"],
Cell[539672, 13173, 325, 10, 26, "Equation",ExpressionUUID->"353c47b3-90cc-4498-b44d-f04aadff885f"],
Cell[540000, 13185, 954, 24, 50, "Text",ExpressionUUID->"94cc7534-e057-4068-9e50-e174ade43612"],
Cell[540957, 13211, 370, 5, 50, "Text",ExpressionUUID->"27b5d273-a8ec-4c26-ac10-81a0bf588376"],
Cell[541330, 13218, 150, 2, 20, "Text",ExpressionUUID->"f99e93c7-d67f-41e6-92b7-c9d7896a2ffb"],
Cell[541483, 13222, 1972, 56, 203, "Input",ExpressionUUID->"942d6d58-53e8-45c9-b0c1-931907936cf1",
 InitializationCell->True],
Cell[543458, 13280, 1612, 43, 65, "Text",ExpressionUUID->"8ebb356c-b1ba-485e-a675-9fc4a134dd51"],
Cell[545073, 13325, 749, 17, 55, "Text",ExpressionUUID->"46a6ced9-657e-4b16-a2fa-7c006709ec83"],
Cell[545825, 13344, 381, 11, 31, "Input",ExpressionUUID->"961c4086-e003-46c8-993f-3db44658967d",
 InitializationCell->True],
Cell[546209, 13357, 363, 8, 20, "Text",ExpressionUUID->"95529395-e08d-4444-bba0-d59ff9021d3b"],
Cell[CellGroupData[{
Cell[546597, 13369, 789, 25, 51, "Input",ExpressionUUID->"607a0407-2745-4c7c-92dd-2e6abe642396"],
Cell[547389, 13396, 313, 10, 31, "Output",ExpressionUUID->"207042f3-1a06-46de-9c90-34c4b348fb7c"]
}, Open  ]],
Cell[547717, 13409, 122, 0, 20, "Text",ExpressionUUID->"fd494174-41bb-498b-a8e1-19c835a01a73"],
Cell[CellGroupData[{
Cell[547864, 13413, 194, 4, 31, "Input",ExpressionUUID->"de09a3d4-204b-4f8e-8890-75eef29b959f"],
Cell[548061, 13419, 853, 28, 51, "Output",ExpressionUUID->"5a3af428-0e3c-4d04-9437-f8106d68f8ec"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[548963, 13453, 102, 0, 18, "Subsubsection",ExpressionUUID->"9062dc44-2259-4edd-8614-eeee14b550d9"],
Cell[549068, 13455, 350, 6, 39, "Text",ExpressionUUID->"f7406b9d-9f67-44e4-9cfb-51eda6d2665e"],
Cell[549421, 13463, 591, 18, 39, "Text",ExpressionUUID->"a6285590-42f3-4815-ad43-5d64fcfa645e"],
Cell[550015, 13483, 242, 5, 24, "Text",ExpressionUUID->"ec87f687-9933-47b1-a568-1b190892c80d"],
Cell[550260, 13490, 879, 24, 89, "Input",ExpressionUUID->"285ce2af-6f8e-4c01-979c-9bc97d2dbf7c",
 InitializationCell->True],
Cell[551142, 13516, 153, 2, 20, "Text",ExpressionUUID->"4a8ec4b2-213e-40ae-b8bc-44ee63cde5c9"],
Cell[CellGroupData[{
Cell[551320, 13522, 265, 7, 31, "Input",ExpressionUUID->"be906016-b3f7-4639-b2df-d44ee6f8aa5e"],
Cell[551588, 13531, 4087, 85, 311, "Output",ExpressionUUID->"d35c16d5-58bb-441b-9357-1ea6f50c3751"]
}, Open  ]],
Cell[555690, 13619, 169, 3, 20, "Text",ExpressionUUID->"418454dd-eae9-4a40-9f44-8545f7d51133"],
Cell[CellGroupData[{
Cell[555884, 13626, 152, 3, 31, "Input",ExpressionUUID->"e6c065bc-fb5c-4adc-ad11-89894f246a51"],
Cell[556039, 13631, 1692, 36, 447, "Output",ExpressionUUID->"98f086e8-0673-4ed7-ab2e-5c678f9e0e82"]
}, Open  ]],
Cell[CellGroupData[{
Cell[557768, 13672, 185, 4, 31, "Input",ExpressionUUID->"fe5a6857-87a8-4bc4-8d6c-78c4bfb4966c"],
Cell[557956, 13678, 2784, 59, 247, "Output",ExpressionUUID->"71be8a76-3ce6-49f4-8d2e-e4fb18d82b81"]
}, Open  ]],
Cell[CellGroupData[{
Cell[560777, 13742, 152, 3, 31, "Input",ExpressionUUID->"da2c2b44-fe25-44f5-a594-c6d09deb521b"],
Cell[560932, 13747, 1865, 39, 447, "Output",ExpressionUUID->"1d1380d2-c44d-4bd3-9890-3a0431cd1619"]
}, Open  ]],
Cell[562812, 13789, 886, 16, 82, "Text",ExpressionUUID->"a2295564-f6d0-4f4a-ab56-9f03e0bd5f51"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[563747, 13811, 129, 1, 32, "Subsection",ExpressionUUID->"202dc708-c76a-4370-a5f6-c915af9c5814",
 CellTags->"Section6c"],
Cell[563879, 13814, 181, 3, 20, "Text",ExpressionUUID->"bb4c2ea3-d6bb-46e4-b281-bb2fec04b048"],
Cell[564063, 13819, 1013, 26, 35, "Text",ExpressionUUID->"c650bebb-91d5-4ee7-a146-baf72e408957"],
Cell[565079, 13847, 1369, 37, 184, "Input",ExpressionUUID->"fc60ddf0-895c-48f3-aca7-bb48d49999b9",
 InitializationCell->True],
Cell[566451, 13886, 307, 7, 39, "Text",ExpressionUUID->"4eff99c7-abe1-4a74-8900-ffb26926669a"],
Cell[CellGroupData[{
Cell[566783, 13897, 151, 3, 31, "Input",ExpressionUUID->"058913a7-857d-4c32-b773-5eef571c2029"],
Cell[566937, 13902, 1634, 36, 374, "Output",ExpressionUUID->"1a486914-7f9b-4218-8c10-f5475591cbc4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[568608, 13943, 210, 5, 31, "Input",ExpressionUUID->"ed0a23ef-7c89-47d2-8d1c-0a3d9070bbb4"],
Cell[568821, 13950, 133, 3, 31, "Output",ExpressionUUID->"ea915f06-5b03-41ea-a186-54402110df30"]
}, Open  ]],
Cell[CellGroupData[{
Cell[568991, 13958, 235, 6, 31, "Input",ExpressionUUID->"47f7b911-80de-4b4f-86e4-b90e789cdcb5"],
Cell[569229, 13966, 166, 4, 31, "Output",ExpressionUUID->"1017ce57-9357-4c85-80e9-3d4995c7f4c2"]
}, Open  ]],
Cell[569410, 13973, 182, 3, 20, "Text",ExpressionUUID->"96ce9bfe-92fb-4bfd-a595-6e85ac99c65e"],
Cell[569595, 13978, 381, 11, 31, "Input",ExpressionUUID->"ff92e81f-c904-4599-9e91-a9872a3121c3",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[570001, 13993, 210, 5, 31, "Input",ExpressionUUID->"5bedecef-a12d-4ac2-84ca-c28e2bdf844f"],
Cell[570214, 14000, 166, 4, 31, "Output",ExpressionUUID->"70b41333-97e1-475b-b1f9-77a74776aba2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[570429, 14010, 118, 1, 32, "Subsection",ExpressionUUID->"df01284f-122e-4aaf-ab9f-0c80645d32f0",
 CellTags->"Section6d"],
Cell[570550, 14013, 404, 8, 36, "Text",ExpressionUUID->"7e1e6f0b-f3d1-40e1-bbec-86db9697201c"],
Cell[570957, 14023, 363, 6, 39, "Text",ExpressionUUID->"dd2a936e-f7e0-49ec-a159-25c54c3789ad"],
Cell[571323, 14031, 1015, 28, 146, "Input",ExpressionUUID->"17d9ea0a-d9c1-4cff-8dcb-408bcd0a9d14",
 InitializationCell->True],
Cell[572341, 14061, 543, 16, 24, "Text",ExpressionUUID->"cf6c256a-1c57-494e-9102-9ffbeb493d12"],
Cell[CellGroupData[{
Cell[572909, 14081, 242, 6, 31, "Input",ExpressionUUID->"0e1596d5-42cf-4264-9255-3361cbae2892"],
Cell[573154, 14089, 114, 2, 31, "Output",ExpressionUUID->"9528e7ae-a397-42c3-8a8b-be42d5e3322b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[573305, 14096, 255, 7, 31, "Input",ExpressionUUID->"8595562c-f029-47f0-9b48-171b9d38dd1f"],
Cell[573563, 14105, 115, 2, 31, "Output",ExpressionUUID->"a17611fd-c1a1-4505-a1a2-01df986acdab"]
}, Open  ]],
Cell[573693, 14110, 340, 6, 39, "Text",ExpressionUUID->"1d75ee79-f5b5-48c1-b9bd-71f34750c4f4"],
Cell[574036, 14118, 1005, 28, 127, "Input",ExpressionUUID->"df5394b7-bdd4-4be4-9b28-f59f2d7aeb76",
 InitializationCell->True],
Cell[575044, 14148, 334, 10, 24, "Text",ExpressionUUID->"31bf592a-d9a7-4a77-97e2-69cf6037d527"],
Cell[CellGroupData[{
Cell[575403, 14162, 222, 6, 31, "Input",ExpressionUUID->"44efae1f-755a-4b9c-bbca-6d093b12b75b"],
Cell[575628, 14170, 166, 4, 31, "Output",ExpressionUUID->"0aef393e-b74b-4d2d-a95e-9fd5a06fa0e8"]
}, Open  ]],
Cell[575809, 14177, 542, 10, 73, "Text",ExpressionUUID->"2043eb47-1a5a-43e1-9200-538db160485d"],
Cell[576354, 14189, 923, 26, 108, "Input",ExpressionUUID->"ff360ad1-6ea4-41c3-806a-719358a320da",
 InitializationCell->True],
Cell[577280, 14217, 757, 22, 39, "Text",ExpressionUUID->"61272c4a-c261-472d-a531-2ccb53ae10a4"],
Cell[CellGroupData[{
Cell[578062, 14243, 226, 6, 31, "Input",ExpressionUUID->"0a3075a3-e92b-49d0-887f-9537a4e82752"],
Cell[578291, 14251, 111, 2, 31, "Output",ExpressionUUID->"fba5eb3d-05b9-4afd-85c9-6e1df8558a3c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[578439, 14258, 236, 6, 31, "Input",ExpressionUUID->"49778d83-44da-43ef-9ff6-a7c5adb21bdd"],
Cell[578678, 14266, 111, 2, 31, "Output",ExpressionUUID->"e0559bcb-3a78-490a-9a14-094857efec08"]
}, Open  ]],
Cell[578804, 14271, 226, 6, 31, "Input",ExpressionUUID->"c57fdd8d-ec05-41ec-a8f9-0632b39f734f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[579067, 14282, 109, 1, 32, "Subsection",ExpressionUUID->"77bc9eab-d482-4e09-b7a4-33bfe26bf83a",
 CellTags->"Section6e"],
Cell[579179, 14285, 452, 7, 54, "Text",ExpressionUUID->"31e28334-cab4-45d6-9432-d9f1540d3ea0"],
Cell[579634, 14294, 450, 6, 50, "Text",ExpressionUUID->"404e0300-0232-4e1f-ae50-20f709d676c4"],
Cell[580087, 14302, 326, 9, 31, "Input",ExpressionUUID->"768098c4-f8e2-43b6-96c6-1345b4d53e42",
 InitializationCell->True],
Cell[580416, 14313, 810, 18, 100, "Text",ExpressionUUID->"93c965b4-5f98-41c8-8f24-3f8a3f8e8aca"],
Cell[581229, 14333, 308, 8, 31, "Input",ExpressionUUID->"74f0fed9-ab7b-44f6-9788-34c10bebd2eb",
 InitializationCell->True],
Cell[581540, 14343, 852, 24, 39, "Text",ExpressionUUID->"079bab32-8d70-4083-87a5-6d5cdb4916e3"],
Cell[582395, 14369, 1259, 35, 165, "Input",ExpressionUUID->"54a5c330-de72-4254-8823-56ce3c9c30ef",
 InitializationCell->True],
Cell[583657, 14406, 402, 9, 43, "Text",ExpressionUUID->"8ec85f19-fbeb-4a3b-9669-4b7569ad78ea"],
Cell[CellGroupData[{
Cell[584084, 14419, 187, 4, 31, "Input",ExpressionUUID->"f71fff69-7215-4e79-9d5d-7c35f8ca1336"],
Cell[584274, 14425, 115, 2, 31, "Output",ExpressionUUID->"b119612f-a0a4-497a-bcf3-f75b87fc46d8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[584426, 14432, 186, 4, 31, "Input",ExpressionUUID->"43f0efd2-6e3e-4316-9c9c-9a7f883e0ebd"],
Cell[584615, 14438, 114, 2, 31, "Output",ExpressionUUID->"371e61cb-8dba-4793-84b3-1bc56bfc4777"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[584790, 14447, 170, 3, 55, "Section",ExpressionUUID->"d8cb4622-7e7a-44f9-a6f7-dc077ab39394",
 CellTags->"Solutions"],
Cell[CellGroupData[{
Cell[584985, 14454, 128, 2, 32, "Subsection",ExpressionUUID->"ef73e59b-a955-4e30-9ebb-5712564ad40f",
 CellTags->"SolutionsCP15"],
Cell[585116, 14458, 193, 3, 42, "Problem",ExpressionUUID->"5a9bc35f-4830-4d06-afae-604968a4eadd"],
Cell[585312, 14463, 252, 5, 20, "Text",ExpressionUUID->"86b40b8e-ec91-4306-9bf5-ce7f937cabba"],
Cell[585567, 14470, 908, 22, 54, "Text",ExpressionUUID->"87399064-1ba6-4f7c-af0c-0944b15d7719"],
Cell[586478, 14494, 1311, 34, 203, "Input",ExpressionUUID->"1c54c142-9891-4da6-b7d2-2184b89f8a30",
 InitializationCell->True],
Cell[587792, 14530, 147, 4, 24, "Text",ExpressionUUID->"b3dcbcfd-f38f-4555-b063-80acf63e6633"],
Cell[CellGroupData[{
Cell[587964, 14538, 155, 3, 31, "Input",ExpressionUUID->"029de1d5-45a9-4f47-b060-c49e78b7a380"],
Cell[588122, 14543, 266, 5, 31, "Output",ExpressionUUID->"d06e0d8d-06bf-4de9-9693-b78b74bfc2c9"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[588437, 14554, 138, 2, 32, "Subsection",ExpressionUUID->"acba0d73-2f67-4fe1-867f-5f006496bf52",
 CellTags->"SolutionsCE1"],
Cell[588578, 14558, 146, 2, 42, "Problem",ExpressionUUID->"a3e36e92-ee2a-447f-9b3f-0a39ea15cc1f"],
Cell[588727, 14562, 855, 21, 51, "Text",ExpressionUUID->"8ef3b552-5a80-4649-b142-227d867f24e6"],
Cell[589585, 14585, 297, 8, 31, "Input",ExpressionUUID->"98c35010-5ee4-45c2-960f-4d46e7b963c4",
 InitializationCell->True],
Cell[589885, 14595, 346, 7, 36, "Text",ExpressionUUID->"b1da8d77-a977-4687-93b9-38f18c8c1c40"],
Cell[CellGroupData[{
Cell[590256, 14606, 226, 6, 31, "Input",ExpressionUUID->"619a3b42-dcf0-430a-b2d3-75f7fd4dfc91"],
Cell[590485, 14614, 3056, 115, 285, "Output",ExpressionUUID->"a8f1d4e4-15c7-4419-a3ce-812ab615a995"]
}, Open  ]],
Cell[593556, 14732, 562, 14, 42, "Text",ExpressionUUID->"322dfe80-0190-4c17-8684-6f44a1961be5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[594155, 14751, 138, 2, 32, "Subsection",ExpressionUUID->"b3548c04-de6e-469c-bb64-0c52af7f256b",
 CellTags->"SolutionsCE4"],
Cell[594296, 14755, 570, 15, 42, "Problem",ExpressionUUID->"51a84553-a16a-4e6b-9799-7487edf0dc06"],
Cell[594869, 14772, 409, 10, 35, "Text",ExpressionUUID->"efba4495-13c0-41d5-9aa0-8efd62d3dd7e"],
Cell[CellGroupData[{
Cell[595303, 14786, 1141, 29, 56, "Item1Numbered",ExpressionUUID->"8dfbf6f7-f2be-472c-94c7-c253828347cc"],
Cell[596447, 14817, 1146, 31, 52, "Item1Numbered",ExpressionUUID->"c0337e88-6f86-4824-ba2c-590b274f90e2"],
Cell[597596, 14850, 425, 8, 46, "Item1Numbered",ExpressionUUID->"f2298066-f48a-45c0-a1a1-298253b3965e"]
}, Open  ]],
Cell[598036, 14861, 104, 0, 20, "Text",ExpressionUUID->"3a3ddea1-953b-488b-957d-737a96cacc59"],
Cell[598143, 14863, 1340, 35, 165, "Input",ExpressionUUID->"8aaf11c4-d6c9-4bbb-9da1-06b68faf30b5",
 InitializationCell->True],
Cell[599486, 14900, 174, 3, 20, "Text",ExpressionUUID->"84b02a19-a91f-46ba-b220-cba0dfbbee6d"],
Cell[CellGroupData[{
Cell[599685, 14907, 151, 3, 31, "Input",ExpressionUUID->"d43d52b4-7c99-4c22-bb29-4472b6432604"],
Cell[599839, 14912, 113, 2, 31, "Output",ExpressionUUID->"baabd8f5-91d0-4397-b6d5-f5d0d7a8b83c"]
}, Open  ]],
Cell[599967, 14917, 488, 8, 54, "Text",ExpressionUUID->"47a7b7ea-1139-49aa-a377-d6e953e69226"]
}, Open  ]],
Cell[CellGroupData[{
Cell[600492, 14930, 138, 2, 32, "Subsection",ExpressionUUID->"4d4bd232-ab4a-4794-bc8a-301db7012641",
 CellTags->"SolutionsCE5"],
Cell[600633, 14934, 331, 5, 55, "Problem",ExpressionUUID->"6dfc9963-f268-45e2-ae34-eaaac52a989c"],
Cell[600967, 14941, 535, 11, 35, "Text",ExpressionUUID->"70970b63-413c-4135-a34d-01a98c7b416f"],
Cell[601505, 14954, 1326, 29, 87, "Text",ExpressionUUID->"0841f6b4-40be-40ae-9c0d-32e6aed6aab3"],
Cell[CellGroupData[{
Cell[602856, 14987, 432, 11, 51, "Input",ExpressionUUID->"c4a94bf0-cdd0-41eb-92a3-e800da0b9cab",
 InitializationCell->True],
Cell[603291, 15000, 1024, 26, 160, "Output",ExpressionUUID->"b056fbdd-79cb-42bc-8b51-24285a1078f7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[604352, 15031, 191, 5, 31, "Input",ExpressionUUID->"dd311133-7f3b-4acf-8af6-94aeeeb74bac"],
Cell[604546, 15038, 1024, 26, 160, "Output",ExpressionUUID->"1484fbb6-5488-483c-8897-8f94b49e310c"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[605631, 15071, 107, 1, 55, "Section",ExpressionUUID->"70a28eb3-2be5-490c-9238-bba3b748c76b",
 CellTags->"Exercises"],
Cell[CellGroupData[{
Cell[605763, 15076, 406, 9, 41, "Item1Exercise",ExpressionUUID->"0add5582-fb65-476e-872d-326ffbbc61c2"],
Cell[606172, 15087, 141, 1, 20, "Item1Exercise",ExpressionUUID->"9298dd36-9e12-4bf9-9847-432e95037f0b"]
}, Open  ]],
Cell[606328, 15091, 228, 5, 31, "myCode",ExpressionUUID->"00cbd785-6ea5-4bf7-8523-2c44dc531f65"],
Cell[606559, 15098, 1565, 49, 50, "ExerciseContinuation",ExpressionUUID->"1bafec91-2240-433f-bd0e-dc806f403bf1"],
Cell[608127, 15149, 193, 5, 31, "myCode",ExpressionUUID->"b94046bd-db3a-4c67-858e-7e1b1e5b0c68"],
Cell[CellGroupData[{
Cell[608345, 15158, 195, 3, 20, "Item1Exercise",ExpressionUUID->"c88b8dfd-a2c1-4a1f-9ece-3dd16368c0fc"],
Cell[608543, 15163, 312, 4, 33, "Item1Exercise",ExpressionUUID->"a4b31814-9527-4935-86f4-9609c1c709ab"],
Cell[608858, 15169, 225, 3, 33, "Item1Exercise",ExpressionUUID->"6132723a-367d-4084-a26e-6c2241c0b37f"],
Cell[609086, 15174, 268, 6, 21, "Item1Exercise",ExpressionUUID->"0e983e53-13b7-418e-bcdd-8fc97d09b9d5"],
Cell[CellGroupData[{
Cell[609379, 15184, 185, 3, 15, "Item2Exercise",ExpressionUUID->"40243f2d-96a0-49f9-a637-0381e9efe99b"],
Cell[609567, 15189, 153, 2, 15, "Item2Exercise",ExpressionUUID->"c68686e7-62c6-4530-bc87-b195aa986db8"],
Cell[609723, 15193, 142, 1, 15, "Item2Exercise",ExpressionUUID->"2983767b-8c41-49ea-99f0-abca4867e05c"]
}, Open  ]],
Cell[609880, 15197, 488, 12, 33, "Item1Exercise",ExpressionUUID->"77408f26-9719-403f-a25c-2ea8672d158a"],
Cell[610371, 15211, 292, 6, 33, "Item1Exercise",ExpressionUUID->"b3190026-3ccb-44c5-a703-6d19a8a34588"],
Cell[610666, 15219, 263, 4, 33, "Item1Exercise",ExpressionUUID->"6abd81d6-a403-4c10-9a0f-ef09a47de992"],
Cell[610932, 15225, 1509, 39, 46, "Item1Exercise",ExpressionUUID->"77a49a96-ab61-4595-8206-2c05a7917632"],
Cell[612444, 15266, 265, 4, 33, "Item1Exercise",ExpressionUUID->"1b4976dd-7491-499f-894b-f9fb46da35bc"],
Cell[612712, 15272, 880, 22, 46, "Item1Exercise",ExpressionUUID->"6e63f5f8-d3c9-4a40-95f9-da7b0c656ef2"],
Cell[613595, 15296, 164, 2, 20, "Item1Exercise",ExpressionUUID->"4bfb6606-9da0-4492-a16d-5eee0112d7c5"],
Cell[613762, 15300, 256, 4, 33, "Item1Exercise",ExpressionUUID->"ee194304-8c8d-4f04-a985-ab8383bdcb40"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

