(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    335344,       8963]
NotebookOptionsPosition[    258845,       7667]
NotebookOutlinePosition[    280605,       8108]
CellTagsIndexPosition[    279900,       8082]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Modeling Computation", "BookChapterTitle",
 CounterAssignments->{{
   "ChapterNumber", 
    13}},ExpressionUUID->"7a54527f-fe5b-4a34-b9b8-e9042f9373a3"],

Cell[CellGroupData[{

Cell["Introduction", "Section",ExpressionUUID->"bef9aa97-8d02-43d6-aa66-606277ef6e49"],

Cell[TextData[{
 "In this chapter, we will use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to study theoretical models of computation. We will see how to generate \
elements of a language from a type 2 phrase-structure grammar and how to \
implement finite-state machines with and without output. We will also examine \
the Wolfram Language\[CloseCurlyQuote]s support for regular expressions, and \
we will implement Turing machines."
}], "Text",ExpressionUUID->"5a19a7dc-6e4a-4a57-804a-435a0066430c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["13.1 Languages and Grammars", "Section",
 CellTags->"Section1",ExpressionUUID->"a7e7233a-6e3b-435e-867e-82e72942addf"],

Cell[TextData[{
 "We will write a function to generate elements of a language from a type 2 \
phrase-structure grammar. Recall that a type 2 grammar has productions only \
of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["w", "1"], "\[Rule]", 
    SubscriptBox["w", "2"]}], TraditionalForm]],ExpressionUUID->
  "466ce5eb-7270-4e20-ad33-6afd9db31369"],
 " with ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["w", "1"], TraditionalForm]],ExpressionUUID->
  "24970985-df08-4513-b5eb-0358c3bfef27"],
 " a single nonterminal symbol."
}], "Text",ExpressionUUID->"acfad756-4a15-465f-8b8d-08437653aa72"],

Cell[TextData[{
 "Our strategy for generating the language will be as follows. We initialize \
a list ",
 Cell[BoxData[
  FormBox["L", TraditionalForm]],ExpressionUUID->
  "94c98433-fbcf-413a-ab8b-f7b4288c14e5"],
 " to the empty list. In this list, we will store all words, that is, strings \
consisting only of terminal symbols. A list ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "1c3957d5-2bd6-44dc-ab5c-246d8bf97c29"],
 " is initialized to the list consisting of the starting symbol."
}], "Text",ExpressionUUID->"954e007b-384c-4a1a-8d18-89bb16d3f56b"],

Cell[TextData[{
 "We process an element of ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "e99b03a8-a9f7-46bd-bc7c-e6c85c5cf5aa"],
 " by removing it from the list and applying all possible productions to it. \
The results of the productions are either added to ",
 Cell[BoxData[
  FormBox["L", TraditionalForm]],ExpressionUUID->
  "9c6baefa-3d1a-4cc1-8e36-93508ebf06c7"],
 " if they consist solely of terminal symbols, or placed in ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "78154f42-eef1-446f-a4a8-8cdafab7fe67"],
 " to be processed further."
}], "Text",ExpressionUUID->"05ba3cd1-9693-4f73-8543-21371eb4df72"],

Cell[TextData[{
 "In order to prevent the time taken from becoming excessive, we will impose \
a time limit using the ",
 StyleBox[ButtonBox["TimeConstrained",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TimeConstrained"], "FunctionLink"],
 " function. This limit will be an argument to the function."
}], "Text",ExpressionUUID->"a3a2203f-4fb6-49d8-977e-2898e120f023"],

Cell[CellGroupData[{

Cell["Representation", "Subsection",
 CellTags->"Section1a",ExpressionUUID->"9a25a9b0-a8cd-4cb9-881c-7ef32117538f"],

Cell["\<\
We first need to determine how we will model the elements of the grammar in \
the Wolfram Language.\
\>", "Text",ExpressionUUID->"664b4b7b-8dca-4b34-8468-7cdf3cc88de8"],

Cell["\<\
We will generally represent terminal symbols as lower case letters stored as \
characters (strings). Nonterminal symbols will be upper case letters, also \
entered as strings. \
\>", "Text",ExpressionUUID->"31bcafee-c502-4448-9fa9-94dcbf6bbb92"],

Cell[TextData[{
 "Strings containing nonterminal symbols and words will be stored as strings. \
Productions will be stored in an ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 ". The keys will be the nonterminal symbols (recall that we are considering \
only type 2 grammars). The value associated to a nonterminal symbol will be \
the list of all products derivable from that symbol."
}], "Text",ExpressionUUID->"6ea12db7-7ac5-4203-ab14-1523dc796105"],

Cell[TextData[{
 "In Example 12 in the textbook, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"S", "\[Rule]", "AB"}], TraditionalForm]],ExpressionUUID->
  "7eb53829-1337-420d-a27a-c035d78674d9"],
 " is the only derivation from the starting symbol, so ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", "\"\<AB\>\"", "}"}], TraditionalForm]],ExpressionUUID->
  "7c1b2511-facc-47b1-81b7-c6eefa3a4676"],
 " will be the entry associated to ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "f532e1bf-396c-457a-8ebb-f029e91c2fb8"],
 " in the indexed variable. On the other hand, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"B", "\[Rule]", "Ba"}], TraditionalForm]],ExpressionUUID->
  "02d9c131-0ff8-4672-a06f-0be867bd6bf9"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"B", "\[Rule]", "Cb"}], TraditionalForm]],ExpressionUUID->
  "f08482d4-a01a-45f8-9b84-39d6e8b2a20a"],
 ", and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"B", "\[Rule]", "b"}], TraditionalForm]],ExpressionUUID->
  "a1f8c462-da9a-4e9c-a9be-723ff2a76b3d"],
 " are all productions from ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "802a8db5-3d6a-49a7-bbf0-6ff21af3cfb0"],
 ". Thus, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"\"\<Ba\>\"", ",", "\"\<Bc\>\"", ",", "\"\<b\>\""}], "}"}], 
   TraditionalForm]],ExpressionUUID->"55067468-9042-4476-9b85-5f93e8d7a4c3"],
 " would be the entry associated to ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "3d35540f-0bb5-4dde-8746-8f33a6948c94"],
 "."
}], "Text",ExpressionUUID->"b0620c48-9f92-48dd-be96-d693454b9c3c"],

Cell["Here are the productions for Example 12.", "Text",ExpressionUUID->"71b59257-2484-496f-8b07-5832cf727a2c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ex12productions", "=", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<S\>\"", "\[Rule]", 
     RowBox[{"{", "\"\<AB\>\"", "}"}]}], ",", 
    RowBox[{"\"\<A\>\"", "\[Rule]", 
     RowBox[{"{", "\"\<Ca\>\"", "}"}]}], ",", 
    RowBox[{"\"\<B\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<Ba\>\"", ",", "\"\<Cb\>\"", ",", "\"\<b\>\""}], "}"}]}], 
    ",", 
    RowBox[{"\"\<C\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<cb\>\"", ",", "\"\<b\>\""}], "}"}]}]}], "|>"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->"In[1]:=",ExpressionUUID->"22cfeafe-5dfa-4138-a612-e4a5a1df0adc"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"S\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"AB\"\>", "}"}]}], ",", 
   RowBox[{"\<\"A\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"Ca\"\>", "}"}]}], ",", 
   RowBox[{"\<\"B\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"Ba\"\>", ",", "\<\"Cb\"\>", ",", "\<\"b\"\>"}], "}"}]}], 
   ",", 
   RowBox[{"\<\"C\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"cb\"\>", ",", "\<\"b\"\>"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[1]=",ExpressionUUID->"62e2be56-0ad1-43c8-bc8e-2300beac7756"]
}, Open  ]],

Cell[TextData[{
 "Our function will require the following arguments: the set ",
 StyleBox["V", "Code"],
 " defining the vocabulary, the set ",
 StyleBox["T", "Code"],
 " of terminal symbols, the starting symbol ",
 StyleBox["S", "Code"],
 ", the association of productions ",
 StyleBox["P", "Code"],
 ", and the limit on the time, in seconds, ",
 StyleBox["timelimit", "Code",
  IgnoreSpellCheck->True],
 ". Note that, with the exception of the time limit, this is the same \
information that makes up a grammar."
}], "Text",ExpressionUUID->"dd9a8ecb-5258-4350-9bbd-5c9abda316dc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implementation", "Subsection",
 CellTags->"Section1b",ExpressionUUID->"c67afff2-e312-4a5d-b9ab-91680f30ee7b"],

Cell[TextData[{
 "The function begins by initializing ",
 StyleBox["L", "Code"],
 " to the empty set and ",
 StyleBox["A", "Code"],
 " to the list containing the starting string as the sole element. Recall \
that ",
 StyleBox["L", "Code"],
 " and ",
 StyleBox["A", "Code"],
 " will store the words that have been produced and the list of strings with \
nonterminal symbols that still require processing, respectively. "
}], "Text",ExpressionUUID->"ad93bc6a-4263-4426-8833-bda656a2006d"],

Cell[TextData[{
 "After the initializations are complete, we begin a ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop controlled by the condition that ",
 StyleBox["A", "Code"],
 " is nonempty. Within the loop, set ",
 StyleBox["curString", "Code"],
 " (the \[OpenCurlyDoubleQuote]current string\[CloseCurlyDoubleQuote]) equal \
to the first element of ",
 StyleBox["A", "Code"],
 " and remove it from ",
 StyleBox["A", "Code"],
 "."
}], "Text",ExpressionUUID->"9038505a-8704-4224-ba4c-cdef59cc8afd"],

Cell[TextData[{
 "We need to find all the strings that are directly derivable from ",
 StyleBox["curString", "Code"],
 ". We do this as follows. First, determine the nonterminal symbols ",
 StyleBox["N", "Code"],
 " by computing the complement of the terminal symbols ",
 StyleBox["T", "Code"],
 " relative to the vocabulary ",
 StyleBox["V", "Code"],
 ". Also initialize a list ",
 StyleBox["D", "Code"],
 " (for derivations) to the empty list. We will store all the strings derived \
from ",
 StyleBox["curString", "Code"],
 " in this list and then later determine which should be added to ",
 StyleBox["L", "Code"],
 " and which to ",
 StyleBox["A", "Code"],
 "."
}], "Text",ExpressionUUID->"ef0604cb-f478-476b-b7b9-1c3ac2d41ba8"],

Cell[TextData[{
 "Remember that ",
 StyleBox["curString", "Code"],
 " is represented as a string. We can use ",
 StyleBox[ButtonBox["StringPosition",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringPosition"], "FunctionLink"],
 " to determine whether a particular nonterminal ",
 StyleBox["symbol", "CodeVar"],
 " appears in a ",
 StyleBox["string", "CodeVar"],
 " by evaluating the expression ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"StringPosition", "["}], 
   StyleBox["string", "CodeVar"], ",", 
   StyleBox["symbol", "CodeVar"], "]"}]], "myCode",ExpressionUUID->
  "fdf37e27-b3db-4fb1-be9c-0159656f3525"],
 ". The output will be a list of lists with each inner list specifying the \
location of an occurrence of ",
 StyleBox["symbol", "CodeVar"],
 "."
}], "Text",ExpressionUUID->"076c87cf-f5f1-4c52-b51a-2c974baf0081"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringPosition", "[", 
  RowBox[{"\"\<AbcAb\>\"", ",", "\"\<A\>\""}], "]"}]], "Input",
 CellLabel->"In[2]:=",ExpressionUUID->"2cf2f0ae-af59-4faa-9be9-4bff8f192c78"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"bd47b9e3-9f16-41e1-ae66-2191ae596e87"]
}, Open  ]],

Cell[TextData[{
 "Note that the positions are given as ranges. This is because ",
 StyleBox[ButtonBox["StringPosition",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringPosition"], "FunctionLink"],
 " is often used to find substrings of more than one character, so the \
function is returning a list of ranges."
}], "Text",ExpressionUUID->"60df2309-5eab-45ab-82cb-44c49433371a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringPosition", "[", 
  RowBox[{"\"\<abccbabca\>\"", ",", "\"\<ab\>\""}], "]"}]], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"70594969-3f5f-441d-9c67-9682a7a8005b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "7"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[3]=",ExpressionUUID->"254c889c-c616-43ff-8a58-166aa3561b56"]
}, Open  ]],

Cell["\<\
Note that the result when the target string is not found is the empty list.\
\>", "Text",ExpressionUUID->"dbf6dfda-b9c7-4b18-9ec8-7a2e6725a12c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringPosition", "[", 
  RowBox[{"\"\<AbcAb\>\"", ",", "\"\<X\>\""}], "]"}]], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"cfaba274-7863-4eea-8cce-8f71b7bef0a3"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellLabel->"Out[4]=",ExpressionUUID->"7f747c31-749b-41f6-a225-bcd77a6d05f8"]
}, Open  ]],

Cell[TextData[{
 "For a given ",
 StyleBox["curString", "Code"],
 ", we will loop over the nonterminal symbols. For any nonterminal symbols \
that are found, we look the symbol up in the production table ",
 StyleBox["P", "Code"],
 ". For each associated production, we perform a substitution."
}], "Text",ExpressionUUID->"e1555496-a92f-4339-b67f-34ca663b2efd"],

Cell["\<\
An example may be helpful to explain this step. Suppose we are processing the \
string \[OpenCurlyDoubleQuote]cBbaBa\[CloseCurlyDoubleQuote] as part of the \
grammar given in Example 12 of Section 13.1.\
\>", "Text",ExpressionUUID->"f1db731e-3be6-4202-9652-03189e690bc3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"curString", "=", "\"\<cBbaBa\>\""}]], "Input",
 InitializationCell->True,
 CellLabel->"In[5]:=",ExpressionUUID->"b1335854-e4a7-4b00-835f-4d9d0ab8e8df"],

Cell[BoxData["\<\"cBbaBa\"\>"], "Output",
 CellLabel->"Out[5]=",ExpressionUUID->"afb4a05f-37a0-4459-a4e0-8996d06f15d1"]
}, Open  ]],

Cell["First, we check for the nonterminal symbol \[OpenCurlyDoubleQuote]A\
\[CloseCurlyDoubleQuote].", "Text",ExpressionUUID->"23d2a75b-7def-4255-8df6-\
4f27e645ebf3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringPosition", "[", 
  RowBox[{"curString", ",", "\"\<A\>\""}], "]"}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"dbf3ea07-461c-4bd7-9f32-4c820fe6ce8d"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellLabel->"Out[6]=",ExpressionUUID->"e374fd8d-785e-4486-8106-64c33f1124a7"]
}, Open  ]],

Cell["Since \[OpenCurlyDoubleQuote]A\[CloseCurlyDoubleQuote] is not present, \
we move on to \[OpenCurlyDoubleQuote]B\[CloseCurlyDoubleQuote].", "Text",Expre\
ssionUUID->"d2f648f9-4a92-4a5a-999b-1e458f329f94"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringPosition", "[", 
  RowBox[{"curString", ",", "\"\<B\>\""}], "]"}]], "Input",
 CellLabel->"In[7]:=",ExpressionUUID->"63ad9949-f167-4e03-8f70-d7a86e390f0a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[7]=",ExpressionUUID->"1f70c732-bff9-4c69-b4ac-f7b3ee18252f"]
}, Open  ]],

Cell["\<\
We see that \[OpenCurlyDoubleQuote]B\[CloseCurlyDoubleQuote] does occur in \
the string, so we look up \[OpenCurlyDoubleQuote]B\[CloseCurlyDoubleQuote] in \
the production table.\
\>", "Text",ExpressionUUID->"9515260f-2dea-4f0b-a559-79e3180cf082"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ex12productions", "[", "\"\<B\>\"", "]"}]], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"2adab04f-78f9-4d4d-8892-4e0bb05b400a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Ba\"\>", ",", "\<\"Cb\"\>", ",", "\<\"b\"\>"}], 
  "}"}]], "Output",
 CellLabel->"Out[8]=",ExpressionUUID->"67d0504b-5b3e-4d9c-bd6b-39924988c435"]
}, Open  ]],

Cell[TextData[{
 "We have two occurrences of the nonterminal symbol \[OpenCurlyDoubleQuote]B\
\[CloseCurlyDoubleQuote] and three productions. Applying each production to \
each location will produce six new strings, each of which has one of the \
occurrences of \[OpenCurlyDoubleQuote]B\[CloseCurlyDoubleQuote] replaced. We \
use a ",
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Do"], "FunctionLink"],
 " loop with two loop specifications: one over the productions and one over \
the list of positions. We will be using the ",
 Cell[BoxData[
  RowBox[{"{", 
   StyleBox["variable", "CodeVar"], ",", 
   StyleBox["list", "CodeVar"], "}"}]], "myCode",ExpressionUUID->
  "ac9466b6-9287-4ec7-a166-e168384818d3"],
 " form of the loop specifications. Note that if ",
 StyleBox["list", "CodeVar"],
 " is the empty list, then no iteration will occur. "
}], "Text",ExpressionUUID->"e9f79c3d-63d5-4925-bca3-17eddf4c2b46"],

Cell[TextData[{
 "We apply the derivation with the ",
 StyleBox[ButtonBox["StringReplacePart",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringReplacePart"], "FunctionLink"],
 " function. This function requires three arguments. The first is the \
original string, in this case ",
 StyleBox["curString", "Code"],
 ". The second argument is the new string, in this case the element from the \
list of productions. The third argument is the location being replaced, in \
the same format as output from ",
 StyleBox[ButtonBox["StringPosition",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringPosition"], "FunctionLink"],
 ". For example, below we replace \[OpenCurlyDoubleQuote]",
 StyleBox["xyz",
  IgnoreSpellCheck->True],
 "\[CloseCurlyDoubleQuote] with \[OpenCurlyDoubleQuote]d\
\[CloseCurlyDoubleQuote]."
}], "Text",ExpressionUUID->"4a46288f-1998-4327-9350-8afca5a94855"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringReplacePart", "[", 
  RowBox[{"\"\<abcxyzefg\>\"", ",", "\"\<d\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "6"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[9]:=",ExpressionUUID->"890c8a27-b2cd-44c3-862a-8f22183f8406"],

Cell[BoxData["\<\"abcdefg\"\>"], "Output",
 CellLabel->"Out[9]=",ExpressionUUID->"e0d9f627-aa07-45bf-b466-5f986c19f634"]
}, Open  ]],

Cell["These elements combine to give the following code.", "Text",ExpressionUUID->"551c3310-6066-4da6-b8de-41e829c50c28"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"StringReplacePart", "[", 
     RowBox[{"curString", ",", "p", ",", "l"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"p", ",", 
     RowBox[{"ex12productions", "[", "\"\<B\>\"", "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"l", ",", 
     RowBox[{"StringPosition", "[", 
      RowBox[{"curString", ",", "\"\<B\>\""}], "]"}]}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->"In[10]:=",ExpressionUUID->"e5bca022-999d-48e9-82f1-b41bbda3657a"],

Cell[CellGroupData[{

Cell[BoxData["\<\"cBabaBa\"\>"], "Print",
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"8b2ce05d-c45c-4560-b1a9-28012ca862bf"],

Cell[BoxData["\<\"cBbaBaa\"\>"], "Print",
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"bc3872fc-7f19-4663-a0c9-714ad26a6fb1"],

Cell[BoxData["\<\"cCbbaBa\"\>"], "Print",
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"f14baecd-8028-4fd0-b52c-a7147e3b41e6"],

Cell[BoxData["\<\"cBbaCba\"\>"], "Print",
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"bb6626b6-f6e2-4710-b9c0-d3734ab9b51d"],

Cell[BoxData["\<\"cbbaBa\"\>"], "Print",
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"ca8f3ad0-6b68-4a18-b964-2b32bc26c82c"],

Cell[BoxData["\<\"cBbaba\"\>"], "Print",
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"18a20528-d891-48f6-bc60-9431dbfb14cc"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "In our function, instead of printing the productions, we will ",
 StyleBox[ButtonBox["Sow",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sow"], "FunctionLink"],
 " them and enclose the loop in a ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 ". We will also enclose the loop illustrated above within another ",
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Do"], "FunctionLink"],
 " loop over all of the nonterminal symbols. The resulting list of derived \
strings is stored as ",
 StyleBox["D", "Code"],
 "."
}], "Text",ExpressionUUID->"96cb0c6a-0205-4be1-8262-c56bb96ce5ac"],

Cell[TextData[{
 "Once ",
 StyleBox["curString", "Code"],
 " has been completely processed, we turn to deciding whether each element we \
placed in ",
 StyleBox["D", "Code"],
 " is a word or not. The most straightforward way to approach this is to \
consider whether or not it contains any nonterminal symbols. We can do this \
by using ",
 StyleBox[ButtonBox["StringContainsQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringContainsQ"], "FunctionLink"],
 ". This has similar syntax to ",
 StyleBox[ButtonBox["StringPosition",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringPosition"], "FunctionLink"],
 ", but returns true or false. With a list of strings as the second argument, \
",
 StyleBox[ButtonBox["StringContainsQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringContainsQ"], "FunctionLink"],
 " results in true if any member of the list appears in the string in the \
first argument. If the output is true, then the string has nonterminal \
symbols and need further processing. Otherwise it is a word."
}], "Text",ExpressionUUID->"7893dfc8-90ad-4ad0-8286-9e63e4c23968"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringContainsQ", "[", 
  RowBox[{"\"\<babaaa\>\"", ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<S\>\"", ",", "\"\<A\>\"", ",", "\"\<B\>\"", ",", "\"\<C\>\""}], 
    "}"}]}], "]"}]], "Input",
 CellLabel->"In[11]:=",ExpressionUUID->"ed6fb12f-ba82-4f03-bcb3-6039871c1c22"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[11]=",ExpressionUUID->"9ce32a2d-bfa2-4f63-a5f2-08dac1582fbf"]
}, Open  ]],

Cell["Here is the function.", "Text",ExpressionUUID->"14625e08-3d35-4f45-b4bc-4de96908aeca"],

Cell[BoxData[
 RowBox[{
  RowBox[{"formWords", "[", 
   RowBox[{"V_", ",", "T_", ",", "S_", ",", "P_", ",", "timelimit_"}], "]"}], 
  ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"L", "=", 
       RowBox[{"{", "}"}]}], ",", 
      RowBox[{"A", "=", 
       RowBox[{"{", "\"\<S\>\"", "}"}]}], ",", "N", ",", "curString", ",", 
      "D", ",", "s", ",", "d"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"N", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{"V", ",", "T"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"TimeConstrained", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"A", "\[NotEqual]", 
          RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"curString", "=", 
           RowBox[{"A", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"A", "=", 
           RowBox[{"Delete", "[", 
            RowBox[{"A", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"D", "=", 
           RowBox[{
            RowBox[{"Reap", "[", "\[IndentingNewLine]", 
             RowBox[{"Do", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Do", "[", 
                RowBox[{
                 RowBox[{"Sow", "[", 
                  RowBox[{"StringReplacePart", "[", 
                   RowBox[{"curString", ",", "p", ",", "l"}], "]"}], "]"}], 
                 ",", "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{"p", ",", 
                   RowBox[{"P", "[", "s", "]"}]}], "}"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{"l", ",", 
                   RowBox[{"StringPosition", "[", 
                    RowBox[{"curString", ",", "s"}], "]"}]}], "}"}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"{", 
                RowBox[{"s", ",", "N"}], "}"}]}], "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"2", ",", "1"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Do", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"StringContainsQ", "[", 
               RowBox[{"d", ",", "N"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"A", ",", "d"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"L", ",", "d"}], "]"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"d", ",", "D"}], "}"}]}], "\[IndentingNewLine]", 
           "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", "timelimit"}], "]"}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"DeleteDuplicates", "[", "L", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[12]:=",ExpressionUUID->"aaf3a576-74b0-4847-a6df-01a1edd90406"],

Cell["\<\
We use our function on the grammar defined by Example 12, up to one tenth of \
a second.\
\>", "Text",ExpressionUUID->"2c406276-8ea4-4870-becb-9c63a3b6d60c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"formWords", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<A\>\"", ",", 
     "\"\<B\>\"", ",", "\"\<C\>\"", ",", "\"\<S\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}], ",", 
   "\"\<S\>\"", ",", "ex12productions", ",", ".1"}], "]"}]], "Input",
 CellLabel->"In[13]:=",ExpressionUUID->"1184fea2-2139-4f8a-b701-b71a7b17a259"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"cbab\"\>", ",", "\<\"bab\"\>", ",", "\<\"cbaba\"\>", 
   ",", "\<\"baba\"\>", ",", "\<\"cbacbb\"\>", ",", "\<\"cbabb\"\>", 
   ",", "\<\"bacbb\"\>", ",", "\<\"babb\"\>", ",", "\<\"cbabaa\"\>", 
   ",", "\<\"babaa\"\>", ",", "\<\"cbacbba\"\>", ",", "\<\"cbabba\"\>", 
   ",", "\<\"bacbba\"\>", ",", "\<\"babba\"\>", ",", "\<\"cbabaaa\"\>", 
   ",", "\<\"babaaa\"\>", ",", "\<\"cbacbbaa\"\>", ",", "\<\"cbabbaa\"\>", 
   ",", "\<\"bacbbaa\"\>", ",", "\<\"babbaa\"\>", ",", "\<\"cbabaaaa\"\>", 
   ",", "\<\"babaaaa\"\>", ",", "\<\"cbacbbaaa\"\>", ",", "\<\"cbabbaaa\"\>", 
   ",", "\<\"bacbbaaa\"\>", ",", "\<\"babbaaa\"\>", ",", "\<\"cbabaaaaa\"\>", 
   ",", "\<\"babaaaaa\"\>", ",", "\<\"cbacbbaaaa\"\>", 
   ",", "\<\"cbabbaaaa\"\>", ",", "\<\"bacbbaaaa\"\>", 
   ",", "\<\"babbaaaa\"\>", ",", "\<\"cbabaaaaaa\"\>", 
   ",", "\<\"babaaaaaa\"\>", ",", "\<\"cbacbbaaaaa\"\>", 
   ",", "\<\"cbabbaaaaa\"\>", ",", "\<\"bacbbaaaaa\"\>", 
   ",", "\<\"babbaaaaa\"\>", ",", "\<\"cbabaaaaaaa\"\>", 
   ",", "\<\"babaaaaaaa\"\>", ",", "\<\"cbacbbaaaaaa\"\>", 
   ",", "\<\"cbabbaaaaaa\"\>", ",", "\<\"bacbbaaaaaa\"\>", 
   ",", "\<\"babbaaaaaa\"\>", ",", "\<\"cbabaaaaaaaa\"\>", 
   ",", "\<\"babaaaaaaaa\"\>", ",", "\<\"cbacbbaaaaaaa\"\>", 
   ",", "\<\"cbabbaaaaaaa\"\>", ",", "\<\"bacbbaaaaaaa\"\>", 
   ",", "\<\"babbaaaaaaa\"\>", ",", "\<\"cbabaaaaaaaaa\"\>", 
   ",", "\<\"babaaaaaaaaa\"\>", ",", "\<\"cbacbbaaaaaaaa\"\>", 
   ",", "\<\"cbabbaaaaaaaa\"\>", ",", "\<\"bacbbaaaaaaaa\"\>", 
   ",", "\<\"babbaaaaaaaa\"\>", ",", "\<\"cbabaaaaaaaaaa\"\>", 
   ",", "\<\"babaaaaaaaaaa\"\>", ",", "\<\"cbacbbaaaaaaaaa\"\>", 
   ",", "\<\"cbabbaaaaaaaaa\"\>", ",", "\<\"bacbbaaaaaaaaa\"\>", 
   ",", "\<\"babbaaaaaaaaa\"\>", ",", "\<\"cbabaaaaaaaaaaa\"\>", 
   ",", "\<\"babaaaaaaaaaaa\"\>", ",", "\<\"cbacbbaaaaaaaaaa\"\>", 
   ",", "\<\"cbabbaaaaaaaaaa\"\>", ",", "\<\"bacbbaaaaaaaaaa\"\>", 
   ",", "\<\"babbaaaaaaaaaa\"\>", ",", "\<\"cbabaaaaaaaaaaaa\"\>", 
   ",", "\<\"babaaaaaaaaaaaa\"\>", ",", "\<\"cbacbbaaaaaaaaaaa\"\>", 
   ",", "\<\"cbabbaaaaaaaaaaa\"\>", ",", "\<\"bacbbaaaaaaaaaaa\"\>", 
   ",", "\<\"babbaaaaaaaaaaa\"\>"}], "}"}]], "Output",
 CellLabel->"Out[13]=",ExpressionUUID->"74a9169d-e46d-4043-8373-e5c6d895f7e2"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["13.2 Finite-State Machines with Output", "Section",
 CellTags->"Section2",ExpressionUUID->"5382b954-3867-488c-b3b1-73f53eb20e6f"],

Cell[TextData[{
 "Example 4 in Section 13.2 describes a finite-state machine with five states \
and with input and output alphabets both equal to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], TraditionalForm]],ExpressionUUID->
  "12d876eb-074f-4236-84af-1394d9a2a194"],
 ". Example 6 describes how to implement addition of integers using their \
binary expressions with a finite-state machine with output. Here, we will \
model those two finite-state machines. We will represent strings in the \
language as lists."
}], "Text",ExpressionUUID->"6d61d816-f5db-4bd3-950d-b2e8e3e83d54"],

Cell[CellGroupData[{

Cell["A First Example", "Subsection",
 CellTags->"Section2a",ExpressionUUID->"b7a98635-eac9-4407-8088-28d655caba94"],

Cell[TextData[{
 "Recall from Definition 1 in Section 13.2 that a finite-state machine \
consists of six objects: a set ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "7aa82c3b-1293-4d76-b54f-0a5080086979"],
 " of states, an input alphabet ",
 Cell[BoxData[
  FormBox["I", TraditionalForm]],ExpressionUUID->
  "a0cf935d-06c4-4585-b2e6-85b670b92021"],
 ", an output alphabet ",
 Cell[BoxData[
  FormBox["O", TraditionalForm]],ExpressionUUID->
  "c70e2a76-e748-4e66-a303-7c7f641c4836"],
 ", a transition function ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]],ExpressionUUID->
  "00f4a59b-4f42-43a2-8a9d-7b3f11a0cf20"],
 ", an output function ",
 Cell[BoxData[
  FormBox["g", TraditionalForm]],ExpressionUUID->
  "ca3db4ea-4373-4a98-b75c-3f8417078f75"],
 ", and an initial state ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["s", "0"], TraditionalForm]],ExpressionUUID->
  "d2f2a16a-e424-4260-bfc3-c5a721711f69"],
 "."
}], "Text",ExpressionUUID->"59bb3ca8-6844-4116-acfb-6dcc6aa13640"],

Cell[TextData[{
 "We will write a function that, given data defining a finite-state machine \
and an input string, will return the associated output string. Specifically, \
we will give as an argument to the function a list of members of the input \
alphabet, and the function will return a list of members of the output \
alphabet such that the ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "ae78c8d2-0857-4c22-aabc-541424a127f4"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " element in the output list is the output associated with the ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "440cee3a-0860-4c4a-a890-2dca910eba7b"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " member of the input list."
}], "Text",ExpressionUUID->"79126604-d2b5-4513-bdb8-2e4e39dff191"],

Cell[CellGroupData[{

Cell["Representation", "Subsubsection",ExpressionUUID->"2594c278-5a7f-442b-8348-8ba271bc0d98"],

Cell["\<\
As is typical, we must first describe how we will represent the necessary \
objects using the Wolfram Language.\
\>", "Text",ExpressionUUID->"0e8c359a-9bf3-422f-89c2-f3e253571cdd"],

Cell[TextData[{
 "For simplicity, the states will be represented by nonnegative integers. For \
example, in Example 4, the states will be ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "2", ",", "3", ",", "4"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"7d085074-e3f5-4f1c-bbb0-0e2a4fb9c770"],
 ". We will assume, for the sake of simplicity, that the initial state will \
always be state 0. Neither ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "df087064-1bb0-48d8-88a5-21ef3b698879"],
 " nor ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["s", "0"], TraditionalForm]],ExpressionUUID->
  "3b5b432c-f6e4-4c2f-a256-d5e214682842"],
 " are therefore required as arguments to the function."
}], "Text",ExpressionUUID->"59356266-d14e-42e7-9763-fa397f0f98e7"],

Cell[TextData[{
 "The input and output alphabets, ",
 Cell[BoxData[
  FormBox["I", TraditionalForm]],ExpressionUUID->
  "0e294e83-67a8-4733-9196-f218829a2680"],
 " and ",
 Cell[BoxData[
  FormBox["O", TraditionalForm]],ExpressionUUID->
  "5c8a0064-857d-4927-9f00-1593362349ce"],
 " can be represented by lists of objects but will not be required arguments \
to the function, as they can be inferred from the transition and output \
function. In Example 4, these are both equal to the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], TraditionalForm]],ExpressionUUID->
  "32d78172-7c86-4b73-88e0-42260bd6240d"],
 "."
}], "Text",ExpressionUUID->"89052c63-81e2-4614-9bef-c5a2a8ce8c62"],

Cell[TextData[{
 "The transition function and output function will be represented by a single \
",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 ". This will have the benefit of making the definition of the functions less \
cumbersome. The keys will be pairs ",
 Cell[BoxData[
  RowBox[{"{", 
   StyleBox["state", "CodeVar"], ",", 
   StyleBox["input", "CodeVar"], "}"}]], "myCode",ExpressionUUID->
  "4aec6153-e878-4d60-aa9d-ef25d1e878b0"],
 " where ",
 Cell[BoxData[
  FormBox[
   StyleBox["state", "CodeVar"], TraditionalForm]],ExpressionUUID->
  "742796c1-178c-4955-9451-7c7b37565a07"],
 " is a nonnegative integer and ",
 Cell[BoxData[
  FormBox[
   StyleBox["input", "CodeVar"], TraditionalForm]],ExpressionUUID->
  "28ba513a-cf9a-448e-86de-3457367de628"],
 " will be a member of ",
 Cell[BoxData[
  FormBox["I", TraditionalForm]],ExpressionUUID->
  "06ba2889-0d3b-46c0-8759-5e99c4420973"],
 ". The values of the variable will be pairs ",
 Cell[BoxData[
  RowBox[{"{", 
   StyleBox["newState", "CodeVar"], ",", 
   StyleBox["output", "CodeVar"], "}"}]], "myCode",ExpressionUUID->
  "12c85b4c-a89a-4006-ba9d-249e0d723a86"],
 ", where ",
 Cell[BoxData[
  FormBox[
   StyleBox["newState", "CodeVar"], TraditionalForm]],ExpressionUUID->
  "b78fee0a-8b07-40fa-b420-9d46d6d3232a"],
 " is the state transitioned to and ",
 Cell[BoxData[
  FormBox[
   StyleBox["output", "CodeVar"], TraditionalForm]],ExpressionUUID->
  "9644fa9a-2e35-4a90-b348-e776d7ac9d71"],
 " is the output corresponding to the original state and the input."
}], "Text",ExpressionUUID->"37f31d87-6662-4bf5-aa48-9b729e3b6744"],

Cell["\<\
Here is the definition of the transition-output table for Example 4. (Refer \
to Table 3 of Section 13.2 as the source of the values in the table.)\
\>", "Text",ExpressionUUID->"fcede7d3-2cb1-45dc-8d55-702ad8ae9ac9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ex4Table", "=", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"3", ",", "0"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"3", ",", "0"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"4", ",", "0"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"3", ",", "0"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"4", ",", "0"}], "}"}]}]}], "|>"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[14]:=",ExpressionUUID->"a7fbf355-e72f-4389-8d5d-f8aed9d1c026"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"4", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"4", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"4", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"4", ",", "0"}], "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[14]=",ExpressionUUID->"b7c6e0d5-41fe-4db7-9d87-8aeaf7548000"]
}, Open  ]],

Cell["\<\
Observe that the keys for the transition-output table consist of every \
possible state-input pair.\
\>", "Text",ExpressionUUID->"ea945786-2983-4ca5-bf88-6569c6d62e4a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Machine Modeling Function", "Subsubsection",ExpressionUUID->"65847eed-76e7-4a9b-a46a-f562c632907a"],

Cell["\<\
The function we create will accept as arguments the association representing \
the transition-output table and the input string. It will produce the output \
string.\
\>", "Text",ExpressionUUID->"18c151cf-34ee-4745-b176-8087d0784ed0"],

Cell[TextData[{
 "The function is fairly straightforward. Initialize the current state of the \
machine, stored in ",
 StyleBox["curState", "Code"],
 ", to 0, since we are insisting that 0 represent the starting state. Also \
initialize the output string, ",
 StyleBox["outString", "Code"],
 ", to the list of all 0s of the same length as the input list. (It is more \
efficient, when the length of a list is known in advance, to initialize it to \
the correct length than it is to build it one element at a time.)"
}], "Text",ExpressionUUID->"e6fb85f9-2435-4071-8638-7242ac765a30"],

Cell[TextData[{
 "Begin a ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop from 1 to the length of the input string. For each index, look up the \
pair consisting of ",
 StyleBox["curState", "Code"],
 " and the element in the input string in the transition-output table. The \
second element in the result is placed in the output string at the correct \
position, and the first element is used to update ",
 StyleBox["curState", "Code"],
 ". Once the loop is complete, the output list is returned."
}], "Text",ExpressionUUID->"33f32b7d-1ec1-453d-af31-ced343962443"],

Cell["Here is the function.", "Text",ExpressionUUID->"e0f46bcf-02ac-4695-bbee-ba35152a8708"],

Cell[BoxData[
 RowBox[{
  RowBox[{"machineWithOutput", "[", 
   RowBox[{"transTable_Association", ",", "inString_List"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"curState", "=", "0"}], ",", "outString", ",", "i", ",", "newo",
       ",", "news"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"outString", "=", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"0", ",", 
        RowBox[{"Length", "[", "inString", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"Length", "[", "inString", "]"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"news", ",", "newo"}], "}"}], "=", 
         RowBox[{"transTable", "[", 
          RowBox[{"{", 
           RowBox[{"curState", ",", 
            RowBox[{"inString", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "}"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"outString", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "=", "newo"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"curState", "=", "news"}]}]}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", "outString"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[15]:=",ExpressionUUID->"828649b0-dcbd-4078-a19a-a80ad4e08faf"],

Cell[TextData[{
 "Example 4 asks for the output string when the input is ",
 Cell[BoxData[
  FormBox["101011", TraditionalForm]],ExpressionUUID->
  "77fbcc76-83b8-4284-bb75-059a30e96836"],
 "."
}], "Text",ExpressionUUID->"a59872e0-4df5-4b25-b5f7-1d218fe4d195"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"machineWithOutput", "[", 
  RowBox[{"ex4Table", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1"}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"1bf52024-93af-4484-82a5-b6b2ee0d8b0a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0"}], 
  "}"}]], "Output",
 CellLabel->"Out[16]=",ExpressionUUID->"4cf4b4ea-9541-43c7-b15f-8f4692d0c9ee"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["A Finite-State Machine for Addition", "Subsection",
 CellTags->"Section2b",ExpressionUUID->"ac2d45a0-1446-4936-b951-819d1a946763"],

Cell["\<\
Example 6 in Section 13.2 describes how a finite-state machine with output \
that adds two integers using their binary expansions can be designed. Figure \
5 in the main text gives a diagram illustrating the machine.\
\>", "Text",ExpressionUUID->"9951d903-0de8-44f8-ac55-3b3f65778ae7"],

Cell[TextData[{
 "The input alphabet for this machine are the four bit pairs: ",
 Cell[BoxData[
  FormBox["00", TraditionalForm]],ExpressionUUID->
  "571e7faf-52f6-4029-a9b3-291df4a4023c"],
 ", ",
 Cell[BoxData[
  FormBox["01", TraditionalForm]],ExpressionUUID->
  "096f7c5e-0617-46d7-a2ac-d0eab45178a4"],
 ", ",
 Cell[BoxData[
  FormBox["10", TraditionalForm]],ExpressionUUID->
  "3c288f79-a990-45c9-bc79-43b4663f237f"],
 ", and ",
 Cell[BoxData[
  FormBox["11", TraditionalForm]],ExpressionUUID->
  "02552bed-46f0-463d-bf4e-cf983f43130e"],
 ". We will represent the pairs as strings. As described by the text, we \
assume that the most significant bits, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "n"], TraditionalForm]],ExpressionUUID->
  "f07bba3b-19f7-4df3-aad8-a7617b9f8b91"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "n"], TraditionalForm]],ExpressionUUID->
  "16625dd7-5dab-4fe7-922d-98dcc9bfc7d3"],
 ", are both ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]],ExpressionUUID->
  "0ebde0ad-8d32-4f67-b5dd-362a193ca76e"],
 "."
}], "Text",ExpressionUUID->"36ae48d3-ef54-41ba-8d91-3c85b6240f78"],

Cell[TextData[{
 "As an example, consider adding ",
 Cell[BoxData[
  FormBox[
   RowBox[{"7", "=", 
    SubscriptBox["0111", "2"]}], TraditionalForm]],ExpressionUUID->
  "78f80e2d-fd1d-4408-a97a-0a1b565fcd91"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"6", "=", 
    SubscriptBox["0110", "2"]}], TraditionalForm]],ExpressionUUID->
  "252af616-c117-4696-869c-a71562959d6f"],
 ". We input these two numbers as pairs and in reverse order. Thus the input \
string will be ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"10", ",", "11", ",", "11", ",", "00"}], "}"}], TraditionalForm]],
  ExpressionUUID->"a6fa260b-ca60-40b1-8737-de0691b478b3"],
 "."
}], "Text",ExpressionUUID->"e3b1d29c-3824-4b6b-9b3a-9e8ad16f77a7"],

Cell["\<\
The transition-output table is obtained from the diagram shown in Figure 5.\
\>", "Text",ExpressionUUID->"a7753810-e218-4582-9d37-43ea9658808f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"addTable", "=", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "\"\<00\>\""}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "\"\<01\>\""}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "\"\<10\>\""}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "\"\<11\>\""}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "\"\<00\>\""}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "\"\<01\>\""}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "\"\<10\>\""}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "\"\<11\>\""}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}]}]}], "|>"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[17]:=",ExpressionUUID->"76dfb6df-9191-41cb-8f81-2cfd64583dba"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "\<\"00\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "\<\"01\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "\<\"10\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "\<\"11\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "\<\"00\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "\<\"01\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "\<\"10\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "\<\"11\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[17]=",ExpressionUUID->"e5940c0f-e99e-4c06-95dc-3691ec0afb2d"]
}, Open  ]],

Cell[TextData[{
 "Applying the ",
 StyleBox["machineWithOutput", "Code"],
 " function to this table and the input produces the sum of the integers."
}], "Text",ExpressionUUID->"ecf47169-e04a-47b1-b20d-c22cc81e7439"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"machineWithOutput", "[", 
  RowBox[{"addTable", ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<10\>\"", ",", "\"\<11\>\"", ",", "\"\<11\>\"", ",", "\"\<00\>\""}], 
    "}"}]}], "]"}]], "Input",
 CellLabel->"In[18]:=",ExpressionUUID->"15593468-2080-417f-acdc-71185d57f609"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}]], "Output",
 CellLabel->"Out[18]=",ExpressionUUID->"ebb1f37a-d51a-4295-81c9-ce99da86bdf8"]
}, Open  ]],

Cell[TextData[{
 "This corresponds to ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["1101", "2"], "=", "13"}], TraditionalForm]],ExpressionUUID->
  "6c910711-9d72-4a0c-aaf0-f2c9bd3fc552"],
 "."
}], "Text",ExpressionUUID->"b75979c5-d817-440f-bf66-48e4c1f74d6f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["13.3 Finite-State Machines with No Output", "Section",
 CellTags->"Section3",ExpressionUUID->"38f42d4b-9a43-48e5-b4ac-b70b173846f7"],

Cell["\<\
In this section, we will see how to represent finite-state automata in the \
Wolfram Language and to perform language recognition.\
\>", "Text",ExpressionUUID->"0832226f-8b50-4e38-b462-137f3e5e8583"],

Cell[CellGroupData[{

Cell["Kleene Closure", "Subsection",
 CellTags->"Section3a",ExpressionUUID->"12d62ce6-a13e-4213-ab1a-2bb6ce12b570"],

Cell["\<\
We begin this section by writing functions to compute the concatenation of \
two sets of strings and the partial Kleene closure of a set of strings. \
Again, we will model a string as a list.\
\>", "Text",ExpressionUUID->"367ff6bf-2420-4669-9bd2-b8e1e6b62d7a"],

Cell[TextData[{
 "Given two lists of strings (themselves represented as lists), we can form \
all possible concatenations by using ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Join",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Join"], "FunctionLink"],
 " to concatenate each pair. In order to simplify the appearance of input, \
particularly to enter single-element strings as a simple number, this \
function will wrap any ",
 StyleBox["nonlists",
  IgnoreSpellCheck->True],
 " into a list structure so that single-term strings can be given to the \
function without braces."
}], "Text",ExpressionUUID->"c71cccdb-f66f-41ab-ac7b-adaeaa2f43da"],

Cell[BoxData[
 RowBox[{
  RowBox[{"setCat", "[", 
   RowBox[{"A_", ",", "B_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Which", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", "a", "]"}], "===", "List"}], "&&", 
           RowBox[{
            RowBox[{"Head", "[", "b", "]"}], "===", "List"}]}], ",", 
          RowBox[{"Join", "[", 
           RowBox[{"a", ",", "b"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", "a", "]"}], "===", "List"}], "&&", 
           RowBox[{
            RowBox[{"Head", "[", "b", "]"}], "=!=", "List"}]}], ",", 
          RowBox[{"Join", "[", 
           RowBox[{"a", ",", 
            RowBox[{"{", "b", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", "a", "]"}], "=!=", "List"}], "&&", 
           RowBox[{
            RowBox[{"Head", "[", "b", "]"}], "===", "List"}]}], ",", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", "a", "}"}], ",", "b"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", "a", "]"}], "=!=", "List"}], "&&", 
           RowBox[{
            RowBox[{"Head", "[", "b", "]"}], "=!=", "List"}]}], ",", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", "a", "}"}], ",", 
            RowBox[{"{", "b", "}"}]}], "]"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"a", ",", "A"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"b", ",", "B"}], "}"}]}], "]"}], ",", "1"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[19]:=",ExpressionUUID->"8b5cfbc5-9a2d-4011-b94b-655a17de8d45"],

Cell[TextData[{
 "Note that ",
 StyleBox[ButtonBox["Flatten",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Flatten"], "FunctionLink"],
 " is used since ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " with more than one loop specification produces a nested list. The argument \
1 prevents ",
 StyleBox[ButtonBox["Flatten",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Flatten"], "FunctionLink"],
 " from flattening the list beyond the highest level of nesting."
}], "Text",ExpressionUUID->"22fe7871-5cfd-4fd4-8865-104f4a141e18"],

Cell["\<\
Applying this function to the sets from Example 1 produces the same output as \
in the solution to that example.\
\>", "Text",ExpressionUUID->"27a2ab3c-986c-493b-adc5-eddfbbb45218"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listA", "=", 
  RowBox[{"{", 
   RowBox[{"0", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[20]:=",ExpressionUUID->"51b464c3-199f-4811-aeff-294842c05024"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[20]=",ExpressionUUID->"fffd85e6-ff0d-4f63-abe5-419bc501c314"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listB", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[21]:=",ExpressionUUID->"eabfa0f9-8485-4027-ba6e-e7e9fb5398c5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[21]=",ExpressionUUID->"efea8d03-4e72-4d56-ba31-5b7c463ff86b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"setCat", "[", 
  RowBox[{"listA", ",", "listB"}], "]"}]], "Input",
 CellLabel->"In[22]:=",ExpressionUUID->"50458c60-6ab1-4954-a4ba-c918ceb7ab49"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "0"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[22]=",ExpressionUUID->"36d46cfe-ee64-4c7b-a721-78d3b1ee891b"]
}, Open  ]],

Cell[TextData[{
 "Given a set ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "c443f5e9-cec4-46c7-b857-5a52ced6c081"],
 ", recall that ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["A", "0"], TraditionalForm]],ExpressionUUID->
  "ea2c3921-0a82-435f-8843-a151a91cfc81"],
 " is defined to be the set containing only the empty string, and that for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", ">", "0"}], TraditionalForm]],ExpressionUUID->
  "55b12564-34db-4d9f-aaeb-a64a7630100f"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["A", 
     RowBox[{"n", "+", "1"}]], "=", 
    RowBox[{
     SuperscriptBox["A", "n"], "A"}]}], TraditionalForm]],ExpressionUUID->
  "131bc19b-d6d8-4e6c-951b-0f2273844c58"],
 ". Also recall that the Kleene closure of ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "a6cc6cb4-df49-487e-a8cc-d52abc8a0a0f"],
 " is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["A", "*"], "=", 
    RowBox[{
     StyleBox[
      UnderoverscriptBox["\[Union]", 
       RowBox[{" ", 
        RowBox[{"k", "=", "0"}]}], 
       RowBox[{" ", "\[Infinity]"}]],
      FontSize->16], 
     SuperscriptBox["A", "k"]}]}], TraditionalForm]],ExpressionUUID->
  "a64d51f2-6dd4-4b7b-ba68-986010bb3a74"],
 ". We define the partial Kleene closure to level ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "5472ceac-345d-47fa-8ba0-bebbc767d470"],
 " by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["A", 
     RowBox[{"[", "n", "]"}]], "=", 
    RowBox[{
     StyleBox[
      UnderoverscriptBox["\[Union]", 
       RowBox[{" ", 
        RowBox[{"k", "=", "0"}]}], 
       RowBox[{" ", "n"}]],
      FontSize->16], 
     SuperscriptBox["A", "k"]}]}], TraditionalForm]],ExpressionUUID->
  "91f67309-b19e-4c40-b996-d3d07b9d06fa"],
 "."
}], "Text",ExpressionUUID->"21ac410e-7e33-4e1f-8ab1-0e8752925876"],

Cell[TextData[{
 "We write a function to produce the powers of ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "90b78787-b81e-443a-ba63-d03fc5d5de55"],
 ". The function is modeled on the recursive definition given in the text."
}], "Text",ExpressionUUID->"3da9b533-fca0-498d-9f94-55ec4ceccc6c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"setPow", "[", 
    RowBox[{"A_", ",", "k_"}], "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"k", "\[Equal]", "0"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", "}"}], "}"}], ",", 
     RowBox[{"setCat", "[", 
      RowBox[{
       RowBox[{"setPow", "[", 
        RowBox[{"A", ",", 
         RowBox[{"k", "-", "1"}]}], "]"}], ",", "A"}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[23]:=",ExpressionUUID->"76936235-f8c9-47f2-9162-77a2c5913599"],

Cell[TextData[{
 "For example, with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"B", "=", 
    RowBox[{"{", 
     RowBox[{"1", ",", "10", ",", "110"}], "}"}]}], TraditionalForm]],
  ExpressionUUID->"e6ef900e-31c7-4d2c-a159-6e10daa623c8"],
 ", we can compute ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["B", "3"], TraditionalForm]],ExpressionUUID->
  "dba2cb0c-4bd2-4261-a4cb-ee141db14c16"],
 " as follows:"
}], "Text",ExpressionUUID->"56511268-0b77-4be0-ba8e-2bf9db898a2d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"setPow", "[", 
  RowBox[{"listB", ",", "3"}], "]"}]], "Input",
 CellLabel->"In[24]:=",ExpressionUUID->"b6838fed-be8e-42ce-809a-adbd44fbe64f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
     "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
     "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", 
     "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1",
      ",", "0"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[24]=",ExpressionUUID->"971a2213-0d29-4438-8dcd-00fbc922211c"]
}, Open  ]],

Cell[TextData[{
 "To form the partial Kleene closure ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["A", 
    RowBox[{"[", "n", "]"}]], TraditionalForm]],ExpressionUUID->
  "972c71d0-a104-4ced-9c85-a3fc45c67114"],
 ", we must find the union of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["A", "0"], ",", 
    SuperscriptBox["A", "1"], ",", "\[Ellipsis]", ",", 
    SuperscriptBox["A", "n"]}], TraditionalForm]],ExpressionUUID->
  "859d8474-6928-48bb-89e4-4ad1ab8b3f17"],
 ". Iteratively building the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["A", "k"], TraditionalForm]],ExpressionUUID->
  "19e64fe9-0887-4030-a6cd-be60004e0c41"],
 " while taking unions is more efficient than using ",
 StyleBox["setPow", "Code"],
 "."
}], "Text",ExpressionUUID->"fa4c377e-3acb-45f0-ab95-d8cfe078680d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"kleene", "[", 
   RowBox[{"A_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"K", "=", 
       RowBox[{"{", 
        RowBox[{"{", "}"}], "}"}]}], ",", "x", ",", "Ak", ",", "i"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"K", "=", 
        RowBox[{"Union", "[", 
         RowBox[{"K", ",", 
          RowBox[{"{", 
           RowBox[{"{", "x", "}"}], "}"}]}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "A"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Ak", "=", "K"}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "2"}], ",", 
       RowBox[{"i", "\[LessEqual]", "n"}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Ak", "=", 
         RowBox[{"setCat", "[", 
          RowBox[{"Ak", ",", "A"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"K", "=", 
         RowBox[{"Union", "[", 
          RowBox[{"K", ",", "Ak"}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}],
      ";", "\[IndentingNewLine]", "K"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[25]:=",ExpressionUUID->"0a4fee28-be56-487e-9597-262f489ade75"],

Cell[TextData[{
 "We compute the Kleene closure up to level 3 of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], TraditionalForm]],ExpressionUUID->
  "f1b0dd84-b6ae-4ae0-8836-42661640f5bf"],
 "."
}], "Text",ExpressionUUID->"fc6fe76c-70ab-44f3-81b1-de8087e4e0cf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"kleene", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "3"}], "]"}]], "Input",
 CellLabel->"In[26]:=",ExpressionUUID->"15ffe77f-19a3-414d-ad72-3a52f147533a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "0", "}"}], ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[26]=",ExpressionUUID->"356ce135-464b-4e38-bb01-ac029bfab948"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Extended Transition Function for a Finite-State Automaton", "Subsection",
 CellTags->"Section3b",ExpressionUUID->"6476a476-c968-4c04-ba8b-e27d4acb7e1e"],

Cell["\<\
Now, we will create a function that serves as the extension of the transition \
function of a finite-state automaton, as described following Example 4 in \
Section 13.3 of the textbook.\
\>", "Text",ExpressionUUID->"6af432f3-3d3d-45a8-8b0e-0217119e580a"],

Cell["\<\
As in Section 13.2, we will model the transition function as an association. \
The keys will be the pairs consisting of the current state of the automaton \
and the input. The corresponding value will be the next state of the \
automaton.\
\>", "Text",ExpressionUUID->"109987a0-0a63-4597-8ac9-59b83f6f34b3"],

Cell[TextData[{
 "For example, the transition function of the finite-state automaton ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["M", "1"], TraditionalForm]],ExpressionUUID->
  "3dc7b557-598e-4867-85a4-8afe7c03ff3b"],
 " in Example 5 is as follows."
}], "Text",ExpressionUUID->"6c7f759a-63c3-48bd-98a6-68fce0e74108"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ex51Table", "=", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", "1"}]}], "|>"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[27]:=",ExpressionUUID->"10b960a4-e6be-43c4-bdce-434a5a1c57a3"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", "1"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[27]=",ExpressionUUID->"35571890-14b0-44c3-851b-79159778ccb0"]
}, Open  ]],

Cell[TextData[{
 "To model the extended function that takes a pair consisting of a state and \
a member of the Kleene closure of the alphabet and returns the final state, \
we write a function, ",
 StyleBox["extendedTransition", "Code"],
 ". The arguments of this function will be a state number, a list \
representing the input string, and the transition function."
}], "Text",ExpressionUUID->"5e1fc0bd-7bf4-4cb7-906e-a960ff79c90c"],

Cell["\<\
We will not use the recursive definition provided in the text, but will \
instead use an iterative approach. Begin by initializing the current state to \
the input state. Then, loop through the list representing the input string \
and apply the transition function to update the current state. Once the loop \
is concluded, return the state.\
\>", "Text",ExpressionUUID->"87b0d6a0-f294-4dd9-b3a8-52e3a9754d78"],

Cell[BoxData[
 RowBox[{
  RowBox[{"extendedTransition", "[", 
   RowBox[{"state_", ",", "input_", ",", "transFunc_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"curState", "=", "state"}], ",", "i"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"Length", "[", "input", "]"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"curState", "=", 
        RowBox[{"transFunc", "[", 
         RowBox[{"{", 
          RowBox[{"curState", ",", 
           RowBox[{"input", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "}"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "curState"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[28]:=",ExpressionUUID->"322cfd7b-a906-4c18-ae85-75c00a3cfac7"],

Cell[TextData[{
 "We can use this function to see that applying the automaton ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["M", "1"], TraditionalForm]],ExpressionUUID->
  "a72c1e6d-5f23-4b4e-ac14-11e476906dc6"],
 " from Example 5 to the input ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1", ",", "0"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"c1ca711e-b830-442d-8d93-d3665f60bb93"],
 " with initial state ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]],ExpressionUUID->
  "91975961-720b-47c4-95d0-4a7ec9e17fd0"],
 " ends in state ",
 Cell[BoxData[
  FormBox["1", TraditionalForm]],ExpressionUUID->
  "24fbee3c-01c3-4326-ba1d-078e5c8ac379"],
 "."
}], "Text",ExpressionUUID->"040faa1e-eb69-4081-a4ec-296a23ad8a88"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"extendedTransition", "[", 
  RowBox[{"0", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
   "ex51Table"}], "]"}]], "Input",
 CellLabel->"In[29]:=",ExpressionUUID->"ca57f63c-1101-4b51-9c75-78983c96766c"],

Cell[BoxData["1"], "Output",
 CellLabel->"Out[29]=",ExpressionUUID->"f42af8d4-b60c-4f3c-82d0-4cb4f820fcfa"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Language Recognition with Finite-State Automata", "Subsection",
 CellTags->"Section3c",ExpressionUUID->"27f27b1d-fc0a-4c72-8b3d-717974784602"],

Cell[TextData[{
 "Recall that a string ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "ae817466-707d-4001-9047-5adceef2c344"],
 " is recognized by a finite-state automaton if the extended transition \
function applied to the initial state and the string ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "ab7e5801-a778-4171-a3e2-fb6b901c969e"],
 " results in a final state."
}], "Text",ExpressionUUID->"699bc457-a44b-4a47-8bd3-c2e6fee13e96"],

Cell[TextData[{
 "We will write a function that, given the transition function for a \
finite-state automaton with initial state ",
 StyleBox["init", "Code"],
 ", the set of ",
 StyleBox["final", "Code"],
 " states, and the string ",
 StyleBox["x", "Code"],
 ", will return ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 " or ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 " indicating whether or not the string is recognized by the machine."
}], "Text",ExpressionUUID->"1df0d4f0-d19f-4e1d-a6b9-97512844206e"],

Cell[TextData[{
 "The function only needs to apply ",
 StyleBox["extendedTransition", "Code"],
 " to the state ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]],ExpressionUUID->
  "ace10857-076a-40c5-bec7-3e970462d047"],
 ", the transition table, and string, and then check to see whether or not \
the result is in the set of final states."
}], "Text",ExpressionUUID->"c2f9183f-7290-4d95-84d8-d27216977f67"],

Cell[BoxData[
 RowBox[{
  RowBox[{"recognizedQ", "[", 
   RowBox[{"x_", ",", "transFunc_", ",", "init_", ",", "final_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "endState", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"endState", "=", 
      RowBox[{"extendedTransition", "[", 
       RowBox[{"init", ",", "x", ",", "transFunc"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"MemberQ", "[", 
      RowBox[{"final", ",", "endState"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[30]:=",ExpressionUUID->"15ce5efc-46d6-4389-a86e-920a2a45c15d"],

Cell[TextData[{
 "The solution to Example 5 indicated that the only strings accepted by ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["M", "1"], TraditionalForm]],ExpressionUUID->
  "fa13b122-c8a8-4c1f-9666-9c6eee437376"],
 " are those consisting of consecutive ",
 Cell[BoxData[
  FormBox["1", TraditionalForm]],ExpressionUUID->
  "1f3cd8d1-7f50-4df2-8efc-2edfa6956d19"],
 "s."
}], "Text",ExpressionUUID->"e56685ad-68aa-4478-979c-2fa107331c94"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"recognizedQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   "ex51Table", ",", "0", ",", 
   RowBox[{"{", "0", "}"}]}], "]"}]], "Input",
 CellLabel->"In[31]:=",ExpressionUUID->"c86d8aae-d88d-4808-803b-49138f8ac67e"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[31]=",ExpressionUUID->"6ed29c5f-2edc-45eb-9ef5-1fc4bbcf1430"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"recognizedQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "1"}], "}"}], ",", "ex51Table", ",",
    "0", ",", 
   RowBox[{"{", "0", "}"}]}], "]"}]], "Input",
 CellLabel->"In[32]:=",ExpressionUUID->"248390ec-92d9-4306-ac85-6b388655faf3"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[32]=",ExpressionUUID->"0ced5ec3-5055-4e85-8734-81b0adfe237d"]
}, Open  ]],

Cell[TextData[{
 "Using the ",
 StyleBox["kleene", "Code",
  IgnoreSpellCheck->True],
 " function from the beginning of this section, we can partially determine \
the language recognized by a machine."
}], "Text",ExpressionUUID->"5a61077e-9182-4907-ae3c-2aa0d1757946"],

Cell[TextData[{
 "Given the transition table, the initial state, the set of final states, a \
set ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "987b8248-f698-4d75-919a-e349a6b1bff8"],
 ", and a positive integer ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "b21e1537-1d81-4636-8c4e-4da51f7897d8"],
 ", the following function will calculate the subset of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["A", 
    RowBox[{"[", "n", "]"}]], TraditionalForm]],ExpressionUUID->
  "3b421404-f51f-482a-b67d-65b3776008cd"],
 " recognized by the finite-state automaton defined by the transition table \
and set of final states."
}], "Text",ExpressionUUID->"b97338a5-00c5-482b-9e36-2eb1b06bc311"],

Cell[TextData[{
 "This function operates by brute force; applying ",
 StyleBox["kleene", "Code",
  IgnoreSpellCheck->True],
 " and then using ",
 StyleBox["recognizedQ", "Code"],
 " to check each element of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["A", 
    RowBox[{"[", "n", "]"}]], TraditionalForm]],ExpressionUUID->
  "78c6b588-6ce8-4713-8c8a-1354f2bd709f"],
 "."
}], "Text",ExpressionUUID->"27a1ceea-717b-4710-ad2f-821e4dc4db4e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findLanguage", "[", 
   RowBox[{"transFunc_", ",", "init_", ",", "final_", ",", "A_", ",", "n_"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"An", ",", "x", ",", 
      RowBox[{"L", "=", 
       RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"An", "=", 
      RowBox[{"kleene", "[", 
       RowBox[{"A", ",", "n"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"recognizedQ", "[", 
          RowBox[{"x", ",", "transFunc", ",", "init", ",", "final"}], "]"}], 
         ",", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"L", ",", "x"}], "]"}]}], "]"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "An"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "L"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[33]:=",ExpressionUUID->"54038dcd-5b95-448d-9278-ff6f9d7dce4a"],

Cell[TextData[{
 "Applying this function to our ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["M", "1"], TraditionalForm]],ExpressionUUID->
  "cc05e603-8c20-49eb-9e0a-57b4c5a280af"],
 " machine and ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], 
    RowBox[{"[", "10", "]"}]], TraditionalForm]],ExpressionUUID->
  "9f513d58-4156-4647-8147-5c89212b6480"],
 ", we see that the only strings in that set recognized by the finite-state \
automaton are those consisting only of 1s."
}], "Text",ExpressionUUID->"39c7c67a-6c81-456a-b0cc-cd61f41ed622"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findLanguage", "[", 
  RowBox[{"ex51Table", ",", "0", ",", 
   RowBox[{"{", "0", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "10"}], "]"}]], "Input",
 CellLabel->"In[34]:=",ExpressionUUID->"3c26551e-0599-4b7b-b0aa-c6e7017f68e0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
     "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[34]=",ExpressionUUID->"8559de59-e434-4da6-acb7-bb28c0af92fe"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Nondeterministic Finite-State Automata", "Subsection",
 CellTags->"Section3d",ExpressionUUID->"1de5c516-2835-4c5e-b339-eeefaecbedc7"],

Cell["\<\
We conclude this section with an implementation of the constructive proof of \
Theorem 1 of Section 13.3. Given a nondeterministic finite-state automaton, \
our function will produce a deterministic finite-state automaton.\
\>", "Text",ExpressionUUID->"f405e249-c20a-4931-9473-a828e0c8444e"],

Cell["\<\
In particular, given the transition function (indexed variable) for a \
nondeterministic automaton, its input alphabet, its starting state, and its \
set of final states, the function will produce the transition function for a \
deterministic automaton, its starting state, and its set of final states.\
\>", "Text",ExpressionUUID->"ee415419-9201-4b62-9897-a67d87fe5b9d"],

Cell["\<\
For a nondeterministic automaton, we will represent the transition function \
in the same way as for the deterministic automaton earlier, except the values \
will be sets of states, rather than individual states.\
\>", "Text",ExpressionUUID->"8ff85bcc-af22-4e86-961a-7537c1e5bc25"],

Cell["\<\
For example, here is the transition function for the nondeterministic \
automaton described in Example 10, which has final states 0 and 4.\
\>", "Text",ExpressionUUID->"ca51d256-c15b-46ee-9361-8bf26b4bd50c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ex10Table", "=", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "2"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", "1", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", "3", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", "4", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", "4", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", "3", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", "3", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", "3", "}"}]}]}], "|>"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[35]:=",ExpressionUUID->"70469a45-6479-4cc6-b04a-212326d31a5e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "2"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "4", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "4", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"4", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"4", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "3", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[35]=",ExpressionUUID->"cafc5457-19dc-4d39-9ab0-b77c0f699bb5"]
}, Open  ]],

Cell["\<\
To determine the deterministic automaton\[CloseCurlyQuote]s transition table, \
its starting state, and final states, we follow the proof of Theorem 1. The \
deterministic automaton\[CloseCurlyQuote]s states are sets of states of the \
nondeterministic automaton. \
\>", "Text",ExpressionUUID->"f8661649-5145-4347-a1c2-ef80619c7ff8"],

Cell["\<\
We begin with the set consisting of the nondeterministic automaton\
\[CloseCurlyQuote]s starting state. This is the starting state for the \
deterministic automaton. Given any state of the deterministic automaton, and \
any input, the deterministic transition is the union over all members of the \
state of the results of applying the nondeterministic automaton\
\[CloseCurlyQuote]s transition with that input value.\
\>", "Text",ExpressionUUID->"2ab42723-a776-49f1-b761-78b1375c4d0f"],

Cell[TextData[{
 "In our function, we will create an association. We will also create two \
sets ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "a17adc30-8112-45ff-b919-d6f3a2715895"],
 " and ",
 Cell[BoxData[
  FormBox["T", TraditionalForm]],ExpressionUUID->
  "187088e3-88bd-43dd-a0e7-08baca5cf2e7"],
 ". The set ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "1f433edd-f045-4059-8aa3-12287d23483a"],
 " will be initialized to the empty set and at the conclusion of the \
procedure will be the set of all states of the deterministic automaton. The \
set ",
 Cell[BoxData[
  FormBox["T", TraditionalForm]],ExpressionUUID->
  "3c4b3319-6a22-4210-8085-1e56aa42022b"],
 " will be initialized to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"{", 
     SubscriptBox["s", "0"], "}"}], "}"}], TraditionalForm]],ExpressionUUID->
  "541f95dd-8e7b-4b37-82f1-5bd157662d39"],
 ", the set containing the initial state of the deterministic automaton."
}], "Text",ExpressionUUID->"427fb718-5d0e-4cf0-96d2-078ca5e47078"],

Cell[TextData[{
 "As long as ",
 Cell[BoxData[
  FormBox["T", TraditionalForm]],ExpressionUUID->
  "4aeca808-f71d-4641-a882-f202c8b101ae"],
 " is non-empty, we will move one of its members from ",
 Cell[BoxData[
  FormBox["T", TraditionalForm]],ExpressionUUID->
  "ec33e672-8240-4942-8eab-838ebc2bba2f"],
 " to ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "a1889b36-2e3f-4cc4-8531-1afe7214806e"],
 " and apply the nondeterministic automaton\[CloseCurlyQuote]s transition \
function with all possible input values. The results are the entries in the \
deterministic transition table and those that are not already members of ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "b93f5327-b680-4d31-962a-ce1059b43c41"],
 " are added to ",
 Cell[BoxData[
  FormBox["T", TraditionalForm]],ExpressionUUID->
  "6f4ac5a8-587e-439a-9bf6-b57abf5bd5a9"],
 " for further processing."
}], "Text",ExpressionUUID->"4ab739cd-145d-45c6-8821-d39d41bfa007"],

Cell["\<\
The final states of the deterministic automaton are those states which \
contain a final state of the nondeterministic automaton. That is, the final \
states are those whose intersection with the set of the original final states \
is nonempty. Before exiting, the function calculates the set of final states \
for the deterministic automaton.\
\>", "Text",ExpressionUUID->"e7678a01-2770-471d-8efe-9745bafdd670"],

Cell["\<\
Here is the function. Note that the function returns a list containing the \
new starting state, the set of final states, and the association representing \
the deterministic automaton\[CloseCurlyQuote]s transition function.\
\>", "Text",ExpressionUUID->"76b3b491-c4ad-450c-bed0-35d2df778cbb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"makeDeterministic", "[", 
   RowBox[{"transFunc_", ",", "alphabet_", ",", "init_", ",", "final_"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"S", "=", 
       RowBox[{"{", "}"}]}], ",", 
      RowBox[{"T", "=", 
       RowBox[{"{", 
        RowBox[{"{", "init", "}"}], "}"}]}], ",", "state", ",", "i", ",", "s",
       ",", "x", ",", "newfinal", ",", 
      RowBox[{"newTable", "=", 
       RowBox[{"Association", "[", "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"T", "\[NotEqual]", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"state", "=", 
         RowBox[{"T", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"T", "=", 
         RowBox[{"Delete", "[", 
          RowBox[{"T", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"S", ",", "state"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"x", "=", 
            RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Do", "[", 
            RowBox[{
             RowBox[{"x", "=", 
              RowBox[{"Union", "[", 
               RowBox[{"x", ",", 
                RowBox[{"transFunc", "[", 
                 RowBox[{"{", 
                  RowBox[{"s", ",", "i"}], "}"}], "]"}]}], "]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"s", ",", "state"}], "}"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"x", "=", 
            RowBox[{"Union", "[", "x", "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"newTable", "[", 
             RowBox[{"{", 
              RowBox[{"state", ",", "i"}], "}"}], "]"}], "=", "x"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"MemberQ", "[", 
               RowBox[{"S", ",", "x"}], "]"}]}], ",", 
             RowBox[{"T", "=", 
              RowBox[{"Union", "[", 
               RowBox[{"T", ",", 
                RowBox[{"{", "x", "}"}]}], "]"}]}]}], "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "alphabet"}], "}"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"newfinal", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Intersection", "[", 
           RowBox[{"state", ",", "final"}], "]"}], "\[NotEqual]", 
          RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"newfinal", "=", 
          RowBox[{"Union", "[", 
           RowBox[{"newfinal", ",", 
            RowBox[{"{", "state", "}"}]}], "]"}]}]}], "]"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"state", ",", "S"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "init", "}"}], ",", "newfinal", ",", "newTable"}], 
      "}"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[36]:=",ExpressionUUID->"3ba29fb7-46e5-4017-bd3e-ee6f4c6c40c9"],

Cell["\<\
Applying this function to the Example 10 information produces the following:\
\>", "Text",ExpressionUUID->"f79d91d1-15ea-455e-8197-5aaba5fd7dd7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"ex10Dinit", ",", "ex10Dfinal", ",", "ex10DTable"}], "}"}], "=", 
  RowBox[{"makeDeterministic", "[", 
   RowBox[{"ex10Table", ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], ",", "0", ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "4"}], "}"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[37]:=",ExpressionUUID->"527de16a-d0eb-4f6b-b140-c144b2bdb463"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "0", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "0", "}"}], ",", 
     RowBox[{"{", "4", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "0", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "2"}], "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "0", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "1", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "1", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "3", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "1", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "4", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "3", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "3", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "3", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "4", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "3", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "4", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "3", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "2"}], "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "2"}], "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "2"}], "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "4"}], "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "4"}], "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "3", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "4"}], "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "4"}], "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "3", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "4"}], "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "3", "}"}]}]}], "\[RightAssociation]"}]}], "}"}]], "Output",\

 CellLabel->"Out[37]=",ExpressionUUID->"be40e496-6378-4f96-a81e-923fe1fc5868"]
}, Open  ]],

Cell["\<\
You can confirm that this agrees with Figure 8 in Section 13.3. \
\>", "Text",ExpressionUUID->"1bf88b35-cad2-4e43-88d4-4647a91e8ada"],

Cell[TextData[{
 "We use the output as the arguments to ",
 StyleBox["findLanguage", "Code"],
 "."
}], "Text",ExpressionUUID->"d3bdf79d-e821-4fbc-bb5e-c3d19644a30e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findLanguage", "[", 
  RowBox[{"ex10DTable", ",", "ex10Dinit", ",", "ex10Dfinal", ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "10"}], "]"}]], "Input",
 CellLabel->"In[38]:=",ExpressionUUID->"53e7bae8-c79b-41c7-8aec-914a5fed71e6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "0", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
     "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
     "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
     "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1",
      ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[38]=",ExpressionUUID->"3bbcd504-190b-47c4-ac62-3e1ae814356a"]
}, Open  ]],

Cell[TextData[{
 "This list of strings suggests that the language recognized by this \
automaton are those strings consisting of a positive number of 0s followed by \
no more than two 1s, together with the empty string and the string ",
 Cell[BoxData[
  FormBox["11", TraditionalForm]],ExpressionUUID->
  "7dbc6aca-3318-45df-ae47-29e8180f3795"],
 "."
}], "Text",ExpressionUUID->"761a2a38-609b-4ef2-b828-32c5529bdfab"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["13.4 Language Recognition", "Section",
 CellTags->"Section4",ExpressionUUID->"e0368784-e575-4c62-81a4-09460b709266"],

Cell["\<\
In this section, we will introduce the Wolfram Language\[CloseCurlyQuote]s \
support for regular expressions for working with strings. We will also \
develop a function for calculating the concatenation of two nondeterministic \
automata.\
\>", "Text",ExpressionUUID->"917560b1-3b8b-4058-a152-313fab705fdf"],

Cell[CellGroupData[{

Cell["Regular Expressions", "Subsection",
 CellTags->"Section4a",ExpressionUUID->"59d86a73-20b1-4f09-8952-1a744053868b"],

Cell[TextData[{
 "In the Wolfram Language, a regular expression is enclosed in the ",
 StyleBox[ButtonBox["RegularExpression",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RegularExpression"], "FunctionLink"],
 " head. It is typically used in the second argument to a string information \
or manipulation function, such as ",
 StyleBox[ButtonBox["StringMatchQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringMatchQ"], "FunctionLink"],
 ", ",
 StyleBox[ButtonBox["StringReplace",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringReplace"], "FunctionLink"],
 ", ",
 StyleBox[ButtonBox["StringCases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringCases"], "FunctionLink"],
 ", or ",
 StyleBox[ButtonBox["StringSplit",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringSplit"], "FunctionLink"],
 ". We will illustrate the Wolfram Language syntax for regular expressions \
using the ",
 StyleBox[ButtonBox["StringMatchQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringMatchQ"], "FunctionLink"],
 " function. This function takes a string as the first argument and a regular \
expression, enclosed in ",
 StyleBox[ButtonBox["RegularExpression",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RegularExpression"], "FunctionLink"],
 ", as the second argument. It returns ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 " if the regular expression matches the string."
}], "Text",ExpressionUUID->"772a4a54-018a-4231-a2a8-d42d5cb3b445"],

Cell["\<\
Perhaps the most basic form of a regular expression is the concatenation of \
elements of the set. For example, \[OpenCurlyDoubleQuote]01\
\[CloseCurlyDoubleQuote] is a regular expression. This expression matches \
itself, of course.\
\>", "Text",ExpressionUUID->"0eed856f-178e-49e0-bc3f-ba703cb59076"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<01\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<01\>\"", "]"}]}], "]"}]], "Input",
 CellLabel->"In[39]:=",ExpressionUUID->"a9707386-964d-4ff2-8582-64a1b970af96"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[39]=",ExpressionUUID->"85561da0-7a45-49da-96af-ffef10f0165b"]
}, Open  ]],

Cell["\<\
The output indicates that yes, the string \[OpenCurlyDoubleQuote]01\
\[CloseCurlyDoubleQuote] matches the regular expression \
\[OpenCurlyDoubleQuote]01\[CloseCurlyDoubleQuote].\
\>", "Text",ExpressionUUID->"9037ca60-ab3b-45f1-a4ca-3b4742490528"],

Cell[CellGroupData[{

Cell["Kleene Closure", "Subsubsection",ExpressionUUID->"074891f3-3bbe-4a72-929f-1905488acc6f"],

Cell["\<\
The asterisk is a symbol used in a regular expression to represent the Kleene \
closure.\
\>", "Text",ExpressionUUID->"4aa930cf-81f9-474a-a40c-159ecf4aa71f"],

Cell["\<\
For example, the regular expression \[OpenCurlyDoubleQuote]10*\
\[CloseCurlyDoubleQuote] will match a 1 followed by any number of 0s.\
\>", "Text",ExpressionUUID->"c9eb0d6a-9bc5-4bc4-bd2d-9f3de8a75b4d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<10000000\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<10*\>\"", "]"}]}], "]"}]], "Input",
 CellLabel->"In[40]:=",ExpressionUUID->"2e330d7a-ae5a-4cb3-9ac2-3f2e18d6bbc4"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[40]=",ExpressionUUID->"716d0113-972c-485c-b4fb-d4f27d511bff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<1\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<10*\>\"", "]"}]}], "]"}]], "Input",
 CellLabel->"In[41]:=",ExpressionUUID->"b889a777-ae3c-4027-8d6a-8d1c2088d72c"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[41]=",ExpressionUUID->"3281abd3-a4d9-4be2-96be-41790d9ef00d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<0111000\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<10*\>\"", "]"}]}], "]"}]], "Input",
 CellLabel->"In[42]:=",ExpressionUUID->"e88e77d5-8ec6-417e-b6c5-4b31cc36eb11"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[42]=",ExpressionUUID->"a9cf6a51-141d-4427-b09b-949469eded54"]
}, Open  ]],

Cell["\<\
As in the text, parentheses can be used to group symbols. For example \
\[OpenCurlyDoubleQuote](10)*\[CloseCurlyDoubleQuote] matches any number of \
copies of \[OpenCurlyDoubleQuote]10\[CloseCurlyDoubleQuote].\
\>", "Text",ExpressionUUID->"3ed5be65-9de4-4733-a9c9-f64ce0475ee0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<101010101010101010\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<(10)*\>\"", "]"}]}], "]"}]], "Input",\

 CellLabel->"In[43]:=",ExpressionUUID->"55b2e0e5-fefd-4d4c-8bc7-02bd69da607a"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[43]=",ExpressionUUID->"82d425bb-f068-410a-9b6d-e3e7138f45e2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<101010101\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<(10)*\>\"", "]"}]}], "]"}]], "Input",\

 CellLabel->"In[44]:=",ExpressionUUID->"1846728f-b5ed-41f9-895a-50877dceb6a7"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[44]=",ExpressionUUID->"ab77bc91-d852-4995-a2bd-f1d76080bd76"]
}, Open  ]],

Cell["\<\
The Wolfram Language, like most languages that support regular expressions, \
also recognizes \[OpenCurlyDoubleQuote]+\[OpenCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]?\[CloseCurlyDoubleQuote]. These are used like \
\[OpenCurlyDoubleQuote]*\[CloseCurlyDoubleQuote] but with different meaning. \
The expression \[OpenCurlyDoubleQuote]A+\[OpenCurlyDoubleQuote] is used to \
match one or more copies of \[OpenCurlyDoubleQuote]A\[CloseCurlyDoubleQuote]. \
Essentially, it is the Kleene closure minus the empty string. For example, \
\[OpenCurlyDoubleQuote]1*0+\[OpenCurlyDoubleQuote] matches any number of 1s \
followed by at least one 0.\
\>", "Text",ExpressionUUID->"6e3f1228-8994-4f69-a031-151baa4dde8f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<1111000\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<1*0+\>\"", "]"}]}], "]"}]], "Input",\

 CellLabel->"In[45]:=",ExpressionUUID->"4f22ed76-b431-4416-8679-e9e91fda0c00"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[45]=",ExpressionUUID->"3ad79f3c-7e7a-4965-88b3-764dff59852e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<00\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<1*0+\>\"", "]"}]}], "]"}]], "Input",\

 CellLabel->"In[46]:=",ExpressionUUID->"b9ea23fc-633f-41c1-89b9-fdef4fa29226"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[46]=",ExpressionUUID->"dbeaf6a8-05bd-4e7e-a97a-9692db8edf14"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<111\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<1*0+\>\"", "]"}]}], "]"}]], "Input",\

 CellLabel->"In[47]:=",ExpressionUUID->"0b53fb34-453a-41d1-82ef-b15d0b83a333"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[47]=",ExpressionUUID->"45769a69-7f3a-4d12-83cf-896bc8736356"]
}, Open  ]],

Cell["\<\
The \[OpenCurlyDoubleQuote]A?\[CloseCurlyDoubleQuote] expression is used to \
match 0 or 1 copies of \[OpenCurlyDoubleQuote]A\[CloseCurlyDoubleQuote]. For \
example, \[OpenCurlyDoubleQuote]1*0?\[CloseCurlyDoubleQuote] matches any \
number of 1s which may be followed by at most one 0.\
\>", "Text",ExpressionUUID->"95cca2fb-0356-45c9-b394-13ca3737cfb4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<111111\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<1*0?\>\"", "]"}]}], "]"}]], "Input",\

 CellLabel->"In[48]:=",ExpressionUUID->"69dea84d-5ddd-4a75-8b7c-b181b9984089"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[48]=",ExpressionUUID->"5a0e77b5-f6bd-4ccd-9e07-7aa064dd6481"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<1111110\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<1*0?\>\"", "]"}]}], "]"}]], "Input",\

 CellLabel->"In[49]:=",ExpressionUUID->"74ce3af8-f1e2-47ec-965e-2fdf12994994"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[49]=",ExpressionUUID->"2736b265-b1b6-4c2d-aed7-6eae32700967"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<11111100\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<1*0?\>\"", "]"}]}], "]"}]], "Input",\

 CellLabel->"In[50]:=",ExpressionUUID->"58583672-eb8c-4b1e-88a6-b0c61d065efd"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[50]=",ExpressionUUID->"6bb30e03-25d1-4b3a-893a-cf5e724d11a6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Union", "Subsubsection",ExpressionUUID->"9591e1a7-606b-4902-9c07-e3c2c8d3a278"],

Cell["\<\
To represent union, the vertical line is used. A \[OpenCurlyDoubleQuote]|\
\[CloseCurlyDoubleQuote] placed between two expressions will match either of \
them. The \[OpenCurlyDoubleQuote]|\[CloseCurlyDoubleQuote] can take the place \
of the \[OpenCurlyDoubleQuote]\[Union]\[CloseCurlyDoubleQuote] symbol in an \
expression such as \[OpenCurlyDoubleQuote]0(0\[Union]1)*\
\[CloseCurlyDoubleQuote].\
\>", "Text",ExpressionUUID->"0b898470-02bd-4778-a90e-23445917c04b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<011010\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<0(0|1)*\>\"", "]"}]}], 
  "]"}]], "Input",
 CellLabel->"In[51]:=",ExpressionUUID->"ef2d6daa-0edc-4993-8024-53a63e8ab57a"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[51]=",ExpressionUUID->"807cd848-10c7-410f-8971-6400838b2dac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<1011010\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<0(0|1)*\>\"", "]"}]}], 
  "]"}]], "Input",
 CellLabel->"In[52]:=",ExpressionUUID->"4a58bb9f-4a38-4fec-8a3a-c94676f938c4"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[52]=",ExpressionUUID->"66378410-2921-4403-9b50-8c5a32991de4"]
}, Open  ]],

Cell["\<\
This can also be done in more complicated expressions. For example, \
\[OpenCurlyDoubleQuote]2((10)*\[Union](01)*)2\[CloseCurlyDoubleQuote] \
describes the set of strings beginning and ending with 2s with an alternating \
sequence of 0s and 1s in between.\
\>", "Text",ExpressionUUID->"cfedd40f-1704-4acc-ac62-bc10da2434dd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<21010102\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<2((10)*|(01)*)2\>\"", "]"}]}], 
  "]"}]], "Input",
 CellLabel->"In[53]:=",ExpressionUUID->"2904aa9b-b076-4818-bc71-89e73967f0dc"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[53]=",ExpressionUUID->"f1cee714-0d3e-4cef-84c3-615bcd95adfd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<201012\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<2((10)*|(01)*)2\>\"", "]"}]}], 
  "]"}]], "Input",
 CellLabel->"In[54]:=",ExpressionUUID->"e12a7ef1-3492-4858-87d8-0717d65a3052"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[54]=",ExpressionUUID->"472f7473-f578-4be7-8472-cbd9dcfb326f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<210012\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<2((10)*|(01)*)2\>\"", "]"}]}], 
  "]"}]], "Input",
 CellLabel->"In[55]:=",ExpressionUUID->"8a2579d6-696b-4ace-a63f-ad5cf99032b8"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[55]=",ExpressionUUID->"e90c9077-3f64-42ff-8b3c-7abb36b4e238"]
}, Open  ]],

Cell["\<\
In some circumstances, union can be replaced by character classes. By placing \
characters within a pair of brackets, you indicate that any of the characters \
inside the brackets are allowed. For example, \[OpenCurlyDoubleQuote]0(0\
\[Union]1)*\[CloseCurlyDoubleQuote] can be expressed as follows:\
\>", "Text",ExpressionUUID->"b3122da6-9305-4cdb-8e98-8b3dedcd7c9b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<011010\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<0[01]*\>\"", "]"}]}], 
  "]"}]], "Input",
 CellLabel->"In[56]:=",ExpressionUUID->"67db7197-ccdb-41b7-97f6-5491c3bfbba3"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[56]=",ExpressionUUID->"8a6b4164-3ee8-45f7-813b-bfb77805a6c5"]
}, Open  ]],

Cell["\<\
Note that this is only allowed when the options are single characters.\
\>", "Text",ExpressionUUID->"3f929254-15e7-462e-8ac9-27b25d3032bb"],

Cell["\<\
Character classes can also be used to specify a range of characters with a \
hyphen. For example, \[OpenCurlyDoubleQuote](0\[Union]1\[Union]2\[Union]3\
\[Union]4)*\[CloseCurlyDoubleQuote] can be specified as follows.\
\>", "Text",ExpressionUUID->"29ae17fb-9e36-44ff-9230-0e55d39945d6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<4213442101\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<[0-4]*\>\"", "]"}]}], 
  "]"}]], "Input",
 CellLabel->"In[57]:=",ExpressionUUID->"1fbd411b-1b52-4d7b-a43e-baf55f58aed9"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[57]=",ExpressionUUID->"3cd8dd6b-de4b-4d71-a316-5740e68aba94"]
}, Open  ]],

Cell["\<\
Character classes can be complemented. By beginning a character class with a \
caret, you indicate that any character other than those specified are \
allowed. For example, in the following, the regular expression matches all \
strings beginning with 1, ending with 0, and which include no other 1s nor 0s.\
\>", "Text",ExpressionUUID->"8f744415-fa5b-4f6f-b154-d37f5662c740"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<169jwq0\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<1[^01]*0\>\"", "]"}]}], 
  "]"}]], "Input",
 CellLabel->"In[58]:=",ExpressionUUID->"6fed12e6-3b4f-4fb0-8922-8d4c65af82b4"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[58]=",ExpressionUUID->"c59e4542-217d-4530-aa47-b098d9697db3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<169j1wq0\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<1[^01]*0\>\"", "]"}]}], 
  "]"}]], "Input",
 CellLabel->"In[59]:=",ExpressionUUID->"1043d33e-39c2-47a0-8b25-b8689e799dc3"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[59]=",ExpressionUUID->"ecefedb7-35a3-4b99-abb6-bbd9a155e083"]
}, Open  ]],

Cell[TextData[{
 "There are also several defined character classes: you enter \
\[OpenCurlyDoubleQuote]\\\\d\[CloseCurlyDoubleQuote] for a digit, \
\[OpenCurlyDoubleQuote]\\\\D\[CloseCurlyDoubleQuote] for a ",
 StyleBox["nondigit",
  IgnoreSpellCheck->True],
 ", \[OpenCurlyDoubleQuote]\\\\s\[CloseCurlyDoubleQuote] for space, including \
newline and tab, \[OpenCurlyDoubleQuote]\\\\S\[CloseCurlyDoubleQuote] for any \
",
 StyleBox["non-whitespace",
  IgnoreSpellCheck->True],
 " character, \[OpenCurlyDoubleQuote]\\\\w\[CloseCurlyDoubleQuote] for a word \
character (letters, digits, and underscores), and \
\[OpenCurlyDoubleQuote]\\\\W\[CloseCurlyDoubleQuote] for a nonword \
character."
}], "Text",ExpressionUUID->"61856487-eb8b-4ca2-ae37-eb379846bdeb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<126qb\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<\\\\d*\\\\w\\\\w\>\"", "]"}]}], 
  "]"}]], "Input",
 CellLabel->"In[60]:=",ExpressionUUID->"6b4bba97-b867-4b87-94de-94a8cfa176c6"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[60]=",ExpressionUUID->"ac00708c-3663-4bda-a689-9840c8ef4ffc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<b32xy\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<\\\\d*\\\\w\\\\w\>\"", "]"}]}], 
  "]"}]], "Input",
 CellLabel->"In[61]:=",ExpressionUUID->"2127d22e-cc1a-4a23-9af6-160bb15baaaf"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[61]=",ExpressionUUID->"f5b226d7-958c-409c-b6ba-aa8d21dd5796"]
}, Open  ]],

Cell["\<\
The special character dot, \[OpenCurlyDoubleQuote].\[CloseCurlyDoubleQuote], \
is used to match any character. For example, \[OpenCurlyDoubleQuote]1...0\
\[CloseCurlyDoubleQuote] will match any string beginning with a 1, followed \
by any three characters and ending with a 0.\
\>", "Text",ExpressionUUID->"58e285cc-1ab0-4929-851e-53733e905fdc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<12340\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<1...0\>\"", "]"}]}], "]"}]], "Input",\

 CellLabel->"In[62]:=",ExpressionUUID->"6b8e95f1-1b87-4b22-8b59-177863e4953c"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[62]=",ExpressionUUID->"00ba605f-9720-4b60-a8a0-4492cc1066cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<1230\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<1...0\>\"", "]"}]}], "]"}]], "Input",\

 CellLabel->"In[63]:=",ExpressionUUID->"80755c1e-5e6f-4427-b835-faaea58c1448"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[63]=",ExpressionUUID->"6f37e51f-3da2-4d2f-a361-fbc629cc191c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringMatchQ", "[", 
  RowBox[{"\"\<1234567890\>\"", ",", 
   RowBox[{"RegularExpression", "[", "\"\<1...0\>\"", "]"}]}], "]"}]], "Input",\

 CellLabel->"In[64]:=",ExpressionUUID->"d14b4e5a-c9eb-4cc7-a7e3-a279b07c240d"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[64]=",ExpressionUUID->"450d7e7d-ef4a-4c3b-90a8-6cf1a83b85c2"]
}, Open  ]],

Cell[TextData[{
 "Regular expressions in the Wolfram Language are extremely flexible. The \
interested reader is referred to the tutorial page on ",
 ButtonBox["regular expressions",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/RegularExpressions"],
 " for more information."
}], "Text",ExpressionUUID->"0924dd6d-f813-43ff-8783-6992c23d2c64"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Concatenation of Automata", "Subsection",
 CellTags->"Section4b",ExpressionUUID->"788beb09-c4eb-4ffd-8f44-c0f9d0cdbf98"],

Cell["\<\
We will write a function that concatenates two nondeterministic finite-state \
automata, as described in the proof of Theorem 1 of the text.\
\>", "Text",ExpressionUUID->"94c5d1d9-ada5-4569-8e01-4fc7cc2689c3"],

Cell[CellGroupData[{

Cell["Two Automata", "Subsubsection",ExpressionUUID->"b613c332-8b4e-4932-9ac6-058ae50e210b"],

Cell["\<\
We begin by defining two example automata that our function will concatenate.\
\
\>", "Text",ExpressionUUID->"14e67f88-22b2-4d57-93cc-17c460b7b0c4"],

Cell["\<\
The first automata is the result of Example 3, for recognizing \
\[OpenCurlyDoubleQuote]1*\[Union]01\[CloseCurlyDoubleQuote]. Our \
implementation is based on the simple form shown in Figure3b.\
\>", "Text",ExpressionUUID->"98ac3ee6-4fe5-4a11-b77f-2d5b15237ee9"],

Cell[TextData[{
 "Note that the diagram in the text omits the results of transitioning from \
certain states via certain input values. For example, it does not show the \
result of the transition from state ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["s", "1"], TraditionalForm]],ExpressionUUID->
  "bfb991a7-858c-4602-9997-7b79241c11d6"],
 " with input 0. This makes for a simpler and cleaner diagram, but the \
transition table will need to include this information. It will be assumed \
that all such omissions correspond to a transition to the state ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", " ", "}"}], TraditionalForm]],ExpressionUUID->
  "a11f0f8e-5367-4a26-8be8-1cc8e491715f"],
 "."
}], "Text",ExpressionUUID->"34ef6e05-8268-4c8b-8da9-2cba8a4fce5a"],

Cell["\<\
Here is the transition table corresponding to the automaton shown in Figure \
3b. \
\>", "Text",ExpressionUUID->"3b629240-6aeb-4703-9514-f24f68cd6442"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"atable", "=", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", "2", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", "1", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", "1", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", "3", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", "}"}]}]}], "|>"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[65]:=",ExpressionUUID->"a64b98a8-0828-4675-a0f6-6332bbaff255"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[65]=",ExpressionUUID->"bc0bdc53-5274-49c7-bc55-71a4ae4881cd"]
}, Open  ]],

Cell[TextData[{
 "The final states for this automaton are ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "3"}], "}"}], TraditionalForm]],
  ExpressionUUID->"4597d2fa-7820-41a0-a987-9f91f424f483"],
 ". We can confirm that it recognizes \[OpenCurlyDoubleQuote]1*\[Union]01\
\[CloseCurlyDoubleQuote] by applying ",
 StyleBox["makeDeterministic", "Code"],
 " and ",
 StyleBox["findLanguage", "Code"],
 "."
}], "Text",ExpressionUUID->"ef3e5498-3972-4648-878b-03c78f29822a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"aDinit", ",", "aDfinal", ",", "aDtable"}], "}"}], "=", 
  RowBox[{"makeDeterministic", "[", 
   RowBox[{"atable", ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], ",", "0", ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "3"}], "}"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[66]:=",ExpressionUUID->"9aff966f-d15e-42f9-b3ec-47ea2f1e066a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "0", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "0", "}"}], ",", 
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", "3", "}"}]}], "}"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "0", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "2", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "0", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "1", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "1", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "1", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "1", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "2", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "2", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "3", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "3", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "3", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]}], "}"}]], "Output",
 CellLabel->"Out[66]=",ExpressionUUID->"7677149b-05aa-4ff8-84db-2377f0652cc4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findLanguage", "[", 
  RowBox[{"aDtable", ",", "aDinit", ",", "aDfinal", ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "10"}], "]"}]], "Input",
 CellLabel->"In[67]:=",ExpressionUUID->"671fae22-2849-4002-b2b2-941909620a48"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
     "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[67]=",ExpressionUUID->"f9646127-3044-4b9b-9496-408017a325df"]
}, Open  ]],

Cell["\<\
As you can see, the language recognized by this machine includes the string \
\[OpenCurlyDoubleQuote]01\[CloseCurlyDoubleQuote] as well as \
\[OpenCurlyDoubleQuote]1*\[CloseCurlyDoubleQuote].\
\>", "Text",ExpressionUUID->"6e289b63-d53c-4619-ba60-347b36ff08ea"],

Cell["\<\
The second automaton we create will recognize the language \
\[OpenCurlyDoubleQuote]101\[CloseCurlyDoubleQuote].\
\>", "Text",ExpressionUUID->"b42b0ba4-518c-41b9-90e3-2e8f71a0886a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"btable", "=", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", "1", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", "2", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", "3", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", "}"}]}]}], "|>"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[68]:=",ExpressionUUID->"91f4eb68-ac81-46d9-a02e-88adea1fe093"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[68]=",ExpressionUUID->"32af393f-5f1e-4649-ad57-41c00f0684d2"]
}, Open  ]],

Cell["\<\
The only final state is 3. We confirm that this models that machine that \
recognizes 101.\
\>", "Text",ExpressionUUID->"401d2538-8238-4827-8b87-6c788e348e22"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"bDinit", ",", "bDfinal", ",", "bDtable"}], "}"}], "=", 
  RowBox[{"makeDeterministic", "[", 
   RowBox[{"btable", ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], ",", "0", ",", 
    RowBox[{"{", "3", "}"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[69]:=",ExpressionUUID->"7d7df014-e7ac-4e6e-974d-5440fdfbcb9a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "0", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", "3", "}"}], "}"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "0", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "0", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "1", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "1", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "2", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "1", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "2", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "2", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "3", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "3", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "3", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]}], "}"}]], "Output",
 CellLabel->"Out[69]=",ExpressionUUID->"afd1a133-0384-42b9-a164-c151f2f23705"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findLanguage", "[", 
  RowBox[{"bDtable", ",", "bDinit", ",", "bDfinal", ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "10"}], "]"}]], "Input",
 CellLabel->"In[70]:=",ExpressionUUID->"19b4c345-50fc-4b21-8a21-8d5635b1e901"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"1", ",", "0", ",", "1"}], "}"}], "}"}]], "Output",
 CellLabel->"Out[70]=",ExpressionUUID->"fc34943d-b774-4755-8c0a-a7ab31778146"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Concatenating the Machines", "Subsubsection",ExpressionUUID->"71f22a44-6413-49e0-ab36-c119916e9f55"],

Cell["\<\
Our concatenation function will require the following arguments, for both \
machines: the transition table, the starting state, and the final states. It \
will also require that the two machines have a common input alphabet but that \
alphabet does not need to be an argument.\
\>", "Text",ExpressionUUID->"e75a76ca-7f32-4266-a5aa-e09842167f55"],

Cell["\<\
Recall the following elements of the construction of the concatenation as \
described in the proof of Theorem 1 of Section 13.4:\
\>", "Text",ExpressionUUID->"f2e5d0c3-36a3-4772-a839-520c06569cac"],

Cell[CellGroupData[{

Cell["\<\
The states of the concatenation is the union of the states of the original \
machines, which are assumed to be disjoint.\
\>", "Item1Numbered",ExpressionUUID->"f85d2968-bce2-4b09-985a-5eb1b99aa416"],

Cell["\<\
The starting state of the concatenation is the starting state of the first of \
the two machines.\
\>", "Item1Numbered",ExpressionUUID->"05b2dccb-f6ca-4fcf-b4d6-6c793920adea"],

Cell["\<\
The final states of the concatenation include the set of final states of the \
second machine.\
\>", "Item1Numbered",ExpressionUUID->"034d949a-1e64-4fa3-b628-2557452670f7"],

Cell["\<\
The final states of the concatenation also include the starting state if the \
empty string is a member of both languages.\
\>", "Item1Numbered",ExpressionUUID->"ef2a43d2-0e17-46eb-af92-1f1ed34b8612"],

Cell["\<\
All transitions of the original machines are transitions of the new machine.\
\>", "Item1Numbered",ExpressionUUID->"2c25f0f1-ae3c-41ae-a641-65a1ca68d7cf"],

Cell["\<\
Additionally, for every transition in the first machine leading to a final \
state, we add a transition in the concatenation to the starting state of the \
second machine.\
\>", "Item1Numbered",ExpressionUUID->"4cb16e6a-89a6-4a79-9336-8ae1acd26f92"],

Cell["\<\
Finally, if the starting state of the first machine is final, then for every \
transition from the starting state of the second machine, we add a transition \
from the starting state of the new machine.\
\>", "Item1Numbered",ExpressionUUID->"f0429b93-c802-4de4-982a-1e7a40ec3f90"]
}, Open  ]],

Cell["\<\
The assumption that the states of the original two machines are disjoint \
means that we will need to make them so. There are a variety of ways in which \
we could do this. Since we assume that states are designated by nonnegative \
integers, we can make the states distinct by multiplying each state by 10 and \
adding 1 if it is in the first machine and 2 if it is in the second machine.\
\>", "Text",ExpressionUUID->"d8b17bdb-4a82-4b76-9401-988aff6e0bc6"],

Cell[TextData[{
 "Therefore, the starting state of the concatenation is found by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"10", "\[CenterDot]", 
     SubscriptBox["s", "A"]}], "+", "1"}], TraditionalForm]],ExpressionUUID->
  "4d3af569-a399-45f8-b847-10c65a4738fc"],
 " where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["s", "A"], TraditionalForm]],ExpressionUUID->
  "cbf7a6ea-935b-4579-85fd-c4708649869c"],
 " is the starting state of the first machine. In our example, this will be \
equal to ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"10", "\[CenterDot]", "0"}], "+", "1"}], "=", "1"}], 
   TraditionalForm]],ExpressionUUID->"d34de12a-839a-4a3d-9d7b-ad7c1984a91a"],
 "."
}], "Text",ExpressionUUID->"ca5e00c4-54ee-4cf0-b679-2ec899b4ec91"],

Cell[TextData[{
 "Next, we find the final states of the concatenation. Let ",
 StyleBox["finalA", "Code"],
 " and ",
 StyleBox["finalB", "Code"],
 " be the sets of final states for the original two machines. According to \
point 3 above, the final states of the concatenated machine include the final \
states of the second machine. We only need to update the names."
}], "Text",ExpressionUUID->"d9741c84-7ce6-471c-8076-729d5a86842a"],

Cell["\<\
The final states of the machines we defined above are as follows:\
\>", "Text",ExpressionUUID->"ccc18a7c-224b-40dd-b16f-ae76110f72fe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"finalA", "=", 
  RowBox[{"{", 
   RowBox[{"0", ",", "1", ",", "3"}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[71]:=",ExpressionUUID->"c961355a-1a17-4fc9-a3e4-bcbc16ae8c8f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "1", ",", "3"}], "}"}]], "Output",
 CellLabel->"Out[71]=",ExpressionUUID->"986f3c0c-1611-4e14-8728-ba630c3e96e9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"finalB", "=", 
  RowBox[{"{", "3", "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[72]:=",ExpressionUUID->"89825e7a-a640-4f83-98b5-1eba774dff42"],

Cell[BoxData[
 RowBox[{"{", "3", "}"}]], "Output",
 CellLabel->"Out[72]=",ExpressionUUID->"d686b979-d2f1-405e-88b8-db8d3c615041"]
}, Open  ]],

Cell[TextData[{
 "We can obtain the final states of the concatenation by applying the \
function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"s", "\[Rule]", 
    RowBox[{
     RowBox[{"10", "s"}], "+", "2"}]}], TraditionalForm]],ExpressionUUID->
  "cc9fbfba-5123-48d3-8cb3-f880c04772d0"],
 " to the set of final states of the second machine."
}], "Text",ExpressionUUID->"8b4cd89a-8d4f-462c-8f10-b0e169922e11"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"10", "*", "#"}], "+", "2"}], ")"}], "&"}], ",", "finalB"}], 
  "]"}]], "Input",
 CellLabel->"In[73]:=",ExpressionUUID->"900e92cf-9e23-4f93-8869-0f31ef049c41"],

Cell[BoxData[
 RowBox[{"{", "32", "}"}]], "Output",
 CellLabel->"Out[73]=",ExpressionUUID->"889c0570-0ee4-408c-ad60-0878b47bbc1a"]
}, Open  ]],

Cell["\<\
Item 4 asserts that the starting state of the concatenated machine is a final \
state if and only if the empty string is a member of both languages. Another \
way to put this is that the starting state of the concatenated machine is a \
final state when both of the original machines have their own starting states \
as final states. This is not the case in our example. We will include this \
possibility in our general function by checking to see if the starting states \
are members of the sets of final states.\
\>", "Text",ExpressionUUID->"2b0a9d6b-4bc8-4f60-8d69-2cef4a119c83"],

Cell[TextData[{
 "To form the transitions of the new machine, we begin by making the original \
two transition functions disjoint. The function ",
 StyleBox[ButtonBox["KeyValueMap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/KeyValueMap"], "FunctionLink"],
 " accepts a function of two variables and an association and applies the \
function to the keys and corresponding values. Applying ",
 StyleBox[ButtonBox["KeyValueMap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/KeyValueMap"], "FunctionLink"],
 " with the undefined symbol ",
 StyleBox["f", "Code"],
 " as the function illustrates the result."
}], "Text",ExpressionUUID->"bb34f29d-cff6-4278-9b33-fca780b4b9a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KeyValueMap", "[", 
  RowBox[{"f", ",", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "\"\<a\>\""}], ",", 
     RowBox[{"2", "\[Rule]", "\"\<b\>\""}], ",", 
     RowBox[{"3", "\[Rule]", "\"\<c\>\""}]}], "|>"}]}], "]"}]], "Input",
 CellLabel->"In[74]:=",ExpressionUUID->"209da4bc-810e-4257-9b0d-194258dd3d55"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "\<\"a\"\>"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"2", ",", "\<\"b\"\>"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", "\<\"c\"\>"}], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[74]=",ExpressionUUID->"ddaa163b-607f-4c06-9891-23434b8fc06c"]
}, Open  ]],

Cell[TextData[{
 "Note that ",
 StyleBox["#1", "Code"],
 " refers to the key and ",
 StyleBox["#2", "Code"],
 " refers to the value. For an association representing a transition \
function, the keys will be pairs consisting of a state and an input, so ",
 StyleBox["#1[[1]]", "Code"],
 " refers to the state. As discussed above, we will multiply the state by 10 \
and add 1 to obtain the new state names for the first machine. The values in \
the association are sets of states. We can make use of the fact that \
arithmetic automatically threads over lists of change all of the states \
without individually accessing the elements. For example:"
}], "Text",ExpressionUUID->"b9a76dff-1ab8-425d-bf37-d3034a3eb828"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"10", "*", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}]}], "+", "1"}]], "Input",
 CellLabel->"In[75]:=",ExpressionUUID->"dc53fcb2-bbca-415c-85c2-29c1b339233b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"11", ",", "41"}], "}"}]], "Output",
 CellLabel->"Out[75]=",ExpressionUUID->"6b241f2a-57a5-486f-9314-7eec90108c47"]
}, Open  ]],

Cell[TextData[{
 "The result of ",
 StyleBox[ButtonBox["KeyValueMap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/KeyValueMap"], "FunctionLink"],
 " is a list, so we also need to apply the ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 " head. The following, then, produces the transition rules for the first \
machine on the disjoint state names."
}], "Text",ExpressionUUID->"d3023dc3-595b-4762-93e5-e7508dc2bfe4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Association", "@@", 
  RowBox[{"KeyValueMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"10", "*", 
          RowBox[{"#1", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], "+", "1"}], ",", 
        RowBox[{"#1", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "\[Rule]", 
      RowBox[{
       RowBox[{"10", "*", "#2"}], "+", "1"}]}], "&"}], ",", "atable"}], 
   "]"}]}]], "Input",
 CellLabel->"In[76]:=",ExpressionUUID->"c6ec813f-5a23-496a-b00e-2c678777151b"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "21", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "11", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "11", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"21", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"21", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "31", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"31", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"31", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[76]=",ExpressionUUID->"c497b055-1344-4e8d-aac9-a028a9261dee"]
}, Open  ]],

Cell["\<\
For the second machine, we do the same thing except adding 2 instead of 1.\
\>", "Text",ExpressionUUID->"8a962a2b-f160-482a-aca2-e3554c646d0f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Association", "@@", 
  RowBox[{"KeyValueMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"10", "*", 
          RowBox[{"#1", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], "+", "2"}], ",", 
        RowBox[{"#1", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "\[Rule]", 
      RowBox[{
       RowBox[{"10", "*", "#2"}], "+", "2"}]}], "&"}], ",", "btable"}], 
   "]"}]}]], "Input",
 CellLabel->"In[77]:=",ExpressionUUID->"9d50fe7d-72fc-45e3-a906-cd38851c38d2"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "12", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"12", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "22", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"12", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"22", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"22", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "32", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"32", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"32", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[77]=",ExpressionUUID->"2b76443d-5a3b-4ddb-8865-b2a23abd417f"]
}, Open  ]],

Cell["\<\
Thus, we begin forming the transition function for the combined machine by \
joining those two associations.\
\>", "Text",ExpressionUUID->"8600e479-fd28-4be9-9206-407a73acf99b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"abtable", "=", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"Association", "@@", 
     RowBox[{"KeyValueMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"10", "*", 
             RowBox[{"#1", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "+", "1"}], ",", 
           RowBox[{"#1", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "\[Rule]", 
         RowBox[{
          RowBox[{"10", "*", "#2"}], "+", "1"}]}], "&"}], ",", "atable"}], 
      "]"}]}], ",", 
    RowBox[{"Association", "@@", 
     RowBox[{"KeyValueMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"10", "*", 
             RowBox[{"#1", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "+", "2"}], ",", 
           RowBox[{"#1", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "\[Rule]", 
         RowBox[{
          RowBox[{"10", "*", "#2"}], "+", "2"}]}], "&"}], ",", "btable"}], 
      "]"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[78]:=",ExpressionUUID->"b9d41941-aafc-4950-94a0-32aea64cf992"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "21", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "11", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "11", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"21", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"21", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "31", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"31", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"31", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "12", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"12", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "22", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"12", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"22", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"22", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "32", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"32", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"32", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[78]=",ExpressionUUID->"b3ce8e7d-6d0f-4225-82f9-2fbbeeeb3868"]
}, Open  ]],

Cell["\<\
Next, we must add transitions between the two components. As item 6 \
instructs, for each transition in the first of the two machines that leads to \
a final state, we must add a transition in the concatenated machine to the \
starting state of the second machine.\
\>", "Text",ExpressionUUID->"c1f49ae9-d2b4-4836-8bf9-568c20462b35"],

Cell[TextData[{
 "We loop through the keys of ",
 StyleBox["atable", "Code",
  IgnoreSpellCheck->True],
 ", checking whether the value contains any states that are final for machine \
A. If so, we will add the transition to state 2 (the name of the starting \
state in the second machine in the concatenation). (Note that we must update \
the value in the ",
 StyleBox["abtable", "Code",
  IgnoreSpellCheck->True],
 " rather than replace it.)"
}], "Text",ExpressionUUID->"d54ab450-3a17-4211-9dac-ec4f015b6f5d"],

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Intersection", "[", 
       RowBox[{
        RowBox[{"atable", "[", "i", "]"}], ",", "finalA"}], "]"}], 
      "\[NotEqual]", 
      RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"abtable", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"10", "*", 
           RowBox[{"i", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "+", "1"}], ",", 
         RowBox[{"i", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], "=", 
      RowBox[{"Union", "[", 
       RowBox[{
        RowBox[{"abtable", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"10", "*", 
             RowBox[{"i", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "+", "1"}], ",", 
           RowBox[{"i", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}]}], "]"}], "\[IndentingNewLine]", 
   ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", 
     RowBox[{"Keys", "[", "atable", "]"}]}], "}"}]}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[79]:=",ExpressionUUID->"f4fe33ff-82b7-4eb7-aea5-7accd2f8bb93"],

Cell["\<\
We can see that this has added transitions that lead to state 2.\
\>", "Text",ExpressionUUID->"c45f7a16-e3fc-4a1a-8f75-04f65ce5c994"],

Cell[CellGroupData[{

Cell[BoxData["abtable"], "Input",
 CellLabel->"In[80]:=",ExpressionUUID->"86a1f3b2-45be-42f9-be1e-58c97a6a5a35"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "21", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "11"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "11"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"21", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"21", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "31"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"31", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"31", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "12", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"12", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "22", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"12", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"22", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"22", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "32", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"32", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"32", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[80]=",ExpressionUUID->"a7733314-c86a-4cde-92c5-ae33e55742c0"]
}, Open  ]],

Cell["\<\
Finally, since the starting state of the first machine is final, we must add \
transitions from the starting state of the concatenated machine for each of \
the transitions from the starting state of the second machine. The starting \
state of the second machine in this example is 0, and the starting state of \
the concatenation is 1.\
\>", "Text",ExpressionUUID->"12771589-9f90-4929-ab41-eb4ef54c6932"],

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"i", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "0"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"abtable", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"i", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], "=", 
      "\[IndentingNewLine]", 
      RowBox[{"Union", "[", 
       RowBox[{
        RowBox[{"abtable", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"i", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], ",", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"10", "*", "#"}], "+", "2"}], ")"}], "&"}], ",", 
          RowBox[{"btable", "[", "i", "]"}]}], "]"}]}], "]"}]}]}], "]"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", 
     RowBox[{"Keys", "[", "btable", "]"}]}], "}"}]}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[81]:=",ExpressionUUID->"7aeb92f8-8b93-4d7f-a75f-eb3658dddd31"],

Cell["Inspect the table again.", "Text",ExpressionUUID->"081812b0-7501-493d-a65f-68b5d6a1126c"],

Cell[CellGroupData[{

Cell[BoxData["abtable"], "Input",
 CellLabel->"In[82]:=",ExpressionUUID->"3024f738-15dd-4911-91d1-f48e52d5212b"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "21", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "11", ",", "12"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "11"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"21", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"21", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "31"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"31", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"31", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "12", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"12", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "22", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"12", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"22", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"22", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "32", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"32", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"32", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[82]=",ExpressionUUID->"e2c1353d-fa62-4384-8b32-107534cc7e6e"]
}, Open  ]],

Cell[TextData[{
 "Note that this modified the value associated to key ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], TraditionalForm]],ExpressionUUID->
  "b0ba43fe-4474-416e-837b-5e06cebdd67d"],
 ". (Recall that state 1 is the starting state for the combined machine.) \
Before, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], TraditionalForm]],ExpressionUUID->
  "5bc35b2b-7a38-4158-b7c2-8dea2e344138"],
 " was associated with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"2", ",", "11"}], "}"}], TraditionalForm]],ExpressionUUID->
  "7512432f-642a-421b-aacd-1243adbe7da3"],
 ", the starting state of the second machine and state 1 of the first \
machine. Now, the value for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], TraditionalForm]],ExpressionUUID->
  "d1ead36d-1937-4aa8-8e60-302145d89fcc"],
 " also includes 12, state 1 of the second machine."
}], "Text",ExpressionUUID->"e03c529a-71f4-4b80-8033-e0be9cf2e724"],

Cell[TextData[{
 "That ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], TraditionalForm]],ExpressionUUID->
  "28f460fe-a04f-48d3-a63b-31b137a32447"],
 " is associated with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"2", ",", "11", ",", "12"}], "}"}], TraditionalForm]],
  ExpressionUUID->"5763df5a-96c1-47dc-aec9-8749d2665d6d"],
 " means that from the starting state of the concatenation and input 1, there \
are three options. First, going to state 2, the starting state of the second \
machine, corresponds to recognizing the string 1 followed by a string \
recognized by the second machine. Second, going to state 11, state 1 of the \
first machine, corresponds to building a string of all 1s, which is \
recognized by the first machine. Third, going to state 12, state 1 of the \
second machine, corresponds to the first machine contributing the empty \
string followed by 1 as the first character of a string recognized by the \
second machine."
}], "Text",ExpressionUUID->"3aed3c9f-f8f0-44f3-af28-9c067cd218ec"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implementation as a Function", "Subsubsection",ExpressionUUID->"323c08e9-8ffc-4ae4-abf4-36a2f83b0a4d"],

Cell["Here is the complete function based on the example above.", "Text",ExpressionUUID->"75a47b00-e0d1-4ea0-8c2b-310797009745"],

Cell[BoxData[
 RowBox[{
  RowBox[{"catAutomata", "[", 
   RowBox[{
   "atable_", ",", "astart_", ",", "afinal_", ",", "btable_", ",", "bstart_", 
    ",", "bfinal_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"abstart", ",", "abfinal", ",", "abtable", ",", "i"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"abstart", "=", 
      RowBox[{
       RowBox[{"10", "*", "astart"}], "+", "1"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"abfinal", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"10", "*", "#"}], "+", "2"}], ")"}], "&"}], ",", 
        "bfinal"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"afinal", ",", "astart"}], "]"}], "&&", 
        RowBox[{"MemberQ", "[", 
         RowBox[{"bfinal", ",", "bstart"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"abfinal", "=", 
        RowBox[{"Union", "[", 
         RowBox[{"abfinal", ",", 
          RowBox[{"{", "abstart", "}"}]}], "]"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"abtable", "=", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"Association", "@@", 
         RowBox[{"KeyValueMap", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"10", "*", 
                 RowBox[{"#1", "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], "+", "1"}], ",", 
               RowBox[{"#1", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "\[Rule]", 
             RowBox[{
              RowBox[{"10", "*", "#2"}], "+", "1"}]}], "&"}], ",", "atable"}],
           "]"}]}], ",", 
        RowBox[{"Association", "@@", 
         RowBox[{"KeyValueMap", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"10", "*", 
                 RowBox[{"#1", "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], "+", "2"}], ",", 
               RowBox[{"#1", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "\[Rule]", 
             RowBox[{
              RowBox[{"10", "*", "#2"}], "+", "2"}]}], "&"}], ",", "btable"}],
           "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Intersection", "[", 
           RowBox[{
            RowBox[{"atable", "[", "i", "]"}], ",", "afinal"}], "]"}], 
          "\[NotEqual]", 
          RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"abtable", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"10", "*", 
               RowBox[{"i", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], "+", "1"}], ",", 
             RowBox[{"i", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], "=", 
          RowBox[{"Union", "[", 
           RowBox[{
            RowBox[{"abtable", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"10", "*", 
                 RowBox[{"i", "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], "+", "1"}], ",", 
               RowBox[{"i", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], ",", 
            RowBox[{"{", "2", "}"}]}], "]"}]}]}], "]"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Keys", "[", "atable", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MemberQ", "[", 
        RowBox[{"afinal", ",", "astart"}], "]"}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"i", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "0"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"abtable", "[", 
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{"i", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], "=", 
            "\[IndentingNewLine]", 
            RowBox[{"Union", "[", 
             RowBox[{
              RowBox[{"abtable", "[", 
               RowBox[{"{", 
                RowBox[{"1", ",", 
                 RowBox[{"i", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], ",", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"10", "*", "#"}], "+", "2"}], ")"}], "&"}], ",", 
                RowBox[{"btable", "[", "i", "]"}]}], "]"}]}], "]"}]}]}], 
          "]"}], "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Keys", "[", "btable", "]"}]}], "}"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"abstart", ",", "abfinal", ",", "abtable"}], "}"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[83]:=",ExpressionUUID->"948703fa-0329-482d-af93-08e02d008d9c"],

Cell[TextData[{
 "Applying this to our examples and passing the results on to ",
 StyleBox["makeDeterministic", "Code"],
 " and ",
 StyleBox["findLanguage", "Code"],
 " shows us that the result does indeed recognize \[OpenCurlyDoubleQuote](1*\
\[Union]01)101\[CloseCurlyDoubleQuote]."
}], "Text",ExpressionUUID->"53f96fe1-4650-4528-a3b5-cb78fc1b081e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"cstart", ",", "cfinal", ",", "ctable"}], "}"}], "=", 
  RowBox[{"catAutomata", "[", 
   RowBox[{"atable", ",", "0", ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "3"}], "}"}], ",", "btable", ",", "0", ",", 
    RowBox[{"{", "3", "}"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[84]:=",ExpressionUUID->"ff264469-217c-4ddf-bf1e-65b753e940cc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"{", "32", "}"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "21", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "11", ",", "12"}], "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"11", ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"11", ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "11"}], "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"21", ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"21", ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "31"}], "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"31", ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"31", ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "12", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"12", ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "22", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"12", ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"22", ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"22", ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "32", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"32", ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"32", ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]}], "}"}]], "Output",
 CellLabel->"Out[84]=",ExpressionUUID->"65725d57-c31b-49eb-aa4b-8786cb9fe6b1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"cDstart", ",", "cDfinal", ",", "cDtable"}], "}"}], "=", 
  RowBox[{"makeDeterministic", "[", 
   RowBox[{"ctable", ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], ",", "cstart", ",", "cfinal"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[85]:=",ExpressionUUID->"32a6baae-2d4a-4052-a622-17c0922504e4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", "32", "}"}], "}"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "1", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "21", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "1", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "11", ",", "12"}], "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "21", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "21", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "31"}], "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "31"}], "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "31"}], "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "12", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "12", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "22", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "12", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "22", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "22", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "32", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "32", "}"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "32", "}"}], ",", "1"}], "}"}], "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "11", ",", "12"}], "}"}], ",", "0"}], "}"}], 
      "\[Rule]", 
      RowBox[{"{", "22", "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "11", ",", "12"}], "}"}], ",", "1"}], "}"}], 
      "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "11", ",", "12"}], "}"}]}]}], 
    "\[RightAssociation]"}]}], "}"}]], "Output",
 CellLabel->"Out[85]=",ExpressionUUID->"db88f9ec-4698-4df0-a119-3b894c6faeae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findLanguage", "[", 
  RowBox[{"cDtable", ",", "cDstart", ",", "cDfinal", ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "10"}], "]"}]], "Input",
 CellLabel->"In[86]:=",ExpressionUUID->"484dcf98-7590-49f5-979b-76df30d3ba1d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", 
     "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0",
      ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[86]=",ExpressionUUID->"b7a8c1ff-f31d-4c62-9532-c3f1ddbadd45"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["13.5 Turing Machines", "Section",
 CellTags->"Section5",ExpressionUUID->"3603e99d-185e-4f21-9f11-f8c06b7116a6"],

Cell[TextData[{
 "In this section, we will explore the Wolfram Language\[CloseCurlyQuote]s ",
 StyleBox[ButtonBox["TuringMachine",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TuringMachine"], "FunctionLink"],
 " function. We will then create our own model of a Turing machine to help \
you better understand this important concept in detail."
}], "Text",ExpressionUUID->"959ac50e-ab56-4283-a6f5-451c3f577762"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["TuringMachine", "Code"]], "Subsection",
 CellTags->"Section5a",ExpressionUUID->"db0b4f9f-52d6-421c-8cec-69d68da6e9f4"],

Cell[TextData[{
 "To illustrate the Wolfram Language\[CloseCurlyQuote]s built-in function, we \
will use Example 1 from Section 13.5. This Turing machine is defined by seven \
tuples: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["s", "0"], ",", "0", ",", 
     SubscriptBox["s", "0"], ",", "0", ",", "R"}], ")"}], TraditionalForm]],
  ExpressionUUID->"d13a4703-6938-4d8d-bf98-29e3d9e32d26"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["s", "0"], ",", "1", ",", 
     SubscriptBox["s", "1"], ",", "1", ",", "R"}], ")"}], TraditionalForm]],
  ExpressionUUID->"fb05ef6e-e873-442e-a396-4f607b95e99b"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["s", "0"], ",", "B", ",", 
     SubscriptBox["s", "3"], ",", "B", ",", "R"}], ")"}], TraditionalForm]],
  ExpressionUUID->"ce2cdce6-5a19-49fa-be18-925bae86d77c"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["s", "1"], ",", "0", ",", 
     SubscriptBox["s", "0"], ",", "0", ",", "R"}], ")"}], TraditionalForm]],
  ExpressionUUID->"b430e5f0-1eea-42ff-b768-7315ca4314e4"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["s", "1"], ",", "1", ",", 
     SubscriptBox["s", "2"], ",", "0", ",", "L"}], ")"}], TraditionalForm]],
  ExpressionUUID->"b1175787-fd19-42a2-a911-9df84a0b9465"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["s", "1"], ",", "B", ",", 
     SubscriptBox["s", "3"], ",", "B", ",", "R"}], ")"}], TraditionalForm]],
  ExpressionUUID->"fcd3ea8b-70a3-407e-a096-409ebd492316"],
 ", and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["s", "2"], ",", "1", ",", 
     SubscriptBox["s", "3"], ",", "0", ",", "R"}], ")"}], TraditionalForm]],
  ExpressionUUID->"6221b14a-314a-4110-90e7-f08898e13465"],
 ". "
}], "Text",ExpressionUUID->"80a86659-9c91-4507-8d0c-7e5b35f76f6b"],

Cell[TextData[{
 "The first argument of ",
 StyleBox[ButtonBox["TuringMachine",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TuringMachine"], "FunctionLink"],
 " will be that data, but in the form of ",
 StyleBox[ButtonBox["Rule",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Rule"], "FunctionLink"],
 "s (",
 StyleBox["->", "Code"],
 ") of the form ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     StyleBox["state", "CodeVar"], ",", 
     StyleBox["entry", "CodeVar"]}], "}"}], "->", 
   RowBox[{"{", 
    RowBox[{
     StyleBox["newstate", "CodeVar"], ",", 
     StyleBox["newentry", "CodeVar"], ",", 
     StyleBox["move", "CodeVar"]}], "}"}]}]], "myCode",ExpressionUUID->
  "0b081c77-5ccc-4444-9059-c0e6d32ab936"],
 ", where ",
 StyleBox["state", "CodeVar"],
 " and ",
 StyleBox["entry", "CodeVar"],
 " are the current state of the machine and the value seen by the head and ",
 StyleBox["newstate", "CodeVar",
  IgnoreSpellCheck->True],
 " and ",
 StyleBox["newentry", "CodeVar",
  IgnoreSpellCheck->True],
 " are the next state and the value to be written on the tape. The ",
 StyleBox["move", "CodeVar"],
 " is an integer representing how the head is to move, with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"+", "1"}], TraditionalForm]],ExpressionUUID->
  "2d47d90f-76e6-44fe-9de0-d8c146e9ee50"],
 " representing right and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "1"}], TraditionalForm]],ExpressionUUID->
  "69b67dda-7fe7-4860-ad8f-dfb238dcda63"],
 " left. Thus, the machine of Example 1 is described by the set of rules \
below."
}], "Text",ExpressionUUID->"d391839d-1e19-41f1-8f02-6f34528a7836"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"example1Rules", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "\"\<\>\""}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"3", ",", "\"\<\>\"", ",", "1"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"2", ",", "0", ",", 
       RowBox[{"-", "1"}]}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "\"\<\>\""}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"3", ",", "\"\<\>\"", ",", "1"}], "}"}]}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"3", ",", "0", ",", "1"}], "}"}]}]}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[87]:=",ExpressionUUID->"87777a64-fe80-4a7b-970b-cd60a92ca113"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "\<\"\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "\<\"\"\>", ",", "1"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "0", ",", 
      RowBox[{"-", "1"}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "\<\"\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "\<\"\"\>", ",", "1"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "0", ",", "1"}], "}"}]}]}], "}"}]], "Output",
 CellLabel->"Out[87]=",ExpressionUUID->"f59cd7b2-c197-4b08-863a-42c395a1e086"]
}, Open  ]],

Cell[TextData[{
 "The second argument to ",
 StyleBox[ButtonBox["TuringMachine",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TuringMachine"], "FunctionLink"],
 " specifies the initial condition of the tape. It is a list containing two \
members. The first element of the initial condition list will be the initial \
state of the machine. The second element of the initial condition is a list \
with two members, the first being a list representing a finite portion of the \
tape and the second specifying the value appearing at every position of the \
infinite tape outside the finite area. "
}], "Text",ExpressionUUID->"ed53ac54-e1ae-48b0-abf4-939dbfd7dca4"],

Cell[TextData[{
 "In our example, the machine will begin in state 0. The tape is initially \
{0,1,0,1,1,0} with blanks outside that range. Therefore, the second argument \
to ",
 StyleBox[ButtonBox["TuringMachine",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TuringMachine"], "FunctionLink"],
 " will be "
}], "Text",ExpressionUUID->"c24204b5-6169-44f9-976a-20fd64398d9f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"example1Init", "=", 
  RowBox[{"{", 
   RowBox[{"0", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}], "}"}],
       ",", "\"\<\>\""}], "}"}]}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[88]:=",ExpressionUUID->"e4cc30a4-7ab1-4420-8447-c7af0f868afd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}], "}"}], 
     ",", "\<\"\"\>"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[88]=",ExpressionUUID->"4fe69a2f-2eef-4b04-be05-e5b8cf3e0b8e"]
}, Open  ]],

Cell[TextData[{
 "Applying ",
 StyleBox[ButtonBox["TuringMachine",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TuringMachine"], "FunctionLink"],
 " to these two elements produces the following output:"
}], "Text",ExpressionUUID->"a529d963-ea2d-417d-b1c6-97f03be3727e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TuringMachine", "[", 
  RowBox[{"example1Rules", ",", "example1Init"}], "]"}]], "Input",
 CellLabel->"In[89]:=",ExpressionUUID->"626c71d9-d6d7-4324-bd1c-62cbe82235fa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}], "}"}], 
     ",", "\<\"\"\>"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[89]=",ExpressionUUID->"94075b45-dd0e-451c-b9bb-a30c4cdc8e2f"]
}, Open  ]],

Cell["\<\
This output represents the result of one step of the Turing machine. It is of \
the form\
\>", "Text",ExpressionUUID->"4a57595c-aa55-43ec-af78-e8e1aae44448"],

Cell[TextData[{
 " ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"{", "{"}], 
   StyleBox["state", "CodeVar"], ",", 
   StyleBox["pos", "CodeVar"], ",", 
   StyleBox["distance", "CodeVar"], 
   RowBox[{"}", ",", "{"}], 
   StyleBox["tape", "CodeVar"], ",", 
   StyleBox["rest", "CodeVar"], 
   RowBox[{"}", "}"}]}]], "myCode",ExpressionUUID->
  "1e4ca4e6-7257-4542-8a10-ef25332019fc"]
}], "Text",ExpressionUUID->"cf157ded-8040-4d7a-88c7-4394519861f8"],

Cell[TextData[{
 "where ",
 StyleBox["state", "CodeVar"],
 " is the new state of the machine, ",
 StyleBox["tape", "CodeVar"],
 " is the current state of the finite segment of tape with ",
 StyleBox["rest", "CodeVar"],
 " filling the rest of the infinite tape, ",
 StyleBox["pos", "CodeVar"],
 " is the position of the head relative to the list ",
 StyleBox["tape", "CodeVar"],
 ", and ",
 StyleBox["distance", "CodeVar"],
 " is how far the head has moved from its starting position. So, the output \
above indicates that the machine is still in state 0 but has moved one \
position to the left."
}], "Text",ExpressionUUID->"e733f7a2-90be-4d1f-8fed-af7d6aea9221"],

Cell["\<\
Note that you can initialize a machine with a position argument similar to \
this output, but without the distance. The following will start the machine \
at the final 1 of the tape:\
\>", "Text",ExpressionUUID->"b3752b07-6f3b-462a-97ca-b0be81bc9b6d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TuringMachine", "[", 
  RowBox[{"example1Rules", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}], 
        "}"}], ",", "\"\<\>\""}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[90]:=",ExpressionUUID->"327d977c-ff86-4429-84dd-1db7aabf6279"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "6", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}], "}"}], 
     ",", "\<\"\"\>"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[90]=",ExpressionUUID->"99673160-af43-4586-99a4-72a00c66861e"]
}, Open  ]],

Cell["\<\
Note that the machine has moved one position to the left and changed to state \
1.\
\>", "Text",ExpressionUUID->"ce69f44a-1ef4-40cf-9f7a-f84a562d1ce2"],

Cell["\<\
An optional third argument allows you run the machine more than one step.\
\>", "Text",ExpressionUUID->"8760920f-f7a9-4dc5-990f-28d7752208b1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TuringMachine", "[", 
  RowBox[{"example1Rules", ",", "example1Init", ",", "5"}], "]"}]], "Input",
 CellLabel->"In[91]:=",ExpressionUUID->"29b7e24f-70d5-4bc4-88b1-995e604d9ea2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "4", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "5", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0"}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[91]=",ExpressionUUID->"7822ba8c-5342-47be-99a7-ba9acc23ddf5"]
}, Open  ]],

Cell["\<\
Note that the output is a list of lists representing each step along the way. \
The final element indicates that after 5 steps, the machine is in state 2 at \
position 4.\
\>", "Text",ExpressionUUID->"da5bdd8d-b6e1-4222-9880-cb4812286732"],

Cell[TextData[{
 "For a machine with a terminal state, we can run it to completion with a ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop as below. Note that ",
 StyleBox[ButtonBox["TuringMachine",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TuringMachine"], "FunctionLink"],
 " allows its initialization argument to include the distance parameter, so \
that we can feed its output back to it."
}], "Text",ExpressionUUID->"d666ef8d-40d8-472b-93b7-b239ad89efac"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"machinestate", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}], 
        "}"}], ",", "\"\<\>\""}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"While", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"machinestate", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], "\[NotEqual]", "3"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"machinestate", "=", 
     RowBox[{"TuringMachine", "[", 
      RowBox[{"example1Rules", ",", "machinestate"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], 
  ";"}], "\[IndentingNewLine]", "machinestate"}], "Input",
 CellLabel->"In[92]:=",ExpressionUUID->"2afd9807-63ed-4d4e-b903-d325ef1a81be"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"3", ",", "5", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], 
     ",", "\<\"\"\>"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[94]=",ExpressionUUID->"e789a033-d4b4-4e08-abc0-40dac532ba25"]
}, Open  ]],

Cell["\<\
Note that this agrees with the result of Example 1 in the textbook.\
\>", "Text",ExpressionUUID->"917460c1-c3fb-499d-ad39-197024bc3bcf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Creating a Turing Machine Function", "Subsection",
 CellTags->"Section5b",ExpressionUUID->"33f1e735-ca22-4cce-96ba-f86c21d5c372"],

Cell[TextData[{
 "In our model, the tape will be represented by a list, with the assumption \
that all elements to the left and right of the bounds of the list are blanks. \
The blank symbol will be represented by the symbol ",
 StyleBox["B", "Code"],
 " and left and right by the symbols ",
 StyleBox["L", "Code"],
 " and ",
 StyleBox["R", "Code"],
 ". We ensure that these have not been assigned values by applying ",
 StyleBox[ButtonBox["Clear",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Clear"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"0c8004e3-2658-40fa-8f50-7e35d1e8587c"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"B", ",", "L", ",", "R"}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[95]:=",ExpressionUUID->"bbfa0d6f-4528-4bf1-b71f-6400e4a11d8a"],

Cell[CellGroupData[{

Cell["The Partial Function", "Subsubsection",ExpressionUUID->"04187dc7-9975-4855-81c3-d61fd8384e49"],

Cell[TextData[{
 "The text uses the convention that the partial function that controls the \
operation of the Turing machine is defined by a set of five-tuples. It will \
be more convenient for our functions to represent the partial function as an \
association whose keys are pairs ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"s", ",", "x"}], "}"}], TraditionalForm]],ExpressionUUID->
  "c1b75838-f62b-4a7e-9c1f-2cf6a8655699"],
 " and whose values are triples ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"s", "'"}], ",", 
     RowBox[{"x", "'"}], ",", "d"}], "}"}], TraditionalForm]],ExpressionUUID->
  "6ffef7c6-95a0-4605-a89e-5e3b7977bd4a"],
 "."
}], "Text",ExpressionUUID->"2f7b620d-e4b5-46d2-a909-3afae5172a91"],

Cell["\<\
We create a function that will transform the set of 5-tuples representation \
into the association representation. \
\>", "Text",ExpressionUUID->"fa96afad-4a78-44bd-a2a9-e23fbdcac996"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tuplesToIndexed", "[", "S_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "x", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Association", "@@", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}], "\[Rule]", 
        RowBox[{"x", "[", 
         RowBox[{"[", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4", ",", "5"}], "}"}], "]"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "S"}], "}"}]}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[96]:=",ExpressionUUID->"b09e8c3b-81fe-40e1-be5c-5b6b4f54ff16"],

Cell["\<\
Applying this function to the set of tuples given in Example 1 provides us \
with an example of a partial function to work with.\
\>", "Text",ExpressionUUID->"fb4ce1fc-dd11-4a37-b622-dd1e6c48b5a1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ex1", "=", 
  RowBox[{"tuplesToIndexed", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "R"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "1", ",", "1", ",", "R"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "B", ",", "3", ",", "B", ",", "R"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "R"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "2", ",", "0", ",", "L"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "B", ",", "3", ",", "B", ",", "R"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1", ",", "3", ",", "0", ",", "R"}], "}"}]}], "}"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[97]:=",ExpressionUUID->"602495c2-2b18-4fce-89d4-f61197527bcf"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "B"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "B", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "0", ",", "L"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "B"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "B", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "0", ",", "R"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[97]=",ExpressionUUID->"4bdf9c92-45bf-44a0-8339-7adc4d1c2cbb"]
}, Open  ]],

Cell[TextData[{
 "Note that ",
 StyleBox["B", "Code"],
 ", ",
 StyleBox["L", "Code"],
 ", and ",
 StyleBox["R", "Code"],
 " must all be unassigned symbols, otherwise they will be evaluated within \
the set of 5-tuples and will produce unexpected results."
}], "Text",ExpressionUUID->"794e4cfb-dea9-4a66-a396-e4ca3c708f13"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Turing Machine Function", "Subsubsection",ExpressionUUID->"e25de110-34d5-4711-b7f0-089b1b07f27a"],

Cell["\<\
Our Turing machine function will accept as input an association representing \
the partial function, a list representing the status of the tape before \
running the machine, and the initial state. It will return the final tape and \
the final state.\
\>", "Text",ExpressionUUID->"51f14aa8-c014-423a-ac25-06bd36503c0d"],

Cell[TextData[{
 "When the function begins, we initialize the symbol ",
 StyleBox["pos", "Code"],
 " to 1, indicating that the control head is positioned at the leftmost \
element in the tape. We set the ",
 StyleBox["state", "Code"],
 " of the machine to the initial state and copy the ",
 StyleBox["tape", "Code"],
 " from the argument as well. We also compute the ",
 StyleBox["domain", "Code"],
 " of the partial function using the ",
 StyleBox["getIndices", "Code"],
 " function we created in the previous section. This will make it easier to \
check whether we have reached a halt."
}], "Text",ExpressionUUID->"90411063-824b-4b57-885a-cabd0ca99788"],

Cell[TextData[{
 "The main work of the function will take place within a ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop controlled by the condition that the domain of the function includes \
the pair consisting of the current state and the entry on the tape at the \
current position."
}], "Text",ExpressionUUID->"7ccc52af-e824-4f4f-8fd3-5b04a295122f"],

Cell[TextData[{
 "Within the loop, we first obtain the values of the new state, new tape \
entry, and direction from the partial function. We then set the ",
 StyleBox["state", "Code"],
 " to the new state, change the entry on the ",
 StyleBox["tape", "Code"],
 ", and update the position ",
 StyleBox["pos", "Code"],
 ". Note that when changing the position of the control head, we must take \
care not to exceed the bounds of the list representing the tape. If the \
previous position was location 1 in the list and the direction is left, then \
instead of changing the position, we extend the list by adding a blank on the \
left with the ",
 StyleBox[ButtonBox["PrependTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PrependTo"], "FunctionLink"],
 " function. On the other hand, if the previous position was the right end of \
the tape and the direction is right, then we increase the position and extend \
the tape to the right via ",
 StyleBox[ButtonBox["AppendTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AppendTo"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"ca8d084c-8ad7-496e-aa41-0e7b2ff679e3"],

Cell["Here is the function.", "Text",ExpressionUUID->"d240b0ea-542c-4709-859e-d883a98813ce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Turing", "[", 
   RowBox[{"f_", ",", "t_", ",", "init_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"pos", "=", "1"}], ",", 
      RowBox[{"state", "=", "init"}], ",", 
      RowBox[{"tape", "=", "t"}], ",", "domain", ",", "y"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"domain", "=", 
      RowBox[{"Keys", "[", "f", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"MemberQ", "[", 
        RowBox[{"domain", ",", 
         RowBox[{"{", 
          RowBox[{"state", ",", 
           RowBox[{"tape", "[", 
            RowBox[{"[", "pos", "]"}], "]"}]}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"y", "=", 
         RowBox[{"f", "[", 
          RowBox[{"{", 
           RowBox[{"state", ",", 
            RowBox[{"tape", "[", 
             RowBox[{"[", "pos", "]"}], "]"}]}], "}"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"state", "=", 
         RowBox[{"y", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tape", "[", 
          RowBox[{"[", "pos", "]"}], "]"}], "=", 
         RowBox[{"y", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Which", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"pos", "\[Equal]", "1"}], "&&", 
           RowBox[{
            RowBox[{"y", "[", 
             RowBox[{"[", "3", "]"}], "]"}], "===", "L"}]}], ",", 
          RowBox[{"PrependTo", "[", 
           RowBox[{"tape", ",", "B"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pos", "\[Equal]", 
            RowBox[{"Length", "[", "tape", "]"}]}], "&&", 
           RowBox[{
            RowBox[{"y", "[", 
             RowBox[{"[", "3", "]"}], "]"}], "===", "R"}]}], ",", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"tape", ",", "B"}], "]"}], ";", 
           RowBox[{"pos", "++"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"y", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "===", "L"}], ",", 
          RowBox[{"pos", "--"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"y", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "===", "R"}], ",", 
          RowBox[{"pos", "++"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"tape", ",", "state"}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[98]:=",ExpressionUUID->"2c2f6209-b802-4453-a4fb-72e936c14f4c"],

Cell["\<\
We use the function to run the Turing machine from Example 1 on the tape \
shown in Figure 2a.\
\>", "Text",ExpressionUUID->"df62c241-1294-438b-980a-f9ac30288062"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Turing", "[", 
  RowBox[{"ex1", ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}], "}"}], 
   ",", "0"}], "]"}]], "Input",
 CellLabel->"In[99]:=",ExpressionUUID->"dcd4d05e-d9c0-4ed6-8e38-a5cad0a2d829"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], 
   ",", "3"}], "}"}]], "Output",
 CellLabel->"Out[99]=",ExpressionUUID->"20cf2395-084f-49b2-8ff6-e1d824010d72"]
}, Open  ]],

Cell["\<\
Observe that this agrees with Figure 2 from Section 13.5 in the textbook.\
\>", "Text",ExpressionUUID->"3e8090de-518a-473b-b01b-29a88b61e38f"],

Cell[TextData[{
 "We create a verbose version of this function as well. The operation of the \
verbose version is identical to ",
 StyleBox["Turing", "Code"],
 ", but it displays the status of the machine at every step."
}], "Text",ExpressionUUID->"9c5945ee-9d8e-447e-9469-2706595ec1b5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"verboseTuring", "[", 
   RowBox[{"f_", ",", "t_", ",", "init_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"pos", "=", "1"}], ",", 
      RowBox[{"state", "=", "init"}], ",", 
      RowBox[{"tape", "=", "t"}], ",", "domain", ",", "y", ",", 
      "displayTape"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"domain", "=", 
      RowBox[{"Keys", "[", "f", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"displayTape", "=", "t"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"displayTape", "[", 
       RowBox[{"[", "pos", "]"}], "]"}], "=", 
      RowBox[{"\"\<\[Rule]\>\"", "<>", 
       RowBox[{"ToString", "[", 
        RowBox[{"tape", "[", 
         RowBox[{"[", "pos", "]"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"displayTape", ",", "state"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"MemberQ", "[", 
        RowBox[{"domain", ",", 
         RowBox[{"{", 
          RowBox[{"state", ",", 
           RowBox[{"tape", "[", 
            RowBox[{"[", "pos", "]"}], "]"}]}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"y", "=", 
         RowBox[{"f", "[", 
          RowBox[{"{", 
           RowBox[{"state", ",", 
            RowBox[{"tape", "[", 
             RowBox[{"[", "pos", "]"}], "]"}]}], "}"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"state", "=", 
         RowBox[{"y", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tape", "[", 
          RowBox[{"[", "pos", "]"}], "]"}], "=", 
         RowBox[{"y", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Which", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"pos", "\[Equal]", "1"}], "&&", 
           RowBox[{
            RowBox[{"y", "[", 
             RowBox[{"[", "3", "]"}], "]"}], "===", "L"}]}], ",", 
          RowBox[{"PrependTo", "[", 
           RowBox[{"tape", ",", "B"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pos", "\[Equal]", 
            RowBox[{"Length", "[", "tape", "]"}]}], "&&", 
           RowBox[{
            RowBox[{"y", "[", 
             RowBox[{"[", "3", "]"}], "]"}], "===", "R"}]}], ",", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"tape", ",", "B"}], "]"}], ";", 
           RowBox[{"pos", "++"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"y", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "===", "L"}], ",", 
          RowBox[{"pos", "--"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"y", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "===", "R"}], ",", 
          RowBox[{"pos", "++"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"displayTape", "=", "tape"}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"displayTape", "[", 
          RowBox[{"[", "pos", "]"}], "]"}], "=", 
         RowBox[{"\"\<\[Rule]\>\"", "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{"tape", "[", 
            RowBox[{"[", "pos", "]"}], "]"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{"displayTape", ",", "state"}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"tape", ",", "state"}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[100]:=",ExpressionUUID->"cf1e1885-f231-4d6f-8a81-9f9b5ac198dc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"verboseTuring", "[", 
  RowBox[{"ex1", ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}], "}"}], 
   ",", "0"}], "]"}]], "Input",
 CellLabel->
  "In[101]:=",ExpressionUUID->"6204586c-9a88-4290-904c-5c0cb13a0486"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"\[Rule]0\"\>", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
     "0"}], "}"}], "\[InvisibleSpace]", "0"}],
  SequenceForm[{"\[Rule]0", 1, 0, 1, 1, 0}, 0],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[101]:=",ExpressionUUID->"5ecb001a-6a8f-4f17-a1c3-70aaca5b4946"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "\<\"\[Rule]1\"\>", ",", "0", ",", "1", ",", "1", ",", "0"}], 
    "}"}], "\[InvisibleSpace]", "0"}],
  SequenceForm[{0, "\[Rule]1", 0, 1, 1, 0}, 0],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[101]:=",ExpressionUUID->"29c423b5-e4a2-45d4-8d98-72ca5647c802"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "\<\"\[Rule]0\"\>", ",", "1", ",", "1", ",", "0"}], 
    "}"}], "\[InvisibleSpace]", "1"}],
  SequenceForm[{0, 1, "\[Rule]0", 1, 1, 0}, 1],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[101]:=",ExpressionUUID->"7acc2e9e-8903-4fca-a6f4-d88625672a8a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "0", ",", "\<\"\[Rule]1\"\>", ",", "1", ",", "0"}], 
    "}"}], "\[InvisibleSpace]", "0"}],
  SequenceForm[{0, 1, 0, "\[Rule]1", 1, 0}, 0],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[101]:=",ExpressionUUID->"cf23e92c-f1f4-45d4-a231-ef55d44209ab"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "0", ",", "1", ",", "\<\"\[Rule]1\"\>", ",", "0"}], 
    "}"}], "\[InvisibleSpace]", "1"}],
  SequenceForm[{0, 1, 0, 1, "\[Rule]1", 0}, 1],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[101]:=",ExpressionUUID->"a3e5486c-2cbb-4779-a05c-d44e83300b1e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "0", ",", "\<\"\[Rule]1\"\>", ",", "0", ",", "0"}], 
    "}"}], "\[InvisibleSpace]", "2"}],
  SequenceForm[{0, 1, 0, "\[Rule]1", 0, 0}, 2],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[101]:=",ExpressionUUID->"966beed9-9122-4fbf-8ee6-5be5a82ef62e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "0", ",", "0", ",", "\<\"\[Rule]0\"\>", ",", "0"}], 
    "}"}], "\[InvisibleSpace]", "3"}],
  SequenceForm[{0, 1, 0, 0, "\[Rule]0", 0}, 3],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[101]:=",ExpressionUUID->"4c2d8eec-28f3-4bed-aea2-9c6f5cef46ed"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], 
   ",", "3"}], "}"}]], "Output",
 CellLabel->
  "Out[101]=",ExpressionUUID->"44ec6cd9-91e2-4313-83c9-b0d5d3e553cb"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Applications of Turing Machines", "Subsection",
 CellTags->"Section5c",ExpressionUUID->"6cf85a27-4c30-42ec-8da1-e591b2ec2870"],

Cell["\<\
We now apply our Turing machine function to two applications: recognizing \
strings in a language and computing functions.\
\>", "Text",ExpressionUUID->"9d00c595-58ba-477c-a6f1-c7a460f54c83"],

Cell[CellGroupData[{

Cell["Recognizing Sets", "Subsubsection",ExpressionUUID->"6d999341-a8f0-4997-8e79-3a389262e44c"],

Cell[TextData[{
 "We will implement the Turing machine for recognizing ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SuperscriptBox["0", "n"], 
      SuperscriptBox["1", "n"]}], "|", 
     RowBox[{"n", "\[GreaterEqual]", "1"}]}], "}"}], TraditionalForm]],
  ExpressionUUID->"0e4c2672-5f8b-45ac-b4a9-219e52cd466b"],
 "."
}], "Text",ExpressionUUID->"83dacd2a-b8d0-477a-be69-584f7c93d763"],

Cell["\<\
The partial function was given in the solution to Example 3. To be safe, we \
again clear all the symbols used.\
\>", "Text",ExpressionUUID->"62a2d993-b298-4a24-bddd-dacaf5cf17e8"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"M", ",", "B", ",", "L", ",", "R"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ex3", "=", 
  RowBox[{"tuplesToIndexed", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1", ",", "M", ",", "R"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1", ",", "0", ",", "R"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "R"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "M", ",", "2", ",", "M", ",", "L"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "B", ",", "2", ",", "B", ",", "L"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1", ",", "3", ",", "M", ",", "L"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "1", ",", "3", ",", "1", ",", "L"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "0", ",", "4", ",", "0", ",", "L"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "M", ",", "5", ",", "M", ",", "R"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "0", ",", "4", ",", "0", ",", "L"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "M", ",", "0", ",", "M", ",", "R"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "M", ",", "6", ",", "M", ",", "R"}], "}"}]}], "}"}], 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[102]:=",ExpressionUUID->"70f119d1-8928-4e21-b1d7-029533884145"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "M", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "M"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "M", ",", "L"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "B"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "B", ",", "L"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "M", ",", "L"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "L"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"4", ",", "0", ",", "L"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "M"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"5", ",", "M", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"4", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"4", ",", "0", ",", "L"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"4", ",", "M"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "M", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5", ",", "M"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"6", ",", "M", ",", "R"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[103]=",ExpressionUUID->"33667ebf-16ef-4ad5-8c3b-145a12678708"]
}, Open  ]],

Cell["\<\
To determine whether or not a string is in the language, we only have to \
apply the Turing machine to the string and check the exit state.\
\>", "Text",ExpressionUUID->"435a6548-7ce9-4a8b-a652-53c04fd493bf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Turing", "[", 
  RowBox[{"ex3", ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
     "1"}], "}"}], ",", "0"}], "]"}]], "Input",
 CellLabel->
  "In[104]:=",ExpressionUUID->"3dd48bf7-640e-46d0-871f-bf44a917335b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "M", ",", "M", ",", "M", ",", "M", ",", "M", ",", "M", ",", "M", ",", "M",
      ",", "B"}], "}"}], ",", "6"}], "}"}]], "Output",
 CellLabel->
  "Out[104]=",ExpressionUUID->"e09d767f-23f2-44a8-9031-60450f9fb11f"]
}, Open  ]],

Cell["\<\
The fact that the machine halted in state 6, the final state, indicates that \
it recognizes the string. On the other hand,\
\>", "Text",ExpressionUUID->"bc3ec443-4525-4368-b263-2b7a27498be6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Turing", "[", 
  RowBox[{"ex3", ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "1", ",", "1"}], "}"}], ",", "0"}], 
  "]"}]], "Input",
 CellLabel->
  "In[105]:=",ExpressionUUID->"ad1ccf34-d6fa-4537-8703-96b5716afa4d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"M", ",", "M", ",", "M", ",", "M", ",", "M", ",", "B"}], "}"}], 
   ",", "2"}], "}"}]], "Output",
 CellLabel->
  "Out[105]=",ExpressionUUID->"11107729-feb7-4b62-ae2b-484a02a73efb"]
}, Open  ]],

Cell["\<\
halted in state 2, indicating that the string is not in the language.\
\>", "Text",ExpressionUUID->"244990c6-df5f-4100-b19a-ff11c999c317"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Adding Nonnegative Integers", "Subsubsection",ExpressionUUID->"49834700-b027-4b40-9e14-234a4d5c56b4"],

Cell["\<\
Example 4 describes how to use Turing machines to perform addition.\
\>", "Text",ExpressionUUID->"6198db02-97e3-44dc-a055-23c183128474"],

Cell["The machine is described by the following tuples:", "Text",ExpressionUUID->"633e16ce-a88e-4040-bf26-e4a6855810b5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"adder", "=", 
  RowBox[{"tuplesToIndexed", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "1", ",", "B", ",", "R"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "\"\<*\>\"", ",", "3", ",", "B", ",", "R"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "2", ",", "B", ",", "R"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1", ",", "2", ",", "1", ",", "R"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "\"\<*\>\"", ",", "3", ",", "1", ",", "R"}], "}"}]}], 
    "}"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[106]:=",ExpressionUUID->"0cade722-eb2d-4d00-8842-16ad86a4796a"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "B", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "\<\"*\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "B", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "B", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "\<\"*\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "R"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[106]=",ExpressionUUID->"4e27a207-2295-4698-a8cc-789d13dd6f6b"]
}, Open  ]],

Cell[TextData[{
 "We add two numbers ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "c6d373a1-2d98-4639-a39d-788926cb74db"],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "ff0c501c-290c-4d08-ac47-ff92f9df3282"],
 " by using the unary representation tape consisting of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "236a493f-ed16-4874-a0b5-cb1b8af49598"],
 " ones followed by an asterisk and then ",
 Cell[BoxData[
  FormBox[
   RowBox[{"b", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "5bb536ce-b429-44a7-802a-cc75f8859d2a"],
 " ones. We create a small function to create the tape given ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "451926ca-c301-4ced-8181-acc15adada91"],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "db843782-57d8-4e7d-a99e-234b43bc914a"],
 "."
}], "Text",ExpressionUUID->"03ef495c-e79f-469e-a75d-4dd63b61ccd8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"unaryTape", "[", 
   RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"ConstantArray", "[", 
     RowBox[{"1", ",", 
      RowBox[{"{", 
       RowBox[{"a", "+", "1"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", "\"\<*\>\"", "}"}], ",", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{"1", ",", 
      RowBox[{"{", 
       RowBox[{"b", "+", "1"}], "}"}]}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[107]:=",ExpressionUUID->"0cee2b76-fd79-4827-8cee-2bd7fe81866d"],

Cell["The tape used to add 3 and 4 is shown below.", "Text",ExpressionUUID->"e728e1b3-9a65-4e99-bed0-b0d1a976ead1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"unaryTape", "[", 
  RowBox[{"3", ",", "4"}], "]"}]], "Input",
 CellLabel->
  "In[108]:=",ExpressionUUID->"f5cfcf75-326e-4d3b-8853-5705f5e3f292"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "1", ",", "1", ",", "\<\"*\"\>", ",", "1", ",", "1", 
   ",", "1", ",", "1", ",", "1"}], "}"}]], "Output",
 CellLabel->
  "Out[108]=",ExpressionUUID->"ac6d3036-8817-45b4-b57a-9e5bf090af4a"]
}, Open  ]],

Cell[TextData[{
 "Performing addition is accomplished by applying ",
 StyleBox["Turing", "Code"],
 " to the transition function and the tape."
}], "Text",ExpressionUUID->"9c1a2aa5-2ce9-4423-8a64-6051ab784fdd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Turing", "[", 
  RowBox[{"adder", ",", 
   RowBox[{"unaryTape", "[", 
    RowBox[{"3", ",", "4"}], "]"}], ",", "0"}], "]"}]], "Input",
 CellLabel->
  "In[109]:=",ExpressionUUID->"53719466-2369-4ca3-b60f-f6e7d712cbe8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "B", ",", "B", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "1", ",", "1"}], "}"}], ",", "3"}], "}"}]], "Output",
 CellLabel->
  "Out[109]=",ExpressionUUID->"f256c298-06af-4d59-bfaa-e89a8d663f9a"]
}, Open  ]],

Cell["\<\
You can see that this contains a string of 8 ones, indicating a result of 7.\
\>", "Text",ExpressionUUID->"84dfc0db-0d13-40b3-ad44-73df795a51c3"],

Cell[TextData[{
 "Using the verbose form of ",
 StyleBox["Turing", "Code"],
 ", you can see how the Turing adder operates."
}], "Text",ExpressionUUID->"1b116885-0d1c-4e06-a024-724993883cb3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"verboseTuring", "[", 
  RowBox[{"adder", ",", 
   RowBox[{"unaryTape", "[", 
    RowBox[{"3", ",", "4"}], "]"}], ",", "0"}], "]"}]], "Input",
 CellLabel->
  "In[110]:=",ExpressionUUID->"77129f7b-ca78-404c-978f-3b89d9dee01b"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"\[Rule]1\"\>", ",", "1", ",", "1", ",", "1", 
     ",", "\<\"*\"\>", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], 
    "}"}], "\[InvisibleSpace]", "0"}],
  SequenceForm[{"\[Rule]1", 1, 1, 1, "*", 1, 1, 1, 1, 1}, 0],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[110]:=",ExpressionUUID->"db52014b-6d5f-4d49-beb0-3b1df304f9a7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "B", ",", "\<\"\[Rule]1\"\>", ",", "1", ",", "1", ",", "\<\"*\"\>", ",", 
     "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], 
   "\[InvisibleSpace]", "1"}],
  SequenceForm[{$CellContext`B, "\[Rule]1", 1, 1, "*", 1, 1, 1, 1, 1}, 1],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[110]:=",ExpressionUUID->"6517a193-e5da-4f80-a6a8-7ca44c8a3a3d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "B", ",", "B", ",", "\<\"\[Rule]1\"\>", ",", "1", ",", "\<\"*\"\>", ",", 
     "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], 
   "\[InvisibleSpace]", "2"}],
  SequenceForm[{$CellContext`B, $CellContext`B, "\[Rule]1", 1, "*", 1, 1, 1, 
    1, 1}, 2],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[110]:=",ExpressionUUID->"88a285d8-5fb8-4bdb-b8ee-bf0f9019f799"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "B", ",", "B", ",", "1", ",", "\<\"\[Rule]1\"\>", ",", "\<\"*\"\>", ",", 
     "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], 
   "\[InvisibleSpace]", "2"}],
  SequenceForm[{$CellContext`B, $CellContext`B, 1, "\[Rule]1", "*", 1, 1, 1, 
    1, 1}, 2],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[110]:=",ExpressionUUID->"4e363b9a-62ee-426c-a478-17f6dfca195d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "B", ",", "B", ",", "1", ",", "1", ",", "\<\"\[Rule]*\"\>", ",", "1", ",",
      "1", ",", "1", ",", "1", ",", "1"}], "}"}], "\[InvisibleSpace]", "2"}],
  SequenceForm[{$CellContext`B, $CellContext`B, 1, 1, "\[Rule]*", 1, 1, 1, 1, 
    1}, 2],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[110]:=",ExpressionUUID->"02851220-c1e0-465f-a504-08aa3fa724be"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "B", ",", "B", ",", "1", ",", "1", ",", "1", ",", "\<\"\[Rule]1\"\>", ",",
      "1", ",", "1", ",", "1", ",", "1"}], "}"}], "\[InvisibleSpace]", "3"}],
  SequenceForm[{$CellContext`B, $CellContext`B, 1, 1, 1, "\[Rule]1", 1, 1, 1, 
    1}, 3],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[110]:=",ExpressionUUID->"83f503e6-1e89-4aa8-b05b-9d137a77c536"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "B", ",", "B", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "1", ",", "1"}], "}"}], ",", "3"}], "}"}]], "Output",
 CellLabel->
  "Out[110]=",ExpressionUUID->"24f56455-8420-4fb9-bd5c-f0a747713121"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Solutions to Computer Projects and Computations and Explorations\
\>", "Section",
 CellTags->"Solutions",ExpressionUUID->"9db3599f-7843-49c1-a380-bb674e228fc1"],

Cell[CellGroupData[{

Cell["Computer Projects 8", "Subsection",
 CellTags->
  "SolutionsCP8",ExpressionUUID->"e11b4d2d-a318-4495-8be9-2bc66975eaa3"],

Cell["\<\
Given the state table of a nondeterministic finite-state automaton and a \
string, decide whether this string is recognized by the automaton.\
\>", "Problem",ExpressionUUID->"2534ab5c-e88f-4899-8748-f68c83d7e610"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " One solution to this problem, the solution used earlier in this chapter, \
is to find the deterministic automaton that recognizes the same language and \
use it to decide whether the string is recognized or not. This is what we \
have been doing when we apply ",
 StyleBox["findLanguage", "Code"],
 " to the result of ",
 StyleBox["makeDeterministic", "Code"],
 "."
}], "Text",ExpressionUUID->"2f34bcb3-0d2c-47e6-8b7b-f22268522107"],

Cell[TextData[{
 "Here, we will take a direct approach. For deterministic machines, we \
created two functions: ",
 StyleBox["extendedTransition", "Code"],
 " and ",
 StyleBox["recognizedQ", "Code"],
 ". The ",
 StyleBox["recognizedQ", "Code"],
 " function merely called ",
 StyleBox["extendedTransition", "Code"],
 " and checked whether the result was a final state or not. The ",
 StyleBox["extendedTransition", "Code"],
 " function took a state, an input string, and a transition table, and \
determined the state of the machine following the processing of the input."
}], "Text",ExpressionUUID->"1d8a0770-8b9b-4152-b313-280d8b9646a7"],

Cell[TextData[{
 "Our approach for nondeterministic machines will be similar. We will create \
two functions: ",
 StyleBox["extendedTransitionND", "Code"],
 " and ",
 StyleBox["recognizedNDQ", "Code"],
 ". The main difference between the deterministic machines and \
nondeterministic machines is that with nondeterministic machines, given the \
initial state and an input, we do not know the next state. Instead, there is \
a set of possible states."
}], "Text",ExpressionUUID->"1a02e0f3-5e35-4315-9f6b-76611f08e9bd"],

Cell[TextData[{
 StyleBox["extendedTransitionND", "Code"],
 " will therefore take a set of possible states, an input, and a transition \
table as its arguments. For each member of the input string, it will apply \
the transition table to each of the possible states, producing a new set of \
possible states. It will return the set of possible states after processing \
each element in the input string."
}], "Text",ExpressionUUID->"98a7d362-69b1-427e-9f71-80947d08d30f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"extendedTransitionND", "[", 
   RowBox[{"states_", ",", "input_", ",", "transFunc_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"curStates", ",", "i", ",", "s", ",", "newStates"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"curStates", "=", "states"}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"Length", "[", "input", "]"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"newStates", "=", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{"newStates", "=", 
           RowBox[{"Union", "[", 
            RowBox[{"newStates", ",", 
             RowBox[{"transFunc", "[", 
              RowBox[{"{", 
               RowBox[{"s", ",", 
                RowBox[{"input", "[", 
                 RowBox[{"[", "i", "]"}], "]"}]}], "}"}], "]"}]}], "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"s", ",", "curStates"}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"curStates", "=", "newStates"}]}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", "curStates"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[111]:=",ExpressionUUID->"25f231be-de3b-4199-8cd3-c2b14af2e321"],

Cell[TextData[{
 "A nondeterministic machine recognizes a string if the result of running the \
machine from the starting state with the input string results in a set of \
possible ending states that includes at least one final state. We write ",
 StyleBox["recognizedNDQ", "Code"],
 " to call ",
 StyleBox["extendedTransitionND", "Code"],
 " and check to see if the result intersects the set of final states."
}], "Text",ExpressionUUID->"13d8244d-a153-4a8b-9d2b-0e89111737e4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"recognizedNDQ", "[", 
   RowBox[{"x_", ",", "transFunc_", ",", "init_", ",", "final_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "endStates", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"endStates", "=", 
      RowBox[{"extendedTransitionND", "[", 
       RowBox[{
        RowBox[{"{", "init", "}"}], ",", "x", ",", "transFunc"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Intersection", "[", 
       RowBox[{"endStates", ",", "final"}], "]"}], "\[NotEqual]", 
      RowBox[{"{", "}"}]}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[112]:=",ExpressionUUID->"32163b4a-0846-4344-949f-f449ce069844"],

Cell[TextData[{
 "With ",
 StyleBox["recognizedNDQ", "Code"],
 " in hand, we can create ",
 StyleBox["findLanguageND", "Code"],
 ". This is effectively identical to ",
 StyleBox["findLanguage", "Code"],
 "."
}], "Text",ExpressionUUID->"882df558-e7f0-4f34-bc88-93a062ad5af5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findLanguageND", "[", 
   RowBox[{"transFunc_", ",", "init_", ",", "final_", ",", "A_", ",", "n_"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"An", ",", "x", ",", "L"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"An", "=", 
      RowBox[{"kleene", "[", 
       RowBox[{"A", ",", "n"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"L", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"recognizedNDQ", "[", 
          RowBox[{"x", ",", "transFunc", ",", "init", ",", "final"}], "]"}], 
         ",", 
         RowBox[{"L", "=", 
          RowBox[{"Union", "[", 
           RowBox[{"L", ",", 
            RowBox[{"{", "x", "}"}]}], "]"}]}]}], "]"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "An"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "L"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[113]:=",ExpressionUUID->"721ab059-3ec7-4127-ad98-40f0f1f72db0"],

Cell[TextData[{
 "Applying this function to the machine defined by transition function ",
 StyleBox["ctable", "Code",
  IgnoreSpellCheck->True],
 ", starting state ",
 Cell[BoxData[
  FormBox[
  Cell["1",ExpressionUUID->"a28e4a84-995d-46e1-b876-08800db1266f"], 
   TraditionalForm]],ExpressionUUID->"d183236e-f6b5-48f2-9227-64a5f2317e75"],
 ", final state ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", "32", "}"}], TraditionalForm]],ExpressionUUID->
  "5b5f42ed-5da3-4058-a703-7f2360eb62d1"],
 ", and alphabet ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], TraditionalForm]],ExpressionUUID->
  "6c55f59c-58cc-48a0-ab08-7cc583ecb789"],
 ", which was produced by ",
 StyleBox["catAutomata", "Code"],
 ", we see that the result is the same as when we applied ",
 StyleBox["findLanguage", "Code"],
 " and ",
 StyleBox["makeDeterministic", "Code"],
 " in Section 13.4."
}], "Text",ExpressionUUID->"2fc5d817-848c-4708-ad2b-b7855475a757"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findLanguageND", "[", 
  RowBox[{"ctable", ",", "1", ",", 
   RowBox[{"{", "32", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "10"}], "]"}]], "Input",
 CellLabel->
  "In[114]:=",ExpressionUUID->"1565a543-455f-432b-a994-77209fec9e8b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", 
     "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0",
      ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[114]=",ExpressionUUID->"6b0e9222-02f1-47dc-a957-c6c5d8182788"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computations and Explorations 1", "Subsection",
 CellTags->
  "SolutionsCE1",ExpressionUUID->"6e90da41-48b0-4091-ae5a-4ebb905f0bf4"],

Cell[TextData[{
 "Solve the busy beaver problem for two states by testing all possible Turing \
machines with two states and alphabet ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "B"}], "}"}], TraditionalForm]],ExpressionUUID->
  "59992d5b-ab4e-4650-94f6-636eeae3d670"],
 "."
}], "Problem",ExpressionUUID->"2484af63-037b-4a14-9034-31596634ecd9"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " The busy beaver problem, described in the preface to Exercise 31 in \
Section 13.5, asks: what is the maximum number of ones that a Turing machine \
with ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "80ba4fea-3ede-46b0-b379-3413c236e12f"],
 " states on the alphabet ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "B"}], "}"}], TraditionalForm]],ExpressionUUID->
  "09a1a70b-7950-44c2-91fb-ef9ed1e7c766"],
 " may print on an initially blank tape? This exercise asks us to solve the \
busy beaver problem with a brute force approach for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", "2"}], TraditionalForm]],ExpressionUUID->
  "701fd7ec-0e75-4299-97da-b3a9a5333704"],
 "."
}], "Text",ExpressionUUID->"7a1c4e24-8d57-4b42-ae7c-e02c69d74d50"],

Cell["\<\
We will construct all possible Turing machines on 2 states with the given \
alphabet. For each possible Turing machine, we will allow it to run until \
either it halts, or until it has reached a predefined limit on the number of \
steps it is allowed. This later condition is important, since some of the \
possible machines will not halt on their own.\
\>", "Text",ExpressionUUID->"3a00b272-4d6d-4587-a83a-738a990ebe8d"],

Cell[TextData[{
 "Generating all possible Turing machines on ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "B"}], "}"}], TraditionalForm]],ExpressionUUID->
  "939dad1e-10a9-499e-b818-e3a282047e25"],
 " with two states is equivalent to finding all possible transition \
functions. The domain of a transition function is the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"S", "\[Times]", "I"}], "=", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], "\[Times]", 
     RowBox[{"{", 
      RowBox[{"1", ",", "B"}], "}"}]}]}], TraditionalForm]],ExpressionUUID->
  "6d2737f6-3e86-4313-98f5-ce36fef6d243"],
 ". The codomain is the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "2"}], "}"}], "\[Times]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "B"}], "}"}], "\[Times]", 
    RowBox[{"{", 
     RowBox[{"L", ",", "R"}], "}"}]}], TraditionalForm]],ExpressionUUID->
  "eee134f6-6fdb-45e2-8a05-374566c16ca4"],
 ", where we use state 2 as a halting state, that is, a state which will \
cause the machine to halt."
}], "Text",ExpressionUUID->"3439ef49-855e-4c67-a1b0-ff5ebfc68f6b"],

Cell[TextData[{
 "We create the domain and codomain using the ",
 StyleBox[ButtonBox["Tuples",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Tuples"], "FunctionLink"],
 " function."
}], "Text",ExpressionUUID->"1771163b-7c02-46b6-be86-51ab57de081e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dom", "=", 
  RowBox[{"Tuples", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "B"}], "}"}]}], "}"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[115]:=",ExpressionUUID->"d391cd35-a2f7-4aa4-9197-a4f2d210cb46"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "B"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "B"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[115]=",ExpressionUUID->"06ea8880-a754-4356-980d-5e551e6c5f1a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"codom", "=", 
  RowBox[{"Tuples", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "B"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"L", ",", "R"}], "}"}]}], "}"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[116]:=",ExpressionUUID->"b82e52b1-1345-489a-8382-9f8e4c48233c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "L"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "R"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "B", ",", "L"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "B", ",", "R"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "L"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "R"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "B", ",", "L"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "B", ",", "R"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "L"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "R"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "B", ",", "L"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "B", ",", "R"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[116]=",ExpressionUUID->"7de60b8d-5661-4c4a-8464-37ca40ac95e1"]
}, Open  ]],

Cell[TextData[{
 "Now, each possible transition function is an assignment of each member of \
",
 Cell[BoxData[
  FormBox[
   StyleBox["dom",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "300c0e62-4b51-407a-b7c3-bea535cdc45d"],
 " to one of the members of ",
 Cell[BoxData[
  FormBox[
   StyleBox["codom",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "bed92784-e525-4e1e-9d83-ecbf34521516"],
 ". We can think of this as a member of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["codom",
     FontWeight->"Bold"], "4"], TraditionalForm]],ExpressionUUID->
  "ab6106da-099d-4076-b0a7-0168a1712051"],
 ", the Cartesian product of ",
 Cell[BoxData[
  FormBox[
   StyleBox["codom",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "3d78a7dd-1459-4ecc-a1fb-17c8050c4ae5"],
 " with itself four times. Each 4-tuple of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["codom", "Code"], "4"], TraditionalForm]],ExpressionUUID->
  "34c3cca7-7aa3-4303-9079-c8bb8b4eccda"],
 " corresponds to the function that maps the ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "0142ff8a-b74f-4272-a5e6-209eedf290e6"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " member of ",
 Cell[BoxData[
  FormBox[
   StyleBox["dom",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "b764593a-e1ed-41d4-8053-bbfd005b8711"],
 " to the ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "0cec3106-78b4-4702-ba5b-acbaaac8808e"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " element of the tuple. The function below accepts a member of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["codom", "Code"], "4"], TraditionalForm]],ExpressionUUID->
  "790de9b4-b70e-4b34-8a16-a502f99c8fa4"],
 " and produces the corresponding transition table."
}], "Text",ExpressionUUID->"26a699b3-b885-4bda-870a-b898075271db"],

Cell[BoxData[
 RowBox[{
  RowBox[{"makeTable", "[", "t_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"j", ",", "d", ",", 
      RowBox[{"T", "=", 
       RowBox[{"Association", "[", "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"j", "=", "1"}], ",", 
       RowBox[{"j", "\[LessEqual]", "4"}], ",", 
       RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"d", "=", 
         RowBox[{"dom", "[", 
          RowBox[{"[", "j", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"T", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"d", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"d", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], "=", 
         RowBox[{"t", "[", 
          RowBox[{"[", "j", "]"}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", "T"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[117]:=",ExpressionUUID->"409c7bc6-4005-4ede-9a84-e3e50c389376"],

Cell[TextData[{
 "We now apply this function to each member of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["codom",
     FontWeight->"Bold"], "4"], TraditionalForm]],ExpressionUUID->
  "94254e7d-b757-487a-8c0e-6bc51568b813"],
 "."
}], "Text",ExpressionUUID->"314d0284-bece-4de6-8704-50af9801fdb3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"codom4", "=", 
   RowBox[{"Tuples", "[", 
    RowBox[{"codom", ",", "4"}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[118]:=",ExpressionUUID->"00bdfeb0-35e7-48cd-bb0b-b5478ef758d3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "codom4", "]"}]], "Input",
 CellLabel->
  "In[119]:=",ExpressionUUID->"1f9f5fb5-96b2-427c-a2e4-671d07d9b327"],

Cell[BoxData["20736"], "Output",
 CellLabel->
  "Out[119]=",ExpressionUUID->"21bff5cc-b573-4158-8fb0-26cf158c849e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "\[LessEqual]", 
    RowBox[{"Length", "[", "codom4", "]"}]}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Evaluate", "[", 
     RowBox[{"Symbol", "[", 
      RowBox[{"\"\<TF\>\"", "<>", 
       RowBox[{"ToString", "[", "i", "]"}]}], "]"}], "]"}], "=", 
    RowBox[{"makeTable", "[", 
     RowBox[{"codom4", "[", 
      RowBox[{"[", "i", "]"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellLabel->
  "In[120]:=",ExpressionUUID->"e3df5e85-ac18-443f-b9d5-9458aee40b9c"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Symbol",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Symbol"], "FunctionLink"],
 " function is used to convert a string into a symbol object. Here, we use it \
to create variables ",
 StyleBox["TF1", "Code"],
 ", ",
 StyleBox["TF2", "Code"],
 ", ..., for the associations that store the ",
 Cell[BoxData[
  FormBox["20736", TraditionalForm]],ExpressionUUID->
  "210db92d-47cf-45c6-8b3c-41bfee6a46a9"],
 " transition tables. Note that in order to assign a value to a symbol \
created dynamically with ",
 StyleBox[ButtonBox["Symbol",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Symbol"], "FunctionLink"],
 ", it\[CloseCurlyQuote]s necessary to use ",
 StyleBox[ButtonBox["Evaluate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Evaluate"], "FunctionLink"],
 " to force evaluation on the left-hand side of the assignment. Otherwise, \
the statement would be interpreted as an attempt to assign a value to the ",
 StyleBox[ButtonBox["Symbol",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Symbol"], "FunctionLink"],
 " function itself. "
}], "Text",ExpressionUUID->"5ddea661-b8ae-4bf5-8051-1a4e17cc8780"],

Cell["\<\
Observe that the result of the above is that transition tables are stored in \
these symbols.\
\>", "Text",ExpressionUUID->"21eddf0d-1689-4659-a29b-4cd1e365fb74"],

Cell[CellGroupData[{

Cell[BoxData["TF7821"], "Input",
 CellLabel->
  "In[121]:=",ExpressionUUID->"d7ffbd23-2d01-46bc-a26e-cd1921416f54"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "L"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "B"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "B", ",", "L"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "B", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "B"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "L"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[121]=",ExpressionUUID->"8280857e-3e2e-4f2c-871b-8b1e2febd170"]
}, Open  ]],

Cell[TextData[{
 "We will need to count the number of 1s on each tape. Recall that ",
 StyleBox[ButtonBox["Count",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Count"], "FunctionLink"],
 " accepts a list and a pattern and returns the number of times the pattern \
appears."
}], "Text",ExpressionUUID->"66de68f6-6e5f-4c69-b512-8e78d781c5cb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Count", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "B", ",", "1"}], "}"}], ",", "1"}], 
  "]"}]], "Input",
 CellLabel->
  "In[122]:=",ExpressionUUID->"57496d83-4db5-4ccb-8347-8c66668f798a"],

Cell[BoxData["3"], "Output",
 CellLabel->
  "Out[122]=",ExpressionUUID->"9fed7f8b-560a-419d-bd2a-76b867f5f365"]
}, Open  ]],

Cell[TextData[{
 "We need to place a limit on the number of steps the Turing machine can take \
to avoid getting stuck in an infinite loop with a machine that does not halt. \
For this, we create a version of ",
 StyleBox["Turing", "Code"],
 " specifically for this problem. It includes an extra argument for the limit \
on the number of steps and incorporates this limit into the main loop. We \
remove the arguments for the initial tape and initial state, and instead set \
these to 0 and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", "B", "}"}], TraditionalForm]],ExpressionUUID->
  "fd922845-5546-44fd-bc69-eacc2599b666"],
 " in the function. Rather than returning the tape, this function will return \
the number of 1s appearing on the tape, assuming the machine halted. If it \
did not halt, we return -1."
}], "Text",ExpressionUUID->"801c11c3-60df-4300-8272-6ab105e749a2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"beaverTuring", "[", 
   RowBox[{"f_", ",", "maxsteps_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"pos", "=", "1"}], ",", 
      RowBox[{"state", "=", "0"}], ",", 
      RowBox[{"tape", "=", 
       RowBox[{"{", "B", "}"}]}], ",", "domain", ",", "y", ",", 
      RowBox[{"numsteps", "=", "0"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"domain", "=", 
      RowBox[{"Keys", "[", "f", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"domain", ",", 
          RowBox[{"{", 
           RowBox[{"state", ",", 
            RowBox[{"tape", "[", 
             RowBox[{"[", "pos", "]"}], "]"}]}], "}"}]}], "]"}], "&&", 
        RowBox[{"numsteps", "<", "maxsteps"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"y", "=", 
         RowBox[{"f", "[", 
          RowBox[{"{", 
           RowBox[{"state", ",", 
            RowBox[{"tape", "[", 
             RowBox[{"[", "pos", "]"}], "]"}]}], "}"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"state", "=", 
         RowBox[{"y", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tape", "[", 
          RowBox[{"[", "pos", "]"}], "]"}], "=", 
         RowBox[{"y", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Which", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"pos", "\[Equal]", "1"}], "&&", 
           RowBox[{
            RowBox[{"y", "[", 
             RowBox[{"[", "3", "]"}], "]"}], "===", "L"}]}], ",", 
          RowBox[{"PrependTo", "[", 
           RowBox[{"tape", ",", "B"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"pos", "\[Equal]", 
            RowBox[{"Length", "[", "tape", "]"}]}], "&&", 
           RowBox[{
            RowBox[{"y", "[", 
             RowBox[{"[", "3", "]"}], "]"}], "===", "R"}]}], ",", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"tape", ",", "B"}], "]"}], ";", 
           RowBox[{"pos", "++"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"y", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "===", "L"}], ",", 
          RowBox[{"pos", "--"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"y", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "===", "R"}], ",", 
          RowBox[{"pos", "++"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"numsteps", "++"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"numsteps", "<", "maxsteps"}], ",", 
       RowBox[{"Count", "[", 
        RowBox[{"tape", ",", "1"}], "]"}], ",", 
       RowBox[{"-", "1"}]}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[123]:=",ExpressionUUID->"c2164417-ba7e-4c63-981e-4205591e7e9b"],

Cell[TextData[{
 "Now, we apply ",
 StyleBox["beaverTuring", "Code"],
 " to each of the transition tables with a step limit of 100, keeping track \
of the number of 1s along the way. "
}], "Text",ExpressionUUID->"def90ea5-b703-405c-bcb6-e821ac528d08"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"onesList", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{"i", "=", "1"}], ",", 
    RowBox[{"i", "\[LessEqual]", 
     RowBox[{"Length", "[", "codom4", "]"}]}], ",", 
    RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
    RowBox[{"AppendTo", "[", 
     RowBox[{"onesList", ",", 
      RowBox[{"beaverTuring", "[", 
       RowBox[{
        RowBox[{"Symbol", "[", 
         RowBox[{"\"\<TF\>\"", "<>", 
          RowBox[{"ToString", "[", "i", "]"}]}], "]"}], ",", "100"}], "]"}]}],
      "]"}]}], "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Max", "[", "onesList", "]"}]}], "Input",
 CellLabel->
  "In[124]:=",ExpressionUUID->"934266ab-dfad-41d0-9763-e9e58ec081b9"],

Cell[BoxData["4"], "Output",
 CellLabel->
  "Out[126]=",ExpressionUUID->"1149131a-e623-40dc-a429-edf611a95f4a"]
}, Open  ]],

Cell[TextData[{
 "Using the ",
 StyleBox[ButtonBox["Tally",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Tally"], "FunctionLink"],
 " function, we can see how many of the Turing machines produces tapes with \
each number of ones."
}], "Text",ExpressionUUID->"32c559aa-85a8-4d25-a0b6-bc1eb5d87ca3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tally", "[", "onesList", "]"}]], "Input",
 CellLabel->
  "In[127]:=",ExpressionUUID->"3ea799f9-fcc3-42e2-a35a-f300974a6f32"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "10952"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "704"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4876"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "4184"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[127]=",ExpressionUUID->"92fb498c-ae3c-4899-afa3-e1bfd94a988e"]
}, Open  ]],

Cell[TextData[{
 "This shows us that ",
 Cell[BoxData[
  FormBox["4184", TraditionalForm]],ExpressionUUID->
  "8772d610-8258-476a-a29d-8bee037b94e5"],
 " of the machines halted with no ones on the tape, ",
 Cell[BoxData[
  FormBox["4", TraditionalForm]],ExpressionUUID->
  "f770d6ab-4514-496c-a1d0-2b48b0edbe8a"],
 " machines halted with four ones, and ",
 Cell[BoxData[
  FormBox["10952", TraditionalForm]],ExpressionUUID->
  "7ac5b344-991f-4419-9263-d64e06d7d8db"],
 " of the machines failed to halt."
}], "Text",ExpressionUUID->"c8cea675-8d61-4626-b621-39715fe810e8"],

Cell[TextData[{
 "We can see the four machines that produced four ones as follows. The ",
 StyleBox[ButtonBox["Position",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Position"], "FunctionLink"],
 " function applied to a list and an expression will return the list of \
indices to the list at which the expression can be found."
}], "Text",ExpressionUUID->"6ee4f7aa-6a79-4844-b7d0-01c2980e1d31"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{"onesList", ",", "4"}], "]"}]], "Input",
 CellLabel->
  "In[128]:=",ExpressionUUID->"0706036d-9cda-4ef9-8656-9a873e145223"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "7729", "}"}], ",", 
   RowBox[{"{", "7741", "}"}], ",", 
   RowBox[{"{", "9314", "}"}], ",", 
   RowBox[{"{", "9326", "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[128]=",ExpressionUUID->"4991ea3d-2e4b-48ef-b82b-7183c36017e8"]
}, Open  ]],

Cell["These are the transition functions for the four machines.", "Text",ExpressionUUID->"61f8b66d-5254-411a-a254-ac649732b2c9"],

Cell[CellGroupData[{

Cell[BoxData["TF7729"], "Input",
 CellLabel->
  "In[129]:=",ExpressionUUID->"6fa59468-4ac7-431d-a089-a138798a464e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "L"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "B"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "L"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "B"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "L"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[129]=",ExpressionUUID->"5c4a7631-4b41-4b18-b5e9-33ab1cf2b7e5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["TF7741"], "Input",
 CellLabel->
  "In[130]:=",ExpressionUUID->"e44d913c-5ef7-484f-bb23-b0ca34739eba"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "L"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "B"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "B"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "L"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[130]=",ExpressionUUID->"87da8980-9bff-43b4-8a6e-defed8370ccb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["TF9314"], "Input",
 CellLabel->
  "In[131]:=",ExpressionUUID->"068467ae-ffde-415a-bbfd-40cdd446691f"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "B"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "L"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "L"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "B"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "R"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[131]=",ExpressionUUID->"aaee5a41-c2e0-48c3-94a7-089227efc366"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["TF9327"], "Input",
 CellLabel->
  "In[132]:=",ExpressionUUID->"715254a8-8c52-4872-9bfd-8f3a8d70e095"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "B"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "L"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "R"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "B"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "B", ",", "L"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[132]=",ExpressionUUID->"ee85a98e-e999-412d-8d20-f8d43b5363b2"]
}, Open  ]],

Cell[TextData[{
 "The busy beaver problem becomes very time consuming very quickly. Beyond ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", "2"}], TraditionalForm]],ExpressionUUID->
  "7f8cdda9-7e83-4eb4-ace9-4a0dc5b525a5"],
 ", it is imperative to use more efficient approaches than was done here."
}], "Text",ExpressionUUID->"985ae230-96eb-4936-8d49-290e60f441f1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exercises", "Section",
 CellTags->"Exercises",ExpressionUUID->"f9040e31-fe13-4b2a-a5fd-1a96b52ecb84"],

Cell[CellGroupData[{

Cell["\<\
Construct the unit-delay machine described in Example 5 of Section 13.2.\
\>", "Item1Exercise",ExpressionUUID->"b777c1e6-95c2-44b2-a82b-763c92722e33"],

Cell["\<\
Construct a function in the Wolfram Language for simulating the action of a \
Moore machine. (See the prelude to Exercise 20 in Section 13.2 for the \
definition of a Moore machine.)\
\>", "Item1Exercise",ExpressionUUID->"9f8b39cf-7712-4f3d-8387-fa0af8b65cd9"],

Cell["\<\
Develop functions in the Wolfram Language for computing the union of two \
nondeterministic finite-state automata and for computing the Kleene closure \
of a nondeterministic finite-state machine, as described in the proof of \
Theorem 1 of Section 13.4 of the main text.\
\>", "Item1Exercise",ExpressionUUID->"58a3a146-c9fc-4729-82ab-a5180e4433ea"],

Cell["\<\
Develop functions in the Wolfram Language for finding all the states of a \
finite-state machine that are reachable from a given state and for finding \
all transient states and sinks of the machine. (See Supplementary Exercise 16 \
for definitions.)\
\>", "Item1Exercise",ExpressionUUID->"51eb256b-9b58-44f1-ab83-d8f3c37e4775"],

Cell["\<\
Construct a function in the Wolfram Language that computes the star height of \
a regular expression. (See Supplementary Exercise 11 for the definition of \
star height.)\
\>", "Item1Exercise",ExpressionUUID->"214187ee-cb7a-4c2d-9bae-9b75509218c6"],

Cell[TextData[{
 "Construct a Turing machine that computes ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["n", "1"], "-", 
    SubscriptBox["n", "2"]}], TraditionalForm]],ExpressionUUID->
  "87963667-e083-468a-92ca-17e2534818ad"],
 " for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["n", "1"], "\[GreaterEqual]", 
    SubscriptBox["n", "2"]}], TraditionalForm]],ExpressionUUID->
  "cfac0ba6-1cfa-4481-bc18-d8175878cac8"],
 ". Test that this Turing machine produces the desired results for sample \
input values."
}], "Item1Exercise",ExpressionUUID->"bdcda61c-b13e-4ecd-be15-80ba191187a0"],

Cell["\<\
Construct a function in the Wolfram Language that simulates the action of a \
Turing machine that may move right, left, or not at all at each step.\
\>", "Item1Exercise",ExpressionUUID->"2e824f36-a4ed-4e98-9cfb-a4583c41bd11"],

Cell["\<\
Construct a function in the Wolfram Language that simulates the action of a \
Turing machine that may have more than one tape.\
\>", "Item1Exercise",ExpressionUUID->"c782b39c-9d40-4fd3-b73e-a1ef44608cd1"],

Cell["\<\
Construct a function in the Wolfram Language that simulates the action of a \
Turing machine with a two-dimensional tape. Represent a machine for \
multiplying integers and test it with your procedure.\
\>", "Item1Exercise",ExpressionUUID->"734d2743-4c26-42f9-9f4c-37e6ff95adb0"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
PrintingStyleEnvironment->"Working",
WindowSize->{725, 850},
WindowMargins->{{Automatic, 166}, {Automatic, 0}},
DockedCells->Cell[
  BoxData[
   TagBox[
    GridBox[{{"\"Exploring Discrete Mathematics with Mathematica\"", 
       ActionMenuBox[
       "\"Navigation\"", {
        "\"CloseAll\"" :> Module[{$CellContext`DJSection$}, SelectionMove[
             SelectedNotebook[], All, Notebook]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; 
           Do[NotebookLocate[$CellContext`DJSection$]; FrontEndExecute[
               FrontEndToken["OpenCloseGroup"]], {$CellContext`DJSection$, {
              "Section1a", "Section1b", "Section2a", "Section2b", "Section3a",
                "Section3b", "Section3c", "Section3d", "Section4a", 
               "Section4b", "Section5a", "Section5b", "Section5c", 
               "SolutionsCE1", "SolutionsCP8", "Section1", "Section2", 
               "Section3", "Section4", "Section5", "Solutions", 
               "Exercises"}}]; SelectionMove[
             SelectedNotebook[], Before, Notebook]], "\"Section1\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Solutions", "Exercises"}}] NotebookLocate["Section1"]; 
           FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section2\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Solutions", "Exercises"}}] NotebookLocate["Section2"]; 
           FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section3\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Solutions", "Exercises"}}] NotebookLocate["Section3"]; 
           FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section4\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Solutions", "Exercises"}}] NotebookLocate["Section4"]; 
           FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section5\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Solutions", "Exercises"}}] NotebookLocate["Section5"]; 
           FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Solutions\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Solutions", "Exercises"}}] NotebookLocate["Solutions"]; 
           FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Exercises\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Solutions", "Exercises"}}] NotebookLocate["Exercises"]; 
           FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Open All\"" :> 
         Module[{$CellContext`DJSection$}, 
           Do[NotebookLocate[$CellContext`DJSection$]; FrontEndExecute[
               FrontEndToken[
               "SelectionOpenAllGroups"]], {$CellContext`DJSection$, {
              "Exercises", "Section1", "Section1a", "Section1b", "Section2", 
               "Section2a", "Section2b", "Section3", "Section3a", "Section3b",
                "Section3c", "Section3d", "Section4", "Section4a", 
               "Section4b", "Section5", "Section5a", "Section5b", "Section5c",
                "Solutions", "SolutionsCE1", "SolutionsCP8"}}] SelectionMove[
             SelectedNotebook[], Before, Notebook]]}]}}, 
     GridBoxAlignment -> {
      "Columns" -> {Left, Baseline}, "Rows" -> {Right, Baseline}}, AutoDelete -> 
     False, GridBoxItemSize -> {"Columns" -> {
         Scaled[0.8], 
         Scaled[0.2]}}], "Grid"]], "DockedCell", FontFamily -> "Times"],
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
ShowSelection->True,
Magnification->1,
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"Book"}, "Textbook.nb", CharacterEncoding -> 
       "UTF-8"]]], 
   Cell[
    StyleData[All, "Printout"], PageWidth -> PaperWidth, 
    CellHorizontalScrolling -> True, 
    CellLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
    ShowAutoStyles -> False, 
    AutoStyleOptions -> {"HighlightMisspelledWords" -> False}, ScriptMinSize -> 
    9, MenuSortingValue -> 1500, 
    PrivateFontOptions -> {"FontType" -> "Outline"}, Magnification -> 1], 
   Cell[
    StyleData["Title"], Editable -> False, ShowCellBracket -> Automatic, 
    CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
    DefaultNewInlineCellStyle -> {}, LanguageCategory -> "NaturalLanguage", 
    FontFamily -> "Helvetica", FontSize -> 25, FontWeight -> "Bold", 
    FontColor -> GrayLevel[0.137255]], 
   Cell[
    StyleData["BookChapterTitle", StyleDefinitions -> StyleData["Title"]], 
    CellFrame -> {{0, 0}, {1, 1}}, CellDingbat -> Cell[
      BoxData[
       GraphicsBox[{{
          RGBColor[0.09375, 0.570313, 0.816406], 
          RectangleBox[{0, 0}]}, {
          GrayLevel[1], FontSize -> 35, FontWeight -> Bold, FontFamily -> 
          "Helvetica", 
          InsetBox[
           CounterBox["ChapterNumber"], {0.5, 0.45}, {Center, Center}]}}, 
        ImageSize -> {70, 70}]], "Output"], 
    CellMargins -> {{100, 0}, {20, 20}}, CellFrameColor -> GrayLevel[1]], 
   Cell[
    StyleData["DockedCell"], CellMargins -> {{12, 12}, {20, 0}}, 
    CellGroupingRules -> "TitleGrouping", 
    ConversionRules :> {"TeX" -> {"\n\\chapter{", "}"}}, 
    TaggingRules :> {"CounterSettings" -> {"CounterTarget" -> "CellGroup"}}, 
    PageBreakAbove -> False, PageBreakBelow -> False, LineSpacing -> {1, 2}, 
    MenuSortingValue -> 1105, FontFamily -> "Helvetica", FontSize -> 27, 
    FontWeight -> "Bold", Background -> RGBColor[0.09375, 0.570313, 0.816406],
     CounterBoxOptions -> {
     CounterFunction :> Identity}, $CellContext`DefaultReturnCreatedCellStyle -> 
    "Section"], 
   Cell[
    StyleData["FunctionLink"], ConversionRules :> {"TeX" -> {{"", 
         $CellContext`ExportAsHyperRef[], ""}, {"", Automatic, ""}}}, 
    MenuSortingValue -> 1105, ButtonStyleMenuListing -> None, FontFamily -> 
    "Courier", FontVariations -> {"Underline" -> True}, FontColor -> 
    RGBColor[0, 0, 1], 
    ButtonBoxOptions -> {Active -> True, ButtonFunction :> (FrontEndExecute[{
         FrontEnd`NotebookLocate[#2]}]& ), ButtonNote -> ButtonData}], 
   Cell[
    StyleData["Problem"], CellMargins -> {{40, 12}, {15, 15}}, 
    CellGroupingRules -> {"GroupTogetherNestedGrouping", 15010}, 
    ConversionRules :> {
     "TeX" -> {{"", Automatic, ""}, {"\n\n", Automatic, ""}}}, 
    TaggingRules :> {
     "ExtraConversionRules" -> {"General" -> {"RestartList" -> False}}}], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item1Exercise"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Exercise"], "."}], CellSize -> {30, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{50, 12}, {3, 5}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterIncrements -> "Item1Exercise", 
       CounterAssignments -> {{"Item2Exercise", 0}}, MenuSortingValue -> 
       4100], 
      Cell[
       StyleData["Item1Exercise", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Exercise"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{35, 12}, {3, 5}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["ExerciseContinuation"], CellMargins -> {{50, 12}, {1, 3}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, MenuSortingValue -> 4101], 
      Cell[
       StyleData["ExerciseContinuation", "Printout"], 
       CellMargins -> {{35, 12}, {1, 3}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item2Exercise"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item2Exercise"], "."}], CellSize -> {32, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{75, 12}, {1, 2}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17100}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterIncrements -> "Item2Exercise", MenuSortingValue -> 4200, 
       CounterBoxOptions -> {CounterFunction :> (Part[
           CharacterRange["a", "z"], #]& )}], 
      Cell[
       StyleData["Item2Exercise", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item2Exercise"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{50, 12}, {1, 2}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterBoxOptions -> {CounterFunction :> (Part[
           CharacterRange["a", "z"], #]& )}]}, Open]], 
   Cell[
    StyleData["ExerciseEquation"], CellMargins -> {{36, 12}, {7, 7}}, 
    CellGroupingRules -> {"GroupTogetherNestedGrouping", 17200}, 
    CellHorizontalScrolling -> True, 
    CellFrameLabels -> {{None, None}, {None, None}}, DefaultFormatType -> 
    TraditionalForm, InputAutoReplacements -> {}, TextAlignment -> Center, 
    MenuSortingValue -> 4300, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}], 
   Cell[
    StyleData["myCode"], CellMargins -> {{66, 10}, {5, 10}}, 
    StyleKeyMapping -> {"=" -> "WolframAlphaShort"}, Evaluatable -> False, 
    CellGroupingRules -> "InputGrouping", TextClipboardType -> "InputText", 
    PageBreakWithin -> False, GroupPageBreakWithin -> False, 
    DefaultFormatType -> DefaultInputFormatType, ContextMenu -> 
    FEPrivate`FrontEndResource["ContextMenus", "myCode"], ShowAutoStyles -> 
    True, "TwoByteSyntaxCharacterAutoReplacement" -> True, 
    HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"}, 
    AutoItalicWords -> {}, AutoQuoteCharacters -> {}, 
    PasteAutoQuoteCharacters -> {}, LanguageCategory -> "Mathematica", 
    FormatType -> InputForm, NumberMarks -> True, 
    LinebreakAdjustments -> {0.85, 2, 10, 0, 1}, CounterIncrements -> "Code", 
    MenuSortingValue -> 1495, MenuCommandKey -> "8", FontWeight -> 
    "Bold", $CellContext`StripStyleOnPaste -> True], 
   Cell[
    StyleData["CodeVar"], DefaultFormatType -> DefaultInputFormatType, 
    LineBreakWithin -> False, MenuSortingValue -> 10000, FontWeight -> "Bold",
     FontSlant -> "Italic", FontColor -> GrayLevel[0.4]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Section"], CellFrame -> {{6, 0}, {0, 1}}, ShowCellBracket -> 
       Automatic, CellMargins -> {{12, 12}, {3, 24}}, 
       CellGroupingRules -> {"SectionGrouping", 30}, 
       ConversionRules :> {
        "TeX" -> {"\n\\section{", "}"}, 
         "HTML" -> {"<h3 class=\"Section\">", "</h3>"}}, 
       TaggingRules :> {
        "CounterSettings" -> {
          "CounterFormat" -> {"BookChapterNumber", ".", "Section"}, 
           "CounterTarget" -> "Cell", "XRefPrefix" -> "Section"}}, 
       PageBreakBelow -> False, CellFrameMargins -> {{8, 8}, {4, 6}}, 
       CellFrameColor -> RGBColor[0.09375, 0.570313, 0.816406], TabSpacings -> 
       2.1, CounterIncrements -> {
        "Section", "SectionHeader", "SubsectionHeader", "SubsubsectionHeader",
          "SubsubsubsectionHeader"}, FontFamily -> "Helvetica", FontSize -> 
       16, FontWeight -> "Bold", Background -> GrayLevel[0.999985]], 
      Cell[
       StyleData["Section", "Printout"], CellFrame -> {{4, 0}, {0, 0.5}}, 
       CellMargins -> {{2, 2}, {3, 21}}, CellFrameMargins -> {{6, 6}, {3, 5}},
        CellFrameColor -> RGBColor[0.09375, 0.570313, 0.816406]], 
      Cell[
       StyleData["Section", "DoubleSpacedPrintout"], 
       CellFrame -> {{4, 0}, {0, 0.5}}, CellMargins -> {{2, 2}, {3, 21}}, 
       CellFrameMargins -> {{6, 6}, {3, 5}}, CellFrameColor -> 
       RGBColor[0.09375, 0.570313, 0.816406], FontSize -> 14]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Subsubsection"], CellDingbat -> None, 
       CellMargins -> {{12, 12}, {0, 6}}, 
       CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
       CellGroupingRules -> {"SectionGrouping", 50}, 
       ConversionRules :> {
        "TeX" -> {"\n\\subsubsection{", "}"}, 
         "HTML" -> {"<h5 class=\"Subsubsection\">", "</h5>"}}, PageBreakBelow -> 
       False, CellFrameLabelMargins -> 4, 
       CounterIncrements -> {
        "Subsubsection", "SubsubsectionHeader", "SubsubsubsectionHeader"}, 
       FontFamily -> "Helvetica", FontSize -> 11, FontWeight -> "Bold", 
       FontSlant -> "Italic"], 
      Cell[
       StyleData["Subsubsection", "Printout"], FontFamily -> "Helvetica", 
       FontSize -> 11, FontWeight -> "Bold", FontSlant -> "Italic"]}, Open]], 
   
   Cell[
    StyleData["Equation"], CellMargins -> {{26, 10}, {7, 7}}, 
    ConversionRules :> {
     "HTML" -> {{"", ""}, {"<p class=\"Equation\">", "</p>"}}}, 
    CellHorizontalScrolling -> True, DefaultFormatType -> TraditionalForm, 
    InputAutoReplacements -> {}, TextAlignment -> Center, CounterIncrements -> 
    "Equation", ButtonBoxOptions -> {Appearance -> {Automatic, None}}], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item1Numbered"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Numbered"], "."}], CellSize -> {32, Inherited}, 
         TextAlignment -> Right, 
         TextJustification -> (FontWeight -> "Plain")], 
       CellMargins -> {{36, 12}, {1, 3}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 15000}, 
       ConversionRules :> {{"TeX" -> {"\n\\item ", ""}}, {
         "HTML" -> {"<li>", "</li>"}}}, 
       TaggingRules :> {
        "ExtraConversionRules" -> {
          "General" -> {"NestingLevel" -> 30}, 
           "TeX" -> {"CellGroupEnvironment" -> "enumerate"}, 
           "HTML" -> {"CellGroupEnvironment" -> "ol"}}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, TextJustification -> 1, CounterIncrements -> "Item1Numbered", 
       CounterAssignments -> {{"Item2Numbered", 0}, {"Item3Numbered", 0}}], 
      Cell[
       StyleData["Item1Numbered", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Numbered"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Plain"], 
       CellMargins -> {{24, 2}, {1, 2}}, CellFrameLabelMargins -> 3, 
       TextJustification -> 1]}, Open]], 
   Cell[
    StyleData["InitializationCell"], Background -> GrayLevel[1]], 
   Cell[
    StyleData["Item1"], TextJustification -> 1], 
   Cell[
    StyleData["Item1Printout"], TextJustification -> 1, MenuSortingValue -> 
    10000], 
   Cell[
    StyleData["Code"], FormatType -> InputForm]}, Visible -> False, 
  FrontEndVersion -> 
  "11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, 2018)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Section1"->{
  Cell[1401, 45, 124, 1, 55, "Section",ExpressionUUID->"a7e7233a-6e3b-435e-867e-82e72942addf",
   CellTags->"Section1"]},
 "Section1a"->{
  Cell[3788, 108, 115, 1, 32, "Subsection",ExpressionUUID->"9a25a9b0-a8cd-4cb9-881c-7ef32117538f",
   CellTags->"Section1a"]},
 "Section1b"->{
  Cell[8446, 240, 115, 1, 32, "Subsection",ExpressionUUID->"c67afff2-e312-4a5d-b9ab-91680f30ee7b",
   CellTags->"Section1b"]},
 "Section2"->{
  Cell[28243, 770, 135, 1, 55, "Section",ExpressionUUID->"5382b954-3867-488c-b3b1-73f53eb20e6f",
   CellTags->"Section2"]},
 "Section2a"->{
  Cell[29024, 789, 116, 1, 32, "Subsection",ExpressionUUID->"b7a98635-eac9-4407-8088-28d655caba94",
   CellTags->"Section2a"]},
 "Section2b"->{
  Cell[42253, 1174, 136, 1, 32, "Subsection",ExpressionUUID->"ac2d45a0-1446-4936-b951-819d1a946763",
   CellTags->"Section2b"]},
 "Section3"->{
  Cell[48607, 1377, 138, 1, 55, "Section",ExpressionUUID->"38f42d4b-9a43-48e5-b4ac-b70b173846f7",
   CellTags->"Section3"]},
 "Section3a"->{
  Cell[48982, 1387, 115, 1, 32, "Subsection",ExpressionUUID->"12d62ce6-a13e-4213-ab1a-2bb6ce12b570",
   CellTags->"Section3a"]},
 "Section3b"->{
  Cell[65026, 1876, 158, 1, 32, "Subsection",ExpressionUUID->"6476a476-c968-4c04-ba8b-e27d4acb7e1e",
   CellTags->"Section3b"]},
 "Section3c"->{
  Cell[70320, 2026, 148, 1, 32, "Subsection",ExpressionUUID->"27f27b1d-fc0a-4c72-8b3d-717974784602",
   CellTags->"Section3c"]},
 "Section3d"->{
  Cell[78595, 2271, 139, 1, 32, "Subsection",ExpressionUUID->"1de5c516-2835-4c5e-b339-eeefaecbedc7",
   CellTags->"Section3d"]},
 "Section4"->{
  Cell[97807, 2822, 122, 1, 55, "Section",ExpressionUUID->"e0368784-e575-4c62-81a4-09460b709266",
   CellTags->"Section4"]},
 "Section4a"->{
  Cell[98274, 2834, 120, 1, 32, "Subsection",ExpressionUUID->"59d86a73-20b1-4f09-8952-1a744053868b",
   CellTags->"Section4a"]},
 "Section4b"->{
  Cell[116226, 3344, 126, 1, 32, "Subsection",ExpressionUUID->"788beb09-c4eb-4ffd-8f44-c0f9d0cdbf98",
   CellTags->"Section4b"]},
 "Section5"->{
  Cell[170888, 5026, 117, 1, 55, "Section",ExpressionUUID->"3603e99d-185e-4f21-9f11-f8c06b7116a6",
   CellTags->"Section5"]},
 "Section5a"->{
  Cell[171445, 5040, 142, 1, 35, "Subsection",ExpressionUUID->"db0b4f9f-52d6-421c-8cec-69d68da6e9f4",
   CellTags->"Section5a"]},
 "Section5b"->{
  Cell[187138, 5524, 135, 1, 32, "Subsection",ExpressionUUID->"33f1e735-ca22-4cce-96ba-f86c21d5c372",
   CellTags->"Section5b"]},
 "Section5c"->{
  Cell[206379, 6076, 132, 1, 32, "Subsection",ExpressionUUID->"6cf85a27-4c30-42ec-8da1-e591b2ec2870",
   CellTags->"Section5c"]},
 "Solutions"->{
  Cell[221578, 6559, 170, 3, 55, "Section",ExpressionUUID->"9db3599f-7843-49c1-a380-bb674e228fc1",
   CellTags->"Solutions"]},
 "SolutionsCP8"->{
  Cell[221773, 6566, 126, 2, 32, "Subsection",ExpressionUUID->"e11b4d2d-a318-4495-8be9-2bc66975eaa3",
   CellTags->"SolutionsCP8"]},
 "SolutionsCE1"->{
  Cell[230932, 6817, 138, 2, 32, "Subsection",ExpressionUUID->"6e90da41-48b0-4091-ae5a-4ebb905f0bf4",
   CellTags->"SolutionsCE1"]},
 "Exercises"->{
  Cell[255914, 7594, 107, 1, 55, "Section",ExpressionUUID->"f9040e31-fe13-4b2a-a5fd-1a96b52ecb84",
   CellTags->"Exercises"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Section1", 276721, 8013},
 {"Section1a", 276859, 8016},
 {"Section1b", 277002, 8019},
 {"Section2", 277144, 8022},
 {"Section2a", 277284, 8025},
 {"Section2b", 277428, 8028},
 {"Section3", 277572, 8031},
 {"Section3a", 277713, 8034},
 {"Section3b", 277858, 8037},
 {"Section3c", 278003, 8040},
 {"Section3d", 278148, 8043},
 {"Section4", 278292, 8046},
 {"Section4a", 278433, 8049},
 {"Section4b", 278578, 8052},
 {"Section5", 278723, 8055},
 {"Section5a", 278865, 8058},
 {"Section5b", 279011, 8061},
 {"Section5c", 279157, 8064},
 {"Solutions", 279303, 8067},
 {"SolutionsCP8", 279449, 8070},
 {"SolutionsCE1", 279601, 8073},
 {"Exercises", 279750, 8076}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 158, 3, 108, "BookChapterTitle",ExpressionUUID->"7a54527f-fe5b-4a34-b9b8-e9042f9373a3",
 CounterAssignments->{{"ChapterNumber", 13}}],
Cell[CellGroupData[{
Cell[763, 29, 86, 0, 55, "Section",ExpressionUUID->"bef9aa97-8d02-43d6-aa66-606277ef6e49"],
Cell[852, 31, 512, 9, 50, "Text",ExpressionUUID->"5a19a7dc-6e4a-4a57-804a-435a0066430c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1401, 45, 124, 1, 55, "Section",ExpressionUUID->"a7e7233a-6e3b-435e-867e-82e72942addf",
 CellTags->"Section1"],
Cell[1528, 48, 614, 16, 35, "Text",ExpressionUUID->"acfad756-4a15-465f-8b8d-08437653aa72"],
Cell[2145, 66, 580, 12, 35, "Text",ExpressionUUID->"954e007b-384c-4a1a-8d18-89bb16d3f56b"],
Cell[2728, 80, 661, 15, 35, "Text",ExpressionUUID->"05ba3cd1-9693-4f73-8543-21371eb4df72"],
Cell[3392, 97, 371, 7, 36, "Text",ExpressionUUID->"a3a2203f-4fb6-49d8-977e-2898e120f023"],
Cell[CellGroupData[{
Cell[3788, 108, 115, 1, 32, "Subsection",ExpressionUUID->"9a25a9b0-a8cd-4cb9-881c-7ef32117538f",
 CellTags->"Section1a"],
Cell[3906, 111, 178, 3, 20, "Text",ExpressionUUID->"664b4b7b-8dca-4b34-8468-7cdf3cc88de8"],
Cell[4087, 116, 255, 4, 35, "Text",ExpressionUUID->"31bcafee-c502-4448-9fa9-94dcbf6bbb92"],
Cell[4345, 122, 523, 9, 51, "Text",ExpressionUUID->"6ea12db7-7ac5-4203-ab14-1523dc796105"],
Cell[4871, 133, 1584, 45, 50, "Text",ExpressionUUID->"b0620c48-9f92-48dd-be96-d693454b9c3c"],
Cell[6458, 180, 111, 0, 20, "Text",ExpressionUUID->"71b59257-2484-496f-8b07-5832cf727a2c"],
Cell[CellGroupData[{
Cell[6594, 184, 629, 17, 51, "Input",ExpressionUUID->"22cfeafe-5dfa-4138-a612-e4a5a1df0adc",
 InitializationCell->True],
Cell[7226, 203, 588, 15, 33, "Output",ExpressionUUID->"62e2be56-0ad1-43c8-bc8e-2300beac7756"]
}, Open  ]],
Cell[7829, 221, 580, 14, 58, "Text",ExpressionUUID->"dd9a8ecb-5258-4350-9bbd-5c9abda316dc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8446, 240, 115, 1, 32, "Subsection",ExpressionUUID->"c67afff2-e312-4a5d-b9ab-91680f30ee7b",
 CellTags->"Section1b"],
Cell[8564, 243, 486, 12, 58, "Text",ExpressionUUID->"ad93bc6a-4263-4426-8833-bda656a2006d"],
Cell[9053, 257, 564, 15, 43, "Text",ExpressionUUID->"9038505a-8704-4224-ba4c-cdef59cc8afd"],
Cell[9620, 274, 733, 19, 81, "Text",ExpressionUUID->"ef0604cb-f478-476b-b7b9-1c3ac2d41ba8"],
Cell[10356, 295, 828, 22, 58, "Text",ExpressionUUID->"076c87cf-f5f1-4c52-b51a-2c974baf0081"],
Cell[CellGroupData[{
Cell[11209, 321, 188, 3, 31, "Input",ExpressionUUID->"2cf2f0ae-af59-4faa-9be9-4bff8f192c78"],
Cell[11400, 326, 249, 7, 31, "Output",ExpressionUUID->"bd47b9e3-9f16-41e1-ae66-2191ae596e87"]
}, Open  ]],
Cell[11664, 336, 382, 7, 36, "Text",ExpressionUUID->"60df2309-5eab-45ab-82cb-44c49433371a"],
Cell[CellGroupData[{
Cell[12071, 347, 193, 3, 31, "Input",ExpressionUUID->"70594969-3f5f-441d-9c67-9682a7a8005b"],
Cell[12267, 352, 249, 7, 31, "Output",ExpressionUUID->"254c889c-c616-43ff-8a58-166aa3561b56"]
}, Open  ]],
Cell[12531, 362, 154, 2, 20, "Text",ExpressionUUID->"dbf6dfda-b9c7-4b18-9ec8-7a2e6725a12c"],
Cell[CellGroupData[{
Cell[12710, 368, 188, 3, 31, "Input",ExpressionUUID->"cfaba274-7863-4eea-8cce-8f71b7bef0a3"],
Cell[12901, 373, 123, 2, 31, "Output",ExpressionUUID->"7f747c31-749b-41f6-a225-bcd77a6d05f8"]
}, Open  ]],
Cell[13039, 378, 361, 7, 43, "Text",ExpressionUUID->"e1555496-a92f-4339-b67f-34ca663b2efd"],
Cell[13403, 387, 281, 4, 35, "Text",ExpressionUUID->"f1db731e-3be6-4202-9652-03189e690bc3"],
Cell[CellGroupData[{
Cell[13709, 395, 175, 3, 31, "Input",ExpressionUUID->"b1335854-e4a7-4b00-835f-4d9d0ab8e8df",
 InitializationCell->True],
Cell[13887, 400, 119, 1, 31, "Output",ExpressionUUID->"afb4a05f-37a0-4459-a4e0-8996d06f15d1"]
}, Open  ]],
Cell[14021, 404, 167, 2, 20, "Text",ExpressionUUID->"23d2a75b-7def-4255-8df6-4f27e645ebf3"],
Cell[CellGroupData[{
Cell[14213, 410, 184, 3, 31, "Input",ExpressionUUID->"dbf3ea07-461c-4bd7-9f32-4c820fe6ce8d"],
Cell[14400, 415, 123, 2, 31, "Output",ExpressionUUID->"e374fd8d-785e-4486-8106-64c33f1124a7"]
}, Open  ]],
Cell[14538, 420, 209, 2, 20, "Text",ExpressionUUID->"d2f648f9-4a92-4a5a-999b-1e458f329f94"],
Cell[CellGroupData[{
Cell[14772, 426, 184, 3, 31, "Input",ExpressionUUID->"63ad9949-f167-4e03-8f70-d7a86e390f0a"],
Cell[14959, 431, 249, 7, 31, "Output",ExpressionUUID->"1f70c732-bff9-4c69-b4ac-f7b3ee18252f"]
}, Open  ]],
Cell[15223, 441, 257, 4, 20, "Text",ExpressionUUID->"9515260f-2dea-4f0b-a559-79e3180cf082"],
Cell[CellGroupData[{
Cell[15505, 449, 154, 2, 31, "Input",ExpressionUUID->"2adab04f-78f9-4d4d-8892-4e0bb05b400a"],
Cell[15662, 453, 190, 4, 31, "Output",ExpressionUUID->"67d0504b-5b3e-4d9c-bd6b-39924988c435"]
}, Open  ]],
Cell[15867, 460, 940, 19, 70, "Text",ExpressionUUID->"e9f79c3d-63d5-4925-bca3-17eddf4c2b46"],
Cell[16810, 481, 882, 19, 71, "Text",ExpressionUUID->"4a46288f-1998-4327-9350-8afca5a94855"],
Cell[CellGroupData[{
Cell[17717, 504, 254, 5, 31, "Input",ExpressionUUID->"890c8a27-b2cd-44c3-862a-8f22183f8406"],
Cell[17974, 511, 120, 1, 31, "Output",ExpressionUUID->"e0d9f627-aa07-45bf-b466-5f986c19f634"]
}, Open  ]],
Cell[18109, 515, 121, 0, 20, "Text",ExpressionUUID->"551c3310-6066-4da6-b8de-41e829c50c28"],
Cell[CellGroupData[{
Cell[18255, 519, 608, 16, 89, "Input",ExpressionUUID->"e5bca022-999d-48e9-82f1-b41bbda3657a"],
Cell[CellGroupData[{
Cell[18888, 539, 146, 3, 24, "Print",ExpressionUUID->"8b2ce05d-c45c-4560-b1a9-28012ca862bf"],
Cell[19037, 544, 146, 3, 24, "Print",ExpressionUUID->"bc3872fc-7f19-4663-a0c9-714ad26a6fb1"],
Cell[19186, 549, 146, 3, 24, "Print",ExpressionUUID->"f14baecd-8028-4fd0-b52c-a7147e3b41e6"],
Cell[19335, 554, 146, 3, 24, "Print",ExpressionUUID->"bb6626b6-f6e2-4710-b9c0-d3734ab9b51d"],
Cell[19484, 559, 145, 3, 24, "Print",ExpressionUUID->"ca8f3ad0-6b68-4a18-b964-2b32bc26c82c"],
Cell[19632, 564, 145, 3, 24, "Print",ExpressionUUID->"18a20528-d891-48f6-bc60-9431dbfb14cc"]
}, Open  ]]
}, Open  ]],
Cell[19804, 571, 680, 17, 40, "Text",ExpressionUUID->"96cb0c6a-0205-4be1-8262-c56bb96ce5ac"],
Cell[20487, 590, 1098, 24, 86, "Text",ExpressionUUID->"7893dfc8-90ad-4ad0-8286-9e63e4c23968"],
Cell[CellGroupData[{
Cell[21610, 618, 294, 7, 31, "Input",ExpressionUUID->"ed6fb12f-ba82-4f03-bcb3-6039871c1c22"],
Cell[21907, 627, 111, 1, 31, "Output",ExpressionUUID->"9ce32a2d-bfa2-4f63-a5f2-08dac1582fbf"]
}, Open  ]],
Cell[22033, 631, 92, 0, 20, "Text",ExpressionUUID->"14625e08-3d35-4f45-b4bc-4de96908aeca"],
Cell[22128, 633, 3117, 74, 431, "Input",ExpressionUUID->"aaf3a576-74b0-4847-a6df-01a1edd90406",
 InitializationCell->True],
Cell[25248, 709, 167, 3, 20, "Text",ExpressionUUID->"2c406276-8ea4-4870-becb-9c63a3b6d60c"],
Cell[CellGroupData[{
Cell[25440, 716, 470, 10, 51, "Input",ExpressionUUID->"1184fea2-2139-4f8a-b701-b71a7b17a259"],
Cell[25913, 728, 2269, 35, 241, "Output",ExpressionUUID->"74a9169d-e46d-4043-8373-e5c6d895f7e2"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[28243, 770, 135, 1, 55, "Section",ExpressionUUID->"5382b954-3867-488c-b3b1-73f53eb20e6f",
 CellTags->"Section2"],
Cell[28381, 773, 618, 12, 50, "Text",ExpressionUUID->"6d61d816-f5db-4bd3-950d-b2e8e3e83d54"],
Cell[CellGroupData[{
Cell[29024, 789, 116, 1, 32, "Subsection",ExpressionUUID->"b7a98635-eac9-4407-8088-28d655caba94",
 CellTags->"Section2a"],
Cell[29143, 792, 1009, 28, 35, "Text",ExpressionUUID->"59bb3ca8-6844-4116-acfb-6dcc6aa13640"],
Cell[30155, 822, 814, 18, 50, "Text",ExpressionUUID->"79126604-d2b5-4513-bdb8-2e4e39dff191"],
Cell[CellGroupData[{
Cell[30994, 844, 94, 0, 18, "Subsubsection",ExpressionUUID->"2594c278-5a7f-442b-8348-8ba271bc0d98"],
Cell[31091, 846, 190, 3, 20, "Text",ExpressionUUID->"0e8c359a-9bf3-422f-89c2-f3e253571cdd"],
Cell[31284, 851, 809, 19, 50, "Text",ExpressionUUID->"59356266-d14e-42e7-9763-fa397f0f98e7"],
Cell[32096, 872, 719, 18, 35, "Text",ExpressionUUID->"89052c63-81e2-4614-9bef-c5a2a8ce8c62"],
Cell[32818, 892, 1663, 44, 74, "Text",ExpressionUUID->"37f31d87-6662-4bf5-aa48-9b729e3b6744"],
Cell[34484, 938, 226, 3, 35, "Text",ExpressionUUID->"fcede7d3-2cb1-45dc-8d55-702ad8ae9ac9"],
Cell[CellGroupData[{
Cell[34735, 945, 1661, 55, 70, "Input",ExpressionUUID->"a7fbf355-e72f-4389-8d5d-f8aed9d1c026",
 InitializationCell->True],
Cell[36399, 1002, 1587, 53, 51, "Output",ExpressionUUID->"b7c6e0d5-41fe-4db7-9d87-8aeaf7548000"]
}, Open  ]],
Cell[38001, 1058, 178, 3, 20, "Text",ExpressionUUID->"ea945786-2983-4ca5-bf88-6569c6d62e4a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38216, 1066, 109, 0, 18, "Subsubsection",ExpressionUUID->"65847eed-76e7-4a9b-a46a-f562c632907a"],
Cell[38328, 1068, 244, 4, 35, "Text",ExpressionUUID->"18c151cf-34ee-4745-b176-8087d0784ed0"],
Cell[38575, 1074, 582, 10, 73, "Text",ExpressionUUID->"e6fb85f9-2435-4071-8638-7242ac765a30"],
Cell[39160, 1086, 625, 13, 58, "Text",ExpressionUUID->"33f32b7d-1ec1-453d-af31-ced343962443"],
Cell[39788, 1101, 92, 0, 20, "Text",ExpressionUUID->"e0f46bcf-02ac-4695-bbee-ba35152a8708"],
Cell[39883, 1103, 1552, 40, 203, "Input",ExpressionUUID->"828649b0-dcbd-4078-a19a-a80ad4e08faf",
 InitializationCell->True],
Cell[41438, 1145, 260, 6, 20, "Text",ExpressionUUID->"a59872e0-4df5-4b25-b5f7-1d218fe4d195"],
Cell[CellGroupData[{
Cell[41723, 1155, 271, 6, 31, "Input",ExpressionUUID->"1bf52024-93af-4484-82a5-b6b2ee0d8b0a"],
Cell[41997, 1163, 195, 4, 31, "Output",ExpressionUUID->"4cf4b4ea-9541-43c7-b15f-8f4692d0c9ee"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[42253, 1174, 136, 1, 32, "Subsection",ExpressionUUID->"ac2d45a0-1446-4936-b951-819d1a946763",
 CellTags->"Section2b"],
Cell[42392, 1177, 295, 4, 35, "Text",ExpressionUUID->"9951d903-0de8-44f8-ac55-3b3f65778ae7"],
Cell[42690, 1183, 1126, 33, 35, "Text",ExpressionUUID->"36ae48d3-ef54-41ba-8d91-3c85b6240f78"],
Cell[43819, 1218, 729, 21, 35, "Text",ExpressionUUID->"e3b1d29c-3824-4b6b-9b3a-9e8ad16f77a7"],
Cell[44551, 1241, 154, 2, 20, "Text",ExpressionUUID->"a7753810-e218-4582-9d37-43ea9658808f"],
Cell[CellGroupData[{
Cell[44730, 1247, 1439, 45, 70, "Input",ExpressionUUID->"76dfb6df-9191-41cb-8f81-2cfd64583dba",
 InitializationCell->True],
Cell[46172, 1294, 1375, 43, 51, "Output",ExpressionUUID->"e5940c0f-e99e-4c06-95dc-3691ec0afb2d"]
}, Open  ]],
Cell[47562, 1340, 215, 4, 24, "Text",ExpressionUUID->"ecf47169-e04a-47b1-b20d-c22cc81e7439"],
Cell[CellGroupData[{
Cell[47802, 1348, 294, 7, 31, "Input",ExpressionUUID->"15593468-2080-417f-acdc-71185d57f609"],
Cell[48099, 1357, 172, 3, 31, "Output",ExpressionUUID->"ebb1f37a-d51a-4295-81c9-ce99da86bdf8"]
}, Open  ]],
Cell[48286, 1363, 272, 8, 20, "Text",ExpressionUUID->"b75979c5-d817-440f-bf66-48e4c1f74d6f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[48607, 1377, 138, 1, 55, "Section",ExpressionUUID->"38f42d4b-9a43-48e5-b4ac-b70b173846f7",
 CellTags->"Section3"],
Cell[48748, 1380, 209, 3, 20, "Text",ExpressionUUID->"0832226f-8b50-4e38-b462-137f3e5e8583"],
Cell[CellGroupData[{
Cell[48982, 1387, 115, 1, 32, "Subsection",ExpressionUUID->"12d62ce6-a13e-4213-ab1a-2bb6ce12b570",
 CellTags->"Section3a"],
Cell[49100, 1390, 270, 4, 35, "Text",ExpressionUUID->"367ff6bf-2420-4669-9bd2-b8e1e6b62d7a"],
Cell[49373, 1396, 737, 17, 51, "Text",ExpressionUUID->"c71cccdb-f66f-41ab-ac7b-adaeaa2f43da"],
Cell[50113, 1415, 2058, 54, 165, "Input",ExpressionUUID->"8b5cfbc5-9a2d-4011-b94b-655a17de8d45",
 InitializationCell->True],
Cell[52174, 1471, 591, 15, 37, "Text",ExpressionUUID->"22fe7871-5cfd-4fd4-8865-104f4a141e18"],
Cell[52768, 1488, 191, 3, 20, "Text",ExpressionUUID->"27a2ab3c-986c-493b-adc5-eddfbbb45218"],
Cell[CellGroupData[{
Cell[52984, 1495, 257, 7, 31, "Input",ExpressionUUID->"51b464c3-199f-4811-aeff-294842c05024",
 InitializationCell->True],
Cell[53244, 1504, 201, 5, 31, "Output",ExpressionUUID->"fffd85e6-ff0d-4f63-abe5-419bc501c314"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53482, 1514, 328, 9, 31, "Input",ExpressionUUID->"eabfa0f9-8485-4027-ba6e-e7e9fb5398c5",
 InitializationCell->True],
Cell[53813, 1525, 270, 7, 31, "Output",ExpressionUUID->"efea8d03-4e72-4d56-ba31-5b7c463ff86b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[54120, 1537, 169, 3, 31, "Input",ExpressionUUID->"50458c60-6ab1-4954-a4ba-c918ceb7ab49"],
Cell[54292, 1542, 579, 16, 31, "Output",ExpressionUUID->"36d46cfe-ee64-4c7b-a721-78d3b1ee891b"]
}, Open  ]],
Cell[54886, 1561, 1901, 62, 44, "Text",ExpressionUUID->"21ac410e-7e33-4e1f-8ab1-0e8752925876"],
Cell[56790, 1625, 316, 6, 20, "Text",ExpressionUUID->"3da9b533-fca0-498d-9f94-55ec4ceccc6c"],
Cell[57109, 1633, 544, 17, 31, "Input",ExpressionUUID->"76936235-f8c9-47f2-9162-77a2c5913599",
 InitializationCell->True],
Cell[57656, 1652, 472, 14, 23, "Text",ExpressionUUID->"56511268-0b77-4be0-ba8e-2bf9db898a2d"],
Cell[CellGroupData[{
Cell[58153, 1670, 165, 3, 31, "Input",ExpressionUUID->"b6838fed-be8e-42ce-809a-adbd44fbe64f"],
Cell[58321, 1675, 2907, 78, 146, "Output",ExpressionUUID->"971a2213-0d29-4438-8dcd-00fbc922211c"]
}, Open  ]],
Cell[61243, 1756, 807, 23, 42, "Text",ExpressionUUID->"fa4c377e-3acb-45f0-ab95-d8cfe078680d"],
Cell[62053, 1781, 1370, 38, 184, "Input",ExpressionUUID->"0a4fee28-be56-487e-9597-262f489ade75",
 InitializationCell->True],
Cell[63426, 1821, 296, 8, 20, "Text",ExpressionUUID->"fc6fe76c-70ab-44f3-81b1-de8087e4e0cf"],
Cell[CellGroupData[{
Cell[63747, 1833, 210, 5, 31, "Input",ExpressionUUID->"15ffe77f-19a3-414d-ad72-3a52f147533a"],
Cell[63960, 1840, 1017, 30, 51, "Output",ExpressionUUID->"356ce135-464b-4e38-bb01-ac029bfab948"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[65026, 1876, 158, 1, 32, "Subsection",ExpressionUUID->"6476a476-c968-4c04-ba8b-e27d4acb7e1e",
 CellTags->"Section3b"],
Cell[65187, 1879, 264, 4, 35, "Text",ExpressionUUID->"6af432f3-3d3d-45a8-8b0e-0217119e580a"],
Cell[65454, 1885, 317, 5, 35, "Text",ExpressionUUID->"109987a0-0a63-4597-8ac9-59b83f6f34b3"],
Cell[65774, 1892, 317, 7, 20, "Text",ExpressionUUID->"6c7f759a-63c3-48bd-98a6-68fce0e74108"],
Cell[CellGroupData[{
Cell[66116, 1903, 568, 17, 31, "Input",ExpressionUUID->"10b960a4-e6be-43c4-bdce-434a5a1c57a3",
 InitializationCell->True],
Cell[66687, 1922, 534, 16, 31, "Output",ExpressionUUID->"35571890-14b0-44c3-851b-79159778ccb0"]
}, Open  ]],
Cell[67236, 1941, 433, 7, 54, "Text",ExpressionUUID->"5e1fc0bd-7bf4-4cb7-906e-a960ff79c90c"],
Cell[67672, 1950, 420, 6, 50, "Text",ExpressionUUID->"87b0d6a0-f294-4dd9-b3a8-52e3a9754d78"],
Cell[68095, 1958, 998, 26, 127, "Input",ExpressionUUID->"322cfd7b-a906-4c18-ae85-75c00a3cfac7",
 InitializationCell->True],
Cell[69096, 1986, 766, 21, 35, "Text",ExpressionUUID->"040faa1e-eb69-4081-a4ec-296a23ad8a88"],
Cell[CellGroupData[{
Cell[69887, 2011, 274, 6, 31, "Input",ExpressionUUID->"ca57f63c-1101-4b51-9c75-78983c96766c"],
Cell[70164, 2019, 107, 1, 31, "Output",ExpressionUUID->"f42af8d4-b60c-4f3c-82d0-4cb4f820fcfa"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[70320, 2026, 148, 1, 32, "Subsection",ExpressionUUID->"27f27b1d-fc0a-4c72-8b3d-717974784602",
 CellTags->"Section3c"],
Cell[70471, 2029, 484, 11, 35, "Text",ExpressionUUID->"699bc457-a44b-4a47-8bd3-c2e6fee13e96"],
Cell[70958, 2042, 625, 17, 43, "Text",ExpressionUUID->"1df0d4f0-d19f-4e1d-a6b9-97512844206e"],
Cell[71586, 2061, 408, 9, 39, "Text",ExpressionUUID->"c2f9183f-7290-4d95-84d8-d27216977f67"],
Cell[71997, 2072, 656, 16, 89, "Input",ExpressionUUID->"15ce5efc-46d6-4389-a86e-920a2a45c15d",
 InitializationCell->True],
Cell[72656, 2090, 444, 11, 20, "Text",ExpressionUUID->"e56685ad-68aa-4478-979c-2fa107331c94"],
Cell[CellGroupData[{
Cell[73125, 2105, 301, 7, 31, "Input",ExpressionUUID->"c86d8aae-d88d-4808-803b-49138f8ac67e"],
Cell[73429, 2114, 110, 1, 31, "Output",ExpressionUUID->"6ed29c5f-2edc-45eb-9ef5-1fc4bbcf1430"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73576, 2120, 291, 7, 31, "Input",ExpressionUUID->"248390ec-92d9-4306-ac85-6b388655faf3"],
Cell[73870, 2129, 111, 1, 31, "Output",ExpressionUUID->"0ced5ec3-5055-4e85-8734-81b0adfe237d"]
}, Open  ]],
Cell[73996, 2133, 268, 6, 24, "Text",ExpressionUUID->"5a61077e-9182-4907-ae3c-2aa0d1757946"],
Cell[74267, 2141, 734, 18, 37, "Text",ExpressionUUID->"b97338a5-00c5-482b-9e36-2eb1b06bc311"],
Cell[75004, 2161, 439, 13, 24, "Text",ExpressionUUID->"27a1ceea-717b-4710-ad2f-821e4dc4db4e"],
Cell[75446, 2176, 1064, 28, 127, "Input",ExpressionUUID->"54038dcd-5b95-448d-9278-ff6f9d7dce4a",
 InitializationCell->True],
Cell[76513, 2206, 598, 16, 38, "Text",ExpressionUUID->"39c7c67a-6c81-456a-b0cc-cd61f41ed622"],
Cell[CellGroupData[{
Cell[77136, 2226, 279, 6, 31, "Input",ExpressionUUID->"3c26551e-0599-4b7b-b0aa-c6e7017f68e0"],
Cell[77418, 2234, 1128, 31, 70, "Output",ExpressionUUID->"8559de59-e434-4da6-acb7-bb28c0af92fe"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[78595, 2271, 139, 1, 32, "Subsection",ExpressionUUID->"1de5c516-2835-4c5e-b339-eeefaecbedc7",
 CellTags->"Section3d"],
Cell[78737, 2274, 301, 4, 35, "Text",ExpressionUUID->"f405e249-c20a-4931-9473-a828e0c8444e"],
Cell[79041, 2280, 381, 5, 50, "Text",ExpressionUUID->"ee415419-9201-4b62-9897-a67d87fe5b9d"],
Cell[79425, 2287, 291, 4, 35, "Text",ExpressionUUID->"8ff85bcc-af22-4e86-961a-7537c1e5bc25"],
Cell[79719, 2293, 217, 3, 20, "Text",ExpressionUUID->"ca51d256-c15b-46ee-9361-8bf26b4bd50c"],
Cell[CellGroupData[{
Cell[79961, 2300, 1409, 46, 51, "Input",ExpressionUUID->"70469a45-6479-4cc6-b04a-212326d31a5e",
 InitializationCell->True],
Cell[81373, 2348, 1343, 44, 51, "Output",ExpressionUUID->"cafc5457-19dc-4d39-9ab0-b77c0f699bb5"]
}, Open  ]],
Cell[82731, 2395, 343, 5, 35, "Text",ExpressionUUID->"f8661649-5145-4347-a1c2-ef80619c7ff8"],
Cell[83077, 2402, 496, 7, 50, "Text",ExpressionUUID->"2ab42723-a776-49f1-b761-78b1375c4d0f"],
Cell[83576, 2411, 1064, 28, 50, "Text",ExpressionUUID->"427fb718-5d0e-4cf0-96d2-078ca5e47078"],
Cell[84643, 2441, 981, 24, 50, "Text",ExpressionUUID->"4ab739cd-145d-45c6-8821-d39d41bfa007"],
Cell[85627, 2467, 421, 6, 50, "Text",ExpressionUUID->"e7678a01-2770-471d-8efe-9745bafdd670"],
Cell[86051, 2475, 303, 4, 35, "Text",ExpressionUUID->"76b3b491-c4ad-450c-bed0-35d2df778cbb"],
Cell[86357, 2481, 3469, 91, 374, "Input",ExpressionUUID->"3ba29fb7-46e5-4017-bd3e-ee6f4c6c40c9",
 InitializationCell->True],
Cell[89829, 2574, 155, 2, 20, "Text",ExpressionUUID->"f79d91d1-15ea-455e-8197-5aaba5fd7dd7"],
Cell[CellGroupData[{
Cell[90009, 2580, 436, 11, 31, "Input",ExpressionUUID->"527de16a-d0eb-4f6b-b140-c144b2bdb463",
 InitializationCell->True],
Cell[90448, 2593, 3257, 107, 108, "Output",ExpressionUUID->"be40e496-6378-4f96-a81e-923fe1fc5868"]
}, Open  ]],
Cell[93720, 2703, 143, 2, 20, "Text",ExpressionUUID->"1bf88b35-cad2-4e43-88d4-4647a91e8ada"],
Cell[93866, 2707, 165, 4, 24, "Text",ExpressionUUID->"d3bdf79d-e821-4fbc-bb5e-c3d19644a30e"],
Cell[CellGroupData[{
Cell[94056, 2715, 273, 5, 31, "Input",ExpressionUUID->"53e7bae8-c79b-41c7-8aec-914a5fed71e6"],
Cell[94332, 2722, 2994, 83, 146, "Output",ExpressionUUID->"3bbcd504-190b-47c4-ac62-3e1ae814356a"]
}, Open  ]],
Cell[97341, 2808, 417, 8, 35, "Text",ExpressionUUID->"761a2a38-609b-4ef2-b828-32c5529bdfab"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[97807, 2822, 122, 1, 55, "Section",ExpressionUUID->"e0368784-e575-4c62-81a4-09460b709266",
 CellTags->"Section4"],
Cell[97932, 2825, 317, 5, 35, "Text",ExpressionUUID->"917560b1-3b8b-4058-a152-313fab705fdf"],
Cell[CellGroupData[{
Cell[98274, 2834, 120, 1, 32, "Subsection",ExpressionUUID->"59d86a73-20b1-4f09-8952-1a744053868b",
 CellTags->"Section4a"],
Cell[98397, 2837, 1511, 37, 85, "Text",ExpressionUUID->"772a4a54-018a-4231-a2a8-d42d5cb3b445"],
Cell[99911, 2876, 312, 5, 35, "Text",ExpressionUUID->"0eed856f-178e-49e0-bc3f-ba703cb59076"],
Cell[CellGroupData[{
Cell[100248, 2885, 230, 4, 31, "Input",ExpressionUUID->"a9707386-964d-4ff2-8582-64a1b970af96"],
Cell[100481, 2891, 110, 1, 31, "Output",ExpressionUUID->"85561da0-7a45-49da-96af-ffef10f0165b"]
}, Open  ]],
Cell[100606, 2895, 256, 4, 20, "Text",ExpressionUUID->"9037ca60-ab3b-45f1-a4ca-3b4742490528"],
Cell[CellGroupData[{
Cell[100887, 2903, 94, 0, 18, "Subsubsection",ExpressionUUID->"074891f3-3bbe-4a72-929f-1905488acc6f"],
Cell[100984, 2905, 167, 3, 20, "Text",ExpressionUUID->"4aa930cf-81f9-474a-a40c-159ecf4aa71f"],
Cell[101154, 2910, 212, 3, 20, "Text",ExpressionUUID->"c9eb0d6a-9bc5-4bc4-bd2d-9f3de8a75b4d"],
Cell[CellGroupData[{
Cell[101391, 2917, 237, 4, 31, "Input",ExpressionUUID->"2e330d7a-ae5a-4cb3-9ac2-3f2e18d6bbc4"],
Cell[101631, 2923, 110, 1, 31, "Output",ExpressionUUID->"716d0113-972c-485c-b4fb-d4f27d511bff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[101778, 2929, 230, 4, 31, "Input",ExpressionUUID->"b889a777-ae3c-4027-8d6a-8d1c2088d72c"],
Cell[102011, 2935, 110, 1, 31, "Output",ExpressionUUID->"3281abd3-a4d9-4be2-96be-41790d9ef00d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[102158, 2941, 236, 4, 31, "Input",ExpressionUUID->"e88e77d5-8ec6-417e-b6c5-4b31cc36eb11"],
Cell[102397, 2947, 111, 1, 31, "Output",ExpressionUUID->"a9cf6a51-141d-4427-b09b-949469eded54"]
}, Open  ]],
Cell[102523, 2951, 288, 4, 20, "Text",ExpressionUUID->"3ed5be65-9de4-4733-a9c9-f64ce0475ee0"],
Cell[CellGroupData[{
Cell[102836, 2959, 251, 5, 31, "Input",ExpressionUUID->"55b2e0e5-fefd-4d4c-8bc7-02bd69da607a"],
Cell[103090, 2966, 110, 1, 31, "Output",ExpressionUUID->"82d425bb-f068-410a-9b6d-e3e7138f45e2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[103237, 2972, 242, 5, 31, "Input",ExpressionUUID->"1846728f-b5ed-41f9-895a-50877dceb6a7"],
Cell[103482, 2979, 111, 1, 31, "Output",ExpressionUUID->"ab77bc91-d852-4995-a2bd-f1d76080bd76"]
}, Open  ]],
Cell[103608, 2983, 717, 10, 50, "Text",ExpressionUUID->"6e3f1228-8994-4f69-a031-151baa4dde8f"],
Cell[CellGroupData[{
Cell[104350, 2997, 239, 5, 31, "Input",ExpressionUUID->"4f22ed76-b431-4416-8679-e9e91fda0c00"],
Cell[104592, 3004, 110, 1, 31, "Output",ExpressionUUID->"3ad79f3c-7e7a-4965-88b3-764dff59852e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[104739, 3010, 234, 5, 31, "Input",ExpressionUUID->"b9ea23fc-633f-41c1-89b9-fdef4fa29226"],
Cell[104976, 3017, 110, 1, 31, "Output",ExpressionUUID->"dbeaf6a8-05bd-4e7e-a97a-9692db8edf14"]
}, Open  ]],
Cell[CellGroupData[{
Cell[105123, 3023, 235, 5, 31, "Input",ExpressionUUID->"0b53fb34-453a-41d1-82ef-b15d0b83a333"],
Cell[105361, 3030, 111, 1, 31, "Output",ExpressionUUID->"45769a69-7f3a-4d12-83cf-896bc8736356"]
}, Open  ]],
Cell[105487, 3034, 363, 5, 35, "Text",ExpressionUUID->"95cca2fb-0356-45c9-b394-13ca3737cfb4"],
Cell[CellGroupData[{
Cell[105875, 3043, 238, 5, 31, "Input",ExpressionUUID->"69dea84d-5ddd-4a75-8b7c-b181b9984089"],
Cell[106116, 3050, 110, 1, 31, "Output",ExpressionUUID->"5a0e77b5-f6bd-4ccd-9e07-7aa064dd6481"]
}, Open  ]],
Cell[CellGroupData[{
Cell[106263, 3056, 239, 5, 31, "Input",ExpressionUUID->"74ce3af8-f1e2-47ec-965e-2fdf12994994"],
Cell[106505, 3063, 110, 1, 31, "Output",ExpressionUUID->"2736b265-b1b6-4c2d-aed7-6eae32700967"]
}, Open  ]],
Cell[CellGroupData[{
Cell[106652, 3069, 240, 5, 31, "Input",ExpressionUUID->"58583672-eb8c-4b1e-88a6-b0c61d065efd"],
Cell[106895, 3076, 111, 1, 31, "Output",ExpressionUUID->"6bb30e03-25d1-4b3a-893a-cf5e724d11a6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[107055, 3083, 85, 0, 18, "Subsubsection",ExpressionUUID->"9591e1a7-606b-4902-9c07-e3c2c8d3a278"],
Cell[107143, 3085, 474, 7, 35, "Text",ExpressionUUID->"0b898470-02bd-4778-a90e-23445917c04b"],
Cell[CellGroupData[{
Cell[107642, 3096, 242, 5, 31, "Input",ExpressionUUID->"ef2d6daa-0edc-4993-8024-53a63e8ab57a"],
Cell[107887, 3103, 110, 1, 31, "Output",ExpressionUUID->"807cd848-10c7-410f-8971-6400838b2dac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[108034, 3109, 243, 5, 31, "Input",ExpressionUUID->"4a58bb9f-4a38-4fec-8a3a-c94676f938c4"],
Cell[108280, 3116, 111, 1, 31, "Output",ExpressionUUID->"66378410-2921-4403-9b50-8c5a32991de4"]
}, Open  ]],
Cell[108406, 3120, 334, 5, 35, "Text",ExpressionUUID->"cfedd40f-1704-4acc-ac62-bc10da2434dd"],
Cell[CellGroupData[{
Cell[108765, 3129, 252, 5, 31, "Input",ExpressionUUID->"2904aa9b-b076-4818-bc71-89e73967f0dc"],
Cell[109020, 3136, 110, 1, 31, "Output",ExpressionUUID->"f1cee714-0d3e-4cef-84c3-615bcd95adfd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[109167, 3142, 250, 5, 31, "Input",ExpressionUUID->"e12a7ef1-3492-4858-87d8-0717d65a3052"],
Cell[109420, 3149, 110, 1, 31, "Output",ExpressionUUID->"472f7473-f578-4be7-8472-cbd9dcfb326f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[109567, 3155, 250, 5, 31, "Input",ExpressionUUID->"8a2579d6-696b-4ace-a63f-ad5cf99032b8"],
Cell[109820, 3162, 111, 1, 31, "Output",ExpressionUUID->"e90c9077-3f64-42ff-8b3c-7abb36b4e238"]
}, Open  ]],
Cell[109946, 3166, 377, 5, 35, "Text",ExpressionUUID->"b3122da6-9305-4cdb-8e98-8b3dedcd7c9b"],
Cell[CellGroupData[{
Cell[110348, 3175, 241, 5, 31, "Input",ExpressionUUID->"67db7197-ccdb-41b7-97f6-5491c3bfbba3"],
Cell[110592, 3182, 110, 1, 31, "Output",ExpressionUUID->"8a6b4164-3ee8-45f7-813b-bfb77805a6c5"]
}, Open  ]],
Cell[110717, 3186, 149, 2, 20, "Text",ExpressionUUID->"3f929254-15e7-462e-8ac9-27b25d3032bb"],
Cell[110869, 3190, 295, 4, 35, "Text",ExpressionUUID->"29ae17fb-9e36-44ff-9230-0e55d39945d6"],
Cell[CellGroupData[{
Cell[111189, 3198, 245, 5, 31, "Input",ExpressionUUID->"1fbd411b-1b52-4d7b-a43e-baf55f58aed9"],
Cell[111437, 3205, 110, 1, 31, "Output",ExpressionUUID->"3cd8dd6b-de4b-4d71-a316-5740e68aba94"]
}, Open  ]],
Cell[111562, 3209, 385, 5, 50, "Text",ExpressionUUID->"8f744415-fa5b-4f6f-b154-d37f5662c740"],
Cell[CellGroupData[{
Cell[111972, 3218, 244, 5, 31, "Input",ExpressionUUID->"6fed12e6-3b4f-4fb0-8922-8d4c65af82b4"],
Cell[112219, 3225, 110, 1, 31, "Output",ExpressionUUID->"c59e4542-217d-4530-aa47-b098d9697db3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[112366, 3231, 245, 5, 31, "Input",ExpressionUUID->"1043d33e-39c2-47a0-8b25-b8689e799dc3"],
Cell[112614, 3238, 111, 1, 31, "Output",ExpressionUUID->"ecefedb7-35a3-4b99-abb6-bbd9a155e083"]
}, Open  ]],
Cell[112740, 3242, 756, 15, 50, "Text",ExpressionUUID->"61856487-eb8b-4ca2-ae37-eb379846bdeb"],
Cell[CellGroupData[{
Cell[113521, 3261, 250, 5, 31, "Input",ExpressionUUID->"6b4bba97-b867-4b87-94de-94a8cfa176c6"],
Cell[113774, 3268, 110, 1, 31, "Output",ExpressionUUID->"ac00708c-3663-4bda-a689-9840c8ef4ffc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[113921, 3274, 250, 5, 31, "Input",ExpressionUUID->"2127d22e-cc1a-4a23-9af6-160bb15baaaf"],
Cell[114174, 3281, 111, 1, 31, "Output",ExpressionUUID->"f5b226d7-958c-409c-b6ba-aa8d21dd5796"]
}, Open  ]],
Cell[114300, 3285, 355, 5, 35, "Text",ExpressionUUID->"58e285cc-1ab0-4929-851e-53733e905fdc"],
Cell[CellGroupData[{
Cell[114680, 3294, 238, 5, 31, "Input",ExpressionUUID->"6b8e95f1-1b87-4b22-8b59-177863e4953c"],
Cell[114921, 3301, 110, 1, 31, "Output",ExpressionUUID->"00ba605f-9720-4b60-a8a0-4492cc1066cc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[115068, 3307, 237, 5, 31, "Input",ExpressionUUID->"80755c1e-5e6f-4427-b835-faaea58c1448"],
Cell[115308, 3314, 111, 1, 31, "Output",ExpressionUUID->"6f37e51f-3da2-4d2f-a361-fbc629cc191c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[115456, 3320, 243, 5, 31, "Input",ExpressionUUID->"d14b4e5a-c9eb-4cc7-a7e3-a279b07c240d"],
Cell[115702, 3327, 111, 1, 31, "Output",ExpressionUUID->"450d7e7d-ef4a-4c3b-90a8-6cf1a83b85c2"]
}, Open  ]],
Cell[115828, 3331, 349, 7, 35, "Text",ExpressionUUID->"0924dd6d-f813-43ff-8783-6992c23d2c64"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[116226, 3344, 126, 1, 32, "Subsection",ExpressionUUID->"788beb09-c4eb-4ffd-8f44-c0f9d0cdbf98",
 CellTags->"Section4b"],
Cell[116355, 3347, 219, 3, 20, "Text",ExpressionUUID->"94c5d1d9-ada5-4569-8e01-4fc7cc2689c3"],
Cell[CellGroupData[{
Cell[116599, 3354, 92, 0, 18, "Subsubsection",ExpressionUUID->"b613c332-8b4e-4932-9ac6-058ae50e210b"],
Cell[116694, 3356, 158, 3, 20, "Text",ExpressionUUID->"14e67f88-22b2-4d57-93cc-17c460b7b0c4"],
Cell[116855, 3361, 272, 4, 35, "Text",ExpressionUUID->"98ac3ee6-4fe5-4a11-b77f-2d5b15237ee9"],
Cell[117130, 3367, 761, 16, 50, "Text",ExpressionUUID->"34ef6e05-8268-4c8b-8da9-2cba8a4fce5a"],
Cell[117894, 3385, 161, 3, 20, "Text",ExpressionUUID->"3b629240-6aeb-4703-9514-f24f68cd6442"],
Cell[CellGroupData[{
Cell[118080, 3392, 1129, 37, 51, "Input",ExpressionUUID->"a64b98a8-0828-4675-a0f6-6332bbaff255",
 InitializationCell->True],
Cell[119212, 3431, 1075, 35, 51, "Output",ExpressionUUID->"bc0bdc53-5274-49c7-bc55-71a4ae4881cd"]
}, Open  ]],
Cell[120302, 3469, 499, 13, 43, "Text",ExpressionUUID->"ef3e5498-3972-4648-878b-03c78f29822a"],
Cell[CellGroupData[{
Cell[120826, 3486, 434, 11, 31, "Input",ExpressionUUID->"9aff966f-d15e-42f9-b3ec-47ea2f1e066a",
 InitializationCell->True],
Cell[121263, 3499, 1877, 61, 70, "Output",ExpressionUUID->"7677149b-05aa-4ff8-84db-2377f0652cc4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123177, 3565, 264, 5, 31, "Input",ExpressionUUID->"671fae22-2849-4002-b2b2-941909620a48"],
Cell[123444, 3572, 1187, 33, 70, "Output",ExpressionUUID->"f9646127-3044-4b9b-9496-408017a325df"]
}, Open  ]],
Cell[124646, 3608, 270, 4, 20, "Text",ExpressionUUID->"6e289b63-d53c-4619-ba60-347b36ff08ea"],
Cell[124919, 3614, 191, 3, 20, "Text",ExpressionUUID->"b42b0ba4-518c-41b9-90e3-2e8f71a0886a"],
Cell[CellGroupData[{
Cell[125135, 3621, 1124, 37, 51, "Input",ExpressionUUID->"91f4eb68-ac81-46d9-a02e-88adea1fe093",
 InitializationCell->True],
Cell[126262, 3660, 1070, 35, 51, "Output",ExpressionUUID->"32af393f-5f1e-4649-ad57-41c00f0684d2"]
}, Open  ]],
Cell[127347, 3698, 169, 3, 20, "Text",ExpressionUUID->"401d2538-8238-4827-8b87-6c788e348e22"],
Cell[CellGroupData[{
Cell[127541, 3705, 398, 10, 31, "Input",ExpressionUUID->"7d7df014-e7ac-4e6e-974d-5440fdfbcb9a",
 InitializationCell->True],
Cell[127942, 3717, 1784, 58, 51, "Output",ExpressionUUID->"afd1a133-0384-42b9-a164-c151f2f23705"]
}, Open  ]],
Cell[CellGroupData[{
Cell[129763, 3780, 264, 5, 31, "Input",ExpressionUUID->"19b4c345-50fc-4b21-8a21-8d5635b1e901"],
Cell[130030, 3787, 186, 4, 31, "Output",ExpressionUUID->"fc34943d-b774-4755-8c0a-a7ab31778146"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[130265, 3797, 106, 0, 18, "Subsubsection",ExpressionUUID->"71f22a44-6413-49e0-ab36-c119916e9f55"],
Cell[130374, 3799, 355, 5, 35, "Text",ExpressionUUID->"e75a76ca-7f32-4266-a5aa-e09842167f55"],
Cell[130732, 3806, 207, 3, 20, "Text",ExpressionUUID->"f2e5d0c3-36a3-4772-a839-520c06569cac"],
Cell[CellGroupData[{
Cell[130964, 3813, 208, 3, 16, "Item1Numbered",ExpressionUUID->"f85d2968-bce2-4b09-985a-5eb1b99aa416"],
Cell[131175, 3818, 185, 3, 16, "Item1Numbered",ExpressionUUID->"05b2dccb-f6ca-4fcf-b4d6-6c793920adea"],
Cell[131363, 3823, 182, 3, 16, "Item1Numbered",ExpressionUUID->"034d949a-1e64-4fa3-b628-2557452670f7"],
Cell[131548, 3828, 210, 3, 16, "Item1Numbered",ExpressionUUID->"ef2a43d2-0e17-46eb-af92-1f1ed34b8612"],
Cell[131761, 3833, 164, 2, 16, "Item1Numbered",ExpressionUUID->"2c25f0f1-ae3c-41ae-a641-65a1ca68d7cf"],
Cell[131928, 3837, 259, 4, 29, "Item1Numbered",ExpressionUUID->"4cb16e6a-89a6-4a79-9336-8ae1acd26f92"],
Cell[132190, 3843, 290, 4, 29, "Item1Numbered",ExpressionUUID->"f0429b93-c802-4de4-982a-1e7a40ec3f90"]
}, Open  ]],
Cell[132495, 3850, 468, 6, 50, "Text",ExpressionUUID->"d8b17bdb-4a82-4b76-9401-988aff6e0bc6"],
Cell[132966, 3858, 778, 22, 35, "Text",ExpressionUUID->"ca5e00c4-54ee-4cf0-b679-2ec899b4ec91"],
Cell[133747, 3882, 434, 8, 54, "Text",ExpressionUUID->"d9741c84-7ce6-471c-8076-729d5a86842a"],
Cell[134184, 3892, 144, 2, 20, "Text",ExpressionUUID->"ccc18a7c-224b-40dd-b16f-ae76110f72fe"],
Cell[CellGroupData[{
Cell[134353, 3898, 217, 5, 31, "Input",ExpressionUUID->"c961355a-1a17-4fc9-a3e4-bcbc16ae8c8f",
 InitializationCell->True],
Cell[134573, 3905, 162, 3, 31, "Output",ExpressionUUID->"986f3c0c-1611-4e14-8728-ba630c3e96e9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[134772, 3913, 183, 4, 31, "Input",ExpressionUUID->"89825e7a-a640-4f83-98b5-1eba774dff42",
 InitializationCell->True],
Cell[134958, 3919, 129, 2, 31, "Output",ExpressionUUID->"d686b979-d2f1-405e-88b8-db8d3c615041"]
}, Open  ]],
Cell[135102, 3924, 405, 10, 35, "Text",ExpressionUUID->"8b4cd89a-8d4f-462c-8f10-b0e169922e11"],
Cell[CellGroupData[{
Cell[135532, 3938, 264, 8, 31, "Input",ExpressionUUID->"900e92cf-9e23-4f93-8869-0f31ef049c41"],
Cell[135799, 3948, 130, 2, 31, "Output",ExpressionUUID->"889c0570-0ee4-408c-ad60-0878b47bbc1a"]
}, Open  ]],
Cell[135944, 3953, 593, 8, 65, "Text",ExpressionUUID->"2b0a9d6b-4bc8-4f60-8d69-2cef4a119c83"],
Cell[136540, 3963, 676, 14, 55, "Text",ExpressionUUID->"bb34f29d-cff6-4278-9b33-fca780b4b9a0"],
Cell[CellGroupData[{
Cell[137241, 3981, 347, 8, 31, "Input",ExpressionUUID->"209da4bc-810e-4257-9b0d-194258dd3d55"],
Cell[137591, 3991, 348, 9, 31, "Output",ExpressionUUID->"ddaa163b-607f-4c06-9891-23434b8fc06c"]
}, Open  ]],
Cell[137954, 4003, 713, 13, 73, "Text",ExpressionUUID->"b9a76dff-1ab8-425d-bf37-d3034a3eb828"],
Cell[CellGroupData[{
Cell[138692, 4020, 201, 5, 31, "Input",ExpressionUUID->"dc53fcb2-bbca-415c-85c2-29c1b339233b"],
Cell[138896, 4027, 154, 3, 31, "Output",ExpressionUUID->"6b241f2a-57a5-486f-9314-7eec90108c47"]
}, Open  ]],
Cell[139065, 4033, 489, 11, 36, "Text",ExpressionUUID->"d3023dc3-595b-4762-93e5-e7508dc2bfe4"],
Cell[CellGroupData[{
Cell[139579, 4048, 568, 17, 31, "Input",ExpressionUUID->"c6ec813f-5a23-496a-b00e-2c678777151b"],
Cell[140150, 4067, 1085, 35, 51, "Output",ExpressionUUID->"c497b055-1344-4e8d-aac9-a028a9261dee"]
}, Open  ]],
Cell[141250, 4105, 153, 2, 20, "Text",ExpressionUUID->"8a962a2b-f160-482a-aca2-e3554c646d0f"],
Cell[CellGroupData[{
Cell[141428, 4111, 568, 17, 31, "Input",ExpressionUUID->"9d50fe7d-72fc-45e3-a906-cd38851c38d2"],
Cell[141999, 4130, 1079, 35, 51, "Output",ExpressionUUID->"2b76443d-5a3b-4ddb-8865-b2a23abd417f"]
}, Open  ]],
Cell[143093, 4168, 187, 3, 20, "Text",ExpressionUUID->"8600e479-fd28-4be9-9206-407a73acf99b"],
Cell[CellGroupData[{
Cell[143305, 4175, 1236, 37, 70, "Input",ExpressionUUID->"b9d41941-aafc-4950-94a0-32aea64cf992",
 InitializationCell->True],
Cell[144544, 4214, 1997, 67, 70, "Output",ExpressionUUID->"b3ce8e7d-6d0f-4225-82f9-2fbbeeeb3868"]
}, Open  ]],
Cell[146556, 4284, 343, 5, 35, "Text",ExpressionUUID->"c1f49ae9-d2b4-4836-8bf9-568c20462b35"],
Cell[146902, 4291, 510, 11, 58, "Text",ExpressionUUID->"d54ab450-3a17-4211-9dac-ec4f015b6f5d"],
Cell[147415, 4304, 1280, 38, 70, "Input",ExpressionUUID->"f4fe33ff-82b7-4eb7-aea5-7accd2f8bb93",
 InitializationCell->True],
Cell[148698, 4344, 143, 2, 20, "Text",ExpressionUUID->"c45f7a16-e3fc-4a1a-8f75-04f65ce5c994"],
Cell[CellGroupData[{
Cell[148866, 4350, 112, 1, 31, "Input",ExpressionUUID->"86a1f3b2-45be-42f9-be1e-58c97a6a5a35"],
Cell[148981, 4353, 2075, 70, 70, "Output",ExpressionUUID->"a7733314-c86a-4cde-92c5-ae33e55742c0"]
}, Open  ]],
Cell[151071, 4426, 415, 6, 50, "Text",ExpressionUUID->"12771589-9f90-4929-ab41-eb4ef54c6932"],
Cell[151489, 4434, 1161, 35, 89, "Input",ExpressionUUID->"7aeb92f8-8b93-4d7f-a75f-eb3658dddd31",
 InitializationCell->True],
Cell[152653, 4471, 95, 0, 20, "Text",ExpressionUUID->"081812b0-7501-493d-a65f-68b5d6a1126c"],
Cell[CellGroupData[{
Cell[152773, 4475, 112, 1, 31, "Input",ExpressionUUID->"3024f738-15dd-4911-91d1-f48e52d5212b"],
Cell[152888, 4478, 2086, 70, 70, "Output",ExpressionUUID->"e2c1353d-fa62-4384-8b32-107534cc7e6e"]
}, Open  ]],
Cell[154989, 4551, 1037, 28, 50, "Text",ExpressionUUID->"e03c529a-71f4-4b80-8033-e0be9cf2e724"],
Cell[156029, 4581, 1065, 22, 80, "Text",ExpressionUUID->"3aed3c9f-f8f0-44f3-af28-9c067cd218ec"]
}, Open  ]],
Cell[CellGroupData[{
Cell[157131, 4608, 108, 0, 18, "Subsubsection",ExpressionUUID->"323c08e9-8ffc-4ae4-abf4-36a2f83b0a4d"],
Cell[157242, 4610, 128, 0, 20, "Text",ExpressionUUID->"75a47b00-e0d1-4ea0-8c2b-310797009745"],
Cell[157373, 4612, 5518, 152, 393, "Input",ExpressionUUID->"948703fa-0329-482d-af93-08e02d008d9c",
 InitializationCell->True],
Cell[162894, 4766, 351, 7, 39, "Text",ExpressionUUID->"53f96fe1-4650-4528-a3b5-cb78fc1b081e"],
Cell[CellGroupData[{
Cell[163270, 4777, 425, 10, 31, "Input",ExpressionUUID->"ff264469-217c-4ddf-bf1e-65b753e940cc",
 InitializationCell->True],
Cell[163698, 4789, 2304, 73, 70, "Output",ExpressionUUID->"65725d57-c31b-49eb-aa4b-8786cb9fe6b1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[166039, 4867, 388, 10, 31, "Input",ExpressionUUID->"32a6baae-2d4a-4052-a622-17c0922504e4",
 InitializationCell->True],
Cell[166430, 4879, 2985, 98, 89, "Output",ExpressionUUID->"db88f9ec-4698-4df0-a119-3b894c6faeae"]
}, Open  ]],
Cell[CellGroupData[{
Cell[169452, 4982, 265, 5, 31, "Input",ExpressionUUID->"484dcf98-7590-49f5-979b-76df30d3ba1d"],
Cell[169720, 4989, 1095, 29, 70, "Output",ExpressionUUID->"b7a8c1ff-f31d-4c62-9532-c3f1ddbadd45"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[170888, 5026, 117, 1, 55, "Section",ExpressionUUID->"3603e99d-185e-4f21-9f11-f8c06b7116a6",
 CellTags->"Section5"],
Cell[171008, 5029, 412, 7, 36, "Text",ExpressionUUID->"959ac50e-ab56-4283-a6f5-451c3f577762"],
Cell[CellGroupData[{
Cell[171445, 5040, 142, 1, 35, "Subsection",ExpressionUUID->"db0b4f9f-52d6-421c-8cec-69d68da6e9f4",
 CellTags->"Section5a"],
Cell[171590, 5043, 1964, 60, 50, "Text",ExpressionUUID->"80a86659-9c91-4507-8d0c-7e5b35f76f6b"],
Cell[173557, 5105, 1626, 48, 88, "Text",ExpressionUUID->"d391839d-1e19-41f1-8f02-6f34528a7836"],
Cell[CellGroupData[{
Cell[175208, 5157, 1344, 41, 51, "Input",ExpressionUUID->"87777a64-fe80-4a7b-970b-cd60a92ca113",
 InitializationCell->True],
Cell[176555, 5200, 1246, 39, 51, "Output",ExpressionUUID->"f59cd7b2-c197-4b08-863a-42c395a1e086"]
}, Open  ]],
Cell[177816, 5242, 662, 11, 66, "Text",ExpressionUUID->"ed53ac54-e1ae-48b0-abf4-939dbfd7dca4"],
Cell[178481, 5255, 375, 8, 36, "Text",ExpressionUUID->"c24204b5-6169-44f9-976a-20fd64398d9f"],
Cell[CellGroupData[{
Cell[178881, 5267, 373, 10, 31, "Input",ExpressionUUID->"e4cc30a4-7ab1-4420-8447-c7af0f868afd",
 InitializationCell->True],
Cell[179257, 5279, 307, 8, 31, "Output",ExpressionUUID->"4fe69a2f-2eef-4b04-be05-e5b8cf3e0b8e"]
}, Open  ]],
Cell[179579, 5290, 271, 6, 21, "Text",ExpressionUUID->"a529d963-ea2d-417d-b1c6-97f03be3727e"],
Cell[CellGroupData[{
Cell[179875, 5300, 191, 3, 31, "Input",ExpressionUUID->"626c71d9-d6d7-4324-bd1c-62cbe82235fa"],
Cell[180069, 5305, 366, 10, 31, "Output",ExpressionUUID->"94075b45-dd0e-451c-b9bb-a30c4cdc8e2f"]
}, Open  ]],
Cell[180450, 5318, 167, 3, 20, "Text",ExpressionUUID->"4a57595c-aa55-43ec-af78-e8e1aae44448"],
Cell[180620, 5323, 445, 13, 24, "Text",ExpressionUUID->"cf157ded-8040-4d7a-88c7-4394519861f8"],
Cell[181068, 5338, 663, 16, 50, "Text",ExpressionUUID->"e733f7a2-90be-4d1f-8fed-af7d6aea9221"],
Cell[181734, 5356, 261, 4, 35, "Text",ExpressionUUID->"b3752b07-6f3b-462a-97ca-b0be81bc9b6d"],
Cell[CellGroupData[{
Cell[182020, 5364, 448, 12, 31, "Input",ExpressionUUID->"327d977c-ff86-4429-84dd-1db7aabf6279"],
Cell[182471, 5378, 366, 10, 31, "Output",ExpressionUUID->"99673160-af43-4586-99a4-72a00c66861e"]
}, Open  ]],
Cell[182852, 5391, 161, 3, 20, "Text",ExpressionUUID->"ce69f44a-1ef4-40cf-9f7a-f84a562d1ce2"],
Cell[183016, 5396, 152, 2, 20, "Text",ExpressionUUID->"8760920f-f7a9-4dc5-990f-28d7752208b1"],
Cell[CellGroupData[{
Cell[183193, 5402, 201, 3, 31, "Input",ExpressionUUID->"29b7e24f-70d5-4bc4-88b1-995e604d9ea2"],
Cell[183397, 5407, 1464, 45, 70, "Output",ExpressionUUID->"7822ba8c-5342-47be-99a7-ba9acc23ddf5"]
}, Open  ]],
Cell[184876, 5455, 249, 4, 35, "Text",ExpressionUUID->"da5bdd8d-b6e1-4222-9880-cb4812286732"],
Cell[185128, 5461, 529, 11, 36, "Text",ExpressionUUID->"d666ef8d-40d8-472b-93b7-b239ad89efac"],
Cell[CellGroupData[{
Cell[185682, 5476, 889, 26, 108, "Input",ExpressionUUID->"2afd9807-63ed-4d4e-b903-d325ef1a81be"],
Cell[186574, 5504, 366, 10, 31, "Output",ExpressionUUID->"e789a033-d4b4-4e08-abc0-40dac532ba25"]
}, Open  ]],
Cell[186955, 5517, 146, 2, 20, "Text",ExpressionUUID->"917460c1-c3fb-499d-ad39-197024bc3bcf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[187138, 5524, 135, 1, 32, "Subsection",ExpressionUUID->"33f1e735-ca22-4cce-96ba-f86c21d5c372",
 CellTags->"Section5b"],
Cell[187276, 5527, 593, 14, 55, "Text",ExpressionUUID->"0c8004e3-2658-40fa-8f50-7e35d1e8587c"],
Cell[187872, 5543, 197, 4, 31, "Input",ExpressionUUID->"bbfa0d6f-4528-4bf1-b71f-6400e4a11d8a",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[188094, 5551, 100, 0, 18, "Subsubsection",ExpressionUUID->"04187dc7-9975-4855-81c3-d61fd8384e49"],
Cell[188197, 5553, 758, 19, 50, "Text",ExpressionUUID->"2f7b620d-e4b5-46d2-a909-3afae5172a91"],
Cell[188958, 5574, 194, 3, 20, "Text",ExpressionUUID->"fa96afad-4a78-44bd-a2a9-e23fbdcac996"],
Cell[189155, 5579, 784, 22, 70, "Input",ExpressionUUID->"b09e8c3b-81fe-40e1-be5c-5b6b4f54ff16",
 InitializationCell->True],
Cell[189942, 5603, 207, 3, 20, "Text",ExpressionUUID->"fb4ce1fc-dd11-4a37-b622-dd1e6c48b5a1"],
Cell[CellGroupData[{
Cell[190174, 5610, 883, 21, 51, "Input",ExpressionUUID->"602495c2-2b18-4fce-89d4-f61197527bcf",
 InitializationCell->True],
Cell[191060, 5633, 1234, 39, 51, "Output",ExpressionUUID->"4bdf9c92-45bf-44a0-8339-7adc4d1c2cbb"]
}, Open  ]],
Cell[192309, 5675, 322, 9, 39, "Text",ExpressionUUID->"794e4cfb-dea9-4a66-a396-e4ca3c708f13"]
}, Open  ]],
Cell[CellGroupData[{
Cell[192668, 5689, 107, 0, 18, "Subsubsection",ExpressionUUID->"e25de110-34d5-4711-b7f0-089b1b07f27a"],
Cell[192778, 5691, 328, 5, 35, "Text",ExpressionUUID->"51f14aa8-c014-423a-ac25-06bd36503c0d"],
Cell[193109, 5698, 655, 14, 77, "Text",ExpressionUUID->"90411063-824b-4b57-885a-cabd0ca99788"],
Cell[193767, 5714, 418, 8, 36, "Text",ExpressionUUID->"7ccc52af-e824-4f4f-8fd3-5b04a295122f"],
Cell[194188, 5724, 1123, 23, 101, "Text",ExpressionUUID->"ca8d084c-8ad7-496e-aa41-0e7b2ff679e3"],
Cell[195314, 5749, 92, 0, 20, "Text",ExpressionUUID->"d240b0ea-542c-4709-859e-d883a98813ce"],
Cell[195409, 5751, 2752, 72, 260, "Input",ExpressionUUID->"2c2f6209-b802-4453-a4fb-72e936c14f4c",
 InitializationCell->True],
Cell[198164, 5825, 173, 3, 20, "Text",ExpressionUUID->"df62c241-1294-438b-980a-f9ac30288062"],
Cell[CellGroupData[{
Cell[198362, 5832, 266, 6, 31, "Input",ExpressionUUID->"dcd4d05e-d9c0-4ed6-8e38-a5cad0a2d829"],
Cell[198631, 5840, 245, 6, 31, "Output",ExpressionUUID->"20cf2395-084f-49b2-8ff6-e1d824010d72"]
}, Open  ]],
Cell[198891, 5849, 152, 2, 20, "Text",ExpressionUUID->"3e8090de-518a-473b-b01b-29a88b61e38f"],
Cell[199046, 5853, 287, 5, 39, "Text",ExpressionUUID->"9c5945ee-9d8e-447e-9469-2706595ec1b5"],
Cell[199336, 5860, 3759, 96, 393, "Input",ExpressionUUID->"cf1e1885-f231-4d6f-8a81-9f9b5ac198dc",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[203120, 5960, 277, 7, 31, "Input",ExpressionUUID->"6204586c-9a88-4290-904c-5c0cb13a0486"],
Cell[CellGroupData[{
Cell[203422, 5971, 370, 10, 24, "Print",ExpressionUUID->"5ecb001a-6a8f-4f17-a1c3-70aaca5b4946"],
Cell[203795, 5983, 374, 11, 24, "Print",ExpressionUUID->"29c423b5-e4a2-45d4-8d98-72ca5647c802"],
Cell[204172, 5996, 374, 11, 24, "Print",ExpressionUUID->"7acc2e9e-8903-4fca-a6f4-d88625672a8a"],
Cell[204549, 6009, 374, 11, 24, "Print",ExpressionUUID->"cf23e92c-f1f4-45d4-a231-ef55d44209ab"],
Cell[204926, 6022, 374, 11, 24, "Print",ExpressionUUID->"a3e5486c-2cbb-4779-a05c-d44e83300b1e"],
Cell[205303, 6035, 374, 11, 24, "Print",ExpressionUUID->"966beed9-9122-4fbf-8ee6-5be5a82ef62e"],
Cell[205680, 6048, 374, 11, 24, "Print",ExpressionUUID->"4c2d8eec-28f3-4bed-aea2-9c6f5cef46ed"]
}, Open  ]],
Cell[206069, 6062, 249, 7, 31, "Output",ExpressionUUID->"44ec6cd9-91e2-4313-83c9-b0d5d3e553cb"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[206379, 6076, 132, 1, 32, "Subsection",ExpressionUUID->"6cf85a27-4c30-42ec-8da1-e591b2ec2870",
 CellTags->"Section5c"],
Cell[206514, 6079, 201, 3, 20, "Text",ExpressionUUID->"9d00c595-58ba-477c-a6f1-c7a460f54c83"],
Cell[CellGroupData[{
Cell[206740, 6086, 96, 0, 18, "Subsubsection",ExpressionUUID->"6d999341-a8f0-4997-8e79-3a389262e44c"],
Cell[206839, 6088, 419, 12, 22, "Text",ExpressionUUID->"83dacd2a-b8d0-477a-be69-584f7c93d763"],
Cell[207261, 6102, 190, 3, 20, "Text",ExpressionUUID->"62a2d993-b298-4a24-bddd-dacaf5cf17e8"],
Cell[CellGroupData[{
Cell[207476, 6109, 1478, 36, 89, "Input",ExpressionUUID->"70f119d1-8928-4e21-b1d7-029533884145",
 InitializationCell->True],
Cell[208957, 6147, 1998, 65, 70, "Output",ExpressionUUID->"33667ebf-16ef-4ad5-8c3b-145a12678708"]
}, Open  ]],
Cell[210970, 6215, 218, 3, 35, "Text",ExpressionUUID->"435a6548-7ce9-4a8b-a652-53c04fd493bf"],
Cell[CellGroupData[{
Cell[211213, 6222, 297, 8, 31, "Input",ExpressionUUID->"3dd48bf7-640e-46d0-871f-bf44a917335b"],
Cell[211513, 6232, 286, 8, 31, "Output",ExpressionUUID->"e09d767f-23f2-44a8-9031-60450f9fb11f"]
}, Open  ]],
Cell[211814, 6243, 202, 3, 20, "Text",ExpressionUUID->"bc3ec443-4525-4368-b263-2b7a27498be6"],
Cell[CellGroupData[{
Cell[212041, 6250, 259, 7, 31, "Input",ExpressionUUID->"ad1ccf34-d6fa-4537-8703-96b5716afa4d"],
Cell[212303, 6259, 249, 7, 31, "Output",ExpressionUUID->"11107729-feb7-4b62-ae2b-484a02a73efb"]
}, Open  ]],
Cell[212567, 6269, 148, 2, 20, "Text",ExpressionUUID->"244990c6-df5f-4100-b19a-ff11c999c317"]
}, Open  ]],
Cell[CellGroupData[{
Cell[212752, 6276, 107, 0, 18, "Subsubsection",ExpressionUUID->"49834700-b027-4b40-9e14-234a4d5c56b4"],
Cell[212862, 6278, 146, 2, 20, "Text",ExpressionUUID->"6198db02-97e3-44dc-a055-23c183128474"],
Cell[213011, 6282, 120, 0, 20, "Text",ExpressionUUID->"633e16ce-a88e-4040-bf26-e4a6855810b5"],
Cell[CellGroupData[{
Cell[213156, 6286, 726, 19, 51, "Input",ExpressionUUID->"0cade722-eb2d-4d00-8842-16ad86a4796a",
 InitializationCell->True],
Cell[213885, 6307, 950, 30, 51, "Output",ExpressionUUID->"4e27a207-2295-4698-a8cc-789d13dd6f6b"]
}, Open  ]],
Cell[214850, 6340, 994, 28, 35, "Text",ExpressionUUID->"03ef495c-e79f-469e-a75d-4dd63b61ccd8"],
Cell[215847, 6370, 566, 17, 31, "Input",ExpressionUUID->"0cee2b76-fd79-4827-8cee-2bd7fe81866d",
 InitializationCell->True],
Cell[216416, 6389, 115, 0, 20, "Text",ExpressionUUID->"e728e1b3-9a65-4e99-bed0-b0d1a976ead1"],
Cell[CellGroupData[{
Cell[216556, 6393, 168, 4, 31, "Input",ExpressionUUID->"f5cfcf75-326e-4d3b-8853-5705f5e3f292"],
Cell[216727, 6399, 251, 6, 31, "Output",ExpressionUUID->"ac6d3036-8817-45b4-b57a-9e5bf090af4a"]
}, Open  ]],
Cell[216993, 6408, 209, 4, 24, "Text",ExpressionUUID->"9c1a2aa5-2ce9-4423-8a64-6051ab784fdd"],
Cell[CellGroupData[{
Cell[217227, 6416, 241, 6, 31, "Input",ExpressionUUID->"53719466-2369-4ca3-b60f-f6e7d712cbe8"],
Cell[217471, 6424, 296, 8, 31, "Output",ExpressionUUID->"f256c298-06af-4d59-bfaa-e89a8d663f9a"]
}, Open  ]],
Cell[217782, 6435, 155, 2, 20, "Text",ExpressionUUID->"84dfc0db-0d13-40b3-ad44-73df795a51c3"],
Cell[217940, 6439, 190, 4, 24, "Text",ExpressionUUID->"1b116885-0d1c-4e06-a024-724993883cb3"],
Cell[CellGroupData[{
Cell[218155, 6447, 248, 6, 31, "Input",ExpressionUUID->"77129f7b-ca78-404c-978f-3b89d9dee01b"],
Cell[CellGroupData[{
Cell[218428, 6457, 437, 11, 24, "Print",ExpressionUUID->"db52014b-6d5f-4d49-beb0-3b1df304f9a7"],
Cell[218868, 6470, 454, 12, 24, "Print",ExpressionUUID->"6517a193-e5da-4f80-a6a8-7ca44c8a3a3d"],
Cell[219325, 6484, 472, 13, 24, "Print",ExpressionUUID->"88a285d8-5fb8-4bdb-b8ee-bf0f9019f799"],
Cell[219800, 6499, 472, 13, 24, "Print",ExpressionUUID->"4e363b9a-62ee-426c-a478-17f6dfca195d"],
Cell[220275, 6514, 458, 12, 24, "Print",ExpressionUUID->"02851220-c1e0-465f-a504-08aa3fa724be"],
Cell[220736, 6528, 458, 12, 24, "Print",ExpressionUUID->"83f503e6-1e89-4aa8-b05b-9d137a77c536"]
}, Open  ]],
Cell[221209, 6543, 296, 8, 31, "Output",ExpressionUUID->"24f56455-8420-4fb9-bd5c-f0a747713121"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[221578, 6559, 170, 3, 55, "Section",ExpressionUUID->"9db3599f-7843-49c1-a380-bb674e228fc1",
 CellTags->"Solutions"],
Cell[CellGroupData[{
Cell[221773, 6566, 126, 2, 32, "Subsection",ExpressionUUID->"e11b4d2d-a318-4495-8be9-2bc66975eaa3",
 CellTags->"SolutionsCP8"],
Cell[221902, 6570, 223, 3, 55, "Problem",ExpressionUUID->"2534ab5c-e88f-4899-8748-f68c83d7e610"],
Cell[222128, 6575, 498, 11, 54, "Text",ExpressionUUID->"2f34bcb3-0d2c-47e6-8b7b-f22268522107"],
Cell[222629, 6588, 638, 14, 77, "Text",ExpressionUUID->"1d8a0770-8b9b-4152-b313-280d8b9646a7"],
Cell[223270, 6604, 517, 10, 58, "Text",ExpressionUUID->"1a02e0f3-5e35-4315-9f6b-76611f08e9bd"],
Cell[223790, 6616, 471, 7, 54, "Text",ExpressionUUID->"98a7d362-69b1-427e-9f71-80947d08d30f"],
Cell[224264, 6625, 1548, 39, 222, "Input",ExpressionUUID->"25f231be-de3b-4199-8cd3-c2b14af2e321",
 InitializationCell->True],
Cell[225815, 6666, 477, 8, 54, "Text",ExpressionUUID->"13d8244d-a153-4a8b-9d2b-0e89111737e4"],
Cell[226295, 6676, 757, 19, 89, "Input",ExpressionUUID->"32163b4a-0846-4344-949f-f449ce069844",
 InitializationCell->True],
Cell[227055, 6697, 274, 8, 24, "Text",ExpressionUUID->"882df558-e7f0-4f34-bc88-93a062ad5af5"],
Cell[227332, 6707, 1173, 32, 146, "Input",ExpressionUUID->"721ab059-3ec7-4127-ad98-40f0f1f72db0",
 InitializationCell->True],
Cell[228508, 6741, 965, 27, 62, "Text",ExpressionUUID->"2fc5d817-848c-4708-ad2b-b7855475a757"],
Cell[CellGroupData[{
Cell[229498, 6772, 283, 7, 31, "Input",ExpressionUUID->"1565a543-455f-432b-a994-77209fec9e8b"],
Cell[229784, 6781, 1099, 30, 70, "Output",ExpressionUUID->"6b0e9222-02f1-47dc-a957-c6c5d8182788"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[230932, 6817, 138, 2, 32, "Subsection",ExpressionUUID->"6e90da41-48b0-4091-ae5a-4ebb905f0bf4",
 CellTags->"SolutionsCE1"],
Cell[231073, 6821, 368, 9, 42, "Problem",ExpressionUUID->"2484af63-037b-4a14-9034-31596634ecd9"],
Cell[231444, 6832, 853, 22, 50, "Text",ExpressionUUID->"7a1c4e24-8d57-4b42-ae7c-e02c69d74d50"],
Cell[232300, 6856, 431, 6, 50, "Text",ExpressionUUID->"3a00b272-4d6d-4587-a83a-738a990ebe8d"],
Cell[232734, 6864, 1173, 32, 50, "Text",ExpressionUUID->"3439ef49-855e-4c67-a1b0-ff5ebfc68f6b"],
Cell[233910, 6898, 249, 6, 21, "Text",ExpressionUUID->"1771163b-7c02-46b6-be86-51ab57de081e"],
Cell[CellGroupData[{
Cell[234184, 6908, 349, 11, 31, "Input",ExpressionUUID->"d391cd35-a2f7-4aa4-9197-a4f2d210cb46",
 InitializationCell->True],
Cell[234536, 6921, 372, 12, 31, "Output",ExpressionUUID->"06ea8880-a754-4356-980d-5e551e6c5f1a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[234945, 6938, 424, 13, 31, "Input",ExpressionUUID->"b82e52b1-1345-489a-8382-9f8e4c48233c",
 InitializationCell->True],
Cell[235372, 6953, 964, 28, 51, "Output",ExpressionUUID->"7de60b8d-5661-4c4a-8464-37ca40ac95e1"]
}, Open  ]],
Cell[236351, 6984, 1907, 58, 71, "Text",ExpressionUUID->"26a699b3-b885-4bda-870a-b898075271db"],
Cell[238261, 7044, 1191, 34, 146, "Input",ExpressionUUID->"409c7bc6-4005-4ede-9a84-e3e50c389376",
 InitializationCell->True],
Cell[239455, 7080, 314, 9, 23, "Text",ExpressionUUID->"314d0284-bece-4de6-8704-50af9801fdb3"],
Cell[239772, 7091, 245, 7, 31, "Input",ExpressionUUID->"00bdfeb0-35e7-48cd-bb0b-b5478ef758d3",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[240042, 7102, 147, 3, 31, "Input",ExpressionUUID->"1f9f5fb5-96b2-427c-a2e4-671d07d9b327"],
Cell[240192, 7107, 115, 2, 31, "Output",ExpressionUUID->"21bff5cc-b573-4158-8fb0-26cf158c849e"]
}, Open  ]],
Cell[240322, 7112, 625, 17, 70, "Input",ExpressionUUID->"e3df5e85-ac18-443f-b9d5-9458aee40b9c"],
Cell[240950, 7131, 1156, 29, 72, "Text",ExpressionUUID->"5ddea661-b8ae-4bf5-8051-1a4e17cc8780"],
Cell[242109, 7162, 172, 3, 20, "Text",ExpressionUUID->"21eddf0d-1689-4659-a29b-4cd1e365fb74"],
Cell[CellGroupData[{
Cell[242306, 7169, 115, 2, 31, "Input",ExpressionUUID->"d7ffbd23-2d01-46bc-a26e-cd1921416f54"],
Cell[242424, 7173, 782, 25, 31, "Output",ExpressionUUID->"8280857e-3e2e-4f2c-871b-8b1e2febd170"]
}, Open  ]],
Cell[243221, 7201, 342, 7, 36, "Text",ExpressionUUID->"66de68f6-6e5f-4c69-b512-8e78d781c5cb"],
Cell[CellGroupData[{
Cell[243588, 7212, 236, 7, 31, "Input",ExpressionUUID->"57496d83-4db5-4ccb-8347-8c66668f798a"],
Cell[243827, 7221, 111, 2, 31, "Output",ExpressionUUID->"9fed7f8b-560a-419d-bd2a-76b867f5f365"]
}, Open  ]],
Cell[243953, 7226, 878, 16, 84, "Text",ExpressionUUID->"801c11c3-60df-4300-8272-6ab105e749a2"],
Cell[244834, 7244, 3091, 80, 298, "Input",ExpressionUUID->"c2164417-ba7e-4c63-981e-4205591e7e9b",
 InitializationCell->True],
Cell[247928, 7326, 251, 5, 39, "Text",ExpressionUUID->"def90ea5-b703-405c-bcb6-e821ac528d08"],
Cell[CellGroupData[{
Cell[248204, 7335, 801, 21, 108, "Input",ExpressionUUID->"934266ab-dfad-41d0-9763-e9e58ec081b9"],
Cell[249008, 7358, 111, 2, 31, "Output",ExpressionUUID->"1149131a-e623-40dc-a429-edf611a95f4a"]
}, Open  ]],
Cell[249134, 7363, 299, 7, 21, "Text",ExpressionUUID->"32c559aa-85a8-4d25-a0b6-bc1eb5d87ca3"],
Cell[CellGroupData[{
Cell[249458, 7374, 148, 3, 31, "Input",ExpressionUUID->"3ea799f9-fcc3-42e2-a35a-f300974a6f32"],
Cell[249609, 7379, 524, 17, 31, "Output",ExpressionUUID->"92fb498c-ae3c-4899-afa3-e1bfd94a988e"]
}, Open  ]],
Cell[250148, 7399, 570, 14, 35, "Text",ExpressionUUID->"c8cea675-8d61-4626-b621-39715fe810e8"],
Cell[250721, 7415, 397, 7, 36, "Text",ExpressionUUID->"6ee4f7aa-6a79-4844-b7d0-01c2980e1d31"],
Cell[CellGroupData[{
Cell[251143, 7426, 174, 4, 31, "Input",ExpressionUUID->"0706036d-9cda-4ef9-8656-9a873e145223"],
Cell[251320, 7432, 284, 8, 31, "Output",ExpressionUUID->"4991ea3d-2e4b-48ef-b82b-7183c36017e8"]
}, Open  ]],
Cell[251619, 7443, 128, 0, 20, "Text",ExpressionUUID->"61f8b66d-5254-411a-a254-ac649732b2c9"],
Cell[CellGroupData[{
Cell[251772, 7447, 115, 2, 31, "Input",ExpressionUUID->"6fa59468-4ac7-431d-a089-a138798a464e"],
Cell[251890, 7451, 782, 25, 31, "Output",ExpressionUUID->"5c4a7631-4b41-4b18-b5e9-33ab1cf2b7e5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[252709, 7481, 115, 2, 31, "Input",ExpressionUUID->"e44d913c-5ef7-484f-bb23-b0ca34739eba"],
Cell[252827, 7485, 782, 25, 31, "Output",ExpressionUUID->"87da8980-9bff-43b4-8a6e-defed8370ccb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[253646, 7515, 115, 2, 31, "Input",ExpressionUUID->"068467ae-ffde-415a-bbfd-40cdd446691f"],
Cell[253764, 7519, 782, 25, 31, "Output",ExpressionUUID->"aaee5a41-c2e0-48c3-94a7-089227efc366"]
}, Open  ]],
Cell[CellGroupData[{
Cell[254583, 7549, 115, 2, 31, "Input",ExpressionUUID->"715254a8-8c52-4872-9bfd-8f3a8d70e095"],
Cell[254701, 7553, 782, 25, 31, "Output",ExpressionUUID->"ee85a98e-e999-412d-8d20-f8d43b5363b2"]
}, Open  ]],
Cell[255498, 7581, 367, 7, 35, "Text",ExpressionUUID->"985ae230-96eb-4936-8d49-290e60f441f1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[255914, 7594, 107, 1, 55, "Section",ExpressionUUID->"f9040e31-fe13-4b2a-a5fd-1a96b52ecb84",
 CellTags->"Exercises"],
Cell[CellGroupData[{
Cell[256046, 7599, 160, 2, 20, "Item1Exercise",ExpressionUUID->"b777c1e6-95c2-44b2-a82b-763c92722e33"],
Cell[256209, 7603, 270, 4, 33, "Item1Exercise",ExpressionUUID->"9f8b39cf-7712-4f3d-8387-fa0af8b65cd9"],
Cell[256482, 7609, 359, 5, 46, "Item1Exercise",ExpressionUUID->"58a3a146-c9fc-4729-82ab-a5180e4433ea"],
Cell[256844, 7616, 338, 5, 33, "Item1Exercise",ExpressionUUID->"51eb256b-9b58-44f1-ab83-d8f3c37e4775"],
Cell[257185, 7623, 258, 4, 33, "Item1Exercise",ExpressionUUID->"214187ee-cb7a-4c2d-9bae-9b75509218c6"],
Cell[257446, 7629, 612, 17, 33, "Item1Exercise",ExpressionUUID->"bdcda61c-b13e-4ecd-be15-80ba191187a0"],
Cell[258061, 7648, 235, 3, 33, "Item1Exercise",ExpressionUUID->"2e824f36-a4ed-4e98-9cfb-a4583c41bd11"],
Cell[258299, 7653, 214, 3, 20, "Item1Exercise",ExpressionUUID->"c782b39c-9d40-4fd3-b73e-a1ef44608cd1"],
Cell[258516, 7658, 289, 4, 33, "Item1Exercise",ExpressionUUID->"734d2743-4c26-42f9-9f4c-37e6ff95adb0"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

