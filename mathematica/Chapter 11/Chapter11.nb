(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    854792,      20478]
NotebookOptionsPosition[    736929,      18520]
NotebookOutlinePosition[    760560,      18998]
CellTagsIndexPosition[    759579,      18964]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Trees", "BookChapterTitle",
 CounterAssignments->{{
   "ChapterNumber", 
    11}},ExpressionUUID->"0c94f059-70b1-4e81-9a10-0b0a93e83bcb"],

Cell[CellGroupData[{

Cell["Introduction", "Section",ExpressionUUID->"bcc0cad2-aaed-45eb-8b52-cdcbfacac029"],

Cell["\<\
This chapter is devoted to exploring the computational aspects of the study \
of trees. Recall from the textbook that a tree is a connected simple graph \
with no simple circuits.\
\>", "Text",ExpressionUUID->"e58c8617-663e-40c2-a4b3-a93f8ee79f10"],

Cell[TextData[{
 "First, we will discuss how to represent, display, and work with trees using \
the Wolfram Language. Specifically, we will see how to represent rooted trees \
and ordered rooted trees in addition to simple trees. We then use these \
representations to explore many of the topics discussed in the textbook. In \
particular, we will see how to use binary trees to store data in such a way \
as to make searching more efficient and we will see an implementation of \
Huffman codes. We will use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to carry out the different tree traversal methods described in the text. \
We will see how to construct spanning trees using both depth-first and \
breadth-first search and how to use backtracking to solve a variety of \
interesting problems. Finally, we will implement Prim\[CloseCurlyQuote]s \
algorithm and Kruskal\[CloseCurlyQuote]s algorithm for finding spanning trees \
of minimum weight for a weighted graph."
}], "Text",ExpressionUUID->"0d22bb25-d8e8-458f-a039-2a3421b7d0ab"]
}, Open  ]],

Cell[CellGroupData[{

Cell["11.1 Introduction to Trees", "Section",
 CellTags->"Section1",ExpressionUUID->"720e6862-c098-4825-a98b-8ffd708a4cd8"],

Cell[TextData[{
 "In this section, we will focus on how to construct trees in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " and how to check basic properties, such as determining if a tree is \
balanced or not. To begin, we will consider the simplest case, unrooted \
trees, before moving on to rooted and ordered trees."
}], "Text",ExpressionUUID->"4c614165-5729-4c05-a932-35ee5bb6d84d"],

Cell[CellGroupData[{

Cell["Unrooted Trees", "Subsection",
 CellTags->"Section1a",ExpressionUUID->"739639ea-a7d5-418d-a0bd-c4f5cb0dbcd4"],

Cell[TextData[{
 "Recall that a tree is defined to be a graph that is undirected, connected, \
and has no simple circuits (or cycles). To create a tree, we can just create \
a ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 " as we did in the previous chapter."
}], "Text",ExpressionUUID->"ed24d24a-aa21-49cd-b53e-cb4512462dd9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"firstTree", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<b\>\""}], ",", 
      RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<c\>\""}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<d\>\""}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<e\>\""}]}], "}"}], ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "False"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[1]:=",ExpressionUUID->"7d7c90e8-c2c0-4ce7-b195-37d7cc6348cd"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"a", "b", "c", "d", "e"}, {
      Null, {{1, 2}, {1, 3}, {2, 4}, {2, 5}}}, {VertexLabels -> {"Name"}}]]}, 
    
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Arrowheads[0.], 
         ArrowBox[{{0.8944271909999159, 1.7888543819998317`}, {
          0.4472135954999579, 0.8944271909999159}}, 0.020874891668923312`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8944271909999159, 1.7888543819998317`}, {
          1.3416407864998738`, 0.8944271909999159}}, 
          0.020874891668923312`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.4472135954999579, 0.8944271909999159}, {0., 0.}}, 
          0.020874891668923312`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.4472135954999579, 0.8944271909999159}, {
          0.8944271909999159, 0.}}, 0.020874891668923312`]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{0.8944271909999159, 1.7888543819998317}, 
          0.020874891668923312], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {0.9153020826688392, 1.8097292736687551}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.4472135954999579, 0.8944271909999159}, 
          0.020874891668923312], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.46808848716888124, 0.9153020826688392}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.3416407864998738, 0.8944271909999159}, 
          0.020874891668923312], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {1.3625156781687973, 0.9153020826688392}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.020874891668923312], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {0.020874891668923312, 0.020874891668923312}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8944271909999159, 0.}, 0.020874891668923312], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.9153020826688392, 0.020874891668923312}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785760217409*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"b0cfeb9a-83e7-4cc7-81a5-ec6f53aec9ab"]
}, Open  ]],

Cell[TextData[{
 "The first thing you may notice is that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " has automatically drawn this in the traditional way, which suggests that \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " recognized the graph as a tree. The ",
 StyleBox[ButtonBox["TreeGraphQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TreeGraphQ"], "FunctionLink"],
 " function can be used to check if a graph is a tree."
}], "Text",ExpressionUUID->"6625b47a-fd6c-4892-aecf-72dfea846fc1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TreeGraphQ", "[", "firstTree", "]"}]], "Input",
 CellLabel->"In[2]:=",ExpressionUUID->"ab723053-e42a-466f-822e-0896c1eb44c0"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.738785760390896*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"b9c4e727-0fc5-4068-90d4-3df11f064ccd"]
}, Open  ]],

Cell[TextData[{
 "Note that the order of the vertices can affect which vertex appears at the \
top of the tree. For example, in the tree above, we can ensure that the \
vertex ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "264c37ff-72b8-409a-b55b-dc4406088474"],
 " is drawn at the top of the tree by giving a list of the vertices as the \
first argument. We list the vertices in layered order, that is, the top \
vertex will be first, followed by the vertices we wish to see in the second \
layer, then the vertices in the third layer and so forth. Note that changing \
the order of vertices within a layer can affect their horizontal position. "
}], "Text",ExpressionUUID->"913700e1-3980-4d7c-a3e6-c69e6bd4d1af"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"secondTree", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<b\>\"", ",", "\"\<e\>\"", ",", "\"\<d\>\"", ",", "\"\<a\>\"", ",", 
      "\"\<c\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<b\>\""}], ",", 
      RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<c\>\""}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<d\>\""}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<e\>\""}]}], "}"}], ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "False"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[3]:=",ExpressionUUID->"ea34a2fb-7754-4781-9850-34179737d945"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"b", "e", "d", "a", "c"}, {
      Null, {{4, 1}, {4, 5}, {1, 3}, {1, 2}}}, {VertexLabels -> {"Name"}}]]}, 
    
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Arrowheads[0.], 
         ArrowBox[{{0.8164965809277261, 1.6329931618554523`}, {0., 
          0.8164965809277261}}, 0.019562323618881772`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8164965809277261, 1.6329931618554523`}, {
          0.8164965809277261, 0.8164965809277261}}, 0.019562323618881772`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8164965809277261, 1.6329931618554523`}, {
          1.6329931618554523`, 0.8164965809277261}}, 
          0.019562323618881772`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.6329931618554523`, 0.8164965809277261}, {
          1.6329931618554523`, 0.}}, 0.019562323618881772`]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{0.8164965809277261, 1.6329931618554523}, 
          0.019562323618881772], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.8360589045466079, 1.652555485474334}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 0.8164965809277261}, 0.019562323618881772], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.019562323618881772, 0.8360589045466079}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8164965809277261, 0.8164965809277261}, 
          0.019562323618881772], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {0.8360589045466079, 0.8360589045466079}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.6329931618554523, 0.8164965809277261}, 
          0.019562323618881772], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {1.652555485474334, 0.8360589045466079}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.6329931618554523, 0.}, 0.019562323618881772], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {1.652555485474334, 0.019562323618881772}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785760468295*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"23eadec3-8bf6-428f-9b44-26ef316e3f10"]
}, Open  ]],

Cell[TextData[{
 "However, there is a limit to the amount of influence this provides. For \
example, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " has a strong preference for shorter, more balanced, trees. Attempting to \
use the vertex order to create a deeper tree will often be ignored. For \
example, below we attempt, and fail, to get ",
 Cell[BoxData[
  FormBox["e", TraditionalForm]],ExpressionUUID->
  "5df8fa3b-c26a-42f5-8448-4dec9d5c056d"],
 " at the top of the tree."
}], "Text",ExpressionUUID->"62d6d998-e069-4026-8866-1e0895eefb44"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "\"\<e\>\"", ",", "\"\<b\>\"", ",", "\"\<d\>\"", ",", "\"\<a\>\"", ",", 
     "\"\<c\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<b\>\""}], ",", 
     RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<c\>\""}], ",", 
     RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<d\>\""}], ",", 
     RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<e\>\""}]}], "}"}], ",", 
   RowBox[{"DirectedEdges", "\[Rule]", "False"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"b0d5a7dc-bbf0-4d38-bb24-6a5813f7b2cc"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"e", "b", "d", "a", "c"}, {
      Null, {{4, 2}, {4, 5}, {2, 3}, {2, 1}}}, {VertexLabels -> {"Name"}}]]}, 
    
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Arrowheads[0.], 
         ArrowBox[{{0., 0.8164965809277261}, {0.8164965809277261, 
          1.6329931618554523`}}, 0.019562323618881772`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8164965809277261, 1.6329931618554523`}, {
          0.8164965809277261, 0.8164965809277261}}, 0.019562323618881772`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8164965809277261, 1.6329931618554523`}, {
          1.6329931618554523`, 0.8164965809277261}}, 
          0.019562323618881772`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.6329931618554523`, 0.8164965809277261}, {
          1.6329931618554523`, 0.}}, 0.019562323618881772`]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.8164965809277261}, 0.019562323618881772], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.019562323618881772, 0.8360589045466079}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8164965809277261, 1.6329931618554523}, 
          0.019562323618881772], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.8360589045466079, 1.652555485474334}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8164965809277261, 0.8164965809277261}, 
          0.019562323618881772], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {0.8360589045466079, 0.8360589045466079}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.6329931618554523, 0.8164965809277261}, 
          0.019562323618881772], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {1.652555485474334, 0.8360589045466079}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.6329931618554523, 0.}, 0.019562323618881772], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {1.652555485474334, 0.019562323618881772}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785760526169*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"857d3add-4533-457f-8432-555ac0a397a8"]
}, Open  ]],

Cell[TextData[{
 "The Wolfram Language provides functions for creating certain kinds of \
trees. Recall that a rooted tree is called ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "0243bfb6-9016-42cc-b299-7064a0f743eb"],
 "-",
 StyleBox["ary",
  IgnoreSpellCheck->True],
 " if every vertex has no more than ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "f9f0648b-d25f-4e59-a186-8e8af2f46c4c"],
 " children. When ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "=", "2"}], TraditionalForm]],ExpressionUUID->
  "8bee4cf0-3b40-4193-8613-7bfbf14bd507"],
 ", we say that it is a binary tree. Also recall that the height of a rooted \
tree is the maximum number of levels in the tree, that is, the height is the \
length of the largest path from the root to any other vertex. (The Wolfram \
Language refers to the tree as having ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]],ExpressionUUID->
  "a47b2d54-7623-4f1f-817f-e97b4606bc83"],
 " levels, which is synonymous with height ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]],ExpressionUUID->
  "517fbe30-b7fe-4089-b59d-314800d95552"],
 ".) Given the height as the first argument and ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "0d988efc-0d4e-4afe-b9e9-5c39f6eda8ad"],
 " as the second, the function ",
 StyleBox[ButtonBox["CompleteKaryTree",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/CompleteKaryTree"], "FunctionLink"],
 " produces the complete ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "6db31c1c-e835-4393-bf14-85a63d05c035"],
 "-",
 StyleBox["ary",
  IgnoreSpellCheck->True],
 " tree of height ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]],ExpressionUUID->
  "935d3ece-23a4-48a7-a088-92fd70dc4e4a"],
 ". If the second argument is omitted, it defaults as 2, producing a complete \
binary tree of the specified height."
}], "Text",ExpressionUUID->"75266303-0541-4d96-bf77-c435415b823b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CompleteKaryTree", "[", 
  RowBox[{"3", ",", "4", ",", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Name\>\"", ",", "Below"}], "]"}]}]}], "]"}]], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"cfb628ba-7c0f-46e9-a478-3c83345bfdb0"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
       20, 21}, {Null, 
       SparseArray[
       Automatic, {21, 21}, 0, {
        1, {{0, 4, 9, 14, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
          36, 37, 38, 39, 40}, {{2}, {3}, {4}, {5}, {1}, {6}, {7}, {8}, {9}, {
          1}, {10}, {11}, {12}, {13}, {1}, {14}, {15}, {16}, {17}, {1}, {
          18}, {19}, {20}, {21}, {2}, {2}, {2}, {2}, {3}, {3}, {3}, {3}, {
          4}, {4}, {4}, {4}, {5}, {5}, {5}, {5}}}, Pattern}]}, {VertexLabels -> {
         Placed["Name", Below]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Arrowheads[0.], 
         ArrowBox[{{3.061862178478973, 0.8164965809277261}, {
          0.6123724356957946, 0.4082482904638631}}, 0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{3.061862178478973, 0.8164965809277261}, {
          2.2453655975512468`, 0.4082482904638631}}, 0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{3.061862178478973, 0.8164965809277261}, {
          3.878358759406699, 0.4082482904638631}}, 0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{3.061862178478973, 0.8164965809277261}, {
          5.511351921262151, 0.4082482904638631}}, 0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.6123724356957946, 0.4082482904638631}, {0., 0.}}, 
          0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.6123724356957946, 0.4082482904638631}, {
          0.4082482904638631, 0.}}, 0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.6123724356957946, 0.4082482904638631}, {
          0.8164965809277261, 0.}}, 0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.6123724356957946, 0.4082482904638631}, {
          1.2247448713915892`, 0.}}, 0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{2.2453655975512468`, 0.4082482904638631}, {
          1.6329931618554523`, 0.}}, 0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{2.2453655975512468`, 0.4082482904638631}, {
          2.041241452319315, 0.}}, 0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{2.2453655975512468`, 0.4082482904638631}, {
          2.4494897427831783`, 0.}}, 0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{2.2453655975512468`, 0.4082482904638631}, {
          2.8577380332470415`, 0.}}, 0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{3.878358759406699, 0.4082482904638631}, {
          3.2659863237109046`, 0.}}, 0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{3.878358759406699, 0.4082482904638631}, {
          3.6742346141747673`, 0.}}, 0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{3.878358759406699, 0.4082482904638631}, {4.08248290463863,
           0.}}, 0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{3.878358759406699, 0.4082482904638631}, {
          4.4907311951024935`, 0.}}, 0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{5.511351921262151, 0.4082482904638631}, {
          4.898979485566357, 0.}}, 0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{5.511351921262151, 0.4082482904638631}, {5.30722777603022,
           0.}}, 0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{5.511351921262151, 0.4082482904638631}, {
          5.715476066494083, 0.}}, 0.04911078443249145]}, 
        {Arrowheads[0.], 
         ArrowBox[{{5.511351921262151, 0.4082482904638631}, {
          6.123724356957946, 0.}}, 0.04911078443249145]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{3.061862178478973, 0.8164965809277261}, 
          0.04911078443249145], 
         InsetBox["1", 
          Offset[{0, -2}, {3.061862178478973, 0.7673857964952346}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.6123724356957946, 0.4082482904638631}, 
          0.04911078443249145], 
         InsetBox["2", 
          Offset[{0, -2}, {0.6123724356957946, 0.3591375060313716}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.2453655975512468, 0.4082482904638631}, 
          0.04911078443249145], 
         InsetBox["3", 
          Offset[{0, -2}, {2.2453655975512468, 0.3591375060313716}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{3.878358759406699, 0.4082482904638631}, 
          0.04911078443249145], 
         InsetBox["4", 
          Offset[{0, -2}, {3.878358759406699, 0.3591375060313716}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.511351921262151, 0.4082482904638631}, 
          0.04911078443249145], 
         InsetBox["5", 
          Offset[{0, -2}, {5.511351921262151, 0.3591375060313716}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.04911078443249145], 
         InsetBox["6", Offset[{0, -2}, {0., -0.04911078443249145}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.4082482904638631, 0.}, 0.04911078443249145], 
         InsetBox["7", 
          Offset[{0, -2}, {0.4082482904638631, -0.04911078443249145}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8164965809277261, 0.}, 0.04911078443249145], 
         InsetBox["8", 
          Offset[{0, -2}, {0.8164965809277261, -0.04911078443249145}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.2247448713915892, 0.}, 0.04911078443249145], 
         InsetBox["9", 
          Offset[{0, -2}, {1.2247448713915892, -0.04911078443249145}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.6329931618554523, 0.}, 0.04911078443249145], 
         InsetBox["10", 
          Offset[{0, -2}, {1.6329931618554523, -0.04911078443249145}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.041241452319315, 0.}, 0.04911078443249145], 
         InsetBox["11", 
          Offset[{0, -2}, {2.041241452319315, -0.04911078443249145}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.4494897427831783, 0.}, 0.04911078443249145], 
         InsetBox["12", 
          Offset[{0, -2}, {2.4494897427831783, -0.04911078443249145}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.8577380332470415, 0.}, 0.04911078443249145], 
         InsetBox["13", 
          Offset[{0, -2}, {2.8577380332470415, -0.04911078443249145}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{3.2659863237109046, 0.}, 0.04911078443249145], 
         InsetBox["14", 
          Offset[{0, -2}, {3.2659863237109046, -0.04911078443249145}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{3.6742346141747673, 0.}, 0.04911078443249145], 
         InsetBox["15", 
          Offset[{0, -2}, {3.6742346141747673, -0.04911078443249145}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{4.08248290463863, 0.}, 0.04911078443249145], 
         InsetBox["16", 
          Offset[{0, -2}, {4.08248290463863, -0.04911078443249145}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{4.4907311951024935, 0.}, 0.04911078443249145], 
         InsetBox["17", 
          Offset[{0, -2}, {4.4907311951024935, -0.04911078443249145}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{4.898979485566357, 0.}, 0.04911078443249145], 
         InsetBox["18", 
          Offset[{0, -2}, {4.898979485566357, -0.04911078443249145}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.30722777603022, 0.}, 0.04911078443249145], 
         InsetBox["19", 
          Offset[{0, -2}, {5.30722777603022, -0.04911078443249145}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.715476066494083, 0.}, 0.04911078443249145], 
         InsetBox["20", 
          Offset[{0, -2}, {5.715476066494083, -0.04911078443249145}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{6.123724356957946, 0.}, 0.04911078443249145], 
         InsetBox["21", 
          Offset[{0, -2}, {6.123724356957946, -0.04911078443249145}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7387857605867653`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"89ef3331-7e6c-4a5a-a79d-d56566099da0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Rooted Trees", "Subsection",
 CellTags->"Section1b",ExpressionUUID->"ec71e5b0-7716-41d6-b143-e5081d90fd0f"],

Cell["\<\
Next, we consider rooted trees. Recall that a rooted tree is a directed graph \
whose underlying undirected graph is a tree and in which one vertex is \
designated as the root and all edges are directed away from the root. For \
example, the graph shown below is a rooted tree.\
\>", "Text",ExpressionUUID->"a3310fbc-9b52-4e26-91ed-e6e438b83a6f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"firstRooted", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<b\>\""}], ",", 
      RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<c\>\""}], ",", 
      RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<d\>\""}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<e\>\""}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<f\>\""}], ",", 
      RowBox[{"\"\<c\>\"", "\[Rule]", "\"\<g\>\""}]}], "}"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[6]:=",ExpressionUUID->"0b1a1ad5-f678-4f57-8a44-bf4c01cfaaaf"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "a", "b", "c", "d", "e", "f", "g"}, {{{1, 2}, {1, 3}, {1, 4}, {2, 5}, {
       2, 6}, {3, 7}}, Null}, {VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{1.3772342551463013`, 1.5739820058814873`}, {
         0.3934955014703718, 0.7869910029407436}}, {{1.3772342551463013`, 
         1.5739820058814873`}, {1.5739820058814873`, 0.7869910029407436}}, {{
         1.3772342551463013`, 1.5739820058814873`}, {2.360973008822231, 
         0.7869910029407436}}, {{0.3934955014703718, 0.7869910029407436}, {0.,
          0.}}, {{0.3934955014703718, 0.7869910029407436}, {
         0.7869910029407436, 0.}}, {{1.5739820058814873`, 
         0.7869910029407436}, {1.5739820058814873`, 0.}}}, 
         0.02547454323586698]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{1.3772342551463013, 1.5739820058814873}, 
          0.02547454323586698], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {1.4027087983821682, 1.5994565491173542}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.3934955014703718, 0.7869910029407436}, 
          0.02547454323586698], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.4189700447062388, 0.8124655461766106}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.5739820058814873, 0.7869910029407436}, 
          0.02547454323586698], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {1.5994565491173542, 0.8124655461766106}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.360973008822231, 0.7869910029407436}, 
          0.02547454323586698], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {2.386447552058098, 0.8124655461766106}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.02547454323586698], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.02547454323586698, 0.02547454323586698}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.7869910029407436, 0.}, 0.02547454323586698], 
         InsetBox["\<\"f\"\>", 
          Offset[{2, 2}, {0.8124655461766106, 0.02547454323586698}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.5739820058814873, 0.}, 0.02547454323586698], 
         InsetBox["\<\"g\"\>", 
          Offset[{2, 2}, {1.5994565491173542, 0.02547454323586698}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7387857606464663`*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"e695ba92-5f19-447e-b7cc-f5e291a61d7e"]
}, Open  ]],

Cell[TextData[{
 "Note that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " drew this graph as a tree, just as you would hope. Once again, ",
 StyleBox[ButtonBox["TreeGraphQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TreeGraphQ"], "FunctionLink"],
 " will identify this as a tree."
}], "Text",ExpressionUUID->"a5a6de55-1a7d-469c-b1a5-57910f75ffcf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TreeGraphQ", "[", "firstRooted", "]"}]], "Input",
 CellLabel->"In[7]:=",ExpressionUUID->"f7a2eec8-48d6-4436-96fa-d5f879412b7e"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.7387857606959267`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"128a4dbf-41e7-416b-afa8-35dbb86d64aa"]
}, Open  ]],

Cell[TextData[{
 "While ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " does recognize trees with directed edges, it does not automatically \
respect a root. When drawing the tree, the emphasis is on minimizing the \
height, as the following example illustrates:"
}], "Text",ExpressionUUID->"964ad173-ddf7-4f2d-b120-c4cf09420b75"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"secondRooted", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "2"}], ",", 
      RowBox[{"1", "\[Rule]", "3"}], ",", 
      RowBox[{"2", "\[Rule]", "4"}], ",", 
      RowBox[{"2", "\[Rule]", "5"}], ",", 
      RowBox[{"4", "\[Rule]", "6"}], ",", 
      RowBox[{"4", "\[Rule]", "7"}]}], "}"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[8]:=",ExpressionUUID->"0691fe0f-b69e-4bce-b6f4-1bd763bd8caa"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 6, 
      7}, {{{1, 2}, {1, 3}, {2, 4}, {2, 5}, {4, 6}, {4, 7}}, Null}, {
      VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{0., 0.7869910029407436}, {0.9837387536759296, 
         1.5739820058814873`}}, {{0., 0.7869910029407436}, {0., 0.}}, {{
         0.9837387536759296, 1.5739820058814873`}, {1.1804865044111155`, 
         0.7869910029407436}}, {{0.9837387536759296, 1.5739820058814873`}, {
         1.9674775073518591`, 0.7869910029407436}}, {{1.1804865044111155`, 
         0.7869910029407436}, {0.7869910029407436, 0.}}, {{
         1.1804865044111155`, 0.7869910029407436}, {1.5739820058814873`, 
         0.}}}, 0.0223470323119013]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.7869910029407436}, 0.0223470323119013], 
         InsetBox["1", 
          Offset[{2, 2}, {0.0223470323119013, 0.8093380352526449}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.9837387536759296, 1.5739820058814873}, 
          0.0223470323119013], 
         InsetBox["2", 
          Offset[{2, 2}, {1.006085785987831, 1.5963290381933886}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.0223470323119013], 
         InsetBox["3", 
          Offset[{2, 2}, {0.0223470323119013, 0.0223470323119013}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.1804865044111155, 0.7869910029407436}, 
          0.0223470323119013], 
         InsetBox["4", 
          Offset[{2, 2}, {1.2028335367230167, 0.8093380352526449}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.9674775073518591, 0.7869910029407436}, 
          0.0223470323119013], 
         InsetBox["5", 
          Offset[{2, 2}, {1.9898245396637604, 0.8093380352526449}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.7869910029407436, 0.}, 0.0223470323119013], 
         InsetBox["6", 
          Offset[{2, 2}, {0.8093380352526449, 0.0223470323119013}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.5739820058814873, 0.}, 0.0223470323119013], 
         InsetBox["7", 
          Offset[{2, 2}, {1.5963290381933886, 0.0223470323119013}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785760779353*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"eec6134f-4732-42dc-85b2-e31f19a35ea9"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " has drawn this tree with 2 at the top of the image, despite the fact that \
it does not satisfy the definition of a root, as it has an edge directed \
towards it. "
}], "Text",ExpressionUUID->"3e56496d-8060-4702-9ab2-46d6b27e8613"],

Cell[TextData[{
 "To draw the tree as intended, we can use the ",
 StyleBox[ButtonBox["GraphLayout",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GraphLayout"], "FunctionLink"],
 " option. There are a wide variety of possibly layouts that can be specified \
with this option; the values most relevant for trees are ",
 StyleBox["\[OpenCurlyDoubleQuote]LayeredDigraphEmbedding\
\[CloseCurlyDoubleQuote]", "Input"],
 " and ",
 StyleBox["\[OpenCurlyDoubleQuote]LayeredEmbedding\[CloseCurlyDoubleQuote]", 
  "Input"],
 " with the former appropriate for trees with directed edges. When ",
 StyleBox["\[OpenCurlyDoubleQuote]LayeredEmbedding\[CloseCurlyDoubleQuote]", 
  "Input"],
 " is used as the layout, a vertex will be chosen automatically based on \
layout considerations, for example, to minimize the tree\[CloseCurlyQuote]s \
height. When ",
 StyleBox["\[OpenCurlyDoubleQuote]LayeredDigraphEmbedding\
\[CloseCurlyDoubleQuote]", "Input"],
 " is chosen for a tree with directed edges, the root is the vertex with in\
\[Dash]degree 0."
}], "Text",ExpressionUUID->"041bae37-4419-4fc4-bfeb-bbf6e02b9933"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"secondRooted", ",", 
   RowBox[{"GraphLayout", "\[Rule]", "\"\<LayeredDigraphEmbedding\>\""}]}], 
  "]"}]], "Input",
 CellLabel->"In[9]:=",ExpressionUUID->"7b0b9ca1-6197-4f99-b614-01d223334350"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 6, 
      7}, {{{1, 2}, {1, 3}, {2, 4}, {2, 5}, {4, 6}, {4, 7}}, Null}, {
      GraphLayout -> {
        "Dimension" -> 2, "VertexLayout" -> "LayeredDigraphEmbedding"}, 
       VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{0., 3.}, {1., 2.}}, 0.030239520958083826`], 
        ArrowBox[{{0., 3.}, {0., 2.}}, 0.030239520958083826`], 
        ArrowBox[{{1., 2.}, {1., 1.}}, 0.030239520958083826`], 
        ArrowBox[{{1., 2.}, {0., 1.}}, 0.030239520958083826`], 
        ArrowBox[{{1., 1.}, {0., 0.}}, 0.030239520958083826`], 
        ArrowBox[{{1., 1.}, {1., 0.}}, 0.030239520958083826`]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 3.}, 0.030239520958083826], 
         InsetBox["1", 
          Offset[{2, 2}, {0.030239520958083826, 3.0302395209580837}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.030239520958083826], 
         InsetBox["2", 
          Offset[{2, 2}, {1.030239520958084, 2.0302395209580837}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.030239520958083826], 
         InsetBox["3", 
          Offset[{2, 2}, {0.030239520958083826, 2.0302395209580837}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.030239520958083826], 
         InsetBox["4", Offset[{2, 2}, {1.030239520958084, 1.030239520958084}],
           ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.030239520958083826], 
         InsetBox["5", 
          Offset[{2, 2}, {0.030239520958083826, 1.030239520958084}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.030239520958083826], 
         InsetBox["6", 
          Offset[{2, 2}, {0.030239520958083826, 0.030239520958083826}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.030239520958083826], 
         InsetBox["7", 
          Offset[{2, 2}, {1.030239520958084, 0.030239520958083826}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7387857608924303`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"36042810-ddbb-4d0a-8d80-1af93758aded"]
}, Open  ]],

Cell[TextData[{
 "Whether the edges are directed or not, you can specifically designate the \
root. This is done by giving the ",
 StyleBox[ButtonBox["GraphLayout",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GraphLayout"], "FunctionLink"],
 " option the value ",
 StyleBox["{\[OpenCurlyDoubleQuote]LayeredEmbedding\[CloseCurlyDoubleQuote],\
\[ThinSpace]\[OpenCurlyDoubleQuote]RootVertex\[CloseCurlyDoubleQuote]\
\[ThinSpace]\[Rule]\[ThinSpace]", "Input"],
 StyleBox["root", "CodeVar"],
 StyleBox["}", "Code"],
 ", where ",
 StyleBox["root", "CodeVar"],
 " is the name of the vertex you wish to have considered the root. ",
 StyleBox["\[OpenCurlyDoubleQuote]LayeredDigraphEmbedding\
\[CloseCurlyDoubleQuote]", "Input"],
 " can also be used, but then both the designated vertex and the natural root \
will be positioned at the top of the image."
}], "Text",ExpressionUUID->"c36fb3ec-01e2-4696-bd02-20c0a1eabcd3"],

Cell[TextData[{
 "Compare the original drawings of ",
 StyleBox["secondRooted", "Code"],
 " and ",
 StyleBox["secondTree", "Code"],
 " with the results of choosing roots. "
}], "Text",ExpressionUUID->"c21f6bc1-3d5e-46c3-978c-9d4e72854299"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"secondRooted", ",", 
   RowBox[{"GraphLayout", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<LayeredEmbedding\>\"", ",", 
      RowBox[{"\"\<RootVertex\>\"", "\[Rule]", "5"}]}], "}"}]}]}], 
  "]"}]], "Input",
 CellLabel->"In[10]:=",ExpressionUUID->"de7c349d-90a8-45c4-b478-a3ffdc4e49d3"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 6, 
      7}, {{{1, 2}, {1, 3}, {2, 4}, {2, 5}, {4, 6}, {4, 7}}, Null}, {
      GraphLayout -> {
        "Dimension" -> 2, 
         "VertexLayout" -> {"LayeredEmbedding", "RootVertex" -> 5}}, 
       VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{0., 0.8870655251454875}, {0.6652991438591156, 
         1.774131050290975}}, {{0., 0.8870655251454875}, {0., 0.}}, {{
         0.6652991438591156, 1.774131050290975}, {1.3305982877182312`, 
         0.8870655251454875}}, {{0.6652991438591156, 1.774131050290975}, {
         0.6652991438591156, 2.6611965754364624`}}, {{1.3305982877182312`, 
         0.8870655251454875}, {0.8870655251454874, 0.}}, {{
         1.3305982877182312`, 0.8870655251454875}, {1.7741310502909748`, 
         0.}}}, 0.027759551950946065`]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.8870655251454875}, 0.027759551950946065], 
         InsetBox["1", 
          Offset[{2, 2}, {0.027759551950946065, 0.9148250770964336}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.6652991438591156, 1.774131050290975}, 
          0.027759551950946065], 
         InsetBox["2", 
          Offset[{2, 2}, {0.6930586958100616, 1.8018906022419212}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.027759551950946065], 
         InsetBox["3", 
          Offset[{2, 2}, {0.027759551950946065, 0.027759551950946065}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.3305982877182312, 0.8870655251454875}, 
          0.027759551950946065], 
         InsetBox["4", 
          Offset[{2, 2}, {1.3583578396691773, 0.9148250770964336}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.6652991438591156, 2.6611965754364624}, 
          0.027759551950946065], 
         InsetBox["5", 
          Offset[{2, 2}, {0.6930586958100616, 2.6889561273874083}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8870655251454874, 0.}, 0.027759551950946065], 
         InsetBox["6", 
          Offset[{2, 2}, {0.9148250770964335, 0.027759551950946065}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.7741310502909748, 0.}, 0.027759551950946065], 
         InsetBox["7", 
          Offset[{2, 2}, {1.801890602241921, 0.027759551950946065}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785760995305*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"a1611ae5-b506-4f2b-b355-5af6725c54b6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"secondTree", ",", 
   RowBox[{"GraphLayout", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<LayeredEmbedding\>\"", ",", 
      RowBox[{"\"\<RootVertex\>\"", "\[Rule]", "\"\<a\>\""}]}], "}"}]}]}], 
  "]"}]], "Input",
 CellLabel->"In[11]:=",ExpressionUUID->"870dac8c-958d-437c-aede-80e9b4ce3dbb"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"b", "e", "d", "a", "c"}, {
      Null, {{4, 1}, {4, 5}, {1, 3}, {1, 2}}}, {
      GraphLayout -> {
        "Dimension" -> 2, 
         "VertexLayout" -> {"LayeredEmbedding", "RootVertex" -> "a"}}, 
       VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Arrowheads[0.], 
         ArrowBox[{{0.4472135954999579, 0.8944271909999159}, {0., 0.}}, 
          0.020874891668923312`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.4472135954999579, 0.8944271909999159}, {
          0.8944271909999159, 0.}}, 0.020874891668923312`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.4472135954999579, 0.8944271909999159}, {
          0.8944271909999159, 1.7888543819998317`}}, 
          0.020874891668923312`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8944271909999159, 1.7888543819998317`}, {
          1.3416407864998738`, 0.8944271909999159}}, 0.020874891668923312`]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{0.4472135954999579, 0.8944271909999159}, 
          0.020874891668923312], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.46808848716888124, 0.9153020826688392}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.020874891668923312], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.020874891668923312, 0.020874891668923312}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8944271909999159, 0.}, 0.020874891668923312], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {0.9153020826688392, 0.020874891668923312}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8944271909999159, 1.7888543819998317}, 
          0.020874891668923312], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {0.9153020826688392, 1.8097292736687551}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.3416407864998738, 0.8944271909999159}, 
          0.020874891668923312], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {1.3625156781687973, 0.9153020826688392}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785761049707*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"6c55e658-30b1-44a6-a826-f648f033c9c4"]
}, Open  ]],

Cell[TextData[{
 "Another option for controlling the drawing of trees is ",
 StyleBox[ButtonBox["TreePlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TreePlot"], "FunctionLink"],
 ". This is related to the ",
 StyleBox[ButtonBox["GraphPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GraphPlot"], "FunctionLink"],
 " function discussed in the previous chapter. These functions are largely \
outdated, but are worth being aware of. ",
 StyleBox[ButtonBox["TreePlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TreePlot"], "FunctionLink"],
 " accepts up to three arguments, in addition to options. The first argument \
is a list of edges that form the tree. The first argument can also be a ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 " object. The second argument, which is optional, specifies where the root \
of the tree should be drawn. Possible positions are: ",
 StyleBox[ButtonBox["Top",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Top"], "FunctionLink"],
 ", ",
 StyleBox[ButtonBox["Bottom",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Bottom"], "FunctionLink"],
 ", ",
 StyleBox[ButtonBox["Left",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Left"], "FunctionLink"],
 ", ",
 StyleBox[ButtonBox["Right",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Right"], "FunctionLink"],
 ", and ",
 StyleBox[ButtonBox["Center",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Center"], "FunctionLink"],
 ". The third argument, which is also optional, can only be used when the \
second is present and specifies one of the vertices in the tree to be the \
root. After all arguments are given, you may additional options, such as ",
 StyleBox[ButtonBox["VertexLabeling",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexLabeling"], "FunctionLink"],
 ". The following example illustrates how to draw ",
 StyleBox["secondRooted", "Code"],
 " with the root 1 in its proper position with ",
 StyleBox[ButtonBox["TreePlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TreePlot"], "FunctionLink"],
 ":"
}], "Text",ExpressionUUID->"d9954963-ec1b-4447-ac9f-7d5aa552f742"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TreePlot", "[", 
  RowBox[{"secondRooted", ",", "Top", ",", "1", ",", 
   RowBox[{"VertexLabeling", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"a3e59bff-95dd-4fae-acd9-dd768580ccd8"],

Cell[BoxData[
 GraphicsBox[
  TagBox[GraphicsComplexBox[{{1.3416407864998738`, 2.6832815729997477`}, {
    0.8944271909999159, 1.788854381999832}, {1.7888543819998317`, 
    1.788854381999832}, {0.4472135954999579, 0.894427190999916}, {
    1.3416407864998738`, 0.894427190999916}, {0., 0.}, {0.8944271909999159, 
    0.}}, {
     {RGBColor[0.5, 0., 0.], Arrowheads[{{0.030286132981502786`, 0.7}}], 
      ArrowBox[{1, 2}], ArrowBox[{1, 3}], ArrowBox[{2, 4}], ArrowBox[{2, 5}], 
      ArrowBox[{4, 6}], ArrowBox[{4, 7}]}, {InsetBox[
       FrameBox["1",
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 1], InsetBox[
       FrameBox["2",
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 2], InsetBox[
       FrameBox["3",
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 3], InsetBox[
       FrameBox["4",
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 4], InsetBox[
       FrameBox["5",
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 5], InsetBox[
       FrameBox["6",
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 6], InsetBox[
       FrameBox["7",
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 7]}}],
   Annotation[#, 
    VertexCoordinateRules -> {{1.3416407864998738`, 2.6832815729997477`}, {
     0.8944271909999159, 1.788854381999832}, {1.7888543819998317`, 
     1.788854381999832}, {0.4472135954999579, 0.894427190999916}, {
     1.3416407864998738`, 0.894427190999916}, {0., 0.}, {0.8944271909999159, 
     0.}}]& ],
  AspectRatio->1.224744871391589,
  FrameTicks->None,
  PlotRange->All,
  PlotRangePadding->Scaled[0.1]]], "Output",
 CellChangeTimes->{3.7387857610990143`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"6828e365-0072-4e7d-ae74-4954befeda6f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Identifying Roots and Rooted Trees", "Subsubsection",ExpressionUUID->"917a3cc9-791d-4012-a555-faae6b806146"],

Cell[TextData[{
 "As mentioned earlier, the Wolfram Language\[CloseCurlyQuote]s ",
 StyleBox[ButtonBox["TreeGraphQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TreeGraphQ"], "FunctionLink"],
 " will tell you if a graph is a tree. For directed graphs, it will return \
false if the graph is not a rooted tree. However, the Wolfram Language does \
not include a function for finding the root of a rooted tree."
}], "Text",ExpressionUUID->"5414e67c-79a8-4b4b-9eee-d38e70570976"],

Cell["\<\
We begin by creating an example of a directed graph which is not a rooted \
tree, but whose underlying undirected graph is a tree.\
\>", "Text",ExpressionUUID->"cdc4282e-b13b-4b4b-9f53-22060fdab2d2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"notRooted", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "2"}], ",", 
      RowBox[{"1", "\[Rule]", "3"}], ",", 
      RowBox[{"2", "\[Rule]", "4"}], ",", 
      RowBox[{"2", "\[Rule]", "5"}], ",", 
      RowBox[{"4", "\[Rule]", "6"}], ",", 
      RowBox[{"7", "\[Rule]", "4"}]}], "}"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[13]:=",ExpressionUUID->"f7a6cc38-2c41-4743-bee5-74de6c81f941"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 6, 
      7}, {{{1, 2}, {1, 3}, {2, 4}, {2, 5}, {4, 6}, {7, 4}}, Null}, {
      VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{0., 3.}, {2., 2.}}, 0.030239520958083826`], 
        ArrowBox[{{0., 3.}, {0., 2.}}, 0.030239520958083826`], 
        ArrowBox[{{2., 2.}, {1., 1.}}, 0.030239520958083826`], 
        ArrowBox[{{2., 2.}, {2., 1.}}, 0.030239520958083826`], 
        ArrowBox[{{1., 1.}, {1., 0.}}, 0.030239520958083826`], 
        ArrowBox[{{1., 2.}, {1., 1.}}, 0.030239520958083826`]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 3.}, 0.030239520958083826], 
         InsetBox["1", 
          Offset[{2, 2}, {0.030239520958083826, 3.0302395209580837}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.030239520958083826], 
         InsetBox["2", 
          Offset[{2, 2}, {2.0302395209580837, 2.0302395209580837}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.030239520958083826], 
         InsetBox["3", 
          Offset[{2, 2}, {0.030239520958083826, 2.0302395209580837}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.030239520958083826], 
         InsetBox["4", Offset[{2, 2}, {1.030239520958084, 1.030239520958084}],
           ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.030239520958083826], 
         InsetBox["5", 
          Offset[{2, 2}, {2.0302395209580837, 1.030239520958084}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.030239520958083826], 
         InsetBox["6", 
          Offset[{2, 2}, {1.030239520958084, 0.030239520958083826}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.030239520958083826], 
         InsetBox["7", 
          Offset[{2, 2}, {1.030239520958084, 2.0302395209580837}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785761162212*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"77810d13-19f4-46fb-b73b-55042323fc6f"]
}, Open  ]],

Cell[TextData[{
 "This is identical to ",
 StyleBox["secondRooted", "Code"],
 ", except for the direction of the edge between vertex 4 and vertex 7. Note \
that ",
 StyleBox[ButtonBox["TreeGraphQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TreeGraphQ"], "FunctionLink"],
 " correctly identifies it as not being a tree, since there are two vertices \
which are not the tail of any edge."
}], "Text",ExpressionUUID->"5414c45c-0932-4ffc-babb-6d704f896131"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TreeGraphQ", "[", "notRooted", "]"}]], "Input",
 CellLabel->"In[14]:=",ExpressionUUID->"a34dbbe3-aac6-4d3c-b6ef-cd5231d3326d"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.73878576119079*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"c398c863-165b-40ca-8d8f-658963c24d23"]
}, Open  ]],

Cell["However, the underlying undirected graph is a tree.", "Text",ExpressionUUID->"7ae67d97-e2f9-49ef-bcad-e9bdb0f79cab"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TreeGraphQ", "[", 
  RowBox[{"UndirectedGraph", "[", "notRooted", "]"}], "]"}]], "Input",
 CellLabel->"In[15]:=",ExpressionUUID->"3f984ba2-69fc-4630-ae3f-676aecb8d09b"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.738785761263124*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"a7b481cd-9149-457b-be4f-b22053e4c752"]
}, Open  ]],

Cell[TextData[{
 "It will be useful to be able to distinguish between a rooted tree and a \
non-rooted tree. That is, we will need a function that returns ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 " for ",
 StyleBox["firstRooted", "Code"],
 ", but ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 " on its undirected underlying graph."
}], "Text",ExpressionUUID->"ac52a49f-d5f4-41f7-8be4-b1691a94bd36"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rootedTreeQ", "[", "T_Graph", "]"}], ":=", 
  RowBox[{
   RowBox[{"TreeGraphQ", "[", "T", "]"}], "&&", 
   RowBox[{"DirectedGraphQ", "[", "T", "]"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[16]:=",ExpressionUUID->"516b6c0b-fb34-49e4-a9be-390302da24cf"],

Cell[TextData[{
 "As promised, this distinguishes between ",
 StyleBox["firstRooted", "Code"],
 " and its underlying graph."
}], "Text",ExpressionUUID->"4bb46692-865f-4eb5-a816-d3bef650ca1b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rootedTreeQ", "[", "firstRooted", "]"}]], "Input",
 CellLabel->"In[17]:=",ExpressionUUID->"a9deca91-bc90-4c2f-a823-06efc5ac2097"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.738785761421482*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"69fadfd5-da7c-4ccc-a670-10be1b6505c2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rootedTreeQ", "[", 
  RowBox[{"UndirectedGraph", "[", "firstRooted", "]"}], "]"}]], "Input",
 CellLabel->"In[18]:=",ExpressionUUID->"c0a2591b-7a3b-45e7-9a13-8a57c05025c5"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.738785761478001*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"df2784cb-a965-4a6a-9de6-79a4e43faaa4"]
}, Open  ]],

Cell[TextData[{
 "The root of a rooted tree is necessarily the unique vertex with in-degree \
0. We can use ",
 StyleBox[ButtonBox["VertexInDegree",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexInDegree"], "FunctionLink"],
 " to obtain a list of the in-degrees of the vertices of a directed graph."
}], "Text",ExpressionUUID->"dc6cf716-b43b-4394-b8f2-e4cfc1843aef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"VertexInDegree", "[", "firstRooted", "]"}]], "Input",
 CellLabel->"In[19]:=",ExpressionUUID->"bc24f402-6c7b-4fdf-b78b-306446ca9018"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.73878576154663*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"e5a73eb7-74e3-4369-a1bd-40d81256694b"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Position",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Position"], "FunctionLink"],
 " function, applied to the list of in-degrees, will tell us at which \
location the 0 appears. Note that the output of ",
 StyleBox[ButtonBox["Position",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Position"], "FunctionLink"],
 " is a list of the position specifications, themselves lists. "
}], "Text",ExpressionUUID->"6b2971d0-6c3c-417b-be94-51d38770964c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{
   RowBox[{"VertexInDegree", "[", "firstRooted", "]"}], ",", "0"}], 
  "]"}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"24664f21-a1b3-49d4-aab8-b40688569049"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", "1", "}"}], "}"}]], "Output",
 CellChangeTimes->{3.738785761612554*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"9854a269-f966-4bb3-b572-2854767e1d3a"]
}, Open  ]],

Cell[TextData[{
 "Since ",
 StyleBox[ButtonBox["TreeGraphQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TreeGraphQ"], "FunctionLink"],
 " has identified this as a tree, we know that there will be exactly one \
vertex with in-degree 0, so we confidently use ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") to obtain the root\[CloseCurlyQuote]s position in the list."
}], "Text",ExpressionUUID->"766e0467-bc33-4fd8-9099-c409dec8687e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Position", "[", 
   RowBox[{
    RowBox[{"VertexInDegree", "[", "firstRooted", "]"}], ",", "0"}], "]"}], 
  "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "1"}], "]"}], "]"}]], "Input",
 CellLabel->"In[21]:=",ExpressionUUID->"a2da3f9c-24ed-4a47-a551-35fe4554bfc0"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.738785761680637*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"19b5e77d-6a2d-4615-9812-06c4ce7a32b1"]
}, Open  ]],

Cell[TextData[{
 "Since the output of ",
 StyleBox[ButtonBox["VertexInDegree",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexInDegree"], "FunctionLink"],
 " matches the order of vertices from ",
 StyleBox[ButtonBox["VertexList",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexList"], "FunctionLink"],
 ", we can use the previous result with ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ")",
 " ",
 "and ",
 StyleBox[ButtonBox["VertexList",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexList"], "FunctionLink"],
 " to obtain the name of the root."
}], "Text",ExpressionUUID->"b78a4852-f0b6-4913-ba47-548b6910871f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"VertexList", "[", "firstRooted", "]"}], "[", 
  RowBox[{"[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Position", "[", 
     RowBox[{
      RowBox[{"VertexInDegree", "[", "firstRooted", "]"}], ",", "0"}], "]"}], 
    "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "1"}], "]"}], "]"}], "\[IndentingNewLine]", "]"}], 
  "]"}]], "Input",
 CellLabel->"In[22]:=",ExpressionUUID->"556506bd-debb-43ec-b2ff-ab27f5161c6b"],

Cell[BoxData["\<\"a\"\>"], "Output",
 CellChangeTimes->{3.738785761746558*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"e91d46e6-66d6-485b-8bd1-ea2a27a2a8b5"]
}, Open  ]],

Cell["We create a function based on this example.", "Text",ExpressionUUID->"5d0ee85a-ef6e-4746-8611-f521673c9bc7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findRoot", "[", 
   RowBox[{"G_", "?", "rootedTreeQ"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"VertexList", "[", "G", "]"}], "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{"Position", "[", 
      RowBox[{
       RowBox[{"VertexInDegree", "[", "G", "]"}], ",", "0"}], "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[23]:=",ExpressionUUID->"ed2f0325-fa53-4fb2-a4b4-06f973f6056d"],

Cell[TextData[{
 "With this function in hand, we can easily automate the use of ",
 StyleBox[ButtonBox["TreePlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TreePlot"], "FunctionLink"],
 " to draw a rooted tree in its proper form."
}], "Text",ExpressionUUID->"566a97dc-8016-428a-9c9f-4acdaf25df48"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rootedTreePlot", "[", 
   RowBox[{
    RowBox[{"G_", "?", "rootedTreeQ"}], ",", "opts___"}], "]"}], ":=", 
  RowBox[{"TreePlot", "[", 
   RowBox[{"G", ",", "Top", ",", 
    RowBox[{"findRoot", "[", "G", "]"}], ",", "opts"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[24]:=",ExpressionUUID->"eb6df9f4-7a1a-43c3-b9a9-88f1d90b250a"],

Cell[TextData[{
 "We use this function to draw ",
 StyleBox["secondRooted", "Code"],
 "."
}], "Text",ExpressionUUID->"b8495d97-decc-4cca-9d8e-a71ddade30c9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rootedTreePlot", "[", 
  RowBox[{"secondRooted", ",", 
   RowBox[{"VertexLabeling", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellLabel->"In[25]:=",ExpressionUUID->"f113c48b-7026-42a8-b079-59baf116663c"],

Cell[BoxData[
 GraphicsBox[
  TagBox[GraphicsComplexBox[{{1.3416407864998738`, 2.6832815729997477`}, {
    0.8944271909999159, 1.788854381999832}, {1.7888543819998317`, 
    1.788854381999832}, {0.4472135954999579, 0.894427190999916}, {
    1.3416407864998738`, 0.894427190999916}, {0., 0.}, {0.8944271909999159, 
    0.}}, {
     {RGBColor[0.5, 0., 0.], Arrowheads[{{0.030286132981502786`, 0.7}}], 
      ArrowBox[{1, 2}], ArrowBox[{1, 3}], ArrowBox[{2, 4}], ArrowBox[{2, 5}], 
      ArrowBox[{4, 6}], ArrowBox[{4, 7}]}, {InsetBox[
       FrameBox["1",
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 1], InsetBox[
       FrameBox["2",
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 2], InsetBox[
       FrameBox["3",
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 3], InsetBox[
       FrameBox["4",
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 4], InsetBox[
       FrameBox["5",
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 5], InsetBox[
       FrameBox["6",
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 6], InsetBox[
       FrameBox["7",
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 7]}}],
   Annotation[#, 
    VertexCoordinateRules -> {{1.3416407864998738`, 2.6832815729997477`}, {
     0.8944271909999159, 1.788854381999832}, {1.7888543819998317`, 
     1.788854381999832}, {0.4472135954999579, 0.894427190999916}, {
     1.3416407864998738`, 0.894427190999916}, {0., 0.}, {0.8944271909999159, 
     0.}}]& ],
  AspectRatio->1.224744871391589,
  FrameTicks->None,
  PlotRange->All,
  PlotRangePadding->Scaled[0.1]]], "Output",
 CellChangeTimes->{3.7387857618518457`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"e8963d30-bca3-4543-9905-e18172282255"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Specifying Trees with ",
 StyleBox["TreeGraph", "Code"]
}], "Subsection",
 CellTags->"Section1c",ExpressionUUID->"fb59519b-8e15-4074-8bd2-a8db4f46e995"],

Cell[TextData[{
 "The Wolfram Language includes a function specifically designed for creating \
a tree: ",
 StyleBox[ButtonBox["TreeGraph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TreeGraph"], "FunctionLink"],
 ". This function can be given the same arguments you normally provide ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 ", but provides another option for specifying a tree. Specifically, ",
 StyleBox[ButtonBox["TreeGraph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TreeGraph"], "FunctionLink"],
 " will create a tree based on a list of the tree\[CloseCurlyQuote]s vertices \
followed by a list of the same length consisting of the parent of each \
vertex, with the root being listed as its own parent. As an example, we \
recreate ",
 StyleBox["secondTree", "Code"],
 "."
}], "Text",ExpressionUUID->"d9a1eb79-a654-4742-92a9-92d04171c289"],

Cell[CellGroupData[{

Cell[BoxData["secondTree"], "Input",
 CellLabel->"In[26]:=",ExpressionUUID->"3b3eb183-ebc6-4eea-9260-d9587a5245e7"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"b", "e", "d", "a", "c"}, {
      Null, {{4, 1}, {4, 5}, {1, 3}, {1, 2}}}, {VertexLabels -> {"Name"}}]]}, 
    
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Arrowheads[0.], 
         ArrowBox[{{0.8164965809277261, 1.6329931618554523`}, {0., 
          0.8164965809277261}}, 0.019562323618881772`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8164965809277261, 1.6329931618554523`}, {
          0.8164965809277261, 0.8164965809277261}}, 0.019562323618881772`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8164965809277261, 1.6329931618554523`}, {
          1.6329931618554523`, 0.8164965809277261}}, 
          0.019562323618881772`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.6329931618554523`, 0.8164965809277261}, {
          1.6329931618554523`, 0.}}, 0.019562323618881772`]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{0.8164965809277261, 1.6329931618554523}, 
          0.019562323618881772], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.8360589045466079, 1.652555485474334}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 0.8164965809277261}, 0.019562323618881772], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.019562323618881772, 0.8360589045466079}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8164965809277261, 0.8164965809277261}, 
          0.019562323618881772], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {0.8360589045466079, 0.8360589045466079}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.6329931618554523, 0.8164965809277261}, 
          0.019562323618881772], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {1.652555485474334, 0.8360589045466079}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.6329931618554523, 0.}, 0.019562323618881772], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {1.652555485474334, 0.019562323618881772}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7387857619010763`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"4d6c49b8-09f4-4c5c-9c67-8ae68a4c86fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TreeGraph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "\"\<b\>\"", ",", "\"\<e\>\"", ",", "\"\<d\>\"", ",", "\"\<a\>\"", ",", 
     "\"\<c\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<b\>\"", ",", "\"\<b\>\"", ",", "\"\<b\>\"", ",", "\"\<b\>\"", ",", 
     "\"\<a\>\""}], "}"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]], "Input",
 CellLabel->"In[27]:=",ExpressionUUID->"6b88f5c1-c4e3-447b-b890-684ae85ffffe"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"b", "e", "d", "a", "c"}, {
      Null, {{1, 2}, {1, 3}, {1, 4}, {4, 5}}}, {VertexLabels -> {"Name"}}]]}, 
    
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Arrowheads[0.], 
         ArrowBox[{{0.8164965809277261, 1.6329931618554523`}, {0., 
          0.8164965809277261}}, 0.019562323618881772`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8164965809277261, 1.6329931618554523`}, {
          0.8164965809277261, 0.8164965809277261}}, 0.019562323618881772`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.8164965809277261, 1.6329931618554523`}, {
          1.6329931618554523`, 0.8164965809277261}}, 
          0.019562323618881772`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.6329931618554523`, 0.8164965809277261}, {
          1.6329931618554523`, 0.}}, 0.019562323618881772`]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{0.8164965809277261, 1.6329931618554523}, 
          0.019562323618881772], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.8360589045466079, 1.652555485474334}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 0.8164965809277261}, 0.019562323618881772], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.019562323618881772, 0.8360589045466079}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8164965809277261, 0.8164965809277261}, 
          0.019562323618881772], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {0.8360589045466079, 0.8360589045466079}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.6329931618554523, 0.8164965809277261}, 
          0.019562323618881772], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {1.652555485474334, 0.8360589045466079}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.6329931618554523, 0.}, 0.019562323618881772], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {1.652555485474334, 0.019562323618881772}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.73878576434708*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"54c9b22a-a0bf-41ed-937a-f5b9de3536f3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Parents, Children, Leaves, and Internal Vertices of Rooted Trees\
\>", "Subsection",
 CellTags->"Section1c",ExpressionUUID->"31cd86bc-440b-4993-8bb3-520717ee0f3f"],

Cell[TextData[{
 "We now consider functions related to identifying particular vertices in a \
rooted tree. We will be using ",
 StyleBox["firstRooted", "Code"],
 " as an example, so we include the image here for reference."
}], "Text",ExpressionUUID->"8f2dbf2e-13d4-4c02-8deb-97871c3f46f4"],

Cell[CellGroupData[{

Cell[BoxData["firstRooted"], "Input",
 CellLabel->"In[28]:=",ExpressionUUID->"156d602e-3ba4-4340-8915-20f810b60a8b"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "a", "b", "c", "d", "e", "f", "g"}, {{{1, 2}, {1, 3}, {1, 4}, {2, 5}, {
       2, 6}, {3, 7}}, Null}, {VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{1.3772342551463013`, 1.5739820058814873`}, {
         0.3934955014703718, 0.7869910029407436}}, {{1.3772342551463013`, 
         1.5739820058814873`}, {1.5739820058814873`, 0.7869910029407436}}, {{
         1.3772342551463013`, 1.5739820058814873`}, {2.360973008822231, 
         0.7869910029407436}}, {{0.3934955014703718, 0.7869910029407436}, {0.,
          0.}}, {{0.3934955014703718, 0.7869910029407436}, {
         0.7869910029407436, 0.}}, {{1.5739820058814873`, 
         0.7869910029407436}, {1.5739820058814873`, 0.}}}, 
         0.02547454323586698]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{1.3772342551463013, 1.5739820058814873}, 
          0.02547454323586698], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {1.4027087983821682, 1.5994565491173542}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.3934955014703718, 0.7869910029407436}, 
          0.02547454323586698], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.4189700447062388, 0.8124655461766106}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.5739820058814873, 0.7869910029407436}, 
          0.02547454323586698], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {1.5994565491173542, 0.8124655461766106}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.360973008822231, 0.7869910029407436}, 
          0.02547454323586698], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {2.386447552058098, 0.8124655461766106}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.02547454323586698], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.02547454323586698, 0.02547454323586698}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.7869910029407436, 0.}, 0.02547454323586698], 
         InsetBox["\<\"f\"\>", 
          Offset[{2, 2}, {0.8124655461766106, 0.02547454323586698}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.5739820058814873, 0.}, 0.02547454323586698], 
         InsetBox["\<\"g\"\>", 
          Offset[{2, 2}, {1.5994565491173542, 0.02547454323586698}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7387857644752693`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"b915722f-652f-4efa-9f5e-c42082120708"]
}, Open  ]],

Cell["\<\
We begin with the question of whether one vertex is the parent of another. \
Given the two vertices, checking this requires determining whether the \
directed edge from the parent to the child is actually in the tree. \
\>", "Text",ExpressionUUID->"206ac3e4-754b-4ae9-a90c-f840816ac3d5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"parentQ", "[", 
   RowBox[{
    RowBox[{"T_", "?", "rootedTreeQ"}], ",", "p_", ",", "c_"}], "]"}], ":=", 
  RowBox[{"EdgeQ", "[", 
   RowBox[{"T", ",", 
    RowBox[{"DirectedEdge", "[", 
     RowBox[{"p", ",", "c"}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[29]:=",ExpressionUUID->"7f7763a3-7e58-4761-ac33-e10438ac8c8a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"parentQ", "[", 
  RowBox[{"firstRooted", ",", "\"\<b\>\"", ",", "\"\<f\>\""}], "]"}]], "Input",\

 CellLabel->"In[30]:=",ExpressionUUID->"dd19a4d2-fbad-44e5-9427-02d7175e3a09"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.738785764526164*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"c21eb1f9-322b-4962-be8f-5ff116625fe3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"parentQ", "[", 
  RowBox[{"firstRooted", ",", "\"\<b\>\"", ",", "\"\<d\>\""}], "]"}]], "Input",\

 CellLabel->"In[31]:=",ExpressionUUID->"864a73fd-0b88-457e-86f9-c848d8753ca8"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.738785764578198*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"fbf2e8be-1159-4aac-8a36-4b05924cc2fb"]
}, Open  ]],

Cell[TextData[{
 "Next, we consider the question of finding the parent of a given vertex. \
This can be done by searching the output of ",
 StyleBox[ButtonBox["EdgeList",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/EdgeList"], "FunctionLink"],
 " for the edge that have the given vertex at the terminal end. Assuming the \
graph is in fact a rooted tree, there can be at most one such edge. If the \
vertex is the root, there will be no parent and the function will return ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 ". Note the second argument in ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " means that it will search the edge list for those edges from the variable ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "5e3c091d-f9d7-421a-a58e-8e63e687078f"],
 " to the given edge ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "34f96a93-231d-4251-8b43-7aa37b5a26a1"],
 " but will put only ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "fab99d34-aca8-46a1-8ea8-74774dfa3c9e"],
 " in the output."
}], "Text",ExpressionUUID->"369dd222-b265-43d6-8dc2-420179b8cbbe"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findParent", "[", 
   RowBox[{
    RowBox[{"T_", "?", "rootedTreeQ"}], ",", "v_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"P", ",", "p"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"P", "=", 
      RowBox[{"Cases", "[", 
       RowBox[{
        RowBox[{"EdgeList", "[", "T", "]"}], ",", 
        RowBox[{
         RowBox[{"DirectedEdge", "[", 
          RowBox[{"p_", ",", "v"}], "]"}], "\[Rule]", "p"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "P", "]"}], "\[NotEqual]", "1"}], ",", "Null", 
       ",", 
       RowBox[{"P", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[32]:=",ExpressionUUID->"bfaaf45d-a587-4460-9c0b-73a61a9d6c79"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findParent", "[", 
  RowBox[{"firstRooted", ",", "\"\<d\>\""}], "]"}]], "Input",
 CellLabel->"In[33]:=",ExpressionUUID->"9c2fcac8-af2a-4bc6-8d93-04843043de18"],

Cell[BoxData["\<\"a\"\>"], "Output",
 CellChangeTimes->{3.7387857646579247`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"ef83725f-c818-4985-b413-a4006fcc777c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"findParent", "[", 
  RowBox[{"firstRooted", ",", "\"\<a\>\""}], "]"}]], "Input",
 CellLabel->"In[34]:=",ExpressionUUID->"58d82f58-d185-41c9-aedd-ff45f33b6aa5"],

Cell["\<\
For the related question of determining all children of the given vertex, we \
take the same approach but with the given vertex at the initial end.\
\>", "Text",ExpressionUUID->"13b13f7b-9830-4520-8eb4-a4ed4c4e02a0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findChildren", "[", 
   RowBox[{
    RowBox[{"T_", "?", "rootedTreeQ"}], ",", "v_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "c", "}"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{
      RowBox[{"EdgeList", "[", "T", "]"}], ",", 
      RowBox[{
       RowBox[{"DirectedEdge", "[", 
        RowBox[{"v", ",", "c_"}], "]"}], "\[Rule]", "c"}]}], "]"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[35]:=",ExpressionUUID->"834add44-e6f7-4baf-b42c-aa669f273cda"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findChildren", "[", 
  RowBox[{"firstRooted", ",", "\"\<a\>\""}], "]"}]], "Input",
 CellLabel->"In[36]:=",ExpressionUUID->"e769e302-48df-4b6d-857c-02cfc6730843"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>"}], "}"}]], "Output",\

 CellChangeTimes->{3.7387857647596207`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"1a9ae0ed-3d41-4f04-9e9b-77522d66189a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findChildren", "[", 
  RowBox[{"firstRooted", ",", "\"\<f\>\""}], "]"}]], "Input",
 CellLabel->"In[37]:=",ExpressionUUID->"aa71ed9e-0617-4fb0-9b60-7838b06755fa"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.738785764811681*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"2ec237e3-e94f-4b51-9b8c-c17ae6270e6e"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox["findChildren", "Code"],
 " function also indicates how we can test a vertex to determine if it is an \
internal vertex or a leaf."
}], "Text",ExpressionUUID->"0b121f83-e765-4ff3-8234-d9eb089a6202"],

Cell[BoxData[
 RowBox[{
  RowBox[{"internalVertexQ", "[", 
   RowBox[{
    RowBox[{"T_", "?", "rootedTreeQ"}], ",", "v_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Length", "[", 
    RowBox[{"findChildren", "[", 
     RowBox[{"T", ",", "v"}], "]"}], "]"}], "\[NotEqual]", "0"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[38]:=",ExpressionUUID->"2c6381c2-6d58-42f8-8659-10a8f087cc74"],

Cell[BoxData[
 RowBox[{
  RowBox[{"leafQ", "[", 
   RowBox[{
    RowBox[{"T_", "?", "rootedTreeQ"}], ",", "v_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Length", "[", 
    RowBox[{"findChildren", "[", 
     RowBox[{"T", ",", "v"}], "]"}], "]"}], "\[Equal]", "0"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[39]:=",ExpressionUUID->"f07069e7-0fc9-4dc8-b6b0-2398357d9b79"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"internalVertexQ", "[", 
  RowBox[{"firstRooted", ",", "\"\<a\>\""}], "]"}]], "Input",
 CellLabel->"In[40]:=",ExpressionUUID->"f29d83fe-76d6-4a3d-b4df-1d26737be49a"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.73878576489356*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"c2304473-c2a7-46e1-b14f-0fbdbabbc1b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"leafQ", "[", 
  RowBox[{"firstRooted", ",", "\"\<a\>\""}], "]"}]], "Input",
 CellLabel->"In[41]:=",ExpressionUUID->"02159b85-64df-46e5-b3c4-50584d77794f"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.7387857649470043`*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"579eaebd-db6e-41fd-92b9-14df18706aeb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"leafQ", "[", 
  RowBox[{"firstRooted", ",", "\"\<f\>\""}], "]"}]], "Input",
 CellLabel->"In[42]:=",ExpressionUUID->"2d45319b-78aa-4005-b9a4-157dd8add161"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.7387857650113707`*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"2ae772f5-4038-4045-89fa-0f35e11212d8"]
}, Open  ]],

Cell[TextData[{
 "We can determine all the leaves of a given tree by testing each vertex with \
",
 StyleBox["leafQ", "Code"],
 ". Here we use ",
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"], "FunctionLink"],
 " in order to test all of the vertices of the graph with a pure ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " (",
 StyleBox["&", "Code"],
 ") based on ",
 StyleBox["leafQ", "Code"],
 "."
}], "Text",ExpressionUUID->"08a637f5-b8fe-47ae-bdd0-5ac5f5f10392"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findLeaves", "[", 
   RowBox[{"T_", "?", "rootedTreeQ"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "V", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"V", "=", 
      RowBox[{"VertexList", "[", "T", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Select", "[", 
      RowBox[{"V", ",", 
       RowBox[{
        RowBox[{"leafQ", "[", 
         RowBox[{"T", ",", "#"}], "]"}], "&"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[43]:=",ExpressionUUID->"66a2317d-c8e1-4004-b515-1f3c486df6ee"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findLeaves", "[", "firstRooted", "]"}]], "Input",
 CellLabel->"In[44]:=",ExpressionUUID->"737588ca-79f7-42d5-ba7b-472ed314917b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"d\"\>", ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>"}],
   "}"}]], "Output",
 CellChangeTimes->{3.738785765093395*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"32b7b5ea-9d6e-42ab-8fe5-c8f0afaee895"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Ordered Rooted Trees", "Subsection",
 CellTags->"Section1d",ExpressionUUID->"1f9be441-f7b8-4ade-8b50-bfd00131621c"],

Cell["\<\
Recall that an ordered rooted tree is a rooted tree in which the children of \
each internal vertex are ordered. \
\>", "Text",ExpressionUUID->"6fb9904f-d89a-4a01-8fcf-4d318da7ba2d"],

Cell[CellGroupData[{

Cell["Representing Ordered Rooted Trees", "Subsubsection",ExpressionUUID->"3d37d250-28e2-4a4c-8a07-82bad1c80b21"],

Cell[TextData[{
 "To represent an ordered rooted tree in the Wolfram Language, we will need \
to store the order of children. There are many ways to accomplish this, but \
perhaps the most straightforward is to mark each vertex with its order among \
its siblings. By way of illustration, we make an ordered version of ",
 StyleBox["firstRooted", "Code"],
 "."
}], "Text",ExpressionUUID->"212558f9-ddd1-41b6-8f4d-bf619fc0ecc8"],

Cell[CellGroupData[{

Cell[BoxData["firstRooted"], "Input",
 CellLabel->"In[45]:=",ExpressionUUID->"417ae90d-4f52-4342-bc99-cc214ee229fd"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "a", "b", "c", "d", "e", "f", "g"}, {{{1, 2}, {1, 3}, {1, 4}, {2, 5}, {
       2, 6}, {3, 7}}, Null}, {VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{1.3772342551463013`, 1.5739820058814873`}, {
         0.3934955014703718, 0.7869910029407436}}, {{1.3772342551463013`, 
         1.5739820058814873`}, {1.5739820058814873`, 0.7869910029407436}}, {{
         1.3772342551463013`, 1.5739820058814873`}, {2.360973008822231, 
         0.7869910029407436}}, {{0.3934955014703718, 0.7869910029407436}, {0.,
          0.}}, {{0.3934955014703718, 0.7869910029407436}, {
         0.7869910029407436, 0.}}, {{1.5739820058814873`, 
         0.7869910029407436}, {1.5739820058814873`, 0.}}}, 
         0.02547454323586698]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{1.3772342551463013, 1.5739820058814873}, 
          0.02547454323586698], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {1.4027087983821682, 1.5994565491173542}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.3934955014703718, 0.7869910029407436}, 
          0.02547454323586698], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.4189700447062388, 0.8124655461766106}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.5739820058814873, 0.7869910029407436}, 
          0.02547454323586698], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {1.5994565491173542, 0.8124655461766106}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.360973008822231, 0.7869910029407436}, 
          0.02547454323586698], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {2.386447552058098, 0.8124655461766106}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.02547454323586698], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.02547454323586698, 0.02547454323586698}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.7869910029407436, 0.}, 0.02547454323586698], 
         InsetBox["\<\"f\"\>", 
          Offset[{2, 2}, {0.8124655461766106, 0.02547454323586698}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.5739820058814873, 0.}, 0.02547454323586698], 
         InsetBox["\<\"g\"\>", 
          Offset[{2, 2}, {1.5994565491173542, 0.02547454323586698}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7387857651412287`*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"c0f5c396-66a8-4f50-ab2c-bdae30be4e5f"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " draws the vertices in left-to-right order based on the order in which they \
appear in the list of vertices. Suppose we wanted the children of ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "c580c422-6caa-4c22-8a9a-593f33345e67"],
 " to be in the order ",
 Cell[BoxData[
  FormBox["c", TraditionalForm]],ExpressionUUID->
  "bc55dcf4-be61-4c3b-a60c-c678fb1fc7b1"],
 ", ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "490467fe-ddde-49a1-b15e-a203194ab8de"],
 ", ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "f4f31814-e74f-415a-8639-81cbba5e0728"],
 ", and the children of ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "5feddc1b-1c7f-48bf-a79b-5067d05900c4"],
 " to be in the order ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]],ExpressionUUID->
  "054897e3-4918-4010-b5ed-c1f36af64da6"],
 " then ",
 Cell[BoxData[
  FormBox["e", TraditionalForm]],ExpressionUUID->
  "9a514b88-c125-4ea3-8cb8-a7380e70b912"],
 ". We will represent child order by assigning, for each vertex, a property \
called \"order.\" We set the order of the root to be 0, and for all other \
vertices, the order attribute will represent the position of that vertex \
among its siblings. In our example, ",
 Cell[BoxData[
  FormBox["c", TraditionalForm]],ExpressionUUID->
  "87cf5f33-8ffc-44e7-9b77-3321ba819304"],
 " will have \"order\" 1, ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "5ed19e3f-650a-4407-9447-2ae7de9a595f"],
 " will have \"order\" 2, and ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "ab262a93-7105-44d3-a411-cc3d53d4886f"],
 " will have \"order\" 3. We define a function that uses ",
 StyleBox[ButtonBox["PropertyValue",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PropertyValue"], "FunctionLink"],
 " to set the \"order\" property for each vertex."
}], "Text",ExpressionUUID->"d8f0a17d-23b2-4dcd-969b-f494fa60922f"],

Cell[TextData[{
 "The first argument to this function will be the name of a rooted tree. The \
second argument will be an ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 " whose keys are the vertices of the tree and whose values are the orders. \
The function will loop through the vertices of the tree and set the \
\[OpenCurlyDoubleQuote]order\[CloseCurlyDoubleQuote] property."
}], "Text",ExpressionUUID->"ff8600c1-3d16-4bf6-8844-e3ea31ab0651"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"setChildOrder", "::", "argx"}], "=", 
   "\"\<Association keys do not match vertices.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"setChildOrder", "[", 
   RowBox[{
    RowBox[{"G_", "?", "rootedTreeQ"}], ",", "order_Association"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"T", "=", "G"}], ",", "v"}], "}"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{
     RowBox[{"Check", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Union", "[", 
           RowBox[{"Keys", "[", "order", "]"}], "]"}], "\[NotEqual]", 
          RowBox[{"Union", "[", 
           RowBox[{"VertexList", "[", "G", "]"}], "]"}]}], ",", 
         RowBox[{"Message", "[", 
          RowBox[{"setChildOrder", "::", "argx"}], "]"}]}], "]"}], ",", 
       RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"PropertyValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"T", ",", "v"}], "}"}], ",", "\"\<order\>\""}], "]"}], "=", 
        RowBox[{"order", "[", "v", "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"v", ",", 
         RowBox[{"VertexList", "[", "T", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "T"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",\

 InitializationCell->True,
 CellLabel->"In[46]:=",ExpressionUUID->"b9719e27-3440-47e2-92e3-d546ca7d8cc5"],

Cell["\<\
Note that this function outputs a new graph, it does not modify the original \
input, so we will need to make an assignment to the output.\
\>", "Text",ExpressionUUID->"81ee91e5-1106-48d0-815d-dae912310899"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"orderedAttempt", "=", 
  RowBox[{"setChildOrder", "[", 
   RowBox[{"firstRooted", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<a\>\"", "\[Rule]", "0"}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "2"}], ",", 
      RowBox[{"\"\<c\>\"", "\[Rule]", "1"}], ",", 
      RowBox[{"\"\<d\>\"", "\[Rule]", "3"}], ",", 
      RowBox[{"\"\<e\>\"", "\[Rule]", "2"}], ",", 
      RowBox[{"\"\<f\>\"", "\[Rule]", "1"}], ",", 
      RowBox[{"\"\<g\>\"", "\[Rule]", "1"}]}], "|>"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[48]:=",ExpressionUUID->"dca91f7b-2ece-481c-b9fa-1f92565ecbce"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "a", "b", "c", "d", "e", "f", "g"}, {{{1, 2}, {1, 3}, {1, 4}, {2, 5}, {
       2, 6}, {3, 7}}, Null}, {
      Properties -> {
        "a" -> {"order" -> 0}, "g" -> {"order" -> 1}, "c" -> {"order" -> 1}, 
         "d" -> {"order" -> 3}, "b" -> {"order" -> 2}, "f" -> {"order" -> 1}, 
         "e" -> {"order" -> 2}}, VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{1.3772342551463013`, 1.5739820058814873`}, {
         0.3934955014703718, 0.7869910029407436}}, {{1.3772342551463013`, 
         1.5739820058814873`}, {1.5739820058814873`, 0.7869910029407436}}, {{
         1.3772342551463013`, 1.5739820058814873`}, {2.360973008822231, 
         0.7869910029407436}}, {{0.3934955014703718, 0.7869910029407436}, {0.,
          0.}}, {{0.3934955014703718, 0.7869910029407436}, {
         0.7869910029407436, 0.}}, {{1.5739820058814873`, 
         0.7869910029407436}, {1.5739820058814873`, 0.}}}, 
         0.02547454323586698]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{1.3772342551463013, 1.5739820058814873}, 
          0.02547454323586698], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {1.4027087983821682, 1.5994565491173542}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.3934955014703718, 0.7869910029407436}, 
          0.02547454323586698], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.4189700447062388, 0.8124655461766106}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.5739820058814873, 0.7869910029407436}, 
          0.02547454323586698], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {1.5994565491173542, 0.8124655461766106}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.360973008822231, 0.7869910029407436}, 
          0.02547454323586698], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {2.386447552058098, 0.8124655461766106}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.02547454323586698], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.02547454323586698, 0.02547454323586698}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.7869910029407436, 0.}, 0.02547454323586698], 
         InsetBox["\<\"f\"\>", 
          Offset[{2, 2}, {0.8124655461766106, 0.02547454323586698}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.5739820058814873, 0.}, 0.02547454323586698], 
         InsetBox["\<\"g\"\>", 
          Offset[{2, 2}, {1.5994565491173542, 0.02547454323586698}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785765216064*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"4f57fb80-ce49-4766-a1c4-3507cee9b7ee"]
}, Open  ]],

Cell[TextData[{
 "Note that the vertices in ",
 StyleBox["orderedAttempt", "Code"],
 " now have the \[OpenCurlyDoubleQuote]order\[CloseCurlyDoubleQuote] property \
set, but we still need to make the tree be drawn in the appropriate way."
}], "Text",ExpressionUUID->"e3c01a9c-ac17-4dc5-8f24-945dfa45ac71"]
}, Open  ]],

Cell[CellGroupData[{

Cell["A Test for Ordered Rooted Trees", "Subsubsection",ExpressionUUID->"eb98752f-be72-4c38-a13d-1d78ca6d5689"],

Cell["\<\
Now that we know how to represent an ordered rooted tree in the Wolfram \
Language, we will create a function to test a graph object and ensure that it \
does in fact represent an ordered rooted tree. This will help us make the \
functions we write later be more robust. The requirement for being an ordered \
rooted tree are: the object must be a tree, it must be directed, every vertex \
must have the order property set, and the root\[CloseCurlyQuote]s order must \
be 0. \
\>", "Text",ExpressionUUID->"affb549b-a111-4035-a5a8-4931eb213da0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"orderedRootedTreeQ", "[", "T_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "v", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Catch", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "rootedTreeQ"}], ",", 
        RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"PropertyValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"T", ",", "v"}], "}"}], ",", "\"\<order\>\""}], "]"}], "===",
            "$Failed"}], ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"v", ",", 
          RowBox[{"VertexList", "[", "T", "]"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"PropertyValue", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"T", ",", 
             RowBox[{"findRoot", "[", "T", "]"}]}], "}"}], ",", 
           "\"\<order\>\""}], "]"}], "\[NotEqual]", "0"}], ",", 
        RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Throw", "[", "True", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[49]:=",ExpressionUUID->"5715ed0d-5383-4ad6-9c36-40b594e39a4a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"orderedRootedTreeQ", "[", "firstRooted", "]"}]], "Input",
 CellLabel->"In[50]:=",ExpressionUUID->"a1ad9250-0ea6-4e5d-9c78-c3c999b4f8a8"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.738785765271173*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"395db62a-0d8c-4542-83cf-9fbe92ebcf8d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"orderedRootedTreeQ", "[", "orderedAttempt", "]"}]], "Input",
 CellLabel->"In[51]:=",ExpressionUUID->"27e65040-35b1-4037-8916-254451414540"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.738785765332363*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"3841d231-5f75-418c-935e-aa6be8c5aeb0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Drawing Ordered Rooted Trees", "Subsubsection",ExpressionUUID->"fbcc439c-ff69-4629-b38b-52751073268c"],

Cell[TextData[{
 "While ",
 StyleBox["orderedAttempt", "Code"],
 " is now officially an ordered rooted tree and is storing the order of \
children, it will not be drawn with children in the proper order. To \
influence the order in which the vertices appear in the drawing, we will use \
the fact that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " draws vertices in the same order as is output by ",
 StyleBox[ButtonBox["VertexList",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexList"], "FunctionLink"],
 ". Consider the following example:"
}], "Text",ExpressionUUID->"cc7115e4-3dba-4f53-b3b8-abbff58c924f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"orderExample1", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "2"}], ",", 
      RowBox[{"1", "\[Rule]", "5"}], ",", 
      RowBox[{"1", "\[Rule]", "3"}], ",", 
      RowBox[{"2", "\[Rule]", "\"\<bannana\>\""}], ",", 
      RowBox[{"2", "\[Rule]", "\"\<apple\>\""}]}], "}"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[52]:=",ExpressionUUID->"aa82e6ab-e7ba-414f-bca1-e5e4fab546c6"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      1, 2, 5, 3, "bannana", "apple"}, {{{1, 2}, {1, 3}, {1, 4}, {2, 5}, {2, 
       6}}, Null}, {VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{1.2247448713915892`, 1.6329931618554523`}, {
         0.4082482904638631, 0.8164965809277261}}, {{1.2247448713915892`, 
         1.6329931618554523`}, {1.2247448713915892`, 0.8164965809277261}}, {{
         1.2247448713915892`, 1.6329931618554523`}, {2.041241452319315, 
         0.8164965809277261}}, {{0.4082482904638631, 0.8164965809277261}, {0.,
          0.}}, {{0.4082482904638631, 0.8164965809277261}, {
         0.8164965809277261, 0.}}}, 0.022945218072026957`]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{1.2247448713915892, 1.6329931618554523}, 
          0.022945218072026957], 
         InsetBox["1", 
          Offset[{2, 2}, {1.247690089463616, 1.6559383799274792}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.4082482904638631, 0.8164965809277261}, 
          0.022945218072026957], 
         InsetBox["2", Offset[{2, 2}, {0.43119350853589, 0.8394417989997531}],
           ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.2247448713915892, 0.8164965809277261}, 
          0.022945218072026957], 
         InsetBox["5", 
          Offset[{2, 2}, {1.247690089463616, 0.8394417989997531}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.041241452319315, 0.8164965809277261}, 
          0.022945218072026957], 
         InsetBox["3", 
          Offset[{2, 2}, {2.0641866703913423, 0.8394417989997531}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.022945218072026957], 
         InsetBox["\<\"bannana\"\>", 
          Offset[{2, 2}, {0.022945218072026957, 0.022945218072026957}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8164965809277261, 0.}, 0.022945218072026957], 
         InsetBox["\<\"apple\"\>", 
          Offset[{2, 2}, {0.8394417989997531, 0.022945218072026957}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.73878576540792*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"c9395e1e-9494-4e08-ac34-cb76436c3abb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"VertexList", "[", "orderExample1", "]"}]], "Input",
 CellLabel->"In[53]:=",ExpressionUUID->"17adaec0-bc73-421c-83bc-ba4375de4fbb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "5", ",", "3", ",", "\<\"bannana\"\>", 
   ",", "\<\"apple\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.738785765446104*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"3db78bfe-8c3a-431c-a2f5-7074a48111cf"]
}, Open  ]],

Cell[TextData[{
 "The order of the vertex list is determined by the order of the edges. For \
example, the edge 1\[Rule]5 appears before the edge 1\[Rule]3 in the \
definition of the ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 ", so vertex 5 appears before vertex 3. When drawing the tree, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " uses the order of the vertices in the vertex list to determine the \
relative positions of vertices within a level. In the above, since vertex 5 \
appears before vertex 3, it also appears to the left."
}], "Text",ExpressionUUID->"81435248-537e-43c8-bff3-590cd751ba7a"],

Cell[TextData[{
 "By explicitly providing a list of vertices as an argument to ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 ", we can influence the positions in the image."
}], "Text",ExpressionUUID->"1b1342dd-709a-412e-bccf-9c4154119895"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"orderExample2", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "1", ",", "5", ",", "2", ",", "3", ",", "\"\<apple\>\"", ",", 
      "\"\<bannana\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "2"}], ",", 
      RowBox[{"1", "\[Rule]", "5"}], ",", 
      RowBox[{"1", "\[Rule]", "3"}], ",", 
      RowBox[{"2", "\[Rule]", "\"\<bannana\>\""}], ",", 
      RowBox[{"2", "\[Rule]", "\"\<apple\>\""}]}], "}"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[54]:=",ExpressionUUID->"6fe70c2f-920b-4729-836c-fd1efe23b12c"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      1, 5, 2, 3, "apple", "bannana"}, {{{1, 3}, {1, 2}, {1, 4}, {3, 6}, {3, 
       5}}, Null}, {VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{0.8164965809277261, 1.6329931618554523`}, {0., 
         0.8164965809277261}}, {{0.8164965809277261, 1.6329931618554523`}, {
         0.8164965809277261, 0.8164965809277261}}, {{0.8164965809277261, 
         1.6329931618554523`}, {1.6329931618554523`, 0.8164965809277261}}, {{
         0.8164965809277261, 0.8164965809277261}, {0.4082482904638631, 
         0.}}, {{0.8164965809277261, 0.8164965809277261}, {
         1.2247448713915892`, 0.}}}, 0.019562323618881772`]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{0.8164965809277261, 1.6329931618554523}, 
          0.019562323618881772], 
         InsetBox["1", 
          Offset[{2, 2}, {0.8360589045466079, 1.652555485474334}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 0.8164965809277261}, 0.019562323618881772], 
         InsetBox["5", 
          Offset[{2, 2}, {0.019562323618881772, 0.8360589045466079}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8164965809277261, 0.8164965809277261}, 
          0.019562323618881772], 
         InsetBox["2", 
          Offset[{2, 2}, {0.8360589045466079, 0.8360589045466079}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.6329931618554523, 0.8164965809277261}, 
          0.019562323618881772], 
         InsetBox["3", 
          Offset[{2, 2}, {1.652555485474334, 0.8360589045466079}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.4082482904638631, 0.}, 0.019562323618881772], 
         InsetBox["\<\"apple\"\>", 
          Offset[{2, 2}, {0.42781061408274484, 0.019562323618881772}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.2247448713915892, 0.}, 0.019562323618881772], 
         InsetBox["\<\"bannana\"\>", 
          Offset[{2, 2}, {1.244307195010471, 0.019562323618881772}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785765520232*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"849c444c-1eae-48de-ab76-0dde66b55fe7"]
}, Open  ]],

Cell["\<\
We will use this feature in order to properly draw ordered rooted graphs. \
Given the data for an ordered rooted tree, we will sort the vertices based on \
the order property. \
\>", "Text",ExpressionUUID->"875dc29a-3da8-4117-b6a2-48020ed1cbca"],

Cell[TextData[{
 "Our function will accept as arguments a list of vertices (in any order), a \
list of edges (given as rules or directed edges), an association specifying \
the order property for each vertex, and graph options. The first task is to \
ensure that the input is valid, which we do by applying ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 " to the vertices and edges and applying ",
 StyleBox["rootedTreeQ", "Code"],
 ", and then ensuring that the keys of the association agree with the \
collection of vertices."
}], "Text",ExpressionUUID->"e37732b6-1a43-4de9-8f63-98cd5d28d8f4"],

Cell[TextData[{
 "Once we know that the input is reasonably valid, we extract the root using \
the ",
 StyleBox["findRoot", "Code"],
 " function we created earlier. This is needed so that we can specify the \
root in conjunction with the ",
 StyleBox["\[OpenCurlyDoubleQuote]LayeredEmbedding\[CloseCurlyDoubleQuote]", 
  "Input"],
 " layout. "
}], "Text",ExpressionUUID->"f95a5000-46a7-42eb-ba8c-cb585d08ac8c"],

Cell[TextData[{
 "To order the vertices, we use ",
 StyleBox[ButtonBox["Sort",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sort"], "FunctionLink"],
 " with a ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " (",
 StyleBox["&", "Code"],
 ") as the second argument that compares the values from the association. \
This means that the root will be the first element in this list, all the \
first children will appear after the root, then all the second children, etc. "
}], "Text",ExpressionUUID->"3c9ebd37-ace2-4093-9c51-c137f6d853fe"],

Cell[TextData[{
 "Once the vertex list is properly ordered, we then wrap the name of each \
vertex within ",
 StyleBox[ButtonBox["Property",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Property"], "FunctionLink"],
 ". When creating a ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 ", you can wrap a vertex or edge in ",
 StyleBox[ButtonBox["Property",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Property"], "FunctionLink"],
 " with second argument a rule (or list of rules) assigning values to \
properties. Here, this saves us from having to build the graph and then \
assign the \[OpenCurlyDoubleQuote]order\[CloseCurlyDoubleQuote] property with \
a loop. Instead, ",
 StyleBox[ButtonBox["Property",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Property"], "FunctionLink"],
 " allows us to assign the order at the time of the graph creation. The \
resulting list of vertices is passed to ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 " along with the edges and any options."
}], "Text",ExpressionUUID->"709b0a0b-5112-46ff-ba3f-5639a18b6e15"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"orderedTree", "::", "argx"}], "=", 
   "\"\<Vertices and edges do not form a rooted tree.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"orderedTree", "[", 
   RowBox[{"V_List", ",", 
    RowBox[{"edges", ":", 
     RowBox[{"{", 
      RowBox[{"___Rule", "|", "___DirectedEdge"}], "}"}]}], ",", 
    "order_Association", ",", "opts___"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sortedV", ",", "root"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Check", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"rootedTreeQ", "[", 
           RowBox[{"Graph", "[", 
            RowBox[{"V", ",", "edges"}], "]"}], "]"}]}], ",", 
         RowBox[{"Message", "[", 
          RowBox[{"orderedTree", "::", "argx"}], "]"}]}], "]"}], ",", 
       RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Check", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Union", "[", 
           RowBox[{"Keys", "[", "order", "]"}], "]"}], "\[NotEqual]", 
          RowBox[{"Union", "[", "V", "]"}]}], ",", 
         RowBox[{"Message", "[", 
          RowBox[{"setChildOrder", "::", "argx"}], "]"}]}], "]"}], ",", 
       RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"sortedV", "=", 
      RowBox[{"Sort", "[", 
       RowBox[{"V", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"order", "[", "#1", "]"}], "<", 
          RowBox[{"order", "[", "#2", "]"}]}], "&"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"root", "=", 
      RowBox[{"sortedV", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sortedV", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Property", "[", 
          RowBox[{"#", ",", 
           RowBox[{"\"\<order\>\"", "\[Rule]", 
            RowBox[{"order", "[", "#", "]"}]}]}], "]"}], "&"}], ",", 
        "sortedV"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Graph", "[", 
      RowBox[{"sortedV", ",", "edges", ",", 
       RowBox[{"GraphLayout", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<LayeredEmbedding\>\"", ",", 
          RowBox[{"\"\<RootVertex\>\"", "\[Rule]", "root"}]}], "}"}]}], ",", 
       "opts"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[55]:=",ExpressionUUID->"594a0530-8ed4-4e3b-acdb-c029c9747d55"],

Cell[TextData[{
 "With this function in place, it is a simple matter to create a version that \
does not require the list of vertices, and another that will take a ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 " as input. These take advantage of the Wolfram Language\[CloseCurlyQuote]s \
flexibility in allowing symbols to be overloaded with different signatures."
}], "Text",ExpressionUUID->"2114334f-708d-4f7e-9875-3af6ac548c11"],

Cell[BoxData[
 RowBox[{
  RowBox[{"orderedTree", "[", 
   RowBox[{
    RowBox[{"edges", ":", 
     RowBox[{"{", 
      RowBox[{"___Rule", "|", "___DirectedEdge"}], "}"}]}], ",", 
    "order_Association", ",", "opts___"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"orderedTree", "[", 
   RowBox[{
    RowBox[{"Union", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"List", "@@@", "edges"}], "]"}], "]"}], ",", "edges", ",", 
    "order", ",", "opts"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[57]:=",ExpressionUUID->"b87d3abf-e2b8-4d92-abda-0655fb6cd762"],

Cell[BoxData[
 RowBox[{
  RowBox[{"orderedTree", "[", 
   RowBox[{"g_Graph", ",", "order_Association", ",", "opts___"}], "]"}], ":=", 
  RowBox[{"orderedTree", "[", 
   RowBox[{
    RowBox[{"VertexList", "[", "g", "]"}], ",", 
    RowBox[{"EdgeList", "[", "g", "]"}], ",", "order", ",", "opts"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[58]:=",ExpressionUUID->"09e7efb6-02c6-4ab5-8f2d-2847891b1671"],

Cell["\<\
Finally, we can draw our ordered tree correctly. Note that to retain the \
order, we make an explicit reassignment of the symbol.\
\>", "Text",ExpressionUUID->"bf86f4fc-85d0-439b-83fe-7fd338251461"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"firstOrdered", "=", 
  RowBox[{"orderedTree", "[", 
   RowBox[{"firstRooted", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<a\>\"", "\[Rule]", "0"}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "2"}], ",", 
      RowBox[{"\"\<c\>\"", "\[Rule]", "1"}], ",", 
      RowBox[{"\"\<d\>\"", "\[Rule]", "3"}], ",", 
      RowBox[{"\"\<e\>\"", "\[Rule]", "2"}], ",", 
      RowBox[{"\"\<f\>\"", "\[Rule]", "1"}], ",", 
      RowBox[{"\"\<g\>\"", "\[Rule]", "1"}]}], "|>"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[59]:=",ExpressionUUID->"3d4029ec-0803-4da0-9dec-6dcf6ed913c0"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "a", "g", "f", "c", "e", "b", "d"}, {{{1, 6}, {1, 4}, {1, 7}, {6, 5}, {
       6, 3}, {4, 2}}, Null}, {
      GraphLayout -> {"LayeredEmbedding", "RootVertex" -> "a"}, 
       Properties -> {
        "a" -> {"order" -> 0}, "g" -> {"order" -> 1}, "c" -> {"order" -> 1}, 
         "d" -> {"order" -> 3}, "b" -> {"order" -> 2}, "f" -> {"order" -> 1}, 
         "e" -> {"order" -> 2}}, VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{0.9837387536759296, 1.5739820058814873`}, {0., 
         0.7869910029407436}}, {{0.9837387536759296, 1.5739820058814873`}, {
         1.1804865044111155`, 0.7869910029407436}}, {{0.9837387536759296, 
         1.5739820058814873`}, {1.9674775073518591`, 0.7869910029407436}}, {{
         0., 0.7869910029407436}, {0., 0.}}, {{1.1804865044111155`, 
         0.7869910029407436}, {0.7869910029407436, 0.}}, {{
         1.1804865044111155`, 0.7869910029407436}, {1.5739820058814873`, 
         0.}}}, 0.0223470323119013]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{0.9837387536759296, 1.5739820058814873}, 
          0.0223470323119013], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {1.006085785987831, 1.5963290381933886}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.0223470323119013], 
         InsetBox["\<\"g\"\>", 
          Offset[{2, 2}, {0.0223470323119013, 0.0223470323119013}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.7869910029407436, 0.}, 0.0223470323119013], 
         InsetBox["\<\"f\"\>", 
          Offset[{2, 2}, {0.8093380352526449, 0.0223470323119013}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 0.7869910029407436}, 0.0223470323119013], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {0.0223470323119013, 0.8093380352526449}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.5739820058814873, 0.}, 0.0223470323119013], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {1.5963290381933886, 0.0223470323119013}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.1804865044111155, 0.7869910029407436}, 
          0.0223470323119013], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {1.2028335367230167, 0.8093380352526449}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.9674775073518591, 0.7869910029407436}, 
          0.0223470323119013], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {1.9898245396637604, 0.8093380352526449}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.73878576560114*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"2e08f01b-bd40-4d0e-a964-e635160357fc"]
}, Open  ]],

Cell[TextData[{
 "It is also useful to have a function which, like ",
 StyleBox[ButtonBox["VertexList",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexList"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["EdgeList",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/EdgeList"], "FunctionLink"],
 " , will obtain the association representing the vertex order from a ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 " representing an ordered tree. This simply requires extracting the order \
property from each vertex and producing the association."
}], "Text",ExpressionUUID->"bc7ab27b-b4e4-4c8f-aeff-b0bbebf1ce6e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"orderAssociation", "[", 
   RowBox[{"T_", "?", "orderedRootedTreeQ"}], "]"}], " ", ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "v", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Association", "@@", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"v", "\[Rule]", 
        RowBox[{"PropertyValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"T", ",", "v"}], "}"}], ",", "\"\<order\>\""}], "]"}]}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"v", ",", 
         RowBox[{"VertexList", "[", "T", "]"}]}], "}"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[60]:=",ExpressionUUID->"144609bf-db3c-4b69-b0b6-e4b62689e485"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Properties of Trees", "Subsection",
 CellTags->"Section1e",ExpressionUUID->"91db5bdc-a251-4a41-b3d0-daaf71262ce9"],

Cell["\<\
We conclude this section with functions for calculating the level of a \
vertex, the height of a tree, and for determining if a tree is balanced or \
not.\
\>", "Text",ExpressionUUID->"5d3a5fa4-6290-4b7f-9635-5c95adf6e344"],

Cell["\<\
The level of a vertex in a rooted tree is the length of the path from the \
root to the vertex. We compute the level in reverse. We first initialize a \
counter to 0. If the given vertex is the root, then the level is 0. \
Otherwise, increment the counter and look at the parent of the original \
vertex. If this vertex is the root, then the counter holds the level. \
Otherwise, increment the counter and back up to the parent of the current \
vertex. When we reach the root, then the value of the counter is the level of \
the vertex.\
\>", "Text",ExpressionUUID->"5315bcd2-0923-4a1e-9642-e6ad1132e162"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findLevel", "[", 
   RowBox[{
    RowBox[{"T_", "?", "rootedTreeQ"}], ",", "V_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"v", ",", "level"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"level", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"v", "=", "V"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"findParent", "[", 
         RowBox[{"T", ",", "v"}], "]"}], "=!=", "Null"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"level", "++"}], ";", "\[IndentingNewLine]", 
        RowBox[{"v", "=", 
         RowBox[{"findParent", "[", 
          RowBox[{"T", ",", "v"}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", "level"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[61]:=",ExpressionUUID->"1b6353e4-bb15-4c3e-af0d-54e3e049ad3e"],

Cell[TextData[{
 "We can compute the levels of ",
 Cell[BoxData[
  FormBox["g", TraditionalForm]],ExpressionUUID->
  "acd1fe78-875f-46b6-90bb-5f6d8972f8b0"],
 " and ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "764c88c4-887c-451c-b0bf-32d56a9427e9"],
 " in the ",
 StyleBox["firstOrdered", "Code"],
 " tree."
}], "Text",ExpressionUUID->"4c0a130c-c308-4f2b-8cd7-b9a6a6b38257"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findLevel", "[", 
  RowBox[{"firstOrdered", ",", "\"\<g\>\""}], "]"}]], "Input",
 CellLabel->"In[62]:=",ExpressionUUID->"e021827a-f6c7-4434-bcb4-fce24736deb7"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.7387857656528387`*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"2f034705-49b9-403c-8b12-ed3ae3f8bff6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findLevel", "[", 
  RowBox[{"firstOrdered", ",", "\"\<d\>\""}], "]"}]], "Input",
 CellLabel->"In[63]:=",ExpressionUUID->"2b670af4-cd88-4274-adbd-6d085d3177ec"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.7387857657135143`*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"35f53306-6a6d-424f-821d-848ffb3d3c72"]
}, Open  ]],

Cell["\<\
The height of a tree is the maximum of the levels of the vertices. We can \
compute the height by checking each vertex\[CloseCurlyQuote]s level. We use a \
variable to hold the largest level and each time we find a vertex with a \
level larger than the current maximum, we update the variable.\
\>", "Text",ExpressionUUID->"acf76dfa-d505-40a1-a0c4-e20ec12139cd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findHeight", "[", 
   RowBox[{"T_", "?", "rootedTreeQ"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"v", ",", "height", ",", "level"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"height", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"level", "=", 
         RowBox[{"findLevel", "[", 
          RowBox[{"T", ",", "v"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"level", ">", "height"}], ",", 
          RowBox[{"height", "=", "level"}]}], "]"}]}], "\[IndentingNewLine]", 
       ",", 
       RowBox[{"{", 
        RowBox[{"v", ",", 
         RowBox[{"VertexList", "[", "T", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "height"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[64]:=",ExpressionUUID->"97fd9d6a-626a-42f0-906b-37ba872c1036"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findHeight", "[", "firstOrdered", "]"}]], "Input",
 CellLabel->"In[65]:=",ExpressionUUID->"c9154252-9449-4745-bc8c-3531f651a19b"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.738785765811349*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"4a5df0c9-3352-46ac-a881-5b6f2db55842"]
}, Open  ]],

Cell[TextData[{
 "Recall that a rooted tree of height ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]],ExpressionUUID->
  "7c9798c7-1d4d-4ef0-a3e3-116adb4f05ef"],
 " is balanced if all leaves are at level ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]],ExpressionUUID->
  "06d81f04-d8b4-4783-81e1-9a006b27c38e"],
 " or ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "a173182a-04b3-48cb-8f41-2b1ce0eade6b"],
 ". To determine if a given tree is balanced, we need to: (1) calculate the \
height of the tree, (2) find all the leaves of the tree with the ",
 StyleBox["findLeaves", "Code"],
 " function we wrote earlier, and (3) test each leaf\[CloseCurlyQuote]s level \
and return ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 " if it is higher than level ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "a60b9e93-de11-432b-b479-aeab41b69d65"],
 "."
}], "Text",ExpressionUUID->"b2fe44c8-b448-4f6c-bbf2-7fff550030c4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"balancedTreeQ", "[", 
   RowBox[{"T_", "?", "rootedTreeQ"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"height", ",", "leaves", ",", "v"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"height", "=", 
      RowBox[{"findHeight", "[", "T", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"leaves", "=", 
      RowBox[{"findLeaves", "[", "T", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"findLevel", "[", 
             RowBox[{"T", ",", "v"}], "]"}], "<", 
            RowBox[{"height", "-", "1"}]}], ",", 
           RowBox[{"Throw", "[", "False", "]"}]}], "]"}], 
         "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"v", ",", "leaves"}], "}"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Throw", "[", "True", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[66]:=",ExpressionUUID->"7fffc687-ec50-4662-92dd-9d44c9476c1e"],

Cell[TextData[{
 "We see that our ",
 StyleBox["firstOrdered", "Code"],
 " tree is balanced."
}], "Text",ExpressionUUID->"36d914e6-1f1a-438f-88da-f0b89bc99f98"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"balancedTreeQ", "[", "firstOrdered", "]"}]], "Input",
 CellLabel->"In[67]:=",ExpressionUUID->"86de7586-2744-464a-98a7-d1f6091ef8e6"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.738785765892963*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"a32937f3-b09d-4a3e-b070-1c9099786189"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["11.2 Applications of Trees", "Section",
 CellTags->"Section2",ExpressionUUID->"0ae73679-accf-429d-a215-2419996459dd"],

Cell["\<\
This section is concerned with applications of trees, particularly binary \
trees. Specifically, we consider the use of trees in binary search algorithms \
as well as in Huffman codes. The reason we use binary trees is that we can \
use the binary structure of the tree to make binary decisions (e.g., less \
than/greater than) regarding search paths or insertion of elements. \
Additionally, the binary tree structure corresponds well with the way \
computers store information as binary data.\
\>", "Text",ExpressionUUID->"4f0502fd-9c8e-48c9-9b62-cb9584a727de"],

Cell["\<\
Recall that a tree is called a binary tree if all vertices in the tree have \
at most two children. In this section, we will be using ordered binary trees. \
The fact that the vertices are ordered means that the children of a vertex \
can be considered to be either a left child or a right child. By convention, \
we consider the left child to be the first child and the right child to be \
second.\
\>", "Text",ExpressionUUID->"2e84775b-0130-464e-8fa5-727d12a83696"],

Cell[CellGroupData[{

Cell["Representation in the Wolfram Language", "Subsection",
 CellTags->"Section2a",ExpressionUUID->"1aced6c8-b81c-450f-8858-ecd2cd2226fb"],

Cell["\<\
Before we get to the applications, we will discuss how we can represent \
binary trees in the Wolfram Language and develop some functions to help us \
manipulate them. Since a binary tree is a particular kind of ordered rooted \
tree, our work here should be consistent with what we did above.\
\>", "Text",ExpressionUUID->"9074be89-6911-46a5-ba62-03eee588275f"],

Cell[CellGroupData[{

Cell["A Binary Tree Predicate", "Subsubsection",ExpressionUUID->"fe8bf7a6-6b4b-489f-93f2-4281b30e69cd"],

Cell[TextData[{
 "We will construct a predicate, ",
 StyleBox["binaryTreeQ", "Code"],
 " to test whether a graph represents a binary tree. We will impose three \
conditions for an object to be considered a binary tree. First, it must be an \
ordered rooted tree, that is, it must pass ",
 StyleBox["orderedRootedTreeQ", "Code"],
 ". Second, it must be binary, that is, each vertex must have at most two \
children. Third, each vertex other than the root must have order attribute 1 \
or 2, with 1 indicating that the vertex is a left child and 2 for right. The \
root will have its order attribute set to 0."
}], "Text",ExpressionUUID->"56cda351-7316-47c2-bb54-0b9c1767e38b"],

Cell["\<\
First, we construct an example of a binary tree. The tree we construct is the \
binary search tree for the letters D, B, F, A, C, E.\
\>", "Text",ExpressionUUID->"00479c9b-8741-4ccd-87d1-61a4b074fb0f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"firstBinaryTree", "=", 
  RowBox[{"orderedTree", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<D\>\"", ",", "\"\<B\>\"", ",", "\"\<F\>\"", ",", "\"\<A\>\"", ",", 
      "\"\<C\>\"", ",", "\"\<E\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<D\>\"", "\[Rule]", "\"\<B\>\""}], ",", 
      RowBox[{"\"\<D\>\"", "\[Rule]", "\"\<F\>\""}], ",", 
      RowBox[{"\"\<B\>\"", "\[Rule]", "\"\<A\>\""}], ",", 
      RowBox[{"\"\<B\>\"", "\[Rule]", "\"\<C\>\""}], ",", 
      RowBox[{"\"\<F\>\"", "\[Rule]", "\"\<E\>\""}]}], "}"}], ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<D\>\"", "\[Rule]", "0"}], ",", 
      RowBox[{"\"\<B\>\"", "\[Rule]", "1"}], ",", 
      RowBox[{"\"\<F\>\"", "\[Rule]", "2"}], ",", 
      RowBox[{"\"\<A\>\"", "\[Rule]", "1"}], ",", 
      RowBox[{"\"\<C\>\"", "\[Rule]", "2"}], ",", 
      RowBox[{"\"\<E\>\"", "\[Rule]", "1"}]}], "|>"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[68]:=",ExpressionUUID->"6f672682-285e-49d8-9aff-d4bc5926c62f"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "D", "E", "A", "B", "C", "F"}, {{{1, 4}, {1, 6}, {4, 3}, {4, 5}, {6, 
       2}}, Null}, {
      GraphLayout -> {"LayeredEmbedding", "RootVertex" -> "D"}, 
       Properties -> {
        "F" -> {"order" -> 2}, "E" -> {"order" -> 1}, "D" -> {"order" -> 0}, 
         "A" -> {"order" -> 1}, "B" -> {"order" -> 1}, "C" -> {"order" -> 2}},
        VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{1.0859306069076735`, 1.7374889710522776`}, {
         0.4343722427630694, 0.8687444855261388}}, {{1.0859306069076735`, 
         1.7374889710522776`}, {1.7374889710522776`, 0.8687444855261388}}, {{
         0.4343722427630694, 0.8687444855261388}, {0., 0.}}, {{
         0.4343722427630694, 0.8687444855261388}, {0.8687444855261388, 
         0.}}, {{1.7374889710522776`, 0.8687444855261388}, {
         1.7374889710522776`, 0.}}}, 0.02044525157230459]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{1.0859306069076735, 1.7374889710522776}, 
          0.02044525157230459], 
         InsetBox["\<\"D\"\>", 
          Offset[{2, 2}, {1.106375858479978, 1.7579342226245822}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.7374889710522776, 0.}, 0.02044525157230459], 
         InsetBox["\<\"E\"\>", 
          Offset[{2, 2}, {1.7579342226245822, 0.02044525157230459}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.02044525157230459], 
         InsetBox["\<\"A\"\>", 
          Offset[{2, 2}, {0.02044525157230459, 0.02044525157230459}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.4343722427630694, 0.8687444855261388}, 
          0.02044525157230459], 
         InsetBox["\<\"B\"\>", 
          Offset[{2, 2}, {0.454817494335374, 0.8891897370984434}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8687444855261388, 0.}, 0.02044525157230459], 
         InsetBox["\<\"C\"\>", 
          Offset[{2, 2}, {0.8891897370984434, 0.02044525157230459}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.7374889710522776, 0.8687444855261388}, 
          0.02044525157230459], 
         InsetBox["\<\"F\"\>", 
          Offset[{2, 2}, {1.7579342226245822, 0.8891897370984434}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7387857659696407`*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"312d1a01-e29a-4dfc-9290-7b68902e5a8e"]
}, Open  ]],

Cell[TextData[{
 "Now that we have an example, we will create the test. To check that the \
tree is in fact binary, we can use the ",
 StyleBox[ButtonBox["VertexOutDegree",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexOutDegree"], "FunctionLink"],
 " function to count the number of children of each vertex. If any vertex has \
more than two children, then the tree is not binary. Moreover, we make sure \
that each vertex is marked with an order of 1 or 2, or 0 in the case of the \
vertex."
}], "Text",ExpressionUUID->"22a1d909-04e0-4d18-9211-61b0299cac62"],

Cell[BoxData[
 RowBox[{
  RowBox[{"binaryTreeQ", "[", "T_Graph", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"R", ",", "v", ",", "vpos"}], "}"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{"Catch", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"orderedRootedTreeQ", "[", "T", "]"}]}], ",", 
        RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"R", "=", 
       RowBox[{"findRoot", "[", "T", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"VertexOutDegree", "[", 
             RowBox[{"T", ",", "v"}], "]"}], ">", "2"}], ",", 
           RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"vpos", "=", 
          RowBox[{"PropertyValue", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"T", ",", "v"}], "}"}], ",", "\"\<order\>\""}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"vpos", "\[Equal]", "0"}], "&&", 
              RowBox[{"v", "\[NotEqual]", "R"}]}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"vpos", "\[NotEqual]", "0"}], "&&", 
              RowBox[{"vpos", "\[NotEqual]", "1"}], "&&", 
              RowBox[{"vpos", "\[NotEqual]", "2"}]}], ")"}]}], ",", 
           RowBox[{"Throw", "[", "False", "]"}]}], "]"}]}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"v", ",", 
          RowBox[{"VertexList", "[", "T", "]"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Throw", "[", "True", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[69]:=",ExpressionUUID->"d7117672-5a35-461a-abbd-dc679200a9bc"],

Cell["\<\
The tree we just constructed is binary, but the example of an ordered tree \
from the previous section had a root with three children and thus is not \
binary.\
\>", "Text",ExpressionUUID->"3098e9bd-a13c-48ad-912e-ed3c32ea19f3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"binaryTreeQ", "[", "firstBinaryTree", "]"}]], "Input",
 CellLabel->"In[70]:=",ExpressionUUID->"b1f8ae8f-46cf-4ee5-b044-ef1309fc41de"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.73878576602176*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"092600d9-272c-4917-89b0-ed98084dfb0f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"binaryTreeQ", "[", "firstOrdered", "]"}]], "Input",
 CellLabel->"In[71]:=",ExpressionUUID->"480d05ac-5bc5-4e8e-89db-9df2846fba1a"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.7387857660811863`*^9},
 CellLabel->"Out[71]=",ExpressionUUID->"2dc0a75e-6d12-4090-85a0-ee371fde1818"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Modifying arguments with ",
 StyleBox["HoldFirst", "Code"]
}], "Subsubsection",ExpressionUUID->"714de3f0-5c5d-4012-bfbc-bdbd8b12934b"],

Cell["\<\
Next, we will write a function for drawing binary trees. In a binary tree, it \
is important to distinguish between a vertex being a left child versus a \
right child, even when it has no sibling. Therefore, the image of such a tree \
should reflect that, rather than placing only children directly below their \
parent. \
\>", "Text",ExpressionUUID->"ddbcf09e-3287-4296-8c65-e8503118923b"],

Cell[TextData[{
 "The function we create will be called ",
 StyleBox["drawBinaryTree", "Code"],
 ". Because the purpose of this function is to modify the locations of where \
vertices are drawn in a binary tree and because there is a canonical way to \
display binary trees, it is natural to develop this function in such a way as \
to change its argument, rather than needing to make an assignment to the \
result of the function."
}], "Text",ExpressionUUID->"e0bc38ed-6941-41a0-8b5c-d760f3d08604"],

Cell[TextData[{
 "We use the ",
 StyleBox[ButtonBox["HoldFirst",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldFirst"], "FunctionLink"],
 " attribute to make arguments modifiable. Normally when you provide an \
argument to a function, the function cannot assign to the argument. Consider \
the following simple function:"
}], "Text",ExpressionUUID->"dce41ebf-a644-4798-b8d9-b3428c9cd11d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"five", "=", "5"}]], "Input",
 CellLabel->"In[72]:=",ExpressionUUID->"613a1846-663a-434a-820b-7920f6667e51"],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{3.738785766144628*^9},
 CellLabel->"Out[72]=",ExpressionUUID->"d091d2c1-af36-43de-a51b-568604d95ab6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"addOne", "[", "n_", "]"}], ":=", 
  RowBox[{"n", "=", 
   RowBox[{"n", "+", "1"}]}]}]], "Input",
 CellLabel->"In[73]:=",ExpressionUUID->"a37be777-d508-4307-b2da-aa3d4a13c239"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"addOne", "[", "five", "]"}]], "Input",
 CellLabel->"In[74]:=",ExpressionUUID->"f16bec15-26c2-43d5-b139-0e1401edc7ef"],

Cell[BoxData[
 TemplateBox[{
  "Set","setraw",
   "\"Cannot assign to raw object \\!\\(\\*RowBox[{\\\"5\\\"}]\\).\"",2,74,1,
   22494154589033058537,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.73878576624787*^9},
 CellLabel->
  "During evaluation of \
In[74]:=",ExpressionUUID->"e708588a-b280-4669-af22-87ea30a633d1"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{3.7387857663228493`*^9},
 CellLabel->"Out[74]=",ExpressionUUID->"fb1f432c-c91e-4eeb-b65d-0b1871fc88dc"]
}, Open  ]],

Cell[TextData[{
 "This function produces an error when we attempt to assign a value to the \
argument ",
 StyleBox["n", "Code"],
 ". This is a feature of the Wolfram Language that is designed to encourage \
good programming practices. In particular, for a function to modify one of \
its arguments, we need to be very explicit that we really want to do so. This \
helps prevent unintended consequences\[LongDash]accidentally modifying an \
argument can cause serious errors in your work."
}], "Text",ExpressionUUID->"32d1a3cb-eb40-4d35-a643-8a236edca2ef"],

Cell[TextData[{
 "You can think about what is going on in the ",
 StyleBox["addOne", "Code"],
 " function this way: when you call the function with the syntax ",
 StyleBox["addOne[five]", "Code"],
 ", all of the occurrences of the name ",
 StyleBox["n", "Code"],
 " are resolved to the object ",
 StyleBox["5", "Code"],
 ", which is the value stored in ",
 StyleBox["five", "Code"],
 ". That is, the command ",
 StyleBox["n=n+1", "Code"],
 " resolves to ",
 StyleBox["5=5+1", "Code"],
 ". Clearly that is not a legal command."
}], "Text",ExpressionUUID->"842a5e7b-42a7-437d-bebf-b8384aad5996"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["HoldFirst",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldFirst"], "FunctionLink"],
 " attribute provides a way around this. If we attach the ",
 StyleBox[ButtonBox["HoldFirst",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldFirst"], "FunctionLink"],
 " attribute to ",
 StyleBox["addOne", "Code"],
 ", by applying ",
 StyleBox[ButtonBox["SetAttributes",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SetAttributes"], "FunctionLink"],
 " to the function name and the attribute, we are telling ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to not resolve the parameter ",
 StyleBox["n", "Code"],
 " into the object it refers to, but to evaluate the argument into a symbol. \
Instead of evaluating the symbol ",
 StyleBox["five", "Code"],
 " to get the object ",
 StyleBox["5", "Code"],
 " and replacing the parameter ",
 StyleBox["n", "Code"],
 " with ",
 StyleBox["5", "Code"],
 ", the symbol ",
 StyleBox["five", "Code"],
 " is held, and the parameter ",
 StyleBox["n", "Code"],
 " is replaced with the symbol ",
 StyleBox["five", "Code"],
 ". This means that the command becomes ",
 StyleBox["five=five+1", "Code"],
 "."
}], "Text",ExpressionUUID->"439027a2-a93e-4534-ad68-4e5a83b74f1f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"addOne2", ",", "HoldFirst"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"addOne2", "[", "n_", "]"}], ":=", 
  RowBox[{"n", "=", 
   RowBox[{"n", "+", "1"}]}]}]}], "Input",
 CellLabel->"In[75]:=",ExpressionUUID->"83ff9b33-90ae-4b9a-abba-03b06c6cbd95"],

Cell["\<\
Now, we can see that this function modifies the variable it is given.\
\>", "Text",ExpressionUUID->"a6f988b3-444d-494b-9ef2-316aef9983dc"],

Cell[CellGroupData[{

Cell[BoxData["five"], "Input",
 CellLabel->"In[77]:=",ExpressionUUID->"218bb349-b526-4353-bad3-5a0126cef465"],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{3.7387857664035597`*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"3a4c3a7b-221b-4351-8f2d-bdbd6733817a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"addOne2", "[", "five", "]"}]], "Input",
 CellLabel->"In[78]:=",ExpressionUUID->"c21228d4-2c1e-4414-9574-28e3492ad9d7"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{3.7387857664673758`*^9},
 CellLabel->"Out[78]=",ExpressionUUID->"7e68be42-a35e-47a0-a5b0-2c9cd289f35e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["five"], "Input",
 CellLabel->"In[79]:=",ExpressionUUID->"7437fdb7-bfc9-4c30-82f9-0e1a7f48f988"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{3.7387857666248302`*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"e1bfe301-2fff-424d-b506-dffaea49a35c"]
}, Open  ]],

Cell[TextData[{
 "In summary, we can create functions that modify an argument that is passed \
as a symbol by applying ",
 StyleBox[ButtonBox["SetAttributes",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SetAttributes"], "FunctionLink"],
 " to the function name and the attribute ",
 StyleBox[ButtonBox["HoldFirst",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldFirst"], "FunctionLink"],
 ". This allows the parameter to appear on the left side of an assignment and \
modify the symbol passed as input to the function."
}], "Text",ExpressionUUID->"40a97fdd-0925-46d6-a1c2-6ba76ead161b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Drawing Binary Trees", "Subsubsection",ExpressionUUID->"dd2a03f5-12aa-4f1a-940d-bcd7a6834b8e"],

Cell[TextData[{
 "We are now ready to write a function for drawing binary trees. Note that, \
while ",
 StyleBox["orderedTree", "Code"],
 " will result in an image in which the children are drawn correctly relative \
to each other, vertices that are the only child will appear directly below \
their parent rather than to the left or right. Here, we take more control \
over the locations by explicitly calculating the position of each vertex."
}], "Text",ExpressionUUID->"8b1c3895-2c8d-4017-b313-00d07bcecc03"],

Cell[TextData[{
 "Think about the tree as being drawn in a 1 by 1 box with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"0", ",", "0"}], ")"}], TraditionalForm]],ExpressionUUID->
  "e545faca-9373-4fad-b242-dd3b2afc424e"],
 " at the bottom left corner. The ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "f68ca94a-13be-4fe2-a274-6565a3c1d281"],
 "-coordinate of each vertex will depend on the height of the tree and the \
level of the vertex. Specifically, the ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "e991df13-4d0d-4b67-ba92-85c620df569b"],
 "-coordinate of any vertex is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "-", 
    RowBox[{"l", "/", "h"}]}], TraditionalForm]],ExpressionUUID->
  "b63d477f-32a2-442c-b623-cc953083b000"],
 ", where ",
 Cell[BoxData[
  FormBox["l", TraditionalForm]],ExpressionUUID->
  "0be4f720-953f-4695-9a21-b90bebf8aea9"],
 " is the level of the vertex and ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]],ExpressionUUID->
  "626ad4bb-6b64-4379-8259-d805bd0decd3"],
 " is the height of the tree. This way, the root, which is at level 0, has ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "7035f538-4467-490b-b17c-dceafbda373f"],
 "-coordinate 1 and the vertices in the last level have ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "babafcbd-82ef-4628-a383-6a7ca2bcd9aa"],
 "-coordinate 0."
}], "Text",ExpressionUUID->"2eefec34-c3df-47ea-b29b-eff0c04fbf98"],

Cell[TextData[{
 "For the ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "1ab0d8c3-f337-4d66-801f-81e7e4cb0881"],
 "-coordinates, the position of the vertex depends on the position of its \
parent and its level. We start by setting the ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "5e6ef1d8-a178-40e7-a281-928a4cd9e5c9"],
 "-position of the root to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "/", "2"}], TraditionalForm]],ExpressionUUID->
  "feca664a-92dd-40b7-87a0-34c4273432ec"],
 ". The left child of the root will be drawn at ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "e803e471-3b62-44a9-931c-3d4305ab4a44"],
 "-coordinate ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "/", "4"}], TraditionalForm]],ExpressionUUID->
  "5384f027-ec7f-4798-a373-e8604065f79b"],
 " and the right child at ",
 Cell[BoxData[
  FormBox[
   RowBox[{"3", "/", "4"}], TraditionalForm]],ExpressionUUID->
  "ac03bf64-7fdc-4c5c-9dba-592e794cef86"],
 ". We can think about the children of the root as being drawn ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "/", "4"}], TraditionalForm]],ExpressionUUID->
  "c614944b-5c77-4ba4-8887-3daf6c723f3d"],
 " to the left of the root and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "/", "4"}], TraditionalForm]],ExpressionUUID->
  "b8097ce2-d817-407e-bcf2-7e2a88efc8ee"],
 " to the right of the root, respectively. That is, the ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "35c11ee5-1f13-4c8e-ac89-7c2066101f0d"],
 "-coordinate of the root\[CloseCurlyQuote]s left child is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["1", "2"], "-", 
    FractionBox["1", "4"]}], TraditionalForm]],ExpressionUUID->
  "502329fb-2997-4703-8ae9-5e3173029985"],
 ". and the ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "244087fa-b224-4959-bd68-5e5773cb7e44"],
 "-coordinate of the right child is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["1", "2"], "+", 
    FractionBox["1", "4"]}], TraditionalForm]],ExpressionUUID->
  "e6d2b3b1-6ff1-4fac-880e-b3d222e4d28a"],
 ". Generally, for a vertex in level ",
 Cell[BoxData[
  FormBox["l", TraditionalForm]],ExpressionUUID->
  "c7918426-291a-489d-b1ce-c6a156a4cd6a"],
 ", we can calculate its ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "502285f7-831a-4edc-945e-88c1b1786d93"],
 "-coordinate as the ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "809c8c58-1562-44b9-bd7e-790d87711be5"],
 "-coordinate of its parent plus (for right children) or minus (for left) ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "/", 
    SuperscriptBox["2", 
     RowBox[{"l", "+", "1"}]]}], TraditionalForm]],ExpressionUUID->
  "6c850454-dfe9-43e6-b52a-73339cf04fbd"],
 "."
}], "Text",ExpressionUUID->"177e2952-6579-4e50-a2f8-08cc9ad2128d"],

Cell[TextData[{
 "The ",
 StyleBox["drawBinaryTree", "Code"],
 " function is given below. The first thing the function does is to set the \
",
 StyleBox[ButtonBox["VertexCoordinates",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexCoordinates"], "FunctionLink"],
 " property for the entire tree by extracting the existing positions of \
vertices with ",
 StyleBox[ButtonBox["GraphEmbedding",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GraphEmbedding"], "FunctionLink"],
 ". The Wolfram Language does not allow us to manipulate ",
 StyleBox[ButtonBox["VertexCoordinates",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexCoordinates"], "FunctionLink"],
 " individually when they have been automatically assigned by a layout. We \
get around this by setting explicit values to whatever positions the layout \
had determined."
}], "Text",ExpressionUUID->"4a32aeac-5b25-4049-ab18-c7d92bef5d5a"],

Cell[TextData[{
 "Then, we calculate the height of the tree with the ",
 StyleBox["findHeight", "Code"],
 " function from earlier and find the root with ",
 StyleBox["findRoot", "Code"],
 ". The function then processes the root of the tree by setting its position \
to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     FractionBox["1", "2"], ",", "1"}], ")"}], TraditionalForm]],
  ExpressionUUID->"7d269318-0615-4ecc-a33b-909ccab895dd"],
 ". We also create a list, ",
 StyleBox["verts", "Code",
  IgnoreSpellCheck->True],
 ", and populate it with the root's children. "
}], "Text",ExpressionUUID->"184733c1-c55d-4337-9dd9-6372cc5595b8"],

Cell[TextData[{
 "We then begin a ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop. We initialize a counter ",
 StyleBox["i", "Code"],
 " to 1. This counter serves as an index into the ",
 StyleBox["verts", "Code",
  IgnoreSpellCheck->True],
 " list. At each step in the loop, we do several things. First, we use the ",
 StyleBox["findLevel", "Code"],
 " function to determine the level of the vertex. Second, the ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "64600614-2280-4e3f-a89e-e1dc3186652e"],
 "-coordinate is calculated by the formula ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "+", 
    FractionBox["l", "h"]}], TraditionalForm]],ExpressionUUID->
  "b351a971-5df3-40db-b94a-c0b25172e591"],
 ". Third, the ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "fc0c7954-a52c-47ca-95b3-925ed21b0b66"],
 "-coordinate is calculated by accessing the ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "6c071866-f9fe-4051-98a9-2c876f57ae8e"],
 "-coordinate of the parent and adding or subtracting ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    SuperscriptBox["2", 
     RowBox[{"l", "+", "1"}]]], TraditionalForm]],ExpressionUUID->
  "477e717d-e685-42f1-96c7-38001cdca82b"],
 ". Fourth, we set the ",
 StyleBox[ButtonBox["VertexCoordinates",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexCoordinates"], "FunctionLink"],
 " property for the vertex. Finally, the children of the current vertex are \
added to the ",
 StyleBox["verts", "Code",
  IgnoreSpellCheck->True],
 " list and the counter is incremented."
}], "Text",ExpressionUUID->"790be62b-a6f3-4755-9a4d-483eaef7abf4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"drawBinaryTree", ",", "HoldFirst"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"drawBinaryTree", "[", 
   RowBox[{"T_", "?", "binaryTreeQ"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "height", ",", "v", ",", "i", ",", "level", ",", "verts", ",", "x", ",", 
      "y", ",", "parent", ",", "side"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"PropertyValue", "[", 
       RowBox[{"T", ",", "VertexCoordinates"}], "]"}], "=", 
      RowBox[{"GraphEmbedding", "[", "T", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"height", "=", 
      RowBox[{"findHeight", "[", "T", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"v", "=", 
      RowBox[{"findRoot", "[", "T", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"PropertyValue", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"T", ",", "v"}], "}"}], ",", "VertexCoordinates"}], "]"}], 
      "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "/", "2"}], ",", "1"}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"verts", "=", 
      RowBox[{"findChildren", "[", 
       RowBox[{"T", ",", "v"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"i", "=", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"Length", "[", "verts", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"v", "=", 
         RowBox[{"verts", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"level", "=", 
         RowBox[{"findLevel", "[", 
          RowBox[{"T", ",", "v"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"y", "=", 
         RowBox[{"1", "-", 
          RowBox[{"level", "/", "height"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"parent", "=", 
         RowBox[{"findParent", "[", 
          RowBox[{"T", ",", "v"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"x", "=", 
         RowBox[{
          RowBox[{"PropertyValue", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"T", ",", "parent"}], "}"}], ",", "VertexCoordinates"}], 
           "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"side", "=", 
         RowBox[{"Switch", "[", 
          RowBox[{
           RowBox[{"PropertyValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"T", ",", "v"}], "}"}], ",", "\"\<order\>\""}], "]"}], 
           ",", "1", ",", 
           RowBox[{"-", "1"}], ",", "2", ",", "1"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"x", "=", 
         RowBox[{"x", "+", 
          RowBox[{"side", "*", 
           RowBox[{"1", "/", 
            RowBox[{"(", 
             RowBox[{"2", "^", 
              RowBox[{"(", 
               RowBox[{"level", "+", "1"}], ")"}]}], ")"}]}]}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"PropertyValue", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"T", ",", "v"}], "}"}], ",", "VertexCoordinates"}], "]"}],
          "=", 
         RowBox[{"{", 
          RowBox[{"x", ",", "y"}], "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"verts", "=", 
         RowBox[{"Join", "[", 
          RowBox[{"verts", ",", 
           RowBox[{"findChildren", "[", 
            RowBox[{"T", ",", "v"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"i", "++"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "T"}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",\

 InitializationCell->True,
 CellLabel->"In[80]:=",ExpressionUUID->"4651af98-0650-49a2-9860-c081709c59da"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"drawBinaryTree", "[", "firstBinaryTree", "]"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[82]:=",ExpressionUUID->"ea9865d0-69b4-451e-9528-46e7efb3df8d"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "D", "E", "A", "B", "C", "F"}, {{{1, 4}, {1, 6}, {4, 3}, {4, 5}, {6, 
       2}}, Null}, {
      GraphLayout -> {"LayeredEmbedding", "RootVertex" -> "D"}, 
       Properties -> {
        "F" -> {"order" -> 2}, "E" -> {"order" -> 1}, "D" -> {"order" -> 0}, 
         "A" -> {"order" -> 1}, "B" -> {"order" -> 1}, "C" -> {"order" -> 2}},
        VertexCoordinates -> {{
          Rational[1, 2], 1}, {
          Rational[5, 8], 0}, {
          Rational[1, 8], 0}, {
          Rational[1, 4], 
          Rational[1, 2]}, {
          Rational[3, 8], 0}, {
          Rational[3, 4], 
          Rational[1, 2]}}, VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{0.5, 1.}, {0.25, 0.5}}, {{0.5, 1.}, {0.75, 0.5}}, {{0.25, 
         0.5}, {0.125, 0.}}, {{0.25, 0.5}, {0.375, 0.}}, {{0.75, 0.5}, {0.625,
          0.}}}, 0.01273]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0.5, 1.}, 0.01273], 
         InsetBox["\<\"D\"\>", Offset[{2, 2}, {0.51273, 1.01273}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.625, 0.}, 0.01273], 
         InsetBox["\<\"E\"\>", Offset[{2, 2}, {0.63773, 0.01273}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.125, 0.}, 0.01273], 
         InsetBox["\<\"A\"\>", Offset[{2, 2}, {0.13773, 0.01273}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.25, 0.5}, 0.01273], 
         InsetBox["\<\"B\"\>", Offset[{2, 2}, {0.26273, 0.51273}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.375, 0.}, 0.01273], 
         InsetBox["\<\"C\"\>", Offset[{2, 2}, {0.38773, 0.01273}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.75, 0.5}, 0.01273], 
         InsetBox["\<\"F\"\>", Offset[{2, 2}, {0.76273, 0.51273}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785766761353*^9},
 CellLabel->"Out[82]=",ExpressionUUID->"47280b35-69cc-4b75-9630-fce0e57e9b3e"]
}, Open  ]],

Cell[TextData[{
 "We can also use ",
 StyleBox["drawBinaryTree", "Code"],
 " within functions that produce a binary tree from vertex and edge data."
}], "Text",ExpressionUUID->"30afa1c3-2279-49ed-a91e-64866441f637"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"binaryTree", "::", "argx"}], "=", 
   "\"\<Arguments do not form a binary tree.\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"binaryTree", "[", 
    RowBox[{"V_List", ",", 
     RowBox[{"edges", ":", 
      RowBox[{"{", 
       RowBox[{"___Rule", "|", "___DirectedEdge"}], "}"}]}], ",", 
     "order_Association", ",", "opts___"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "T", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"T", "=", 
       RowBox[{"orderedTree", "[", 
        RowBox[{"V", ",", "edges", ",", "order", ",", "opts"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Check", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"binaryTreeQ", "[", "T", "]"}]}], ",", 
          RowBox[{"Message", "[", 
           RowBox[{"binaryTree", "::", "argx"}], "]"}]}], "]"}], ",", 
        RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"drawBinaryTree", "[", "T", "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"binaryTree", "[", 
    RowBox[{
     RowBox[{"edges", ":", 
      RowBox[{"{", 
       RowBox[{"___Rule", "|", "___DirectedEdge"}], "}"}]}], ",", 
     "order_Association", ",", "opts___"}], "]"}], ":=", 
   RowBox[{"binaryTree", "[", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"List", "@@@", "edges"}], "]"}], "]"}], ",", "edges", ",", 
     "order", ",", "opts"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"binaryTree", "[", 
    RowBox[{"g_Graph", ",", "order_Association", ",", "opts___"}], "]"}], ":=", 
   RowBox[{"binaryTree", "[", 
    RowBox[{
     RowBox[{"VertexList", "[", "g", "]"}], ",", 
     RowBox[{"EdgeList", "[", "g", "]"}], ",", "order", ",", "opts"}], 
    "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[83]:=",ExpressionUUID->"e989d8b2-00a9-46a2-8937-cb52751123ed"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parents and Children", "Subsubsection",ExpressionUUID->"84717d80-3919-4dcd-89ac-d0106050f2f7"],

Cell[TextData[{
 "In the previous section, we created the function ",
 StyleBox["findParent", "Code"],
 ", which returns the parent of a given vertex in the given tree. This \
function works on binary trees just as well."
}], "Text",ExpressionUUID->"b247b2e2-4c79-44ca-86ab-51edfefa0ac7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findParent", "[", 
  RowBox[{"firstBinaryTree", ",", "\"\<C\>\""}], "]"}]], "Input",
 CellLabel->"In[87]:=",ExpressionUUID->"0098d325-2a44-4e57-b8a4-f09dca448cba"],

Cell[BoxData["\<\"B\"\>"], "Output",
 CellChangeTimes->{3.738785766844182*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"a9bfe3da-e7f0-4e7b-8380-8fc5ec5b1ad0"]
}, Open  ]],

Cell[TextData[{
 "We had also created the ",
 StyleBox["findChildren", "Code"],
 " function, which we can also use with binary trees. However, for binary \
trees, we will want to be more specific and be able to determine the left and \
right children of a given vertex. Finding the left (respectively, right) \
child of a given vertex can be done by looking at each child of the vertex \
and checking the order attribute. The child with order 1 is the left child \
and is returned by the function (respectively, 2 and right child). If there \
is no left (respectively, right), child, the function will return ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"218d12cf-98f6-4dd2-b3da-ac68279e3d97"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"findLeftChild", "[", 
    RowBox[{
     RowBox[{"T_", "?", "binaryTreeQ"}], ",", "v_"}], "]"}], "/;", 
   RowBox[{"VertexQ", "[", 
    RowBox[{"T", ",", "v"}], "]"}]}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"children", ",", "w", ",", "pos"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"children", "=", 
      RowBox[{"findChildren", "[", 
       RowBox[{"T", ",", "v"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"pos", "=", 
           RowBox[{"PropertyValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"T", ",", "w"}], "}"}], ",", "\"\<order\>\""}], "]"}]}],
           ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"pos", "\[Equal]", "1"}], ",", 
            RowBox[{"Throw", "[", "w", "]"}]}], "]"}]}], 
         "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"w", ",", "children"}], "}"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Throw", "[", "Null", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[88]:=",ExpressionUUID->"c0316439-d159-49d3-80d5-6383ccfa37a8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"findRightChild", "[", 
    RowBox[{
     RowBox[{"T_", "?", "binaryTreeQ"}], ",", "v_"}], "]"}], "/;", 
   RowBox[{"VertexQ", "[", 
    RowBox[{"T", ",", "v"}], "]"}]}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"children", ",", "w", ",", "pos"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"children", "=", 
      RowBox[{"findChildren", "[", 
       RowBox[{"T", ",", "v"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"pos", "=", 
           RowBox[{"PropertyValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"T", ",", "w"}], "}"}], ",", "\"\<order\>\""}], "]"}]}],
           ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"pos", "\[Equal]", "2"}], ",", 
            RowBox[{"Throw", "[", "w", "]"}]}], "]"}]}], 
         "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"w", ",", "children"}], "}"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Throw", "[", "Null", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[89]:=",ExpressionUUID->"2acf8d6b-6871-4bdf-9650-e34e61fcc841"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findLeftChild", "[", 
  RowBox[{"firstBinaryTree", ",", "\"\<F\>\""}], "]"}]], "Input",
 CellLabel->"In[90]:=",ExpressionUUID->"41f7eeed-dd9f-4a70-b536-b0c425f098ad"],

Cell[BoxData["\<\"E\"\>"], "Output",
 CellChangeTimes->{3.7387857669425287`*^9},
 CellLabel->"Out[90]=",ExpressionUUID->"4591c970-6f03-4666-8d05-7bbed14410a3"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"findRightChild", "[", 
  RowBox[{"firstBinaryTree", ",", "\"\<F\>\""}], "]"}]], "Input",
 CellLabel->"In[91]:=",ExpressionUUID->"7594e694-2d33-4bf5-bc6f-eea70b77c6d7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Building Binary Trees", "Subsubsection",ExpressionUUID->"c1c4e508-5a88-43df-9003-14e1b06aee56"],

Cell["\<\
We will also want functions to create and build up a binary tree. \
Specifically, we will create a function that, given the label for the root of \
a binary tree, creates the tree with that vertex as its root. We will then \
write functions that, given a binary tree, a vertex in the tree, and a label \
for a new vertex, adds the new vertex as the left or right child of the given \
vertex.\
\>", "Text",ExpressionUUID->"df38cb75-2b9a-42a0-9ef8-9b333a3c24b9"],

Cell[TextData[{
 "The ",
 StyleBox["newBinaryTree", "Code"],
 " function creates the binary tree consisting of a single vertex, the root \
of the tree. This function also accepts a list of options to be passed to the \
",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"8fc4c186-bf56-48cf-8b7d-5945af0a7625"],

Cell[BoxData[
 RowBox[{
  RowBox[{"newBinaryTree", "[", 
   RowBox[{"r_", ",", "opts___"}], "]"}], ":=", 
  RowBox[{"binaryTree", "[", 
   RowBox[{
    RowBox[{"{", "r", "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"<|", 
     RowBox[{"r", "\[Rule]", "0"}], "|>"}], ",", "opts"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[92]:=",ExpressionUUID->"7689b21c-c887-42eb-b9cb-7ffdeecc6b63"],

Cell["\<\
Adding a child to a vertex in a binary tree requires three basic steps. We \
must add a vertex, add a directed edge from the parent to the new vertex, and \
then identify the new child as left or right by setting the order attribute \
to 1 or 2, respectively. We precede building the new tree by ensuring that \
there is not already a child vertex in the position already.\
\>", "Text",ExpressionUUID->"598a3d25-1d7a-436b-b578-365d4849535a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"addLeftChild", "[", 
    RowBox[{
     RowBox[{"T_", "?", "binaryTreeQ"}], ",", "v_", ",", "newV_"}], "]"}], "/;", 
   RowBox[{"VertexQ", "[", 
    RowBox[{"T", ",", "v"}], "]"}]}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"vertexL", ",", "edgeL", ",", "orderA"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"findLeftChild", "[", 
         RowBox[{"T", ",", "v"}], "]"}], "\[NotEqual]", "Null"}], ",", 
       RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"vertexL", "=", 
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"VertexList", "[", "T", "]"}], ",", "newV"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"edgeL", "=", 
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"EdgeList", "[", "T", "]"}], ",", 
        RowBox[{"DirectedEdge", "[", 
         RowBox[{"v", ",", "newV"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"orderA", "=", 
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"orderAssociation", "[", "T", "]"}], ",", 
        RowBox[{"newV", "\[Rule]", "1"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"binaryTree", "[", 
      RowBox[{"vertexL", ",", "edgeL", ",", "orderA"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[93]:=",ExpressionUUID->"5afc82f9-cd30-43f3-b411-45ca4bbc1c5f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"addRightChild", "[", 
    RowBox[{
     RowBox[{"T_", "?", "binaryTreeQ"}], ",", "v_", ",", "newV_"}], "]"}], "/;", 
   RowBox[{"VertexQ", "[", 
    RowBox[{"T", ",", "v"}], "]"}]}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"vertexL", ",", "edgeL", ",", "orderA"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"findRightChild", "[", 
         RowBox[{"T", ",", "v"}], "]"}], "\[NotEqual]", "Null"}], ",", 
       RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"vertexL", "=", 
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"VertexList", "[", "T", "]"}], ",", "newV"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"edgeL", "=", 
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"EdgeList", "[", "T", "]"}], ",", 
        RowBox[{"DirectedEdge", "[", 
         RowBox[{"v", ",", "newV"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"orderA", "=", 
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"orderAssociation", "[", "T", "]"}], ",", 
        RowBox[{"newV", "\[Rule]", "2"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"binaryTree", "[", 
      RowBox[{"vertexL", ",", "edgeL", ",", "orderA"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[94]:=",ExpressionUUID->"8820796f-6a98-4f58-8da1-88e7935e37e5"],

Cell[TextData[{
 "With ",
 StyleBox["newBinaryTree", "Code"],
 ", ",
 StyleBox["addLeftChild", "Code"],
 ", and ",
 StyleBox["addRightChild", "Code"],
 ", we can now construct binary trees one vertex at a time. We will \
illustrate this by creating the binary search tree described in Example 1 of \
the text by following the steps illustrated in Figure 1. We abbreviate the \
words in order to make the image more readable."
}], "Text",ExpressionUUID->"df805ea9-dfd6-44dc-972b-4ec11753f5d9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"fig1Tree", "=", 
   RowBox[{"newBinaryTree", "[", "\"\<Math\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fig1Tree", "=", 
   RowBox[{"addRightChild", "[", 
    RowBox[{"fig1Tree", ",", "\"\<Math\>\"", ",", "\"\<Phys\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fig1Tree", "=", 
   RowBox[{"addLeftChild", "[", 
    RowBox[{"fig1Tree", ",", "\"\<Math\>\"", ",", "\"\<Geog\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fig1Tree", "=", 
   RowBox[{"addRightChild", "[", 
    RowBox[{"fig1Tree", ",", "\"\<Phys\>\"", ",", "\"\<Zoo\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fig1Tree", "=", 
   RowBox[{"addLeftChild", "[", 
    RowBox[{"fig1Tree", ",", "\"\<Phys\>\"", ",", "\"\<Meteo\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fig1Tree", "=", 
   RowBox[{"addRightChild", "[", 
    RowBox[{"fig1Tree", ",", "\"\<Geog\>\"", ",", "\"\<Geol\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fig1Tree", "=", 
   RowBox[{"addLeftChild", "[", 
    RowBox[{"fig1Tree", ",", "\"\<Zoo\>\"", ",", "\"\<Psy\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fig1Tree", "=", 
   RowBox[{"addLeftChild", "[", 
    RowBox[{"fig1Tree", ",", "\"\<Geog\>\"", ",", "\"\<Chem\>\""}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[95]:=",ExpressionUUID->"59f77c3b-a200-4e46-a486-5235071b6378"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"fig1Tree", ",", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Name\>\"", ",", "After"}], "]"}]}]}], "]"}]], "Input",
 CellLabel->
  "In[103]:=",ExpressionUUID->"9c8c8ecd-5ad8-4a56-9198-d17211b22235"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Math", "Chem", "Geog", "Meteo", "Psy", "Geol", "Zoo", "Phys"}, {{{1, 
       8}, {1, 3}, {8, 7}, {8, 4}, {3, 6}, {7, 5}, {3, 2}}, Null}, {
      GraphLayout -> {
        "Dimension" -> 2, 
         "VertexLayout" -> {"LayeredEmbedding", "RootVertex" -> "Math"}}, 
       Properties -> {
        "Psy" -> {"order" -> 1}, "Geog" -> {"order" -> 1}, 
         "Zoo" -> {"order" -> 2}, "Math" -> {"order" -> 0}, 
         "Chem" -> {"order" -> 1}, "Phys" -> {"order" -> 2}, 
         "Geol" -> {"order" -> 2}, "Meteo" -> {"order" -> 1}}, 
       VertexCoordinates -> {{
          Rational[1, 2], 1}, {
          Rational[1, 8], 
          Rational[1, 3]}, {
          Rational[1, 4], 
          Rational[2, 3]}, {
          Rational[5, 8], 
          Rational[1, 3]}, {
          Rational[13, 16], 0}, {
          Rational[3, 8], 
          Rational[1, 3]}, {
          Rational[7, 8], 
          Rational[1, 3]}, {
          Rational[3, 4], 
          Rational[2, 3]}}, VertexLabels -> {
         Placed["Name", After]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{0.5, 1.}, {0.25, 0.6666666666666666}}, {{0.5, 1.}, {0.75, 
         0.6666666666666666}}, {{0.25, 0.6666666666666666}, {0.125, 
         0.3333333333333333}}, {{0.25, 0.6666666666666666}, {0.375, 
         0.3333333333333333}}, {{0.875, 0.3333333333333333}, {0.8125, 0.}}, {{
         0.75, 0.6666666666666666}, {0.625, 0.3333333333333333}}, {{0.75, 
         0.6666666666666666}, {0.875, 0.3333333333333333}}}, 0.01273]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0.5, 1.}, 0.01273], 
         InsetBox["\<\"Math\"\>", Offset[{2, 0}, {0.51273, 1.}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.125, 0.3333333333333333}, 0.01273], 
         InsetBox["\<\"Chem\"\>", 
          Offset[{2, 0}, {0.13773, 0.3333333333333333}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.25, 0.6666666666666666}, 0.01273], 
         InsetBox["\<\"Geog\"\>", 
          Offset[{2, 0}, {0.26273, 0.6666666666666666}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.625, 0.3333333333333333}, 0.01273], 
         InsetBox["\<\"Meteo\"\>", 
          Offset[{2, 0}, {0.63773, 0.3333333333333333}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.8125, 0.}, 0.01273], 
         InsetBox["\<\"Psy\"\>", Offset[{2, 0}, {0.82523, 0.}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.375, 0.3333333333333333}, 0.01273], 
         InsetBox["\<\"Geol\"\>", 
          Offset[{2, 0}, {0.38773, 0.3333333333333333}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.875, 0.3333333333333333}, 0.01273], 
         InsetBox["\<\"Zoo\"\>", 
          Offset[{2, 0}, {0.88773, 0.3333333333333333}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.75, 0.6666666666666666}, 0.01273], 
         InsetBox["\<\"Phys\"\>", 
          Offset[{2, 0}, {0.76273, 0.6666666666666666}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7387857671926126`*^9},
 CellLabel->
  "Out[103]=",ExpressionUUID->"c6d546b2-e42b-4a3f-99e8-d749cd028dbf"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Binary Insertion", "Subsection",
 CellTags->"Section2b",ExpressionUUID->"dfefd714-591e-48a0-b925-718a6a068ff2"],

Cell["\<\
A key benefit of binary search trees is that the search time required to find \
a specific element of the tree is logarithmic in the number of vertices of \
the tree. The drawback is that the initial insertion of a vertex is more \
expensive.\
\>", "Text",ExpressionUUID->"a4217676-6b5f-4ba8-802c-7699cb435cef"],

Cell[TextData[{
 "The procedure for constructing a binary search tree by insertion is \
described in Algorithm 1 in Section 11.2 of the textbook. We will implement \
this algorithm as the function ",
 StyleBox["binaryInsertion", "Code"],
 "."
}], "Text",ExpressionUUID->"5f2ed652-cddd-4121-b7a4-1d6d9b655b60"],

Cell[TextData[{
 "The ",
 StyleBox["binaryInsertion", "Code"],
 " function will accept two input values: a binary search tree and a vertex \
to be found or added. The function returns ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 " if the vertex is found to already be in the tree, and if not, it will add \
the vertex to the tree and return ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"641c37f7-49fb-4619-bf31-45b473679091"],

Cell[TextData[{
 "We begin by locating the root of the tree and setting the local variable ",
 StyleBox["v", "Code"],
 " to the root. Then, we begin a ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop. This loop continues provided two conditions are met. First, that ",
 StyleBox["v", "Code"],
 " is not ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 ". If we discover that the value we are searching for is not in the tree, \
then we will add it to the tree and set ",
 StyleBox["v", "Code"],
 " to ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 ", to indicate that we had to add a vertex, and this terminates the ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop. The second condition is that ",
 StyleBox["v", "Code"],
 " is not ",
 StyleBox["x", "Code"],
 ", where ",
 StyleBox["x", "Code"],
 " is the value we are searching for. If ",
 Cell[BoxData[
  RowBox[{"v", "=", "x"}]], "myCode",ExpressionUUID->
  "f89da402-7898-40df-9d99-3c4c0ccc6eae"],
 ", then we have found the vertex and thus the loop should terminate. (Note \
that the Wolfram Language identifies a vertex with its name, so, unlike the \
text, we do not distinguish between ",
 StyleBox["v", "Code"],
 " and its label.)"
}], "Text",ExpressionUUID->"62f9f9d7-aaad-4a01-bc7f-03c2d15be358"],

Cell[TextData[{
 "Within the ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop, there are two possibilities. Either the sought-after value is less \
than ",
 StyleBox["v", "Code"],
 " or it is greater than ",
 StyleBox["v", "Code"],
 ". They cannot be equal because that is one of the terminating conditions \
for the ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop. If the target value is less than ",
 StyleBox["v", "Code"],
 ", then we consider the left child of ",
 StyleBox["v", "Code"],
 ". If there is no left child, then we know that the value is not in the tree \
and so we add the value as the left child of ",
 StyleBox["v", "Code"],
 " and then set ",
 StyleBox["v", "Code"],
 " to ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 " to indicate that the desired value was not already in the tree. If there \
is a left child, then we set ",
 StyleBox["v", "Code"],
 " equal to it and continue the loop. If the target value is greater than ",
 StyleBox["v", "Code"],
 ", we proceed in exactly the same way, substituting right for left."
}], "Text",ExpressionUUID->"99ee658a-6c1b-4784-bd49-84ec2ceab8d4"],

Cell[TextData[{
 "Once the loop terminates, we check the value of ",
 StyleBox["v", "Code"],
 ". If ",
 StyleBox["v", "Code"],
 " is ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 ", then we know that the desired value was not found and the algorithm \
returns ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 ". If ",
 StyleBox["v", "Code"],
 " is not ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 ", then we return ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"ec674261-fe01-475f-8252-de04e30cd5f6"],

Cell["Here, now, is the binary insertion algorithm.", "Text",ExpressionUUID->"1f17f431-51a6-4b80-924c-246a155a832a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"binaryInsertion", ",", "HoldFirst"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"binaryInsertion", "[", 
   RowBox[{
    RowBox[{"BST_", "?", "binaryTreeQ"}], ",", "x_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "v", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"v", "=", 
      RowBox[{"findRoot", "[", "BST", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"v", "=!=", "Null"}], "&&", 
        RowBox[{"v", "\[NotEqual]", "x"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Order", "[", 
           RowBox[{"x", ",", "v"}], "]"}], "\[Equal]", "1"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"findLeftChild", "[", 
             RowBox[{"BST", ",", "v"}], "]"}], "===", "Null"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"no", " ", "left", " ", "child"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"BST", "=", 
             RowBox[{"addLeftChild", "[", 
              RowBox[{"BST", ",", "v", ",", "x"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"v", "=", "Null"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"left", " ", "child", " ", "exists"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"v", "=", 
            RowBox[{"findLeftChild", "[", 
             RowBox[{"BST", ",", "v"}], "]"}]}]}], "]"}], 
         "\[IndentingNewLine]", ",", " ", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"else", " ", "x"}], ">", "v"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"findRightChild", "[", 
             RowBox[{"BST", ",", "v"}], "]"}], "===", "Null"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"no", " ", "right", " ", "child"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"BST", "=", 
             RowBox[{"addRightChild", "[", 
              RowBox[{"BST", ",", "v", ",", "x"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"v", "=", "Null"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"right", " ", "child", " ", "exists"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"v", "=", 
            RowBox[{"findRightChild", "[", 
             RowBox[{"BST", ",", "v"}], "]"}]}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
     " ", 
     RowBox[{"(*", " ", 
      RowBox[{"end", " ", "while", " ", "loop"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"v", "=!=", "Null"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[104]:=",ExpressionUUID->"fddad126-6512-4f2c-a4cf-b0fa46e90208"],

Cell[TextData[{
 "Note that we use the ",
 StyleBox[ButtonBox["Order",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Order"], "FunctionLink"],
 " function to compare ",
 StyleBox["x", "Code"],
 " and ",
 StyleBox["v", "Code"],
 ". ",
 StyleBox[ButtonBox["Order",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Order"], "FunctionLink"],
 " returns 1 if the first argument is before (\[OpenCurlyDoubleQuote]less \
than\[CloseCurlyDoubleQuote]) the second in the canonical order, that is, \
alphabetically for strings, numerically for numbers. ",
 StyleBox[ButtonBox["Order",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Order"], "FunctionLink"],
 " returns ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "1"}], TraditionalForm]],ExpressionUUID->
  "316c979b-4cdb-47d3-a293-ac5db87b975e"],
 " if the first argument is after the second, and 0 if they are equal. The \
Wolfram Language does not allow you to use the less-than operator, ",
 StyleBox[ButtonBox["Less",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Less"], "FunctionLink"],
 " (",
 StyleBox["<", "Code"],
 "), with strings. ",
 StyleBox[ButtonBox["Order",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Order"], "FunctionLink"],
 " is generic and will allow string, integer, symbol and even other kinds of \
vertex names. "
}], "Text",ExpressionUUID->"5e718787-a6e3-418f-8099-5feb6acec868"],

Cell[TextData[{
 "Also note that ",
 StyleBox["binaryInsertion", "Code"],
 " requires that its argument already be a binary tree. A new tree must be \
created with ",
 StyleBox["newBinaryTree", "Code"],
 "."
}], "Text",ExpressionUUID->"d733b350-ff3d-41de-aac4-65ec81b10887"],

Cell[TextData[{
 "Now, we can check if oceanography is in the ",
 StyleBox["fig1Tree", "Code"],
 " of academic subjects."
}], "Text",ExpressionUUID->"1c30c83b-c941-4989-b1a7-002d6abc270e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"binaryInsertion", "[", 
  RowBox[{"fig1Tree", ",", "\"\<Oc\>\""}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[106]:=",ExpressionUUID->"32ad7dc3-a082-4b41-8f4b-e7f53eb9c31d"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.738785767246573*^9},
 CellLabel->
  "Out[106]=",ExpressionUUID->"0a9259e9-7133-46a9-ad14-6bddb2d92962"]
}, Open  ]],

Cell[TextData[{
 "The function returned ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 " indicating that \[OpenCurlyDoubleQuote]",
 StyleBox["Oc",
  IgnoreSpellCheck->True],
 "\[CloseCurlyDoubleQuote] was not found in the tree. Displaying ",
 StyleBox["fig1Tree", "Code"],
 ", we see that it was added as a child of meteorology."
}], "Text",ExpressionUUID->"41bea1d2-c82d-4bc3-ba76-9865972e5d0a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"fig1Tree", ",", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Name\>\"", ",", "After"}], "]"}]}]}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[107]:=",ExpressionUUID->"f3fd904d-14e1-4f45-94de-9e1c61b768f6"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Math", "Psy", "Meteo", "Geog", "Chem", "Oc", "Phys", "Zoo", 
       "Geol"}, {{{1, 7}, {1, 4}, {7, 8}, {7, 3}, {4, 9}, {8, 2}, {4, 5}, {3, 
       6}}, Null}, {
      GraphLayout -> {
        "Dimension" -> 2, 
         "VertexLayout" -> {"LayeredEmbedding", "RootVertex" -> "Math"}}, 
       Properties -> {
        "Psy" -> {"order" -> 1}, "Geog" -> {"order" -> 1}, 
         "Oc" -> {"order" -> 2}, "Zoo" -> {"order" -> 2}, 
         "Math" -> {"order" -> 0}, "Chem" -> {"order" -> 1}, 
         "Phys" -> {"order" -> 2}, "Geol" -> {"order" -> 2}, 
         "Meteo" -> {"order" -> 1}}, VertexCoordinates -> {{
          Rational[1, 2], 1}, {
          Rational[13, 16], 0}, {
          Rational[5, 8], 
          Rational[1, 3]}, {
          Rational[1, 4], 
          Rational[2, 3]}, {
          Rational[1, 8], 
          Rational[1, 3]}, {
          Rational[11, 16], 0}, {
          Rational[3, 4], 
          Rational[2, 3]}, {
          Rational[7, 8], 
          Rational[1, 3]}, {
          Rational[3, 8], 
          Rational[1, 3]}}, VertexLabels -> {
         Placed["Name", After]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{0.5, 1.}, {0.25, 0.6666666666666666}}, {{0.5, 1.}, {0.75, 
         0.6666666666666666}}, {{0.625, 0.3333333333333333}, {0.6875, 0.}}, {{
         0.25, 0.6666666666666666}, {0.125, 0.3333333333333333}}, {{0.25, 
         0.6666666666666666}, {0.375, 0.3333333333333333}}, {{0.75, 
         0.6666666666666666}, {0.625, 0.3333333333333333}}, {{0.75, 
         0.6666666666666666}, {0.875, 0.3333333333333333}}, {{0.875, 
         0.3333333333333333}, {0.8125, 0.}}}, 0.01273]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0.5, 1.}, 0.01273], 
         InsetBox["\<\"Math\"\>", Offset[{2, 0}, {0.51273, 1.}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.8125, 0.}, 0.01273], 
         InsetBox["\<\"Psy\"\>", Offset[{2, 0}, {0.82523, 0.}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.625, 0.3333333333333333}, 0.01273], 
         InsetBox["\<\"Meteo\"\>", 
          Offset[{2, 0}, {0.63773, 0.3333333333333333}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.25, 0.6666666666666666}, 0.01273], 
         InsetBox["\<\"Geog\"\>", 
          Offset[{2, 0}, {0.26273, 0.6666666666666666}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.125, 0.3333333333333333}, 0.01273], 
         InsetBox["\<\"Chem\"\>", 
          Offset[{2, 0}, {0.13773, 0.3333333333333333}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.6875, 0.}, 0.01273], 
         InsetBox["\<\"Oc\"\>", Offset[{2, 0}, {0.70023, 0.}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.75, 0.6666666666666666}, 0.01273], 
         InsetBox["\<\"Phys\"\>", 
          Offset[{2, 0}, {0.76273, 0.6666666666666666}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.875, 0.3333333333333333}, 0.01273], 
         InsetBox["\<\"Zoo\"\>", 
          Offset[{2, 0}, {0.88773, 0.3333333333333333}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.375, 0.3333333333333333}, 0.01273], 
         InsetBox["\<\"Geol\"\>", 
          Offset[{2, 0}, {0.38773, 0.3333333333333333}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785767318686*^9},
 CellLabel->
  "Out[107]=",ExpressionUUID->"7a057612-2f0f-45d0-80c8-566e6391d5ee"]
}, Open  ]],

Cell["\<\
On the other hand, zoology is already in the tree and so the tree is not \
modified.\
\>", "Text",ExpressionUUID->"2d7396fa-5271-4111-9b63-7a38cbd4fccb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"binaryInsertion", "[", 
  RowBox[{"fig1Tree", ",", "\"\<Zoo\>\""}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[108]:=",ExpressionUUID->"87d44f37-120a-4249-a186-6249ac30937e"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.738785767362999*^9},
 CellLabel->
  "Out[108]=",ExpressionUUID->"4c3b29b2-1e07-4c1e-af98-843fbf2576c2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"fig1Tree", ",", 
   RowBox[{"VertexLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{"\"\<Name\>\"", ",", "After"}], "]"}]}]}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[109]:=",ExpressionUUID->"05dd60f5-3e22-44fe-8eae-5980c9bbb30b"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Math", "Psy", "Meteo", "Geog", "Chem", "Oc", "Phys", "Zoo", 
       "Geol"}, {{{1, 7}, {1, 4}, {7, 8}, {7, 3}, {4, 9}, {8, 2}, {4, 5}, {3, 
       6}}, Null}, {
      GraphLayout -> {
        "Dimension" -> 2, 
         "VertexLayout" -> {"LayeredEmbedding", "RootVertex" -> "Math"}}, 
       Properties -> {
        "Psy" -> {"order" -> 1}, "Geog" -> {"order" -> 1}, 
         "Oc" -> {"order" -> 2}, "Zoo" -> {"order" -> 2}, 
         "Math" -> {"order" -> 0}, "Chem" -> {"order" -> 1}, 
         "Phys" -> {"order" -> 2}, "Geol" -> {"order" -> 2}, 
         "Meteo" -> {"order" -> 1}}, VertexCoordinates -> {{
          Rational[1, 2], 1}, {
          Rational[13, 16], 0}, {
          Rational[5, 8], 
          Rational[1, 3]}, {
          Rational[1, 4], 
          Rational[2, 3]}, {
          Rational[1, 8], 
          Rational[1, 3]}, {
          Rational[11, 16], 0}, {
          Rational[3, 4], 
          Rational[2, 3]}, {
          Rational[7, 8], 
          Rational[1, 3]}, {
          Rational[3, 8], 
          Rational[1, 3]}}, VertexLabels -> {
         Placed["Name", After]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{0.5, 1.}, {0.25, 0.6666666666666666}}, {{0.5, 1.}, {0.75, 
         0.6666666666666666}}, {{0.625, 0.3333333333333333}, {0.6875, 0.}}, {{
         0.25, 0.6666666666666666}, {0.125, 0.3333333333333333}}, {{0.25, 
         0.6666666666666666}, {0.375, 0.3333333333333333}}, {{0.75, 
         0.6666666666666666}, {0.625, 0.3333333333333333}}, {{0.75, 
         0.6666666666666666}, {0.875, 0.3333333333333333}}, {{0.875, 
         0.3333333333333333}, {0.8125, 0.}}}, 0.01273]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0.5, 1.}, 0.01273], 
         InsetBox["\<\"Math\"\>", Offset[{2, 0}, {0.51273, 1.}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.8125, 0.}, 0.01273], 
         InsetBox["\<\"Psy\"\>", Offset[{2, 0}, {0.82523, 0.}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.625, 0.3333333333333333}, 0.01273], 
         InsetBox["\<\"Meteo\"\>", 
          Offset[{2, 0}, {0.63773, 0.3333333333333333}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.25, 0.6666666666666666}, 0.01273], 
         InsetBox["\<\"Geog\"\>", 
          Offset[{2, 0}, {0.26273, 0.6666666666666666}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.125, 0.3333333333333333}, 0.01273], 
         InsetBox["\<\"Chem\"\>", 
          Offset[{2, 0}, {0.13773, 0.3333333333333333}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.6875, 0.}, 0.01273], 
         InsetBox["\<\"Oc\"\>", Offset[{2, 0}, {0.70023, 0.}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.75, 0.6666666666666666}, 0.01273], 
         InsetBox["\<\"Phys\"\>", 
          Offset[{2, 0}, {0.76273, 0.6666666666666666}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.875, 0.3333333333333333}, 0.01273], 
         InsetBox["\<\"Zoo\"\>", 
          Offset[{2, 0}, {0.88773, 0.3333333333333333}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.375, 0.3333333333333333}, 0.01273], 
         InsetBox["\<\"Geol\"\>", 
          Offset[{2, 0}, {0.38773, 0.3333333333333333}], ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7387857674394207`*^9},
 CellLabel->
  "Out[109]=",ExpressionUUID->"f956e042-317c-4c1d-a48b-080d71ade042"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Constructing a Binary Search Tree from a List", "Subsubsection",ExpressionUUID->"b80cdc74-92b6-4d06-adcf-46a900203c8d"],

Cell[TextData[{
 "To conclude our discussion of binary search trees, we will create a \
function that takes a list of values and successively uses the ",
 StyleBox["binaryInsertion", "Code"],
 " function to create a binary search tree for the given list."
}], "Text",ExpressionUUID->"3adc7651-377e-4e69-8727-502589e65a9f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"makeBST", "[", 
   RowBox[{"L_List", ",", "opts___"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"T", ",", "v"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"T", "=", 
      RowBox[{"newBinaryTree", "[", 
       RowBox[{"L", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"binaryInsertion", "[", 
        RowBox[{"T", ",", 
         RowBox[{"L", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "2", ",", 
         RowBox[{"Length", "[", "L", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"T", "=", 
      RowBox[{"Graph", "[", 
       RowBox[{"T", ",", "opts"}], "]"}]}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[110]:=",ExpressionUUID->"9bd95993-32ce-42a2-b7fd-3dbfff2331ad"],

Cell["We use this to complete Exercise 1 from Section 11.2.", "Text",ExpressionUUID->"35cc4b35-238c-4e1a-8b1b-3cf59426f23b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exercise1", "=", 
  RowBox[{"makeBST", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<banana\>\"", ",", "\"\<peach\>\"", ",", "\"\<apple\>\"", ",", 
      "\"\<pear\>\"", ",", "\"\<coconut\>\"", ",", "\"\<mango\>\"", ",", 
      "\"\<papaya\>\""}], "}"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", 
     RowBox[{"Placed", "[", 
      RowBox[{"\"\<Name\>\"", ",", "After"}], "]"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[111]:=",ExpressionUUID->"92c283a2-3904-4f7c-bd5d-e2ec2d387d73"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "banana", "coconut", "apple", "papaya", "peach", "pear", "mango"}, {{{1,
        5}, {1, 3}, {5, 6}, {5, 2}, {2, 7}, {7, 4}}, Null}, {
      GraphLayout -> {
        "Dimension" -> 2, 
         "VertexLayout" -> {"LayeredEmbedding", "RootVertex" -> "banana"}}, 
       Properties -> {
        "coconut" -> {"order" -> 1}, "apple" -> {"order" -> 1}, 
         "peach" -> {"order" -> 2}, "banana" -> {"order" -> 0}, 
         "mango" -> {"order" -> 2}, "pear" -> {"order" -> 2}, 
         "papaya" -> {"order" -> 2}}, VertexCoordinates -> {{
          Rational[1, 2], 1}, {
          Rational[5, 8], 
          Rational[1, 2]}, {
          Rational[1, 4], 
          Rational[3, 4]}, {
          Rational[23, 32], 0}, {
          Rational[3, 4], 
          Rational[3, 4]}, {
          Rational[7, 8], 
          Rational[1, 2]}, {
          Rational[11, 16], 
          Rational[1, 4]}}, VertexLabels -> {
         Placed["Name", After]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{0.5, 1.}, {0.25, 0.75}}, {{0.5, 1.}, {0.75, 0.75}}, {{
         0.625, 0.5}, {0.6875, 0.25}}, {{0.75, 0.75}, {0.625, 0.5}}, {{0.75, 
         0.75}, {0.875, 0.5}}, {{0.6875, 0.25}, {0.71875, 0.}}}, 0.01273]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0.5, 1.}, 0.01273], 
         InsetBox["\<\"banana\"\>", Offset[{2, 0}, {0.51273, 1.}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.625, 0.5}, 0.01273], 
         InsetBox["\<\"coconut\"\>", Offset[{2, 0}, {0.63773, 0.5}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.25, 0.75}, 0.01273], 
         InsetBox["\<\"apple\"\>", Offset[{2, 0}, {0.26273, 0.75}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.71875, 0.}, 0.01273], 
         InsetBox["\<\"papaya\"\>", Offset[{2, 0}, {0.73148, 0.}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.75, 0.75}, 0.01273], 
         InsetBox["\<\"peach\"\>", Offset[{2, 0}, {0.76273, 0.75}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.875, 0.5}, 0.01273], 
         InsetBox["\<\"pear\"\>", Offset[{2, 0}, {0.88773, 0.5}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.6875, 0.25}, 0.01273], 
         InsetBox["\<\"mango\"\>", Offset[{2, 0}, {0.70023, 0.25}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785767605324*^9},
 CellLabel->
  "Out[111]=",ExpressionUUID->"284aa664-6284-464f-99d8-b5ee6696c29d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Huffman Coding", "Subsection",
 CellTags->"Section2c",ExpressionUUID->"41a523b3-034c-4e1a-8949-0065d06794f3"],

Cell["\<\
Huffman coding is a method for constructing an efficient prefix code for a \
set of characters. It is based on a greedy algorithm\[LongDash]at each step \
the vertices with the least weight are combined. It can be shown that Huffman \
coding produces optimal prefix codes. The algorithm that we will implement is \
described in Algorithm 2 of Section 11.2.\
\>", "Text",ExpressionUUID->"55ee6c83-2aa8-4566-b24b-431932fa05ad"],

Cell[CellGroupData[{

Cell["Creating the Initial Forest", "Subsubsection",ExpressionUUID->"b93b42de-3e7c-4088-b413-2cd53c6241b2"],

Cell["\<\
We begin with a list of characters (or other kinds of symbol) and their \
weights, or frequencies. The first step is to create the initial forest, \
which we implement as a list of trees. For each character, we create the \
binary tree consisting of a single vertex corresponding to the character.\
\>", "Text",ExpressionUUID->"c642d9c6-359b-44ea-8089-bbcf5fdf0c9a"],

Cell[TextData[{
 "We create a function, similar to ",
 StyleBox["newBinaryTree", "Code"],
 ", which, in addition to creating the binary tree, also assigns a \
\[OpenCurlyDoubleQuote]weight\[CloseCurlyDoubleQuote] attribute to the graph \
to store the weight of the character."
}], "Text",ExpressionUUID->"77214675-d8c2-4266-b5e1-2d39718e3814"],

Cell[BoxData[
 RowBox[{
  RowBox[{"newHTree", "[", 
   RowBox[{"s_", ",", "w_", ",", "opts___"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "T", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"T", "=", 
      RowBox[{"newBinaryTree", "[", "s", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"PropertyValue", "[", 
       RowBox[{"T", ",", "\"\<weight\>\""}], "]"}], "=", "w"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Graph", "[", 
      RowBox[{"T", ",", "opts"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[112]:=",ExpressionUUID->"d315f94f-98cd-4e3d-bcd8-1b3830a756d1"],

Cell["\<\
We now write a function to create the initial forest. We assume that the data \
is provided as a list of pairs consisting of the character and the weight.\
\>", "Text",ExpressionUUID->"381d5f47-1be4-4349-9483-a1262a2d9c87"],

Cell[BoxData[
 RowBox[{
  RowBox[{"createForest", "[", 
   RowBox[{"L_List", ",", "opts___"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"forest", "=", 
       RowBox[{"{", "}"}]}], ",", "M", ",", "v", ",", "w", ",", "G"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"v", ",", "w"}], "}"}], "=", "M"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"forest", ",", 
          RowBox[{"newHTree", "[", 
           RowBox[{"v", ",", "w", ",", "opts"}], "]"}]}], "]"}]}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"M", ",", "L"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "forest"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[113]:=",ExpressionUUID->"8c53adda-c8b0-4867-8477-def2e0107469"],

Cell[TextData[{
 "Using this function, we form the initial forest for Exercise 23 from \
Section 11.2. We use the ",
 StyleBox[ButtonBox["ImageSize",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ImageSize"], "FunctionLink"],
 " option to limit the width of the images. Ordinarily, you would simply \
suppress the output from this function."
}], "Text",ExpressionUUID->"2938b257-b4ee-4d54-b77f-3d3ad407a316"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ex23Forest", "=", 
  RowBox[{"createForest", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<a\>\"", ",", "0.20"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<b\>\"", ",", "0.10"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<c\>\"", ",", "0.15"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<d\>\"", ",", "0.25"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<e\>\"", ",", "0.30"}], "}"}]}], "}"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", 
     RowBox[{"Placed", "[", 
      RowBox[{"\"\<Name\>\"", ",", "Above"}], "]"}]}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "50"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[114]:=",ExpressionUUID->"7427ca0f-c555-4542-8851-e6abfb54f796"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{"a"}, {}, {
        GraphLayout -> {
          "Dimension" -> 2, 
           "VertexLayout" -> {"LayeredEmbedding", "RootVertex" -> "a"}}, 
         ImageSize -> 50, 
         Properties -> {
          "a" -> {"order" -> 0}, "GraphProperties" -> {"weight" -> 0.2}}, 
         VertexCoordinates -> {{
            Rational[1, 2], 1}}, VertexLabels -> {
           Placed["Name", Above]}}]]}, 
      TagBox[GraphicsGroupBox[{{}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[{0.5, 1.}, 0.004014598540145964], 
          InsetBox["\<\"a\"\>", Offset[{0, 2}, {0.5, 1.004014598540146}], 
           ImageScaled[{0.5, 0}],
           BaseStyle->"Graphics"]}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->50,
    PlotRangePadding->0.1], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{"b"}, {}, {
        GraphLayout -> {
          "Dimension" -> 2, 
           "VertexLayout" -> {"LayeredEmbedding", "RootVertex" -> "b"}}, 
         ImageSize -> 50, 
         Properties -> {
          "b" -> {"order" -> 0}, "GraphProperties" -> {"weight" -> 0.1}}, 
         VertexCoordinates -> {{
            Rational[1, 2], 1}}, VertexLabels -> {
           Placed["Name", Above]}}]]}, 
      TagBox[GraphicsGroupBox[{{}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[{0.5, 1.}, 0.004014598540145964], 
          InsetBox["\<\"b\"\>", Offset[{0, 2}, {0.5, 1.004014598540146}], 
           ImageScaled[{0.5, 0}],
           BaseStyle->"Graphics"]}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->50,
    PlotRangePadding->0.1], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{"c"}, {}, {
        GraphLayout -> {
          "Dimension" -> 2, 
           "VertexLayout" -> {"LayeredEmbedding", "RootVertex" -> "c"}}, 
         ImageSize -> 50, 
         Properties -> {
          "c" -> {"order" -> 0}, "GraphProperties" -> {"weight" -> 0.15}}, 
         VertexCoordinates -> {{
            Rational[1, 2], 1}}, VertexLabels -> {
           Placed["Name", Above]}}]]}, 
      TagBox[GraphicsGroupBox[{{}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[{0.5, 1.}, 0.004014598540145964], 
          InsetBox["\<\"c\"\>", Offset[{0, 2}, {0.5, 1.004014598540146}], 
           ImageScaled[{0.5, 0}],
           BaseStyle->"Graphics"]}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->50,
    PlotRangePadding->0.1], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{"d"}, {}, {
        GraphLayout -> {
          "Dimension" -> 2, 
           "VertexLayout" -> {"LayeredEmbedding", "RootVertex" -> "d"}}, 
         ImageSize -> 50, 
         Properties -> {
          "d" -> {"order" -> 0}, "GraphProperties" -> {"weight" -> 0.25}}, 
         VertexCoordinates -> {{
            Rational[1, 2], 1}}, VertexLabels -> {
           Placed["Name", Above]}}]]}, 
      TagBox[GraphicsGroupBox[{{}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[{0.5, 1.}, 0.004014598540145964], 
          InsetBox["\<\"d\"\>", Offset[{0, 2}, {0.5, 1.004014598540146}], 
           ImageScaled[{0.5, 0}],
           BaseStyle->"Graphics"]}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->50,
    PlotRangePadding->0.1], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{"e"}, {}, {
        GraphLayout -> {
          "Dimension" -> 2, 
           "VertexLayout" -> {"LayeredEmbedding", "RootVertex" -> "e"}}, 
         ImageSize -> 50, 
         Properties -> {
          "GraphProperties" -> {"weight" -> 0.3}, "e" -> {"order" -> 0}}, 
         VertexCoordinates -> {{
            Rational[1, 2], 1}}, VertexLabels -> {
           Placed["Name", Above]}}]]}, 
      TagBox[GraphicsGroupBox[{{}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[{0.5, 1.}, 0.004014598540145964], 
          InsetBox["\<\"e\"\>", Offset[{0, 2}, {0.5, 1.004014598540146}], 
           ImageScaled[{0.5, 0}],
           BaseStyle->"Graphics"]}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->50,
    PlotRangePadding->0.1]}], "}"}]], "Output",
 CellChangeTimes->{3.738785767865265*^9},
 CellLabel->
  "Out[114]=",ExpressionUUID->"b8997997-ec17-40b3-a079-d77091b90e6a"]
}, Open  ]],

Cell["\<\
The main work of the Huffman coding algorithm is to determine the two members \
of the forest with the smallest weights. These two trees are then assembled \
into a single tree whose root is a new vertex and with the trees with the \
lowest weight and second lowest weight as the right and left subtrees of the \
root. The new tree\[CloseCurlyQuote]s weight is the sum of the weights of the \
two original trees.\
\>", "Text",ExpressionUUID->"76c061f6-c6ca-4c1b-904a-8e12f55da47f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sorting the Forest", "Subsubsection",ExpressionUUID->"981bfa05-a66d-4839-939c-fa94f22d2d7c"],

Cell[TextData[{
 "Recall that the ",
 StyleBox[ButtonBox["Sort",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sort"], "FunctionLink"],
 " function accepts an optional second argument, specifically, a function on \
two arguments that returns ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 " if the first argument precedes the second in the desired order. The \
following function will be of this kind, accepting two binary trees as input \
and comparing their weights:"
}], "Text",ExpressionUUID->"bff68173-a193-4292-8cb2-0924b12584dc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"compareTrees", "[", 
   RowBox[{
    RowBox[{"A_", "?", "binaryTreeQ"}], ",", 
    RowBox[{"B_", "?", "binaryTreeQ"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"a", "=", 
      RowBox[{"PropertyValue", "[", 
       RowBox[{"A", ",", "\"\<weight\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"b", "=", 
      RowBox[{"PropertyValue", "[", 
       RowBox[{"B", ",", "\"\<weight\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"a", "<", "b"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[115]:=",ExpressionUUID->"06105a6b-7e38-4c96-a15f-5fb1b49fdb55"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ex23Forest", "=", 
  RowBox[{"Sort", "[", 
   RowBox[{"ex23Forest", ",", "compareTrees"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[116]:=",ExpressionUUID->"d222d3d5-1bc2-457f-8867-15b4c5ecde05"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{"b"}, {}, {
        GraphLayout -> {
          "Dimension" -> 2, 
           "VertexLayout" -> {"LayeredEmbedding", "RootVertex" -> "b"}}, 
         ImageSize -> 50, 
         Properties -> {
          "b" -> {"order" -> 0}, "GraphProperties" -> {"weight" -> 0.1}}, 
         VertexCoordinates -> {{
            Rational[1, 2], 1}}, VertexLabels -> {
           Placed["Name", Above]}}]]}, 
      TagBox[GraphicsGroupBox[{{}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[{0.5, 1.}, 0.004014598540145964], 
          InsetBox["\<\"b\"\>", Offset[{0, 2}, {0.5, 1.004014598540146}], 
           ImageScaled[{0.5, 0}],
           BaseStyle->"Graphics"]}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->50,
    PlotRangePadding->0.1], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{"c"}, {}, {
        GraphLayout -> {
          "Dimension" -> 2, 
           "VertexLayout" -> {"LayeredEmbedding", "RootVertex" -> "c"}}, 
         ImageSize -> 50, 
         Properties -> {
          "c" -> {"order" -> 0}, "GraphProperties" -> {"weight" -> 0.15}}, 
         VertexCoordinates -> {{
            Rational[1, 2], 1}}, VertexLabels -> {
           Placed["Name", Above]}}]]}, 
      TagBox[GraphicsGroupBox[{{}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[{0.5, 1.}, 0.004014598540145964], 
          InsetBox["\<\"c\"\>", Offset[{0, 2}, {0.5, 1.004014598540146}], 
           ImageScaled[{0.5, 0}],
           BaseStyle->"Graphics"]}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->50,
    PlotRangePadding->0.1], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{"a"}, {}, {
        GraphLayout -> {
          "Dimension" -> 2, 
           "VertexLayout" -> {"LayeredEmbedding", "RootVertex" -> "a"}}, 
         ImageSize -> 50, 
         Properties -> {
          "a" -> {"order" -> 0}, "GraphProperties" -> {"weight" -> 0.2}}, 
         VertexCoordinates -> {{
            Rational[1, 2], 1}}, VertexLabels -> {
           Placed["Name", Above]}}]]}, 
      TagBox[GraphicsGroupBox[{{}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[{0.5, 1.}, 0.004014598540145964], 
          InsetBox["\<\"a\"\>", Offset[{0, 2}, {0.5, 1.004014598540146}], 
           ImageScaled[{0.5, 0}],
           BaseStyle->"Graphics"]}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->50,
    PlotRangePadding->0.1], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{"d"}, {}, {
        GraphLayout -> {
          "Dimension" -> 2, 
           "VertexLayout" -> {"LayeredEmbedding", "RootVertex" -> "d"}}, 
         ImageSize -> 50, 
         Properties -> {
          "d" -> {"order" -> 0}, "GraphProperties" -> {"weight" -> 0.25}}, 
         VertexCoordinates -> {{
            Rational[1, 2], 1}}, VertexLabels -> {
           Placed["Name", Above]}}]]}, 
      TagBox[GraphicsGroupBox[{{}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[{0.5, 1.}, 0.004014598540145964], 
          InsetBox["\<\"d\"\>", Offset[{0, 2}, {0.5, 1.004014598540146}], 
           ImageScaled[{0.5, 0}],
           BaseStyle->"Graphics"]}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->50,
    PlotRangePadding->0.1], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{"e"}, {}, {
        GraphLayout -> {
          "Dimension" -> 2, 
           "VertexLayout" -> {"LayeredEmbedding", "RootVertex" -> "e"}}, 
         ImageSize -> 50, 
         Properties -> {
          "GraphProperties" -> {"weight" -> 0.3}, "e" -> {"order" -> 0}}, 
         VertexCoordinates -> {{
            Rational[1, 2], 1}}, VertexLabels -> {
           Placed["Name", Above]}}]]}, 
      TagBox[GraphicsGroupBox[{{}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[{0.5, 1.}, 0.004014598540145964], 
          InsetBox["\<\"e\"\>", Offset[{0, 2}, {0.5, 1.004014598540146}], 
           ImageScaled[{0.5, 0}],
           BaseStyle->"Graphics"]}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None,
    ImageSize->50,
    PlotRangePadding->0.1]}], "}"}]], "Output",
 CellChangeTimes->{3.738785767932287*^9},
 CellLabel->
  "Out[116]=",ExpressionUUID->"90a8fc0c-ca27-4260-bf72-bbcbd6223ebe"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Combining Two Trees", "Subsubsection",ExpressionUUID->"393eab59-dfe7-4a5d-bb95-3a53ef323c85"],

Cell["\<\
Next, we need to take two binary trees and create a new binary tree with one \
tree as the left subtree of the new root and the other as the right subtree. \
This function will require three arguments: the name of the new root, the \
left subtree, and the right subtree.\
\>", "Text",ExpressionUUID->"1ef2815e-661d-41a2-a5bc-4785c511ce56"],

Cell["\<\
We create the new tree by: (1) combining the vertex lists of the original \
trees and adding the new vertex; (2) merging the two sets of edges of the \
original tress and adding two new edges linking the new root to the previous \
roots; (3) combining the associations representing the child orders from the \
original trees and then changing the values for the two original roots to \
reflect their new status as left and right children in the new tree; (4) \
creating the new tree; (5) copying the edge labels and assigning the new \
edges the labels 0 and 1; and (6) setting the \[OpenCurlyDoubleQuote]weight\
\[CloseCurlyDoubleQuote] attribute of the new tree to be the sum of the \
weights of the two original trees.\
\>", "Text",ExpressionUUID->"34f60075-3d28-443e-9dc8-c6dd9883b861"],

Cell[BoxData[
 RowBox[{
  RowBox[{"joinHTrees", "[", 
   RowBox[{"newR_", ",", 
    RowBox[{"A_", "?", "binaryTreeQ"}], ",", 
    RowBox[{"B_", "?", "binaryTreeQ"}], ",", "opts___"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "newT", ",", "newVerts", ",", "Aroot", ",", "Broot", ",", "newEdges", 
      ",", "newOrders", ",", "v", ",", "e", ",", "p", ",", "w"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newVerts", "=", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"{", "newR", "}"}], ",", 
        RowBox[{"VertexList", "[", "A", "]"}], ",", 
        RowBox[{"VertexList", "[", "B", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Aroot", "=", 
      RowBox[{"findRoot", "[", "A", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Broot", "=", 
      RowBox[{"findRoot", "[", "B", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newEdges", "=", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"EdgeList", "[", "A", "]"}], ",", 
        RowBox[{"EdgeList", "[", "B", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"DirectedEdge", "[", 
           RowBox[{"newR", ",", "Aroot"}], "]"}], ",", 
          RowBox[{"DirectedEdge", "[", 
           RowBox[{"newR", ",", "Broot"}], "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"newOrders", "=", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"orderAssociation", "[", "A", "]"}], ",", 
        RowBox[{"orderAssociation", "[", "B", "]"}], ",", 
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"newR", "\[Rule]", "0"}], ",", 
          RowBox[{"Aroot", "\[Rule]", "1"}], ",", 
          RowBox[{"Broot", "\[Rule]", "2"}]}], "|>"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"newT", "=", 
      RowBox[{"binaryTree", "[", 
       RowBox[{"newVerts", ",", "newEdges", ",", "newOrders", ",", "opts"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"PropertyValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"newT", ",", "e"}], "}"}], ",", "EdgeLabels"}], "]"}], "=", 
        RowBox[{"PropertyValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"A", ",", "e"}], "}"}], ",", "EdgeLabels"}], "]"}]}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"e", ",", 
         RowBox[{"EdgeList", "[", "A", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"PropertyValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"newT", ",", "e"}], "}"}], ",", "EdgeLabels"}], "]"}], "=", 
        RowBox[{"PropertyValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"B", ",", "e"}], "}"}], ",", "EdgeLabels"}], "]"}]}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"e", ",", 
         RowBox[{"EdgeList", "[", "B", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"PropertyValue", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"newT", ",", 
          RowBox[{"DirectedEdge", "[", 
           RowBox[{"newR", ",", "Aroot"}], "]"}]}], "}"}], ",", 
        "EdgeLabels"}], "]"}], "=", 
      RowBox[{"Placed", "[", 
       RowBox[{"0", ",", 
        RowBox[{"{", 
         RowBox[{".5", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"PropertyValue", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"newT", ",", 
          RowBox[{"DirectedEdge", "[", 
           RowBox[{"newR", ",", "Broot"}], "]"}]}], "}"}], ",", 
        "EdgeLabels"}], "]"}], "=", 
      RowBox[{"Placed", "[", 
       RowBox[{"1", ",", 
        RowBox[{"{", 
         RowBox[{".5", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"w", "=", 
      RowBox[{
       RowBox[{"PropertyValue", "[", 
        RowBox[{"A", ",", "\"\<weight\>\""}], "]"}], "+", 
       RowBox[{"PropertyValue", "[", 
        RowBox[{"B", ",", "\"\<weight\>\""}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"PropertyValue", "[", 
       RowBox[{"newT", ",", "\"\<weight\>\""}], "]"}], "=", "w"}], ";", 
     "\[IndentingNewLine]", "newT"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[117]:=",ExpressionUUID->"4b9b03b0-b70e-4663-834f-f8416fb5027c"],

Cell[TextData[{
 "For example, we join the first two graphs in our sorted ",
 StyleBox["ex23Forest", "Code"],
 "."
}], "Text",ExpressionUUID->"c9af0dd2-f901-493a-9b7e-d99baf40cd94"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exampleJoin", "=", 
  RowBox[{"joinHTrees", "[", 
   RowBox[{"\"\<newR\>\"", ",", 
    RowBox[{"ex23Forest", "[", 
     RowBox[{"[", "1", "]"}], "]"}], ",", 
    RowBox[{"ex23Forest", "[", 
     RowBox[{"[", "2", "]"}], "]"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[118]:=",ExpressionUUID->"acfc7013-64fe-485e-8cf9-7f85f9c4b7b4"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"newR", "b", "c"}, {{{1, 2}, {1, 3}}, Null}, {
      EdgeLabels -> {
        DirectedEdge["newR", "b"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["newR", "c"] -> Placed[1, {0.5, {-1, 0}}]}, 
       GraphLayout -> {"LayeredEmbedding", "RootVertex" -> "newR"}, ImageSize -> 
       100, Properties -> {
        "c" -> {"order" -> 2}, "newR" -> {"order" -> 0}, 
         "b" -> {"order" -> 1}, "GraphProperties" -> {"weight" -> 0.25}}, 
       VertexCoordinates -> {{
          Rational[1, 2], 1}, {
          Rational[1, 4], 0}, {
          Rational[3, 4], 0}}, VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[
        Medium], {ArrowBox[{{0.5, 1.}, {0.25, 0.}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.375, 0.5}], ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.5, 1.}, {0.75, 0.}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.625, 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0.5, 1.}, 0.01273], 
         InsetBox["\<\"newR\"\>", Offset[{2, 2}, {0.51273, 1.01273}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.25, 0.}, 0.01273], 
         InsetBox["\<\"b\"\>", Offset[{2, 2}, {0.26273, 0.01273}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.75, 0.}, 0.01273], 
         InsetBox["\<\"c\"\>", Offset[{2, 2}, {0.76273, 0.01273}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None,
  ImageSize->100]], "Output",
 CellChangeTimes->{3.7387857680523853`*^9},
 CellLabel->
  "Out[118]=",ExpressionUUID->"a0d4c07a-d7e4-4d4e-b040-82a0f377faef"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implementing the Main Function", "Subsubsection",ExpressionUUID->"46c3d903-f101-4ab3-9d73-bbfe6095be7b"],

Cell[TextData[{
 "We now have the major pieces of the Huffman algorithm assembled and we can \
write the ",
 StyleBox["huffmanCode", "Code"],
 " function. This function will accept as input the same list of \
character-weight pairs as the ",
 StyleBox["createForest", "Code"],
 " function did. The function\[CloseCurlyQuote]s first step is to create the \
forest ",
 StyleBox["F", "Code"],
 ". Then, we begin a ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop that continues as long as the list ",
 StyleBox["F", "Code"],
 " contains more than one element. Inside the loop, we first use the ",
 StyleBox["compareTrees", "Code"],
 " function to sort the forest in increasing order of weight. Then, we use \
the ",
 StyleBox["joinHTrees", "Code"],
 " function to join the first two trees in the forest and we add that new \
tree to the list, replacing the original two."
}], "Text",ExpressionUUID->"47fe520e-fef2-467c-ab69-e0b8533f9785"],

Cell[BoxData[
 RowBox[{
  RowBox[{"huffmanCode", "[", 
   RowBox[{"L_List", ",", "opts___"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"F", ",", "i", ",", "tempT"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"F", "=", 
      RowBox[{"createForest", "[", 
       RowBox[{"L", ",", "opts"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"i", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "F", "]"}], ">", "1"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"F", "=", 
         RowBox[{"Sort", "[", 
          RowBox[{"F", ",", "compareTrees"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"i", "++"}], ";", "\[IndentingNewLine]", 
        RowBox[{"tempT", "=", 
         RowBox[{"joinHTrees", "[", 
          RowBox[{
           RowBox[{"\"\<I\>\"", "<>", 
            RowBox[{"ToString", "[", "i", "]"}]}], ",", 
           RowBox[{"F", "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", 
           RowBox[{"F", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", "opts"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"F", "=", 
         RowBox[{"Append", "[", 
          RowBox[{
           RowBox[{"F", "[", 
            RowBox[{"[", 
             RowBox[{"3", ";;", 
              RowBox[{"-", "1"}]}], "]"}], "]"}], ",", "tempT"}], "]"}]}]}]}],
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"F", "[", 
      RowBox[{"[", "1", "]"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[119]:=",ExpressionUUID->"de416c6c-68fe-4417-b442-a0efbd263847"],

Cell[TextData[{
 "Note that we need a name for the new root when we join two trees. Since \
these will be the internal vertices of the final tree, we call them I1, I2, \
I3, etc. We keep a counter ",
 StyleBox["i", "Code"],
 " and use the string concatenation operator ",
 StyleBox[ButtonBox["StringJoin",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringJoin"], "FunctionLink"],
 " (",
 StyleBox["<>", "Code"],
 ") to create the names of the internal vertices."
}], "Text",ExpressionUUID->"1873edb7-0242-42ae-a5f1-1e7d80553bf1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ex23HCode", "=", 
  RowBox[{"huffmanCode", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<a\>\"", ",", "0.20"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<b\>\"", ",", "0.10"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<c\>\"", ",", "0.15"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<d\>\"", ",", "0.25"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<e\>\"", ",", "0.30"}], "}"}]}], "}"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", 
     RowBox[{"Placed", "[", 
      RowBox[{"\"\<Name\>\"", ",", "Below"}], "]"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[120]:=",ExpressionUUID->"ef777783-d02e-4f89-a4e0-76c53f18544f"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "I4", "I1", "c", "e", "I3", "b", "a", "I2", "d"}, {{{5, 4}, {5, 9}, {2, 
       3}, {2, 6}, {8, 2}, {8, 7}, {1, 5}, {1, 8}}, Null}, {
      EdgeLabels -> {
        DirectedEdge["I4", "I2"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I2", "a"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I3", "e"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I2", "I1"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I1", "b"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I4", "I3"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I3", "d"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I1", "c"] -> Placed[0, {0.5, {1, 0}}]}, 
       GraphLayout -> {"LayeredEmbedding", "RootVertex" -> "I4"}, 
       Properties -> {
        "I1" -> {"order" -> 1}, "a" -> {"order" -> 2}, "I3" -> {"order" -> 1},
          "c" -> {"order" -> 1}, "d" -> {"order" -> 2}, "b" -> {"order" -> 2},
          "I2" -> {"order" -> 2}, "GraphProperties" -> {"weight" -> 1.}, 
         "e" -> {"order" -> 1}, "I4" -> {"order" -> 0}}, 
       VertexCoordinates -> {{
          Rational[1, 2], 1}, {
          Rational[5, 8], 
          Rational[1, 3]}, {
          Rational[9, 16], 0}, {
          Rational[1, 8], 
          Rational[1, 3]}, {
          Rational[1, 4], 
          Rational[2, 3]}, {
          Rational[11, 16], 0}, {
          Rational[7, 8], 
          Rational[1, 3]}, {
          Rational[3, 4], 
          Rational[2, 3]}, {
          Rational[3, 8], 
          Rational[1, 3]}}, VertexLabels -> {
         Placed["Name", Below]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[
        Medium], {ArrowBox[{{0.5, 1.}, {0.25, 0.6666666666666666}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.375, 0.8333333333333333}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.5, 1.}, {0.75, 0.6666666666666666}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.625, 0.8333333333333333}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.625, 0.3333333333333333}, {0.5625, 0.}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.59375, 0.16666666666666666}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.625, 0.3333333333333333}, {0.6875, 0.}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.65625, 0.16666666666666666}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.25, 0.6666666666666666}, {0.125, 0.3333333333333333}}, 
          0.01273], InsetBox["0", Offset[{0, 2}, {0.1875, 0.5}], ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.25, 0.6666666666666666}, {0.375, 0.3333333333333333}}, 
          0.01273], InsetBox["1", Offset[{0, 2}, {0.3125, 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.75, 0.6666666666666666}, {0.625, 0.3333333333333333}}, 
          0.01273], InsetBox["0", Offset[{0, 2}, {0.6875, 0.5}], ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.75, 0.6666666666666666}, {0.875, 0.3333333333333333}}, 
          0.01273], InsetBox["1", Offset[{0, 2}, {0.8125, 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0.5, 1.}, 0.01273], 
         InsetBox["\<\"I4\"\>", Offset[{0, -2}, {0.5, 0.98727}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.625, 0.3333333333333333}, 0.01273], 
         InsetBox["\<\"I1\"\>", Offset[{0, -2}, {0.625, 0.3206033333333333}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.5625, 0.}, 0.01273], 
         InsetBox["\<\"c\"\>", Offset[{0, -2}, {0.5625, -0.01273}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.125, 0.3333333333333333}, 0.01273], 
         InsetBox["\<\"e\"\>", Offset[{0, -2}, {0.125, 0.3206033333333333}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.25, 0.6666666666666666}, 0.01273], 
         InsetBox["\<\"I3\"\>", Offset[{0, -2}, {0.25, 0.6539366666666666}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.6875, 0.}, 0.01273], 
         InsetBox["\<\"b\"\>", Offset[{0, -2}, {0.6875, -0.01273}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.875, 0.3333333333333333}, 0.01273], 
         InsetBox["\<\"a\"\>", Offset[{0, -2}, {0.875, 0.3206033333333333}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.75, 0.6666666666666666}, 0.01273], 
         InsetBox["\<\"I2\"\>", Offset[{0, -2}, {0.75, 0.6539366666666666}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.375, 0.3333333333333333}, 0.01273], 
         InsetBox["\<\"d\"\>", Offset[{0, -2}, {0.375, 0.3206033333333333}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785768255602*^9},
 CellLabel->
  "Out[120]=",ExpressionUUID->"7a3b1c46-82f5-4fef-a4cd-9f43cb84f89e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Encoding Strings Using the Huffman Code Tree", "Subsubsection",ExpressionUUID->"ec238ff5-a34a-47cd-b616-9a8d73944249"],

Cell[TextData[{
 "We conclude this section by writing a function to encode a string of \
characters using a given Huffman tree. Note that you can use ",
 StyleBox[ButtonBox["Characters",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Characters"], "FunctionLink"],
 " to decompose a string into a list of the individual letters. For example,"
}], "Text",ExpressionUUID->"d3276a1c-e3f1-4399-80eb-644a01819c85"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Characters", "[", "\"\<Hello\>\"", "]"}]], "Input",
 CellLabel->
  "In[121]:=",ExpressionUUID->"21c444bc-75a1-408f-a7b0-c961387067c2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"H\"\>", ",", "\<\"e\"\>", ",", "\<\"l\"\>", ",", "\<\"l\"\>", 
   ",", "\<\"o\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.738785768291789*^9},
 CellLabel->
  "Out[121]=",ExpressionUUID->"79af905d-78c1-48a7-a746-1c8889a796e2"]
}, Open  ]],

Cell[TextData[{
 "Since we encode a string by assembling the codes for individual characters, \
we start with a function for encoding a single character. We assemble the \
character\[CloseCurlyQuote]s code right to left. Beginning with the vertex \
corresponding to the desired character, we find that \
vertex\[CloseCurlyQuote]s order value. The last digit of the code is one less \
than the order, so that a left child corresponds to order value 1 and code \
digit ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]],ExpressionUUID->
  "89715b13-ce7f-4530-b6bc-14fe63019185"],
 " while a right child has order value 2 and code digit 1. The next rightmost \
digit is determined by the order value of the parent vertex. We continue \
until we reach the root. We use the ",
 StyleBox[ButtonBox["StringLength",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringLength"], "FunctionLink"],
 " function in this function to determine the length of the input string and \
ensure it contains only a single character."
}], "Text",ExpressionUUID->"a4d735db-d99a-485f-b667-86e7c2fc03e5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"encodeCharacter", "[", 
    RowBox[{
     RowBox[{"H_", "?", "binaryTreeQ"}], ",", "c_String"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"StringLength", "[", "c", "]"}], "\[Equal]", "1"}]}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"code", "=", "\"\<\>\""}], ",", "vertex", ",", "digit"}], "}"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"vertex", "=", "c"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"findParent", "[", 
         RowBox[{"H", ",", "vertex"}], "]"}], "=!=", "Null"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"digit", "=", 
         RowBox[{
          RowBox[{"PropertyValue", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"H", ",", "vertex"}], "}"}], ",", "\"\<order\>\""}], 
           "]"}], "-", "1"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"code", "=", 
         RowBox[{
          RowBox[{"ToString", "[", "digit", "]"}], "<>", "code"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"vertex", "=", 
         RowBox[{"findParent", "[", 
          RowBox[{"H", ",", "vertex"}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "code"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[122]:=",ExpressionUUID->"5e2fa09f-15a8-49b0-8829-24339721a903"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"encodeCharacter", "[", 
  RowBox[{"ex23HCode", ",", "\"\<c\>\""}], "]"}]], "Input",
 CellLabel->
  "In[123]:=",ExpressionUUID->"8dc14ee8-e690-4f8c-a3d5-688adf1342bf"],

Cell[BoxData["\<\"100\"\>"], "Output",
 CellChangeTimes->{3.738785768363253*^9},
 CellLabel->
  "Out[123]=",ExpressionUUID->"fdb756ff-4034-4083-b544-f422fc8154d8"]
}, Open  ]],

Cell["\<\
To encode a string, we encode each character and assemble the results. \
\>", "Text",ExpressionUUID->"08edca90-4c08-4076-a0f6-f055ade5fd99"],

Cell[BoxData[
 RowBox[{
  RowBox[{"encodeString", "[", 
   RowBox[{
    RowBox[{"H_", "?", "binaryTreeQ"}], ",", "S_String"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "char", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"StringJoin", "@", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"encodeCharacter", "[", 
        RowBox[{"H", ",", "char"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"char", ",", 
         RowBox[{"Characters", "[", "S", "]"}]}], "}"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[124]:=",ExpressionUUID->"aa233e26-b0a3-4d33-85cb-634e57b8be46"],

Cell["We use this to encode the word \[OpenCurlyDoubleQuote]added\
\[CloseCurlyDoubleQuote].", "Text",ExpressionUUID->"929410e5-147b-47c9-a197-\
75e6efe72688"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"encodeString", "[", 
  RowBox[{"ex23HCode", ",", "\"\<added\>\""}], "]"}]], "Input",
 CellLabel->
  "In[125]:=",ExpressionUUID->"1bfac435-e030-40a9-b1ac-878010a68fc5"],

Cell[BoxData["\<\"1101010001\"\>"], "Output",
 CellChangeTimes->{3.738785768462117*^9},
 CellLabel->
  "Out[125]=",ExpressionUUID->"c58d166c-0355-4dca-a57f-ab07bf32423c"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["11.3 Tree Traversal", "Section",
 CellTags->"Section3",ExpressionUUID->"2555ffbd-b4a7-44f1-afb4-8bf378fe8226"],

Cell[TextData[{
 "In this section, we show how to use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to carry out tree traversals. Recall that a tree traversal algorithm is a \
procedure for systematically visiting every vertex of an ordered rooted tree. \
We will provide procedures for three important tree traversal algorithms: \
preorder traversal, inorder traversal, and ",
 StyleBox["postorder",
  IgnoreSpellCheck->True],
 " traversal. We will then show how to use these traversal methods to produce \
the prefix, infix, and postfix notations for arithmetic expressions."
}], "Text",ExpressionUUID->"6ff2a509-df42-42ff-a83d-922d969b80bd"],

Cell[TextData[{
 "These tree traversal algorithms all require that the tree be rooted and \
ordered. Recall how we implemented ordered rooted trees in Section 1. A tree \
that satisfies ",
 StyleBox["orderedRootedTree", "Code"],
 " is a",
 " ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 " that is a rooted tree and with the additional restriction that each vertex \
has an \[OpenCurlyDoubleQuote]order\[CloseCurlyDoubleQuote] attribute."
}], "Text",ExpressionUUID->"6525d62c-3d57-4de9-8fdf-c1a4680b32f7"],

Cell[TextData[{
 "We illustrated in Section 1 how to use ",
 StyleBox[ButtonBox["Sort",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sort"], "FunctionLink"],
 " to sort lists of vertices based on the \[OpenCurlyDoubleQuote]order\
\[CloseCurlyDoubleQuote] attribute. This is done by giving ",
 StyleBox[ButtonBox["Sort",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sort"], "FunctionLink"],
 " a second argument, which is a pure ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " (",
 StyleBox["&", "Code"],
 ") that accesses and compares the \[OpenCurlyDoubleQuote]order\
\[CloseCurlyDoubleQuote] attribute of two vertices of the tree."
}], "Text",ExpressionUUID->"3995c163-8a96-48a8-b024-2731386ab629"],

Cell["\<\
To begin, we will create an ordered tree to use as an example as we explore \
the three traversal algorithms. This example is a reproduction of Figure 3 \
from Section 11.3.\
\>", "Text",ExpressionUUID->"5965bf1f-fd31-4c71-9d7e-fef543e2c4f4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fig3Tree", "=", 
  RowBox[{"orderedTree", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<b\>\""}], ",", 
      RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<c\>\""}], ",", 
      RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<d\>\""}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<e\>\""}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<f\>\""}], ",", 
      RowBox[{"\"\<d\>\"", "\[Rule]", "\"\<g\>\""}], ",", 
      RowBox[{"\"\<d\>\"", "\[Rule]", "\"\<h\>\""}], ",", 
      RowBox[{"\"\<d\>\"", "\[Rule]", "\"\<i\>\""}], ",", 
      RowBox[{"\"\<e\>\"", "\[Rule]", "\"\<j\>\""}], ",", 
      RowBox[{"\"\<e\>\"", "\[Rule]", "\"\<k\>\""}], ",", 
      RowBox[{"\"\<g\>\"", "\[Rule]", "\"\<l\>\""}], ",", 
      RowBox[{"\"\<g\>\"", "\[Rule]", "\"\<m\>\""}], ",", 
      RowBox[{"\"\<k\>\"", "\[Rule]", "\"\<n\>\""}], ",", 
      RowBox[{"\"\<k\>\"", "\[Rule]", "\"\<o\>\""}], ",", 
      RowBox[{"\"\<k\>\"", "\[Rule]", "\"\<p\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<a\>\"", "\[Rule]", "0"}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "1"}], ",", 
      RowBox[{"\"\<c\>\"", "\[Rule]", "2"}], ",", 
      RowBox[{"\"\<d\>\"", "\[Rule]", "3"}], ",", 
      RowBox[{"\"\<e\>\"", "\[Rule]", "1"}], ",", 
      RowBox[{"\"\<f\>\"", "\[Rule]", "2"}], ",", 
      RowBox[{"\"\<g\>\"", "\[Rule]", "1"}], ",", 
      RowBox[{"\"\<h\>\"", "\[Rule]", "2"}], ",", 
      RowBox[{"\"\<i\>\"", "\[Rule]", "3"}], ",", 
      RowBox[{"\"\<j\>\"", "\[Rule]", "1"}], ",", 
      RowBox[{"\"\<k\>\"", "\[Rule]", "2"}], ",", 
      RowBox[{"\"\<l\>\"", "\[Rule]", "1"}], ",", 
      RowBox[{"\"\<m\>\"", "\[Rule]", "2"}], ",", 
      RowBox[{"\"\<n\>\"", "\[Rule]", "1"}], ",", 
      RowBox[{"\"\<o\>\"", "\[Rule]", "2"}], ",", 
      RowBox[{"\"\<p\>\"", "\[Rule]", "3"}]}], "|>"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", 
     RowBox[{"Placed", "[", 
      RowBox[{"\"\<Name\>\"", ",", "After"}], "]"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[126]:=",ExpressionUUID->"e4a24501-7be4-4d1e-b211-7419161ccaf8"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "a", "n", "l", "j", "g", "e", "b", "o", "m", "k", "h", "f", "c", "p", 
       "i", "d"}, {{{1, 7}, {1, 13}, {1, 16}, {7, 6}, {7, 12}, {16, 5}, {16, 
       11}, {16, 15}, {6, 4}, {6, 10}, {5, 3}, {5, 9}, {10, 2}, {10, 8}, {10, 
       14}}, Null}, {
      GraphLayout -> {"LayeredEmbedding", "RootVertex" -> "a"}, 
       Properties -> {
        "p" -> {"order" -> 3}, "o" -> {"order" -> 2}, "a" -> {"order" -> 0}, 
         "l" -> {"order" -> 1}, "k" -> {"order" -> 2}, "g" -> {"order" -> 1}, 
         "h" -> {"order" -> 2}, "c" -> {"order" -> 2}, "d" -> {"order" -> 3}, 
         "b" -> {"order" -> 1}, "n" -> {"order" -> 1}, "f" -> {"order" -> 2}, 
         "i" -> {"order" -> 3}, "e" -> {"order" -> 1}, "m" -> {"order" -> 2}, 
         "j" -> {"order" -> 1}}, VertexLabels -> {
         Placed["Name", After]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[CompressedData["
1:eJxTTMoPSmVmYGDgB2ImKO5X3up1aukfe14b/S1vyjgdIPRLe65c5XZDSWYH
7PI/ccr3hKyU5fdgc4DJC3JbP1x+5b89TB+M5oHagy4P0weTh4jfhMszQAEu
eZj7UeUR/sGlHiYPoT/jNI8BDeCyD788wh+EwgtdHsbHJQ+JDx64PADHm7N8

         "], 0.03426563702160573]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{1.790476123644314, 3.183068664256558}, 0.03426563702160573],
          InsetBox["\<\"a\"\>", 
          Offset[{2, 0}, {1.8247417606659198, 3.183068664256558}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.03426563702160573], 
         InsetBox["\<\"n\"\>", Offset[{2, 0}, {0.03426563702160573, 0.}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.591534332128279, 0.7957671660641394}, 
          0.03426563702160573], 
         InsetBox["\<\"l\"\>", 
          Offset[{2, 0}, {1.6257999691498848, 0.7957671660641394}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 0.7957671660641394}, 0.03426563702160573], 
         InsetBox["\<\"j\"\>", 
          Offset[{2, 0}, {0.03426563702160573, 0.7957671660641394}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.989417915160349, 1.591534332128279}, 0.03426563702160573],
          InsetBox["\<\"g\"\>", 
          Offset[{2, 0}, {2.023683552181955, 1.591534332128279}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.3978835830320698, 1.591534332128279}, 
          0.03426563702160573], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 0}, {0.4321492200536755, 1.591534332128279}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.7957671660641396, 2.3873014981924188}, 
          0.03426563702160573], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 0}, {0.8300328030857453, 2.3873014981924188}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.7957671660641396, 0.}, 0.03426563702160573], 
         InsetBox["\<\"o\"\>", Offset[{2, 0}, {0.8300328030857453, 0.}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.3873014981924188, 0.7957671660641394}, 
          0.03426563702160573], 
         InsetBox["\<\"m\"\>", 
          Offset[{2, 0}, {2.4215671352140244, 0.7957671660641394}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.7957671660641396, 0.7957671660641394}, 
          0.03426563702160573], 
         InsetBox["\<\"k\"\>", 
          Offset[{2, 0}, {0.8300328030857453, 0.7957671660641394}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.7851850812244887, 1.591534332128279}, 
          0.03426563702160573], 
         InsetBox["\<\"h\"\>", 
          Offset[{2, 0}, {2.8194507182460944, 1.591534332128279}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.1936507490962094, 1.591534332128279}, 
          0.03426563702160573], 
         InsetBox["\<\"f\"\>", 
          Offset[{2, 0}, {1.227916386117815, 1.591534332128279}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.591534332128279, 2.3873014981924188}, 
          0.03426563702160573], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 0}, {1.6257999691498848, 2.3873014981924188}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.591534332128279, 0.}, 0.03426563702160573], 
         InsetBox["\<\"p\"\>", Offset[{2, 0}, {1.6257999691498848, 0.}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{3.580952247288628, 1.591534332128279}, 0.03426563702160573],
          InsetBox["\<\"i\"\>", 
          Offset[{2, 0}, {3.615217884310234, 1.591534332128279}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.7851850812244887, 2.3873014981924188}, 
          0.03426563702160573], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 0}, {2.8194507182460944, 2.3873014981924188}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7387857685532007`*^9},
 CellLabel->
  "Out[126]=",ExpressionUUID->"d4d9439c-5e88-4c1a-a58e-03030a25deb7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Subtrees", "Subsection",
 CellTags->"Section3a",ExpressionUUID->"fb748272-f1bf-4571-b171-bfc376912762"],

Cell["\<\
Before implementing the traversal algorithms, we need a function that \
determines a subtree of a tree. In particular, we want an function that, \
given a tree and a vertex, will return the subtree with the given vertex as \
the root and that includes all of its descendants.\
\>", "Text",ExpressionUUID->"78c1f6eb-3e0f-4d9e-9c50-1692b1c4d77b"],

Cell[TextData[{
 "To produce the subtree, we will use the ",
 StyleBox[ButtonBox["Subgraph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subgraph"], "FunctionLink"],
 " function and then copy the \[OpenCurlyDoubleQuote]order\
\[CloseCurlyDoubleQuote] attributes to the new tree from the original. The \
vertices that we want included in the subgraph are the given vertex, which \
will be the root of the subtree, together with all of its descendants. We \
begin by creating a function that finds all of the descendants of the given \
vertex. This function can apply to any rooted tree."
}], "Text",ExpressionUUID->"9018d7de-1cec-4777-995f-ea0034466139"],

Cell[TextData[{
 "The approach is the same as we have used before. We begin with the given \
vertex and create a list consisting of its children, which we obtain with the \
",
 StyleBox["findChildren", "Code"],
 " function. We then begin a loop over the list of descendants. At each step, \
we add all of the children of the current vertex to the list, and then move \
on to the next vertex in the list. This continues until we reach the end of \
the list and there are no more children to add. (Note that this is referred \
to as a level-order traversal.)"
}], "Text",ExpressionUUID->"ae43d063-9427-4b0b-8ea4-72820ef98fd3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"descendants", "[", 
   RowBox[{
    RowBox[{"T_", "?", "rootedTreeQ"}], ",", "parent_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"dList", ",", "v", ",", "i"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"dList", "=", 
      RowBox[{"findChildren", "[", 
       RowBox[{"T", ",", "parent"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"i", "=", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"Length", "[", "dList", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"v", "=", 
         RowBox[{"dList", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"dList", "=", 
         RowBox[{"Join", "[", 
          RowBox[{"dList", ",", 
           RowBox[{"findChildren", "[", 
            RowBox[{"T", ",", "v"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"i", "++"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "dList"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[127]:=",ExpressionUUID->"38ad2020-d28f-4903-8922-24a5269de0df"],

Cell[TextData[{
 "Compute the descendants of ",
 Cell[BoxData[
  FormBox["e", TraditionalForm]],ExpressionUUID->
  "7cd572f9-72f6-4ffa-bcab-4e6504f6513e"],
 " in the example tree above."
}], "Text",ExpressionUUID->"0799c6d7-2f51-4320-a0b9-7e4e5d224f9e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"descendants", "[", 
  RowBox[{"fig3Tree", ",", "\"\<e\>\""}], "]"}]], "Input",
 CellLabel->
  "In[128]:=",ExpressionUUID->"54e6f468-ef72-4aea-bc81-c84500cca4ed"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"j\"\>", ",", "\<\"k\"\>", ",", "\<\"n\"\>", ",", "\<\"o\"\>", 
   ",", "\<\"p\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7387857686019*^9},
 CellLabel->
  "Out[128]=",ExpressionUUID->"f731ea6e-cd22-4964-98df-bc42efa09d5e"]
}, Open  ]],

Cell[TextData[{
 "To construct the subtree of an ordered rooted tree with a given vertex as \
its root, we need to: find the descendants of the given vertex; use the ",
 StyleBox[ButtonBox["Subgraph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subgraph"], "FunctionLink"],
 " function on the given vertex and all its descendants; copy the \
\[OpenCurlyDoubleQuote]order\[CloseCurlyDoubleQuote] attribute to the new \
tree; and set the \[OpenCurlyDoubleQuote]order\[CloseCurlyDoubleQuote] \
attribute of the root to 0."
}], "Text",ExpressionUUID->"d81f44f1-94b6-488d-bd5e-ddf4014a78e9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"subTree", "[", 
   RowBox[{
    RowBox[{"T_", "?", "orderedRootedTreeQ"}], ",", "newRoot_", ",", 
    "opts___"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"vList", ",", "subT", ",", "v"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"vList", "=", 
      RowBox[{"descendants", "[", 
       RowBox[{"T", ",", "newRoot"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"PrependTo", "[", 
      RowBox[{"vList", ",", "newRoot"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"subT", "=", 
      RowBox[{"Subgraph", "[", 
       RowBox[{"T", ",", "vList", ",", "opts"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"PropertyValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"subT", ",", "v"}], "}"}], ",", "\"\<order\>\""}], "]"}], 
        "=", 
        RowBox[{"PropertyValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"T", ",", "v"}], "}"}], ",", "\"\<order\>\""}], "]"}]}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"v", ",", "vList"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"PropertyValue", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"subT", ",", "newRoot"}], "}"}], ",", "\"\<order\>\""}], 
       "]"}], "=", "0"}], ";", "\[IndentingNewLine]", "subT"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[129]:=",ExpressionUUID->"f7525981-15bc-4316-897f-7f71f2bee82a"],

Cell[TextData[{
 "We check this function by finding the subtree with root ",
 Cell[BoxData[
  FormBox["e", TraditionalForm]],ExpressionUUID->
  "d9505f3e-e8f9-40e8-a2c3-db4cb8824703"],
 " and making sure it satisfies ",
 StyleBox["orderedRootedTreeQ", "Code"],
 "."
}], "Text",ExpressionUUID->"25cf4515-9a67-4dae-b5bd-e659b7cfa742"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"subExample", "=", 
  RowBox[{"subTree", "[", 
   RowBox[{"fig3Tree", ",", "\"\<e\>\"", ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[130]:=",ExpressionUUID->"7ae1b2ae-5935-4051-9787-60a59610eb7e"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "e", "j", "k", "n", "o", "p"}, {{{1, 2}, {1, 3}, {3, 4}, {3, 5}, {3, 
       6}}, Null}, {
      Properties -> {
        "p" -> {"order" -> 3}, "o" -> {"order" -> 2}, "k" -> {"order" -> 2}, 
         "n" -> {"order" -> 1}, "e" -> {"order" -> 0}, "j" -> {"order" -> 1}},
        VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{0.4082482904638631, 1.6329931618554523`}, {0., 
         0.8164965809277261}}, {{0.4082482904638631, 1.6329931618554523`}, {
         0.8164965809277261, 0.8164965809277261}}, {{0.8164965809277261, 
         0.8164965809277261}, {0., 0.}}, {{0.8164965809277261, 
         0.8164965809277261}, {0.8164965809277261, 0.}}, {{0.8164965809277261,
          0.8164965809277261}, {1.6329931618554523`, 0.}}}, 
         0.019562323618881772`]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{0.4082482904638631, 1.6329931618554523}, 
          0.019562323618881772], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.42781061408274484, 1.652555485474334}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 0.8164965809277261}, 0.019562323618881772], 
         InsetBox["\<\"j\"\>", 
          Offset[{2, 2}, {0.019562323618881772, 0.8360589045466079}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8164965809277261, 0.8164965809277261}, 
          0.019562323618881772], 
         InsetBox["\<\"k\"\>", 
          Offset[{2, 2}, {0.8360589045466079, 0.8360589045466079}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.019562323618881772], 
         InsetBox["\<\"n\"\>", 
          Offset[{2, 2}, {0.019562323618881772, 0.019562323618881772}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8164965809277261, 0.}, 0.019562323618881772], 
         InsetBox["\<\"o\"\>", 
          Offset[{2, 2}, {0.8360589045466079, 0.019562323618881772}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.6329931618554523, 0.}, 0.019562323618881772], 
         InsetBox["\<\"p\"\>", 
          Offset[{2, 2}, {1.652555485474334, 0.019562323618881772}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.73878576874025*^9},
 CellLabel->
  "Out[130]=",ExpressionUUID->"c3c7860c-62a3-4315-9556-4400b63afde8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"orderedRootedTreeQ", "[", "subExample", "]"}]], "Input",
 CellLabel->
  "In[131]:=",ExpressionUUID->"9bcfaf9a-d729-42ed-912f-f910c4ef43d3"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.738785768783403*^9},
 CellLabel->
  "Out[131]=",ExpressionUUID->"c3662cd9-c88d-41bd-81b2-d5155aadbb0e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Traversal Algorithms", "Subsection",
 CellTags->"Section3b",ExpressionUUID->"f33db0c0-b5a2-4e4e-85fb-3ac7e6200967"],

Cell["\<\
We now implement the three traversal algorithms described in Section 11.3 of \
the textbook. We begin with the preorder traversal algorithm, which is given \
as Algorithm 1 in the text.\
\>", "Text",ExpressionUUID->"f7dce3e5-4377-4102-b9e9-47201d0d9540"],

Cell[TextData[{
 "In the following, we use ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Sow",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sow"], "FunctionLink"],
 " in order to generate a list of the vertices in the order they are \
encountered. The result of ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " applied to an expression is a list whose first element is the result of \
the expression and whose second element is another list. This second list is \
itself a list of all the expressions that ",
 StyleBox[ButtonBox["Sow",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sow"], "FunctionLink"],
 " had been applied to within the ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " expression. For example,"
}], "Text",ExpressionUUID->"351e30fa-eede-41b7-927d-921f6d473093"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reap", "[", 
  RowBox[{
   RowBox[{"Sow", "[", "5", "]"}], ";", "12", ";", 
   RowBox[{"Sow", "[", 
    RowBox[{"1", "+", "1"}], "]"}], ";", 
   RowBox[{"Sow", "[", "33", "]"}], ";", "7"}], "]"}]], "Input",
 CellLabel->
  "In[132]:=",ExpressionUUID->"572affda-3399-43cc-a7dc-372db1dd8b29"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"5", ",", "2", ",", "33"}], "}"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.738785768846445*^9},
 CellLabel->
  "Out[132]=",ExpressionUUID->"bd9b0c03-ae56-4e50-ab97-9d917fa8cdcb"]
}, Open  ]],

Cell[TextData[{
 "The first element in the result is 7, since 7 is the result of the sequence \
of expressions inside the ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 ". The second element in the result is a list of a list containing 5, 2, and \
33, the values that were sown. The reason the second element of the main \
result is nested is because you can give ",
 StyleBox[ButtonBox["Sow",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sow"], "FunctionLink"],
 " a second argument to \[OpenCurlyDoubleQuote]tag\[CloseCurlyDoubleQuote] \
certain results, which then are assembled into separate sublists."
}], "Text",ExpressionUUID->"cafcd074-aaba-454d-ad17-4ebef5e8a59c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reap", "[", 
  RowBox[{
   RowBox[{"Sow", "[", 
    RowBox[{"5", ",", "\"\<number\>\""}], "]"}], ";", "12", ";", 
   RowBox[{"Sow", "[", 
    RowBox[{
     RowBox[{"1", "+", "1"}], ",", "\"\<sum\>\""}], "]"}], ";", 
   RowBox[{"Sow", "[", 
    RowBox[{"33", ",", "\"\<number\>\""}], "]"}], ";", "7"}], "]"}]], "Input",\

 CellLabel->
  "In[133]:=",ExpressionUUID->"cf034bf2-3ae8-4ec7-aafa-74ccf8fc7dc5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "33"}], "}"}], ",", 
     RowBox[{"{", "2", "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.738785768913361*^9},
 CellLabel->
  "Out[133]=",ExpressionUUID->"454269e7-24cc-487b-b3ef-b568dd97952c"]
}, Open  ]],

Cell[TextData[{
 "Here, we will not need the tagging feature. However, we will be using ",
 StyleBox[ButtonBox["Sow",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sow"], "FunctionLink"],
 " recursively; that is, within the ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " we will apply ",
 StyleBox[ButtonBox["Sow",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sow"], "FunctionLink"],
 " to a recursive call of the function. So it is the result of the recursive \
call to the function that will be sown. Therefore, before concluding the \
function, we want to extract the sown results, as illustrated below."
}], "Text",ExpressionUUID->"626e4dec-ae34-4131-9e82-a9c3754aeb5d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Reap", "[", 
   RowBox[{
    RowBox[{"Sow", "[", "5", "]"}], ";", "12", ";", 
    RowBox[{"Sow", "[", 
     RowBox[{"1", "+", "1"}], "]"}], ";", 
    RowBox[{"Sow", "[", "33", "]"}], ";", "7"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "1"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[134]:=",ExpressionUUID->"81850282-bc37-48a9-ba1d-04a23f7a91c7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "2", ",", "33"}], "}"}]], "Output",
 CellChangeTimes->{3.7387857689831247`*^9},
 CellLabel->
  "Out[134]=",ExpressionUUID->"0bd04bb2-1c1f-4dc0-9b81-d2690647e28d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Preorder", "Subsubsection",ExpressionUUID->"99020117-79c8-48d0-8879-0d4dafcf23b1"],

Cell["\<\
Given an ordered rooted tree, the preorder algorithm acts as follows. First, \
it prints the name of the root. Then, it calculates the children of the root \
and stores them in order. For each child, in order, the function recursively \
applies itself to the subtree with the given child as root.\
\>", "Text",ExpressionUUID->"1565f100-3835-4d41-8fa6-1398844e073e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"preorder", "[", 
   RowBox[{"T_", "?", "orderedRootedTreeQ"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"root", ",", "children", ",", "i", ",", "tempSubT"}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Reap", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"root", "=", 
        RowBox[{"findRoot", "[", "T", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Sow", "[", "root", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"children", "=", 
        RowBox[{"findChildren", "[", 
         RowBox[{"T", ",", "root"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"children", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{"children", ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"PropertyValue", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"T", ",", "#1"}], "}"}], ",", "\"\<order\>\""}], 
              "]"}], "<", 
             RowBox[{"PropertyValue", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"T", ",", "#2"}], "}"}], ",", "\"\<order\>\""}], 
              "]"}]}], ")"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "1"}], ",", 
         RowBox[{"i", "\[LessEqual]", 
          RowBox[{"Length", "[", "children", "]"}]}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"tempSubT", "=", 
           RowBox[{"subTree", "[", 
            RowBox[{"T", ",", 
             RowBox[{"children", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Sow", "[", 
           RowBox[{"preorder", "[", "tempSubT", "]"}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[135]:=",ExpressionUUID->"429085e0-9277-42e3-bd3b-2bc179ecd2a2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"preorder", "[", "fig3Tree", "]"}]], "Input",
 CellLabel->
  "In[136]:=",ExpressionUUID->"6e0cb6d3-fb3b-45a3-86a9-507a030fc64f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"e\"\>", ",", 
       RowBox[{"{", "\<\"j\"\>", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\<\"k\"\>", ",", 
         RowBox[{"{", "\<\"n\"\>", "}"}], ",", 
         RowBox[{"{", "\<\"o\"\>", "}"}], ",", 
         RowBox[{"{", "\<\"p\"\>", "}"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", "\<\"f\"\>", "}"}]}], "}"}], ",", 
   RowBox[{"{", "\<\"c\"\>", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"d\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"g\"\>", ",", 
       RowBox[{"{", "\<\"l\"\>", "}"}], ",", 
       RowBox[{"{", "\<\"m\"\>", "}"}]}], "}"}], ",", 
     RowBox[{"{", "\<\"h\"\>", "}"}], ",", 
     RowBox[{"{", "\<\"i\"\>", "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.738785769075775*^9},
 CellLabel->
  "Out[136]=",ExpressionUUID->"fc5ad311-e1b3-46d5-bffe-e5e9cd198213"]
}, Open  ]],

Cell[TextData[{
 "The nesting of the lists in this output is indicative of the subtree \
structure. You can confirm that this output is consistent with the preorder \
traversal demonstrated in Figure 4 of Section 11.3 of the textbook. Applying ",
 StyleBox[ButtonBox["Flatten",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Flatten"], "FunctionLink"],
 " will produce the list of vertices in the order they are visited."
}], "Text",ExpressionUUID->"ee49d853-70d8-424b-98e0-61e4ef092bbe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "@", 
  RowBox[{"preorder", "[", "fig3Tree", "]"}]}]], "Input",
 CellLabel->
  "In[137]:=",ExpressionUUID->"9e60c58b-e578-42ad-a8eb-7bdf8ebc7aad"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"e\"\>", ",", "\<\"j\"\>", 
   ",", "\<\"k\"\>", ",", "\<\"n\"\>", ",", "\<\"o\"\>", ",", "\<\"p\"\>", 
   ",", "\<\"f\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", ",", "\<\"g\"\>", 
   ",", "\<\"l\"\>", ",", "\<\"m\"\>", ",", "\<\"h\"\>", ",", "\<\"i\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7387857691452703`*^9},
 CellLabel->
  "Out[137]=",ExpressionUUID->"34a016ad-a261-48dc-9bb9-4940e449b976"]
}, Open  ]],

Cell["\<\
Finally, with this output, it is straightforward to create an animation that \
illustrates the traversal.\
\>", "Text",ExpressionUUID->"6e88c709-656c-4a76-ae8b-77139e9bca94"],

Cell[BoxData[
 RowBox[{
  RowBox[{"preorderAnimation", "[", 
   RowBox[{"T_", "?", "orderedRootedTreeQ"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "traversal", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"traversal", "=", 
      RowBox[{"Flatten", "@", 
       RowBox[{"preorder", "[", "T", "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Animate", "[", 
      RowBox[{
       RowBox[{"HighlightGraph", "[", 
        RowBox[{"T", ",", 
         RowBox[{"traversal", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "i"}], "]"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "\"\<step\>\""}], "}"}], ",", "0", ",", 
         
         RowBox[{"Length", "[", "traversal", "]"}], ",", "1"}], "}"}], ",", 
       RowBox[{"AnimationRunning", "\[Rule]", "False"}], ",", 
       RowBox[{"AnimationRepetitions", "\[Rule]", "1"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[138]:=",ExpressionUUID->"14b1880a-6376-4e2b-a312-0e5c3b2a5283"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"preorderAnimation", "[", "fig3Tree", "]"}]], "Input",
 CellLabel->
  "In[139]:=",ExpressionUUID->"77389cf6-d840-401a-9bc3-60c4a3f3a33d"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`i$$], 0, "step"}, 0, 16, 1}}, Typeset`size$$ = {
    360., {159., 163.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`i$4217$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`i$$, $CellContext`i$4217$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> HighlightGraph[
        Graph[{
         "a", "n", "l", "j", "g", "e", "b", "o", "m", "k", "h", "f", "c", "p",
           "i", "d"}, {{{1, 7}, {1, 13}, {1, 16}, {7, 6}, {7, 12}, {16, 5}, {
          16, 11}, {16, 15}, {6, 4}, {6, 10}, {5, 3}, {5, 9}, {10, 2}, {10, 
          8}, {10, 14}}, Null}, {
         GraphLayout -> {"LayeredEmbedding", "RootVertex" -> "a"}, 
          Properties -> {
           "p" -> {"order" -> 3}, "o" -> {"order" -> 2}, 
            "a" -> {"order" -> 0}, "l" -> {"order" -> 1}, 
            "k" -> {"order" -> 2}, "g" -> {"order" -> 1}, 
            "h" -> {"order" -> 2}, "c" -> {"order" -> 2}, 
            "d" -> {"order" -> 3}, "b" -> {"order" -> 1}, 
            "n" -> {"order" -> 1}, "f" -> {"order" -> 2}, 
            "i" -> {"order" -> 3}, "e" -> {"order" -> 1}, 
            "m" -> {"order" -> 2}, "j" -> {"order" -> 1}}, VertexLabels -> {
            Placed["Name", After]}}], 
        Part[$CellContext`traversal$4084, 
         Span[1, $CellContext`i$$]]], 
      "Specifications" :> {{{$CellContext`i$$, 0, "step"}, 0, 16, 1, 
         AnimationRunning -> False, AnimationRepetitions -> 1, 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
        "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
        True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
     ImageSizeCache->{403., {195., 200.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Animate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.7387857692460327`*^9},
 CellLabel->
  "Out[139]=",ExpressionUUID->"dddbda32-d90c-4b9c-be5b-072754964670"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Postorder",
 IgnoreSpellCheck->True]], "Subsubsection",ExpressionUUID->"0c9de215-854a-495f-89f6-a62362fef82f"],

Cell[TextData[{
 StyleBox["Postorder",
  IgnoreSpellCheck->True],
 " traversal, described in Algorithm 3 of the text, is very similar to \
preorder traversal. The only change needed in the code is that, instead of \
printing the root at the start of the algorithm, the vertex is printed after \
the loop is completed."
}], "Text",ExpressionUUID->"76203e55-0f04-4f8d-a07e-7e03bf6fa1ec"],

Cell[BoxData[
 RowBox[{
  RowBox[{"postorder", "[", 
   RowBox[{"T_", "?", "orderedRootedTreeQ"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"root", ",", "children", ",", "i", ",", "tempSubT"}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Reap", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"root", "=", 
        RowBox[{"findRoot", "[", "T", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"children", "=", 
        RowBox[{"findChildren", "[", 
         RowBox[{"T", ",", "root"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"children", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{"children", ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"PropertyValue", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"T", ",", "#1"}], "}"}], ",", "\"\<order\>\""}], 
              "]"}], "<", 
             RowBox[{"PropertyValue", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"T", ",", "#2"}], "}"}], ",", "\"\<order\>\""}], 
              "]"}]}], ")"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "1"}], ",", 
         RowBox[{"i", "\[LessEqual]", 
          RowBox[{"Length", "[", "children", "]"}]}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"tempSubT", "=", 
           RowBox[{"subTree", "[", 
            RowBox[{"T", ",", 
             RowBox[{"children", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Sow", "[", 
           RowBox[{"postorder", "[", "tempSubT", "]"}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Sow", "[", "root", "]"}]}], "\[IndentingNewLine]", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[140]:=",ExpressionUUID->"1671d6a9-6ca9-4e65-8ab7-8040a4b3d1ba"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"postorder", "[", "fig3Tree", "]"}]], "Input",
 CellLabel->
  "In[141]:=",ExpressionUUID->"93d454b3-4454-4898-b0bb-a2c53d7cafc0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "\<\"j\"\>", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "\<\"n\"\>", "}"}], ",", 
         RowBox[{"{", "\<\"o\"\>", "}"}], ",", 
         RowBox[{"{", "\<\"p\"\>", "}"}], ",", "\<\"k\"\>"}], "}"}], 
       ",", "\<\"e\"\>"}], "}"}], ",", 
     RowBox[{"{", "\<\"f\"\>", "}"}], ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", "\<\"c\"\>", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "\<\"l\"\>", "}"}], ",", 
       RowBox[{"{", "\<\"m\"\>", "}"}], ",", "\<\"g\"\>"}], "}"}], ",", 
     RowBox[{"{", "\<\"h\"\>", "}"}], ",", 
     RowBox[{"{", "\<\"i\"\>", "}"}], ",", "\<\"d\"\>"}], "}"}], 
   ",", "\<\"a\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7387857694338303`*^9},
 CellLabel->
  "Out[141]=",ExpressionUUID->"2a7b4865-85a7-4476-ab1d-21b61d0a666c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Inorder", "Subsubsection",ExpressionUUID->"683b7970-46d5-4680-8a28-d24560cef7a2"],

Cell["\<\
In inorder traversal, the algorithm first applies itself recursively to the \
first child of the vertex, then it prints the vertex, and then it applies \
itself to the remainder of the children, in order.\
\>", "Text",ExpressionUUID->"0681f321-a5fc-4eef-9938-b9b4325c27cf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"inorder", "[", 
   RowBox[{"T_", "?", "orderedRootedTreeQ"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"root", ",", "children", ",", "i", ",", "tempSubT"}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Reap", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"root", "=", 
        RowBox[{"findRoot", "[", "T", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"children", "=", 
        RowBox[{"findChildren", "[", 
         RowBox[{"T", ",", "root"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"children", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{"children", ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"PropertyValue", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"T", ",", "#1"}], "}"}], ",", "\"\<order\>\""}], 
              "]"}], "<", 
             RowBox[{"PropertyValue", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"T", ",", "#2"}], "}"}], ",", "\"\<order\>\""}], 
              "]"}]}], ")"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "children", "]"}], "\[NotEqual]", "0"}], ",",
          "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"tempSubT", "=", 
           RowBox[{"subTree", "[", 
            RowBox[{"T", ",", 
             RowBox[{"children", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Sow", "[", 
           RowBox[{"inorder", "[", "tempSubT", "]"}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Sow", "[", "root", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "2"}], ",", 
         RowBox[{"i", "\[LessEqual]", 
          RowBox[{"Length", "[", "children", "]"}]}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"tempSubT", "=", 
           RowBox[{"subTree", "[", 
            RowBox[{"T", ",", 
             RowBox[{"children", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Sow", "[", 
           RowBox[{"inorder", "[", "tempSubT", "]"}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[142]:=",ExpressionUUID->"b5f41a28-e606-42a1-b736-64071f333180"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"inorder", "[", "fig3Tree", "]"}]], "Input",
 CellLabel->
  "In[143]:=",ExpressionUUID->"ccdb2494-d6c2-4d5c-bbe7-ee0306a615c6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "\<\"j\"\>", "}"}], ",", "\<\"e\"\>", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "\<\"n\"\>", "}"}], ",", "\<\"k\"\>", ",", 
         RowBox[{"{", "\<\"o\"\>", "}"}], ",", 
         RowBox[{"{", "\<\"p\"\>", "}"}]}], "}"}]}], "}"}], ",", "\<\"b\"\>", 
     ",", 
     RowBox[{"{", "\<\"f\"\>", "}"}]}], "}"}], ",", "\<\"a\"\>", ",", 
   RowBox[{"{", "\<\"c\"\>", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "\<\"l\"\>", "}"}], ",", "\<\"g\"\>", ",", 
       RowBox[{"{", "\<\"m\"\>", "}"}]}], "}"}], ",", "\<\"d\"\>", ",", 
     RowBox[{"{", "\<\"h\"\>", "}"}], ",", 
     RowBox[{"{", "\<\"i\"\>", "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.738785769529482*^9},
 CellLabel->
  "Out[143]=",ExpressionUUID->"40a279ed-9786-4615-b7cb-ef8ef81fb747"]
}, Open  ]],

Cell[TextData[{
 "We leave it to the reader to create animations for inorder and ",
 StyleBox["postorder",
  IgnoreSpellCheck->True],
 " traversals."
}], "Text",ExpressionUUID->"6f4b8494-8fdb-4b19-a013-aa4a77358364"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Infix Notation", "Subsection",
 CellTags->"Section3c",ExpressionUUID->"01fe650b-7c3b-4bad-aa85-a075a2b1f711"],

Cell["\<\
In the remainder of this section, we discuss how to work with the infix, \
prefix, and postfix forms of arithmetic expressions, as described in Section \
11.3 of the text. First, we will show how to create a tree representation of \
an infix expression. Then, we will explore how to evaluate expressions from \
their postfix and prefix forms.\
\>", "Text",ExpressionUUID->"a82839e7-1721-48a7-9950-bad6c0e35575"],

Cell["\<\
Recall that infix notation is the usual notation for basic arithmetic and \
algebraic expressions. We will construct a function in the Wolfram Language \
that takes an infix expression and converts it into a tree representation. \
This tree representation can then be traversed using the traversals of the \
previous sections to form various arithmetic representation formats.\
\>", "Text",ExpressionUUID->"39eae82e-9002-4ccb-b393-e9be426a34c2"],

Cell["\<\
The algorithm we use to turn an arithmetic expression in infix notation into \
a tree is recursive. The basis case occurs when the expression consists of a \
single number or variable. In this case, the tree consists of a single vertex.\
\>", "Text",ExpressionUUID->"2a10dd41-1532-4d90-bbb8-587585122428"],

Cell["\<\
Otherwise, the expression consists of an operator, and two or more operands. \
In this case, we (1) apply the algorithm to the operands, and (2) combine the \
resulting trees with the operator as the common root. Implementing this will \
require some preliminary work. \
\>", "Text",ExpressionUUID->"bdb76b8a-22ce-4120-b75b-c86e06d919fc"],

Cell[TextData[{
 "First, we need to represent arithmetic expressions in the Wolfram Language \
in such a way that we can work with them and ensure that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will not evaluate them. This can be accomplished by applying ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " to the expression when entering it, as illustrated below."
}], "Text",ExpressionUUID->"c37e758e-e15c-415c-99bc-7fac7da4d058"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"2", "+", 
   RowBox[{"3", "*", "5"}]}], "]"}]], "Input",
 CellLabel->
  "In[144]:=",ExpressionUUID->"351b6da0-c481-4f5d-8d94-d383d744df7f"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"2", "+", 
   RowBox[{"3", " ", "5"}]}], "]"}]], "Output",
 CellChangeTimes->{3.738785769597959*^9},
 CellLabel->
  "Out[144]=",ExpressionUUID->"e8891954-ea70-4879-a20a-40085fca326f"]
}, Open  ]],

Cell[TextData[{
 "Observe that ",
 StyleBox[ButtonBox["FullForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FullForm"], "FunctionLink"],
 " reveals that associative operators, such as addition and multiplication, \
are treated as a single operation applied to more than two operands."
}], "Text",ExpressionUUID->"1c3eb19f-d87a-4d22-863f-b443617e2ead"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Hold", "[", 
   RowBox[{"2", "*", "3", "*", "4", "*", "5"}], "]"}], "//", 
  "FullForm"}]], "Input",
 CellLabel->
  "In[145]:=",ExpressionUUID->"5aa855ab-ab45-45ab-89df-962dd563c7b7"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Hold", "[", 
    RowBox[{"Times", "[", 
     RowBox[{"2", ",", "3", ",", "4", ",", "5"}], "]"}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.738785769663331*^9},
 CellLabel->
  "Out[145]//FullForm=",ExpressionUUID->"1854fe64-8658-4e95-9004-\
33893ebed607"]
}, Open  ]],

Cell[TextData[{
 "For this reason, our expression trees will not be binary. For example, the \
product above would be represented by a tree with root ",
 StyleBox["Times", "Code"],
 " and four children."
}], "Text",ExpressionUUID->"004a13a6-75d6-4353-8d54-6c6b61fcde90"],

Cell["\<\
Second, we will need to be able to distinguish the basis case from the \
recursive case.\
\>", "Text",ExpressionUUID->"252dda03-fca6-469f-88ee-05aef419e8ee"],

Cell[TextData[{
 "Third, the leaves in the tree will be numbers and variables and the \
internal vertices will be operations. In an expression like ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"3", "\[CenterDot]", "4"}], "+", 
    RowBox[{"7", "\[CenterDot]", 
     RowBox[{"(", 
      RowBox[{"3", "+", "x"}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "e23eb809-0806-45f7-8d34-3954c6671f51"],
 ", we have repetition among the operators and the operands (two 3\
\[CloseCurlyQuote]s, two additions, and two multiplications). We need to \
consider each of these to be a distinct object, since the Wolfram Language \
insists that the vertices in a graph be distinct. At the same time, we wish \
to display them with the same symbol in the tree."
}], "Text",ExpressionUUID->"ba7baa1a-4913-4a9a-91b5-2db95138a76c"],

Cell["\<\
Fourth, in the recursive step, we need to be able to identify the operator \
and separate the operands.\
\>", "Text",ExpressionUUID->"a537c6f9-ca3a-4a7e-8136-1f12bf840023"],

Cell["\<\
Fifth, we will need to implement a function to perform the combination of \
subtrees described in part (2) of the recursive step.\
\>", "Text",ExpressionUUID->"56dca077-9385-42c6-aa96-b914ad839540"],

Cell[CellGroupData[{

Cell["Distinguishing the Basis and Recursive Cases", "Subsubsection",ExpressionUUID->"3492f798-e537-40db-a452-777390fcba08"],

Cell["\<\
Any arithmetic expression is either a single integer or variable, or it is \
two or more expressions joined by an arithmetic operator. \
\>", "Text",ExpressionUUID->"3f464bb4-b467-47ed-9b5d-2af5b98990f9"],

Cell["\<\
We can determine which kind it is by testing the head of the expression.\
\>", "Text",ExpressionUUID->"31f9582a-9085-49b2-8b8a-67b8fd015152"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "[", "5", "]"}]], "Input",
 CellLabel->
  "In[146]:=",ExpressionUUID->"9704398f-75f5-41f1-9054-2c4d97d8d187"],

Cell[BoxData["Integer"], "Output",
 CellChangeTimes->{3.738785769754291*^9},
 CellLabel->
  "Out[146]=",ExpressionUUID->"13c98b42-ed77-4e61-9f96-6a58ec5fdea2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "[", "x", "]"}]], "Input",
 CellLabel->
  "In[147]:=",ExpressionUUID->"1bf12066-d4ab-4fbb-8174-076c121c97ce"],

Cell[BoxData["Symbol"], "Output",
 CellChangeTimes->{3.738785769813219*^9},
 CellLabel->
  "Out[147]=",ExpressionUUID->"ec800799-7b4f-4884-b05c-17624092a909"]
}, Open  ]],

Cell[TextData[{
 "However, observe that an expression such as ",
 Cell[BoxData[
  FormBox[
   RowBox[{"3", "+", "5"}], TraditionalForm]],ExpressionUUID->
  "0696da11-9755-4d0e-99b6-20dabf7bcfba"],
 " also reports having head ",
 StyleBox[ButtonBox["Integer",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Integer"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"560083f6-bf3c-4944-bc4f-cad05617f8f4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "[", 
  RowBox[{"3", "+", "5"}], "]"}]], "Input",
 CellLabel->
  "In[148]:=",ExpressionUUID->"966cf192-39e3-44a3-b1fe-bbbe96fcbbe8"],

Cell[BoxData["Integer"], "Output",
 CellChangeTimes->{3.738785769880126*^9},
 CellLabel->
  "Out[148]=",ExpressionUUID->"a9cb7563-679e-49d3-bdda-5fc12a54d4ad"]
}, Open  ]],

Cell[TextData[{
 "This is because ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " evaluates the arithmetic before apply the ",
 StyleBox[ButtonBox["Head",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Head"], "FunctionLink"],
 " function. We will be using ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " to prevent arithmetic evaluation and algebraic simplification. However, \
with ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " in place, ",
 StyleBox[ButtonBox["Head",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Head"], "FunctionLink"],
 " will identify the head of the expression as ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"774c6b7f-4c21-4960-a9aa-9379c5dca990"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "[", 
  RowBox[{"Hold", "[", 
   RowBox[{"3", "+", "5"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[149]:=",ExpressionUUID->"65c38cb7-8299-43eb-9275-93bf129bc347"],

Cell[BoxData["Hold"], "Output",
 CellChangeTimes->{3.7387857699477167`*^9},
 CellLabel->
  "Out[149]=",ExpressionUUID->"9f74d1c8-1993-4ba7-a822-101cd590b650"]
}, Open  ]],

Cell[TextData[{
 "To obtain the correct head of an expression such as ",
 Cell[BoxData[
  FormBox[
   RowBox[{"3", "+", "5"}], TraditionalForm]],ExpressionUUID->
  "a5b9d584-41e7-4300-83e1-37c19e4f5b52"],
 " while preventing evaluation, we use ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 "). Remember that 0 represents the head within a ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 "). "
}], "Text",ExpressionUUID->"8a6fafbf-32f0-4302-b915-de810c59fd90"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"5", "[", 
  RowBox[{"[", "0", "]"}], "]"}]], "Input",
 CellLabel->
  "In[150]:=",ExpressionUUID->"ecad80b8-91ba-47d8-b452-73e0f4debabd"],

Cell[BoxData["Integer"], "Output",
 CellChangeTimes->{3.738785770013625*^9},
 CellLabel->
  "Out[150]=",ExpressionUUID->"0f6e8cad-4f27-4d85-83a8-bf01e5aaaa3d"]
}, Open  ]],

Cell[TextData[{
 "For a held expression, ",
 StyleBox["[[1,0]]", "Code"],
 " will give the head of the expression within the ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 ". The 1 accesses the expression within the ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 ", and then then 0 refers to the head of that expression."
}], "Text",ExpressionUUID->"293635c4-24b0-485a-8d22-fe5b901c397f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Hold", "[", 
   RowBox[{"3", "+", "5"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "0"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[151]:=",ExpressionUUID->"51a13975-97ac-468b-8f50-4f274f272aa8"],

Cell[BoxData["Plus"], "Output",
 CellChangeTimes->{3.73878577008232*^9},
 CellLabel->
  "Out[151]=",ExpressionUUID->"40c8db3f-9ab9-4ba2-824c-b3241085a261"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Ensuring That Each Occurrence of an Object Is Considered Distinct\
\>", "Subsubsection",ExpressionUUID->"01bae281-e9ff-4b31-8e9c-61910ae80007"],

Cell[TextData[{
 "The tree associated to the expression ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"3", "\[CenterDot]", "4"}], "+", 
    RowBox[{"7", "\[CenterDot]", 
     RowBox[{"(", 
      RowBox[{"3", "+", "x"}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "daaec202-81b0-4fd6-a3b3-449789d41987"],
 " will have 9 vertices. The internal vertices, the operations, consist of \
two additions and two multiplications. The leaves, the numbers and variables, \
consist of ",
 Cell[BoxData[
  FormBox["4", TraditionalForm]],ExpressionUUID->
  "dad9a1d2-2ac5-4484-af7f-a027eac7ba36"],
 ", ",
 Cell[BoxData[
  FormBox["7", TraditionalForm]],ExpressionUUID->
  "d4679b1d-de4e-4e6f-903a-767070dafdf4"],
 ", ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "ffefa8fd-4a98-403b-8df1-b4dc5c3249e8"],
 ", and two ",
 Cell[BoxData[
  FormBox["3", TraditionalForm]],ExpressionUUID->
  "97ed9319-f6ba-41a0-85a2-10394f31a326"],
 "s."
}], "Text",ExpressionUUID->"8bd52783-27a5-4a51-bae3-21c3afb6f303"],

Cell[TextData[{
 "In a graph in the Wolfram Language, each vertex must be unique and distinct \
from all other vertices. In order to make ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " consider two 3s or two additions to be different, we will take advantage \
of the fact that a ",
 StyleBox[ButtonBox["Module",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Module"], "FunctionLink"],
 " structure attaches an integer to each variable name in order to ensure it \
is unique. The following reveals the internal symbol associated to a local \
variable:"
}], "Text",ExpressionUUID->"e3090132-8c4b-4d1d-9400-ae7ff0bf1134"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", "var", "}"}], ",", 
   RowBox[{"ToString", "[", "var", "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[152]:=",ExpressionUUID->"ac70e614-b29a-4a16-ac2e-383bb0911e32"],

Cell[BoxData["\<\"var$4534\"\>"], "Output",
 CellChangeTimes->{3.7387857701464567`*^9},
 CellLabel->
  "Out[152]=",ExpressionUUID->"2f3bc5a5-2fc0-4f1d-aaf6-df2ce5b10752"]
}, Open  ]],

Cell[TextData[{
 "To use this while building our expression tree, we will define an alternate \
version of ",
 StyleBox["newBinaryTree", "Code"],
 ", which was defined earlier in the chapter. This new function, ",
 StyleBox["newExpressionTree", "Code"],
 ", will declare a local variable and set it equal to the result of applying ",
 StyleBox[ButtonBox["ToString",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ToString"], "FunctionLink"],
 " to the variable. Since the local variable had not previously been \
assigned, this will store the internal representation of the variable. We \
then use that as the name of the vertex in a new tree. We set the ",
 StyleBox[ButtonBox["VertexLabels",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexLabels"], "FunctionLink"],
 " property in order to have the graph displayed with the elements of the \
expression rather than the internal name."
}], "Text",ExpressionUUID->"94ef0318-1fa1-44ea-ab11-5226f80c8584"],

Cell[BoxData[
 RowBox[{
  RowBox[{"newExpressionTree", "[", 
   RowBox[{"r_", ",", "opts___"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"T", ",", "v"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"v", "=", 
      RowBox[{"ToString", "[", "v", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"T", "=", 
      RowBox[{"orderedTree", "[", 
       RowBox[{
        RowBox[{"{", "v", "}"}], ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{"<|", 
         RowBox[{"v", "\[Rule]", "0"}], "|>"}], ",", "opts"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"PropertyValue", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"T", ",", "v"}], "}"}], ",", "VertexLabels"}], "]"}], "=", 
      RowBox[{"Placed", "[", 
       RowBox[{"r", ",", "Below"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "T"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[153]:=",ExpressionUUID->"988f91db-573a-4cba-acd5-815e96a9c604"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Identifying the Operator and Operands", "Subsubsection",
 PageBreakWithin->
  False,ExpressionUUID->"9dd8e52d-fea5-4fd1-a45f-59b95c0d0175"],

Cell["\<\
In the recursive case, we must separate a complex expression into its \
operator and operands. Consider the following example:\
\>", "Text",
 PageBreakAbove->False,
 PageBreakWithin->
  False,ExpressionUUID->"1e309c5c-c636-422d-96f2-b7e569cf0235"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exampleExpr", "=", 
  RowBox[{"Hold", "[", 
   RowBox[{
    RowBox[{"3", "*", "4"}], "+", 
    RowBox[{"7", "*", 
     RowBox[{"(", 
      RowBox[{"3", "+", "x"}], ")"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[154]:=",ExpressionUUID->"7abdb23d-a9a2-446b-9a5d-f7327862792c"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{"3", " ", "4"}], "+", 
   RowBox[{"7", " ", 
    RowBox[{"(", 
     RowBox[{"3", "+", "x"}], ")"}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.738785770242901*^9},
 CellLabel->
  "Out[154]=",ExpressionUUID->"aeb88da0-8393-41f1-afb6-24725a30cc90"]
}, Open  ]],

Cell[TextData[{
 "This expression, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"3", "\[CenterDot]", "4"}], "+", 
    RowBox[{"7", "\[CenterDot]", 
     RowBox[{"(", 
      RowBox[{"3", "+", "x"}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "90347a3e-5882-4196-a090-309a9e015c77"],
 " consists of the sum of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"3", "\[CenterDot]", "4"}], TraditionalForm]],ExpressionUUID->
  "71dee088-2009-4df4-87b6-99cec6d21091"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"7", "\[CenterDot]", 
    RowBox[{"(", 
     RowBox[{"3", "+", "x"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "12066d89-df3b-427b-8228-1aac7b5f6fdf"],
 ". We will obtain these two operands by applying ",
 StyleBox[ButtonBox["Extract",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Extract"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"8871c37c-80c3-4a17-b924-306390e94d41"],

Cell[TextData[{
 StyleBox[ButtonBox["Extract",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Extract"], "FunctionLink"],
 " is similar to ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") or ",
 StyleBox[ButtonBox["Take",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Take"], "FunctionLink"],
 " in that it returns a part of an expression. However, it allows an optional \
third argument to apply a head to the part of the expression before it is \
returned. This is important here because we need to prevent ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " from simplifying the operands."
}], "Text",ExpressionUUID->"e636855e-6d72-4ff2-8856-5c0a09394160"],

Cell[TextData[{
 "The arguments to ",
 StyleBox[ButtonBox["Extract",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Extract"], "FunctionLink"],
 " will be the expression, the part specification, and ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 ". To see what the part specification should be, look at the full form of ",
 StyleBox["exampleExpr", "Code"],
 "."
}], "Text",ExpressionUUID->"ee665d4b-1ee3-4e86-9949-6a136c16a568"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", "exampleExpr", "]"}]], "Input",
 CellLabel->
  "In[155]:=",ExpressionUUID->"21d8cd99-ef8b-4e85-a98b-7f021c72fc7a"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Hold", "[", 
    RowBox[{"Plus", "[", 
     RowBox[{
      RowBox[{"Times", "[", 
       RowBox[{"3", ",", "4"}], "]"}], ",", 
      RowBox[{"Times", "[", 
       RowBox[{"7", ",", 
        RowBox[{"Plus", "[", 
         RowBox[{"3", ",", "x"}], "]"}]}], "]"}]}], "]"}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.7387857703128366`*^9},
 CellLabel->
  "Out[155]//FullForm=",ExpressionUUID->"95528fd1-b449-4cb7-82e2-\
b9e9a63a766c"]
}, Open  ]],

Cell[TextData[{
 "We see that the expression is entirely enclosed in ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 ", so part specification ",
 StyleBox["{1}", "Code"],
 " will refer to the entire algebraic expression, which has head ",
 StyleBox[ButtonBox["Plus",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plus"], "FunctionLink"],
 ". The arguments of the top ",
 StyleBox[ButtonBox["Plus",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plus"], "FunctionLink"],
 " are then referenced as ",
 StyleBox["{1,1}", "Code"],
 " and ",
 StyleBox["{1,2}", "Code"],
 ". "
}], "Text",ExpressionUUID->"111b8444-8ab8-4be9-8a69-561d565aef97"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{"exampleExpr", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", "Hold"}], "]"}]], "Input",
 CellLabel->
  "In[156]:=",ExpressionUUID->"f25a801b-bb4a-4415-9863-35ecb6099dbc"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"3", " ", "4"}], "]"}]], "Output",
 CellChangeTimes->{3.738785770382773*^9},
 CellLabel->
  "Out[156]=",ExpressionUUID->"7b31d7d8-23fe-4d4c-97c9-ecef059a20b2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{"exampleExpr", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", "Hold"}], "]"}]], "Input",
 CellLabel->
  "In[157]:=",ExpressionUUID->"c45ae548-6ffb-4f12-a467-a08d38b1c1fe"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"7", " ", 
   RowBox[{"(", 
    RowBox[{"3", "+", "x"}], ")"}]}], "]"}]], "Output",
 CellChangeTimes->{3.738785770445462*^9},
 CellLabel->
  "Out[157]=",ExpressionUUID->"24be23fd-7c16-453b-bf05-5db848afe37e"]
}, Open  ]],

Cell["\<\
We can obtain a list of both operands by giving a list of part specifications \
as the second argument.\
\>", "Text",ExpressionUUID->"eb02b250-79e7-4216-b623-f79ec2b2f97b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{"exampleExpr", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", "Hold"}], "]"}]], "Input",\

 CellLabel->
  "In[158]:=",ExpressionUUID->"51bba57c-98b8-4ff8-a1ef-a37f57db1455"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Hold", "[", 
    RowBox[{"3", " ", "4"}], "]"}], ",", 
   RowBox[{"Hold", "[", 
    RowBox[{"7", " ", 
     RowBox[{"(", 
      RowBox[{"3", "+", "x"}], ")"}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.738785770512909*^9},
 CellLabel->
  "Out[158]=",ExpressionUUID->"4da94446-a932-4689-997c-8058c7a68311"]
}, Open  ]],

Cell["\<\
Since associative operations may have more than two operands, we need to \
determine the number of operands. Consider the example below.\
\>", "Text",ExpressionUUID->"53d6febd-df3e-48db-b68a-cb1d00b5e768"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exampleExpr2", "=", 
  RowBox[{"Hold", "[", 
   RowBox[{
    RowBox[{"5", "x"}], "+", "12", "+", "7"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[159]:=",ExpressionUUID->"3b04c3b7-c13b-4980-8e9d-0f273f7120f7"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{"5", " ", "x"}], "+", "12", "+", "7"}], "]"}]], "Output",
 CellChangeTimes->{3.738785770583934*^9},
 CellLabel->
  "Out[159]=",ExpressionUUID->"9b5d4fd7-f191-4331-a7aa-d20d48c23b44"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", "exampleExpr2", "]"}]], "Input",
 CellLabel->
  "In[160]:=",ExpressionUUID->"127a55b0-7870-4759-b0eb-54a6257d5fa0"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Hold", "[", 
    RowBox[{"Plus", "[", 
     RowBox[{
      RowBox[{"Times", "[", 
       RowBox[{"5", ",", "x"}], "]"}], ",", "12", ",", "7"}], "]"}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.738785770646035*^9},
 CellLabel->
  "Out[160]//FullForm=",ExpressionUUID->"9e30d334-7578-4bb4-9658-\
d088058a7f9e"]
}, Open  ]],

Cell[TextData[{
 "To determine the number of operands of the ",
 StyleBox[ButtonBox["Plus",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plus"], "FunctionLink"],
 ", we will replace the main operator with the ",
 StyleBox[ButtonBox["List",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/List"], "FunctionLink"],
 " head. Using the ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " operator at level 1 (",
 StyleBox["@@@", "Code"],
 ") will leave the ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " in place."
}], "Text",ExpressionUUID->"be9137c8-cff2-44ed-a629-ea494c2dcf6c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"List", "@@@", "exampleExpr2"}], "//", "FullForm"}]], "Input",
 CellLabel->
  "In[161]:=",ExpressionUUID->"413cd05a-6e2d-4024-af1b-f8aea6aeb3d3"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Hold", "[", 
    RowBox[{"List", "[", 
     RowBox[{
      RowBox[{"Times", "[", 
       RowBox[{"5", ",", "x"}], "]"}], ",", "12", ",", "7"}], "]"}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.7387857707126093`*^9},
 CellLabel->
  "Out[161]//FullForm=",ExpressionUUID->"4ac91ef9-407d-433c-888a-\
9ec3bca4f2ef"]
}, Open  ]],

Cell["\<\
We can then release the hold and determine the length of the list.\
\>", "Text",ExpressionUUID->"d6c5b27a-6358-4e7e-b2a4-53f936660b6f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"ReleaseHold", "[", 
   RowBox[{"List", "@@@", "exampleExpr2"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[162]:=",ExpressionUUID->"7abc47e4-83f2-4fd6-9043-103df553d98d"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.738785770812397*^9},
 CellLabel->
  "Out[162]=",ExpressionUUID->"6d925615-fd2f-4265-ab3c-d9a4a87f9792"]
}, Open  ]],

Cell[TextData[{
 "Which then helps us create the appropriate list of part specifications to \
use with ",
 StyleBox[ButtonBox["Extract",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Extract"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"9488c118-b3aa-4c79-8b1c-fdf76c362e1c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{"exampleExpr2", ",", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "i"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "3"}], "}"}]}], "]"}], ",", "Hold"}], "]"}]], "Input",\

 CellLabel->
  "In[163]:=",ExpressionUUID->"b7143973-f7aa-4019-ab59-dc0f3a2a257b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Hold", "[", 
    RowBox[{"5", " ", "x"}], "]"}], ",", 
   RowBox[{"Hold", "[", "12", "]"}], ",", 
   RowBox[{"Hold", "[", "7", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7387857708801613`*^9},
 CellLabel->
  "Out[163]=",ExpressionUUID->"e803bd63-56c2-47a2-a213-25c056f0893e"]
}, Open  ]],

Cell[TextData[{
 "Note that we can use ",
 StyleBox["{1,0}", "Code"],
 " to obtain the head of the expression, that is, the operator. This is \
equivalent to the use of ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") described above for the same purpose."
}], "Text",ExpressionUUID->"7cb9925f-3149-448f-b21e-d3e7a1ac9e03"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{"exampleExpr", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[164]:=",ExpressionUUID->"ebcaf882-3d10-44ce-aa99-027afe5cb5b8"],

Cell[BoxData["Plus"], "Output",
 CellChangeTimes->{3.73878577095081*^9},
 CellLabel->
  "Out[164]=",ExpressionUUID->"fc0cae56-6de4-4500-8fe5-e18e6d1d6a0d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exampleExpr", "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "0"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[165]:=",ExpressionUUID->"2226e595-79b8-4097-8419-82a60882df51"],

Cell[BoxData["Plus"], "Output",
 CellChangeTimes->{3.73878577101685*^9},
 CellLabel->
  "Out[165]=",ExpressionUUID->"ebebccd5-f0aa-4dac-9f4f-c05337a511f4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Combining Subtrees", "Subsubsection",ExpressionUUID->"06857684-9175-4830-9218-1f3a44d6512a"],

Cell[TextData[{
 "As part of Huffman coding in Section 2, we wrote a function, ",
 StyleBox["joinHTrees", "Code"],
 ", for joining two existing trees at a new root. We create a version of that \
function here."
}], "Text",ExpressionUUID->"7ce7210b-190a-4937-b55d-72b46391c598"],

Cell["\<\
The most important difference in this version of the function is that it \
joins ordered trees that are not necessary binary. As a result, it needs to \
be able to accept more than two trees, so the second argument will be a list \
of ordered rooted trees. The other differences between this and the earlier \
function amount to looping over the elements of the list of trees, rather \
than acting on the two arguments separately. \
\>", "Text",ExpressionUUID->"ead7dcae-91a1-472d-b436-460016ce176b"],

Cell[TextData[{
 "One element of this function worth commenting on is the use of ",
 StyleBox[ButtonBox["Sequence",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sequence"], "FunctionLink"],
 " together with the ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " (",
 StyleBox["@@", "Code"],
 ") operator. The ",
 StyleBox[ButtonBox["Sequence",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sequence"], "FunctionLink"],
 " head refers to a comma-separated sequence of expressions not contained in \
a ",
 StyleBox[ButtonBox["List",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/List"], "FunctionLink"],
 " or other structure. In this function, the goal is to strip away the outer ",
 StyleBox[ButtonBox["List",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/List"], "FunctionLink"],
 " from the the result of ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " so that elements produced by the ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " can be combined with other objects within a ",
 StyleBox[ButtonBox["Join",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Join"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"03c591a2-0652-4997-8a75-0050e577360c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"joinTrees", "[", 
   RowBox[{"newR_", ",", 
    RowBox[{"trees", ":", 
     RowBox[{"{", 
      RowBox[{"__", "?", "orderedRootedTreeQ"}], "}"}]}], ",", "opts___"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "newRI", ",", "A", ",", "newVerts", ",", "oldRoots", ",", "Aroot", ",", 
      "newEdges", ",", "newOrders", ",", "newT", ",", "v", ",", "e", ",", "p",
       ",", "w"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newRI", "=", 
      RowBox[{"ToString", "[", "newRI", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newVerts", "=", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"{", "newRI", "}"}], ",", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"VertexList", "[", "A", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"A", ",", "trees"}], "}"}]}], "]"}]}], ",", "1"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"oldRoots", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"findRoot", "[", "A", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"A", ",", "trees"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"newEdges", "=", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"Sequence", "@@", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"EdgeList", "[", "A", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"A", ",", "trees"}], "}"}]}], "]"}]}], ",", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"DirectedEdge", "[", 
           RowBox[{"newRI", ",", "Aroot"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"Aroot", ",", "oldRoots"}], "}"}]}], "]"}]}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"newOrders", "=", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"Sequence", "@@", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"orderAssociation", "[", "A", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"A", ",", "trees"}], "}"}]}], "]"}], ",", "1"}], 
          "]"}]}], ",", 
        RowBox[{"Association", "@@", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"oldRoots", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "\[Rule]", "i"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "oldRoots", "]"}]}], "}"}]}], "]"}]}], 
        ",", 
        RowBox[{"<|", 
         RowBox[{"newRI", "\[Rule]", "0"}], "|>"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"newT", "=", 
      RowBox[{"orderedTree", "[", 
       RowBox[{"newVerts", ",", "newEdges", ",", "newOrders", ",", "opts"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"PropertyValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"newT", ",", "v"}], "}"}], ",", "VertexLabels"}], "]"}], 
        "=", 
        RowBox[{"PropertyValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"A", ",", "v"}], "}"}], ",", "VertexLabels"}], "]"}]}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"A", ",", "trees"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"v", ",", 
         RowBox[{"VertexList", "[", "A", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"PropertyValue", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"newT", ",", "newRI"}], "}"}], ",", "VertexLabels"}], "]"}], 
      "=", 
      RowBox[{"Placed", "[", 
       RowBox[{"newR", ",", "After"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "newT"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[166]:=",ExpressionUUID->"08a5bbcf-626f-4d96-87ae-98718c41ed23"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Main Function", "Subsubsection",ExpressionUUID->"81916242-96be-40ad-bd1c-d2cdeb515ec8"],

Cell[TextData[{
 "With ",
 StyleBox["joinTrees", "Code"],
 " and ",
 StyleBox["newExpressionTree", "Code"],
 " prepared, we are ready to write the function for turning infix expressions \
into binary trees."
}], "Text",ExpressionUUID->"7d975209-dd2d-4458-ade6-568aa96f1cae"],

Cell[TextData[{
 "The function accepts a single argument, ",
 StyleBox["expr", "Code"],
 ", the expression. We will give the function the ",
 StyleBox[ButtonBox["HoldFirst",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldFirst"], "FunctionLink"],
 " attribute, so that the expression will be held without our having to \
explicitly type ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " when executing the function. This holds the argument only until it is \
first evaluated, so we must immediately place a more permanent ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " on it, provided it was not already explicitly held, and assign it to ",
 StyleBox["e", "Code"],
 "."
}], "Text",ExpressionUUID->"e1478fad-6ccc-49ec-81f3-8c216072dc69"],

Cell[TextData[{
 "We first test the type of ",
 StyleBox["e", "Code"],
 ". If it is an integer or a symbol, then we use ",
 StyleBox["newExpressionTree", "Code"],
 " to create a new binary tree with ",
 StyleBox["e", "Code"],
 " as the only vertex. "
}], "Text",ExpressionUUID->"7de78ec0-053b-4363-ba22-267a7e4670d2"],

Cell[TextData[{
 "Otherwise, we are in the recursive case. We use ",
 StyleBox[ButtonBox["Extract",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Extract"], "FunctionLink"],
 " to determine the operands and the operator. After recursive calls to the \
function to create the trees for the operands, the subtrees are joined at the \
operator into the result tree."
}], "Text",ExpressionUUID->"dbafe0be-1356-4a0c-b681-3063557d6eea"],

Cell["Here is the function.", "Text",ExpressionUUID->"51d79e06-9668-40c6-9c98-3a62d19e9bbe"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"expressionTree", ",", "HoldFirst"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expressionTree", "[", 
   RowBox[{"expr_", ",", "opts___"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "e", ",", "operator", ",", "len", ",", "operands", ",", "trees", ",", 
      "op", ",", "result"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"expr", "[", 
         RowBox[{"[", "0", "]"}], "]"}], "===", "Hold"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"e", "=", "expr"}], ",", "\[IndentingNewLine]", 
       RowBox[{"e", "=", 
        RowBox[{"Hold", "[", "expr", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"e", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "0"}], "]"}], "]"}], "===", "Integer"}], "||", 
        RowBox[{
         RowBox[{"e", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "0"}], "]"}], "]"}], "===", "Symbol"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"result", "=", 
        RowBox[{"newExpressionTree", "[", 
         RowBox[{
          RowBox[{"ReleaseHold", "[", "e", "]"}], ",", "opts"}], "]"}]}], ",",
        "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"operator", "=", 
         RowBox[{"Extract", "[", 
          RowBox[{"e", ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"len", "=", 
         RowBox[{"Length", "[", 
          RowBox[{"ReleaseHold", "[", 
           RowBox[{"List", "@@@", "e"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"operands", "=", 
         RowBox[{"Extract", "[", 
          RowBox[{"e", ",", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", "i"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "len"}], "}"}]}], "]"}], ",", "Hold"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"trees", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"expressionTree", "[", "op", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"op", ",", "operands"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"result", "=", 
         RowBox[{"joinTrees", "[", 
          RowBox[{"operator", ",", "trees", ",", "opts"}], "]"}]}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "result"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[167]:=",ExpressionUUID->"90d58f7c-2171-4d15-a588-d5177acbcdac"],

Cell["We test the function on the example expression.", "Text",ExpressionUUID->"77838c1a-f4c8-44ea-a606-04ff369b0bb6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exampleTree", "=", 
  RowBox[{"expressionTree", "[", 
   RowBox[{
    RowBox[{"3", "*", "4"}], "+", 
    RowBox[{"7", "*", 
     RowBox[{"(", 
      RowBox[{"3", "+", "x"}], ")"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[169]:=",ExpressionUUID->"f46bfe21-01ba-483f-8a04-82e6eaa186ef"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "newRI$4581", "v$4554", "v$4558", "v$4539", "newRI$4546", "newRI$4565", 
       "v$4561", "newRI$4573", "v$4542"}, {{{5, 4}, {5, 9}, {6, 3}, {6, 7}, {
       8, 2}, {8, 6}, {1, 5}, {1, 8}}, Null}, {
      GraphLayout -> {"LayeredEmbedding", "RootVertex" -> "newRI$4581"}, 
       Properties -> {
        "newRI$4546" -> {"order" -> 1}, "newRI$4565" -> {"order" -> 2}, 
         "newRI$4573" -> {"order" -> 2}, "v$4558" -> {"order" -> 1}, 
         "newRI$4581" -> {"order" -> 0}, "v$4542" -> {"order" -> 2}, 
         "v$4539" -> {"order" -> 1}, "v$4561" -> {"order" -> 2}, 
         "v$4554" -> {"order" -> 1}}, 
       VertexLabels -> {
        "newRI$4546" -> Placed[Times, After], "v$4561" -> 
         Placed[$CellContext`x, Below], "v$4542" -> Placed[4, Below], 
         "v$4558" -> Placed[3, Below], "v$4539" -> Placed[3, Below], 
         "newRI$4565" -> Placed[Plus, After], "newRI$4581" -> 
         Placed[Plus, After], "newRI$4573" -> Placed[Times, After], "v$4554" -> 
         Placed[7, Below]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{1.2510864843424487`, 2.5021729686848975`}, {
         0.41702882811414954`, 1.6681153124565984`}}, {{1.2510864843424487`, 
         2.5021729686848975`}, {2.0851441405707476`, 1.6681153124565984`}}, {{
         0.41702882811414954`, 1.6681153124565984`}, {0., 
         0.8340576562282993}}, {{0.41702882811414954`, 1.6681153124565984`}, {
         0.8340576562282991, 0.8340576562282993}}, {{2.5021729686848975`, 
         0.8340576562282993}, {2.0851441405707476`, 0.}}, {{
         2.5021729686848975`, 0.8340576562282993}, {2.919201796799047, 
         0.}}, {{2.0851441405707476`, 1.6681153124565984`}, {
         1.6681153124565982`, 0.8340576562282993}}, {{2.0851441405707476`, 
         1.6681153124565984`}, {2.5021729686848975`, 0.8340576562282993}}}, 
         0.02965727689850836]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{1.2510864843424487, 2.5021729686848975}, 
          0.02965727689850836], 
         InsetBox["Plus", 
          Offset[{2, 0}, {1.2807437612409571, 2.5021729686848975}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.6681153124565982, 0.8340576562282993}, 
          0.02965727689850836], 
         InsetBox["7", 
          Offset[{0, -2}, {1.6681153124565982, 0.8044003793297909}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.0851441405707476, 0.}, 0.02965727689850836], 
         InsetBox["3", 
          Offset[{0, -2}, {2.0851441405707476, -0.02965727689850836}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 0.8340576562282993}, 0.02965727689850836], 
         InsetBox["3", Offset[{0, -2}, {0., 0.8044003793297909}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.41702882811414954, 1.6681153124565984}, 
          0.02965727689850836], 
         InsetBox["Times", 
          Offset[{2, 0}, {0.44668610501265793, 1.6681153124565984}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.5021729686848975, 0.8340576562282993}, 
          0.02965727689850836], 
         InsetBox["Plus", 
          Offset[{2, 0}, {2.531830245583406, 0.8340576562282993}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.919201796799047, 0.}, 0.02965727689850836], 
         InsetBox["x", 
          Offset[{0, -2}, {2.919201796799047, -0.02965727689850836}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.0851441405707476, 1.6681153124565984}, 
          0.02965727689850836], 
         InsetBox["Times", 
          Offset[{2, 0}, {2.114801417469256, 1.6681153124565984}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8340576562282991, 0.8340576562282993}, 
          0.02965727689850836], 
         InsetBox["4", 
          Offset[{0, -2}, {0.8340576562282991, 0.8044003793297909}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785771136013*^9},
 CellLabel->
  "Out[169]=",ExpressionUUID->"f4158bc6-bb4e-40a9-94a3-589fdf53cbb4"]
}, Open  ]],

Cell["\<\
Observe that when an associative operation is used without parentheses, like \
addition in the example below, the expression tree respects the associativity.\
\>", "Text",ExpressionUUID->"8d13bcc3-e0e1-4557-aa66-54005080439f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expressionTree", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"5", "x"}], "+", "12", "+", "7"}], ")"}], "^", "3"}], "+", 
   RowBox[{"4", " ", "y"}]}], "]"}]], "Input",
 CellLabel->
  "In[170]:=",ExpressionUUID->"e7848866-73ed-4a95-a716-32156064ac5c"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "newRI$4659", "v$4644", "newRI$4623", "v$4601", "newRI$4608", 
       "newRI$4636", "v$4647", "newRI$4651", "v$4615", "v$4604", "v$4632", 
       "v$4618"}, {{{5, 4}, {5, 10}, {3, 5}, {3, 9}, {3, 12}, {6, 3}, {6, 
       11}, {8, 2}, {8, 7}, {1, 6}, {1, 8}}, Null}, {
      GraphLayout -> {"LayeredEmbedding", "RootVertex" -> "newRI$4659"}, 
       Properties -> {
        "v$4647" -> {"order" -> 2}, "v$4615" -> {"order" -> 2}, 
         "v$4618" -> {"order" -> 3}, "newRI$4659" -> {"order" -> 0}, 
         "v$4632" -> {"order" -> 2}, "newRI$4651" -> {"order" -> 2}, 
         "newRI$4623" -> {"order" -> 1}, "newRI$4608" -> {"order" -> 1}, 
         "v$4604" -> {"order" -> 2}, "v$4601" -> {"order" -> 1}, 
         "v$4644" -> {"order" -> 1}, "newRI$4636" -> {"order" -> 1}}, 
       VertexLabels -> {
        "v$4644" -> Placed[4, Below], "v$4647" -> 
         Placed[$CellContext`y, Below], "v$4601" -> Placed[5, Below], 
         "v$4618" -> Placed[7, Below], "newRI$4623" -> Placed[Plus, After], 
         "v$4615" -> Placed[12, Below], "newRI$4651" -> Placed[Times, After], 
         "newRI$4608" -> Placed[Times, After], "v$4604" -> 
         Placed[$CellContext`x, Below], "newRI$4636" -> Placed[Power, After], 
         "v$4632" -> Placed[3, Below], "newRI$4659" -> 
         Placed[Plus, After]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[CompressedData["
1:eJxTTMoPSmVmYGDgBmImKNZX5BTpm8HsYK/DU7BXgQtK/7KHiWOX53JAlf9s
D9MHoW/ZO4DpV/bo8jA+Lvnls9nTykIYHGDy6OYxoAF0eXs0ddj9g+5ehDzM
flR5hH+3L+M6tPQOG075Yxt55a6m8MLlAQ9fbSE=
         "], 0.03488701549084065]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{2.4494897427831783, 3.2659863237109046}, 
          0.03488701549084065], 
         InsetBox["Plus", 
          Offset[{2, 0}, {2.484376758274019, 3.2659863237109046}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.8577380332470415, 1.6329931618554523}, 
          0.03488701549084065], 
         InsetBox["4", 
          Offset[{0, -2}, {2.8577380332470415, 1.5981061463646116}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.2247448713915892, 1.6329931618554523}, 
          0.03488701549084065], 
         InsetBox["Plus", 
          Offset[{2, 0}, {1.2596318868824299, 1.6329931618554523}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.03488701549084065], 
         InsetBox["5", Offset[{0, -2}, {0., -0.03488701549084065}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.4082482904638631, 0.8164965809277263}, 
          0.03488701549084065], 
         InsetBox["Times", 
          Offset[{2, 0}, {0.44313530595470374, 0.8164965809277263}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.6329931618554523, 2.4494897427831783}, 
          0.03488701549084065], 
         InsetBox["Power", 
          Offset[{2, 0}, {1.667880177346293, 2.4494897427831783}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{3.6742346141747673, 1.6329931618554523}, 
          0.03488701549084065], 
         InsetBox["y", 
          Offset[{0, -2}, {3.6742346141747673, 1.5981061463646116}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{3.2659863237109046, 2.4494897427831783}, 
          0.03488701549084065], 
         InsetBox["Times", 
          Offset[{2, 0}, {3.300873339201745, 2.4494897427831783}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.2247448713915892, 0.8164965809277263}, 
          0.03488701549084065], 
         InsetBox["12", 
          Offset[{0, -2}, {1.2247448713915892, 0.7816095654368856}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8164965809277261, 0.}, 0.03488701549084065], 
         InsetBox["x", 
          Offset[{0, -2}, {0.8164965809277261, -0.03488701549084065}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.041241452319315, 1.6329931618554523}, 
          0.03488701549084065], 
         InsetBox["3", 
          Offset[{0, -2}, {2.041241452319315, 1.5981061463646116}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.041241452319315, 0.8164965809277263}, 
          0.03488701549084065], 
         InsetBox["7", 
          Offset[{0, -2}, {2.041241452319315, 0.7816095654368856}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785771200897*^9},
 CellLabel->
  "Out[170]=",ExpressionUUID->"31e13a5d-a53f-4286-b472-634540ac8ca1"]
}, Open  ]],

Cell[TextData[{
 "We may also wish to apply ",
 StyleBox["expressionTree", "Code"],
 " to a symbol that has been assigned to an expression. Since ",
 StyleBox[ButtonBox["HoldFirst",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldFirst"], "FunctionLink"],
 " will not allow the symbol to resolve to the stored expression, we provide \
a specific definition for ",
 StyleBox["expressionTree", "Code"],
 " applied to a symbol. We use ",
 StyleBox[ButtonBox["Evaluate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Evaluate"], "FunctionLink"],
 " to resolve the symbol. If the symbol evaluates to an expression, we pass \
that to the main ",
 StyleBox["expressionTree", "Code"],
 "."
}], "Text",ExpressionUUID->"305c01a2-96a3-4e67-9cf1-49fdc23617fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"expressionTree", "[", 
   RowBox[{"s_Symbol", ",", "opts___"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Head", "[", 
      RowBox[{"Evaluate", "[", "s", "]"}], "]"}], "=!=", "Symbol"}], ",", 
    RowBox[{"expressionTree", "[", 
     RowBox[{
      RowBox[{"Evaluate", "[", "s", "]"}], ",", "opts"}], "]"}], ",", 
    RowBox[{"newExpressionTree", "[", 
     RowBox[{"s", ",", "opts"}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[171]:=",ExpressionUUID->"b5b59d5e-3d30-4fa2-bd81-6be5e7a6447a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Prefix and Postfix Notation", "Subsection",
 CellTags->"Section3d",ExpressionUUID->"0c5f8435-f680-42f5-8e7a-d9df45c786af"],

Cell["\<\
Suppose we are given a tree representation of an arithmetic expression. We \
can express these trees in postfix, infix, or prefix form by applying the \
respective traversal algorithm we designed above. For example, our animation \
function for preorder traversal illustrates the order in which Example 6 from \
the main text would be written in prefix notation.\
\>", "Text",ExpressionUUID->"a17d8b8e-7c7d-4015-9c0f-2f20e6974dc2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"preorderAnimation", "[", 
  RowBox[{"expressionTree", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "+", "y"}], ")"}], "^", "2"}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "4"}], ")"}], "/", "3"}]}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[172]:=",ExpressionUUID->"98c630ee-da60-4f02-bafe-86eccbf2dcfb"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`i$$], 0, "step"}, 0, 13, 1}}, Typeset`size$$ = {
    360., {112., 117.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`i$4857$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`i$$, $CellContext`i$4857$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> HighlightGraph[
        Graph[{
         "newRI$4746", "newRI$4715", "v$4708", "v$4723", "newRI$4688", 
          "v$4681", "newRI$4699", "v$4711", "newRI$4730", "v$4726", 
          "newRI$4738", "v$4684", "v$4695"}, {{{5, 6}, {5, 12}, {7, 5}, {7, 
          13}, {2, 3}, {2, 8}, {9, 4}, {9, 10}, {11, 2}, {11, 9}, {1, 7}, {1, 
          11}}, Null}, {
         GraphLayout -> {"LayeredEmbedding", "RootVertex" -> "newRI$4746"}, 
          Properties -> {
           "v$4708" -> {"order" -> 1}, "newRI$4699" -> {"order" -> 1}, 
            "v$4723" -> {"order" -> 1}, "v$4684" -> {"order" -> 2}, 
            "v$4726" -> {"order" -> 2}, "newRI$4715" -> {"order" -> 1}, 
            "newRI$4730" -> {"order" -> 2}, "v$4681" -> {"order" -> 1}, 
            "v$4711" -> {"order" -> 2}, "newRI$4746" -> {"order" -> 0}, 
            "newRI$4738" -> {"order" -> 2}, "v$4695" -> {"order" -> 2}, 
            "newRI$4688" -> {"order" -> 1}}, 
          VertexLabels -> {
           "newRI$4746" -> Placed[Plus, After], "newRI$4738" -> 
            Placed[Times, After], "v$4684" -> Placed[$CellContext`y, Below], 
            "v$4711" -> Placed[-4, Below], "v$4681" -> 
            Placed[$CellContext`x, Below], "newRI$4730" -> 
            Placed[Power, After], "v$4723" -> Placed[3, Below], "v$4708" -> 
            Placed[$CellContext`x, Below], "newRI$4688" -> 
            Placed[Plus, After], "v$4726" -> Placed[-1, Below], "newRI$4715" -> 
            Placed[Plus, After], "v$4695" -> Placed[2, Below], "newRI$4699" -> 
            Placed[Power, After]}}], 
        Part[$CellContext`traversal$4753, 
         Span[1, $CellContext`i$$]]], 
      "Specifications" :> {{{$CellContext`i$$, 0, "step"}, 0, 13, 1, 
         AnimationRunning -> False, AnimationRepetitions -> 1, 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
        "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
        True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
     ImageSizeCache->{403., {149., 154.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Animate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.738785771248006*^9},
 CellLabel->
  "Out[172]=",ExpressionUUID->"5e5948e1-2c25-48fc-b8dc-82117fb3c6f0"]
}, Open  ]],

Cell[TextData[{
 "Note that the Wolfram Language interprets division as multiplication by the \
reciprocal. If you prefer the tree to include division, you can explicitly \
include the ",
 StyleBox[ButtonBox["Divide",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Divide"], "FunctionLink"],
 " function."
}], "Text",ExpressionUUID->"6aac3e56-66b2-457c-8719-4de2d1751909"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"preorderAnimation", "[", 
  RowBox[{"expressionTree", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "+", "y"}], ")"}], "^", "2"}], "+", 
    RowBox[{"Divide", "[", 
     RowBox[{
      RowBox[{"x", "-", "4"}], ",", "3"}], "]"}]}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[173]:=",ExpressionUUID->"0e313c7e-c25f-468b-a926-917763af7136"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`i$$], 0, "step"}, 0, 11, 1}}, Typeset`size$$ = {
    360., {156., 160.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`i$5040$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`i$$, $CellContext`i$5040$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> HighlightGraph[
        Graph[{
         "newRI$4947", "newRI$4928", "v$4921", "newRI$4901", "v$4894", 
          "newRI$4912", "v$4924", "v$4935", "newRI$4939", "v$4897", 
          "v$4908"}, {{{4, 5}, {4, 10}, {6, 4}, {6, 11}, {2, 3}, {2, 7}, {9, 
          2}, {9, 8}, {1, 6}, {1, 9}}, Null}, {
         GraphLayout -> {"LayeredEmbedding", "RootVertex" -> "newRI$4947"}, 
          Properties -> {
           "v$4921" -> {"order" -> 1}, "v$4894" -> {"order" -> 1}, 
            "newRI$4947" -> {"order" -> 0}, "v$4935" -> {"order" -> 2}, 
            "v$4924" -> {"order" -> 2}, "newRI$4939" -> {"order" -> 2}, 
            "newRI$4912" -> {"order" -> 1}, "v$4897" -> {"order" -> 2}, 
            "newRI$4901" -> {"order" -> 1}, "v$4908" -> {"order" -> 2}, 
            "newRI$4928" -> {"order" -> 1}}, 
          VertexLabels -> {
           "newRI$4939" -> Placed[Divide, After], "v$4894" -> 
            Placed[$CellContext`x, Below], "v$4924" -> Placed[-4, Below], 
            "newRI$4928" -> Placed[Plus, After], "newRI$4947" -> 
            Placed[Plus, After], "newRI$4912" -> Placed[Power, After], 
            "v$4935" -> Placed[3, Below], "v$4897" -> 
            Placed[$CellContext`y, Below], "v$4921" -> 
            Placed[$CellContext`x, Below], "newRI$4901" -> 
            Placed[Plus, After], "v$4908" -> Placed[2, Below]}}], 
        Part[$CellContext`traversal$4954, 
         Span[1, $CellContext`i$$]]], 
      "Specifications" :> {{{$CellContext`i$$, 0, "step"}, 0, 11, 1, 
         AnimationRunning -> False, AnimationRepetitions -> 1, 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
        "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
        True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
     ImageSizeCache->{403., {192., 197.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Animate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.738785771378683*^9},
 CellLabel->
  "Out[173]=",ExpressionUUID->"284f8f13-b435-4128-bc96-0b54ea24a6fd"]
}, Open  ]],

Cell[TextData[{
 "It is left to the reader to make the necessary functions to output infix, \
prefix, and postfix expressions. Keep in mind that the integers, variables, \
and operators are stored as the ",
 StyleBox[ButtonBox["VertexLabels",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexLabels"], "FunctionLink"],
 " property of the vertices of the tree, not as the vertices themselves."
}], "Text",ExpressionUUID->"36db8ccd-a6c5-4f0a-8f31-7dcd4bc8281a"],

Cell["\<\
As a final example in this section, we demonstrate how to evaluate a given \
postfix expression. We will represent the postfix expression as a list of \
symbols, each of which is either a number or one of the arithmetic operations\
\[CloseCurlyQuote] symbols as a string.\
\>", "Text",ExpressionUUID->"167d244f-da4c-43b0-90d1-286731a8e2ac"],

Cell["\<\
Since we are considering postfix expressions, we read the list of symbols \
from left to right. Each time we encounter an operation, that operation is \
applied to the previous two numbers and we update the list by replacing the \
two numbers and the operation symbol by the result of the operation.\
\>", "Text",ExpressionUUID->"32ea1a04-8b12-4423-9b57-afcf02a9cb17"],

Cell[BoxData[
 RowBox[{
  RowBox[{"evalPostfix", "[", "expr_List", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", "L"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"L", "=", "expr"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "L", "]"}], ">", "1"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ";", "\[IndentingNewLine]", 
        RowBox[{"While", "[", 
         RowBox[{
          RowBox[{"FreeQ", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "\"\<+\>\"", ",", "\"\<-\>\"", ",", "\"\<*\>\"", ",", 
              "\"\</\>\"", ",", "\"\<^\>\""}], "}"}], ",", 
            RowBox[{"L", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
          RowBox[{"i", "++"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"L", "[", 
           RowBox[{"[", "i", "]"}], "]"}], ",", "\[IndentingNewLine]", 
          "\"\<+\>\"", ",", 
          RowBox[{
           RowBox[{"L", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "=", 
           RowBox[{
            RowBox[{"L", "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "2"}], "]"}], "]"}], "+", 
            RowBox[{"L", "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "1"}], "]"}], "]"}]}]}], ",", 
          "\[IndentingNewLine]", "\"\<-\>\"", ",", 
          RowBox[{
           RowBox[{"L", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "=", 
           RowBox[{
            RowBox[{"L", "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "2"}], "]"}], "]"}], "-", 
            RowBox[{"L", "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "1"}], "]"}], "]"}]}]}], ",", 
          "\[IndentingNewLine]", "\"\<*\>\"", ",", 
          RowBox[{
           RowBox[{"L", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "=", 
           RowBox[{
            RowBox[{"L", "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "2"}], "]"}], "]"}], "*", 
            RowBox[{"L", "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "1"}], "]"}], "]"}]}]}], ",", 
          "\[IndentingNewLine]", "\"\</\>\"", ",", 
          RowBox[{
           RowBox[{"L", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "=", 
           RowBox[{
            RowBox[{"L", "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "2"}], "]"}], "]"}], "/", 
            RowBox[{"L", "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "1"}], "]"}], "]"}]}]}], ",", 
          "\[IndentingNewLine]", "\"\<^\>\"", ",", 
          RowBox[{
           RowBox[{"L", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "=", 
           RowBox[{
            RowBox[{"L", "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "2"}], "]"}], "]"}], "^", 
            RowBox[{"L", "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "1"}], "]"}], "]"}]}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"L", "=", 
         RowBox[{"Drop", "[", 
          RowBox[{"L", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"i", "-", "2"}], ",", 
             RowBox[{"i", "-", "1"}]}], "}"}]}], "]"}]}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"L", "[", 
      RowBox[{"[", "1", "]"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[174]:=",ExpressionUUID->"c7f547dd-2700-4f66-9904-9d6cf9148783"],

Cell[TextData[{
 "Note that the ",
 StyleBox[ButtonBox["Drop",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Drop"], "FunctionLink"],
 " function removes a range of elements of the list."
}], "Text",ExpressionUUID->"fd1286c4-47dc-4e5a-b9a9-506d16bab073"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"postfixExample", "=", 
  RowBox[{"{", 
   RowBox[{
   "7", ",", "2", ",", "3", ",", "\"\<*\>\"", ",", "\"\<-\>\"", ",", "4", 
    ",", "\"\<^\>\"", ",", "9", ",", "3", ",", "\"\</\>\"", ",", 
    "\"\<+\>\""}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[175]:=",ExpressionUUID->"dfe2edf9-cf10-4813-8e01-7a935efbc334"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "7", ",", "2", ",", "3", ",", "\<\"*\"\>", ",", "\<\"-\"\>", ",", "4", 
   ",", "\<\"^\"\>", ",", "9", ",", "3", ",", "\<\"/\"\>", ",", "\<\"+\"\>"}],
   "}"}]], "Output",
 CellChangeTimes->{3.7387857715294867`*^9},
 CellLabel->
  "Out[175]=",ExpressionUUID->"9bd5ce5a-7dda-4e9b-91ac-275d867f86b1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"evalPostfix", "[", "postfixExample", "]"}]], "Input",
 CellLabel->
  "In[176]:=",ExpressionUUID->"bcb9c101-8a04-457f-9cd3-e09ff98e21a2"],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.738785771596291*^9},
 CellLabel->
  "Out[176]=",ExpressionUUID->"26af0551-a121-4488-ad2e-84da67665486"]
}, Open  ]],

Cell["\<\
The reader is left to explore evaluation in the prefix case, which requires \
only a simple modification.\
\>", "Text",ExpressionUUID->"de7b610b-e0f5-41d3-bf6f-edb2b8f0a9ca"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["11.4 Spanning Trees", "Section",
 CellTags->"Section4",ExpressionUUID->"a0d6d249-9e97-4fcb-9ddf-53c3921bb6f8"],

Cell[TextData[{
 "This section explains how to use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to construct spanning trees for graphs and how to use spanning trees to \
solve many different types of problems. Spanning trees have a myriad of \
applications, including coloring graphs, placing ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "f33f6e4a-3e1c-4433-b9df-350f047e2338"],
 " queens on a ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "\[Times]", "n"}], TraditionalForm]],ExpressionUUID->
  "ff37deda-6a01-4c8a-9adc-c4c742d84e27"],
 " chessboard so that no two of the queens attack each other, and finding a \
subset of a set of numbers with a specified sum. All of these problems, which \
are described in detail in the text, will be explored computationally in this \
section. First, we will show how to form spanning trees using two algorithms: \
depth-first search and breadth-first search. Then, we will solve the problems \
just mentioned."
}], "Text",ExpressionUUID->"6bf798cd-54d7-44b9-8480-0d3950efa243"],

Cell[TextData[{
 "The Wolfram Language includes two functions, ",
 StyleBox[ButtonBox["DepthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/DepthFirstScan"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["BreadthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BreadthFirstScan"], "FunctionLink"],
 " that will perform a search on a graph. Both functions accept a ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 " and a vertex of the graph as the first two arguments. With these two \
arguments, the functions will return a list of vertices, say ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["v", "1"], ",", 
     SubscriptBox["v", "2"], ",", "\[Ellipsis]", ",", 
     SubscriptBox["v", "n"]}], "}"}], TraditionalForm]],ExpressionUUID->
  "d493b553-958f-4766-889e-a052830c57de"],
 ". Suppose that the ",
 StyleBox[ButtonBox["VertexList",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexList"], "FunctionLink"],
 " function returns ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["u", "1"], ",", 
     SubscriptBox["u", "2"], ",", "\[Ellipsis]", ",", 
     SubscriptBox["u", "n"]}], "}"}], TraditionalForm]],ExpressionUUID->
  "53e7b577-96ab-4519-b755-ba84d572871f"],
 ". Then, the output of ",
 StyleBox[ButtonBox["DepthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/DepthFirstScan"], "FunctionLink"],
 " or ",
 StyleBox[ButtonBox["BreadthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BreadthFirstScan"], "FunctionLink"],
 " indicates that the tree whose edges are ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["v", "i"], "\[DirectedEdge]", 
    SubscriptBox["u", "i"]}], TraditionalForm]],ExpressionUUID->
  "35daa95a-74b0-4c6a-a94c-a790fe0e64bd"],
 " is a spanning tree of the graph, with root the vertex such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["u", "i"], "=", 
    SubscriptBox["v", "i"]}], TraditionalForm]],ExpressionUUID->
  "5250057f-1b63-4de6-84cc-f305be9a9890"],
 ". "
}], "Text",ExpressionUUID->"2e8d35b2-fce6-446a-8937-7cac53f274f9"],

Cell[TextData[{
 "The function ",
 StyleBox[ButtonBox["TreeGraph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TreeGraph"], "FunctionLink"],
 " can be used to form a tree from the output of ",
 StyleBox[ButtonBox["DepthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/DepthFirstScan"], "FunctionLink"],
 " or ",
 StyleBox[ButtonBox["BreadthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BreadthFirstScan"], "FunctionLink"],
 ". ",
 StyleBox[ButtonBox["TreeGraph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TreeGraph"], "FunctionLink"],
 " can accept as input two lists of vertices, where the first is the list of \
all vertices to appear in the tree and the second is the list each of whose \
elements is the predecessor of the corresponding element of the first list. A \
simple example is shown below of a tree with root 2, vertices 1 and 3 are the \
children of 2, and 4 and 5 are the children of 3, and vertex 6 is the child \
of 1."
}], "Text",ExpressionUUID->"c5e4e972-2a50-478a-8d86-fde474d6c92d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TreeGraph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "2", ",", "3", ",", "3", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]], "Input",
 CellLabel->
  "In[177]:=",ExpressionUUID->"825d6387-c9c1-48aa-9305-396c28f145ce"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 6}, {
      Null, {{2, 1}, {2, 3}, {3, 4}, {3, 5}, {1, 6}}}, {
      VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Arrowheads[0.], 
         ArrowBox[{{0., 0.8687444855261388}, {0.6515583641446041, 
          1.7374889710522776`}}, 0.02044525157230459]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0., 0.8687444855261388}, {0., 0.}}, 0.02044525157230459]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.6515583641446041, 1.7374889710522776`}, {
          1.3031167282892082`, 0.8687444855261388}}, 0.02044525157230459]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.3031167282892082`, 0.8687444855261388}, {
          0.8687444855261388, 0.}}, 0.02044525157230459]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.3031167282892082`, 0.8687444855261388}, {
          1.7374889710522776`, 0.}}, 0.02044525157230459]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.8687444855261388}, 0.02044525157230459], 
         InsetBox["1", 
          Offset[{2, 2}, {0.02044525157230459, 0.8891897370984434}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.6515583641446041, 1.7374889710522776}, 
          0.02044525157230459], 
         InsetBox["2", 
          Offset[{2, 2}, {0.6720036157169087, 1.7579342226245822}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.3031167282892082, 0.8687444855261388}, 
          0.02044525157230459], 
         InsetBox["3", 
          Offset[{2, 2}, {1.3235619798615128, 0.8891897370984434}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8687444855261388, 0.}, 0.02044525157230459], 
         InsetBox["4", 
          Offset[{2, 2}, {0.8891897370984434, 0.02044525157230459}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.7374889710522776, 0.}, 0.02044525157230459], 
         InsetBox["5", 
          Offset[{2, 2}, {1.7579342226245822, 0.02044525157230459}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.02044525157230459], 
         InsetBox["6", 
          Offset[{2, 2}, {0.02044525157230459, 0.02044525157230459}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785771668713*^9},
 CellLabel->
  "Out[177]=",ExpressionUUID->"d3c29f09-e556-42c5-8f16-b998e0b6ab51"]
}, Open  ]],

Cell[TextData[{
 "We will illustrate the use of ",
 StyleBox[ButtonBox["DepthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/DepthFirstScan"], "FunctionLink"],
 " or ",
 StyleBox[ButtonBox["BreadthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BreadthFirstScan"], "FunctionLink"],
 " with the graph from Exercise 13 of Section 11.4, which we recreate."
}], "Text",ExpressionUUID->"bed35049-3824-4c3a-927e-5b583c46fa32"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exercise13", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\"", ",", 
      "\"\<e\>\"", ",", "\"\<f\>\"", ",", "\"\<g\>\"", ",", "\"\<h\>\"", ",", 
      "\"\<i\>\"", ",", "\"\<j\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<b\>\""}], ",", 
      RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<c\>\""}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<c\>\""}], ",", 
      RowBox[{"\"\<c\>\"", "\[Rule]", "\"\<d\>\""}], ",", 
      RowBox[{"\"\<d\>\"", "\[Rule]", "\"\<e\>\""}], ",", 
      RowBox[{"\"\<d\>\"", "\[Rule]", "\"\<f\>\""}], ",", 
      RowBox[{"\"\<e\>\"", "\[Rule]", "\"\<f\>\""}], ",", 
      RowBox[{"\"\<e\>\"", "\[Rule]", "\"\<h\>\""}], ",", 
      RowBox[{"\"\<f\>\"", "\[Rule]", "\"\<g\>\""}], ",", 
      RowBox[{"\"\<g\>\"", "\[Rule]", "\"\<h\>\""}], ",", 
      RowBox[{"\"\<g\>\"", "\[Rule]", "\"\<j\>\""}], ",", 
      RowBox[{"\"\<h\>\"", "\[Rule]", "\"\<i\>\""}]}], "}"}], ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "False"}], ",", 
    RowBox[{"VertexCoordinates", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0.5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "0.5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "0"}], "}"}]}], "}"}]}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[178]:=",ExpressionUUID->"aad565ce-d327-4d65-b153-edbe2e3823c2"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j"}, {
      Null, {{1, 2}, {1, 3}, {2, 3}, {3, 4}, {4, 5}, {4, 6}, {5, 6}, {5, 8}, {
       6, 7}, {7, 8}, {7, 10}, {8, 9}}}, {
      VertexLabels -> {"Name"}, 
       VertexCoordinates -> {{0, 1}, {0, 0}, {1, 0.5}, {2, 0.5}, {3, 1}, {3, 
         0}, {4, 0}, {4, 1}, {5, 1}, {5, 0}}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Arrowheads[0.], 
         ArrowBox[{{0., 1.}, {0., 0.}}, 0.043048128342245986`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0., 1.}, {1., 0.5}}, 0.043048128342245986`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0., 0.}, {1., 0.5}}, 0.043048128342245986`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1., 0.5}, {2., 0.5}}, 0.043048128342245986`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{2., 0.5}, {3., 1.}}, 0.043048128342245986`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{2., 0.5}, {3., 0.}}, 0.043048128342245986`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{3., 1.}, {3., 0.}}, 0.043048128342245986`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{3., 1.}, {4., 1.}}, 0.043048128342245986`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{3., 0.}, {4., 0.}}, 0.043048128342245986`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{4., 0.}, {4., 1.}}, 0.043048128342245986`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{4., 0.}, {5., 0.}}, 0.043048128342245986`]}, 
        {Arrowheads[0.], 
         ArrowBox[{{4., 1.}, {5., 1.}}, 0.043048128342245986`]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 1.}, 0.043048128342245986], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {0.043048128342245986, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.043048128342245986], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.043048128342245986, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.5}, 0.043048128342245986], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {1.043048128342246, 0.543048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{2., 0.5}, 0.043048128342245986], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {2.043048128342246, 0.543048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{3., 1.}, 0.043048128342245986], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {3.043048128342246, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{3., 0.}, 0.043048128342245986], 
         InsetBox["\<\"f\"\>", 
          Offset[{2, 2}, {3.043048128342246, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{4., 0.}, 0.043048128342245986], 
         InsetBox["\<\"g\"\>", 
          Offset[{2, 2}, {4.043048128342246, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{4., 1.}, 0.043048128342245986], 
         InsetBox["\<\"h\"\>", 
          Offset[{2, 2}, {4.043048128342246, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{5., 1.}, 0.043048128342245986], 
         InsetBox["\<\"i\"\>", 
          Offset[{2, 2}, {5.043048128342246, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{5., 0.}, 0.043048128342245986], 
         InsetBox["\<\"j\"\>", 
          Offset[{2, 2}, {5.043048128342246, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7387857717304907`*^9},
 CellLabel->
  "Out[178]=",ExpressionUUID->"16cf1d4c-996d-44f9-abad-5d96e511531c"]
}, Open  ]],

Cell[TextData[{
 "Using ",
 StyleBox[ButtonBox["DepthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/DepthFirstScan"], "FunctionLink"],
 " and passing the output to ",
 StyleBox[ButtonBox["TreeGraph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TreeGraph"], "FunctionLink"],
 " allows us to draw the spanning tree obtained by a depth-first search."
}], "Text",ExpressionUUID->"68ef94ec-738f-4f35-8afb-7cd7b214893f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exercise13DepthFirst", "=", 
  RowBox[{"DepthFirstScan", "[", 
   RowBox[{"exercise13", ",", "\"\<a\>\""}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[179]:=",ExpressionUUID->"9b63c647-631e-4003-929a-603bfeffb379"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
   ",", "\<\"d\"\>", ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>", 
   ",", "\<\"h\"\>", ",", "\<\"g\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.738785771777999*^9},
 CellLabel->
  "Out[179]=",ExpressionUUID->"82ed237e-f8f4-4a1d-a1f2-73b30b5cc1e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TreeGraph", "[", 
  RowBox[{
   RowBox[{"VertexList", "[", "exercise13", "]"}], ",", 
   "exercise13DepthFirst", ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]], "Input",
 CellLabel->
  "In[180]:=",ExpressionUUID->"e4bab60c-32f9-4402-b3c6-bfb814d7d738"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j"}, {
      Null, {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {
       7, 10}}}, {VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Arrowheads[0.], 
         ArrowBox[{{0., 0.}, {0., 0.9203579866168443}}, 0.03493468166720967]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0., 0.9203579866168443}, {0., 1.8407159732336889`}}, 
          0.03493468166720967]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0., 1.8407159732336889`}, {0., 2.7610739598505334`}}, 
          0.03493468166720967]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0., 2.7610739598505334`}, {0.6902684899626333, 
          3.6814319464673777`}}, 0.03493468166720967]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.6902684899626333, 3.6814319464673777`}, {
          1.3805369799252667`, 2.7610739598505334`}}, 0.03493468166720967]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.3805369799252667`, 2.7610739598505334`}, {
          1.3805369799252667`, 1.8407159732336889`}}, 0.03493468166720967]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.3805369799252667`, 1.8407159732336889`}, {
          0.9203579866168444, 0.9203579866168443}}, 0.03493468166720967]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.3805369799252667`, 1.8407159732336889`}, {
          1.8407159732336889`, 0.9203579866168443}}, 0.03493468166720967]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.9203579866168444, 0.9203579866168443}, {
          0.9203579866168444, 0.}}, 0.03493468166720967]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.}, 0.03493468166720967], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {0.03493468166720967, 0.03493468166720967}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 0.9203579866168443}, 0.03493468166720967], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.03493468166720967, 0.955292668284054}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 1.8407159732336889}, 0.03493468166720967], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {0.03493468166720967, 1.8756506549008984}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 2.7610739598505334}, 0.03493468166720967], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {0.03493468166720967, 2.796008641517743}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.6902684899626333, 3.6814319464673777}, 
          0.03493468166720967], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.725203171629843, 3.7163666281345873}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.3805369799252667, 2.7610739598505334}, 
          0.03493468166720967], 
         InsetBox["\<\"f\"\>", 
          Offset[{2, 2}, {1.4154716615924763, 2.796008641517743}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.3805369799252667, 1.8407159732336889}, 
          0.03493468166720967], 
         InsetBox["\<\"g\"\>", 
          Offset[{2, 2}, {1.4154716615924763, 1.8756506549008984}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.9203579866168444, 0.9203579866168443}, 
          0.03493468166720967], 
         InsetBox["\<\"h\"\>", 
          Offset[{2, 2}, {0.9552926682840541, 0.955292668284054}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.9203579866168444, 0.}, 0.03493468166720967], 
         InsetBox["\<\"i\"\>", 
          Offset[{2, 2}, {0.9552926682840541, 0.03493468166720967}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.8407159732336889, 0.9203579866168443}, 
          0.03493468166720967], 
         InsetBox["\<\"j\"\>", 
          Offset[{2, 2}, {1.8756506549008984, 0.955292668284054}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785771845127*^9},
 CellLabel->
  "Out[180]=",ExpressionUUID->"e60427eb-572b-496e-bd71-c9da7aab237b"]
}, Open  ]],

Cell[TextData[{
 "Observe that ",
 StyleBox[ButtonBox["BreadthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BreadthFirstScan"], "FunctionLink"],
 " produces a different tree."
}], "Text",ExpressionUUID->"125ff0e4-5b7a-453d-8133-a794fd389967"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TreeGraph", "[", 
  RowBox[{
   RowBox[{"VertexList", "[", "exercise13", "]"}], ",", 
   RowBox[{"BreadthFirstScan", "[", 
    RowBox[{"exercise13", ",", "\"\<a\>\""}], "]"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]], "Input",
 CellLabel->
  "In[181]:=",ExpressionUUID->"5665ad53-7294-44f3-8b4a-c5658e4f4c84"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j"}, {
      Null, {{1, 2}, {1, 3}, {3, 4}, {4, 5}, {4, 6}, {6, 7}, {5, 8}, {8, 9}, {
       7, 10}}}, {VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Arrowheads[0.], 
         ArrowBox[{{0., 0.9045340337332908}, {0., 0.}}, 0.02814984257149772]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0., 0.9045340337332908}, {0., 1.8090680674665816`}}, 
          0.02814984257149772]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0., 1.8090680674665816`}, {0.9045340337332908, 
          2.7136021011998723`}}, 0.02814984257149772]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.9045340337332908, 2.7136021011998723`}, {
          0.9045340337332908, 1.8090680674665816`}}, 0.02814984257149772]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.9045340337332908, 2.7136021011998723`}, {
          1.8090680674665816`, 1.8090680674665816`}}, 0.02814984257149772]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.9045340337332908, 1.8090680674665816`}, {
          0.9045340337332908, 0.9045340337332908}}, 0.02814984257149772]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.8090680674665816`, 1.8090680674665816`}, {
          1.8090680674665816`, 0.9045340337332908}}, 0.02814984257149772]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.8090680674665816`, 0.9045340337332908}, {
          1.8090680674665816`, 0.}}, 0.02814984257149772]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.9045340337332908, 0.9045340337332908}, {
          0.9045340337332908, 0.}}, 0.02814984257149772]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.9045340337332908}, 0.02814984257149772], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {0.02814984257149772, 0.9326838763047884}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.02814984257149772], 
         InsetBox["\<\"b\"\>", Offset[{2, 2}, 
          {0.02814984257149772, 0.02814984257149772}], ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 1.8090680674665816}, 0.02814984257149772], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {0.02814984257149772, 1.8372179100380792}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.9045340337332908, 2.7136021011998723}, 
          0.02814984257149772], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {0.9326838763047884, 2.74175194377137}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.9045340337332908, 1.8090680674665816}, 
          0.02814984257149772], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.9326838763047884, 1.8372179100380792}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.8090680674665816, 1.8090680674665816}, 
          0.02814984257149772], 
         InsetBox["\<\"f\"\>", 
          Offset[{2, 2}, {1.8372179100380792, 1.8372179100380792}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.8090680674665816, 0.9045340337332908}, 
          0.02814984257149772], 
         InsetBox["\<\"g\"\>", 
          Offset[{2, 2}, {1.8372179100380792, 0.9326838763047884}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.9045340337332908, 0.9045340337332908}, 
          0.02814984257149772], 
         InsetBox["\<\"h\"\>", 
          Offset[{2, 2}, {0.9326838763047884, 0.9326838763047884}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.9045340337332908, 0.}, 0.02814984257149772], 
         InsetBox["\<\"i\"\>", 
          Offset[{2, 2}, {0.9326838763047884, 0.02814984257149772}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.8090680674665816, 0.}, 0.02814984257149772], 
         InsetBox["\<\"j\"\>", 
          Offset[{2, 2}, {1.8372179100380792, 0.02814984257149772}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785771896793*^9},
 CellLabel->
  "Out[181]=",ExpressionUUID->"ece7aa9c-efde-45af-8a37-57e61ce08ea7"]
}, Open  ]],

Cell[TextData[{
 "Note that in both cases, the initial vertex, ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "518d6979-6d3a-4326-9a85-a9023c339668"],
 ", is not drawn at the root of the tree. As we described previously, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " draws trees to minimize depth, irrespective of the logical root. As \
before, we can specify the root by using the ",
 StyleBox[ButtonBox["GraphLayout",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GraphLayout"], "FunctionLink"],
 " option."
}], "Text",ExpressionUUID->"b49f9e4c-0e1d-4418-9c1a-eb9ae2b16f66"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TreeGraph", "[", 
  RowBox[{
   RowBox[{"VertexList", "[", "exercise13", "]"}], ",", 
   RowBox[{"BreadthFirstScan", "[", 
    RowBox[{"exercise13", ",", "\"\<a\>\""}], "]"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
   RowBox[{"GraphLayout", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<LayeredEmbedding\>\"", ",", 
      RowBox[{"\"\<RootVertex\>\"", "\[Rule]", "\"\<a\>\""}]}], "}"}]}]}], 
  "]"}]], "Input",
 CellLabel->
  "In[182]:=",ExpressionUUID->"f285481c-8a7e-477a-b70b-2f2170017b0c"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j"}, {
      Null, {{1, 2}, {1, 3}, {3, 4}, {4, 5}, {4, 6}, {6, 7}, {5, 8}, {8, 9}, {
       7, 10}}}, {
      GraphLayout -> {"LayeredEmbedding", "RootVertex" -> "a"}, 
       VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Arrowheads[0.], 
         ArrowBox[{{0.4743416490252569, 4.743416490252569}, {0., 
          3.794733192202055}}, 0.04156022144503381]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.4743416490252569, 4.743416490252569}, {
          0.9486832980505138, 3.794733192202055}}, 0.04156022144503381]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.9486832980505138, 3.794733192202055}, {
          0.9486832980505138, 2.8460498941515415`}}, 0.04156022144503381]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.9486832980505138, 2.8460498941515415`}, {
          0.4743416490252569, 1.897366596101028}}, 0.04156022144503381]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.9486832980505138, 2.8460498941515415`}, {
          1.4230249470757705`, 1.897366596101028}}, 0.04156022144503381]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.4743416490252569, 1.897366596101028}, {
          0.4743416490252569, 0.948683298050514}}, 0.04156022144503381]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.4230249470757705`, 1.897366596101028}, {
          1.4230249470757705`, 0.948683298050514}}, 0.04156022144503381]}, 
        {Arrowheads[0.], 
         ArrowBox[{{1.4230249470757705`, 0.948683298050514}, {
          1.4230249470757705`, 0.}}, 0.04156022144503381]}, 
        {Arrowheads[0.], 
         ArrowBox[{{0.4743416490252569, 0.948683298050514}, {
          0.4743416490252569, 0.}}, 0.04156022144503381]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{0.4743416490252569, 4.743416490252569}, 
          0.04156022144503381], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {0.5159018704702907, 4.7849767116976025}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 3.794733192202055}, 0.04156022144503381], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.04156022144503381, 3.836293413647089}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.9486832980505138, 3.794733192202055}, 
          0.04156022144503381], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {0.9902435194955476, 3.836293413647089}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.9486832980505138, 2.8460498941515415}, 
          0.04156022144503381], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {0.9902435194955476, 2.8876101155965754}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.4743416490252569, 1.897366596101028}, 
          0.04156022144503381], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.5159018704702907, 1.9389268175460619}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.4230249470757705, 1.897366596101028}, 
          0.04156022144503381], 
         InsetBox["\<\"f\"\>", 
          Offset[{2, 2}, {1.4645851685208044, 1.9389268175460619}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.4230249470757705, 0.948683298050514}, 
          0.04156022144503381], 
         InsetBox["\<\"g\"\>", 
          Offset[{2, 2}, {1.4645851685208044, 0.9902435194955478}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.4743416490252569, 0.948683298050514}, 
          0.04156022144503381], 
         InsetBox["\<\"h\"\>", 
          Offset[{2, 2}, {0.5159018704702907, 0.9902435194955478}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.4743416490252569, 0.}, 0.04156022144503381], 
         InsetBox["\<\"i\"\>", 
          Offset[{2, 2}, {0.5159018704702907, 0.04156022144503381}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.4230249470757705, 0.}, 0.04156022144503381], 
         InsetBox["\<\"j\"\>", 
          Offset[{2, 2}, {1.4645851685208044, 0.04156022144503381}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7387857719481573`*^9},
 CellLabel->
  "Out[182]=",ExpressionUUID->"4ebb9232-26cd-4a08-8aa0-c1e4692a8106"]
}, Open  ]],

Cell[TextData[{
 StyleBox[ButtonBox["DepthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/DepthFirstScan"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["BreadthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BreadthFirstScan"], "FunctionLink"],
 " both accept an optional third argument, which is given as a list of rules. \
The rules in the list identify an \[OpenCurlyDoubleQuote]event\
\[CloseCurlyDoubleQuote] with a pure ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " (",
 StyleBox["&", "Code"],
 ") to be executed when the event occurs. We will illustrate this by \
highlighting the ",
 StyleBox[ButtonBox["BreadthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BreadthFirstScan"], "FunctionLink"],
 " tree within the graph. We make a copy of the graph first, since our \
execution of ",
 StyleBox[ButtonBox["BreadthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BreadthFirstScan"], "FunctionLink"],
 " will modify the graph."
}], "Text",ExpressionUUID->"ce94dd91-12af-40bd-9f7c-a96dfff339db"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"exercise13Copy", "=", "exercise13"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"BreadthFirstScan", "[", 
   RowBox[{"exercise13Copy", ",", "\"\<a\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<FrontierEdge\>\"", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"PropertyValue", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"exercise13Copy", ",", "#"}], "}"}], ",", "EdgeStyle"}], 
           "]"}], "=", 
          RowBox[{"Directive", "[", 
           RowBox[{"Thick", ",", "Red"}], "]"}]}], ")"}], "&"}], ")"}]}], 
     "}"}]}], "]"}], ";", " ", "exercise13Copy"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[183]:=",ExpressionUUID->"2558f7d9-3e9f-4441-81b8-4d1452c1e20b"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j"}, {
      Null, {{1, 2}, {1, 3}, {2, 3}, {3, 4}, {4, 5}, {4, 6}, {5, 6}, {5, 8}, {
       6, 7}, {7, 8}, {7, 10}, {8, 9}}}, {
      EdgeStyle -> {UndirectedEdge["a", "b"] -> Directive[
           Thickness[Large], 
           RGBColor[1, 0, 0]], UndirectedEdge["e", "h"] -> Directive[
           Thickness[Large], 
           RGBColor[1, 0, 0]], UndirectedEdge["g", "j"] -> Directive[
           Thickness[Large], 
           RGBColor[1, 0, 0]], UndirectedEdge["d", "e"] -> Directive[
           Thickness[Large], 
           RGBColor[1, 0, 0]], UndirectedEdge["f", "g"] -> Directive[
           Thickness[Large], 
           RGBColor[1, 0, 0]], UndirectedEdge["c", "d"] -> Directive[
           Thickness[Large], 
           RGBColor[1, 0, 0]], UndirectedEdge["h", "i"] -> Directive[
           Thickness[Large], 
           RGBColor[1, 0, 0]], UndirectedEdge["d", "f"] -> Directive[
           Thickness[Large], 
           RGBColor[1, 0, 0]], UndirectedEdge["a", "c"] -> Directive[
           Thickness[Large], 
           RGBColor[1, 0, 0]]}, VertexLabels -> {"Name"}, 
       VertexCoordinates -> {{0, 1}, {0, 0}, {1, 0.5}, {2, 0.5}, {3, 1}, {3, 
         0}, {4, 0}, {4, 1}, {5, 1}, {5, 0}}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {RGBColor[1, 0, 0], Thickness[Large], 
         {Arrowheads[0.], 
          ArrowBox[{{0., 1.}, {0., 0.}}, 0.043048128342245986`]}}, 
        {RGBColor[1, 0, 0], Thickness[Large], 
         {Arrowheads[0.], 
          ArrowBox[{{0., 1.}, {1., 0.5}}, 0.043048128342245986`]}}, 
        {Arrowheads[0.], 
         ArrowBox[{{0., 0.}, {1., 0.5}}, 0.043048128342245986`]}, 
        {RGBColor[1, 0, 0], Thickness[Large], 
         {Arrowheads[0.], 
          ArrowBox[{{1., 0.5}, {2., 0.5}}, 0.043048128342245986`]}}, 
        {RGBColor[1, 0, 0], Thickness[Large], 
         {Arrowheads[0.], 
          ArrowBox[{{2., 0.5}, {3., 1.}}, 0.043048128342245986`]}}, 
        {RGBColor[1, 0, 0], Thickness[Large], 
         {Arrowheads[0.], 
          ArrowBox[{{2., 0.5}, {3., 0.}}, 0.043048128342245986`]}}, 
        {Arrowheads[0.], 
         ArrowBox[{{3., 1.}, {3., 0.}}, 0.043048128342245986`]}, 
        {RGBColor[1, 0, 0], Thickness[Large], 
         {Arrowheads[0.], 
          ArrowBox[{{3., 1.}, {4., 1.}}, 0.043048128342245986`]}}, 
        {RGBColor[1, 0, 0], Thickness[Large], 
         {Arrowheads[0.], 
          ArrowBox[{{3., 0.}, {4., 0.}}, 0.043048128342245986`]}}, 
        {Arrowheads[0.], 
         ArrowBox[{{4., 0.}, {4., 1.}}, 0.043048128342245986`]}, 
        {RGBColor[1, 0, 0], Thickness[Large], 
         {Arrowheads[0.], 
          ArrowBox[{{4., 0.}, {5., 0.}}, 0.043048128342245986`]}}, 
        {RGBColor[1, 0, 0], Thickness[Large], 
         {Arrowheads[0.], 
          ArrowBox[{{4., 1.}, {5., 1.}}, 0.043048128342245986`]}}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 1.}, 0.043048128342245986], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {0.043048128342245986, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.043048128342245986], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.043048128342245986, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.5}, 0.043048128342245986], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {1.043048128342246, 0.543048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{2., 0.5}, 0.043048128342245986], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {2.043048128342246, 0.543048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{3., 1.}, 0.043048128342245986], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {3.043048128342246, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{3., 0.}, 0.043048128342245986], 
         InsetBox["\<\"f\"\>", 
          Offset[{2, 2}, {3.043048128342246, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{4., 0.}, 0.043048128342245986], 
         InsetBox["\<\"g\"\>", 
          Offset[{2, 2}, {4.043048128342246, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{4., 1.}, 0.043048128342245986], 
         InsetBox["\<\"h\"\>", 
          Offset[{2, 2}, {4.043048128342246, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{5., 1.}, 0.043048128342245986], 
         InsetBox["\<\"i\"\>", 
          Offset[{2, 2}, {5.043048128342246, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{5., 0.}, 0.043048128342245986], 
         InsetBox["\<\"j\"\>", 
          Offset[{2, 2}, {5.043048128342246, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7387857720132637`*^9},
 CellLabel->
  "Out[184]=",ExpressionUUID->"fb407e8b-bf00-4cc0-a651-0ab30e5dd7d5"]
}, Open  ]],

Cell[TextData[{
 "Let us explain the above in more detail. ",
 StyleBox[ButtonBox["BreadthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BreadthFirstScan"], "FunctionLink"],
 " is called on the graph ",
 StyleBox["exercise13Copy", "Code"],
 " and told to start with vertex ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "8e4ae501-719b-4b63-b993-7b95f8db931c"],
 ". The third argument is the list containing a single ",
 StyleBox[ButtonBox["Rule",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Rule"], "FunctionLink"],
 " (",
 StyleBox["->", "Code"],
 ") identifying the event ",
 StyleBox["\[OpenCurlyDoubleQuote]FrontierEdge\[CloseCurlyDoubleQuote]", 
  "Input"],
 " with a pure ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " (",
 StyleBox["&", "Code"],
 "). A frontier edge refers to an edge between a vertex that is currently \
being visited and a vertex that is newly discovered as a result of visiting \
the current vertex. The pure ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " (",
 StyleBox["&", "Code"],
 ") associated to the event ",
 StyleBox["\[OpenCurlyDoubleQuote]FrontierEdge\[CloseCurlyDoubleQuote]", 
  "Input"],
 " is called with a single argument, the edge in question. In this example, \
we use the function to highlight the edges which are traversed by the \
breadth-first exploration. "
}], "Text",ExpressionUUID->"4b74888e-c36f-4204-8397-c4cd83dce8e1"],

Cell[TextData[{
 "Alternatively, we could use ",
 StyleBox[ButtonBox["Sow",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sow"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " to obtain a list of the edges in the order they are followed. Note that ",
 StyleBox[ButtonBox["Sow",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sow"], "FunctionLink"],
 " accepts a single argument so it is not necessary to explicitly call it on \
a ",
 StyleBox[ButtonBox["Slot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Slot"], "FunctionLink"],
 " (",
 StyleBox["#", "Code"],
 ")."
}], "Text",ExpressionUUID->"c5a43f83-8736-4e45-b86e-a0b739a7d0d9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exercise13breadthList", "=", 
  RowBox[{
   RowBox[{"Reap", "[", 
    RowBox[{"BreadthFirstScan", "[", 
     RowBox[{"exercise13", ",", "\"\<a\>\"", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<FrontierEdge\>\"", "\[Rule]", "Sow"}], "}"}]}], "]"}], 
    "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"2", ",", "1"}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[185]:=",ExpressionUUID->"1955ec66-5562-485b-82b3-ce179eebcba0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[UndirectedEdge]", "\<\"b\"\>"}], ",", 
   RowBox[{"\<\"a\"\>", "\[UndirectedEdge]", "\<\"c\"\>"}], ",", 
   RowBox[{"\<\"c\"\>", "\[UndirectedEdge]", "\<\"d\"\>"}], ",", 
   RowBox[{"\<\"d\"\>", "\[UndirectedEdge]", "\<\"e\"\>"}], ",", 
   RowBox[{"\<\"d\"\>", "\[UndirectedEdge]", "\<\"f\"\>"}], ",", 
   RowBox[{"\<\"e\"\>", "\[UndirectedEdge]", "\<\"h\"\>"}], ",", 
   RowBox[{"\<\"f\"\>", "\[UndirectedEdge]", "\<\"g\"\>"}], ",", 
   RowBox[{"\<\"h\"\>", "\[UndirectedEdge]", "\<\"i\"\>"}], ",", 
   RowBox[{"\<\"g\"\>", "\[UndirectedEdge]", "\<\"j\"\>"}]}], "}"}]], "Output",\

 CellChangeTimes->{3.738785772040977*^9},
 CellLabel->
  "Out[185]=",ExpressionUUID->"3862656c-4ff5-46ed-88ed-f3c9c158671a"]
}, Open  ]],

Cell["We can now use this list to create an animation.", "Text",ExpressionUUID->"bb7b8044-4347-43b7-85f8-2bccad155fae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Animate", "[", 
  RowBox[{
   RowBox[{"HighlightGraph", "[", 
    RowBox[{"exercise13", ",", 
     RowBox[{"exercise13breadthList", "[", 
      RowBox[{"[", 
       RowBox[{"1", ";;", "i"}], "]"}], "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i", ",", "0", ",", "\"\<step\>\""}], "}"}], ",", "0", ",", 
     RowBox[{"Length", "[", "exercise13breadthList", "]"}], ",", "1"}], "}"}],
    ",", 
   RowBox[{"AnimationRunning", "\[Rule]", "False"}], ",", 
   RowBox[{"AnimationRepetitions", "\[Rule]", "1"}]}], "]"}]], "Input",
 CellLabel->
  "In[186]:=",ExpressionUUID->"a79808c6-7001-4ef2-8472-270f06605f6d"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`i$$], 0, "step"}, 0, 9, 1}}, Typeset`size$$ = {
    360., {44., 49.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`i$5129$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`i$$, $CellContext`i$5129$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      HighlightGraph[$CellContext`exercise13, 
        Part[$CellContext`exercise13breadthList, 
         Span[1, $CellContext`i$$]]], 
      "Specifications" :> {{{$CellContext`i$$, 0, "step"}, 0, 9, 1, 
         AnimationRunning -> False, AnimationRepetitions -> 1, 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
        "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
        True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
     ImageSizeCache->{403., {81., 86.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Animate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.738785772113011*^9},
 CellLabel->
  "Out[186]=",ExpressionUUID->"02736d35-9c86-4b0a-90c2-61226b3ae689"]
}, Open  ]],

Cell["\<\
We leave it to the reader to create a function that generates such an \
animation automatically.\
\>", "Text",ExpressionUUID->"03bd4af2-e783-41fb-bc57-ba37cb91f8a0"],

Cell[TextData[{
 "A second useful event that can be used with ",
 StyleBox[ButtonBox["DepthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/DepthFirstScan"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["BreadthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BreadthFirstScan"], "FunctionLink"],
 " is ",
 StyleBox["\[OpenCurlyDoubleQuote]DiscoverVertex\[CloseCurlyDoubleQuote]", 
  "Input"],
 ". This event occurs when a vertex is discovered for the first time. The \
associated function is called with up to three arguments: the vertex being \
discovered, the vertex currently being visited, and the distance the visited \
vertex is from the starting vertex."
}], "Text",ExpressionUUID->"5ffaf29b-48bb-45a2-a786-2c80ce35c7f8"],

Cell[TextData[{
 "The interested reader is encouraged to consult the help pages for",
 " ",
 StyleBox[ButtonBox["DepthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/DepthFirstScan"], "FunctionLink"],
 " or ",
 StyleBox[ButtonBox["BreadthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BreadthFirstScan"], "FunctionLink"],
 " for information on other events that can be used."
}], "Text",ExpressionUUID->"23a63386-e64c-48d6-ba2f-2d948a89af94"],

Cell["\<\
Despite the Wolfram Language\[CloseCurlyQuote]s existing functions, we will \
develop our own using depth-first and breadth-first search functions as a way \
to illustrate these important algorithms.\
\>", "Text",ExpressionUUID->"3bda1bb3-f82f-4179-84ef-d16a6c6660e6"],

Cell[CellGroupData[{

Cell["Depth-First Search", "Subsection",
 CellTags->"Section4a",ExpressionUUID->"bbc63933-6fe9-496e-9784-4fe47f50a3e2"],

Cell["\<\
We begin by implementing depth-first search. As the name of the algorithm \
suggests, vertices are visited in order of increasing depth of the spanning \
tree. Our implementation is based on Algorithm 1 of Section 11.4 of the \
textbook. \
\>", "Text",ExpressionUUID->"789be116-5fc1-496f-b172-0cc786cd0a76"],

Cell[TextData[{
 "Recall the terminology defined in the textbook. We say that we are \
\[OpenCurlyDoubleQuote]exploring a vertex\[CloseCurlyDoubleQuote] ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "77c6385e-8ba4-4ba2-a7ab-1b673ee204f6"],
 " from the time the vertex is first added to the spanning tree until we have \
backtracked back to ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "c882e88f-9134-4bd2-bb46-5c14245d6e40"],
 " for the last time. Note that at any step in the process, we are generally \
exploring multiple vertices. In particular, the root of the spanning tree \
starts being explored at the very beginning of the process and continues \
being explored until it terminates."
}], "Text",ExpressionUUID->"5a0e2680-69a1-44b8-bd44-fe838bc550b8"],

Cell[TextData[{
 "The function, which we call ",
 StyleBox["depthSearch", "Code"],
 ", will take two arguments: an undirected graph and a vertex in that graph. \
The function operates as follows:"
}], "Text",ExpressionUUID->"4e6742f0-0afc-4ed3-8751-687acda27714"],

Cell[CellGroupData[{

Cell[TextData[{
 "First, we check that the graph is connected using the Wolfram Language\
\[CloseCurlyQuote]s ",
 StyleBox[ButtonBox["ConnectedGraphQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ConnectedGraphQ"], "FunctionLink"],
 " function. If not, there can be no spanning tree and the function returns \
",
 StyleBox[ButtonBox["$Failed",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/$Failed"], "FunctionLink"],
 "."
}], "Item1Numbered",ExpressionUUID->"d55536b3-11b0-4eff-8395-50494d26f961"],

Cell["Next, we initialize the following variables:", "Item1Numbered",ExpressionUUID->"e3c3b8b8-ba3e-400f-820e-c4819928c15c"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["toVisit", "Code"],
 " will be the set of vertices of the graph that have not yet been visited. \
It is initialized to the set of vertices of the graph minus the initial \
vertex."
}], "Item2Numbered",ExpressionUUID->"3e486782-3b59-470d-9833-ea071ed800b7"],

Cell[TextData[{
 StyleBox["exploring", "Code"],
 " will be the list of vertices that are currently being explored. As \
vertices are visited, they are added to the end of the ",
 StyleBox["exploring", "Code"],
 " list. When a vertex has been fully explored, that is, when it has no \
neighbors not already visited, then we remove it from the ",
 StyleBox["exploring", "Code"],
 " list. ",
 StyleBox["exploring", "Code"],
 " is initialized to the vertex that is given as the second argument."
}], "Item2Numbered",ExpressionUUID->"73768286-eb9e-4da8-8ecd-aa3ef4d0b8b1"],

Cell[TextData[{
 StyleBox["T", "Code"],
 " will be the spanning tree that is constructed. It is initialized to the \
graph consisting of all the vertices of the graph, but with no edges. \
Provided that the graph is connected, we know that all the vertices will \
appear in ",
 StyleBox["T", "Code"],
 " and this saves us from adding them one at a time. "
}], "Item2Numbered",ExpressionUUID->"c3238d0a-c9b7-4367-aeb7-5b01c88b71d9"]
}, Open  ]],

Cell[TextData[{
 "Following initialization, we begin a ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop which terminates when the ",
 StyleBox["exploring", "Code"],
 " list is empty. The variable ",
 StyleBox["v", "Code"],
 " is set to the last element of the ",
 StyleBox["exploring", "Code"],
 " list. We then compute the intersection, ",
 StyleBox["N", "Code"],
 ", of the neighbors of ",
 StyleBox["v", "Code"],
 " and the ",
 StyleBox["toVisit", "Code"],
 " set of vertices not already contained in the tree. Either,"
}], "Item1Numbered",ExpressionUUID->"e3b516b5-bfae-4672-a672-5645fc04a776"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["N", "Code"],
 " is non-empty, in which case, one of its elements is chosen as ",
 StyleBox["w", "Code"],
 ", the next vertex to visit. The edge ",
 StyleBox["v\[DirectedEdge]w", "Code"],
 " is added to the tree ",
 StyleBox["T", "Code"],
 ". In addition, ",
 StyleBox["w", "Code"],
 " is removed from the ",
 StyleBox["toVisit", "Code"],
 " set and added to the end of the ",
 StyleBox["exploring", "Code"],
 " list. In the next iteration of the ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop, this new vertex will be set to be ",
 StyleBox["v", "Code"],
 "."
}], "Item2Numbered",ExpressionUUID->"70e748e7-ef27-4f1d-8c9c-4818cbbc022f"],

Cell[TextData[{
 StyleBox["N", "Code"],
 " is empty, in which case the vertex ",
 StyleBox["v", "Code"],
 " has been explored completely and so it can be removed from the ",
 StyleBox["exploring", "Code"],
 " list. The next iteration of the ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop will set ",
 StyleBox["v", "Code"],
 " to be the vertex one step back in the ",
 StyleBox["exploring", "Code"],
 " list. This is the \[OpenCurlyDoubleQuote]backtracking\
\[CloseCurlyDoubleQuote] step."
}], "Item2Numbered",ExpressionUUID->"aadcc8b7-4b76-4fda-b91c-5b14b755b4ef"]
}, Open  ]]
}, Open  ]],

Cell["Here, now, is the function.", "Text",ExpressionUUID->"889ed782-ac03-4b05-91eb-2b2a2a7982d3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"depthSearch", "[", 
   RowBox[{
    RowBox[{"G_", "?", "UndirectedGraphQ"}], ",", "startV_", ",", "opts___"}],
    "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "toVisit", ",", "exploring", ",", "T", ",", "v", ",", "N", ",", "w"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"ConnectedGraphQ", "[", "G", "]"}]}], ",", 
       RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"toVisit", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"VertexList", "[", "G", "]"}], ",", 
        RowBox[{"{", "startV", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"exploring", "=", 
      RowBox[{"{", "startV", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"T", "=", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"VertexList", "[", "G", "]"}], ",", 
        RowBox[{"{", "}"}], ",", "opts"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "exploring", "]"}], ">", "0"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"v", "=", 
         RowBox[{"exploring", "[", 
          RowBox[{"[", 
           RowBox[{"-", "1"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"N", "=", 
         RowBox[{"Intersection", "[", 
          RowBox[{
           RowBox[{"AdjacencyList", "[", 
            RowBox[{"G", ",", "v"}], "]"}], ",", "toVisit"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "N", "]"}], ">", "0"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"w", "=", 
            RowBox[{"N", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"T", "=", 
            RowBox[{"EdgeAdd", "[", 
             RowBox[{"T", ",", 
              RowBox[{"DirectedEdge", "[", 
               RowBox[{"v", ",", "w"}], "]"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"toVisit", "=", 
            RowBox[{"Complement", "[", 
             RowBox[{"toVisit", ",", 
              RowBox[{"{", "w", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
           
           RowBox[{"AppendTo", "[", 
            RowBox[{"exploring", ",", "w"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", "else", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"exploring", "=", 
           RowBox[{"Delete", "[", 
            RowBox[{"exploring", ",", 
             RowBox[{"-", "1"}]}], "]"}]}]}], "\[IndentingNewLine]", 
         "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "T"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[187]:=",ExpressionUUID->"26c1d342-5d81-4715-8779-27e47fe78556"],

Cell["We test this with our Exercise 13 example from above.", "Text",ExpressionUUID->"27b6b17d-2f88-4766-ae5c-130fab6af51a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"depthSearch", "[", 
  RowBox[{"exercise13", ",", "\"\<a\>\"", ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]], "Input",
 CellLabel->
  "In[188]:=",ExpressionUUID->"1012ec9f-283d-4fc9-8c98-d945ad1b8023"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "a", "b", "c", "d", "e", "f", "g", "h", "i", "j"}, {{{1, 2}, {2, 3}, {3,
        4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {7, 10}}, Null}, {
      VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{0., 0.}, {0., 0.9203579866168443}}, {{0., 
         0.9203579866168443}, {0., 1.8407159732336889`}}, {{0., 
         1.8407159732336889`}, {0., 2.7610739598505334`}}, {{0., 
         2.7610739598505334`}, {0.6902684899626333, 3.6814319464673777`}}, {{
         0.6902684899626333, 3.6814319464673777`}, {1.3805369799252667`, 
         2.7610739598505334`}}, {{1.3805369799252667`, 2.7610739598505334`}, {
         1.3805369799252667`, 1.8407159732336889`}}, {{1.3805369799252667`, 
         1.8407159732336889`}, {0.9203579866168444, 0.9203579866168443}}, {{
         1.3805369799252667`, 1.8407159732336889`}, {1.8407159732336889`, 
         0.9203579866168443}}, {{0.9203579866168444, 0.9203579866168443}, {
         0.9203579866168444, 0.}}}, 0.03493468166720967]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.}, 0.03493468166720967], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {0.03493468166720967, 0.03493468166720967}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 0.9203579866168443}, 0.03493468166720967], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.03493468166720967, 0.955292668284054}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 1.8407159732336889}, 0.03493468166720967], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {0.03493468166720967, 1.8756506549008984}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 2.7610739598505334}, 0.03493468166720967], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {0.03493468166720967, 2.796008641517743}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.6902684899626333, 3.6814319464673777}, 
          0.03493468166720967], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.725203171629843, 3.7163666281345873}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.3805369799252667, 2.7610739598505334}, 
          0.03493468166720967], 
         InsetBox["\<\"f\"\>", 
          Offset[{2, 2}, {1.4154716615924763, 2.796008641517743}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.3805369799252667, 1.8407159732336889}, 
          0.03493468166720967], 
         InsetBox["\<\"g\"\>", 
          Offset[{2, 2}, {1.4154716615924763, 1.8756506549008984}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.9203579866168444, 0.9203579866168443}, 
          0.03493468166720967], 
         InsetBox["\<\"h\"\>", 
          Offset[{2, 2}, {0.9552926682840541, 0.955292668284054}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.9203579866168444, 0.}, 0.03493468166720967], 
         InsetBox["\<\"i\"\>", 
          Offset[{2, 2}, {0.9552926682840541, 0.03493468166720967}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.8407159732336889, 0.9203579866168443}, 
          0.03493468166720967], 
         InsetBox["\<\"j\"\>", 
          Offset[{2, 2}, {1.8756506549008984, 0.955292668284054}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785772272945*^9},
 CellLabel->
  "Out[188]=",ExpressionUUID->"1d44187d-502b-414c-9254-c3c8097ad044"]
}, Open  ]],

Cell[TextData[{
 "We can reposition the vertices to match the original by setting ",
 StyleBox[ButtonBox["VertexCoordinates",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexCoordinates"], "FunctionLink"],
 " to the result of ",
 StyleBox[ButtonBox["GraphEmbedding",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GraphEmbedding"], "FunctionLink"],
 " applied to the original graph."
}], "Text",ExpressionUUID->"8193e4b8-8563-4435-93e5-729cd7e95879"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"depthSearch", "[", 
  RowBox[{"exercise13", ",", "\"\<a\>\"", ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
   RowBox[{"VertexCoordinates", "\[Rule]", 
    RowBox[{"GraphEmbedding", "[", "exercise13", "]"}]}]}], "]"}]], "Input",
 CellLabel->
  "In[189]:=",ExpressionUUID->"ff00ae7f-ad97-4c49-b66c-6fc1f4543961"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "a", "b", "c", "d", "e", "f", "g", "h", "i", "j"}, {{{1, 2}, {2, 3}, {3,
        4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {7, 10}}, Null}, {
      VertexLabels -> {"Name"}, 
       VertexCoordinates -> {{0, 1}, {0, 0}, {1, 0.5}, {2, 0.5}, {3, 1}, {3, 
         0}, {4, 0}, {4, 1}, {5, 1}, {5, 0}}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{0., 1.}, {0., 0.}}, {{0., 0.}, {1., 0.5}}, {{1., 0.5}, {
         2., 0.5}}, {{2., 0.5}, {3., 1.}}, {{3., 1.}, {3., 0.}}, {{3., 0.}, {
         4., 0.}}, {{4., 0.}, {4., 1.}}, {{4., 0.}, {5., 0.}}, {{4., 1.}, {5.,
          1.}}}, 0.043048128342245986`]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 1.}, 0.043048128342245986], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {0.043048128342245986, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.043048128342245986], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.043048128342245986, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.5}, 0.043048128342245986], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {1.043048128342246, 0.543048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{2., 0.5}, 0.043048128342245986], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {2.043048128342246, 0.543048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{3., 1.}, 0.043048128342245986], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {3.043048128342246, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{3., 0.}, 0.043048128342245986], 
         InsetBox["\<\"f\"\>", 
          Offset[{2, 2}, {3.043048128342246, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{4., 0.}, 0.043048128342245986], 
         InsetBox["\<\"g\"\>", 
          Offset[{2, 2}, {4.043048128342246, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{4., 1.}, 0.043048128342245986], 
         InsetBox["\<\"h\"\>", 
          Offset[{2, 2}, {4.043048128342246, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{5., 1.}, 0.043048128342245986], 
         InsetBox["\<\"i\"\>", 
          Offset[{2, 2}, {5.043048128342246, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{5., 0.}, 0.043048128342245986], 
         InsetBox["\<\"j\"\>", 
          Offset[{2, 2}, {5.043048128342246, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785772334201*^9},
 CellLabel->
  "Out[189]=",ExpressionUUID->"3f159239-8d1e-46ee-aeb1-b55a326cc0f1"]
}, Open  ]],

Cell[TextData[{
 "We can also use ",
 StyleBox[ButtonBox["HighlightGraph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HighlightGraph"], "FunctionLink"],
 " to highlight the spanning tree relative to the original graph. However, \
since our function generates directed edges and the original graph was \
undirected, we need to use ",
 StyleBox[ButtonBox["UndirectedGraph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/UndirectedGraph"], "FunctionLink"],
 " to convert the edges of the spanning tree back to undirected edges."
}], "Text",ExpressionUUID->"f0f3a2b7-21f0-4209-a708-133c8721ea69"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"exercise13", ",", 
   RowBox[{"UndirectedGraph", "[", 
    RowBox[{"depthSearch", "[", 
     RowBox[{"exercise13", ",", "\"\<a\>\""}], "]"}], "]"}]}], "]"}]], "Input",\

 CellLabel->
  "In[190]:=",ExpressionUUID->"785b43e0-aa1e-4a8e-aea8-bf00d8f93a07"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j"}, {
      Null, {{1, 2}, {1, 3}, {2, 3}, {3, 4}, {4, 5}, {4, 6}, {5, 6}, {5, 8}, {
       6, 7}, {7, 8}, {7, 10}, {8, 9}}}, {
      VertexLabels -> {"Name"}, GraphHighlight -> {
         UndirectedEdge["c", "d"], 
         UndirectedEdge["f", "g"], 
         UndirectedEdge["h", "i"], "i", "d", "e", "a", "j", 
         UndirectedEdge["g", "h"], 
         UndirectedEdge["g", "j"], "b", 
         UndirectedEdge["b", "c"], "c", 
         UndirectedEdge["e", "f"], "f", 
         UndirectedEdge["d", "e"], 
         UndirectedEdge["a", "b"], "h", "g"}, 
       VertexCoordinates -> {{0, 1}, {0, 0}, {1, 0.5}, {2, 0.5}, {3, 1}, {3, 
         0}, {4, 0}, {4, 1}, {5, 1}, {5, 0}}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Hue[1, 1, 0.7], Opacity[1], 
         {Arrowheads[0.], 
          ArrowBox[{{0., 1.}, {0., 0.}}, 0.043048128342245986`]}}, 
        {Arrowheads[0.], 
         ArrowBox[{{0., 1.}, {1., 0.5}}, 0.043048128342245986`]}, 
        {Hue[1, 1, 0.7], Opacity[1], 
         {Arrowheads[0.], 
          ArrowBox[{{0., 0.}, {1., 0.5}}, 0.043048128342245986`]}}, 
        {Hue[1, 1, 0.7], Opacity[1], 
         {Arrowheads[0.], 
          ArrowBox[{{1., 0.5}, {2., 0.5}}, 0.043048128342245986`]}}, 
        {Hue[1, 1, 0.7], Opacity[1], 
         {Arrowheads[0.], 
          ArrowBox[{{2., 0.5}, {3., 1.}}, 0.043048128342245986`]}}, 
        {Arrowheads[0.], 
         ArrowBox[{{2., 0.5}, {3., 0.}}, 0.043048128342245986`]}, 
        {Hue[1, 1, 0.7], Opacity[1], 
         {Arrowheads[0.], 
          ArrowBox[{{3., 1.}, {3., 0.}}, 0.043048128342245986`]}}, 
        {Arrowheads[0.], 
         ArrowBox[{{3., 1.}, {4., 1.}}, 0.043048128342245986`]}, 
        {Hue[1, 1, 0.7], Opacity[1], 
         {Arrowheads[0.], 
          ArrowBox[{{3., 0.}, {4., 0.}}, 0.043048128342245986`]}}, 
        {Hue[1, 1, 0.7], Opacity[1], 
         {Arrowheads[0.], 
          ArrowBox[{{4., 0.}, {4., 1.}}, 0.043048128342245986`]}}, 
        {Hue[1, 1, 0.7], Opacity[1], 
         {Arrowheads[0.], 
          ArrowBox[{{4., 0.}, {5., 0.}}, 0.043048128342245986`]}}, 
        {Hue[1, 1, 0.7], Opacity[1], 
         {Arrowheads[0.], 
          ArrowBox[{{4., 1.}, {5., 1.}}, 0.043048128342245986`]}}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{0., 1.}, 0.043048128342245986]}, 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {0.043048128342245986, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{0., 0.}, 0.043048128342245986]}, 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.043048128342245986, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{1., 0.5}, 0.043048128342245986]}, 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {1.043048128342246, 0.543048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{2., 0.5}, 0.043048128342245986]}, 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {2.043048128342246, 0.543048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{3., 1.}, 0.043048128342245986]}, 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {3.043048128342246, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{3., 0.}, 0.043048128342245986]}, 
         InsetBox["\<\"f\"\>", 
          Offset[{2, 2}, {3.043048128342246, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{4., 0.}, 0.043048128342245986]}, 
         InsetBox["\<\"g\"\>", 
          Offset[{2, 2}, {4.043048128342246, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{4., 1.}, 0.043048128342245986]}, 
         InsetBox["\<\"h\"\>", 
          Offset[{2, 2}, {4.043048128342246, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{5., 1.}, 0.043048128342245986]}, 
         InsetBox["\<\"i\"\>", 
          Offset[{2, 2}, {5.043048128342246, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{5., 0.}, 0.043048128342245986]}, 
         InsetBox["\<\"j\"\>", 
          Offset[{2, 2}, {5.043048128342246, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7387857724054737`*^9},
 CellLabel->
  "Out[190]=",ExpressionUUID->"4176469e-6790-4fda-b927-bc586f98d15b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Breadth-First Search", "Subsection",
 CellTags->"Section4b",ExpressionUUID->"ac7ec516-07ab-485a-a7d0-5de60b065c6a"],

Cell["\<\
We now turn to an implementation of a breadth-first search. Recall that the \
breadth-first algorithm works by examining all vertices at the current depth \
of the spanning tree before moving on to the next level of the graph. Our \
implementation will follow Algorithm 2 of Section 11.4 of the text. \
\>", "Text",ExpressionUUID->"1c2d8dfc-7dc0-49a5-9b18-8e7accf8007e"],

Cell[TextData[{
 "The function, to be called ",
 StyleBox["breadthSearch", "Code"],
 ", again takes two arguments: an undirected graph and a vertex to act as the \
starting point. It proceeds as follows:"
}], "Text",ExpressionUUID->"569e33c8-d59f-4c15-8217-47f6d3ca24db"],

Cell[CellGroupData[{

Cell[TextData[{
 "First, we check that the graph is connected using the Wolfram Language\
\[CloseCurlyQuote]s ",
 StyleBox[ButtonBox["ConnectedGraphQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ConnectedGraphQ"], "FunctionLink"],
 " function."
}], "Item1Numbered",ExpressionUUID->"6a64cbde-a0d9-4180-afef-614bb3a2d297"],

Cell["Next, we initialize the following variables:", "Item1Numbered",ExpressionUUID->"5e3ac4cd-65d1-4a65-8322-daa48250bd80"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["toVisit", "Code"],
 ", as before, will be the set of vertices of the graph not yet visited. It \
is initialized to the set of vertices of the graph with the initial vertex \
excluded."
}], "Item2Numbered",ExpressionUUID->"a1f93847-4dfc-4dd4-b3e0-51cff6514f93"],

Cell[TextData[{
 StyleBox["toProcess", "Code"],
 " will be the list of vertices that have been determined to be incident to a \
vertex in the tree but which have not yet been processed. ",
 StyleBox["toProcess", "Code"],
 " is initialized to the vertex that is given as the second argument to the \
procedure."
}], "Item2Numbered",ExpressionUUID->"ad232d55-ec8e-4d3b-bf87-45b790b5bfa0"],

Cell[TextData[{
 StyleBox["T", "Code"],
 " will be the spanning tree that is constructed. Once again, it is \
initialized to the tree consisting of all the vertices of the given graph, \
but with no edges."
}], "Item2Numbered",ExpressionUUID->"116a4030-b9b2-4bd1-b5d1-64eb2bd0d74c"]
}, Open  ]],

Cell[TextData[{
 "Following initialization, we begin a ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop that terminates when the ",
 StyleBox["toProcess", "Code"],
 " list is empty. The variable ",
 StyleBox["v", "Code"],
 " is set to the ",
 StyleBox["first",
  FontSlant->"Italic"],
 " element of the ",
 StyleBox["toProcess", "Code"],
 " list. We then compute the intersection, ",
 StyleBox["N", "Code"],
 ", of the neighbors of ",
 StyleBox["v", "Code"],
 " and the ",
 StyleBox["toVisit", "Code"],
 " set. For each element ",
 StyleBox["w", "Code"],
 " of ",
 StyleBox["N", "Code"],
 ", an edge ",
 StyleBox["v\[DirectedEdge]w", "Code"],
 " is added to ",
 StyleBox["T", "Code"],
 " and ",
 StyleBox["w", "Code"],
 " is added to the end of the ",
 StyleBox["toProcess", "Code"],
 " list and removed from the ",
 StyleBox["toVisit", "Code"],
 " set. Then, ",
 StyleBox["v", "Code"],
 " is removed from ",
 StyleBox["toProcess", "Code"],
 "."
}], "Item1Numbered",ExpressionUUID->"1983df22-e31c-4d2f-81fe-14a9b3011246"]
}, Open  ]],

Cell[TextData[{
 "Observe that, since neighbors are added to the end of the ",
 StyleBox["toProcess", "Code"],
 " list and are processed from the beginning of the list, we are assured that \
all vertices on a given level will be processed before any vertex at a lower \
level."
}], "Text",ExpressionUUID->"49f1b268-2678-485a-8539-0dbf6eadcd37"],

Cell["Here is the implementation. ", "Text",ExpressionUUID->"2f8e7471-0e3e-4f2f-8971-7fd53d7d96af"],

Cell[BoxData[
 RowBox[{
  RowBox[{"breadthSearch", "[", 
   RowBox[{
    RowBox[{"G_", "?", "UndirectedGraphQ"}], ",", "startV_", ",", "opts___"}],
    "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "toVisit", ",", "toProcess", ",", "T", ",", "v", ",", "N", ",", "w"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"ConnectedGraphQ", "[", "G", "]"}]}], ",", 
       RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"toVisit", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"VertexList", "[", "G", "]"}], ",", 
        RowBox[{"{", "startV", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"toProcess", "=", 
      RowBox[{"{", "startV", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"T", "=", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"VertexList", "[", "G", "]"}], ",", 
        RowBox[{"{", "}"}], ",", "opts"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "toProcess", "]"}], ">", "0"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"v", "=", 
         RowBox[{"toProcess", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"N", "=", 
         RowBox[{"Intersection", "[", 
          RowBox[{
           RowBox[{"AdjacencyList", "[", 
            RowBox[{"G", ",", "v"}], "]"}], ",", "toVisit"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"T", "=", 
            RowBox[{"EdgeAdd", "[", 
             RowBox[{"T", ",", 
              RowBox[{"v", "\[DirectedEdge]", "w"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"toProcess", ",", "w"}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"toVisit", "=", 
            RowBox[{"Complement", "[", 
             RowBox[{"toVisit", ",", 
              RowBox[{"{", "w", "}"}]}], "]"}]}], ";"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"w", ",", "N"}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"toProcess", "=", 
         RowBox[{"Delete", "[", 
          RowBox[{"toProcess", ",", "1"}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "T"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[191]:=",ExpressionUUID->"1fdf1cac-d8ac-4246-a150-fe8b7422e3e9"],

Cell["Once again, we illustrate using Exercise 13.", "Text",ExpressionUUID->"5cece031-e768-493c-9361-54d0cff36b88"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"breadthSearch", "[", 
  RowBox[{"exercise13", ",", "\"\<a\>\"", ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
   RowBox[{"VertexCoordinates", "\[Rule]", 
    RowBox[{"GraphEmbedding", "[", "exercise13", "]"}]}]}], "]"}]], "Input",
 CellLabel->
  "In[192]:=",ExpressionUUID->"f2d428c3-e9ed-4462-a255-5fb20bf9f731"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "a", "b", "c", "d", "e", "f", "g", "h", "i", "j"}, {{{1, 2}, {1, 3}, {3,
        4}, {4, 5}, {4, 6}, {5, 8}, {6, 7}, {8, 9}, {7, 10}}, Null}, {
      VertexLabels -> {"Name"}, 
       VertexCoordinates -> {{0, 1}, {0, 0}, {1, 0.5}, {2, 0.5}, {3, 1}, {3, 
         0}, {4, 0}, {4, 1}, {5, 1}, {5, 0}}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{0., 1.}, {0., 0.}}, {{0., 1.}, {1., 0.5}}, {{1., 0.5}, {
         2., 0.5}}, {{2., 0.5}, {3., 1.}}, {{2., 0.5}, {3., 0.}}, {{3., 1.}, {
         4., 1.}}, {{3., 0.}, {4., 0.}}, {{4., 0.}, {5., 0.}}, {{4., 1.}, {5.,
          1.}}}, 0.043048128342245986`]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 1.}, 0.043048128342245986], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {0.043048128342245986, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.043048128342245986], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.043048128342245986, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.5}, 0.043048128342245986], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {1.043048128342246, 0.543048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{2., 0.5}, 0.043048128342245986], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {2.043048128342246, 0.543048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{3., 1.}, 0.043048128342245986], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {3.043048128342246, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{3., 0.}, 0.043048128342245986], 
         InsetBox["\<\"f\"\>", 
          Offset[{2, 2}, {3.043048128342246, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{4., 0.}, 0.043048128342245986], 
         InsetBox["\<\"g\"\>", 
          Offset[{2, 2}, {4.043048128342246, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{4., 1.}, 0.043048128342245986], 
         InsetBox["\<\"h\"\>", 
          Offset[{2, 2}, {4.043048128342246, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{5., 1.}, 0.043048128342245986], 
         InsetBox["\<\"i\"\>", 
          Offset[{2, 2}, {5.043048128342246, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{5., 0.}, 0.043048128342245986], 
         InsetBox["\<\"j\"\>", 
          Offset[{2, 2}, {5.043048128342246, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785772483365*^9},
 CellLabel->
  "Out[192]=",ExpressionUUID->"d066f54d-febe-43d4-8429-a3c75510ce80"]
}, Open  ]],

Cell["\<\
Before moving on to backtracking, we take a moment to compare the trees \
produced by the two algorithms.\
\>", "Text",ExpressionUUID->"734235b8-cf33-450a-b6af-42a5c1701329"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphDisjointUnion", "[", 
  RowBox[{
   RowBox[{"breadthSearch", "[", 
    RowBox[{"exercise13", ",", "\"\<a\>\""}], "]"}], ",", 
   RowBox[{"depthSearch", "[", 
    RowBox[{"exercise13", ",", "\"\<a\>\""}], "]"}], ",", 
   RowBox[{"GraphLayout", "\[Rule]", "\"\<LayeredDigraphEmbedding\>\""}]}], 
  "]"}]], "Input",
 CellLabel->
  "In[193]:=",ExpressionUUID->"e9aaa347-c002-45a1-bdcf-f6aecc2f1018"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
       20}, {{{1, 2}, {1, 3}, {3, 4}, {4, 5}, {4, 6}, {5, 8}, {6, 7}, {8, 
       9}, {7, 10}, {11, 12}, {12, 13}, {13, 14}, {14, 15}, {15, 16}, {16, 
       17}, {17, 18}, {18, 19}, {17, 20}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding"}]]}, 
    TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAQAWIQHSbscpfdQdjhQcfWHyIM7/avUevYxd/A51BwJKqG
i+H/fpg8Ot8iSdeOtYH9AEw9hM9/AFUewZfZKDaf6YAwXD12vjiaevEDRRB7
7WHug/Fh7oHxYe5B5fPD+TD7UPniaHxpNL48nN8X0e3P+EDxwBOIO+DyAO3W
fPg=
       "], {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
         ArrowBox[{1, 2}, 0.05783410138248847], 
         ArrowBox[{1, 3}, 0.05783410138248847], 
         ArrowBox[{3, 4}, 0.05783410138248847], 
         ArrowBox[{4, 5}, 0.05783410138248847], 
         ArrowBox[{4, 6}, 0.05783410138248847], 
         ArrowBox[{5, 8}, 0.05783410138248847], 
         ArrowBox[{6, 7}, 0.05783410138248847], 
         ArrowBox[{7, 10}, 0.05783410138248847], 
         ArrowBox[{8, 9}, 0.05783410138248847], 
         ArrowBox[{11, 12}, 0.05783410138248847], 
         ArrowBox[{12, 13}, 0.05783410138248847], 
         ArrowBox[{13, 14}, 0.05783410138248847], 
         ArrowBox[{14, 15}, 0.05783410138248847], 
         ArrowBox[{15, 16}, 0.05783410138248847], 
         ArrowBox[{16, 17}, 0.05783410138248847], 
         ArrowBox[{17, 18}, 0.05783410138248847], 
         ArrowBox[{17, 20}, 0.05783410138248847], 
         ArrowBox[{18, 19}, 0.05783410138248847]}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         DiskBox[1, 0.05783410138248847], DiskBox[2, 0.05783410138248847], 
         DiskBox[3, 0.05783410138248847], DiskBox[4, 0.05783410138248847], 
         DiskBox[5, 0.05783410138248847], DiskBox[6, 0.05783410138248847], 
         DiskBox[7, 0.05783410138248847], DiskBox[8, 0.05783410138248847], 
         DiskBox[9, 0.05783410138248847], DiskBox[10, 0.05783410138248847], 
         DiskBox[11, 0.05783410138248847], DiskBox[12, 0.05783410138248847], 
         DiskBox[13, 0.05783410138248847], DiskBox[14, 0.05783410138248847], 
         DiskBox[15, 0.05783410138248847], DiskBox[16, 0.05783410138248847], 
         DiskBox[17, 0.05783410138248847], DiskBox[18, 0.05783410138248847], 
         DiskBox[19, 0.05783410138248847], 
         DiskBox[20, 0.05783410138248847]}}]],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785772543331*^9},
 CellLabel->
  "Out[193]=",ExpressionUUID->"d6b092ff-eebd-4294-ae56-b238904d1a73"]
}, Open  ]],

Cell["\<\
Notice that the two spanning trees are quite different. In particular, the \
depth-first search has a deep and thin structure, whereas the breadth-first \
search is shorter and wider.\
\>", "Text",ExpressionUUID->"638dbecd-4a1e-410e-a8d9-e9805d5e3759"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Graph Coloring via Backtracking", "Subsection",
 CellTags->"Section4c",ExpressionUUID->"08f23100-fa3a-40a8-946a-6bb403785b21"],

Cell[TextData[{
 "Backtracking is a method that can be used to find solutions to problems \
that might be impractical to solve using exhaustive search techniques. \
Backtracking is based on the systematic search for a solution to a problem \
using a decision tree. (See the text for a complete discussion.) Here, we \
show how to use backtracking to solve several different problems, including \
coloring a graph, the ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "d001a7ab-59c1-4c53-80ef-199c7d9c367f"],
 "-queens problem, and the subset sum problem. "
}], "Text",ExpressionUUID->"ecb67f7e-a986-4503-a2ff-04178cfa0145"],

Cell[TextData[{
 "The first problem we will attack via a backtracking procedure is the \
problem of coloring a graph using ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "67405958-507d-4875-b04e-45559836a9ad"],
 " colors, where ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "b576ef7c-f864-4f6c-8922-e88f3f9f8ffd"],
 " is a positive integer. Given a graph, we will attempt to color it using ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "85b2169a-6acd-4b69-8860-85fdc93b5d74"],
 " colors using the method described in Example 6 of Section 11.4."
}], "Text",ExpressionUUID->"fe792717-7e94-4d61-88fc-817e851ee3af"],

Cell[CellGroupData[{

Cell[TextData[{
 "Fix an order on the vertices of the graph, say ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["v", "1"], ",", 
    SubscriptBox["v", "2"], ",", "\[Ellipsis]", ",", 
    SubscriptBox["v", "m"]}], TraditionalForm]],ExpressionUUID->
  "f5790127-d0d7-4405-9fb0-827597717ca8"],
 " and fix an ordering of the colors as color 1, color 2, ..., color ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "48f5166d-432c-49e4-b3cf-c0bdfdc0af6f"],
 ". We will use the ordering of the vertices that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " automatically imposes. For the colors, we will require an ordered list of \
colors as one of the arguments to the function."
}], "Item1Numbered",ExpressionUUID->"f077bcd7-e793-4fbb-8ea8-649705121dcc"],

Cell[TextData[{
 "We store the current state of the coloring in a list we will call ",
 StyleBox["coloring", "Code"],
 ". The ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "f98076db-f9a3-4789-bef2-0d01b044572c"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " entry in this list will correspond to the color of the ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "bb1c498e-863f-4618-a334-41d707809048"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " vertex. For example, ",
 StyleBox["coloring = {1,2,1}", "Code"],
 ", corresponds to vertex ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["v", "1"], TraditionalForm]],ExpressionUUID->
  "c13fe280-21b8-4640-a43e-7b91914d78f8"],
 " assigned color 1, vertex ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["v", "2"], TraditionalForm]],ExpressionUUID->
  "db682e37-4af1-4e56-a9bc-8b642ca1de7f"],
 " assigned color 2, and vertex ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["v", "3"], TraditionalForm]],ExpressionUUID->
  "f14a1576-56c9-4e25-9c8b-a3edc282129c"],
 " assigned color 1. This ",
 StyleBox["coloring", "Code"],
 " list is similar to the ",
 StyleBox["exploring", "Code"],
 " list from ",
 StyleBox["depthSearch", "Code"],
 ". In both cases, you can think of the list as storing the path from the \
root of the tree to the current vertex. In this case, the level, which \
corresponds to the position in the list, carries additional information. \
Specifically, level ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "e6bfd986-e706-40c2-999b-401bda1a39ac"],
 " in the decision tree (i.e., position ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "c4c1aca7-3bb8-4aa9-bc6b-16ee30008136"],
 " in the ",
 StyleBox["coloring", "Code"],
 " list) corresponds to deciding the color of vertex ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["v", "k"], TraditionalForm]],ExpressionUUID->
  "defcf44f-4280-43ca-9994-001308078927"],
 "."
}], "Item1Numbered",ExpressionUUID->"e80e23d0-a303-4921-9b9f-0fd980f57d78"],

Cell[TextData[{
 "We initialize ",
 StyleBox["coloring", "Code"],
 " to ",
 StyleBox["{1}", "Code"],
 " and set a counter variable ",
 StyleBox["i", "Code"],
 " to 2. The variable ",
 StyleBox["i", "Code"],
 " will indicate the vertex that requires a decision."
}], "Item1Numbered",ExpressionUUID->"f302c010-b81e-4d73-be47-c7e1cef95018"],

Cell[TextData[{
 "Set ",
 StyleBox["N", "Code"],
 " equal to the neighbors of the ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "39e84fba-6575-4e99-88fc-294003db6a2b"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " vertex of the graph, and then construct a set, ",
 StyleBox["used", "Code"],
 ", consisting of the indices of the colors assigned to the neighbors. The ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "c5415677-b9d0-476f-a00b-ee26f2309abd"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " vertex will be assigned the color with the smallest index not in ",
 StyleBox["used", "Code"],
 ", assuming there are any remaining colors."
}], "Item1Numbered",ExpressionUUID->"46a4ca81-6dbe-423a-9971-4864f739054a"],

Cell[TextData[{
 "If there are no possible colors for the ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "e2a2b5b4-705d-4cfb-a15e-c65556ce01e3"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " vertex, then we must backtrack. We decrease ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "9eb49c85-97ce-4a7c-8e68-f42070afad90"],
 " by one. To ensure that we do not repeat a choice already made when we \
revisit a vertex, we make the following modification to how colors are \
chosen. If the ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "582425b8-2189-493e-a4a0-7f0420302d47"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " position of ",
 StyleBox["coloring", "Code"],
 " has already been set, then we know we are in the process of backtracking. \
We insist that the new choice for the color of vertex ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "06f2ee17-0084-43c3-a024-9cf7d6041385"],
 " is the smallest possible color greater than the current color."
}], "Item1Numbered",ExpressionUUID->"1e7e637a-1e07-47b6-ab05-b02337682543"],

Cell[TextData[{
 "The function terminates in one of two cases. If ",
 StyleBox["i", "Code"],
 " is set to a value greater than the number of vertices, then we know that \
",
 StyleBox["coloring", "Code"],
 " contains a valid assignment for all vertices. On the other hand, if ",
 StyleBox["i", "Code"],
 " is ever set to 1, then we know that we have backtracked all the way to the \
root. Since the color of the first vertex does not affect the validity of the \
coloring, this indicates that we have exhausted all possible colorings and \
that the graph cannot be colored with ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "723f4d25-495d-408b-8c95-124cfa3398ec"],
 " colors."
}], "Item1Numbered",ExpressionUUID->"cba1bfd1-327f-4418-a0d8-ce868bf2f297"]
}, Open  ]],

Cell[TextData[{
 "Our function will be called ",
 StyleBox["backColor", "Code"],
 ". It will accept two arguments: the graph to be colored and a list of \
colors. If it is successful, it will display the graph with the vertices \
colored. If it determines that there is no ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "bade21d3-5796-4a39-bc75-02677b8b0c13"],
 "-coloring of the graph, it will return ",
 StyleBox[ButtonBox["$Failed",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/$Failed"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"f12ddd2e-1807-4191-8d22-81ce62a57a32"],

Cell[BoxData[
 RowBox[{
  RowBox[{"backColor", "[", 
   RowBox[{"G_Graph", ",", "C_List"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "verts", ",", "numverts", ",", "allcolorsL", ",", "k", ",", "coloring", 
      ",", "i", ",", "N", ",", "j", ",", "used", ",", "available", ",", "g"}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"verts", "=", 
      RowBox[{"VertexList", "[", "G", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"numverts", "=", 
      RowBox[{"Length", "[", "verts", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"allcolorsL", "=", 
      RowBox[{"Range", "[", 
       RowBox[{"Length", "[", "C", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"coloring", "=", 
      RowBox[{"{", "1", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"i", "=", "2"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"i", ">", "1"}], "&&", 
        RowBox[{"i", "\[LessEqual]", "numverts"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"N", "=", 
         RowBox[{"VertexList", "[", 
          RowBox[{"NeighborhoodGraph", "[", 
           RowBox[{"G", ",", 
            RowBox[{"verts", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"used", "=", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"j", "=", "1"}], ",", 
          RowBox[{"j", "\[LessEqual]", 
           RowBox[{"i", "-", "1"}]}], ",", 
          RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{"N", ",", 
               RowBox[{"verts", "[", 
                RowBox[{"[", "j", "]"}], "]"}]}], "]"}], ",", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"used", ",", 
               RowBox[{"coloring", "[", 
                RowBox[{"[", "j", "]"}], "]"}]}], "]"}]}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "coloring", "]"}], "\[GreaterEqual]", "i"}],
           ",", 
          RowBox[{"used", "=", 
           RowBox[{"Union", "[", 
            RowBox[{"used", ",", 
             RowBox[{"Range", "[", 
              RowBox[{"coloring", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "]"}]}]}], "]"}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"available", "=", 
         RowBox[{"Complement", "[", 
          RowBox[{"allcolorsL", ",", "used"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "available", "]"}], ">", "0"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coloring", "=", 
            RowBox[{"Append", "[", 
             RowBox[{
              RowBox[{"coloring", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", 
                 RowBox[{"i", "-", "1"}]}], "]"}], "]"}], ",", 
              RowBox[{"First", "[", "available", "]"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"i", "++"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", "else", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "coloring", "]"}], "\[GreaterEqual]", 
              "i"}], ",", 
             RowBox[{"coloring", "=", 
              RowBox[{"coloring", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", 
                 RowBox[{"i", "-", "1"}]}], "]"}], "]"}]}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"i", "--"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"i", ">", "numverts"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"g", "=", "G"}], ";", "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"k", "=", "1"}], ",", 
          RowBox[{"k", "\[LessEqual]", "numverts"}], ",", 
          RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"PropertyValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"g", ",", 
               RowBox[{"verts", "[", 
                RowBox[{"[", "k", "]"}], "]"}]}], "}"}], ",", "VertexStyle"}],
             "]"}], "=", 
           RowBox[{"C", "[", 
            RowBox[{"[", 
             RowBox[{"coloring", "[", 
              RowBox[{"[", "k", "]"}], "]"}], "]"}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "g", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", "else", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "$Failed", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[194]:=",ExpressionUUID->"6d9856c4-ff90-4dd1-adf6-07b070b5e992"],

Cell["\<\
We test our function on the example given in Figure 11 of Section 11.4 of the \
main text.\
\>", "Text",ExpressionUUID->"b8c55835-787d-4cf8-a170-120e0330506f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"figure11Graph", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\"", ",", 
      "\"\<e\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<b\>\""}], ",", 
      RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<e\>\""}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<c\>\""}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<d\>\""}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<e\>\""}], ",", 
      RowBox[{"\"\<c\>\"", "\[Rule]", "\"\<d\>\""}], ",", 
      RowBox[{"\"\<d\>\"", "\[Rule]", "\"\<e\>\""}]}], "}"}], ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "False"}], ",", 
    RowBox[{"VertexCoordinates", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[195]:=",ExpressionUUID->"e51d1376-4a4e-4a91-81d2-f41a1bf15e87"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"a", "b", "c", "d", "e"}, {
      Null, {{1, 2}, {1, 5}, {2, 3}, {2, 4}, {2, 5}, {3, 4}, {4, 5}}}, {
      VertexLabels -> {"Name"}, 
       VertexCoordinates -> {{0, 0}, {1, 0}, {2, 0}, {2, 1}, {0, 1}}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Arrowheads[0.], ArrowBox[{{0., 0.}, {1., 0.}}, 0.02261146496815286]}, 
        {Arrowheads[0.], ArrowBox[{{0., 0.}, {0., 1.}}, 0.02261146496815286]}, 
        {Arrowheads[0.], ArrowBox[{{1., 0.}, {2., 0.}}, 0.02261146496815286]}, 
        {Arrowheads[0.], ArrowBox[{{1., 0.}, {2., 1.}}, 0.02261146496815286]}, 
        {Arrowheads[0.], ArrowBox[{{1., 0.}, {0., 1.}}, 0.02261146496815286]}, 
        {Arrowheads[0.], ArrowBox[{{2., 0.}, {2., 1.}}, 0.02261146496815286]}, 
        {Arrowheads[0.], 
         ArrowBox[{{2., 1.}, {0., 1.}}, 0.02261146496815286]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.}, 0.02261146496815286], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {0.02261146496815286, 0.02261146496815286}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.02261146496815286], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {1.0226114649681528, 0.02261146496815286}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{2., 0.}, 0.02261146496815286], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {2.022611464968153, 0.02261146496815286}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.02261146496815286], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {2.022611464968153, 1.0226114649681528}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.02261146496815286], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.02261146496815286, 1.0226114649681528}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7387857726120243`*^9},
 CellLabel->
  "Out[195]=",ExpressionUUID->"65a1ca23-dbc5-480b-862c-5b1389058410"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"backColor", "[", 
  RowBox[{"figure11Graph", ",", 
   RowBox[{"{", 
    RowBox[{"Red", ",", "Blue", ",", "Green"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[196]:=",ExpressionUUID->"7050d8ff-a837-4914-a013-db5ab80aed90"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"a", "b", "c", "d", "e"}, {
      Null, {{1, 2}, {1, 5}, {2, 3}, {2, 4}, {2, 5}, {3, 4}, {4, 5}}}, {
      VertexLabels -> {"Name"}, 
       VertexStyle -> {
        "c" -> RGBColor[0, 1, 0], "b" -> RGBColor[0, 0, 1], "e" -> 
         RGBColor[0, 1, 0], "d" -> RGBColor[1, 0, 0], "a" -> 
         RGBColor[1, 0, 0]}, 
       VertexCoordinates -> {{0, 0}, {1, 0}, {2, 0}, {2, 1}, {0, 1}}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Arrowheads[0.], ArrowBox[{{0., 0.}, {1., 0.}}, 0.02261146496815286]}, 
        {Arrowheads[0.], ArrowBox[{{0., 0.}, {0., 1.}}, 0.02261146496815286]}, 
        {Arrowheads[0.], ArrowBox[{{1., 0.}, {2., 0.}}, 0.02261146496815286]}, 
        {Arrowheads[0.], ArrowBox[{{1., 0.}, {2., 1.}}, 0.02261146496815286]}, 
        {Arrowheads[0.], ArrowBox[{{1., 0.}, {0., 1.}}, 0.02261146496815286]}, 
        {Arrowheads[0.], ArrowBox[{{2., 0.}, {2., 1.}}, 0.02261146496815286]}, 
        {Arrowheads[0.], 
         ArrowBox[{{2., 1.}, {0., 1.}}, 0.02261146496815286]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], {
         {RGBColor[1, 0, 0], DiskBox[{0., 0.}, 0.02261146496815286]}, 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {0.02261146496815286, 0.02261146496815286}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], DiskBox[{1., 0.}, 0.02261146496815286]}, 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {1.0226114649681528, 0.02261146496815286}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 1, 0], DiskBox[{2., 0.}, 0.02261146496815286]}, 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {2.022611464968153, 0.02261146496815286}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], DiskBox[{2., 1.}, 0.02261146496815286]}, 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {2.022611464968153, 1.0226114649681528}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 1, 0], DiskBox[{0., 1.}, 0.02261146496815286]}, 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.02261146496815286, 1.0226114649681528}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785772666484*^9},
 CellLabel->
  "Out[196]=",ExpressionUUID->"22069236-5b63-49dc-89a2-3fa09e96cfa9"]
}, Open  ]],

Cell[TextData[{
 "On the other hand, the complete graph on 5 vertices cannot be 3- or \
4-colored. Here, instead of specifying the colors by symbol, we obtain them \
from ",
 StyleBox[ButtonBox["ColorData",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ColorData"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"6dc603f4-ed82-4c1d-802d-600ac8581440"],

Cell[BoxData[
 RowBox[{
  RowBox[{"K5", "=", 
   RowBox[{"CompleteGraph", "[", "5", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[197]:=",ExpressionUUID->"ca597add-67c3-4486-90fe-894cc9574974"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"backColor", "[", 
  RowBox[{"K5", ",", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ColorData", "[", "63", "]"}], "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "3"}], "}"}]}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[198]:=",ExpressionUUID->"d08dd4c3-8e5f-4a38-86cc-7c87a49b705c"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.738785772760262*^9},
 CellLabel->
  "Out[198]=",ExpressionUUID->"a6c65ceb-788b-4151-9332-f6c44f56a394"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"backColor", "[", 
  RowBox[{"K5", ",", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ColorData", "[", "63", "]"}], "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "4"}], "}"}]}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[199]:=",ExpressionUUID->"4802f8c7-9a0d-4507-8938-63dfd5016242"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.738785772835373*^9},
 CellLabel->
  "Out[199]=",ExpressionUUID->"b831f362-776a-4c5e-89cb-ac095c9c2547"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"backColor", "[", 
  RowBox[{"K5", ",", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ColorData", "[", "63", "]"}], "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "5"}], "}"}]}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[200]:=",ExpressionUUID->"9a8e215f-09ff-4eb3-91ea-ea30703f889d"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5}, {Null, 
       SparseArray[
       Automatic, {5, 5}, 0, {
        1, {{0, 4, 8, 12, 16, 20}, {{2}, {3}, {4}, {5}, {1}, {3}, {4}, {5}, {
          1}, {2}, {4}, {5}, {1}, {2}, {3}, {5}, {1}, {2}, {3}, {4}}}, 
         Pattern}]}, {
      GraphLayout -> "CircularEmbedding", 
       VertexStyle -> {
        1 -> RGBColor[0.73, 0.24506099999999992`, 0.1971], 2 -> 
         RGBColor[0.1971, 0.5022473119339774, 0.73], 3 -> 
         RGBColor[0.5356156238679548, 0.73, 0.1971], 4 -> 
         RGBColor[0.5712760641980676, 0.1971, 0.73], 5 -> 
         RGBColor[0.1971, 0.73, 0.5379077522640902]}}]]}, 
    TagBox[
     GraphicsGroupBox[
      GraphicsComplexBox[{{-0.9510565162951538, 
       0.30901699437494834`}, {-0.5877852522924727, -0.8090169943749468}, {
       0.5877852522924737, -0.8090169943749481}, {0.9510565162951533, 
       0.30901699437494634`}, {-7.044813998280222*^-16, 1.}}, {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
         {Arrowheads[0.], ArrowBox[{1, 2}, 0.021812234931106983`]}, 
         {Arrowheads[0.], ArrowBox[{1, 3}, 0.021812234931106983`]}, 
         {Arrowheads[0.], ArrowBox[{1, 4}, 0.021812234931106983`]}, 
         {Arrowheads[0.], ArrowBox[{1, 5}, 0.021812234931106983`]}, 
         {Arrowheads[0.], ArrowBox[{2, 3}, 0.021812234931106983`]}, 
         {Arrowheads[0.], ArrowBox[{2, 4}, 0.021812234931106983`]}, 
         {Arrowheads[0.], ArrowBox[{2, 5}, 0.021812234931106983`]}, 
         {Arrowheads[0.], ArrowBox[{3, 4}, 0.021812234931106983`]}, 
         {Arrowheads[0.], ArrowBox[{3, 5}, 0.021812234931106983`]}, 
         {Arrowheads[0.], ArrowBox[{4, 5}, 0.021812234931106983`]}}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         {RGBColor[0.73, 0.24506099999999992`, 0.1971], 
          DiskBox[1, 0.021812234931106983]}, 
         {RGBColor[0.1971, 0.5022473119339774, 0.73], 
          DiskBox[2, 0.021812234931106983]}, 
         {RGBColor[0.5356156238679548, 0.73, 0.1971], 
          DiskBox[3, 0.021812234931106983]}, 
         {RGBColor[0.5712760641980676, 0.1971, 0.73], 
          DiskBox[4, 0.021812234931106983]}, 
         {RGBColor[0.1971, 0.73, 0.5379077522640902], 
          DiskBox[5, 0.021812234931106983]}}}]],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785772908431*^9},
 CellLabel->
  "Out[200]=",ExpressionUUID->"6a19b43e-6b87-4dd3-8592-216779e0bd19"]
}, Open  ]],

Cell[TextData[{
 "Before moving on to the ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "ad1d2fb1-efcd-40c3-9e3e-766ff6a09375"],
 "-queens problem, we illustrate how we can modify our backtracking function \
to record and display the decision tree. Instead of displaying the graph, our \
modified algorithm will produce the decision tree. We do this by building a \
list of the decisions. Each time a color is assigned, we create a new vertex \
by adding the current state of the coloring list (converted to a string) and \
connecting it to the previous state. "
}], "Text",ExpressionUUID->"2c3af98b-c741-4374-8172-b22addd434ba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"backColorDT", "[", 
   RowBox[{"G_Graph", ",", "C_List"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "verts", ",", "numverts", ",", "allcolorsL", ",", "k", ",", "coloring", 
      ",", "i", ",", "N", ",", "j", ",", "used", ",", "available", ",", 
      "DTList", ",", "parentV", ",", "newV"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"verts", "=", 
      RowBox[{"VertexList", "[", "G", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"numverts", "=", 
      RowBox[{"Length", "[", "verts", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"allcolorsL", "=", 
      RowBox[{"Range", "[", 
       RowBox[{"Length", "[", "C", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"coloring", "=", 
      RowBox[{"{", "1", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newV", "=", 
      RowBox[{"ToString", "[", "coloring", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"DTList", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"i", "=", "2"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"i", ">", "1"}], "&&", 
        RowBox[{"i", "\[LessEqual]", "numverts"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"N", "=", 
         RowBox[{"VertexList", "[", 
          RowBox[{"NeighborhoodGraph", "[", 
           RowBox[{"G", ",", 
            RowBox[{"verts", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"used", "=", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"j", "=", "1"}], ",", 
          RowBox[{"j", "\[LessEqual]", 
           RowBox[{"i", "-", "1"}]}], ",", 
          RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{"N", ",", 
               RowBox[{"verts", "[", 
                RowBox[{"[", "j", "]"}], "]"}]}], "]"}], ",", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"used", ",", 
               RowBox[{"coloring", "[", 
                RowBox[{"[", "j", "]"}], "]"}]}], "]"}]}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "coloring", "]"}], "\[GreaterEqual]", "i"}],
           ",", 
          RowBox[{"used", "=", 
           RowBox[{"Union", "[", 
            RowBox[{"used", ",", 
             RowBox[{"Range", "[", 
              RowBox[{"coloring", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "]"}]}]}], "]"}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"available", "=", 
         RowBox[{"Complement", "[", 
          RowBox[{"allcolorsL", ",", "used"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "available", "]"}], ">", "0"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"parentV", "=", 
            RowBox[{"ToString", "[", 
             RowBox[{"coloring", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", 
                RowBox[{"i", "-", "1"}]}], "]"}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"coloring", "=", 
            RowBox[{"Append", "[", 
             RowBox[{
              RowBox[{"coloring", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", 
                 RowBox[{"i", "-", "1"}]}], "]"}], "]"}], ",", 
              RowBox[{"First", "[", "available", "]"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"newV", "=", 
            RowBox[{"ToString", "[", "coloring", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"DTList", ",", 
             RowBox[{"parentV", "\[Rule]", "newV"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"i", "++"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", "else", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "coloring", "]"}], "\[GreaterEqual]", 
              "i"}], ",", 
             RowBox[{"coloring", "=", 
              RowBox[{"coloring", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", 
                 RowBox[{"i", "-", "1"}]}], "]"}], "]"}]}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"i", "--"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Graph", "[", 
      RowBox[{"DTList", ",", 
       RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
       RowBox[{
       "GraphLayout", "\[Rule]", "\"\<LayeredDigraphEmbedding\>\""}]}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[201]:=",ExpressionUUID->"ba264c4d-966e-4861-8985-0d0db378f6b2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"backColorDT", "[", 
  RowBox[{"figure11Graph", ",", 
   RowBox[{"{", 
    RowBox[{"Red", ",", "Blue", ",", "Green"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[202]:=",ExpressionUUID->"8e12eec0-02e3-4663-ba0d-7eb92404e0b5"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "{1}", "{1, 2}", "{1, 2, 1}", "{1, 2, 1, 3}", "{1, 2, 3}", 
       "{1, 2, 3, 1}", "{1, 2, 3, 1, 3}"}, {{{1, 2}, {2, 3}, {3, 4}, {2, 5}, {
       5, 6}, {6, 7}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"Name"}}]]}, 
    
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{0., 4.}, {0., 3.}}, 0.03700564971751412], 
        ArrowBox[{{0., 3.}, {-1., 2.}}, 0.03700564971751412], 
        ArrowBox[{{0., 3.}, {0., 2.}}, 0.03700564971751412], 
        ArrowBox[{{-1., 2.}, {-1., 1.}}, 0.03700564971751412], 
        ArrowBox[{{0., 2.}, {0., 1.}}, 0.03700564971751412], 
        ArrowBox[{{0., 1.}, {0., 0.}}, 0.03700564971751412]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 4.}, 0.03700564971751412], 
         InsetBox["\<\"{1}\"\>", 
          Offset[{2, 2}, {0.03700564971751412, 4.037005649717514}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.03700564971751412], 
         InsetBox["\<\"{1, 2}\"\>", 
          Offset[{2, 2}, {0.03700564971751412, 3.037005649717514}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 2.}, 0.03700564971751412], 
         InsetBox["\<\"{1, 2, 1}\"\>", 
          Offset[{2, 2}, {-0.9629943502824859, 2.037005649717514}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 1.}, 0.03700564971751412], 
         InsetBox["\<\"{1, 2, 1, 3}\"\>", 
          Offset[{2, 2}, {-0.9629943502824859, 1.0370056497175142}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.03700564971751412], 
         InsetBox["\<\"{1, 2, 3}\"\>", 
          Offset[{2, 2}, {0.03700564971751412, 2.037005649717514}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.03700564971751412], 
         InsetBox["\<\"{1, 2, 3, 1}\"\>", 
          Offset[{2, 2}, {0.03700564971751412, 1.0370056497175142}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.03700564971751412], 
         InsetBox["\<\"{1, 2, 3, 1, 3}\"\>", 
          Offset[{2, 2}, {0.03700564971751412, 0.03700564971751412}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785773004455*^9},
 CellLabel->
  "Out[202]=",ExpressionUUID->"be287e6a-5438-4e72-86a3-f317002c7506"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"backColorDT", "[", 
  RowBox[{"K5", ",", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ColorData", "[", "63", "]"}], "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "4"}], "}"}]}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[203]:=",ExpressionUUID->"e9988742-ba40-4d2f-a6b2-fc90ae8cc06f"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "{1}", "{1, 2}", "{1, 2, 3}", "{1, 2, 3, 4}", "{1, 2, 4}", 
       "{1, 2, 4, 3}", "{1, 3}", "{1, 3, 2}", "{1, 3, 2, 4}", "{1, 3, 4}", 
       "{1, 3, 4, 2}", "{1, 4}", "{1, 4, 2}", "{1, 4, 2, 3}", "{1, 4, 3}", 
       "{1, 4, 3, 2}"}, {{{1, 2}, {2, 3}, {3, 4}, {2, 5}, {5, 6}, {1, 7}, {7, 
       8}, {8, 9}, {7, 10}, {10, 11}, {1, 12}, {12, 13}, {13, 14}, {12, 15}, {
       15, 16}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"Name"}}]]}, 
    
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{0., 3.}, {-2., 2.}}, 0.043048128342245986`], 
        ArrowBox[{{0., 3.}, {0., 2.}}, 0.043048128342245986`], 
        ArrowBox[{{0., 3.}, {1., 2.}}, 0.043048128342245986`], 
        ArrowBox[{{-2., 2.}, {-3., 1.}}, 0.043048128342245986`], 
        ArrowBox[{{-2., 2.}, {-2., 1.}}, 0.043048128342245986`], 
        ArrowBox[{{-3., 1.}, {-3., 0.}}, 0.043048128342245986`], 
        ArrowBox[{{-2., 1.}, {-2., 0.}}, 0.043048128342245986`], 
        ArrowBox[{{0., 2.}, {-1., 1.}}, 0.043048128342245986`], 
        ArrowBox[{{0., 2.}, {0., 1.}}, 0.043048128342245986`], 
        ArrowBox[{{-1., 1.}, {-1., 0.}}, 0.043048128342245986`], 
        ArrowBox[{{0., 1.}, {0., 0.}}, 0.043048128342245986`], 
        ArrowBox[{{1., 2.}, {1., 1.}}, 0.043048128342245986`], 
        ArrowBox[{{1., 2.}, {2., 1.}}, 0.043048128342245986`], 
        ArrowBox[{{1., 1.}, {1., 0.}}, 0.043048128342245986`], 
        ArrowBox[{{2., 1.}, {2., 0.}}, 0.043048128342245986`]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 3.}, 0.043048128342245986], 
         InsetBox["\<\"{1}\"\>", 
          Offset[{2, 2}, {0.043048128342245986, 3.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{-2., 2.}, 0.043048128342245986], 
         InsetBox["\<\"{1, 2}\"\>", 
          Offset[{2, 2}, {-1.956951871657754, 2.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{-3., 1.}, 0.043048128342245986], 
         InsetBox["\<\"{1, 2, 3}\"\>", 
          Offset[{2, 2}, {-2.956951871657754, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{-3., 0.}, 0.043048128342245986], 
         InsetBox["\<\"{1, 2, 3, 4}\"\>", 
          Offset[{2, 2}, {-2.956951871657754, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{-2., 1.}, 0.043048128342245986], 
         InsetBox["\<\"{1, 2, 4}\"\>", 
          Offset[{2, 2}, {-1.956951871657754, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{-2., 0.}, 0.043048128342245986], 
         InsetBox["\<\"{1, 2, 4, 3}\"\>", 
          Offset[{2, 2}, {-1.956951871657754, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.043048128342245986], 
         InsetBox["\<\"{1, 3}\"\>", 
          Offset[{2, 2}, {0.043048128342245986, 2.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 1.}, 0.043048128342245986], 
         InsetBox["\<\"{1, 3, 2}\"\>", 
          Offset[{2, 2}, {-0.956951871657754, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{-1., 0.}, 0.043048128342245986], 
         InsetBox["\<\"{1, 3, 2, 4}\"\>", 
          Offset[{2, 2}, {-0.956951871657754, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.043048128342245986], 
         InsetBox["\<\"{1, 3, 4}\"\>", 
          Offset[{2, 2}, {0.043048128342245986, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.043048128342245986], 
         InsetBox["\<\"{1, 3, 4, 2}\"\>", 
          Offset[{2, 2}, {0.043048128342245986, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.043048128342245986], 
         InsetBox["\<\"{1, 4}\"\>", 
          Offset[{2, 2}, {1.043048128342246, 2.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.043048128342245986], 
         InsetBox["\<\"{1, 4, 2}\"\>", 
          Offset[{2, 2}, {1.043048128342246, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.043048128342245986], 
         InsetBox["\<\"{1, 4, 2, 3}\"\>", 
          Offset[{2, 2}, {1.043048128342246, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.043048128342245986], 
         InsetBox["\<\"{1, 4, 3}\"\>", 
          Offset[{2, 2}, {2.043048128342246, 1.043048128342246}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{2., 0.}, 0.043048128342245986], 
         InsetBox["\<\"{1, 4, 3, 2}\"\>", 
          Offset[{2, 2}, {2.043048128342246, 0.043048128342245986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7387857730809717`*^9},
 CellLabel->
  "Out[203]=",ExpressionUUID->"6c80edb7-9244-4db6-8ff4-14d0cc6d2196"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["n-Queens Problem via Backtracking", "Subsection",
 CellTags->"Section4d",ExpressionUUID->"d8c086a6-1333-4231-9367-d285111cd50a"],

Cell[TextData[{
 "Another problem with an elegant backtracking solution is the problem of \
placing ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "866ba6dd-06b9-405c-a496-f9b63c8e44f1"],
 " queens on an ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "\[Times]", "n"}], TraditionalForm]],ExpressionUUID->
  "270f0c3e-4297-4d1d-bd8a-552a8960e1db"],
 " chessboard so that no queen can attack another. This means that no two \
queens can be placed on the same horizontal, vertical, or diagonal line. We \
will solve this problem with a backtracking algorithm. The solution we \
present here is based on the solution given in Example 7 in Section 11.4. We \
place queens in a greedy fashion on the chessboard until either all the \
queens are placed or there is no available position for a queen to be placed \
without coming under attack from a queen already on the board."
}], "Text",ExpressionUUID->"370b89ae-e881-42d3-a932-d65e0da7ac49"],

Cell[TextData[{
 "Following the textbook, the ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "e4fd059f-43d0-4794-a773-17bd36027e12"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " step in the backtracking algorithm will be to place a queen in the ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "fc0718a7-5803-44c9-bb05-41e96e369afa"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " column (or file, in chess terms). Like the ",
 StyleBox["coloring", "Code"],
 " list and ",
 StyleBox["exploring", "Code"],
 " list, the algorithm will build a ",
 StyleBox["queens", "Code"],
 " list. In this case, ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"queens", "[", 
    RowBox[{"[", "i", "]"}], "]"}], "=", "j"}]], "myCode",ExpressionUUID->
  "ab08a482-d5c2-43ba-b348-afb54248c2e0"],
 " will indicate that a queen is placed in the ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "f02465b2-8a6f-4817-a370-bc9a620173ac"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " row (rank) in the ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "697393b5-3fd6-43a1-b1f8-7805bd362ba1"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " column (file). We will build a helper function, ",
 StyleBox["validQueens", "Code"],
 ", that, given the dimension of the board and the current ",
 StyleBox["queens", "Code"],
 " list, will determine the possible locations for a queen in the next column."
}], "Text",ExpressionUUID->"ebe2461d-83ff-466b-ac4a-db77ee76265a"],

Cell[TextData[{
 "To implement ",
 StyleBox["validQueens", "Code"],
 ", we will need a representation of the status of the board; specifically, \
for each square on the board, whether it is safe or under attack. It is \
natural to represent the board as a matrix with an entry 1 indicating that \
the corresponding square is safe and 0 that it is under attack. We create a \
square matrix with all entries initialized to 1 by issuing the ",
 StyleBox[ButtonBox["ConstantArray",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ConstantArray"], "FunctionLink"],
 " function with two arguments: the common value 1 and the dimension of the \
matrix in a list. For example, the following initializes the matrix \
representing the board of dimension 5 on which no queens have been placed."
}], "Text",ExpressionUUID->"485d3185-3b26-483c-907b-3c17d3568264"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ConstantArray", "[", 
   RowBox[{"1", ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "5"}], "}"}]}], "]"}], "//", "MatrixForm"}]], "Input",
 CellLabel->
  "In[204]:=",ExpressionUUID->"6a9757f9-37c0-4ef0-8cdb-512dd84031f9"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.738785773129196*^9},
 CellLabel->
  "Out[204]//MatrixForm=",ExpressionUUID->"0f1a069d-795b-44f9-ae9c-\
cdcb189f62b2"]
}, Open  ]],

Cell[TextData[{
 "We now create a ",
 StyleBox["boardStatus", "Code"],
 " function that, given the current list of queen locations and the dimension \
of the board, will return a matrix representing the board with that \
configuration. The matrix will contain 1 in positions not under attack, 0 in \
positions under attack, and will represent the location of queens by the \
symbol Q."
}], "Text",ExpressionUUID->"ef7ea3c7-b822-477e-8181-db105cd51b85"],

Cell[BoxData[
 RowBox[{
  RowBox[{"boardStatus", "[", 
   RowBox[{"queenList_List", ",", "dim_Integer"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "board", ",", "i", ",", "dif", ",", "qRank", ",", "qFile", ",", 
      "vQueens"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"board", "=", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"1", ",", 
        RowBox[{"{", 
         RowBox[{"dim", ",", "dim"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"qFile", "=", "1"}], ",", 
       RowBox[{"qFile", "\[LessEqual]", 
        RowBox[{"Length", "[", "queenList", "]"}]}], ",", 
       RowBox[{"qFile", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"qRank", "=", 
         RowBox[{"queenList", "[", 
          RowBox[{"[", "qFile", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"i", "=", "1"}], ",", 
          RowBox[{"i", "\[LessEqual]", "dim"}], ",", 
          RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"board", "[", 
             RowBox[{"[", 
              RowBox[{"qRank", ",", "i"}], "]"}], "]"}], "=", "0"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"board", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "qFile"}], "]"}], "]"}], "=", "0"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"dif", "=", 
            RowBox[{"i", "-", "qFile"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"qRank", "+", "dif"}], "\[LessEqual]", "dim"}], "&&", 
              RowBox[{
               RowBox[{"qRank", "+", "dif"}], "\[GreaterEqual]", "1"}]}], ",", 
             RowBox[{
              RowBox[{"board", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"qRank", "+", "dif"}], ",", "i"}], "]"}], "]"}], "=",
               "0"}]}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"qRank", "-", "dif"}], "\[LessEqual]", "dim"}], "&&", 
              RowBox[{
               RowBox[{"qRank", "-", "dif"}], "\[GreaterEqual]", "1"}]}], ",", 
             RowBox[{
              RowBox[{"board", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"qRank", "-", "dif"}], ",", "i"}], "]"}], "]"}], "=",
               "0"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"qFile", "=", "1"}], ",", 
       RowBox[{"qFile", "\[LessEqual]", 
        RowBox[{"Length", "[", "queenList", "]"}]}], ",", 
       RowBox[{"qFile", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"board", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"queenList", "[", 
            RowBox[{"[", "qFile", "]"}], "]"}], ",", "qFile"}], "]"}], "]"}], 
        "=", "\"\<Q\>\""}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "board"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[205]:=",ExpressionUUID->"8374a50d-a1e6-403b-a67b-cdf042709c30"],

Cell[TextData[{
 "For example, on a ",
 Cell[BoxData[
  FormBox[
   RowBox[{"10", "\[Times]", "10"}], TraditionalForm]],ExpressionUUID->
  "29c48036-8708-47ce-b072-358d83080f7a"],
 " board, with the first queen in the second row and the second queen in the \
seventh row, the board looks as follows."
}], "Text",ExpressionUUID->"3cfe3377-01fa-429a-bff6-5e41b086a8b4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"boardStatus", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "7"}], "}"}], ",", "10"}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[206]:=",ExpressionUUID->"296ba1a4-81fa-4aee-b986-7b5b2517839d"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "1", "1", "1", "1", "1", "0", "1", "1"},
     {"\<\"Q\"\>", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "1", "1", "1", "0", "1", "1", "1", "1"},
     {"0", "0", "0", "1", "0", "1", "1", "1", "1", "1"},
     {"0", "0", "1", "0", "1", "1", "1", "1", "1", "1"},
     {"0", "0", "0", "1", "0", "1", "1", "1", "1", "1"},
     {"0", "\<\"Q\"\>", "0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "1", "1", "1", "0", "1", "1", "1"},
     {"0", "0", "1", "0", "1", "1", "1", "0", "1", "1"},
     {"0", "0", "1", "1", "0", "1", "1", "1", "0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.738785773229912*^9},
 CellLabel->
  "Out[206]//MatrixForm=",ExpressionUUID->"e28eeef4-dae9-490e-b727-\
230e8b0beaa9"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox["validQueens", "Code"],
 " function will take the same arguments, the list of queen locations and \
dimension of the board, pass them to ",
 StyleBox["boardStatus", "Code"],
 ", and use the resulting matrix to determine available positions in the next \
column. We could omit the ",
 StyleBox["boardStatus", "Code"],
 " function and instead create ",
 StyleBox["validQueens", "Code"],
 " independently, but, as you see above, the ",
 StyleBox["boardStatus", "Code"],
 " function provides a useful visualization."
}], "Text",ExpressionUUID->"b71921ed-f30e-4207-b8d9-f1fbe03346c7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"validQueens", "[", 
   RowBox[{"queenList_List", ",", "dim_Integer"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"board", ",", "file", ",", "i", ",", "freeSet"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"board", "=", 
      RowBox[{"boardStatus", "[", 
       RowBox[{"queenList", ",", "dim"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"file", "=", 
      RowBox[{
       RowBox[{"Length", "[", "queenList", "]"}], "+", "1"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"freeSet", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", "dim"}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"board", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", "file"}], "]"}], "]"}], "\[Equal]", "1"}], ",", 
         
         RowBox[{"AppendTo", "[", 
          RowBox[{"freeSet", ",", "i"}], "]"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "freeSet"}]}],
    "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[207]:=",ExpressionUUID->"2847ac8f-bc6d-41cf-b344-fbd6dab42154"],

Cell[TextData[{
 "With this preliminary work out of the way, we are ready to write the main \
program, ",
 StyleBox["nQueens", "Code"],
 ". It will work in much the same way as our previous examples."
}], "Text",ExpressionUUID->"6c700eb8-1ccf-4b87-b717-544a52b2cca1"],

Cell[CellGroupData[{

Cell[TextData[{
 "We keep a ",
 StyleBox["queens", "Code"],
 " list, initialized to the empty list, that records the locations of \
queens."
}], "Item1Numbered",ExpressionUUID->"488edfa9-6a3d-4839-929a-61c3119c5682"],

Cell[TextData[{
 "We initialize a counter ",
 StyleBox["file", "Code"],
 " to 1. This indicates the column in which we need to place a queen. Notice \
that, in the ",
 StyleBox["backColor", "Code"],
 " algorithm, we initialized the counter to 2. The reason for the difference \
is that, in the coloring algorithm, the color of the first vertex was \
arbitrary and changing it from color 1 to a different color could not \
possibly affect the outcome. In this problem, it may be the case that there \
is no solution with the first queen in file 1, rank 1, but there is a \
solution if the file 1 queen is in a different rank."
}], "Item1Numbered",ExpressionUUID->"fadef8e6-de1b-465a-8026-f0abe2f8757f"],

Cell[TextData[{
 "Apply the ",
 StyleBox["validQueens", "Code"],
 " function with the ",
 StyleBox["queens", "Code"],
 " list and the board dimension. Store the resulting set as ",
 StyleBox["open", "Code"],
 "."
}], "Item1Numbered",ExpressionUUID->"4d20cead-31b2-4670-8d19-1f85168cdaba"],

Cell[TextData[{
 "As with the ",
 StyleBox["backColor", "Code"],
 " algorithm, we determine if the current assignment is a new assignment or a \
result of backtracking. If it is a backtracking step, we remove from ",
 StyleBox["open", "Code"],
 " the positions equal to or smaller than the previous attempt."
}], "Item1Numbered",ExpressionUUID->"f9977e9d-92ce-48c9-a152-1725038f9759"],

Cell[TextData[{
 "We terminate when ",
 StyleBox["file", "Code"],
 " either exceeds the board dimension, in which case we have found a \
solution, or when it is backtracked to 0, in which case we have exhausted all \
possibilities."
}], "Item1Numbered",ExpressionUUID->"e024b176-469d-4433-b289-1529bea8aac2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"nQueens", "[", "boardDim_Integer", "]"}], "/;", 
   RowBox[{"boardDim", ">", "0"}]}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"queens", "=", 
       RowBox[{"{", "}"}]}], ",", 
      RowBox[{"file", "=", "1"}], ",", "open", ",", "i"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"file", ">", "0"}], "&&", 
        RowBox[{"file", "\[LessEqual]", "boardDim"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"open", "=", 
         RowBox[{"validQueens", "[", 
          RowBox[{
           RowBox[{"queens", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", 
              RowBox[{"file", "-", "1"}]}], "]"}], "]"}], ",", "boardDim"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "queens", "]"}], "\[GreaterEqual]", 
           "file"}], ",", "\[IndentingNewLine]", 
          RowBox[{"open", "=", 
           RowBox[{"Complement", "[", 
            RowBox[{"open", ",", 
             RowBox[{"Range", "[", 
              RowBox[{"queens", "[", 
               RowBox[{"[", "file", "]"}], "]"}], "]"}]}], "]"}]}]}], "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"open", "\[NotEqual]", 
           RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"queens", "=", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"queens", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", 
                 RowBox[{"file", "-", "1"}]}], "]"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"open", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "}"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"file", "++"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"else", " ", "backtrack"}], "*)"}], "\[IndentingNewLine]", 
          
          RowBox[{
           RowBox[{"queens", "=", 
            RowBox[{"queens", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", 
               RowBox[{"file", "-", "1"}]}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"file", "--"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"file", ">", "boardDim"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"MatrixForm", "[", 
         RowBox[{"boardStatus", "[", 
          RowBox[{"queens", ",", "boardDim"}], "]"}], "]"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "$Failed", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[208]:=",ExpressionUUID->"2b8cab0b-97de-41bc-b664-217c2a355a38"],

Cell[TextData[{
 "We can use this to find one solution to the ",
 Cell[BoxData[
  FormBox["8", TraditionalForm]],ExpressionUUID->
  "26164ad9-13c6-4ef4-8040-fe423ef539af"],
 "-queens problem (",
 Cell[BoxData[
  FormBox[
   RowBox[{"8", "\[Times]", "8"}], TraditionalForm]],ExpressionUUID->
  "44a3c558-9ae3-48a5-94ac-c88df9523135"],
 " is the size of the standard board)."
}], "Text",ExpressionUUID->"cd84e75b-7b26-4f98-912c-9d3edff91a8d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nQueens", "[", "8", "]"}]], "Input",
 CellLabel->
  "In[209]:=",ExpressionUUID->"c5d7b5e1-d317-4334-a900-f7ad5aa24766"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"\<\"Q\"\>", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "\<\"Q\"\>", "0"},
     {"0", "0", "0", "0", "\<\"Q\"\>", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "\<\"Q\"\>"},
     {"0", "\<\"Q\"\>", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "\<\"Q\"\>", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "\<\"Q\"\>", "0", "0"},
     {"0", "0", "\<\"Q\"\>", "0", "0", "0", "0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.7387857733883963`*^9},
 CellLabel->
  "Out[209]//MatrixForm=",ExpressionUUID->"97e24390-7193-436e-b1d7-\
7c014576f43a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Subset Sum Problem via Backtracking", "Subsection",
 CellTags->"Section4e",ExpressionUUID->"89a6196b-e20e-4f00-bc29-a3d9556c2782"],

Cell[TextData[{
 "Finally, we consider the subset sum problem. Given a set of integers ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "85676fe0-dc15-4f25-af0e-f1ca1d3adc13"],
 " and a value ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]],ExpressionUUID->
  "168a952a-92a4-4697-8b61-68adc79ce8de"],
 ", we want to find a subset ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "b31fd407-ad16-4f4d-9944-70111026d827"],
 " of ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "53444f92-93e8-4dd7-840e-57b229428c84"],
 " whose sum is ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]],ExpressionUUID->
  "d9200313-e45d-4031-8574-bc81c78b1e89"],
 ". To use backtracking on this problem, we first impose an ordering on the \
set ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "14538781-1e86-4fac-8cd0-7e97b042265f"],
 ". We successively select integers from ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "aba25128-0286-456f-96be-575034d9b21a"],
 " to include in ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "34733fa7-ccd1-4b3a-8ef0-1ce28257ad62"],
 " until the sum of the elements of ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "6e0160c8-0e41-4b98-8a5e-7b4c78a9e0cb"],
 " equals or exceeds ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]],ExpressionUUID->
  "aafcf7c2-83d2-4530-ba6b-effc39e28d9f"],
 ", and backtrack when the sum exceeds ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]],ExpressionUUID->
  "a8df2b57-ea89-44e9-ac2f-1f6789b05e79"],
 "."
}], "Text",ExpressionUUID->"a2c56f4d-8c6e-4315-9559-a45fa776741f"],

Cell[TextData[{
 "Before we get to the main algorithm, it is worth reviewing two items of \
syntax. First, given a list of values, we can compute their sum with the ",
 StyleBox[ButtonBox["Plus",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plus"], "FunctionLink"],
 " function using ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " (",
 StyleBox["@@", "Code"],
 ") to replace the ",
 StyleBox[ButtonBox["List",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/List"], "FunctionLink"],
 " head with the ",
 StyleBox[ButtonBox["Plus",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plus"], "FunctionLink"],
 " head, which then results in the sum being computed."
}], "Text",ExpressionUUID->"b596b434-9ace-4b77-ae5f-b7e20c020c31"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listofvalues", "=", 
  RowBox[{"{", 
   RowBox[{"3", ",", "7", ",", "11", ",", "15", ",", 
    RowBox[{"-", "4"}]}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[210]:=",ExpressionUUID->"0c5dbb6f-61bc-4a9e-a556-3de7d6dacc78"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "7", ",", "11", ",", "15", ",", 
   RowBox[{"-", "4"}]}], "}"}]], "Output",
 CellChangeTimes->{3.738785773435883*^9},
 CellLabel->
  "Out[210]=",ExpressionUUID->"6b02078e-a590-4d64-8096-99a3d6a2a1b5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plus", "@@", "listofvalues"}]], "Input",
 CellLabel->
  "In[211]:=",ExpressionUUID->"12df437f-ba17-4b05-9d5d-ebbf361a41cb"],

Cell[BoxData["32"], "Output",
 CellChangeTimes->{3.738785773496504*^9},
 CellLabel->
  "Out[211]=",ExpressionUUID->"d4565cc8-69c0-4afb-ab8c-fc628ea7ddd4"]
}, Open  ]],

Cell[TextData[{
 "Second, given a list of values and a second list consisting of indices into \
the first list, we can obtain the sublist of values corresponding to the \
positions described by the second list by using the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") operator with the list of indices."
}], "Text",ExpressionUUID->"35118e15-3e34-490b-849e-af846582284e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listofstuff", "=", 
  RowBox[{"{", 
   RowBox[{
   "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\"", ",", 
    "\"\<e\>\"", ",", "\"\<f\>\"", ",", "\"\<g\>\""}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[212]:=",ExpressionUUID->"c6435960-18d0-4b90-a59e-28b429d1c9b0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7387857735664253`*^9},
 CellLabel->
  "Out[212]=",ExpressionUUID->"60d02c21-93e1-41f5-b5f4-ef87d30e947f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listofindices", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "3", ",", "4", ",", "7"}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[213]:=",ExpressionUUID->"bf42474b-4b0f-4762-817a-e19786bfeb15"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "3", ",", "4", ",", "7"}], "}"}]], "Output",
 CellChangeTimes->{3.7387857736328993`*^9},
 CellLabel->
  "Out[213]=",ExpressionUUID->"93182373-4b6c-4df9-bbc0-ee13eb3a0d44"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listofstuff", "[", 
  RowBox[{"[", "listofindices", "]"}], "]"}]], "Input",
 CellLabel->
  "In[214]:=",ExpressionUUID->"29a2c7e4-d12b-432d-a7c0-3388f2364185"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", ",", "\<\"g\"\>"}],
   "}"}]], "Output",
 CellChangeTimes->{3.7387857737003307`*^9},
 CellLabel->
  "Out[214]=",ExpressionUUID->"bd862963-2e55-4a70-b1ac-eba8509d3648"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listofstuff", "[", 
  RowBox[{"[", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "6"}], "}"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[215]:=",ExpressionUUID->"5242663b-961c-45c1-bca8-7e4efc8e68b8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"c\"\>", ",", "\<\"d\"\>", ",", "\<\"f\"\>"}], "}"}]], "Output",\

 CellChangeTimes->{3.738785773762074*^9},
 CellLabel->
  "Out[215]=",ExpressionUUID->"c7420d4e-06e3-4957-aad2-7232410acb85"]
}, Open  ]],

Cell["\<\
As the general pattern of backtracking algorithms should be clear by this \
point, we omit a detailed description of the function.\
\>", "Text",ExpressionUUID->"1bce1f61-7ab3-488e-8914-40e71ff1bed1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"subsetSum", "[", 
   RowBox[{
    RowBox[{"S", ":", 
     RowBox[{"{", "__Integer", "}"}]}], ",", "M_Integer"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "bIndices", ",", "allIndices", ",", "i", ",", "availIndices", ",", "k", 
      ",", "currentSum"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"bIndices", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"allIndices", "=", 
      RowBox[{"Range", "[", 
       RowBox[{"Length", "[", "S", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"i", "=", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{"currentSum", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"i", ">", "0"}], "&&", 
        RowBox[{"currentSum", "\[NotEqual]", "M"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"availIndices", "=", 
         RowBox[{"Complement", "[", 
          RowBox[{"allIndices", ",", "bIndices"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "bIndices", "]"}], "\[GreaterEqual]", "i"}],
           ",", 
          RowBox[{"availIndices", "=", 
           RowBox[{"Complement", "[", 
            RowBox[{"availIndices", ",", 
             RowBox[{"Range", "[", 
              RowBox[{"bIndices", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "]"}]}]}], "]"}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"currentSum", "+", 
              RowBox[{"S", "[", 
               RowBox[{"[", "k", "]"}], "]"}]}], ">", "M"}], ",", 
            RowBox[{"availIndices", "=", 
             RowBox[{"Complement", "[", 
              RowBox[{"availIndices", ",", 
               RowBox[{"{", "k", "}"}]}], "]"}]}]}], "]"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"k", ",", "availIndices"}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"availIndices", "\[NotEqual]", 
           RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"bIndices", "=", 
            RowBox[{"Append", "[", 
             RowBox[{
              RowBox[{"bIndices", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", 
                 RowBox[{"i", "-", "1"}]}], "]"}], "]"}], ",", 
              RowBox[{"availIndices", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"i", "++"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", "else", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "bIndices", "]"}], "\[GreaterEqual]", 
              "i"}], ",", 
             RowBox[{"bIndices", "=", 
              RowBox[{"bIndices", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", 
                 RowBox[{"i", "-", "1"}]}], "]"}], "]"}]}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"i", "--"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"currentSum", "=", 
         RowBox[{"Plus", "@@", 
          RowBox[{"S", "[", 
           RowBox[{"[", 
            RowBox[{"bIndices", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", 
               RowBox[{"i", "-", "1"}]}], "]"}], "]"}], "]"}], "]"}]}]}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"i", "\[Equal]", "0"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "$Failed", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"S", "[", 
         RowBox[{"[", "bIndices", "]"}], "]"}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[216]:=",ExpressionUUID->"64dc64a4-3783-4ae6-a499-55b1bddbff7b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"subsetSum", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"31", ",", "27", ",", "15", ",", "11", ",", "7", ",", "5"}], 
    "}"}], ",", "39"}], "]"}]], "Input",
 CellLabel->
  "In[217]:=",ExpressionUUID->"c84bd534-92c2-4895-89dc-89ba8904c54a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"27", ",", "7", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.738785773870961*^9},
 CellLabel->
  "Out[217]=",ExpressionUUID->"5efb1165-b854-4d4e-b6e7-1b34756f953d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"subsetSum", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"31", ",", "27", ",", "15", ",", "11", ",", "7", ",", "5"}], 
    "}"}], ",", "40"}], "]"}]], "Input",
 CellLabel->
  "In[218]:=",ExpressionUUID->"f95d6515-1b12-4f0c-816d-1b663ac3cf3b"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.738785773933894*^9},
 CellLabel->
  "Out[218]=",ExpressionUUID->"2f37d8bf-ac52-4fe8-8b4f-bc4113fb97fc"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["11.5 Minimum Spanning Trees", "Section",
 CellTags->"Section5",ExpressionUUID->"c76e3480-cc6e-42c0-be1b-0319ea682950"],

Cell[TextData[{
 "This section explains how to use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to find the minimum spanning tree of a weighted graph. Recall that a \
minimum spanning tree ",
 Cell[BoxData[
  FormBox["T", TraditionalForm]],ExpressionUUID->
  "c294844f-3b62-4023-89fd-4fe25ee609fd"],
 " of a weighted graph ",
 Cell[BoxData[
  FormBox["G", TraditionalForm]],ExpressionUUID->
  "4d5d4d92-a874-4cae-a473-a30a5c58024f"],
 " is a spanning tree of ",
 Cell[BoxData[
  FormBox["G", TraditionalForm]],ExpressionUUID->
  "bb553654-6ed1-49b4-b9be-ebb33b6ab55f"],
 " with the minimum weight of all spanning trees of ",
 Cell[BoxData[
  FormBox["G", TraditionalForm]],ExpressionUUID->
  "e1a290d9-f51a-43c3-bf2a-6da558d87a7e"],
 ". The two best known algorithms for constructing minimum spanning trees are \
called Prim\[CloseCurlyQuote]s algorithm and Kruskal\[CloseCurlyQuote]s \
algorithm. In this section, we will implement these algorithms, as this is \
another case in which understanding the implementation can help you better \
understand the algorithms. "
}], "Text",ExpressionUUID->"7aecad67-4f3e-4e94-adf3-594c5d333814"],

Cell[TextData[{
 "Before implementing the algorithms and finding minimum spanning trees, \
though, we will describe two built-in Wolfram Language functions, ",
 StyleBox[ButtonBox["GraphDistance",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GraphDistance"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["GraphDistanceMatrix",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GraphDistanceMatrix"], "FunctionLink"],
 ", that calculate the minimum distance between two vertices in a graph. "
}], "Text",ExpressionUUID->"d0d9713c-cb77-4b0c-9eb1-a495cfab4ea8"],

Cell[TextData[{
 "First, we construct a graph to use as an example. We will recreate Exercise \
3 from Section 11.5. To define undirected, weighted edges, we will give ",
 StyleBox[ButtonBox["EdgeWeight",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/EdgeWeight"], "FunctionLink"],
 " as an option to ",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 ", associating it with the list of the edge weights in the same order as the \
edges are given. To get the edge weights to appear as labels on the graph, we \
set the ",
 StyleBox[ButtonBox["EdgeLabels",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/EdgeLabels"], "FunctionLink"],
 " option with ",
 StyleBox["\[OpenCurlyDoubleQuote]EdgeWeight\[CloseCurlyDoubleQuote]", 
  "Input"],
 "."
}], "Text",ExpressionUUID->"296cc27c-c3ec-42aa-98be-fbac5a287f3e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exercise3", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\"", ",", 
      "\"\<e\>\"", ",", "\"\<f\>\"", ",", "\"\<g\>\"", ",", "\"\<h\>\"", ",", 
      "\"\<i\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<b\>\""}], ",", 
      RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<d\>\""}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<c\>\""}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<d\>\""}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<e\>\""}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<f\>\""}], ",", 
      RowBox[{"\"\<c\>\"", "\[Rule]", "\"\<f\>\""}], ",", 
      RowBox[{"\"\<d\>\"", "\[Rule]", "\"\<e\>\""}], ",", 
      RowBox[{"\"\<d\>\"", "\[Rule]", "\"\<g\>\""}], ",", 
      RowBox[{"\"\<d\>\"", "\[Rule]", "\"\<h\>\""}], ",", 
      RowBox[{"\"\<e\>\"", "\[Rule]", "\"\<f\>\""}], ",", 
      RowBox[{"\"\<e\>\"", "\[Rule]", "\"\<h\>\""}], ",", 
      RowBox[{"\"\<f\>\"", "\[Rule]", "\"\<h\>\""}], ",", 
      RowBox[{"\"\<f\>\"", "\[Rule]", "\"\<i\>\""}], ",", 
      RowBox[{"\"\<g\>\"", "\[Rule]", "\"\<h\>\""}], ",", 
      RowBox[{"\"\<h\>\"", "\[Rule]", "\"\<i\>\""}]}], "}"}], ",", 
    RowBox[{"DirectedEdges", "\[Rule]", "False"}], ",", 
    RowBox[{"EdgeWeight", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
      "5", ",", "2", ",", "4", ",", "3", ",", "5", ",", "6", ",", "3", ",", 
       "7", ",", "6", ",", "8", ",", "1", ",", "3", ",", "4", ",", "4", ",", 
       "4", ",", "2"}], "}"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"VertexCoordinates", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "0"}], "}"}]}], "}"}]}], ",", 
    RowBox[{"VertexSize", "\[Rule]", "Small"}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", 
     RowBox[{"Placed", "[", 
      RowBox[{"\"\<Name\>\"", ",", "Center"}], "]"}]}], ",", 
    RowBox[{"EdgeLabels", "\[Rule]", 
     RowBox[{"Placed", "[", 
      RowBox[{"\"\<EdgeWeight\>\"", ",", 
       RowBox[{"{", 
        RowBox[{".5", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], "]"}]}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[219]:=",ExpressionUUID->"6b39229b-da9c-40af-9ed7-9b53782f6985"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"a", "b", "c", "d", "e", "f", "g", "h", "i"}, {
      Null, {{1, 2}, {1, 4}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, {3, 6}, {4, 5}, {
       4, 7}, {4, 8}, {5, 6}, {5, 8}, {6, 8}, {6, 9}, {7, 8}, {8, 9}}}, {
      EdgeLabels -> {
         Placed["EdgeWeight", {0.5, {-1, 0}}]}, VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Small}, 
       EdgeWeight -> {5, 2, 4, 3, 5, 6, 3, 7, 6, 8, 1, 3, 4, 4, 4, 2}, 
       VertexCoordinates -> {{0, 2}, {1, 2}, {2, 2}, {0, 1}, {1, 1}, {2, 1}, {
        0, 0}, {1, 0}, {2, 0}}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], {
         {Arrowheads[0.], ArrowBox[{{0., 2.}, {1., 2.}}, 0.05]}, 
         InsetBox["5", Offset[{0, 2}, {0.5, 2.}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{0., 2.}, {0., 1.}}, 0.05]}, 
         InsetBox["2", Offset[{0, 2}, {0., 1.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{1., 2.}, {2., 2.}}, 0.05]}, 
         InsetBox["4", Offset[{0, 2}, {1.5, 2.}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{1., 2.}, {0., 1.}}, 0.05]}, 
         InsetBox["3", Offset[{0, 2}, {0.5, 1.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{1., 2.}, {1., 1.}}, 0.05]}, 
         InsetBox["5", Offset[{0, 2}, {1., 1.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{1., 2.}, {2., 1.}}, 0.05]}, 
         InsetBox["6", Offset[{0, 2}, {1.5, 1.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{2., 2.}, {2., 1.}}, 0.05]}, 
         InsetBox["3", Offset[{0, 2}, {2., 1.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{0., 1.}, {1., 1.}}, 0.05]}, 
         InsetBox["7", Offset[{0, 2}, {0.5, 1.}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{0., 1.}, {0., 0.}}, 0.05]}, 
         InsetBox["6", Offset[{0, 2}, {0., 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{0., 1.}, {1., 0.}}, 0.05]}, 
         InsetBox["8", Offset[{0, 2}, {0.5, 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{1., 1.}, {2., 1.}}, 0.05]}, 
         InsetBox["1", Offset[{0, 2}, {1.5, 1.}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{1., 1.}, {1., 0.}}, 0.05]}, 
         InsetBox["3", Offset[{0, 2}, {1., 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{2., 1.}, {1., 0.}}, 0.05]}, 
         InsetBox["4", Offset[{0, 2}, {1.5, 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{2., 1.}, {2., 0.}}, 0.05]}, 
         InsetBox["4", Offset[{0, 2}, {2., 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{0., 0.}, {1., 0.}}, 0.05]}, 
         InsetBox["4", Offset[{0, 2}, {0.5, 0.}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{1., 0.}, {2., 0.}}, 0.05]}, 
         InsetBox["2", Offset[{0, 2}, {1.5, 0.}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 2.}, 0.05], InsetBox["\<\"a\"\>", {0., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.05], 
         InsetBox["\<\"b\"\>", {1., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.05], 
         InsetBox["\<\"c\"\>", {2., 2.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.05], 
         InsetBox["\<\"d\"\>", {0., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.05], 
         InsetBox["\<\"e\"\>", {1., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.05], 
         InsetBox["\<\"f\"\>", {2., 1.},
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.05], 
         InsetBox["\<\"g\"\>", {0., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.05], 
         InsetBox["\<\"h\"\>", {1., 0.},
          BaseStyle->"Graphics"]}, {DiskBox[{2., 0.}, 0.05], 
         InsetBox["\<\"i\"\>", {2., 0.},
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785774045165*^9},
 CellLabel->
  "Out[219]=",ExpressionUUID->"fd84a8ae-3fda-4194-81c2-3f7155dd9cf5"]
}, Open  ]],

Cell[TextData[{
 "The Wolfram Language ",
 StyleBox[ButtonBox["GraphDistance",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GraphDistance"], "FunctionLink"],
 " function accepts two or three arguments. Given a graph and two vertices in \
the graph, it returns the distance between the two vertices. For example, in \
the graph above, we compute the distance from ",
 Cell[BoxData[
  FormBox["c", TraditionalForm]],ExpressionUUID->
  "33379eae-eafc-4b99-8dcc-06ce1d91fb9c"],
 " to ",
 Cell[BoxData[
  FormBox["e", TraditionalForm]],ExpressionUUID->
  "bba9d8df-e2ab-460d-b536-98b44cc750dc"],
 " as follows."
}], "Text",ExpressionUUID->"0d868143-2560-4877-acc8-4ba138c33778"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphDistance", "[", 
  RowBox[{"exercise3", ",", "\"\<c\>\"", ",", "\"\<e\>\""}], "]"}]], "Input",
 CellLabel->
  "In[220]:=",ExpressionUUID->"2909828e-1008-4f28-a8a3-3005f385ff9d"],

Cell[BoxData["4.`"], "Output",
 CellChangeTimes->{3.738785774091905*^9},
 CellLabel->
  "Out[220]=",ExpressionUUID->"4453d1e6-b70b-4f03-891f-4fba39ed5cf5"]
}, Open  ]],

Cell[TextData[{
 "You can also apply ",
 StyleBox[ButtonBox["GraphDistance",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GraphDistance"], "FunctionLink"],
 " to a graph and just one of its vertices. In this case, the output will be \
a list of the shortest distances from the given vertex to each of the \
vertices in the graph. For example, the following shows the distances from \
the central vertex ",
 Cell[BoxData[
  FormBox["e", TraditionalForm]],ExpressionUUID->
  "45f00054-a89e-4180-bfbf-a81ba6a01c31"],
 " to each of the vertices in the graph. The 0 in the output corresponds to \
the distance from the vertex to itself."
}], "Text",ExpressionUUID->"87f58efd-03e6-47e4-84c5-fc2715b19b14"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphDistance", "[", 
  RowBox[{"exercise3", ",", "\"\<e\>\""}], "]"}]], "Input",
 CellLabel->
  "In[221]:=",ExpressionUUID->"74b011f1-c3a6-457d-a328-272991465573"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "9.`", ",", "5.`", ",", "4.`", ",", "7.`", ",", "0", ",", "1.`", ",", "7.`",
    ",", "3.`", ",", "5.`"}], "}"}]], "Output",
 CellChangeTimes->{3.738785774162972*^9},
 CellLabel->
  "Out[221]=",ExpressionUUID->"040405bb-b8a3-459c-adc8-b567bc1475bd"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["GraphDistanceMatrix",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GraphDistanceMatrix"], "FunctionLink"],
 " function applied to a graph produces the matrix whose entries are the \
distances between corresponding vertices. The rows and columns are ordered \
according to the order of vertices in the graph, agreeing with the output of ",
 StyleBox[ButtonBox["VertexList",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/VertexList"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"1c9d2f7d-06e8-4840-b949-6b0d31fa2658"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"GraphDistanceMatrix", "[", "exercise3", "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[222]:=",ExpressionUUID->"e371a0d9-2234-4d55-8ce0-801852db36ab"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0.`", "5.`", "9.`", "2.`", "9.`", "10.`", "8.`", "10.`", "12.`"},
     {"5.`", "0.`", "4.`", "3.`", "5.`", "6.`", "9.`", "8.`", "10.`"},
     {"9.`", "4.`", "0.`", "7.`", "4.`", "3.`", "11.`", "7.`", "7.`"},
     {"2.`", "3.`", "7.`", "0.`", "7.`", "8.`", "6.`", "8.`", "10.`"},
     {"9.`", "5.`", "4.`", "7.`", "0.`", "1.`", "7.`", "3.`", "5.`"},
     {"10.`", "6.`", "3.`", "8.`", "1.`", "0.`", "8.`", "4.`", "4.`"},
     {"8.`", "9.`", "11.`", "6.`", "7.`", "8.`", "0.`", "4.`", "6.`"},
     {"10.`", "8.`", "7.`", "8.`", "3.`", "4.`", "4.`", "0.`", "2.`"},
     {"12.`", "10.`", "7.`", "10.`", "5.`", "4.`", "6.`", "2.`", "0.`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.738785774229169*^9},
 CellLabel->
  "Out[222]//MatrixForm=",ExpressionUUID->"191040ff-604a-4ffd-a98b-\
c6a424820ae9"]
}, Open  ]],

Cell[TextData[{
 "Using ",
 StyleBox[ButtonBox["TableForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TableForm"], "FunctionLink"],
 " and the ",
 StyleBox[ButtonBox["TableHeadings",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TableHeadings"], "FunctionLink"],
 " option, we can easily create a table of the distances with row and column \
headings making the vertices explicit. ",
 StyleBox[ButtonBox["TableHeadings",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TableHeadings"], "FunctionLink"],
 " is associated with a list of two lists in order to label the rows and \
columns."
}], "Text",ExpressionUUID->"0bcc877b-f846-4365-9571-a25d03fc1236"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{"GraphDistanceMatrix", "[", "exercise3", "]"}], ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"VertexList", "[", "exercise3", "]"}], ",", 
      RowBox[{"VertexList", "[", "exercise3", "]"}]}], "}"}]}]}], 
  "]"}]], "Input",
 CellLabel->
  "In[223]:=",ExpressionUUID->"86d1d674-53e7-45e2-8d50-4cd2a3aedcd5"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      StyleBox["\[Null]",
       ShowStringCharacters->False], 
      TagBox["\<\"a\"\>",
       HoldForm], 
      TagBox["\<\"b\"\>",
       HoldForm], 
      TagBox["\<\"c\"\>",
       HoldForm], 
      TagBox["\<\"d\"\>",
       HoldForm], 
      TagBox["\<\"e\"\>",
       HoldForm], 
      TagBox["\<\"f\"\>",
       HoldForm], 
      TagBox["\<\"g\"\>",
       HoldForm], 
      TagBox["\<\"h\"\>",
       HoldForm], 
      TagBox["\<\"i\"\>",
       HoldForm]},
     {
      TagBox["\<\"a\"\>",
       HoldForm], "0.`", "5.`", "9.`", "2.`", "9.`", "10.`", "8.`", "10.`", 
      "12.`"},
     {
      TagBox["\<\"b\"\>",
       HoldForm], "5.`", "0.`", "4.`", "3.`", "5.`", "6.`", "9.`", "8.`", 
      "10.`"},
     {
      TagBox["\<\"c\"\>",
       HoldForm], "9.`", "4.`", "0.`", "7.`", "4.`", "3.`", "11.`", "7.`", 
      "7.`"},
     {
      TagBox["\<\"d\"\>",
       HoldForm], "2.`", "3.`", "7.`", "0.`", "7.`", "8.`", "6.`", "8.`", 
      "10.`"},
     {
      TagBox["\<\"e\"\>",
       HoldForm], "9.`", "5.`", "4.`", "7.`", "0.`", "1.`", "7.`", "3.`", 
      "5.`"},
     {
      TagBox["\<\"f\"\>",
       HoldForm], "10.`", "6.`", "3.`", "8.`", "1.`", "0.`", "8.`", "4.`", 
      "4.`"},
     {
      TagBox["\<\"g\"\>",
       HoldForm], "8.`", "9.`", "11.`", "6.`", "7.`", "8.`", "0.`", "4.`", 
      "6.`"},
     {
      TagBox["\<\"h\"\>",
       HoldForm], "10.`", "8.`", "7.`", "8.`", "3.`", "4.`", "4.`", "0.`", 
      "2.`"},
     {
      TagBox["\<\"i\"\>",
       HoldForm], "12.`", "10.`", "7.`", "10.`", "5.`", "4.`", "6.`", "2.`", 
      "0.`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {False, True, {False}, False}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {{"a", "b", "c", "d", "e", "f", "g", "h", "i"}, {
      "a", "b", "c", "d", "e", "f", "g", "h", "i"}}]]]], "Output",
 CellChangeTimes->{3.738785774300449*^9},
 CellLabel->
  "Out[223]//TableForm=",ExpressionUUID->"4936b4db-2438-45a8-b1e0-\
c3ce54b3a49d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Prim\[CloseCurlyQuote]s Algorithm", "Subsection",
 CellTags->"Section5a",ExpressionUUID->"f94d4e9f-ae94-418b-b70b-8ef993e01b6b"],

Cell["\<\
We will now build functions to implement Prim\[CloseCurlyQuote]s algorithm. \
We will also see how to create animations that illustrate the process of \
building the spanning tree.\
\>", "Text",ExpressionUUID->"669e82c8-d084-46e8-9a9c-b68937f81a22"],

Cell[TextData[{
 "Since both Prim\[CloseCurlyQuote]s algorithm and Kruskal\[CloseCurlyQuote]s \
depend on choosing an edge of smallest weight, it will be useful to be able \
to apply ",
 StyleBox[ButtonBox["Sort",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sort"], "FunctionLink"],
 " to a list of edges. Recall that ",
 StyleBox[ButtonBox["Sort",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sort"], "FunctionLink"],
 " accepts an optional second argument: a function that takes two arguments \
and returns ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 " if the first argument is less than the second. Our function will need to \
access the edge weight with ",
 StyleBox[ButtonBox["PropertyValue",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PropertyValue"], "FunctionLink"],
 ", which also requires the graph as an argument. Therefore, we will create a \
function that takes a graph as the argument and produces a pure ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " (",
 StyleBox["&", "Code"],
 ") that requires only the two edges as arguments."
}], "Text",ExpressionUUID->"9c5b422c-65d6-4929-9f8b-35d71cab4f95"],

Cell[BoxData[
 RowBox[{
  RowBox[{"edgeCompare", "[", "G_", "]"}], ":=", 
  RowBox[{"Function", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"e1", ",", "e2"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"PropertyValue", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"G", ",", "e1"}], "}"}], ",", "EdgeWeight"}], "]"}], "<", 
     RowBox[{"PropertyValue", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"G", ",", "e2"}], "}"}], ",", "EdgeWeight"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[224]:=",ExpressionUUID->"a1d66d6d-ce25-4fe4-9161-e0b9625b0f52"],

Cell[TextData[{
 "The list we provided to ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " as its first argument specifies that the symbols ",
 StyleBox["e1", "Code"],
 " and ",
 StyleBox["e2", "Code"],
 " will be interpreted as parameters, in place of the generic ",
 StyleBox[ButtonBox["Slot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Slot"], "FunctionLink"],
 " (",
 StyleBox["#", "Code"],
 ")."
}], "Text",ExpressionUUID->"e2203b6b-2557-44ef-9f6e-f96dd5881ac3"],

Cell[TextData[{
 "Applying ",
 StyleBox["edgeCompare", "Code"],
 " to a graph will output a function. Assigning the result to a symbol means \
that symbol can then be used as a function. The expression below will cause \
",
 StyleBox["testComp", "Code"],
 " to act as a function on two argument, edges in ",
 StyleBox["exercise3", "Code"],
 ", and return ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 " if the weight of the first is less than or equal to the weight of the \
second. "
}], "Text",ExpressionUUID->"2cc96d07-1c01-49e4-bf57-800d429bc73e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testComp", "=", 
  RowBox[{"edgeCompare", "[", "exercise3", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[225]:=",ExpressionUUID->"3d3a024b-00f2-4224-a933-4c1fc76a145f"],

Cell[BoxData[
 RowBox[{"Function", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"e1$", ",", "e2$"}], "}"}], ",", 
   RowBox[{
    RowBox[{"PropertyValue", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            
            Graph[{"a", "b", "c", "d", "e", "f", "g", "h", "i"}, {
             Null, {{1, 2}, {1, 4}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, {3, 6}, {
              4, 5}, {4, 7}, {4, 8}, {5, 6}, {5, 8}, {6, 8}, {6, 9}, {7, 8}, {
              8, 9}}}, {EdgeLabels -> {
                Placed["EdgeWeight", {0.5, {-1, 0}}]}, VertexLabels -> {
                Placed["Name", Center]}, VertexSize -> {Small}, 
              EdgeWeight -> {5, 2, 4, 3, 5, 6, 3, 7, 6, 8, 1, 3, 4, 4, 4, 2}, 
              VertexCoordinates -> {{0, 2}, {1, 2}, {2, 2}, {0, 1}, {1, 1}, {
               2, 1}, {0, 0}, {1, 0}, {2, 0}}}]]}, 
           TagBox[GraphicsGroupBox[{
              {Hue[0.6, 0.7, 0.5], Opacity[0.7], {
                {Arrowheads[0.], ArrowBox[{{0., 2.}, {1., 2.}}, 0.05]}, 
                InsetBox["5", Offset[{0, 2}, {0.5, 2.}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{0., 2.}, {0., 1.}}, 0.05]}, 
                InsetBox["2", Offset[{0, 2}, {0., 1.5}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{1., 2.}, {2., 2.}}, 0.05]}, 
                InsetBox["4", Offset[{0, 2}, {1.5, 2.}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{1., 2.}, {0., 1.}}, 0.05]}, 
                InsetBox["3", Offset[{0, 2}, {0.5, 1.5}], ImageScaled[{-1, 0}],
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{1., 2.}, {1., 1.}}, 0.05]}, 
                InsetBox["5", Offset[{0, 2}, {1., 1.5}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{1., 2.}, {2., 1.}}, 0.05]}, 
                InsetBox["6", Offset[{0, 2}, {1.5, 1.5}], ImageScaled[{-1, 0}],
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{2., 2.}, {2., 1.}}, 0.05]}, 
                InsetBox["3", Offset[{0, 2}, {2., 1.5}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{0., 1.}, {1., 1.}}, 0.05]}, 
                InsetBox["7", Offset[{0, 2}, {0.5, 1.}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{0., 1.}, {0., 0.}}, 0.05]}, 
                InsetBox["6", Offset[{0, 2}, {0., 0.5}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{0., 1.}, {1., 0.}}, 0.05]}, 
                InsetBox["8", Offset[{0, 2}, {0.5, 0.5}], ImageScaled[{-1, 0}],
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{1., 1.}, {2., 1.}}, 0.05]}, 
                InsetBox["1", Offset[{0, 2}, {1.5, 1.}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{1., 1.}, {1., 0.}}, 0.05]}, 
                InsetBox["3", Offset[{0, 2}, {1., 0.5}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{2., 1.}, {1., 0.}}, 0.05]}, 
                InsetBox["4", Offset[{0, 2}, {1.5, 0.5}], ImageScaled[{-1, 0}],
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{2., 1.}, {2., 0.}}, 0.05]}, 
                InsetBox["4", Offset[{0, 2}, {2., 0.5}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{0., 0.}, {1., 0.}}, 0.05]}, 
                InsetBox["4", Offset[{0, 2}, {0.5, 0.}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{1., 0.}, {2., 0.}}, 0.05]}, 
                InsetBox["2", Offset[{0, 2}, {1.5, 0.}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}}, 
              {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
               0.7]}], {DiskBox[{0., 2.}, 0.05], 
                InsetBox["\<\"a\"\>", {0., 2.},
                 BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.05], 
                InsetBox["\<\"b\"\>", {1., 2.},
                 BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.05], 
                InsetBox["\<\"c\"\>", {2., 2.},
                 BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.05], 
                InsetBox["\<\"d\"\>", {0., 1.},
                 BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.05], 
                InsetBox["\<\"e\"\>", {1., 1.},
                 BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.05], 
                InsetBox["\<\"f\"\>", {2., 1.},
                 BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.05], 
                InsetBox["\<\"g\"\>", {0., 0.},
                 BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.05], 
                InsetBox["\<\"h\"\>", {1., 0.},
                 BaseStyle->"Graphics"]}, {DiskBox[{2., 0.}, 0.05], 
                InsetBox["\<\"i\"\>", {2., 0.},
                 BaseStyle->"Graphics"]}}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FormatType->TraditionalForm,
         FrameTicks->None], ",", "e1$"}], "}"}], ",", "EdgeWeight"}], "]"}], 
    "<", 
    RowBox[{"PropertyValue", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        GraphicsBox[
         NamespaceBox["NetworkGraphics",
          DynamicModuleBox[{Typeset`graph = HoldComplete[
            
            Graph[{"a", "b", "c", "d", "e", "f", "g", "h", "i"}, {
             Null, {{1, 2}, {1, 4}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, {3, 6}, {
              4, 5}, {4, 7}, {4, 8}, {5, 6}, {5, 8}, {6, 8}, {6, 9}, {7, 8}, {
              8, 9}}}, {EdgeLabels -> {
                Placed["EdgeWeight", {0.5, {-1, 0}}]}, VertexLabels -> {
                Placed["Name", Center]}, VertexSize -> {Small}, 
              EdgeWeight -> {5, 2, 4, 3, 5, 6, 3, 7, 6, 8, 1, 3, 4, 4, 4, 2}, 
              VertexCoordinates -> {{0, 2}, {1, 2}, {2, 2}, {0, 1}, {1, 1}, {
               2, 1}, {0, 0}, {1, 0}, {2, 0}}}]]}, 
           TagBox[GraphicsGroupBox[{
              {Hue[0.6, 0.7, 0.5], Opacity[0.7], {
                {Arrowheads[0.], ArrowBox[{{0., 2.}, {1., 2.}}, 0.05]}, 
                InsetBox["5", Offset[{0, 2}, {0.5, 2.}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{0., 2.}, {0., 1.}}, 0.05]}, 
                InsetBox["2", Offset[{0, 2}, {0., 1.5}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{1., 2.}, {2., 2.}}, 0.05]}, 
                InsetBox["4", Offset[{0, 2}, {1.5, 2.}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{1., 2.}, {0., 1.}}, 0.05]}, 
                InsetBox["3", Offset[{0, 2}, {0.5, 1.5}], ImageScaled[{-1, 0}],
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{1., 2.}, {1., 1.}}, 0.05]}, 
                InsetBox["5", Offset[{0, 2}, {1., 1.5}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{1., 2.}, {2., 1.}}, 0.05]}, 
                InsetBox["6", Offset[{0, 2}, {1.5, 1.5}], ImageScaled[{-1, 0}],
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{2., 2.}, {2., 1.}}, 0.05]}, 
                InsetBox["3", Offset[{0, 2}, {2., 1.5}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{0., 1.}, {1., 1.}}, 0.05]}, 
                InsetBox["7", Offset[{0, 2}, {0.5, 1.}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{0., 1.}, {0., 0.}}, 0.05]}, 
                InsetBox["6", Offset[{0, 2}, {0., 0.5}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{0., 1.}, {1., 0.}}, 0.05]}, 
                InsetBox["8", Offset[{0, 2}, {0.5, 0.5}], ImageScaled[{-1, 0}],
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{1., 1.}, {2., 1.}}, 0.05]}, 
                InsetBox["1", Offset[{0, 2}, {1.5, 1.}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{1., 1.}, {1., 0.}}, 0.05]}, 
                InsetBox["3", Offset[{0, 2}, {1., 0.5}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{2., 1.}, {1., 0.}}, 0.05]}, 
                InsetBox["4", Offset[{0, 2}, {1.5, 0.5}], ImageScaled[{-1, 0}],
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{2., 1.}, {2., 0.}}, 0.05]}, 
                InsetBox["4", Offset[{0, 2}, {2., 0.5}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{0., 0.}, {1., 0.}}, 0.05]}, 
                InsetBox["4", Offset[{0, 2}, {0.5, 0.}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}, {
                {Arrowheads[0.], ArrowBox[{{1., 0.}, {2., 0.}}, 0.05]}, 
                InsetBox["2", Offset[{0, 2}, {1.5, 0.}], ImageScaled[{-1, 0}],
                 
                 BaseStyle->"Graphics"]}}, 
              {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
               0.7]}], {DiskBox[{0., 2.}, 0.05], 
                InsetBox["\<\"a\"\>", {0., 2.},
                 BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.05], 
                InsetBox["\<\"b\"\>", {1., 2.},
                 BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.05], 
                InsetBox["\<\"c\"\>", {2., 2.},
                 BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.05], 
                InsetBox["\<\"d\"\>", {0., 1.},
                 BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.05], 
                InsetBox["\<\"e\"\>", {1., 1.},
                 BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.05], 
                InsetBox["\<\"f\"\>", {2., 1.},
                 BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.05], 
                InsetBox["\<\"g\"\>", {0., 0.},
                 BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.05], 
                InsetBox["\<\"h\"\>", {1., 0.},
                 BaseStyle->"Graphics"]}, {DiskBox[{2., 0.}, 0.05], 
                InsetBox["\<\"i\"\>", {2., 0.},
                 BaseStyle->"Graphics"]}}}],
            MouseAppearanceTag["NetworkGraphics"]],
           AllowKernelInitialization->False]],
         DefaultBaseStyle->{
          "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
           Hue[0.8, 1., 0.6]},
         FormatType->TraditionalForm,
         FrameTicks->None], ",", "e2$"}], "}"}], ",", "EdgeWeight"}], 
     "]"}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.7387857744075117`*^9},
 CellLabel->
  "Out[225]=",ExpressionUUID->"959902b9-5f5d-4c6d-8ffc-1fbd58048617"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testComp", "[", 
  RowBox[{
   RowBox[{"\"\<a\>\"", "\[UndirectedEdge]", "\"\<d\>\""}], ",", 
   RowBox[{"\"\<a\>\"", "\[UndirectedEdge]", "\"\<b\>\""}]}], "]"}]], "Input",\

 CellLabel->
  "In[226]:=",ExpressionUUID->"28206371-34f5-4960-b6db-8b1f74b6d68c"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.738785774479836*^9},
 CellLabel->
  "Out[226]=",ExpressionUUID->"f256d5c8-9647-4420-85f9-f2bfd47181c4"]
}, Open  ]],

Cell["\<\
Prim\[CloseCurlyQuote]s algorithm is given as Algorithm 1 in Section 11.5 of \
the textbook. It constructs a minimum spanning tree by successively selecting \
an edge of smallest weight that extends the tree without creating any loops. \
\
\>", "Text",ExpressionUUID->"fc076023-a99f-4911-be6c-3ca7e8db10d3"],

Cell[TextData[{
 "To simplify our implementation of Prim\[CloseCurlyQuote]s algorithm, we \
will create a function ",
 StyleBox["minEdge", "Code"],
 ". Given the original graph and the list of vertices already included in the \
spanning tree, ",
 StyleBox["minEdge", "Code"],
 " determines which edge of the graph should be added next."
}], "Text",ExpressionUUID->"3d8c1c5b-dfe8-4f74-a675-30a25ff1426f"],

Cell[TextData[{
 StyleBox["minEdge", "Code"],
 " first needs to determine the set of edges that are incident with a vertex \
currently in the tree. It will do this by applying ",
 StyleBox[ButtonBox["NeighborhoodGraph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/NeighborhoodGraph"], "FunctionLink"],
 " to the graph and the list of vertices in the tree. The ",
 StyleBox["minEdge", "Code"],
 " function then eliminates any edge with both ends already in the spanning \
tree or neither end in the spanning tree. (This is equivalent to the \
condition that the edge not introduce a simple circuit but that the new graph \
will be connected.) Once it has determined the valid candidates, the ",
 StyleBox["minEdge", "Code"],
 " function returns the edge with smallest weight. We also include the \
special case that the spanning tree has not yet been started, in which case \
we call the function with the empty list as the second argument."
}], "Text",ExpressionUUID->"f7f8a15d-22bb-423d-ada0-541597f4b322"],

Cell[BoxData[
 RowBox[{
  RowBox[{"minEdge", "[", 
   RowBox[{"G_Graph", ",", "V_List"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"possibleEdges", ",", "i"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"V", "\[Equal]", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"empty", " ", "tree", " ", "case"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"possibleEdges", "=", 
        RowBox[{"EdgeList", "[", "G", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"nonempty", " ", "case"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"possibleEdges", "=", 
         RowBox[{"EdgeList", "[", 
          RowBox[{"NeighborhoodGraph", "[", 
           RowBox[{"G", ",", "V"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"i", "=", "1"}], ";", "\[IndentingNewLine]", 
        RowBox[{"While", "[", 
         RowBox[{
          RowBox[{"i", "\[LessEqual]", 
           RowBox[{"Length", "[", "possibleEdges", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{"V", ",", 
               RowBox[{
                RowBox[{"possibleEdges", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "\[Equal]", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"V", ",", 
               RowBox[{
                RowBox[{"possibleEdges", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"possibleEdges", "=", 
             RowBox[{"Delete", "[", 
              RowBox[{"possibleEdges", ",", "i"}], "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"i", "++"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"possibleEdges", "\[Equal]", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"Return", "[", "Null", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"possibleEdges", "=", 
      RowBox[{"Sort", "[", 
       RowBox[{"possibleEdges", ",", 
        RowBox[{"edgeCompare", "[", "G", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"possibleEdges", "[", 
      RowBox[{"[", "1", "]"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[227]:=",ExpressionUUID->"7e406cd3-c99c-496a-925a-771c8ad1f575"],

Cell["\<\
With this function in place, Prim\[CloseCurlyQuote]s algorithm is fairly \
straightforward to implement.\
\>", "Text",ExpressionUUID->"2489b9c6-3013-4a96-bc6c-b4d65a44b1a6"],

Cell[CellGroupData[{

Cell[TextData[{
 "Begin building the spanning tree by finding the edge of minimum weight by \
calling the function ",
 StyleBox["minEdge", "Code"],
 " on the graph and the empty list."
}], "Item1Numbered",ExpressionUUID->"041b19b0-d79f-46ea-a267-f2a6c0ea1117"],

Cell[TextData[{
 "Continue building the spanning tree one edge at a time by adding the edge \
returned by ",
 StyleBox["minEdge", "Code"],
 ". (Note that we must add the new vertex before the edge, since ",
 StyleBox[ButtonBox["EdgeAdd",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/EdgeAdd"], "FunctionLink"],
 " expects both endpoints of the edge to be added to already be in the graph.)"
}], "Item1Numbered",ExpressionUUID->"0601615c-800c-428c-b114-b59c2c4174fa"],

Cell[TextData[{
 "After ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "2"}], TraditionalForm]],ExpressionUUID->
  "bad59c42-94bc-4b96-840d-a2cd3322b334"],
 " repetitions of step 2, where ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "cdee2f54-713e-4062-8af4-56596db70639"],
 " is the number of vertices in the graph, the spanning tree is complete."
}], "Item1Numbered",ExpressionUUID->"942aeea2-9811-4590-8407-98d607b033b1"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"prim", "[", 
   RowBox[{"G_Graph", ",", "opts___"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"newEdge", ",", "T", ",", "n", ",", "i", ",", "v"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newEdge", "=", 
      RowBox[{"minEdge", "[", 
       RowBox[{"G", ",", 
        RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"T", "=", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"{", "newEdge", "}"}], ",", "opts"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"PropertyValue", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"T", ",", "newEdge"}], "}"}], ",", "EdgeWeight"}], "]"}], 
      "=", 
      RowBox[{"PropertyValue", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"G", ",", "newEdge"}], "}"}], ",", "EdgeWeight"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"PropertyValue", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"T", ",", "newEdge"}], "}"}], ",", "EdgeLabels"}], "]"}], 
      "=", 
      RowBox[{"PropertyValue", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"G", ",", "newEdge"}], "}"}], ",", "EdgeWeight"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"n", "=", 
      RowBox[{"VertexCount", "[", "G", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"n", "-", "2"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"newEdge", "=", 
         RowBox[{"minEdge", "[", 
          RowBox[{"G", ",", 
           RowBox[{"VertexList", "[", "T", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"VertexQ", "[", 
           RowBox[{"T", ",", 
            RowBox[{"newEdge", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"T", "=", 
           RowBox[{"VertexAdd", "[", 
            RowBox[{"T", ",", 
             RowBox[{"newEdge", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"T", "=", 
           RowBox[{"VertexAdd", "[", 
            RowBox[{"T", ",", 
             RowBox[{"newEdge", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"T", "=", 
         RowBox[{"EdgeAdd", "[", 
          RowBox[{"T", ",", "newEdge"}], "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{
         RowBox[{"PropertyValue", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"T", ",", "newEdge"}], "}"}], ",", "EdgeWeight"}], "]"}], 
         "=", 
         RowBox[{"PropertyValue", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"G", ",", "newEdge"}], "}"}], ",", "EdgeWeight"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"PropertyValue", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"T", ",", "newEdge"}], "}"}], ",", "EdgeLabels"}], "]"}], 
         "=", 
         RowBox[{"PropertyValue", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"G", ",", "newEdge"}], "}"}], ",", "EdgeWeight"}], 
          "]"}]}]}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "T"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->
  "In[228]:=",ExpressionUUID->"9ca0e2a4-4703-42c6-b6f3-bd214751ea1e"],

Cell["\<\
We can now use this algorithm to find the minimum spanning tree for Exercise \
3.\
\>", "Text",ExpressionUUID->"0af62cba-a7fe-4723-b321-c59538e68880"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"primExercise3", "=", 
  RowBox[{"prim", "[", 
   RowBox[{"exercise3", ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[229]:=",ExpressionUUID->"44502a8e-aa6a-4866-a604-0f649c6816ce"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"e", "f", "c", "h", "i", "g", "b", "d", "a"}, {
      Null, {{1, 2}, {3, 2}, {1, 4}, {4, 5}, {6, 4}, {7, 3}, {7, 8}, {9, 
       8}}}, {EdgeLabels -> {
        UndirectedEdge["e", "f"] -> 1, UndirectedEdge["g", "h"] -> 4, 
         UndirectedEdge["a", "d"] -> 2, UndirectedEdge["h", "i"] -> 2, 
         UndirectedEdge["b", "d"] -> 3, UndirectedEdge["b", "c"] -> 4, 
         UndirectedEdge["c", "f"] -> 3, UndirectedEdge["e", "h"] -> 3}, 
       VertexLabels -> {"Name"}, EdgeWeight -> {1, 1, 1, 1, 1, 1, 1, 2}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], {
         {Arrowheads[0.], 
          ArrowBox[{{0.4558423058385518, 2.7350538350313105`}, {
           1.1396057645963795`, 3.6467384467084143`}}, 0.03470455087887113]}, 
         InsetBox["1", {0.7977240352174657, 3.1908961408698624}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], 
          ArrowBox[{{0.4558423058385518, 2.7350538350313105`}, {
           0.4558423058385518, 1.8233692233542071`}}, 0.03470455087887113]}, 
         InsetBox["3", {0.4558423058385518, 2.279211529192759}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], 
          ArrowBox[{{1.1396057645963795`, 3.6467384467084143`}, {
           1.8233692233542071`, 2.7350538350313105`}}, 0.03470455087887113]}, 
         InsetBox["3", {1.4814874939752933, 3.1908961408698624}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], 
          ArrowBox[{{1.8233692233542071`, 2.7350538350313105`}, {
           1.8233692233542071`, 1.8233692233542071`}}, 0.03470455087887113]}, 
         InsetBox["4", {1.8233692233542071, 2.279211529192759}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], 
          ArrowBox[{{0.4558423058385518, 1.8233692233542071`}, {0., 
           0.9116846116771038}}, 0.03470455087887113]}, 
         InsetBox["2", {0.2279211529192759, 1.3675269175156555}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], 
          ArrowBox[{{0.4558423058385518, 1.8233692233542071`}, {
           0.9116846116771036, 0.9116846116771038}}, 0.03470455087887113]}, 
         InsetBox["4", {0.6837634587578276, 1.3675269175156555}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], 
          ArrowBox[{{1.8233692233542071`, 1.8233692233542071`}, {
           1.8233692233542071`, 0.9116846116771038}}, 0.03470455087887113]}, 
         InsetBox["3", {1.8233692233542071, 1.3675269175156555}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], 
          ArrowBox[{{1.8233692233542071`, 0.9116846116771038}, {
           1.8233692233542071`, 0.}}, 0.03470455087887113]}, 
         InsetBox["2", {1.8233692233542071, 0.4558423058385519}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{0.4558423058385518, 2.7350538350313105}, 
          0.03470455087887113], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.49054685671742293, 2.7697583859101815}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.1396057645963795, 3.6467384467084143}, 
          0.03470455087887113], 
         InsetBox["\<\"f\"\>", 
          Offset[{2, 2}, {1.1743103154752506, 3.6814429975872853}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.8233692233542071, 2.7350538350313105}, 
          0.03470455087887113], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {1.8580737742330782, 2.7697583859101815}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.4558423058385518, 1.8233692233542071}, 
          0.03470455087887113], 
         InsetBox["\<\"h\"\>", 
          Offset[{2, 2}, {0.49054685671742293, 1.8580737742330782}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 0.9116846116771038}, 0.03470455087887113], 
         InsetBox["\<\"i\"\>", 
          Offset[{2, 2}, {0.03470455087887113, 0.9463891625559749}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.9116846116771036, 0.9116846116771038}, 
          0.03470455087887113], 
         InsetBox["\<\"g\"\>", 
          Offset[{2, 2}, {0.9463891625559747, 0.9463891625559749}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.8233692233542071, 1.8233692233542071}, 
          0.03470455087887113], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {1.8580737742330782, 1.8580737742330782}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.8233692233542071, 0.9116846116771038}, 
          0.03470455087887113], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {1.8580737742330782, 0.9463891625559749}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.8233692233542071, 0.}, 0.03470455087887113], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {1.8580737742330782, 0.03470455087887113}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785774609693*^9},
 CellLabel->
  "Out[229]=",ExpressionUUID->"c5601806-4b9f-4c2d-97ce-e7306950f724"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HighlightGraph", "[", 
  RowBox[{"exercise3", ",", "primExercise3"}], "]"}]], "Input",
 CellLabel->
  "In[230]:=",ExpressionUUID->"1bf4a561-ed6d-4600-84fe-964ca3021cb3"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"a", "b", "c", "d", "e", "f", "g", "h", "i"}, {
      Null, {{1, 2}, {1, 4}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, {3, 6}, {4, 5}, {
       4, 7}, {4, 8}, {5, 6}, {5, 8}, {6, 8}, {6, 9}, {7, 8}, {8, 9}}}, {
      EdgeLabels -> {
         Placed["EdgeWeight", {0.5, {-1, 0}}]}, VertexLabels -> {
         Placed["Name", Center]}, VertexSize -> {Small}, GraphHighlight -> {
         UndirectedEdge["h", "i"], "i", "d", "a", "e", 
         UndirectedEdge["g", "h"], 
         UndirectedEdge["a", "d"], 
         UndirectedEdge["b", "d"], 
         UndirectedEdge["e", "h"], "b", 
         UndirectedEdge["b", "c"], "c", 
         UndirectedEdge["e", "f"], "f", 
         UndirectedEdge["c", "f"], "h", "g"}, 
       EdgeWeight -> {5, 2, 4, 3, 5, 6, 3, 7, 6, 8, 1, 3, 4, 4, 4, 2}, 
       VertexCoordinates -> {{0, 2}, {1, 2}, {2, 2}, {0, 1}, {1, 1}, {2, 1}, {
        0, 0}, {1, 0}, {2, 0}}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], {
         {Arrowheads[0.], ArrowBox[{{0., 2.}, {1., 2.}}, 0.05]}, 
         InsetBox["5", Offset[{0, 2}, {0.5, 2.}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], Opacity[1], 
          {Arrowheads[0.], ArrowBox[{{0., 2.}, {0., 1.}}, 0.05]}}, 
         InsetBox["2", Offset[{0, 2}, {0., 1.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], Opacity[1], 
          {Arrowheads[0.], ArrowBox[{{1., 2.}, {2., 2.}}, 0.05]}}, 
         InsetBox["4", Offset[{0, 2}, {1.5, 2.}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], Opacity[1], 
          {Arrowheads[0.], ArrowBox[{{1., 2.}, {0., 1.}}, 0.05]}}, 
         InsetBox["3", Offset[{0, 2}, {0.5, 1.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{1., 2.}, {1., 1.}}, 0.05]}, 
         InsetBox["5", Offset[{0, 2}, {1., 1.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{1., 2.}, {2., 1.}}, 0.05]}, 
         InsetBox["6", Offset[{0, 2}, {1.5, 1.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], Opacity[1], 
          {Arrowheads[0.], ArrowBox[{{2., 2.}, {2., 1.}}, 0.05]}}, 
         InsetBox["3", Offset[{0, 2}, {2., 1.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{0., 1.}, {1., 1.}}, 0.05]}, 
         InsetBox["7", Offset[{0, 2}, {0.5, 1.}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{0., 1.}, {0., 0.}}, 0.05]}, 
         InsetBox["6", Offset[{0, 2}, {0., 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{0., 1.}, {1., 0.}}, 0.05]}, 
         InsetBox["8", Offset[{0, 2}, {0.5, 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], Opacity[1], 
          {Arrowheads[0.], ArrowBox[{{1., 1.}, {2., 1.}}, 0.05]}}, 
         InsetBox["1", Offset[{0, 2}, {1.5, 1.}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], Opacity[1], 
          {Arrowheads[0.], ArrowBox[{{1., 1.}, {1., 0.}}, 0.05]}}, 
         InsetBox["3", Offset[{0, 2}, {1., 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{2., 1.}, {1., 0.}}, 0.05]}, 
         InsetBox["4", Offset[{0, 2}, {1.5, 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], ArrowBox[{{2., 1.}, {2., 0.}}, 0.05]}, 
         InsetBox["4", Offset[{0, 2}, {2., 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], Opacity[1], 
          {Arrowheads[0.], ArrowBox[{{0., 0.}, {1., 0.}}, 0.05]}}, 
         InsetBox["4", Offset[{0, 2}, {0.5, 0.}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], Opacity[1], 
          {Arrowheads[0.], ArrowBox[{{1., 0.}, {2., 0.}}, 0.05]}}, 
         InsetBox["2", Offset[{0, 2}, {1.5, 0.}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{0., 2.}, 0.05]}, InsetBox["\<\"a\"\>", {0., 2.},
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{1., 2.}, 0.05]}, InsetBox["\<\"b\"\>", {1., 2.},
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{2., 2.}, 0.05]}, InsetBox["\<\"c\"\>", {2., 2.},
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{0., 1.}, 0.05]}, InsetBox["\<\"d\"\>", {0., 1.},
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{1., 1.}, 0.05]}, InsetBox["\<\"e\"\>", {1., 1.},
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{2., 1.}, 0.05]}, InsetBox["\<\"f\"\>", {2., 1.},
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{0., 0.}, 0.05]}, InsetBox["\<\"g\"\>", {0., 0.},
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{1., 0.}, 0.05]}, InsetBox["\<\"h\"\>", {1., 0.},
          BaseStyle->"Graphics"]}, {
         {Hue[1, 1, 0.7], EdgeForm[{Hue[1, 1, 0.7], Opacity[1]}], 
          DiskBox[{2., 0.}, 0.05]}, InsetBox["\<\"i\"\>", {2., 0.},
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.73878577467925*^9},
 CellLabel->
  "Out[230]=",ExpressionUUID->"7b7b6c49-5b99-4199-85c3-b9bf7fb581ef"]
}, Open  ]],

Cell[TextData[{
 "Before moving on to Kruskal\[CloseCurlyQuote]s algorithm, we create a \
function to produce an animation demonstrating Prim\[CloseCurlyQuote]s \
algorithm in action. First, we modify the ",
 StyleBox["prim", "Code"],
 " function to record the list of edges that form the tree and return this \
list of edges rather than the tree."
}], "Text",ExpressionUUID->"c3f4e3bb-b938-48a8-b846-b2e49aece6d5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"primEdges", "[", "G_Graph", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "newEdge", ",", "T", ",", "edgeList", ",", "n", ",", "i", ",", "v"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newEdge", "=", 
      RowBox[{"minEdge", "[", 
       RowBox[{"G", ",", 
        RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"T", "=", 
      RowBox[{"Graph", "[", 
       RowBox[{"{", "newEdge", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"edgeList", "=", 
      RowBox[{"{", "newEdge", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"n", "=", 
      RowBox[{"VertexCount", "[", "G", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"n", "-", "2"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"newEdge", "=", 
         RowBox[{"minEdge", "[", 
          RowBox[{"G", ",", 
           RowBox[{"VertexList", "[", "T", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"VertexQ", "[", 
           RowBox[{"T", ",", 
            RowBox[{"newEdge", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"T", "=", 
           RowBox[{"VertexAdd", "[", 
            RowBox[{"T", ",", 
             RowBox[{"newEdge", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"T", "=", 
           RowBox[{"VertexAdd", "[", 
            RowBox[{"T", ",", 
             RowBox[{"newEdge", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"T", "=", 
         RowBox[{"EdgeAdd", "[", 
          RowBox[{"T", ",", "newEdge"}], "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"AppendTo", "[", 
         RowBox[{"edgeList", ",", "newEdge"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "edgeList"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[231]:=",ExpressionUUID->"0f01c4e7-c9ea-442a-86e4-07ef0a5cf47c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"primEdges", "[", "exercise3", "]"}]], "Input",
 CellLabel->
  "In[232]:=",ExpressionUUID->"f778819e-4a69-40d0-b64f-72f46e73affe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"e\"\>", "\[UndirectedEdge]", "\<\"f\"\>"}], ",", 
   RowBox[{"\<\"c\"\>", "\[UndirectedEdge]", "\<\"f\"\>"}], ",", 
   RowBox[{"\<\"e\"\>", "\[UndirectedEdge]", "\<\"h\"\>"}], ",", 
   RowBox[{"\<\"h\"\>", "\[UndirectedEdge]", "\<\"i\"\>"}], ",", 
   RowBox[{"\<\"g\"\>", "\[UndirectedEdge]", "\<\"h\"\>"}], ",", 
   RowBox[{"\<\"b\"\>", "\[UndirectedEdge]", "\<\"c\"\>"}], ",", 
   RowBox[{"\<\"b\"\>", "\[UndirectedEdge]", "\<\"d\"\>"}], ",", 
   RowBox[{"\<\"a\"\>", "\[UndirectedEdge]", "\<\"d\"\>"}]}], "}"}]], "Output",\

 CellChangeTimes->{3.7387857747591476`*^9},
 CellLabel->
  "Out[232]=",ExpressionUUID->"9fc7fa48-bdb7-4e60-b610-1f04a8498b21"]
}, Open  ]],

Cell[TextData[{
 "We now write the function that will produce the animation. Since this is \
nearly identical to the ",
 StyleBox["animatePath", "Code"],
 " function from Chapter 10, we refer the reader to Section 10.5 of this \
manual for a detailed explanation."
}], "Text",ExpressionUUID->"df35c3cd-290a-40b9-a824-3dd23eae02a1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"animateTree", "[", 
   RowBox[{"G_Graph", ",", "T_List", ",", "opts___"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", "len"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"len", "=", 
      RowBox[{"Length", "[", "T", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Animate", "[", 
      RowBox[{
       RowBox[{"HighlightGraph", "[", 
        RowBox[{"G", ",", 
         RowBox[{"T", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "i"}], "]"}], "]"}], ",", "opts"}], "]"}], ",", 
       
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "\"\<step\>\""}], "}"}], ",", "0", ",", 
         "len", ",", "1"}], "}"}], ",", 
       RowBox[{"AnimationRunning", "\[Rule]", "False"}], ",", 
       RowBox[{"AnimationRepetitions", "\[Rule]", "1"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[233]:=",ExpressionUUID->"ceb31c39-4be3-4ad6-8d5e-09b5ee3d2f1d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"animateTree", "[", 
  RowBox[{"exercise3", ",", 
   RowBox[{"primEdges", "[", "exercise3", "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[234]:=",ExpressionUUID->"add8a558-9db2-4668-99b6-ba66e615e45f"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$5878$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`i$5878$$], 0, "step"}, 0, 8, 1}}, Typeset`size$$ = {
    360., {177., 182.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`i$5878$5879$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$5878$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`i$5878$$, $CellContext`i$5878$5879$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> HighlightGraph[
        Graph[{"a", "b", "c", "d", "e", "f", "g", "h", "i"}, {
         Null, {{1, 2}, {1, 4}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, {3, 6}, {4, 
          5}, {4, 7}, {4, 8}, {5, 6}, {5, 8}, {6, 8}, {6, 9}, {7, 8}, {8, 
          9}}}, {EdgeLabels -> {
            Placed["EdgeWeight", {0.5, {-1, 0}}]}, VertexLabels -> {
            Placed["Name", Center]}, VertexSize -> {Small}, 
          EdgeWeight -> {5, 2, 4, 3, 5, 6, 3, 7, 6, 8, 1, 3, 4, 4, 4, 2}, 
          VertexCoordinates -> {{0, 2}, {1, 2}, {2, 2}, {0, 1}, {1, 1}, {2, 
           1}, {0, 0}, {1, 0}, {2, 0}}}], 
        Part[{
          UndirectedEdge["e", "f"], 
          UndirectedEdge["c", "f"], 
          UndirectedEdge["e", "h"], 
          UndirectedEdge["h", "i"], 
          UndirectedEdge["g", "h"], 
          UndirectedEdge["b", "c"], 
          UndirectedEdge["b", "d"], 
          UndirectedEdge["a", "d"]}, 
         Span[1, $CellContext`i$5878$$]]], 
      "Specifications" :> {{{$CellContext`i$5878$$, 0, "step"}, 0, 8, 1, 
         AnimationRunning -> False, AnimationRepetitions -> 1, 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
        "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
        True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
     ImageSizeCache->{403., {214., 219.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Animate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.738785774866974*^9},
 CellLabel->
  "Out[234]=",ExpressionUUID->"0626023a-0636-44fd-a7d0-022533d548a7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Kruskal\[CloseCurlyQuote]s Algorithm", "Subsection",
 CellTags->"Section5b",ExpressionUUID->"1fc0032e-8b16-4e84-8c58-6ff52f3ff970"],

Cell["\<\
Recall that Kruskal\[CloseCurlyQuote]s algorithm, Algorithm 2 in Section \
11.5, begins in the same way as Prim\[CloseCurlyQuote]s algorithm, with the \
edge of smallest weight. The difference is that at each step, Kruskal\
\[CloseCurlyQuote]s algorithm adds whatever edge is of least weight which \
does not create a simple circuit, regardless of whether it is incident to an \
edge already in the graph.\
\>", "Text",ExpressionUUID->"bd2ecc11-6497-4098-b8e9-10c7359fad84"],

Cell[TextData[{
 "We begin with a function to test whether or not a given edge will create a \
simple circuit. Note that, during the steps of Kruskal\[CloseCurlyQuote]s \
algorithm, we have a forest of trees. An edge will create a simple circuit if \
and only if both of its endpoints are in the same tree within the forest. We \
use the ",
 StyleBox[ButtonBox["ConnectedComponents",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ConnectedComponents"], "FunctionLink"],
 " function to find the trees. The ",
 StyleBox[ButtonBox["ConnectedComponents",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ConnectedComponents"], "FunctionLink"],
 " function returns a list of lists, where each inner list is the vertices \
within one of the connected components of the graph. We test an edge by \
looping through each of the connected components and making sure that both \
ends do not appear in the same component."
}], "Text",ExpressionUUID->"1c93ec1e-4f16-4f7e-ac78-5500a27d140d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"noCircuitQ", "[", 
   RowBox[{"G_Graph", ",", "edge_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"components", ",", "C"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"components", "=", 
      RowBox[{"ConnectedComponents", "[", "G", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{"C", ",", 
              RowBox[{"edge", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "&&", 
            RowBox[{"MemberQ", "[", 
             RowBox[{"C", ",", 
              RowBox[{"edge", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ",", 
           RowBox[{"Throw", "[", "False", "]"}]}], "]"}], 
         "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"C", ",", "components"}], "}"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Throw", "[", "True", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[235]:=",ExpressionUUID->"c6e4a9e2-64ee-49e2-a907-8fadafa95c34"],

Cell["\<\
We now implement Kruskal\[CloseCurlyQuote]s algorithm. The function is as \
follows.\
\>", "Text",ExpressionUUID->"417f672b-b2d5-4993-9469-aa8d23eb47f8"],

Cell[CellGroupData[{

Cell[TextData[{
 "Initialize ",
 StyleBox["edges", "Code"],
 " to the list of edges of the given graph and sort this list using the ",
 StyleBox["edgeCompare", "Code"],
 " function created above."
}], "Item1Numbered",ExpressionUUID->"f5b5d0fa-decc-4259-9040-bdb403f5b6b4"],

Cell[TextData[{
 "Initialize ",
 StyleBox["T", "Code"],
 " to the graph with all the vertices of ",
 StyleBox["G", "Code"],
 " and no edges."
}], "Item1Numbered",ExpressionUUID->"ac5bd8e4-e873-4658-ad48-5d577199d000"],

Cell[TextData[{
 "Consider the first edge in the ",
 StyleBox["edges", "Code"],
 " list. Use ",
 StyleBox["noCircuitQ", "Code"],
 " to determine if it is safe to add to the tree. If we can add it to the \
tree, add one or both of its ends as new vertices to ",
 StyleBox["T", "Code"],
 " as needed and add the edge."
}], "Item1Numbered",ExpressionUUID->"8fe3c04b-1bfa-45b9-9c15-ccff7e562513"],

Cell[TextData[{
 "Regardless of whether ",
 StyleBox["noCircuitQ", "Code"],
 " approves the addition of the first edge in ",
 StyleBox["edges", "Code"],
 " to the tree, remove the edge from ",
 StyleBox["edges", "Code"],
 "\[LongDash]either the edge is now used in the tree and so will not be used \
again, or its addition would create a circuit (a fact which will not change \
later)."
}], "Item1Numbered",ExpressionUUID->"29727c80-ff46-46e1-9419-5d2a9a69ec49"],

Cell[TextData[{
 "Repeat steps 3 and 4 until ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "9b46ade3-d3ce-4d71-8b8b-2128ee005107"],
 " edges have been added, where ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "d1d0b086-a4a1-45d7-8329-51cc07a850e1"],
 " is the number of vertices."
}], "Item1Numbered",ExpressionUUID->"3dcfbded-77b7-4afe-b13b-5f958cb6d7b9"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"kruskal", "[", 
   RowBox[{"G_Graph", ",", "opts___"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "edges", ",", "T", ",", "n", ",", "i", ",", "newEdge", ",", "v"}], "}"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"edges", "=", 
      RowBox[{"Sort", "[", 
       RowBox[{
        RowBox[{"EdgeList", "[", "G", "]"}], ",", 
        RowBox[{"edgeCompare", "[", "G", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"T", "=", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"VertexList", "[", "G", "]"}], ",", 
        RowBox[{"{", "}"}], ",", "opts"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"n", "=", 
      RowBox[{"VertexCount", "[", "G", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"i", "=", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"n", "-", "1"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"newEdge", "=", 
         RowBox[{"edges", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"noCircuitQ", "[", 
           RowBox[{"T", ",", "newEdge"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"T", "=", 
            RowBox[{"EdgeAdd", "[", 
             RowBox[{"T", ",", "newEdge"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"PropertyValue", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"T", ",", "newEdge"}], "}"}], ",", "EdgeWeight"}], 
             "]"}], "=", 
            RowBox[{"PropertyValue", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"G", ",", "newEdge"}], "}"}], ",", "EdgeWeight"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"PropertyValue", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"T", ",", "newEdge"}], "}"}], ",", "EdgeLabels"}], 
             "]"}], "=", 
            RowBox[{"PropertyValue", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"G", ",", "newEdge"}], "}"}], ",", "EdgeWeight"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"i", "++"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"edges", "=", 
         RowBox[{"Delete", "[", 
          RowBox[{"edges", ",", "1"}], "]"}]}]}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", "T"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[236]:=",ExpressionUUID->"e528778e-e7a2-4f2f-824f-961908b26136"],

Cell["\<\
Note that Kruskal\[CloseCurlyQuote]s algorithm produces the same minimum \
spanning tree for Exercise 3 as did our implementation of Prim\
\[CloseCurlyQuote]s algorithm (in fact, this graph has a unique minimum \
spanning tree).\
\>", "Text",ExpressionUUID->"7ef90475-ff89-4c04-8bef-76f66bce2fa1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"kruskal", "[", 
  RowBox[{"exercise3", ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]], "Input",
 CellLabel->
  "In[237]:=",ExpressionUUID->"f33778bf-d679-43e2-8eed-da3cfc8d42a8"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"a", "b", "c", "d", "e", "f", "g", "h", "i"}, {
      Null, {{5, 6}, {8, 9}, {1, 4}, {5, 8}, {3, 6}, {2, 4}, {7, 8}, {2, 
       3}}}, {EdgeLabels -> {
        UndirectedEdge["g", "h"] -> 4, UndirectedEdge["e", "f"] -> 1, 
         UndirectedEdge["a", "d"] -> 2, UndirectedEdge["h", "i"] -> 2, 
         UndirectedEdge["b", "d"] -> 3, UndirectedEdge["b", "c"] -> 4, 
         UndirectedEdge["c", "f"] -> 3, UndirectedEdge["e", "h"] -> 3}, 
       VertexLabels -> {"Name"}, EdgeWeight -> {1, 1, 1, 1, 1, 1, 1, 4}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], {
         {Arrowheads[0.], 
          ArrowBox[{{0., 0.9428090415820636}, {0., 1.885618083164127}}, 
           0.035526131009863224`]}, 
         InsetBox["2", {0., 1.4142135623730954}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], 
          ArrowBox[{{0., 2.8284271247461903`}, {0.47140452079103173`, 
           3.771236166328254}}, 0.035526131009863224`]}, 
         InsetBox["4", {0.23570226039551587, 3.299831645537222}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], 
          ArrowBox[{{0., 2.8284271247461903`}, {0., 1.885618083164127}}, 
           0.035526131009863224`]}, 
         InsetBox["3", {0., 2.3570226039551585}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], 
          ArrowBox[{{0.47140452079103173`, 3.771236166328254}, {
           0.9428090415820635, 2.8284271247461903`}}, 0.035526131009863224`]},
          InsetBox["3", {0.7071067811865476, 3.299831645537222}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], 
          ArrowBox[{{0.9428090415820635, 1.885618083164127}, {
           0.9428090415820635, 2.8284271247461903`}}, 0.035526131009863224`]},
          InsetBox["1", {0.9428090415820635, 2.3570226039551585}, 
          ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], 
          ArrowBox[{{0.9428090415820635, 1.885618083164127}, {
           0.9428090415820635, 0.9428090415820636}}, 0.035526131009863224`]}, 
         InsetBox["3", {0.9428090415820635, 1.4142135623730954}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], 
          ArrowBox[{{0.47140452079103173`, 0.}, {0.9428090415820635, 
           0.9428090415820636}}, 0.035526131009863224`]}, 
         InsetBox["4", {0.7071067811865476, 0.4714045207910318}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         {Arrowheads[0.], 
          ArrowBox[{{0.9428090415820635, 0.9428090415820636}, {
           1.4142135623730951`, 0.}}, 0.035526131009863224`]}, 
         InsetBox["2", {1.1785113019775793, 0.4714045207910318}, ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.9428090415820636}, 0.035526131009863224], 
         InsetBox["\<\"a\"\>", 
          Offset[{2, 2}, {0.035526131009863224, 0.9783351725919268}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 2.8284271247461903}, 0.035526131009863224], 
         InsetBox["\<\"b\"\>", 
          Offset[{2, 2}, {0.035526131009863224, 2.8639532557560536}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.47140452079103173, 3.771236166328254}, 
          0.035526131009863224], 
         InsetBox["\<\"c\"\>", 
          Offset[{2, 2}, {0.5069306518008949, 3.806762297338117}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 1.885618083164127}, 0.035526131009863224], 
         InsetBox["\<\"d\"\>", 
          Offset[{2, 2}, {0.035526131009863224, 1.92114421417399}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.9428090415820635, 1.885618083164127}, 
          0.035526131009863224], 
         InsetBox["\<\"e\"\>", 
          Offset[{2, 2}, {0.9783351725919267, 1.92114421417399}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.9428090415820635, 2.8284271247461903}, 
          0.035526131009863224], 
         InsetBox["\<\"f\"\>", 
          Offset[{2, 2}, {0.9783351725919267, 2.8639532557560536}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.47140452079103173, 0.}, 0.035526131009863224], 
         InsetBox["\<\"g\"\>", 
          Offset[{2, 2}, {0.5069306518008949, 0.035526131009863224}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.9428090415820635, 0.9428090415820636}, 
          0.035526131009863224], 
         InsetBox["\<\"h\"\>", 
          Offset[{2, 2}, {0.9783351725919267, 0.9783351725919268}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.4142135623730951, 0.}, 0.035526131009863224], 
         InsetBox["\<\"i\"\>", 
          Offset[{2, 2}, {1.4497396933829583, 0.035526131009863224}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785775072377*^9},
 CellLabel->
  "Out[237]=",ExpressionUUID->"82aa694d-2464-45ed-81af-36324cb58ab7"]
}, Open  ]],

Cell[TextData[{
 "We can produce an animation, like we did for Prim\[CloseCurlyQuote]s \
algorithm, by modifying the function to produce the list of edges in the \
order they are added and then using the ",
 StyleBox["animateTree", "Code"],
 " function once again."
}], "Text",ExpressionUUID->"41d038ba-7d52-4db0-95d1-d63e3af4329b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"kruskalEdges", "[", "G_Graph", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "edges", ",", "edgeList", ",", "T", ",", "n", ",", "i", ",", "newEdge", 
      ",", "v"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"edges", "=", 
      RowBox[{"Sort", "[", 
       RowBox[{
        RowBox[{"EdgeList", "[", "G", "]"}], ",", 
        RowBox[{"edgeCompare", "[", "G", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"edgeList", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"T", "=", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"VertexList", "[", "G", "]"}], ",", 
        RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"n", "=", 
      RowBox[{"VertexCount", "[", "G", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"i", "=", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"n", "-", "1"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"newEdge", "=", 
         RowBox[{"edges", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"noCircuitQ", "[", 
           RowBox[{"T", ",", "newEdge"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"T", "=", 
            RowBox[{"EdgeAdd", "[", 
             RowBox[{"T", ",", "newEdge"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"edgeList", ",", "newEdge"}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"i", "++"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"edges", "=", 
         RowBox[{"Delete", "[", 
          RowBox[{"edges", ",", "1"}], "]"}]}]}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", "edgeList"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[238]:=",ExpressionUUID->"0baeb994-f8d1-4f15-9039-5846cad0fd92"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"animateTree", "[", 
  RowBox[{"exercise3", ",", 
   RowBox[{"kruskalEdges", "[", "exercise3", "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[239]:=",ExpressionUUID->"e1d20c3a-4f9e-4163-82a0-9cc38b1f91cd"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$5964$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`i$5964$$], 0, "step"}, 0, 8, 1}}, Typeset`size$$ = {
    360., {177., 182.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`i$5964$5965$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$5964$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`i$5964$$, $CellContext`i$5964$5965$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> HighlightGraph[
        Graph[{"a", "b", "c", "d", "e", "f", "g", "h", "i"}, {
         Null, {{1, 2}, {1, 4}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, {3, 6}, {4, 
          5}, {4, 7}, {4, 8}, {5, 6}, {5, 8}, {6, 8}, {6, 9}, {7, 8}, {8, 
          9}}}, {EdgeLabels -> {
            Placed["EdgeWeight", {0.5, {-1, 0}}]}, VertexLabels -> {
            Placed["Name", Center]}, VertexSize -> {Small}, 
          EdgeWeight -> {5, 2, 4, 3, 5, 6, 3, 7, 6, 8, 1, 3, 4, 4, 4, 2}, 
          VertexCoordinates -> {{0, 2}, {1, 2}, {2, 2}, {0, 1}, {1, 1}, {2, 
           1}, {0, 0}, {1, 0}, {2, 0}}}], 
        Part[{
          UndirectedEdge["e", "f"], 
          UndirectedEdge["h", "i"], 
          UndirectedEdge["a", "d"], 
          UndirectedEdge["e", "h"], 
          UndirectedEdge["c", "f"], 
          UndirectedEdge["b", "d"], 
          UndirectedEdge["g", "h"], 
          UndirectedEdge["b", "c"]}, 
         Span[1, $CellContext`i$5964$$]]], 
      "Specifications" :> {{{$CellContext`i$5964$$, 0, "step"}, 0, 8, 1, 
         AnimationRunning -> False, AnimationRepetitions -> 1, 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
        "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
        True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
     ImageSizeCache->{403., {214., 219.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Animate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.738785775121376*^9},
 CellLabel->
  "Out[239]=",ExpressionUUID->"1fa97aa4-4812-4d26-8fc1-9a5a04499373"]
}, Open  ]],

Cell["\<\
By comparing the two animations, you can see how the two algorithms provide \
different routes to the same end result.\
\>", "Text",ExpressionUUID->"569aaaf3-6e8f-4d95-8e7c-81175cc0a6be"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Solutions to Computer Projects and Computations and Explorations\
\>", "Section",
 CellTags->"Solutions",ExpressionUUID->"4b4b17bd-6b37-46ca-83be-f0f8f25e6cac"],

Cell[CellGroupData[{

Cell["Computer Projects 6", "Subsection",
 CellTags->
  "SolutionsCP6",ExpressionUUID->"bdf6b0ce-46c9-419a-9ed9-acbac6bbcac6"],

Cell["\<\
Given the ordered list of edges of an ordered rooted tree, find the universal \
addresses of its vertices.\
\>", "Problem",ExpressionUUID->"29ed8bf9-74e6-412b-9e61-60225275dfcd"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " Recall that the universal address of a vertex in an ordered rooted tree is \
defined as follows. The root has address 0 and its children have addresses 1, \
2, 3, etc., in order. The address of every other vertex is defined \
recursively as ",
 Cell[BoxData[
  FormBox[
   RowBox[{"p", ".", "n"}], TraditionalForm]],ExpressionUUID->
  "96501bb4-1272-455d-b438-42e6207b4bdd"],
 " where ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "d0e09695-751c-46f1-b846-96600e78cc2a"],
 " is the address of the vertex\[CloseCurlyQuote]s parent and ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "58a7ee22-fad4-40dd-a650-75e23a897423"],
 " is 1 if the vertex is the first child of its parent, 2 if it is the second \
child, etc."
}], "Text",ExpressionUUID->"900f4fe9-fca5-4569-a367-5bd2d0ddb576"],

Cell["\<\
Before solving this problem, we will make the following assumption on the \
input, as per the problem statement: the edges are sorted according to the \
lexicographical order of the universal address of their terminal vertex. That \
is to say, the edges are listed in the order of their appearance from left to \
right and top to bottom when the tree is drawn in the usual way. \
\>", "Text",ExpressionUUID->"616f1958-3eab-416c-a3c4-f7d67243eea7"],

Cell[TextData[{
 "We build the ordered rooted tree (satisfying ",
 StyleBox["orderedRootedTreeQ", "Code"],
 ") determined by the list of edges and add a \
\[OpenCurlyDoubleQuote]univ-address\[CloseCurlyDoubleQuote] property to each \
vertex containing the vertex\[CloseCurlyQuote]s universal address. First, \
here is an ordered list of edges for an ordered rooted tree."
}], "Text",ExpressionUUID->"a1678e08-9dd9-4bd3-9b9e-deee8024e461"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cp6Example", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\"\<D\>\"", "\[Rule]", "\"\<E\>\""}], ",", 
    RowBox[{"\"\<D\>\"", "\[Rule]", "\"\<C\>\""}], ",", 
    RowBox[{"\"\<D\>\"", "\[Rule]", "\"\<I\>\""}], ",", 
    RowBox[{"\"\<E\>\"", "\[Rule]", "\"\<L\>\""}], ",", 
    RowBox[{"\"\<E\>\"", "\[Rule]", "\"\<F\>\""}], ",", 
    RowBox[{"\"\<I\>\"", "\[Rule]", "\"\<B\>\""}], ",", 
    RowBox[{"\"\<I\>\"", "\[Rule]", "\"\<K\>\""}], ",", 
    RowBox[{"\"\<I\>\"", "\[Rule]", "\"\<H\>\""}], ",", 
    RowBox[{"\"\<F\>\"", "\[Rule]", "\"\<J\>\""}], ",", 
    RowBox[{"\"\<F\>\"", "\[Rule]", "\"\<G\>\""}], ",", 
    RowBox[{"\"\<F\>\"", "\[Rule]", "\"\<A\>\""}]}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[240]:=",ExpressionUUID->"d45ddeb3-63fb-4c19-9ce3-db9b53d9eca6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"D\"\>", "\[Rule]", "\<\"E\"\>"}], ",", 
   RowBox[{"\<\"D\"\>", "\[Rule]", "\<\"C\"\>"}], ",", 
   RowBox[{"\<\"D\"\>", "\[Rule]", "\<\"I\"\>"}], ",", 
   RowBox[{"\<\"E\"\>", "\[Rule]", "\<\"L\"\>"}], ",", 
   RowBox[{"\<\"E\"\>", "\[Rule]", "\<\"F\"\>"}], ",", 
   RowBox[{"\<\"I\"\>", "\[Rule]", "\<\"B\"\>"}], ",", 
   RowBox[{"\<\"I\"\>", "\[Rule]", "\<\"K\"\>"}], ",", 
   RowBox[{"\<\"I\"\>", "\[Rule]", "\<\"H\"\>"}], ",", 
   RowBox[{"\<\"F\"\>", "\[Rule]", "\<\"J\"\>"}], ",", 
   RowBox[{"\<\"F\"\>", "\[Rule]", "\<\"G\"\>"}], ",", 
   RowBox[{"\<\"F\"\>", "\[Rule]", "\<\"A\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{3.738785775246933*^9},
 CellLabel->
  "Out[240]=",ExpressionUUID->"703215ff-9757-4714-9eeb-5f4c8562fac6"]
}, Open  ]],

Cell["\<\
We have purposefully chosen vertex names that are out of order with respect \
to the ordering of the edges so that our construction is sure to rely only on \
the ordering of the edges and not on the vertex labels.\
\>", "Text",ExpressionUUID->"38186edc-8447-418f-b2d1-4a267192a979"],

Cell[TextData[{
 "Note that creating a graph with these edges only requires passing it to the \
",
 StyleBox[ButtonBox["Graph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graph"], "FunctionLink"],
 " function."
}], "Text",ExpressionUUID->"5e937dc2-3682-48fe-917c-b193d638f129"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cp6Graph", "=", 
   RowBox[{"Graph", "[", "cp6Example", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[241]:=",ExpressionUUID->"2cb6a74c-f476-47b7-8df3-5771f5e9b22c"],

Cell["\<\
Our first task is to turn this into an ordered rooted tree. Since we provided \
directed edges, it is already a rooted tree.\
\>", "Text",ExpressionUUID->"1730ae61-6bdc-434f-a1c2-95f3c10a902c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rootedTreeQ", "[", "cp6Graph", "]"}]], "Input",
 CellLabel->
  "In[242]:=",ExpressionUUID->"630e9c9b-d58e-4634-bcd5-56b0cf8abba4"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.73878577534239*^9},
 CellLabel->
  "Out[242]=",ExpressionUUID->"e6168078-c62c-4945-b137-e593cc009a29"]
}, Open  ]],

Cell["\<\
To make this graph an ordered rooted tree, we need to set the \
\[OpenCurlyDoubleQuote]order\[CloseCurlyDoubleQuote] property for each \
vertex. For the root, we just set the root\[CloseCurlyQuote]s \
\[OpenCurlyDoubleQuote]order\[CloseCurlyDoubleQuote] to 0.\
\>", "Text",ExpressionUUID->"8435e61a-b738-4be5-a3f2-a791b7407d39"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"PropertyValue", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"cp6Graph", ",", 
      RowBox[{"findRoot", "[", "cp6Graph", "]"}]}], "}"}], ",", 
    "\"\<order\>\""}], "]"}], "=", "0"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[243]:=",ExpressionUUID->"ace0521f-f158-4f63-a269-e23fe4e25caf"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.738785775412352*^9},
 CellLabel->
  "Out[243]=",ExpressionUUID->"4998528c-5759-4ad7-926e-b93bc4672994"]
}, Open  ]],

Cell[TextData[{
 "For the rest of the vertices, we need to do some more work. Our approach \
will be as follows. Loop through all of the edges in the original edge list, \
in order, keeping track of two variables, ",
 StyleBox["curParent", "Code"],
 ", the current parent, and the ",
 StyleBox["childOrder", "Code"],
 ". The ",
 StyleBox["curParent", "Code"],
 " will initially be set to the root of the tree and ",
 StyleBox["childOrder", "Code"],
 " will be initialized to 1. For the first edge in the list, we assign the \
child vertex (the terminal vertex of the ordered edge) \
\[OpenCurlyDoubleQuote]order\[CloseCurlyDoubleQuote] equal to ",
 StyleBox["childOrder", "Code"],
 ". We then go to the next edge. If the ",
 StyleBox["curParent", "Code"],
 " is the same as the parent vertex in this edge, then ",
 StyleBox["childOrder", "Code"],
 " is incremented and we assign the child vertex of this edge an order equal \
to the new ",
 StyleBox["childOrder", "Code"],
 " value. Otherwise, the parent vertex of this new edge is different from ",
 StyleBox["curParent", "Code"],
 ". This indicates that we have moved on to a new parent with a new set of \
children, so we set ",
 StyleBox["curParent", "Code"],
 " to this new parent and reset ",
 StyleBox["childOrder", "Code"],
 " to 1. Here is the code for this step in the process."
}], "Text",ExpressionUUID->"e6a25314-3bc2-4583-9df7-d92fabb0ecbf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"curParent", "=", 
   RowBox[{"findRoot", "[", "cp6Graph", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"childOrder", "=", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"thisEdge", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "\[NotEqual]", "curParent"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"curParent", "=", 
        RowBox[{"thisEdge", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"childOrder", "=", "1"}]}]}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"PropertyValue", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"cp6Graph", ",", 
         RowBox[{"thisEdge", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", "\"\<order\>\""}], 
      "]"}], "=", "childOrder"}], ";", "\[IndentingNewLine]", 
    RowBox[{"childOrder", "++"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{"thisEdge", ",", "cp6Example"}], "}"}]}], "]"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[244]:=",ExpressionUUID->"9d23d2d3-c1a1-4f10-b3c3-d59af90154e9"],

Cell["\<\
Now that the order attributes are set, our graph is an ordered rooted tree. \
\>", "Text",ExpressionUUID->"0d20c3f9-dd70-4c40-941c-ac31b7774b1c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"orderedRootedTreeQ", "[", "cp6Graph", "]"}]], "Input",
 CellLabel->
  "In[247]:=",ExpressionUUID->"4594bb8e-4eec-4054-b171-18916a35eb8b"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.7387857755134153`*^9},
 CellLabel->
  "Out[247]=",ExpressionUUID->"1bcb1c48-e70d-46bb-8083-1b9120d5fa45"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"cp6Graph", ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]], "Input",
 CellLabel->
  "In[248]:=",ExpressionUUID->"29c5a056-93d5-4b95-b9a4-4110e047c252"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "D", "E", "C", "I", "L", "F", "B", "K", "H", "J", "G", "A"}, {{{1, 2}, {
       1, 3}, {1, 4}, {2, 5}, {2, 6}, {4, 7}, {4, 8}, {4, 9}, {6, 10}, {6, 
       11}, {6, 12}}, Null}, {
      GraphLayout -> {"Dimension" -> 2}, 
       Properties -> {
        "F" -> {"order" -> 2}, "E" -> {"order" -> 1}, "D" -> {"order" -> 0}, 
         "A" -> {"order" -> 3}, "K" -> {"order" -> 2}, "J" -> {"order" -> 1}, 
         "G" -> {"order" -> 2}, "I" -> {"order" -> 3}, "H" -> {"order" -> 3}, 
         "L" -> {"order" -> 1}, "B" -> {"order" -> 1}, "C" -> {"order" -> 2}},
        VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[CompressedData["
1:eJxTTMoPSmVmYGDgBmImKJZ3L2gqrP5qnyIhznQ+k8nhdulJJpHeG/a3wPQP
e3R5CP2JgDyTA0we3TwGKIDwX2DI34aKw+Sxm/cDpzwqH5d+DgdU+xH2MaAB
dPnbaOqwyyP8CQCEJ4gM
         "], 0.030731491585499593`]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{1.34263754799435, 2.3016643679903144}, 
          0.030731491585499593], 
         InsetBox["\<\"D\"\>", 
          Offset[{2, 2}, {1.3733690395798495, 2.332395859575814}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.38361072799838575, 1.5344429119935428}, 
          0.030731491585499593], 
         InsetBox["\<\"E\"\>", 
          Offset[{2, 2}, {0.41434221958388534, 1.5651744035790425}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.1508321839951572, 1.5344429119935428}, 
          0.030731491585499593], 
         InsetBox["\<\"C\"\>", 
          Offset[{2, 2}, {1.181563675580657, 1.5651744035790425}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.3016643679903144, 1.5344429119935428}, 
          0.030731491585499593], 
         InsetBox["\<\"I\"\>", 
          Offset[{2, 2}, {2.332395859575814, 1.5651744035790425}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 0.7672214559967714}, 0.030731491585499593], 
         InsetBox["\<\"L\"\>", 
          Offset[{2, 2}, {0.030731491585499593, 0.797952947582271}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.7672214559967715, 0.7672214559967714}, 
          0.030731491585499593], 
         InsetBox["\<\"F\"\>", 
          Offset[{2, 2}, {0.7979529475822711, 0.797952947582271}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.534442911993543, 0.7672214559967714}, 
          0.030731491585499593], 
         InsetBox["\<\"B\"\>", 
          Offset[{2, 2}, {1.5651744035790425, 0.797952947582271}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.3016643679903144, 0.7672214559967714}, 
          0.030731491585499593], 
         InsetBox["\<\"K\"\>", 
          Offset[{2, 2}, {2.332395859575814, 0.797952947582271}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{3.068885823987086, 0.7672214559967714}, 
          0.030731491585499593], 
         InsetBox["\<\"H\"\>", 
          Offset[{2, 2}, {3.0996173155725857, 0.797952947582271}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.030731491585499593], 
         InsetBox["\<\"J\"\>", 
          Offset[{2, 2}, {0.030731491585499593, 0.030731491585499593}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.7672214559967715, 0.}, 0.030731491585499593], 
         InsetBox["\<\"G\"\>", 
          Offset[{2, 2}, {0.7979529475822711, 0.030731491585499593}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.534442911993543, 0.}, 0.030731491585499593], 
         InsetBox["\<\"A\"\>", 
          Offset[{2, 2}, {1.5651744035790425, 0.030731491585499593}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785775593833*^9},
 CellLabel->
  "Out[248]=",ExpressionUUID->"77974cc0-68a9-4110-8165-679503406713"]
}, Open  ]],

Cell["We use the approach above to define a function.", "Text",ExpressionUUID->"d440b893-0bae-41cc-847d-c9a0fa11fee6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"treeFromList", "[", 
   RowBox[{"L_List", ",", "opts___"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "T", ",", "e", ",", "curParent", ",", "childOrder", ",", "thisEdge"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"T", "=", 
      RowBox[{"Graph", "[", 
       RowBox[{"L", ",", "opts"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"PropertyValue", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"T", ",", 
          RowBox[{"findRoot", "[", "T", "]"}]}], "}"}], ",", 
        "\"\<order\>\""}], "]"}], "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"curParent", "=", 
      RowBox[{"findRoot", "[", "T", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"childOrder", "=", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"thisEdge", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "\[NotEqual]", "curParent"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"curParent", "=", 
            RowBox[{"thisEdge", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"childOrder", "=", "1"}]}]}], "\[IndentingNewLine]", "]"}],
         ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"PropertyValue", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"T", ",", 
             RowBox[{"thisEdge", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", "\"\<order\>\""}],
           "]"}], "=", "childOrder"}], ";", "\[IndentingNewLine]", 
        RowBox[{"childOrder", "++"}]}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"thisEdge", ",", "L"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "T"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->
  "In[249]:=",ExpressionUUID->"de110c7b-f639-46e0-8260-0d7bd3984be1"],

Cell[TextData[{
 "We could now create a function that uses the pattern of a breadth first \
search to assign the universal addresses. Instead, we will take this \
opportunity to use the built-in function ",
 StyleBox[ButtonBox["BreadthFirstScan",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BreadthFirstScan"], "FunctionLink"],
 " instead. The first two arguments will be the graph and the root of the \
graph, which explicitly indicates where to begin the breadth first search. \
The third argument will be a list specifying a function to use when the event \
",
 StyleBox["\[OpenCurlyDoubleQuote]DiscoverVertex\[CloseCurlyDoubleQuote]", 
  "Input"],
 " occurs. The function is applied to two arguments, ",
 StyleBox["#1", "Code"],
 " refers to the vertex being discovered, and ",
 StyleBox["#2", "Code"],
 " refers to the vertex from which it is discovered, that is, its parent. The \
body of our function will check if the parent has \
\[OpenCurlyDoubleQuote]order\[CloseCurlyDoubleQuote] property 0, indicating \
that the discovered vertex is either the root or a child of the root. In this \
case, the \[OpenCurlyDoubleQuote]univ-address\[CloseCurlyDoubleQuote] \
property will be set to the vertex\[CloseCurlyQuote]s order. Otherwise, the \
\[OpenCurlyDoubleQuote]univ-address\[CloseCurlyDoubleQuote] will be set to \
the concatenation of the parent\[CloseCurlyQuote]s address and the vertex\
\[CloseCurlyQuote]s order."
}], "Text",ExpressionUUID->"3de30971-0eef-4472-b61a-d86cd64d6920"],

Cell[BoxData[
 RowBox[{
  RowBox[{"universalAddress", "[", 
   RowBox[{"edgeList_List", ",", "opts___"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "G", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"G", "=", 
      RowBox[{"treeFromList", "[", 
       RowBox[{"edgeList", ",", "opts"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"BreadthFirstScan", "[", 
      RowBox[{"G", ",", 
       RowBox[{"findRoot", "[", "G", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DiscoverVertex\>\"", "\[Rule]", "\[IndentingNewLine]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"PropertyValue", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"G", ",", "#2"}], "}"}], ",", "\"\<order\>\""}], 
                 "]"}], "\[Equal]", "0"}], ",", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{"root", " ", "or", " ", 
                 RowBox[{"root", "'"}], "s", " ", "child"}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"PropertyValue", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"G", ",", "#1"}], "}"}], ",", 
                  "\"\<univ-address\>\""}], "]"}], "=", 
                RowBox[{"ToString", "[", 
                 RowBox[{"PropertyValue", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"G", ",", "#1"}], "}"}], ",", "\"\<order\>\""}], 
                  "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{"descendant", " ", "of", " ", "a", " ", 
                 RowBox[{"root", "'"}], "s", " ", "child"}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"PropertyValue", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"G", ",", "#1"}], "}"}], ",", 
                  "\"\<univ-address\>\""}], "]"}], "=", 
                RowBox[{
                 RowBox[{"PropertyValue", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"G", ",", "#2"}], "}"}], ",", 
                   "\"\<univ-address\>\""}], "]"}], "<>", "\"\<.\>\"", "<>", 
                 RowBox[{"ToString", "[", 
                  RowBox[{"PropertyValue", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"G", ",", "#1"}], "}"}], ",", "\"\<order\>\""}], 
                   "]"}], "]"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "set", " ", "address", " ", "as", " ", "vertex", " ", "label"}],
               " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"PropertyValue", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"G", ",", "#1"}], "}"}], ",", "VertexLabels"}], 
               "]"}], "=", 
              RowBox[{"PropertyValue", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"G", ",", "#1"}], "}"}], ",", 
                "\"\<univ-address\>\""}], "]"}]}]}], "\[IndentingNewLine]", 
            ")"}], "&"}], ")"}]}], "}"}]}], "]"}], ";", "\[IndentingNewLine]",
      "G"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[250]:=",ExpressionUUID->"12ed41fe-b10c-4e13-a0f2-32f62e4c5a8b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"universalAddress", "[", "cp6Example", "]"}]], "Input",
 CellLabel->
  "In[251]:=",ExpressionUUID->"3320a672-2cfc-4f2b-b5d5-4eb65e6cc8cb"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "D", "E", "C", "I", "L", "F", "B", "K", "H", "J", "G", "A"}, {{{1, 2}, {
       1, 3}, {1, 4}, {2, 5}, {2, 6}, {4, 7}, {4, 8}, {4, 9}, {6, 10}, {6, 
       11}, {6, 12}}, Null}, {
      Properties -> {
        "F" -> {"order" -> 2, "univ-address" -> "1.2"}, 
         "E" -> {"order" -> 1, "univ-address" -> "1"}, 
         "D" -> {"order" -> 0, "univ-address" -> "0"}, 
         "A" -> {"order" -> 3, "univ-address" -> "1.2.3"}, 
         "K" -> {"order" -> 2, "univ-address" -> "3.2"}, 
         "J" -> {"order" -> 1, "univ-address" -> "1.2.1"}, 
         "I" -> {"order" -> 3, "univ-address" -> "3"}, 
         "G" -> {"order" -> 2, "univ-address" -> "1.2.2"}, 
         "H" -> {"order" -> 3, "univ-address" -> "3.3"}, 
         "L" -> {"order" -> 1, "univ-address" -> "1.1"}, 
         "B" -> {"order" -> 1, "univ-address" -> "3.1"}, 
         "C" -> {"order" -> 2, "univ-address" -> "2"}}, 
       VertexLabels -> {
        "A" -> "1.2.3", "F" -> "1.2", "C" -> "2", "L" -> "1.1", "E" -> "1", 
         "I" -> "3", "K" -> "3.2", "G" -> "1.2.2", "B" -> "3.1", "D" -> "0", 
         "J" -> "1.2.1", "H" -> "3.3"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[CompressedData["
1:eJxTTMoPSmVmYGDgBmImKJZ3L2gqrP5qnyIhznQ+k8nhdulJJpHeG/a3wPQP
e3R5CP2JgDyTA0we3TwGKIDwX2DI34aKw+Sxm/cDpzwqH5d+DgdU+xH2MaAB
dPnbaOqwyyP8CQCEJ4gM
         "], 0.030731491585499593`]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{1.34263754799435, 2.3016643679903144}, 
          0.030731491585499593], 
         InsetBox["\<\"0\"\>", 
          Offset[{2, 2}, {1.3733690395798495, 2.332395859575814}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.38361072799838575, 1.5344429119935428}, 
          0.030731491585499593], 
         InsetBox["\<\"1\"\>", 
          Offset[{2, 2}, {0.41434221958388534, 1.5651744035790425}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.1508321839951572, 1.5344429119935428}, 
          0.030731491585499593], 
         InsetBox["\<\"2\"\>", 
          Offset[{2, 2}, {1.181563675580657, 1.5651744035790425}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.3016643679903144, 1.5344429119935428}, 
          0.030731491585499593], 
         InsetBox["\<\"3\"\>", 
          Offset[{2, 2}, {2.332395859575814, 1.5651744035790425}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 0.7672214559967714}, 0.030731491585499593], 
         InsetBox["\<\"1.1\"\>", 
          Offset[{2, 2}, {0.030731491585499593, 0.797952947582271}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.7672214559967715, 0.7672214559967714}, 
          0.030731491585499593], 
         InsetBox["\<\"1.2\"\>", 
          Offset[{2, 2}, {0.7979529475822711, 0.797952947582271}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.534442911993543, 0.7672214559967714}, 
          0.030731491585499593], 
         InsetBox["\<\"3.1\"\>", 
          Offset[{2, 2}, {1.5651744035790425, 0.797952947582271}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.3016643679903144, 0.7672214559967714}, 
          0.030731491585499593], 
         InsetBox["\<\"3.2\"\>", 
          Offset[{2, 2}, {2.332395859575814, 0.797952947582271}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{3.068885823987086, 0.7672214559967714}, 
          0.030731491585499593], 
         InsetBox["\<\"3.3\"\>", 
          Offset[{2, 2}, {3.0996173155725857, 0.797952947582271}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.030731491585499593], 
         InsetBox["\<\"1.2.1\"\>", 
          Offset[{2, 2}, {0.030731491585499593, 0.030731491585499593}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.7672214559967715, 0.}, 0.030731491585499593], 
         InsetBox["\<\"1.2.2\"\>", 
          Offset[{2, 2}, {0.7979529475822711, 0.030731491585499593}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.534442911993543, 0.}, 0.030731491585499593], 
         InsetBox["\<\"1.2.3\"\>", 
          Offset[{2, 2}, {1.5651744035790425, 0.030731491585499593}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.738785775690529*^9},
 CellLabel->
  "Out[251]=",ExpressionUUID->"8faa8d87-870f-4f19-b1f2-a7c34cf632cf"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computations and Explorations 1", "Subsection",
 CellTags->
  "SolutionsCE1",ExpressionUUID->"d5ff6e5c-5844-4a24-a8d2-8b4e618331a3"],

Cell["Display all trees with six vertices.", "Problem",ExpressionUUID->"b0dfe88c-53f8-4116-ad5c-f9783971a36b"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " To solve this problem, we make use of a recursive definition of tress. The \
empty graph is a tree, the graph with a single vertex is also a tree, and the \
graph with two vertices with an edge between them is a tree. Given any tree, \
we can form a new tree with one additional vertex by adding the new vertex as \
a leaf connected to any one of the original vertices. (The reader can verify \
that this indeed creates all trees with one more vertex.)"
}], "Text",ExpressionUUID->"349b9b3b-33ef-49f1-b38d-74820346ae34"],

Cell[TextData[{
 "We shall create a function, called ",
 StyleBox["extendTrees", "Code"],
 ", that accepts as input a list of trees on ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "2a19e0f2-60f9-4af7-b3ba-a5166b68e262"],
 " vertices and returns the resulting list of trees on ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "6ed69b73-5f63-4b7c-9c9f-361fa62677ef"],
 " vertices. For each of the original trees, we consider each vertex of the \
tree and create a new tree by adding a leaf to it."
}], "Text",ExpressionUUID->"be6add61-3596-44b9-ba61-463756daca2e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"extendTrees", "[", "trees_List", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"newTrees", ",", "newV", ",", "T", ",", "v", ",", "newT"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newTrees", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newV", "=", 
      RowBox[{
       RowBox[{"VertexCount", "[", 
        RowBox[{"trees", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "+", "1"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"newT", "=", 
           RowBox[{"VertexAdd", "[", 
            RowBox[{"T", ",", "newV"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"newT", "=", 
           RowBox[{"EdgeAdd", "[", 
            RowBox[{"newT", ",", 
             RowBox[{"v", "\[Rule]", "newV"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"newTrees", ",", "newT"}], "]"}]}], "\[IndentingNewLine]", 
         ",", 
         RowBox[{"{", 
          RowBox[{"v", ",", 
           RowBox[{"VertexList", "[", "T", "]"}]}], "}"}]}], "]"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"T", ",", "trees"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "newTrees"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[252]:=",ExpressionUUID->"f9f81ab1-4c0b-4c0e-ac65-4417d8771026"],

Cell["\<\
We can now use this procedure to determine all trees on four vertices. \
Finding all the trees of larger sizes is left to the reader. \
\>", "Text",ExpressionUUID->"6497d935-81b2-4283-9b1f-7b352d0c4f79"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"allTrees", "=", 
  RowBox[{"{", 
   RowBox[{"Graph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", "\[Rule]", "2"}], "}"}], ",", 
     RowBox[{"DirectedEdges", "\[Rule]", "True"}], ",", 
     RowBox[{"GraphLayout", "\[Rule]", "\"\<LayeredDigraphEmbedding\>\""}]}], 
    "]"}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[253]:=",ExpressionUUID->"33fba284-9108-4e0c-ae75-833b7d99ae37"],

Cell[BoxData[
 RowBox[{"{", 
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2}, {{{1, 2}}, Null}, {
       GraphLayout -> "LayeredDigraphEmbedding"}]]}, 
     TagBox[GraphicsGroupBox[GraphicsComplexBox[{{0., 1.}, {0., 0.}}, {
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
          ArrowBox[{1, 2}, 0.01273]}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          DiskBox[1, 0.01273], DiskBox[2, 0.01273]}}]],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   FormatType->TraditionalForm,
   FrameTicks->None], "}"}]], "Output",
 CellChangeTimes->{3.738785775761848*^9},
 CellLabel->
  "Out[253]=",ExpressionUUID->"26060c7a-3faa-4073-b6c3-c8586c08c03f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{"i", "=", "3"}], ",", 
    RowBox[{"i", "\[LessEqual]", "4"}], ",", 
    RowBox[{"i", "++"}], ",", 
    RowBox[{"allTrees", "=", 
     RowBox[{"extendTrees", "[", "allTrees", "]"}]}]}], "]"}], ";"}]], "Input",\

 InitializationCell->True,
 CellLabel->
  "In[254]:=",ExpressionUUID->"bb32d37f-8186-48b9-9431-f6a148a098d6"],

Cell["We now display the six trees on four vertices. ", "Text",ExpressionUUID->"630612bf-587a-49f4-b61b-6e9a3d64298f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"Partition", "[", 
    RowBox[{"allTrees", ",", "3"}], "]"}], ",", 
   RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellLabel->
  "In[255]:=",ExpressionUUID->"0105976b-ecdc-4ff4-9b71-1149a787bc95"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2, 3, 4}, {{{1, 2}, {1, 3}, {1, 4}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding"}]]}, 
        TagBox[
         GraphicsGroupBox[
          GraphicsComplexBox[{{0., 1.}, {-1., 0.}, {0., 0.}, {1., 0.}}, {
            {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
             ArrowBox[{1, 2}, 0.02261146496815286], 
             ArrowBox[{1, 3}, 0.02261146496815286], 
             ArrowBox[{1, 4}, 0.02261146496815286]}, 
            {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
             DiskBox[1, 0.02261146496815286], DiskBox[2, 0.02261146496815286],
              DiskBox[3, 0.02261146496815286], 
             DiskBox[4, 0.02261146496815286]}}]],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FormatType->TraditionalForm,
      FrameTicks->None], 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2, 3, 4}, {{{1, 2}, {1, 3}, {2, 4}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding"}]]}, 
        TagBox[
         GraphicsGroupBox[
          GraphicsComplexBox[{{0., 2.}, {0., 1.}, {1., 1.}, {0., 0.}}, {
            {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
             ArrowBox[{1, 2}, 0.02261146496815286], 
             ArrowBox[{1, 3}, 0.02261146496815286], 
             ArrowBox[{2, 4}, 0.02261146496815286]}, 
            {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
             DiskBox[1, 0.02261146496815286], DiskBox[2, 0.02261146496815286],
              DiskBox[3, 0.02261146496815286], 
             DiskBox[4, 0.02261146496815286]}}]],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FormatType->TraditionalForm,
      FrameTicks->None], 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2, 3, 4}, {{{1, 2}, {1, 3}, {3, 4}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding"}]]}, 
        TagBox[
         GraphicsGroupBox[
          GraphicsComplexBox[{{0., 2.}, {0., 1.}, {1., 1.}, {1., 0.}}, {
            {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
             ArrowBox[{1, 2}, 0.02261146496815286], 
             ArrowBox[{1, 3}, 0.02261146496815286], 
             ArrowBox[{3, 4}, 0.02261146496815286]}, 
            {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
             DiskBox[1, 0.02261146496815286], DiskBox[2, 0.02261146496815286],
              DiskBox[3, 0.02261146496815286], 
             DiskBox[4, 0.02261146496815286]}}]],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2, 3, 4}, {{{1, 2}, {2, 3}, {1, 4}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding"}]]}, 
        TagBox[
         GraphicsGroupBox[
          GraphicsComplexBox[{{0., 2.}, {0., 1.}, {0., 0.}, {1., 1.}}, {
            {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
             ArrowBox[{1, 2}, 0.02261146496815286], 
             ArrowBox[{1, 4}, 0.02261146496815286], 
             ArrowBox[{2, 3}, 0.02261146496815286]}, 
            {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
             DiskBox[1, 0.02261146496815286], DiskBox[2, 0.02261146496815286],
              DiskBox[3, 0.02261146496815286], 
             DiskBox[4, 0.02261146496815286]}}]],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FormatType->TraditionalForm,
      FrameTicks->None], 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2, 3, 4}, {{{1, 2}, {2, 3}, {2, 4}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding"}]]}, 
        TagBox[
         GraphicsGroupBox[
          GraphicsComplexBox[{{0., 2.}, {0., 1.}, {-1., 0.}, {0., 0.}}, {
            {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
             ArrowBox[{1, 2}, 0.02261146496815286], 
             ArrowBox[{2, 3}, 0.02261146496815286], 
             ArrowBox[{2, 4}, 0.02261146496815286]}, 
            {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
             DiskBox[1, 0.02261146496815286], DiskBox[2, 0.02261146496815286],
              DiskBox[3, 0.02261146496815286], 
             DiskBox[4, 0.02261146496815286]}}]],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FormatType->TraditionalForm,
      FrameTicks->None], 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2, 3, 4}, {{{1, 2}, {2, 3}, {3, 4}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding"}]]}, 
        TagBox[
         GraphicsGroupBox[
          GraphicsComplexBox[{{0., 3.}, {0., 2.}, {0., 1.}, {0., 0.}}, {
            {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
             ArrowBox[{1, 2}, 0.030239520958083826`], 
             ArrowBox[{2, 3}, 0.030239520958083826`], 
             ArrowBox[{3, 4}, 0.030239520958083826`]}, 
            {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
             DiskBox[1, 0.030239520958083826], 
             DiskBox[2, 0.030239520958083826], 
             DiskBox[3, 0.030239520958083826], 
             DiskBox[4, 0.030239520958083826]}}]],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FormatType->TraditionalForm,
      FrameTicks->None]}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.7387857759895144`*^9},
 CellLabel->
  "Out[255]=",ExpressionUUID->"ccb7b4bc-34de-49f1-8d0a-15e5cef906a8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computations and Explorations 3", "Subsection",
 CellTags->
  "SolutionsCE3",ExpressionUUID->"4d758b29-280d-4e7f-aa62-bcb7b92ee796"],

Cell["\<\
Construct a Huffman code for the symbols with ASCII codes given the frequency \
of their occurrence in representative input. \
\>", "Problem",ExpressionUUID->"261a4d8a-8d35-4461-815b-09cec24a7e8d"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " ASCII, which stands for American Standard Code for Information \
Interchange, includes 128 characters, including 33 non-printing characters. \
Most of the non-printing characters, with the exception of the space and the \
carriage return or newline character, however, are rarely used. We will focus \
on the standard characters of English and the newline character."
}], "Text",ExpressionUUID->"3e8bf03b-4e5e-428a-a5e8-edd62b82cd22"],

Cell[TextData[{
 "Since we have already created the function, ",
 StyleBox["huffmanCode", "Code"],
 ", which creates a Huffman code based on a list of character/weight pairs, \
the main work we need to do is determine the frequencies of characters in a \
sample input. We use the following input, which contains letters, \
punctuation, and newline characters. "
}], "Text",ExpressionUUID->"e90dd81d-2aa0-4b07-95ed-77bbc403d321"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"inputText", "=", 
  "\"\<The quick brown fox said,\n\\\"How do you do, my friend?\\\"\nThen he \
ran very quickly off into the sunset.\>\""}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[256]:=",ExpressionUUID->"74f6aa12-43aa-4d89-ac9b-2963af0249f2"],

Cell[BoxData["\<\"The quick brown fox said,\\n\\\"How do you do, my friend?\\\
\"\\nThen he ran very quickly off into the sunset.\"\>"], "Output",
 CellChangeTimes->{3.7387857760758057`*^9},
 CellLabel->
  "Out[256]=",ExpressionUUID->"89e4a5d0-64b9-41b9-a64e-393ed1e76280"]
}, Open  ]],

Cell[TextData[{
 "We can turn this string into a list by applying the ",
 StyleBox[ButtonBox["Characters",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Characters"], "FunctionLink"],
 " function."
}], "Text",ExpressionUUID->"7a29cfad-ff5d-460e-bd7e-e615fd35fa23"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"textList", "=", 
  RowBox[{"Characters", "[", "inputText", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[257]:=",ExpressionUUID->"f151852b-c440-4d9c-b442-39d6d2350e2c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"T\"\>", ",", "\<\"h\"\>", ",", "\<\"e\"\>", ",", "\<\" \"\>", 
   ",", "\<\"q\"\>", ",", "\<\"u\"\>", ",", "\<\"i\"\>", ",", "\<\"c\"\>", 
   ",", "\<\"k\"\>", ",", "\<\" \"\>", ",", "\<\"b\"\>", ",", "\<\"r\"\>", 
   ",", "\<\"o\"\>", ",", "\<\"w\"\>", ",", "\<\"n\"\>", ",", "\<\" \"\>", 
   ",", "\<\"f\"\>", ",", "\<\"o\"\>", ",", "\<\"x\"\>", ",", "\<\" \"\>", 
   ",", "\<\"s\"\>", ",", "\<\"a\"\>", ",", "\<\"i\"\>", ",", "\<\"d\"\>", 
   ",", "\<\",\"\>", ",", "\<\"\\n\"\>", ",", "\<\"\\\"\"\>", 
   ",", "\<\"H\"\>", ",", "\<\"o\"\>", ",", "\<\"w\"\>", ",", "\<\" \"\>", 
   ",", "\<\"d\"\>", ",", "\<\"o\"\>", ",", "\<\" \"\>", ",", "\<\"y\"\>", 
   ",", "\<\"o\"\>", ",", "\<\"u\"\>", ",", "\<\" \"\>", ",", "\<\"d\"\>", 
   ",", "\<\"o\"\>", ",", "\<\",\"\>", ",", "\<\" \"\>", ",", "\<\"m\"\>", 
   ",", "\<\"y\"\>", ",", "\<\" \"\>", ",", "\<\"f\"\>", ",", "\<\"r\"\>", 
   ",", "\<\"i\"\>", ",", "\<\"e\"\>", ",", "\<\"n\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"?\"\>", ",", "\<\"\\\"\"\>", ",", "\<\"\\n\"\>", 
   ",", "\<\"T\"\>", ",", "\<\"h\"\>", ",", "\<\"e\"\>", ",", "\<\"n\"\>", 
   ",", "\<\" \"\>", ",", "\<\"h\"\>", ",", "\<\"e\"\>", ",", "\<\" \"\>", 
   ",", "\<\"r\"\>", ",", "\<\"a\"\>", ",", "\<\"n\"\>", ",", "\<\" \"\>", 
   ",", "\<\"v\"\>", ",", "\<\"e\"\>", ",", "\<\"r\"\>", ",", "\<\"y\"\>", 
   ",", "\<\" \"\>", ",", "\<\"q\"\>", ",", "\<\"u\"\>", ",", "\<\"i\"\>", 
   ",", "\<\"c\"\>", ",", "\<\"k\"\>", ",", "\<\"l\"\>", ",", "\<\"y\"\>", 
   ",", "\<\" \"\>", ",", "\<\"o\"\>", ",", "\<\"f\"\>", ",", "\<\"f\"\>", 
   ",", "\<\" \"\>", ",", "\<\"i\"\>", ",", "\<\"n\"\>", ",", "\<\"t\"\>", 
   ",", "\<\"o\"\>", ",", "\<\" \"\>", ",", "\<\"t\"\>", ",", "\<\"h\"\>", 
   ",", "\<\"e\"\>", ",", "\<\" \"\>", ",", "\<\"s\"\>", ",", "\<\"u\"\>", 
   ",", "\<\"n\"\>", ",", "\<\"s\"\>", ",", "\<\"e\"\>", ",", "\<\"t\"\>", 
   ",", "\<\".\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.738785776146541*^9},
 CellLabel->
  "Out[257]=",ExpressionUUID->"5050abf3-3a1c-4de4-a689-4796a80e5275"]
}, Open  ]],

Cell[TextData[{
 "Using ",
 StyleBox[ButtonBox["FullForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FullForm"], "FunctionLink"],
 ", we can display the newline characters for us explicitly. Observe that the \
Wolfram Language differentiates between a newline character and a space \
character."
}], "Text",ExpressionUUID->"2a8d98f9-e97b-4506-a154-03543fe00c65"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"textList", "[", 
   RowBox[{"[", "26", "]"}], "]"}], "//", "FullForm"}]], "Input",
 CellLabel->
  "In[258]:=",ExpressionUUID->"9a00e0eb-13fc-4da2-af19-faab699d1f23"],

Cell[BoxData[
 TagBox[
  StyleBox["\"\<\\n\>\"",
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.738785776216572*^9},
 CellLabel->
  "Out[258]//FullForm=",ExpressionUUID->"4992bf33-5585-4afd-8f70-\
02ed9b07ceac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"textList", "[", 
   RowBox[{"[", "4", "]"}], "]"}], "//", "FullForm"}]], "Input",
 CellLabel->
  "In[259]:=",ExpressionUUID->"46b45f86-0bc8-45f9-bb6c-895d446443a4"],

Cell[BoxData[
 TagBox[
  StyleBox["\"\< \>\"",
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.738785776282721*^9},
 CellLabel->
  "Out[259]//FullForm=",ExpressionUUID->"98d0925c-ad93-4f4f-a741-\
d56bd50b409c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"textList", "[", 
   RowBox[{"[", "26", "]"}], "]"}], "\[Equal]", 
  RowBox[{"textList", "[", 
   RowBox[{"[", "4", "]"}], "]"}]}]], "Input",
 CellLabel->
  "In[260]:=",ExpressionUUID->"2797ae19-8b85-4bb6-8338-920753913e37"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.73878577634655*^9},
 CellLabel->
  "Out[260]=",ExpressionUUID->"b44bbc23-a4c5-4530-a4be-78b2aa57c389"]
}, Open  ]],

Cell[TextData[{
 "We will calculate the frequencies of the characters in our text by applying \
the ",
 StyleBox[ButtonBox["Tally",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Tally"], "FunctionLink"],
 " function. When applied to a list, ",
 StyleBox[ButtonBox["Tally",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Tally"], "FunctionLink"],
 " returns a list of pairs consisting of the unique elements of the original \
list and the number of times each appears."
}], "Text",ExpressionUUID->"4b8c9c7e-5bbb-4cc1-ae57-753622758265"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tally", "[", 
  RowBox[{"Characters", "[", "inputText", "]"}], "]"}]], "Input",
 CellLabel->
  "In[261]:=",ExpressionUUID->"875ed14f-cfd0-4651-b883-8a995d90f40c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"T\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"h\"\>", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"e\"\>", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\" \"\>", ",", "17"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"q\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"u\"\>", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"i\"\>", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"k\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"r\"\>", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"o\"\>", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"w\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"n\"\>", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"f\"\>", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"x\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"s\"\>", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"d\"\>", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\",\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"\\n\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"\\\"\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"H\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"y\"\>", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"m\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"?\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"v\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"l\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"t\"\>", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\".\"\>", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7387857764137993`*^9},
 CellLabel->
  "Out[261]=",ExpressionUUID->"68d7539a-5b32-40d9-a53b-da0c15e93a23"]
}, Open  ]],

Cell[TextData[{
 "The Huffman function expects the input to consist of the characters and \
their relative frequency. Thus, we need to divide the counts from the ",
 StyleBox[ButtonBox["Tally",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Tally"], "FunctionLink"],
 " output by the number of characters."
}], "Text",ExpressionUUID->"faad8d78-ce39-4bca-a0a9-abe3e19d5fac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"Characters", "[", "inputText", "]"}], "]"}]], "Input",
 CellLabel->
  "In[262]:=",ExpressionUUID->"5a530d28-b0db-4349-862d-03179b27d014"],

Cell[BoxData["99"], "Output",
 CellChangeTimes->{3.738785776483096*^9},
 CellLabel->
  "Out[262]=",ExpressionUUID->"f3328044-f021-45dc-8a9f-01a3470b6880"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"foxList", "=", 
  RowBox[{
   RowBox[{"Tally", "[", 
    RowBox[{"Characters", "[", "inputText", "]"}], "]"}], "/.", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"c_", ",", "n_"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"c", ",", 
      RowBox[{"n", "/", "99"}]}], "}"}]}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[263]:=",ExpressionUUID->"1e0d7983-7d5c-4035-93e9-ddda99a7bbb8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"T\"\>", ",", 
     FractionBox["2", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"h\"\>", ",", 
     FractionBox["4", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"e\"\>", ",", 
     FractionBox["7", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\" \"\>", ",", 
     FractionBox["17", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"q\"\>", ",", 
     FractionBox["2", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"u\"\>", ",", 
     FractionBox["4", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"i\"\>", ",", 
     FractionBox["5", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", 
     FractionBox["2", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"k\"\>", ",", 
     FractionBox["2", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", 
     FractionBox["1", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"r\"\>", ",", 
     FractionBox["4", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"o\"\>", ",", 
     FractionBox["8", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"w\"\>", ",", 
     FractionBox["2", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"n\"\>", ",", 
     FractionBox["2", "33"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"f\"\>", ",", 
     FractionBox["4", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"x\"\>", ",", 
     FractionBox["1", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"s\"\>", ",", 
     FractionBox["1", "33"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", 
     FractionBox["2", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"d\"\>", ",", 
     FractionBox["4", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\",\"\>", ",", 
     FractionBox["2", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"\\n\"\>", ",", 
     FractionBox["2", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"\\\"\"\>", ",", 
     FractionBox["2", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"H\"\>", ",", 
     FractionBox["1", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"y\"\>", ",", 
     FractionBox["4", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"m\"\>", ",", 
     FractionBox["1", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"?\"\>", ",", 
     FractionBox["1", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"v\"\>", ",", 
     FractionBox["1", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"l\"\>", ",", 
     FractionBox["1", "99"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"t\"\>", ",", 
     FractionBox["1", "33"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\".\"\>", ",", 
     FractionBox["1", "99"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.73878577654704*^9},
 CellLabel->
  "Out[263]=",ExpressionUUID->"e5a5d26e-3791-4dfc-95b2-254a475ece6b"]
}, Open  ]],

Cell[TextData[{
 "Finally, we are able to apply the ",
 StyleBox["huffmanCode", "Code"],
 " function."
}], "Text",ExpressionUUID->"113665e4-b1e4-4cc9-8f90-9569e6bfc3cf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"foxCode", "=", 
  RowBox[{"huffmanCode", "[", 
   RowBox[{"foxList", ",", 
    RowBox[{"VertexLabels", "\[Rule]", 
     RowBox[{"Placed", "[", 
      RowBox[{"\"\<Name\>\"", ",", "Below"}], "]"}]}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "500"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[264]:=",ExpressionUUID->"540eda25-39f9-4026-8708-057fdf29131b"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "I29", "I24", "I11", "t", "n", "I19", "I26", "I13", "k", "q", "I8", 
       "I14", "\n", "I2", "x", "m", "I5", "u", "I21", "I12", "a", "I9", "I15",
        "I1", "l", "?", "y", "f", "I22", "I28", "w", "r", "I18", "i", " ", 
       "I27", "c", "I10", "T", "o", "I23", "\"", "I7", "b", "I4", "H", "I16", 
       "h", "I25", "s", ",", "e", "I20", ".", "I3", "v", "I6", "I17", 
       "d"}, {{{14, 15}, {14, 44}, {45, 16}, {45, 46}, {17, 14}, {17, 45}, {
       43, 13}, {43, 42}, {12, 17}, {12, 43}, {47, 18}, {47, 48}, {19, 12}, {
       19, 47}, {11, 10}, {11, 39}, {38, 9}, {38, 37}, {8, 11}, {8, 38}, {41, 
       8}, {41, 40}, {7, 19}, {7, 41}, {24, 25}, {24, 54}, {55, 26}, {55, 
       56}, {57, 24}, {57, 55}, {23, 27}, {23, 57}, {58, 28}, {58, 59}, {29, 
       23}, {29, 58}, {22, 21}, {22, 51}, {20, 22}, {20, 50}, {53, 20}, {53, 
       52}, {49, 29}, {49, 53}, {30, 7}, {30, 49}, {6, 5}, {6, 34}, {3, 4}, {
       3, 31}, {33, 3}, {33, 32}, {2, 6}, {2, 33}, {36, 2}, {36, 35}, {1, 
       30}, {1, 36}}, Null}, {
      EdgeLabels -> {
        DirectedEdge["I9", "a"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I16", "h"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I25", "I20"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I6", "I1"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I27", " "] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I23", "I13"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I20", "e"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I26", "I21"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I28", "I26"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I21", "I14"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I2", "b"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I4", "m"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I24", "I19"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I16", "u"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I29", "I27"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I11", "w"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I21", "I16"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I3", "v"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I5", "I2"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I17", "d"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I12", "I9"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I24", "I18"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I10", "c"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I14", "I5"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I25", "I22"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I19", "n"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I7", "\n"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I6", "I3"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I26", "I23"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I13", "I8"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I3", "?"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I4", "H"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I28", "I25"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I10", "k"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I18", "I11"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I17", "f"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I1", "l"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I9", ","] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I22", "I17"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I22", "I15"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I8", "T"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I1", "."] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I5", "I4"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I15", "y"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I15", "I6"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I7", "\""] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I20", "I12"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I13", "I10"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I27", "I24"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I18", "r"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I12", "s"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I14", "I7"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I11", "t"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I29", "I28"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I19", "i"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I2", "x"] -> Placed[0, {0.5, {1, 0}}], 
         DirectedEdge["I23", "o"] -> Placed[1, {0.5, {-1, 0}}], 
         DirectedEdge["I8", "q"] -> Placed[0, {0.5, {1, 0}}]}, 
       GraphLayout -> {"LayeredEmbedding", "RootVertex" -> "I29"}, ImageSize -> 
       500, Properties -> {
        "v" -> {"order" -> 2}, "I15" -> {"order" -> 1}, 
         "I25" -> {"order" -> 2}, "r" -> {"order" -> 2}, 
         "I1" -> {"order" -> 1}, "I19" -> {"order" -> 1}, 
         "u" -> {"order" -> 1}, "T" -> {"order" -> 2}, "o" -> {"order" -> 2}, 
         "\n" -> {"order" -> 1}, "a" -> {"order" -> 1}, 
         "I24" -> {"order" -> 1}, "I10" -> {"order" -> 2}, 
         "I7" -> {"order" -> 2}, "." -> {"order" -> 2}, "l" -> {"order" -> 1},
          "I12" -> {"order" -> 1}, "w" -> {"order" -> 2}, 
         "k" -> {"order" -> 1}, "I9" -> {"order" -> 1}, "y" -> {"order" -> 1},
          "I22" -> {"order" -> 1}, "?" -> {"order" -> 1}, 
         "h" -> {"order" -> 2}, "I17" -> {"order" -> 2}, 
         "I3" -> {"order" -> 2}, "c" -> {"order" -> 2}, "t" -> {"order" -> 1},
          "," -> {"order" -> 2}, "I8" -> {"order" -> 1}, 
         " " -> {"order" -> 2}, "I23" -> {"order" -> 2}, 
         "H" -> {"order" -> 2}, "d" -> {"order" -> 2}, 
         "I16" -> {"order" -> 2}, "I18" -> {"order" -> 2}, 
         "x" -> {"order" -> 1}, "I28" -> {"order" -> 1}, 
         "b" -> {"order" -> 2}, "I2" -> {"order" -> 1}, "n" -> {"order" -> 1},
          "GraphProperties" -> {"weight" -> 1}, "I26" -> {"order" -> 1}, 
         "I14" -> {"order" -> 1}, "I5" -> {"order" -> 1}, 
         "f" -> {"order" -> 1}, "I29" -> {"order" -> 0}, 
         "i" -> {"order" -> 2}, "I13" -> {"order" -> 1}, 
         "I11" -> {"order" -> 1}, "e" -> {"order" -> 2}, 
         "\"" -> {"order" -> 2}, "m" -> {"order" -> 1}, 
         "I20" -> {"order" -> 2}, "I4" -> {"order" -> 2}, 
         "s" -> {"order" -> 2}, "I21" -> {"order" -> 1}, 
         "I27" -> {"order" -> 2}, "I6" -> {"order" -> 2}, 
         "q" -> {"order" -> 1}}, VertexCoordinates -> {{
          Rational[1, 2], 1}, {
          Rational[5, 8], 
          Rational[5, 7]}, {
          Rational[21, 32], 
          Rational[3, 7]}, {
          Rational[41, 64], 
          Rational[2, 7]}, {
          Rational[17, 32], 
          Rational[3, 7]}, {
          Rational[9, 16], 
          Rational[4, 7]}, {
          Rational[1, 8], 
          Rational[5, 7]}, {
          Rational[5, 32], 
          Rational[3, 7]}, {
          Rational[21, 128], 
          Rational[1, 7]}, {
          Rational[17, 128], 
          Rational[1, 7]}, {
          Rational[9, 64], 
          Rational[2, 7]}, {
          Rational[1, 32], 
          Rational[3, 7]}, {
          Rational[5, 128], 
          Rational[1, 7]}, {
          Rational[1, 128], 
          Rational[1, 7]}, {
          Rational[1, 256], 0}, {
          Rational[5, 256], 0}, {
          Rational[1, 64], 
          Rational[2, 7]}, {
          Rational[5, 64], 
          Rational[2, 7]}, {
          Rational[1, 16], 
          Rational[4, 7]}, {
          Rational[13, 32], 
          Rational[3, 7]}, {
          Rational[49, 128], 
          Rational[1, 7]}, {
          Rational[25, 64], 
          Rational[2, 7]}, {
          Rational[9, 32], 
          Rational[3, 7]}, {
          Rational[37, 128], 
          Rational[1, 7]}, {
          Rational[73, 256], 0}, {
          Rational[77, 256], 0}, {
          Rational[17, 64], 
          Rational[2, 7]}, {
          Rational[21, 64], 
          Rational[2, 7]}, {
          Rational[5, 16], 
          Rational[4, 7]}, {
          Rational[1, 4], 
          Rational[6, 7]}, {
          Rational[43, 64], 
          Rational[2, 7]}, {
          Rational[23, 32], 
          Rational[3, 7]}, {
          Rational[11, 16], 
          Rational[4, 7]}, {
          Rational[19, 32], 
          Rational[3, 7]}, {
          Rational[7, 8], 
          Rational[5, 7]}, {
          Rational[3, 4], 
          Rational[6, 7]}, {
          Rational[23, 128], 
          Rational[1, 7]}, {
          Rational[11, 64], 
          Rational[2, 7]}, {
          Rational[19, 128], 
          Rational[1, 7]}, {
          Rational[7, 32], 
          Rational[3, 7]}, {
          Rational[3, 16], 
          Rational[4, 7]}, {
          Rational[7, 128], 
          Rational[1, 7]}, {
          Rational[3, 64], 
          Rational[2, 7]}, {
          Rational[3, 256], 0}, {
          Rational[3, 128], 
          Rational[1, 7]}, {
          Rational[7, 256], 0}, {
          Rational[3, 32], 
          Rational[3, 7]}, {
          Rational[7, 64], 
          Rational[2, 7]}, {
          Rational[3, 8], 
          Rational[5, 7]}, {
          Rational[27, 64], 
          Rational[2, 7]}, {
          Rational[51, 128], 
          Rational[1, 7]}, {
          Rational[15, 32], 
          Rational[3, 7]}, {
          Rational[7, 16], 
          Rational[4, 7]}, {
          Rational[75, 256], 0}, {
          Rational[39, 128], 
          Rational[1, 7]}, {
          Rational[79, 256], 0}, {
          Rational[19, 64], 
          Rational[2, 7]}, {
          Rational[11, 32], 
          Rational[3, 7]}, {
          Rational[23, 64], 
          Rational[2, 7]}}, VertexLabels -> {
         Placed["Name", Below]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[
        0.03653452914798206], {
         ArrowBox[{{0.5, 1.}, {0.25, 0.8571428571428571}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.375, 0.9285714285714286}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.5, 1.}, {0.75, 0.8571428571428571}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.625, 0.9285714285714286}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.625, 0.7142857142857143}, {0.5625, 0.5714285714285714}},
           0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.59375, 0.6428571428571428}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.625, 0.7142857142857143}, {0.6875, 0.5714285714285714}},
           0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.65625, 0.6428571428571428}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.65625, 0.42857142857142855`}, {0.640625, 
          0.2857142857142857}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.6484375, 0.3571428571428571}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.65625, 0.42857142857142855`}, {0.671875, 
          0.2857142857142857}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.6640625, 0.3571428571428571}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.5625, 0.5714285714285714}, {0.53125, 
          0.42857142857142855`}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.546875, 0.5}], ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.5625, 0.5714285714285714}, {0.59375, 
          0.42857142857142855`}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.578125, 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.125, 0.7142857142857143}, {0.0625, 0.5714285714285714}},
           0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.09375, 0.6428571428571428}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.125, 0.7142857142857143}, {0.1875, 0.5714285714285714}},
           0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.15625, 0.6428571428571428}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.15625, 0.42857142857142855`}, {0.140625, 
          0.2857142857142857}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.1484375, 0.3571428571428571}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.15625, 0.42857142857142855`}, {0.171875, 
          0.2857142857142857}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.1640625, 0.3571428571428571}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.140625, 0.2857142857142857}, {0.1328125, 
          0.14285714285714285`}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.13671875, 0.21428571428571427}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.140625, 0.2857142857142857}, {0.1484375, 
          0.14285714285714285`}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.14453125, 0.21428571428571427}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.03125, 0.42857142857142855`}, {0.015625, 
          0.2857142857142857}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.0234375, 0.3571428571428571}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.03125, 0.42857142857142855`}, {0.046875, 
          0.2857142857142857}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.0390625, 0.3571428571428571}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.0078125, 0.14285714285714285`}, {0.00390625, 0.}}, 
          0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.005859375, 0.07142857142857142}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.0078125, 0.14285714285714285`}, {0.01171875, 0.}}, 
          0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.009765625, 0.07142857142857142}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.015625, 0.2857142857142857}, {0.0078125, 
          0.14285714285714285`}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.01171875, 0.21428571428571427}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.015625, 0.2857142857142857}, {0.0234375, 
          0.14285714285714285`}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.01953125, 0.21428571428571427}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.0625, 0.5714285714285714}, {0.03125, 
          0.42857142857142855`}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.046875, 0.5}], ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.0625, 0.5714285714285714}, {0.09375, 
          0.42857142857142855`}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.078125, 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.40625, 0.42857142857142855`}, {0.390625, 
          0.2857142857142857}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.3984375, 0.3571428571428571}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.40625, 0.42857142857142855`}, {0.421875, 
          0.2857142857142857}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.4140625, 0.3571428571428571}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.390625, 0.2857142857142857}, {0.3828125, 
          0.14285714285714285`}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.38671875, 0.21428571428571427}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.390625, 0.2857142857142857}, {0.3984375, 
          0.14285714285714285`}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.39453125, 0.21428571428571427}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.28125, 0.42857142857142855`}, {0.265625, 
          0.2857142857142857}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.2734375, 0.3571428571428571}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.28125, 0.42857142857142855`}, {0.296875, 
          0.2857142857142857}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.2890625, 0.3571428571428571}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.2890625, 0.14285714285714285`}, {0.28515625, 0.}}, 
          0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.287109375, 0.07142857142857142}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.2890625, 0.14285714285714285`}, {0.29296875, 0.}}, 
          0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.291015625, 0.07142857142857142}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.3125, 0.5714285714285714}, {0.28125, 
          0.42857142857142855`}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.296875, 0.5}], ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.3125, 0.5714285714285714}, {0.34375, 
          0.42857142857142855`}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.328125, 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.25, 0.8571428571428571}, {0.125, 0.7142857142857143}}, 
          0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.1875, 0.7857142857142857}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.25, 0.8571428571428571}, {0.375, 0.7142857142857143}}, 
          0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.3125, 0.7857142857142857}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.6875, 0.5714285714285714}, {0.65625, 
          0.42857142857142855`}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.671875, 0.5}], ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.6875, 0.5714285714285714}, {0.71875, 
          0.42857142857142855`}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.703125, 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.75, 0.8571428571428571}, {0.625, 0.7142857142857143}}, 
          0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.6875, 0.7857142857142857}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.75, 0.8571428571428571}, {0.875, 0.7142857142857143}}, 
          0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.8125, 0.7857142857142857}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.171875, 0.2857142857142857}, {0.1640625, 
          0.14285714285714285`}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.16796875, 0.21428571428571427}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.171875, 0.2857142857142857}, {0.1796875, 
          0.14285714285714285`}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.17578125, 0.21428571428571427}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.1875, 0.5714285714285714}, {0.15625, 
          0.42857142857142855`}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.171875, 0.5}], ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.1875, 0.5714285714285714}, {0.21875, 
          0.42857142857142855`}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.203125, 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.046875, 0.2857142857142857}, {0.0390625, 
          0.14285714285714285`}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.04296875, 0.21428571428571427}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.046875, 0.2857142857142857}, {0.0546875, 
          0.14285714285714285`}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.05078125, 0.21428571428571427}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.0234375, 0.14285714285714285`}, {0.01953125, 0.}}, 
          0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.021484375, 0.07142857142857142}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.0234375, 0.14285714285714285`}, {0.02734375, 0.}}, 
          0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.025390625, 0.07142857142857142}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.09375, 0.42857142857142855`}, {0.078125, 
          0.2857142857142857}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.0859375, 0.3571428571428571}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.09375, 0.42857142857142855`}, {0.109375, 
          0.2857142857142857}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.1015625, 0.3571428571428571}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.375, 0.7142857142857143}, {0.3125, 0.5714285714285714}},
           0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.34375, 0.6428571428571428}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.375, 0.7142857142857143}, {0.4375, 0.5714285714285714}},
           0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.40625, 0.6428571428571428}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.4375, 0.5714285714285714}, {0.40625, 
          0.42857142857142855`}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.421875, 0.5}], ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.4375, 0.5714285714285714}, {0.46875, 
          0.42857142857142855`}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.453125, 0.5}], ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.3046875, 0.14285714285714285`}, {0.30078125, 0.}}, 
          0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.302734375, 0.07142857142857142}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.3046875, 0.14285714285714285`}, {0.30859375, 0.}}, 
          0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.306640625, 0.07142857142857142}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.296875, 0.2857142857142857}, {0.2890625, 
          0.14285714285714285`}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.29296875, 0.21428571428571427}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.296875, 0.2857142857142857}, {0.3046875, 
          0.14285714285714285`}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.30078125, 0.21428571428571427}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.34375, 0.42857142857142855`}, {0.328125, 
          0.2857142857142857}}, 0.01273], 
         InsetBox["0", Offset[{0, 2}, {0.3359375, 0.3571428571428571}], 
          ImageScaled[{1, 0}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.34375, 0.42857142857142855`}, {0.359375, 
          0.2857142857142857}}, 0.01273], 
         InsetBox["1", Offset[{0, 2}, {0.3515625, 0.3571428571428571}], 
          ImageScaled[{-1, 0}],
          BaseStyle->"Graphics"]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0.5, 1.}, 0.01273], 
         InsetBox["\<\"I29\"\>", Offset[{0, -2}, {0.5, 0.98727}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.625, 0.7142857142857143}, 0.01273], 
         InsetBox["\<\"I24\"\>", Offset[{0, -2}, {0.625, 0.7015557142857143}],
           ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.65625, 0.42857142857142855}, 0.01273], 
         InsetBox["\<\"I11\"\>", 
          Offset[{0, -2}, {0.65625, 0.41584142857142853}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.640625, 0.2857142857142857}, 0.01273], 
         InsetBox["\<\"t\"\>", 
          Offset[{0, -2}, {0.640625, 0.2729842857142857}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.53125, 0.42857142857142855}, 0.01273], 
         InsetBox["\<\"n\"\>", 
          Offset[{0, -2}, {0.53125, 0.41584142857142853}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.5625, 0.5714285714285714}, 0.01273], 
         InsetBox["\<\"I19\"\>", 
          Offset[{0, -2}, {0.5625, 0.5586985714285714}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.125, 0.7142857142857143}, 0.01273], 
         InsetBox["\<\"I26\"\>", Offset[{0, -2}, {0.125, 0.7015557142857143}],
           ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.15625, 0.42857142857142855}, 0.01273], 
         InsetBox["\<\"I13\"\>", 
          Offset[{0, -2}, {0.15625, 0.41584142857142853}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.1640625, 0.14285714285714285}, 0.01273], 
         InsetBox["\<\"k\"\>", 
          Offset[{0, -2}, {0.1640625, 0.13012714285714286}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.1328125, 0.14285714285714285}, 0.01273], 
         InsetBox["\<\"q\"\>", 
          Offset[{0, -2}, {0.1328125, 0.13012714285714286}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.140625, 0.2857142857142857}, 0.01273], 
         InsetBox["\<\"I8\"\>", 
          Offset[{0, -2}, {0.140625, 0.2729842857142857}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.03125, 0.42857142857142855}, 0.01273], 
         InsetBox["\<\"I14\"\>", 
          Offset[{0, -2}, {0.03125, 0.41584142857142853}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.0390625, 0.14285714285714285}, 0.01273], 
         InsetBox["\<\"\\n\"\>", 
          Offset[{0, -2}, {0.0390625, 0.13012714285714286}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.0078125, 0.14285714285714285}, 0.01273], 
         InsetBox["\<\"I2\"\>", 
          Offset[{0, -2}, {0.0078125, 0.13012714285714286}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.00390625, 0.}, 0.01273], 
         InsetBox["\<\"x\"\>", Offset[{0, -2}, {0.00390625, -0.01273}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.01953125, 0.}, 0.01273], 
         InsetBox["\<\"m\"\>", Offset[{0, -2}, {0.01953125, -0.01273}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.015625, 0.2857142857142857}, 0.01273], 
         InsetBox["\<\"I5\"\>", 
          Offset[{0, -2}, {0.015625, 0.2729842857142857}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.078125, 0.2857142857142857}, 0.01273], 
         InsetBox["\<\"u\"\>", 
          Offset[{0, -2}, {0.078125, 0.2729842857142857}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.0625, 0.5714285714285714}, 0.01273], 
         InsetBox["\<\"I21\"\>", 
          Offset[{0, -2}, {0.0625, 0.5586985714285714}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.40625, 0.42857142857142855}, 0.01273], 
         InsetBox["\<\"I12\"\>", 
          Offset[{0, -2}, {0.40625, 0.41584142857142853}], ImageScaled[{0.5, 1}],\

          BaseStyle->"Graphics"]}, {
         DiskBox[{0.3828125, 0.14285714285714285}, 0.01273], 
         InsetBox["\<\"a\"\>", 
          Offset[{0, -2}, {0.3828125, 0.13012714285714286}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.390625, 0.2857142857142857}, 0.01273], 
         InsetBox["\<\"I9\"\>", 
          Offset[{0, -2}, {0.390625, 0.2729842857142857}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.28125, 0.42857142857142855}, 0.01273], 
         InsetBox["\<\"I15\"\>", 
          Offset[{0, -2}, {0.28125, 0.41584142857142853}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.2890625, 0.14285714285714285}, 0.01273], 
         InsetBox["\<\"I1\"\>", 
          Offset[{0, -2}, {0.2890625, 0.13012714285714286}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.28515625, 0.}, 0.01273], 
         InsetBox["\<\"l\"\>", Offset[{0, -2}, {0.28515625, -0.01273}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.30078125, 0.}, 0.01273], 
         InsetBox["\<\"?\"\>", Offset[{0, -2}, {0.30078125, -0.01273}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.265625, 0.2857142857142857}, 0.01273], 
         InsetBox["\<\"y\"\>", 
          Offset[{0, -2}, {0.265625, 0.2729842857142857}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.328125, 0.2857142857142857}, 0.01273], 
         InsetBox["\<\"f\"\>", 
          Offset[{0, -2}, {0.328125, 0.2729842857142857}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.3125, 0.5714285714285714}, 0.01273], 
         InsetBox["\<\"I22\"\>", 
          Offset[{0, -2}, {0.3125, 0.5586985714285714}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.25, 0.8571428571428571}, 0.01273], 
         InsetBox["\<\"I28\"\>", Offset[{0, -2}, {0.25, 0.8444128571428571}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.671875, 0.2857142857142857}, 0.01273], 
         InsetBox["\<\"w\"\>", 
          Offset[{0, -2}, {0.671875, 0.2729842857142857}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.71875, 0.42857142857142855}, 0.01273], 
         InsetBox["\<\"r\"\>", 
          Offset[{0, -2}, {0.71875, 0.41584142857142853}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.6875, 0.5714285714285714}, 0.01273], 
         InsetBox["\<\"I18\"\>", 
          Offset[{0, -2}, {0.6875, 0.5586985714285714}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.59375, 0.42857142857142855}, 0.01273], 
         InsetBox["\<\"i\"\>", 
          Offset[{0, -2}, {0.59375, 0.41584142857142853}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.875, 0.7142857142857143}, 0.01273], 
         InsetBox["\<\" \"\>", Offset[{0, -2}, {0.875, 0.7015557142857143}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.75, 0.8571428571428571}, 0.01273], 
         InsetBox["\<\"I27\"\>", Offset[{0, -2}, {0.75, 0.8444128571428571}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.1796875, 0.14285714285714285}, 0.01273], 
         InsetBox["\<\"c\"\>", 
          Offset[{0, -2}, {0.1796875, 0.13012714285714286}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.171875, 0.2857142857142857}, 0.01273], 
         InsetBox["\<\"I10\"\>", 
          Offset[{0, -2}, {0.171875, 0.2729842857142857}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.1484375, 0.14285714285714285}, 0.01273], 
         InsetBox["\<\"T\"\>", 
          Offset[{0, -2}, {0.1484375, 0.13012714285714286}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.21875, 0.42857142857142855}, 0.01273], 
         InsetBox["\<\"o\"\>", 
          Offset[{0, -2}, {0.21875, 0.41584142857142853}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.1875, 0.5714285714285714}, 0.01273], 
         InsetBox["\<\"I23\"\>", 
          Offset[{0, -2}, {0.1875, 0.5586985714285714}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.0546875, 0.14285714285714285}, 0.01273], 
         InsetBox["\<\"\\\"\"\>", 
          Offset[{0, -2}, {0.0546875, 0.13012714285714286}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.046875, 0.2857142857142857}, 0.01273], 
         InsetBox["\<\"I7\"\>", 
          Offset[{0, -2}, {0.046875, 0.2729842857142857}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.01171875, 0.}, 0.01273], 
         InsetBox["\<\"b\"\>", Offset[{0, -2}, {0.01171875, -0.01273}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.0234375, 0.14285714285714285}, 0.01273], 
         InsetBox["\<\"I4\"\>", 
          Offset[{0, -2}, {0.0234375, 0.13012714285714286}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.02734375, 0.}, 0.01273], 
         InsetBox["\<\"H\"\>", Offset[{0, -2}, {0.02734375, -0.01273}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.09375, 0.42857142857142855}, 0.01273], 
         InsetBox["\<\"I16\"\>", 
          Offset[{0, -2}, {0.09375, 0.41584142857142853}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.109375, 0.2857142857142857}, 0.01273], 
         InsetBox["\<\"h\"\>", 
          Offset[{0, -2}, {0.109375, 0.2729842857142857}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.375, 0.7142857142857143}, 0.01273], 
         InsetBox["\<\"I25\"\>", Offset[{0, -2}, {0.375, 0.7015557142857143}],
           ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.421875, 0.2857142857142857}, 0.01273], 
         InsetBox["\<\"s\"\>", 
          Offset[{0, -2}, {0.421875, 0.2729842857142857}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.3984375, 0.14285714285714285}, 0.01273], 
         InsetBox["\<\",\"\>", 
          Offset[{0, -2}, {0.3984375, 0.13012714285714286}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.46875, 0.42857142857142855}, 0.01273], 
         InsetBox["\<\"e\"\>", 
          Offset[{0, -2}, {0.46875, 0.41584142857142853}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.4375, 0.5714285714285714}, 0.01273], 
         InsetBox["\<\"I20\"\>", 
          Offset[{0, -2}, {0.4375, 0.5586985714285714}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.29296875, 0.}, 0.01273], 
         InsetBox["\<\".\"\>", Offset[{0, -2}, {0.29296875, -0.01273}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.3046875, 0.14285714285714285}, 0.01273], 
         InsetBox["\<\"I3\"\>", 
          Offset[{0, -2}, {0.3046875, 0.13012714285714286}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.30859375, 0.}, 0.01273], 
         InsetBox["\<\"v\"\>", Offset[{0, -2}, {0.30859375, -0.01273}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.296875, 0.2857142857142857}, 0.01273], 
         InsetBox["\<\"I6\"\>", 
          Offset[{0, -2}, {0.296875, 0.2729842857142857}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.34375, 0.42857142857142855}, 0.01273], 
         InsetBox["\<\"I17\"\>", 
          Offset[{0, -2}, {0.34375, 0.41584142857142853}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.359375, 0.2857142857142857}, 0.01273], 
         InsetBox["\<\"d\"\>", 
          Offset[{0, -2}, {0.359375, 0.2729842857142857}], ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None,
  ImageSize->500]], "Output",
 CellChangeTimes->{3.738785777861937*^9},
 CellLabel->
  "Out[264]=",ExpressionUUID->"dbd9fa98-a978-48cc-98db-14a93776ffe1"]
}, Open  ]],

Cell["\<\
You will need to enlarge the image substantially in order to see the result \
in a readable format.\
\>", "Text",ExpressionUUID->"175157f1-8d03-4669-95de-eab57ed5165b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computations and Explorations 8", "Subsection",
 CellTags->
  "SolutionsCE8",ExpressionUUID->"866a7da5-284a-40f3-a0d6-d4e9941012c6"],

Cell[TextData[{
 "Draw the complete game tree for a game of checkers on a ",
 Cell[BoxData[
  FormBox[
   RowBox[{"4", "\[Times]", "4"}], TraditionalForm]],ExpressionUUID->
  "97a2b2ec-fcb6-42d5-9abe-af4a7591b0ab"],
 " board."
}], "Problem",ExpressionUUID->"7d551eee-1f0c-41f8-8d77-2c0b50ea5227"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " We will provide a partial solution to this problem; the reader is left to \
complete the full solution. Specifically, we will create a function called ",
 StyleBox["movePiece", "Code"],
 " that will determine all possible new checker arrangements given the \
current state of the board and the player whose turn it is. Once this \
function is created, the reader must determine how to represent these board \
positions as vertices and edges, how to determine the next level of the game \
tree, as well as the halting conditions."
}], "Text",ExpressionUUID->"f363ba92-8cda-4bb5-9a0c-ce449c8b5a6f"],

Cell["\<\
Before writing this function, however, we must establish a representation of \
the board. Naturally, we will use a matrix whose size is the size of the \
board. Empty board spaces will contain 0. Board spaces in which a regular \
white or black piece is sitting will be represented by 1 or 2, respectively. \
Kings will be represented by negative values, -1 for a white king and -2 for \
a black king. The following represents an initial board before any moves have \
been made.\
\>", "Text",ExpressionUUID->"013d6c2a-0c81-4683-97d8-84c08366a23c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"checkersStart", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "2", ",", "0", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"checkersStart", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[265]:=",ExpressionUUID->"75fe6072-3a36-44ca-842f-9382e1d79dd1"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "2", "0", "2"},
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"},
     {"1", "0", "1", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.738785777958981*^9},
 CellLabel->
  "Out[266]//MatrixForm=",ExpressionUUID->"f00cdbf4-8e9d-4768-81b5-\
dace48e74e3d"]
}, Open  ]],

Cell[TextData[{
 "Given a matrix representing a board state and an integer representing which \
side\[CloseCurlyQuote]s turn it is, the function ",
 StyleBox["movePiece", "Code"],
 " will list all of the possible results of the player\[CloseCurlyQuote]s \
move. It operates as follows:"
}], "Text",ExpressionUUID->"fe155f95-bd5d-4461-afd4-9e54901ea916"],

Cell[CellGroupData[{

Cell[TextData[{
 "Initialize ",
 StyleBox["newBoards", "Code"],
 ", which will be the list of all possible boards that result from the \
current move, to the empty list."
}], "Item1Numbered",ExpressionUUID->"76e213d4-b6ab-4d7e-a146-bbed60d86693"],

Cell[TextData[{
 "If ",
 StyleBox["side", "Code"],
 " is 1, then normal pieces move up the board from bottom to top and we set \
",
 StyleBox["direction", "Code"],
 " to -1, since the index of rows in a matrix decrease as we move up the \
board. If the ",
 StyleBox["side", "Code"],
 " is 2, then ",
 StyleBox["direction", "Code"],
 " is set to +1."
}], "Item1Numbered",ExpressionUUID->"b191f2e1-be6d-4b53-aeed-52793c327808"],

Cell[TextData[{
 "Begin a pair of ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loops, with indices ",
 StyleBox["r", "Code"],
 " and ",
 StyleBox["c", "Code"],
 ". These ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loops allow us to consider each possible board location. In each position, \
we want to know if that location holds a piece belonging to the current \
player. If it is 1\[CloseCurlyQuote]s turn, then that \
player\[CloseCurlyQuote]s normal pieces are represented by a 1 in the \
position and the player\[CloseCurlyQuote]s kings are represented by a -1 in \
the position. Likewise, 2\[CloseCurlyQuote]s pieces are represent by 2 or by \
-2. Thus, we can determine if a position holds a player\[CloseCurlyQuote]s \
piece by comparing the absolute value of the matrix entry with the ",
 StyleBox["side", "Code"],
 ". If the square does not hold a piece belonging to the current player, we \
simply move on to the next location."
}], "Item1Numbered",ExpressionUUID->"6514ce6c-5ed0-4e62-8068-9e027291ea25"],

Cell[TextData[{
 "Check to see if the piece is a king and set the variable ",
 StyleBox["isKing", "Code"],
 " to 1 if it is a king or 0 if not. We then begin a ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop from 0 to the value of ",
 StyleBox["isKing", "Code"],
 ". If ",
 StyleBox["isKing", "Code"],
 " is 0, the loop executes only once. If ",
 StyleBox["isKing", "Code"],
 " is 1, then the loop will execute twice. The index of this loop, ",
 StyleBox["king", "Code"],
 ", is used to control ",
 StyleBox["rowDir", "Code"],
 ", the current direction being considered. ",
 StyleBox["rowDir", "Code"],
 " is either the same as ",
 StyleBox["direction", "Code"],
 " or, in the case of the second iteration for a king, the reverse \
direction."
}], "Item1Numbered",ExpressionUUID->"9b6fa2ab-7fdd-4005-9584-1c5d4c593c13"],

Cell[TextData[{
 "We now check to see if the possible moves keep the piece on the board. \
First, we make sure that ",
 StyleBox["r+rowDir", "Code"],
 ", that is, the row in which the piece would move to, is still between 1 and \
4 (the possible rows)."
}], "Item1Numbered",ExpressionUUID->"f105d298-02ba-4142-9934-9c49452c6e88"],

Cell[TextData[{
 "Assuming moving the piece would not take it off the top or bottom of the \
board, consider the left and right moves. We do this with a ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop which sets the variable ",
 StyleBox["colDir", "Code"],
 " to -1 and then to +1. Again, we check to see that ",
 StyleBox["c+colDir", "Code"],
 ", the current column plus the proposed change to the column position, is \
still on the board."
}], "Item1Numbered",ExpressionUUID->"972d3c2e-5ff9-4f57-a50b-ff10118d40e1"],

Cell[TextData[{
 "At this point we know that the board position ",
 StyleBox["(r+rowDir,c+colDir)", "Code"],
 " is actually a board position. There are now three possibilities: the \
position is empty, there is an enemy piece in the square, there is a friendly \
piece in the square."
}], "Item1Numbered",ExpressionUUID->"dbf08eea-fc48-4249-b11d-fe28ce63178f"],

Cell[TextData[{
 "In the first case, the position is empty, we want to move the piece to that \
location. We make a copy of the ",
 StyleBox["board", "Code"],
 " matrix (so we do not modify the original board). Then, we make the move \
and add the new board to the list. Note that we also check to see if the \
piece becomes a king by moving into this position."
}], "Item1Numbered",ExpressionUUID->"9288c64f-4d8c-4d65-b0af-e21d8b61fd46"],

Cell[TextData[{
 "In the second case, there is an enemy in the square, then we test to see if \
it is possible to jump. That is, we must make sure that the landing location \
after the jump is both on the board and empty. If so, we make the jump, that \
is, we copy the ",
 StyleBox["board", "Code"],
 " and make the necessary modifications. If not, then the move is not \
possible."
}], "Item1Numbered",ExpressionUUID->"95f2fcba-1ad9-4354-892c-58c0585daadd"],

Cell["\<\
In the third case, the move is not possible and we do nothing.\
\>", "Item1Numbered",ExpressionUUID->"77075e96-2ca3-4cee-b0f2-29eafd4e8f23"]
}, Open  ]],

Cell["Here is the function.", "Text",ExpressionUUID->"665eefef-3a91-4052-80ce-5045fbddc4b1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"movePiece", "[", 
   RowBox[{"board_List", ",", "side_Integer"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"newBoards", "=", 
       RowBox[{"{", "}"}]}], ",", "direction", ",", "r", ",", "c", ",", 
      "isKing", ",", "king", ",", "rowDir", ",", "colDir", ",", "newB"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"direction", "=", 
      RowBox[{"Switch", "[", 
       RowBox[{"side", ",", "1", ",", 
        RowBox[{"-", "1"}], ",", "2", ",", "1"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"r", "=", "1"}], ",", 
       RowBox[{"r", "\[LessEqual]", "4"}], ",", 
       RowBox[{"r", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"c", "=", "1"}], ",", 
         RowBox[{"c", "\[LessEqual]", "4"}], ",", 
         RowBox[{"c", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Abs", "[", 
             RowBox[{"board", "[", 
              RowBox[{"[", 
               RowBox[{"r", ",", "c"}], "]"}], "]"}], "]"}], "\[Equal]", 
            "side"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"board", "[", 
                RowBox[{"[", 
                 RowBox[{"r", ",", "c"}], "]"}], "]"}], "<", "0"}], ",", 
              RowBox[{"isKing", "=", "1"}], ",", 
              RowBox[{"isKing", "=", "0"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"For", "[", 
             RowBox[{
              RowBox[{"king", "=", "0"}], ",", 
              RowBox[{"king", "\[LessEqual]", "isKing"}], ",", 
              RowBox[{"king", "++"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"rowDir", "=", 
                RowBox[{"Switch", "[", 
                 RowBox[{"king", ",", "0", ",", "direction", ",", "1", ",", 
                  RowBox[{"-", "direction"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"r", "+", "rowDir"}], "\[GreaterEqual]", "1"}], "&&", 
                  RowBox[{
                   RowBox[{"r", "+", "rowDir"}], "\[LessEqual]", "4"}]}], ",",
                  "\[IndentingNewLine]", 
                 RowBox[{"For", "[", 
                  RowBox[{
                   RowBox[{"colDir", "=", 
                    RowBox[{"-", "1"}]}], ",", 
                   RowBox[{"colDir", "\[LessEqual]", "1"}], ",", 
                   RowBox[{"colDir", "=", 
                    RowBox[{"colDir", "+", "2"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"c", "+", "colDir"}], "\[GreaterEqual]", "1"}], "&&", 
                    RowBox[{
                    RowBox[{"c", "+", "colDir"}], "\[LessEqual]", "4"}]}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"board", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"r", "+", "rowDir"}], ",", 
                    RowBox[{"c", "+", "colDir"}]}], "]"}], "]"}], "\[Equal]", 
                    "0"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"newB", "=", "board"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"r", "+", "rowDir"}], "\[Equal]", "1"}], "&&", 
                    RowBox[{"side", "\[Equal]", "1"}]}], ")"}], "||", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"r", "+", "rowDir"}], "\[Equal]", "4"}], "&&", 
                    RowBox[{"side", "\[Equal]", "2"}]}], ")"}]}], ")"}], "&&", 
                    RowBox[{
                    RowBox[{"board", "[", 
                    RowBox[{"[", 
                    RowBox[{"r", ",", "c"}], "]"}], "]"}], ">", "0"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"newB", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"r", "+", "rowDir"}], ",", 
                    RowBox[{"c", "+", "colDir"}]}], "]"}], "]"}], "=", 
                    RowBox[{
                    RowBox[{"-", "1"}], "*", 
                    RowBox[{"board", "[", 
                    RowBox[{"[", 
                    RowBox[{"r", ",", "c"}], "]"}], "]"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"newB", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"r", "+", "rowDir"}], ",", 
                    RowBox[{"c", "+", "colDir"}]}], "]"}], "]"}], "=", 
                    RowBox[{"board", "[", 
                    RowBox[{"[", 
                    RowBox[{"r", ",", "c"}], "]"}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    
                    RowBox[{
                    RowBox[{"newB", "[", 
                    RowBox[{"[", 
                    RowBox[{"r", ",", "c"}], "]"}], "]"}], "=", "0"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"newBoards", ",", "newB"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Abs", "[", 
                    RowBox[{"board", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"r", "+", "rowDir"}], ",", 
                    RowBox[{"c", "+", "colDir"}]}], "]"}], "]"}], "]"}], 
                    "\[NotEqual]", "side"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"r", "+", 
                    RowBox[{"2", "*", "rowDir"}]}], "\[GreaterEqual]", "1"}], 
                    "&&", 
                    RowBox[{
                    RowBox[{"r", "+", 
                    RowBox[{"2", "*", "rowDir"}]}], "\[LessEqual]", "4"}], "&&", 
                    RowBox[{
                    RowBox[{"c", "+", 
                    RowBox[{"2", "*", "colDir"}]}], "\[GreaterEqual]", "1"}], 
                    "&&", 
                    RowBox[{
                    RowBox[{"c", "+", 
                    RowBox[{"2", "*", "colDir"}]}], "\[LessEqual]", "4"}]}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"board", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"r", "+", 
                    RowBox[{"2", "*", "rowDir"}]}], ",", 
                    RowBox[{"c", "+", 
                    RowBox[{"2", "*", "colDir"}]}]}], "]"}], "]"}], 
                    "\[Equal]", "0"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"newB", "=", "board"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"r", "+", 
                    RowBox[{"2", "*", "rowDir"}]}], "\[Equal]", "1"}], "&&", 
                    RowBox[{"side", "\[Equal]", "1"}]}], ")"}], "||", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"r", "+", 
                    RowBox[{"2", "*", "rowDir"}]}], "\[Equal]", "4"}], "&&", 
                    RowBox[{"side", "\[Equal]", "2"}]}], ")"}]}], ")"}], "&&", 
                    RowBox[{
                    RowBox[{"board", "[", 
                    RowBox[{"[", 
                    RowBox[{"r", ",", "c"}], "]"}], "]"}], ">", "0"}]}], ",", 
                    
                    RowBox[{
                    RowBox[{"newB", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"r", "+", 
                    RowBox[{"2", "*", "rowDir"}]}], ",", 
                    RowBox[{"c", "+", 
                    RowBox[{"2", "*", "colDir"}]}]}], "]"}], "]"}], "=", 
                    RowBox[{"-", 
                    RowBox[{"board", "[", 
                    RowBox[{"[", 
                    RowBox[{"r", ",", "c"}], "]"}], "]"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"newB", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"r", "+", 
                    RowBox[{"2", "*", "rowDir"}]}], ",", 
                    RowBox[{"c", "+", 
                    RowBox[{"2", "*", "colDir"}]}]}], "]"}], "]"}], "=", 
                    RowBox[{"board", "[", 
                    RowBox[{"[", 
                    RowBox[{"r", ",", "c"}], "]"}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    
                    RowBox[{
                    RowBox[{"newB", "[", 
                    RowBox[{"[", 
                    RowBox[{"r", ",", "c"}], "]"}], "]"}], "=", "0"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"newB", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"r", "+", "rowDir"}], ",", 
                    RowBox[{"c", "+", "colDir"}]}], "]"}], "]"}], "=", "0"}], 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"newBoards", ",", "newB"}], "]"}]}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    "]"}]}], "\[IndentingNewLine]", "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                  "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
             "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}],
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "newBoards"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[267]:=",ExpressionUUID->"c187718a-95d9-4306-95d0-19c69c810ab7"],

Cell["We now demonstrate a few steps using the function.", "Text",ExpressionUUID->"ff43b5d9-38be-48dd-a819-6ce2bb9d2d9a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"move1", "=", 
   RowBox[{"movePiece", "[", 
    RowBox[{"checkersStart", ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "/@", "move1"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[268]:=",ExpressionUUID->"9f2d0824-edd0-4b0a-8bed-98bcb9ad985d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "2", "0", "2"},
       {"0", "0", "0", "0"},
       {"0", "1", "0", "0"},
       {"0", "0", "1", "0"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "2", "0", "2"},
       {"0", "0", "0", "0"},
       {"0", "1", "0", "0"},
       {"1", "0", "0", "0"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "2", "0", "2"},
       {"0", "0", "0", "0"},
       {"0", "0", "0", "1"},
       {"1", "0", "0", "0"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{3.738785778061461*^9},
 CellLabel->
  "Out[269]=",ExpressionUUID->"10bda5cf-484e-4e21-b1f6-5548bf059551"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"move2", "=", 
   RowBox[{"movePiece", "[", 
    RowBox[{
     RowBox[{"move1", "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "/@", "move2"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[270]:=",ExpressionUUID->"06508b77-4aee-4d54-abe6-dec55c26ec16"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "0", "0", "2"},
       {"2", "0", "0", "0"},
       {"0", "1", "0", "0"},
       {"0", "0", "1", "0"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "0", "0", "2"},
       {"0", "0", "2", "0"},
       {"0", "1", "0", "0"},
       {"0", "0", "1", "0"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "2", "0", "0"},
       {"0", "0", "2", "0"},
       {"0", "1", "0", "0"},
       {"0", "0", "1", "0"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{3.738785778133101*^9},
 CellLabel->
  "Out[271]=",ExpressionUUID->"b1923299-27a9-467f-848e-cb0342a48784"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"move3", "=", 
   RowBox[{"movePiece", "[", 
    RowBox[{
     RowBox[{"move2", "[", 
      RowBox[{"[", "3", "]"}], "]"}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "/@", "move3"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[272]:=",ExpressionUUID->"1586b4aa-b983-4965-b1c5-0d75ab89684d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "2", "0", "0"},
       {"1", "0", "2", "0"},
       {"0", "0", "0", "0"},
       {"0", "0", "1", "0"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "2", "0", 
        RowBox[{"-", "1"}]},
       {"0", "0", "0", "0"},
       {"0", "0", "0", "0"},
       {"0", "0", "1", "0"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "2", "0", "0"},
       {"0", "0", "2", "0"},
       {"0", "1", "0", "1"},
       {"0", "0", "0", "0"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{3.738785778200102*^9},
 CellLabel->
  "Out[273]=",ExpressionUUID->"816a65cc-697e-406c-8fe4-070d396648aa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"move4", "=", 
   RowBox[{"movePiece", "[", 
    RowBox[{
     RowBox[{"move3", "[", 
      RowBox[{"[", "2", "]"}], "]"}], ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "/@", "move4"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[274]:=",ExpressionUUID->"e1424e8a-47ea-4f8c-8a61-45d5d612f83f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "0", "0", 
        RowBox[{"-", "1"}]},
       {"2", "0", "0", "0"},
       {"0", "0", "0", "0"},
       {"0", "0", "1", "0"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "0", "0", 
        RowBox[{"-", "1"}]},
       {"0", "0", "2", "0"},
       {"0", "0", "0", "0"},
       {"0", "0", "1", "0"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{3.738785778265209*^9},
 CellLabel->
  "Out[275]=",ExpressionUUID->"fd0bedcd-0be6-4d26-a73c-31ff6284dc05"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exercises", "Section",
 CellTags->"Exercises",ExpressionUUID->"e399b6bc-1ebf-4882-9370-2d8d329f2d64"],

Cell[CellGroupData[{

Cell["\<\
Write Wolfram Language functions for finding the eccentricity of a vertex in \
an unrooted tree and for finding the center of an unrooted tree. \
(Eccentricity and center are defined in prelude to Exercise 39 of Section \
11.1 of the text.)\
\>", "Item1Exercise",ExpressionUUID->"09c5236f-4412-439b-8af5-4c5945cf229e"],

Cell["\<\
Develop a function in the Wolfram Language for constructing rooted Fibonacci \
trees. (See the prelude to Exercise 45 of Section 11.1 for a definition of a \
Fibonacci tree.)\
\>", "Item1Exercise",ExpressionUUID->"1f62fba9-eed6-4ba5-a152-1b776c55d2ac"],

Cell["\<\
Develop a function in the Wolfram Language for listing the vertices of an \
ordered rooted tree in level order.\
\>", "Item1Exercise",ExpressionUUID->"3a280708-d5ee-4572-964b-9cd2b4cc1d7b"],

Cell["\<\
Compare the performance of binary search trees to linear search as follows:\
\>", "Item1Exercise",ExpressionUUID->"89ec93ae-79f3-4c3d-897b-1d69cd26d779"],

Cell[CellGroupData[{

Cell[TextData[{
 "Write a function, ",
 StyleBox["linearSearch", "Code"],
 ", that takes two inputs, a list of integers and an integer to find, and \
checks each element of the list in order until the input is found, at which \
time it returns ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 ". If the desired integer is not found, it is added the end of the list."
}], "Item2Exercise",ExpressionUUID->"4a79be44-258c-47b4-ad2b-45dfb790b236"],

Cell[TextData[{
 "Use the function ",
 StyleBox["RandomSample[Range[n],n]", "Code"],
 " for a positive integer ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "1aae111e-bf3c-4d47-b740-2a6f2f880387"],
 " to create a list of the first ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "d209caac-2400-4058-b5e3-101b23942fb3"],
 " integers in random order, with an appropriately large ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "b15282c0-87a2-4f5b-bedf-281bf8d18055"],
 ". Apply the ",
 StyleBox["makeBST", "Code"],
 " function to the list to create a binary search tree for the data."
}], "Item2Exercise",ExpressionUUID->"7b770241-d947-4bbd-95d8-88e9d387a786"],

Cell[TextData[{
 "Randomly select some positive integers to search for. The ",
 StyleBox[ButtonBox["RandomInteger",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomInteger"], "FunctionLink"],
 " function could be useful here."
}], "Item2Exercise",ExpressionUUID->"785a77c2-b7e2-4c08-96d2-6ac87129135a"],

Cell[TextData[{
 "Use both ",
 StyleBox["linearSearch", "Code"],
 " and ",
 StyleBox["binaryInsertion", "Code"],
 " to find the integers from part c in the list and tree, respectively. Time \
them using the typical ",
 StyleBox[ButtonBox["Timing",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Timing"], "FunctionLink"],
 " function. Repeat this for 100 different initial lists of integers and \
compare the resulting times. Compare these data (representing average-case \
complexity) with the theoretical worst-case results of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "99bb80b4-2ee6-4dfa-95e7-de54883a5122"],
 " comparisons for ",
 StyleBox["linearSearch", "Code"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"log", "(", "n", ")"}], TraditionalForm]],ExpressionUUID->
  "81d62fe5-a844-4aba-94d0-3380bf7e5988"],
 " for ",
 StyleBox["binaryInsertion", "Code"],
 "."
}], "Item2Exercise",ExpressionUUID->"e44f367c-5182-40a5-9e37-12b21f23c00c"]
}, Open  ]],

Cell[TextData[{
 "Construct a function in the Wolfram Language for decoding a message which \
was encoded with a Huffman code. That is, given a Huffman coding tree \
produced by the HuffmanCode procedure and a message encoded by the ",
 StyleBox["encodeString", "Code"],
 " function, the algorithm should return the original string."
}], "Item1Exercise",ExpressionUUID->"7efe0fe9-0dc1-410c-bca1-99d2d91f8b16"],

Cell[TextData[{
 "Use the Shakespearean sonnets to estimate the frequency of characters used \
by Shakespeare. (See Section 7.3 of this manual to see how to read the data \
into ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " and make use of the functions given in the solution to Computations and \
Explorations 3 to compute the frequencies of characters used in the poems.) \
Then, create a Huffman code based on the sonnets and encode the \
ShakespeareData.",
 StyleBox["txt",
  IgnoreSpellCheck->True],
 " with the Huffman code. Compare the storage space required by the Huffman \
encoded version of the file as opposed to the space that would be used to \
encode the file in ASCII format, assuming each ASCII character requires 7 \
bits."
}], "Item1Exercise",ExpressionUUID->"0fd5916d-5091-47ca-b829-552328216902"],

Cell[TextData[{
 "Compare the performance of the breadth-first and depth-first functions for \
finding spanning trees. Use the ",
 StyleBox[ButtonBox["RandomGraph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomGraph"], "FunctionLink"],
 " function to create random trees. The expression ",
 StyleBox["RandomGraph[{", "Code"],
 StyleBox["v", "CodeVar"],
 StyleBox[",", "Code"],
 StyleBox["e", "CodeVar"],
 StyleBox["}]", "Code"],
 " will create a random graph with ",
 StyleBox["v", "CodeVar"],
 " vertices and ",
 StyleBox["e", "CodeVar"],
 " edges, but you will need to ensure the graph is connected before applying \
the functions for creating the spanning tree."
}], "Item1Exercise",ExpressionUUID->"960b84f9-2d40-4b80-af75-d51ea1f3f7a5"],

Cell[TextData[{
 "Construct an undirected weighted graph which has at least two different \
minimum spanning trees and for which the ",
 StyleBox["prim", "Code"],
 " and ",
 StyleBox["kruskal", "Code",
  IgnoreSpellCheck->True],
 " algorithms will return different results."
}], "Item1Exercise",ExpressionUUID->"92fc15ee-9035-44c8-b318-d67cdbc4da56"],

Cell["\<\
Write a function in the Wolfram Language implementing the reverse-delete \
algorithm for constructing minimal spanning trees. (The reverse-delete \
algorithm is described in the prelude to Exercise 34 in Section 11.5.)\
\>", "Item1Exercise",ExpressionUUID->"b49f13de-224c-4fa4-a958-d16c306dda21"],

Cell[TextData[{
 "Explore the relative complexity of ",
 StyleBox["prim", "Code"],
 ", ",
 StyleBox["kruskal", "Code",
  IgnoreSpellCheck->True],
 ", and the reverse-delete function you created in the previous exercise. Use \
the ",
 StyleBox[ButtonBox["RandomGraph",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomGraph"], "FunctionLink"],
 " function to experiment with their performance. The expression "
}], "Item1Exercise",ExpressionUUID->"86d47247-b8d4-4599-bea2-a6fd111d86d3"],

Cell[TextData[{
 StyleBox["RandomGraph[{", "Code"],
 StyleBox["v", "CodeVar"],
 StyleBox[",", "Code"],
 StyleBox["e", "CodeVar"],
 StyleBox["},\[ThinSpace]EdgeWeight\[ThinSpace]\[Rule]\[ThinSpace]\
RandomInteger[{", "Input"],
 StyleBox["min", "CodeVar"],
 StyleBox[",", "Code"],
 StyleBox["max", "CodeVar"],
 StyleBox["},", "Code"],
 StyleBox["e", "CodeVar"],
 StyleBox["]]", "Code"]
}], "ExerciseContinuation",ExpressionUUID->"a017fd4f-4c60-4b58-b55c-\
fcf01743cce3"],

Cell[TextData[{
 "will produce a random weighted graph with ",
 StyleBox["v", "CodeVar"],
 " vertices and ",
 StyleBox["e", "CodeVar"],
 " edges with weights between ",
 StyleBox["min", "CodeVar"],
 " and ",
 StyleBox["max", "CodeVar"],
 ". You will then need to ensure that the random graph is connected. For each \
algorithm, can you find properties that you can impose on the graphs that \
will ensure that the algorithm will outperform the others?"
}], "ExerciseContinuation",ExpressionUUID->"896f8071-44c8-4f17-a561-\
c925f09ba192"],

Cell["\<\
Develop a Wolfram Language function for producing degree-constrained spanning \
trees, which are defined in the Supplementary Exercises for Chapter 11. Use \
this function on a set of randomly generated graphs to attempt to construct \
degree-constrained spanning trees in which each vertex has degree no larger \
than 3.\
\>", "Item1Exercise",ExpressionUUID->"2c45404e-5789-4c00-82fb-7ad315344d05"],

Cell[TextData[{
 "Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to analyze the game of ",
 StyleBox["Nim",
  IgnoreSpellCheck->True],
 " with different starting conditions via the technique of game trees. (See \
Example 6 in Section 11.2 for a description of the game of ",
 StyleBox["Nim",
  IgnoreSpellCheck->True],
 ".)"
}], "Item1Exercise",ExpressionUUID->"9635f9fb-de1e-4c09-8c34-932b60a60fd9"],

Cell[TextData[{
 "Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to analyze the game of checkers on square boards of different sizes via \
the technique of game trees. (See the solution to Computations and \
Explorations 8 for the beginnings of a solution.)"
}], "Item1Exercise",ExpressionUUID->"ed927cc9-5b1d-44cc-8a79-02e9453736b7"],

Cell["\<\
Develop functions in the Wolfram Language for finding a path through a maze \
using the technique of backtracking.\
\>", "Item1Exercise",ExpressionUUID->"6c5b6b1a-7ffc-4e74-8f56-d668f6974b4d"],

Cell["\<\
Develop functions for solving Sudoku puzzles using the technique of \
backtracking.\
\>", "Item1Exercise",ExpressionUUID->"ad68701d-fb78-4526-b351-3c149071665e"],

Cell[TextData[{
 "Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to generate as many graceful trees as possible. (See the Supplementary \
Exercises of Chapter 11 for a definition of graceful.) Based on the examples \
you find, make conjectures about graceful trees."
}], "Item1Exercise",ExpressionUUID->"6cf5984e-0db9-40ff-bdb7-f3a9b5c21e85"],

Cell[TextData[{
 "Alter the postfix expression evaluator, ",
 StyleBox["evalPostfix", "Code"],
 ", to handle prefix expressions."
}], "Item1Exercise",ExpressionUUID->"b4584e69-3bb1-4866-8268-943915b0204a"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
PrintingStyleEnvironment->"Working",
WindowSize->{725, 850},
WindowMargins->{{193, Automatic}, {Automatic, 0}},
DockedCells->Cell[
  BoxData[
   TagBox[
    GridBox[{{"\"Exploring Discrete Mathematics with Mathematica\"", 
       ActionMenuBox[
       "\"Navigation\"", {
        "\"CloseAll\"" :> Module[{$CellContext`DJSection$}, SelectionMove[
             SelectedNotebook[], All, Notebook]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; 
           Do[NotebookLocate[$CellContext`DJSection$]; FrontEndExecute[
               FrontEndToken["OpenCloseGroup"]], {$CellContext`DJSection$, {
              "Section1a", "Section1b", "Section1c", "Section1d", "Section1e",
                "Section2a", "Section2b", "Section2c", "Section3a", 
               "Section3b", "Section3c", "Section3d", "Section4a", 
               "Section4b", "Section4c", "Section4d", "Section4e", 
               "Section5a", "Section5b", "SolutionsCE1", "SolutionsCE3", 
               "SolutionsCE8", "SolutionsCP6", "Section1", "Section2", 
               "Section3", "Section4", "Section5", "Solutions", 
               "Exercises"}}]; SelectionMove[
             SelectedNotebook[], Before, Notebook]], "\"Section1\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Solutions", "Exercises"}}] NotebookLocate["Section1"]; 
           FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section2\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Solutions", "Exercises"}}] NotebookLocate["Section2"]; 
           FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section3\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Solutions", "Exercises"}}] NotebookLocate["Section3"]; 
           FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section4\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Solutions", "Exercises"}}] NotebookLocate["Section4"]; 
           FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section5\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Solutions", "Exercises"}}] NotebookLocate["Section5"]; 
           FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Solutions\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Solutions", "Exercises"}}] NotebookLocate["Solutions"]; 
           FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Exercises\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Solutions", "Exercises"}}] NotebookLocate["Exercises"]; 
           FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Open All\"" :> 
         Module[{$CellContext`DJSection$}, 
           Do[NotebookLocate[$CellContext`DJSection$]; FrontEndExecute[
               FrontEndToken[
               "SelectionOpenAllGroups"]], {$CellContext`DJSection$, {
              "Exercises", "Section1", "Section1a", "Section1b", "Section1c", 
               "Section1d", "Section1e", "Section2", "Section2a", "Section2b",
                "Section2c", "Section3", "Section3a", "Section3b", 
               "Section3c", "Section3d", "Section4", "Section4a", "Section4b",
                "Section4c", "Section4d", "Section4e", "Section5", 
               "Section5a", "Section5b", "Solutions", "SolutionsCE1", 
               "SolutionsCE3", "SolutionsCE8", "SolutionsCP6"}}] SelectionMove[
             SelectedNotebook[], Before, Notebook]]}]}}, 
     GridBoxAlignment -> {
      "Columns" -> {Left, Baseline}, "Rows" -> {Right, Baseline}}, AutoDelete -> 
     False, GridBoxItemSize -> {"Columns" -> {
         Scaled[0.8], 
         Scaled[0.2]}}], "Grid"]], "DockedCell", FontFamily -> "Times"],
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
Magnification->1,
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"Book"}, "Textbook.nb", CharacterEncoding -> 
       "UTF-8"]]], 
   Cell[
    StyleData[All, "Printout"], PageWidth -> PaperWidth, 
    CellHorizontalScrolling -> True, 
    CellLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
    ShowAutoStyles -> False, 
    AutoStyleOptions -> {"HighlightMisspelledWords" -> False}, ScriptMinSize -> 
    9, MenuSortingValue -> 1500, 
    PrivateFontOptions -> {"FontType" -> "Outline"}, Magnification -> 1], 
   Cell[
    StyleData["Title"], Editable -> False, ShowCellBracket -> Automatic, 
    CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
    DefaultNewInlineCellStyle -> {}, LanguageCategory -> "NaturalLanguage", 
    FontFamily -> "Helvetica", FontSize -> 25, FontWeight -> "Bold", 
    FontColor -> GrayLevel[0.137255]], 
   Cell[
    StyleData["BookChapterTitle", StyleDefinitions -> StyleData["Title"]], 
    CellFrame -> {{0, 0}, {1, 1}}, CellDingbat -> Cell[
      BoxData[
       GraphicsBox[{{
          RGBColor[0.09375, 0.570313, 0.816406], 
          RectangleBox[{0, 0}]}, {
          GrayLevel[1], FontSize -> 35, FontWeight -> Bold, FontFamily -> 
          "Helvetica", 
          InsetBox[
           CounterBox["ChapterNumber"], {0.5, 0.45}, {Center, Center}]}}, 
        ImageSize -> {70, 70}]], "Output"], 
    CellMargins -> {{100, 0}, {20, 20}}, CellFrameColor -> GrayLevel[1]], 
   Cell[
    StyleData["DockedCell"], CellMargins -> {{12, 12}, {20, 0}}, 
    CellGroupingRules -> "TitleGrouping", 
    ConversionRules :> {"TeX" -> {"\n\\chapter{", "}"}}, 
    TaggingRules :> {"CounterSettings" -> {"CounterTarget" -> "CellGroup"}}, 
    PageBreakAbove -> False, PageBreakBelow -> False, LineSpacing -> {1, 2}, 
    MenuSortingValue -> 1105, FontFamily -> "Helvetica", FontSize -> 27, 
    FontWeight -> "Bold", Background -> RGBColor[0.09375, 0.570313, 0.816406],
     CounterBoxOptions -> {
     CounterFunction :> Identity}, $CellContext`DefaultReturnCreatedCellStyle -> 
    "Section"], 
   Cell[
    StyleData["FunctionLink"], ConversionRules :> {"TeX" -> {{"", 
         $CellContext`ExportAsHyperRef[], ""}, {"", Automatic, ""}}}, 
    MenuSortingValue -> 1105, ButtonStyleMenuListing -> None, FontFamily -> 
    "Courier", FontVariations -> {"Underline" -> True}, FontColor -> 
    RGBColor[0, 0, 1], 
    ButtonBoxOptions -> {Active -> True, ButtonFunction :> (FrontEndExecute[{
         FrontEnd`NotebookLocate[#2]}]& ), ButtonNote -> ButtonData}], 
   Cell[
    StyleData["Problem"], CellMargins -> {{40, 12}, {15, 15}}, 
    CellGroupingRules -> {"GroupTogetherNestedGrouping", 15010}, 
    ConversionRules :> {
     "TeX" -> {{"", Automatic, ""}, {"\n\n", Automatic, ""}}}, 
    TaggingRules :> {
     "ExtraConversionRules" -> {"General" -> {"RestartList" -> False}}}], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item1Exercise"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Exercise"], "."}], CellSize -> {30, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{50, 12}, {3, 5}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterIncrements -> "Item1Exercise", 
       CounterAssignments -> {{"Item2Exercise", 0}}, MenuSortingValue -> 
       4100], 
      Cell[
       StyleData["Item1Exercise", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Exercise"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{35, 12}, {3, 5}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["ExerciseContinuation"], CellMargins -> {{50, 12}, {1, 3}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, MenuSortingValue -> 4101], 
      Cell[
       StyleData["ExerciseContinuation", "Printout"], 
       CellMargins -> {{35, 12}, {1, 3}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item2Exercise"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item2Exercise"], "."}], CellSize -> {32, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{75, 12}, {1, 2}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17100}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterIncrements -> "Item2Exercise", MenuSortingValue -> 4200, 
       CounterBoxOptions -> {CounterFunction :> (Part[
           CharacterRange["a", "z"], #]& )}], 
      Cell[
       StyleData["Item2Exercise", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item2Exercise"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{50, 12}, {1, 2}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterBoxOptions -> {CounterFunction :> (Part[
           CharacterRange["a", "z"], #]& )}]}, Open]], 
   Cell[
    StyleData["ExerciseEquation"], CellMargins -> {{36, 12}, {7, 7}}, 
    CellGroupingRules -> {"GroupTogetherNestedGrouping", 17200}, 
    CellHorizontalScrolling -> True, 
    CellFrameLabels -> {{None, None}, {None, None}}, DefaultFormatType -> 
    TraditionalForm, InputAutoReplacements -> {}, TextAlignment -> Center, 
    MenuSortingValue -> 4300, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}], 
   Cell[
    StyleData["myCode"], CellMargins -> {{66, 10}, {5, 10}}, 
    StyleKeyMapping -> {"=" -> "WolframAlphaShort"}, Evaluatable -> False, 
    CellGroupingRules -> "InputGrouping", TextClipboardType -> "InputText", 
    PageBreakWithin -> False, GroupPageBreakWithin -> False, 
    DefaultFormatType -> DefaultInputFormatType, ContextMenu -> 
    FEPrivate`FrontEndResource["ContextMenus", "myCode"], ShowAutoStyles -> 
    True, "TwoByteSyntaxCharacterAutoReplacement" -> True, 
    HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"}, 
    AutoItalicWords -> {}, AutoQuoteCharacters -> {}, 
    PasteAutoQuoteCharacters -> {}, LanguageCategory -> "Mathematica", 
    FormatType -> InputForm, NumberMarks -> True, 
    LinebreakAdjustments -> {0.85, 2, 10, 0, 1}, CounterIncrements -> "Code", 
    MenuSortingValue -> 1495, MenuCommandKey -> "8", FontWeight -> 
    "Bold", $CellContext`StripStyleOnPaste -> True], 
   Cell[
    StyleData["CodeVar"], DefaultFormatType -> DefaultInputFormatType, 
    LineBreakWithin -> False, MenuSortingValue -> 10000, FontWeight -> "Bold",
     FontSlant -> "Italic", FontColor -> GrayLevel[0.4]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Section"], CellFrame -> {{6, 0}, {0, 1}}, ShowCellBracket -> 
       Automatic, CellMargins -> {{12, 12}, {3, 24}}, 
       CellGroupingRules -> {"SectionGrouping", 30}, 
       ConversionRules :> {
        "TeX" -> {"\n\\section{", "}"}, 
         "HTML" -> {"<h3 class=\"Section\">", "</h3>"}}, 
       TaggingRules :> {
        "CounterSettings" -> {
          "CounterFormat" -> {"BookChapterNumber", ".", "Section"}, 
           "CounterTarget" -> "Cell", "XRefPrefix" -> "Section"}}, 
       PageBreakBelow -> False, CellFrameMargins -> {{8, 8}, {4, 6}}, 
       CellFrameColor -> RGBColor[0.09375, 0.570313, 0.816406], TabSpacings -> 
       2.1, CounterIncrements -> {
        "Section", "SectionHeader", "SubsectionHeader", "SubsubsectionHeader",
          "SubsubsubsectionHeader"}, FontFamily -> "Helvetica", FontSize -> 
       16, FontWeight -> "Bold", Background -> GrayLevel[0.999985]], 
      Cell[
       StyleData["Section", "Printout"], CellFrame -> {{4, 0}, {0, 0.5}}, 
       CellMargins -> {{2, 2}, {3, 21}}, CellFrameMargins -> {{6, 6}, {3, 5}},
        CellFrameColor -> RGBColor[0.09375, 0.570313, 0.816406]], 
      Cell[
       StyleData["Section", "DoubleSpacedPrintout"], 
       CellFrame -> {{4, 0}, {0, 0.5}}, CellMargins -> {{2, 2}, {3, 21}}, 
       CellFrameMargins -> {{6, 6}, {3, 5}}, CellFrameColor -> 
       RGBColor[0.09375, 0.570313, 0.816406], FontSize -> 14]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Subsubsection"], CellDingbat -> None, 
       CellMargins -> {{12, 12}, {0, 6}}, 
       CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
       CellGroupingRules -> {"SectionGrouping", 50}, 
       ConversionRules :> {
        "TeX" -> {"\n\\subsubsection{", "}"}, 
         "HTML" -> {"<h5 class=\"Subsubsection\">", "</h5>"}}, PageBreakBelow -> 
       False, CellFrameLabelMargins -> 4, 
       CounterIncrements -> {
        "Subsubsection", "SubsubsectionHeader", "SubsubsubsectionHeader"}, 
       FontFamily -> "Helvetica", FontSize -> 11, FontWeight -> "Bold", 
       FontSlant -> "Italic"], 
      Cell[
       StyleData["Subsubsection", "Printout"], FontFamily -> "Helvetica", 
       FontSize -> 11, FontWeight -> "Bold", FontSlant -> "Italic"]}, Open]], 
   
   Cell[
    StyleData["Equation"], CellMargins -> {{26, 10}, {7, 7}}, 
    ConversionRules :> {
     "HTML" -> {{"", ""}, {"<p class=\"Equation\">", "</p>"}}}, 
    CellHorizontalScrolling -> True, DefaultFormatType -> TraditionalForm, 
    InputAutoReplacements -> {}, TextAlignment -> Center, CounterIncrements -> 
    "Equation", ButtonBoxOptions -> {Appearance -> {Automatic, None}}], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item1Numbered"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Numbered"], "."}], CellSize -> {32, Inherited}, 
         TextAlignment -> Right, 
         TextJustification -> (FontWeight -> "Plain")], 
       CellMargins -> {{36, 12}, {1, 3}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 15000}, 
       ConversionRules :> {{"TeX" -> {"\n\\item ", ""}}, {
         "HTML" -> {"<li>", "</li>"}}}, 
       TaggingRules :> {
        "ExtraConversionRules" -> {
          "General" -> {"NestingLevel" -> 30}, 
           "TeX" -> {"CellGroupEnvironment" -> "enumerate"}, 
           "HTML" -> {"CellGroupEnvironment" -> "ol"}}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, TextJustification -> 1, CounterIncrements -> "Item1Numbered", 
       CounterAssignments -> {{"Item2Numbered", 0}, {"Item3Numbered", 0}}], 
      Cell[
       StyleData["Item1Numbered", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Numbered"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Plain"], 
       CellMargins -> {{24, 2}, {1, 2}}, CellFrameLabelMargins -> 3, 
       TextJustification -> 1]}, Open]], 
   Cell[
    StyleData["InitializationCell"], Background -> GrayLevel[1]], 
   Cell[
    StyleData["Item1"], TextJustification -> 1], 
   Cell[
    StyleData["Item1Printout"], TextJustification -> 1, MenuSortingValue -> 
    10000], 
   Cell[
    StyleData["Code"], FormatType -> InputForm]}, Visible -> False, 
  FrontEndVersion -> 
  "11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, 2018)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Section1"->{
  Cell[2181, 58, 123, 1, 55, "Section",ExpressionUUID->"720e6862-c098-4825-a98b-8ffd708a4cd8",
   CellTags->"Section1"]},
 "Section1a"->{
  Cell[2729, 72, 115, 1, 32, "Subsection",ExpressionUUID->"739639ea-a7d5-418d-a0bd-c4f5cb0dbcd4",
   CellTags->"Section1a"]},
 "Section1b"->{
  Cell[26974, 641, 113, 1, 32, "Subsection",ExpressionUUID->"ec71e5b0-7716-41d6-b143-e5081d90fd0f",
   CellTags->"Section1b"]},
 "Section1c"->{
  Cell[67854, 1665, 170, 4, 35, "Subsection",ExpressionUUID->"fb59519b-8e15-4074-8bd2-a8db4f46e995",
   CellTags->"Section1c"],
  Cell[75010, 1841, 173, 3, 32, "Subsection",ExpressionUUID->"31cd86bc-440b-4993-8bb3-520717ee0f3f",
   CellTags->"Section1c"]},
 "Section1d"->{
  Cell[88433, 2220, 121, 1, 32, "Subsection",ExpressionUUID->"1f9be441-f7b8-4ade-8b50-bfd00131621c",
   CellTags->"Section1d"]},
 "Section1e"->{
  Cell[126331, 3153, 120, 1, 32, "Subsection",ExpressionUUID->"91db5bdc-a251-4a41-b3d0-daaf71262ce9",
   CellTags->"Section1e"]},
 "Section2"->{
  Cell[134088, 3372, 123, 1, 55, "Section",ExpressionUUID->"0ae73679-accf-429d-a215-2419996459dd",
   CellTags->"Section2"]},
 "Section2a"->{
  Cell[135292, 3396, 139, 1, 32, "Subsection",ExpressionUUID->"1aced6c8-b81c-450f-8858-ecd2cd2226fb",
   CellTags->"Section2a"]},
 "Section2b"->{
  Cell[185182, 4707, 117, 1, 32, "Subsection",ExpressionUUID->"dfefd714-591e-48a0-b925-718a6a068ff2",
   CellTags->"Section2b"]},
 "Section2c"->{
  Cell[210714, 5360, 115, 1, 32, "Subsection",ExpressionUUID->"41a523b3-034c-4e1a-8949-0065d06794f3",
   CellTags->"Section2c"]},
 "Section3"->{
  Cell[253411, 6456, 116, 1, 55, "Section",ExpressionUUID->"2555ffbd-b4a7-44f1-afb4-8bf378fe8226",
   CellTags->"Section3"]},
 "Section3a"->{
  Cell[263708, 6688, 109, 1, 32, "Subsection",ExpressionUUID->"fb748272-f1bf-4571-b171-bfc376912762",
   CellTags->"Section3a"]},
 "Section3b"->{
  Cell[273703, 6944, 121, 1, 32, "Subsection",ExpressionUUID->"f33db0c0-b5a2-4e4e-85fb-3ac7e6200967",
   CellTags->"Section3b"]},
 "Section3c"->{
  Cell[296717, 7566, 115, 1, 32, "Subsection",ExpressionUUID->"01fe650b-7c3b-4bad-aa85-a075a2b1f711",
   CellTags->"Section3c"]},
 "Section3d"->{
  Cell[347532, 9024, 128, 1, 32, "Subsection",ExpressionUUID->"0c5f8435-f680-42f5-8e7a-d9df45c786af",
   CellTags->"Section3d"]},
 "Section4"->{
  Cell[362936, 9394, 116, 1, 55, "Section",ExpressionUUID->"a0d6d249-9e97-4fcb-9ddf-53c3921bb6f8",
   CellTags->"Section4"]},
 "Section4a"->{
  Cell[410635, 10533, 119, 1, 32, "Subsection",ExpressionUUID->"bbc63933-6fe9-496e-9784-4fe47f50a3e2",
   CellTags->"Section4a"]},
 "Section4b"->{
  Cell[434831, 11113, 121, 1, 32, "Subsection",ExpressionUUID->"ac7ec516-07ab-485a-a7d0-5de60b065c6a",
   CellTags->"Section4b"]},
 "Section4c"->{
  Cell[449122, 11463, 132, 1, 32, "Subsection",ExpressionUUID->"08f23100-fa3a-40a8-946a-6bb403785b21",
   CellTags->"Section4c"]},
 "Section4d"->{
  Cell[489525, 12439, 134, 1, 32, "Subsection",ExpressionUUID->"d8c086a6-1333-4231-9367-d285111cd50a",
   CellTags->"Section4d"]},
 "Section4e"->{
  Cell[509181, 12965, 136, 1, 32, "Subsection",ExpressionUUID->"89a6196b-e20e-4f00-bc29-a3d9556c2782",
   CellTags->"Section4e"]},
 "Section5"->{
  Cell[520903, 13317, 124, 1, 55, "Section",ExpressionUUID->"c76e3480-cc6e-42c0-be1b-0319ea682950",
   CellTags->"Section5"]},
 "Section5a"->{
  Cell[539662, 13791, 134, 1, 32, "Subsection",ExpressionUUID->"f94d4e9f-ae94-418b-b70b-8ef993e01b6b",
   CellTags->"Section5a"]},
 "Section5b"->{
  Cell[586571, 14863, 137, 1, 32, "Subsection",ExpressionUUID->"1fc0032e-8b16-4e84-8c58-6ff52f3ff970",
   CellTags->"Section5b"]},
 "Solutions"->{
  Cell[606616, 15346, 170, 3, 55, "Section",ExpressionUUID->"4b4b17bd-6b37-46ca-83be-f0f8f25e6cac",
   CellTags->"Solutions"]},
 "SolutionsCP6"->{
  Cell[606811, 15353, 126, 2, 32, "Subsection",ExpressionUUID->"bdf6b0ce-46c9-419a-9ed9-acbac6bbcac6",
   CellTags->"SolutionsCP6"]},
 "SolutionsCE1"->{
  Cell[633434, 16001, 138, 2, 32, "Subsection",ExpressionUUID->"d5ff6e5c-5844-4a24-a8d2-8b4e618331a3",
   CellTags->"SolutionsCE1"]},
 "SolutionsCE3"->{
  Cell[646037, 16308, 138, 2, 32, "Subsection",ExpressionUUID->"4d758b29-280d-4e7f-aa62-bcb7b92ee796",
   CellTags->"SolutionsCE3"]},
 "SolutionsCE8"->{
  Cell[697055, 17469, 138, 2, 32, "Subsection",ExpressionUUID->"866a7da5-284a-40f3-a0d6-d4e9941012c6",
   CellTags->"SolutionsCE8"]},
 "Exercises"->{
  Cell[726968, 18256, 107, 1, 55, "Section",ExpressionUUID->"e399b6bc-1ebf-4882-9370-2d8d329f2d64",
   CellTags->"Exercises"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Section1", 755068, 18869},
 {"Section1a", 755206, 18872},
 {"Section1b", 755348, 18875},
 {"Section1c", 755492, 18878},
 {"Section1d", 755765, 18883},
 {"Section1e", 755910, 18886},
 {"Section2", 756055, 18889},
 {"Section2a", 756197, 18892},
 {"Section2b", 756343, 18895},
 {"Section2c", 756489, 18898},
 {"Section3", 756634, 18901},
 {"Section3a", 756776, 18904},
 {"Section3b", 756922, 18907},
 {"Section3c", 757068, 18910},
 {"Section3d", 757214, 18913},
 {"Section4", 757359, 18916},
 {"Section4a", 757501, 18919},
 {"Section4b", 757648, 18922},
 {"Section4c", 757795, 18925},
 {"Section4d", 757942, 18928},
 {"Section4e", 758089, 18931},
 {"Section5", 758235, 18934},
 {"Section5a", 758378, 18937},
 {"Section5b", 758525, 18940},
 {"Solutions", 758672, 18943},
 {"SolutionsCP6", 758819, 18946},
 {"SolutionsCE1", 758972, 18949},
 {"SolutionsCE3", 759125, 18952},
 {"SolutionsCE8", 759278, 18955},
 {"Exercises", 759428, 18958}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 143, 3, 108, "BookChapterTitle",ExpressionUUID->"0c94f059-70b1-4e81-9a10-0b0a93e83bcb",
 CounterAssignments->{{"ChapterNumber", 11}}],
Cell[CellGroupData[{
Cell[748, 29, 86, 0, 55, "Section",ExpressionUUID->"bcc0cad2-aaed-45eb-8b52-cdcbfacac029"],
Cell[837, 31, 258, 4, 35, "Text",ExpressionUUID->"e58c8617-663e-40c2-a4b3-a93f8ee79f10"],
Cell[1098, 37, 1046, 16, 110, "Text",ExpressionUUID->"0d22bb25-d8e8-458f-a039-2a3421b7d0ab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2181, 58, 123, 1, 55, "Section",ExpressionUUID->"720e6862-c098-4825-a98b-8ffd708a4cd8",
 CellTags->"Section1"],
Cell[2307, 61, 397, 7, 35, "Text",ExpressionUUID->"4c614165-5729-4c05-a932-35ee5bb6d84d"],
Cell[CellGroupData[{
Cell[2729, 72, 115, 1, 32, "Subsection",ExpressionUUID->"739639ea-a7d5-418d-a0bd-c4f5cb0dbcd4",
 CellTags->"Section1a"],
Cell[2847, 75, 386, 8, 36, "Text",ExpressionUUID->"ed24d24a-aa21-49cd-b53e-cb4512462dd9"],
Cell[CellGroupData[{
Cell[3258, 87, 595, 13, 51, "Input",ExpressionUUID->"7d7c90e8-c2c0-4ce7-b195-37d7cc6348cd",
 InitializationCell->True],
Cell[3856, 102, 2633, 58, 447, "Output",ExpressionUUID->"b0cfeb9a-83e7-4cc7-81a5-ec6f53aec9ab"]
}, Open  ]],
Cell[6504, 163, 515, 13, 36, "Text",ExpressionUUID->"6625b47a-fd6c-4892-aecf-72dfea846fc1"],
Cell[CellGroupData[{
Cell[7044, 180, 149, 2, 31, "Input",ExpressionUUID->"ab723053-e42a-466f-822e-0896c1eb44c0"],
Cell[7196, 184, 151, 2, 31, "Output",ExpressionUUID->"b9c4e727-0fc5-4068-90d4-3df11f064ccd"]
}, Open  ]],
Cell[7362, 189, 738, 12, 65, "Text",ExpressionUUID->"913700e1-3980-4d7c-a3e6-c69e6bd4d1af"],
Cell[CellGroupData[{
Cell[8125, 205, 740, 17, 70, "Input",ExpressionUUID->"ea34a2fb-7754-4781-9850-34179737d945",
 InitializationCell->True],
Cell[8868, 224, 2672, 59, 380, "Output",ExpressionUUID->"23eadec3-8bf6-428f-9b44-26ef316e3f10"]
}, Open  ]],
Cell[11555, 286, 554, 12, 50, "Text",ExpressionUUID->"62d6d998-e069-4026-8866-1e0895eefb44"],
Cell[CellGroupData[{
Cell[12134, 302, 668, 15, 51, "Input",ExpressionUUID->"b0d5a7dc-bbf0-4d38-bb24-6a5813f7b2cc"],
Cell[12805, 319, 2662, 58, 380, "Output",ExpressionUUID->"857d3add-4533-457f-8432-555ac0a397a8"]
}, Open  ]],
Cell[15482, 380, 1948, 50, 96, "Text",ExpressionUUID->"75266303-0541-4d96-bf77-c435415b823b"],
Cell[CellGroupData[{
Cell[17455, 434, 297, 6, 31, "Input",ExpressionUUID->"cfb628ba-7c0f-46e9-a478-3c83345bfdb0"],
Cell[17755, 442, 9170, 193, 86, "Output",ExpressionUUID->"89ef3331-7e6c-4a5a-a79d-d56566099da0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[26974, 641, 113, 1, 32, "Subsection",ExpressionUUID->"ec71e5b0-7716-41d6-b143-e5081d90fd0f",
 CellTags->"Section1b"],
Cell[27090, 644, 356, 5, 35, "Text",ExpressionUUID->"a3310fbc-9b52-4e26-91ed-e6e438b83a6f"],
Cell[CellGroupData[{
Cell[27471, 653, 658, 14, 51, "Input",ExpressionUUID->"0b1a1ad5-f678-4f57-8a44-bf4c01cfaaaf",
 InitializationCell->True],
Cell[28132, 669, 3119, 65, 267, "Output",ExpressionUUID->"e695ba92-5f19-447e-b7cc-f5e291a61d7e"]
}, Open  ]],
Cell[31266, 737, 361, 9, 21, "Text",ExpressionUUID->"a5a6de55-1a7d-469c-b1a5-57910f75ffcf"],
Cell[CellGroupData[{
Cell[31652, 750, 151, 2, 31, "Input",ExpressionUUID->"f7a2eec8-48d6-4436-96fa-d5f879412b7e"],
Cell[31806, 754, 153, 2, 31, "Output",ExpressionUUID->"128a4dbf-41e7-416b-afa8-35dbb86d64aa"]
}, Open  ]],
Cell[31974, 759, 337, 7, 35, "Text",ExpressionUUID->"964ad173-ddf7-4f2d-b120-c4cf09420b75"],
Cell[CellGroupData[{
Cell[32336, 770, 563, 14, 31, "Input",ExpressionUUID->"0691fe0f-b69e-4bce-b6f4-1bd763bd8caa",
 InitializationCell->True],
Cell[32902, 786, 2956, 62, 312, "Output",ExpressionUUID->"eec6134f-4732-42dc-85b2-e31f19a35ea9"]
}, Open  ]],
Cell[35873, 851, 299, 6, 35, "Text",ExpressionUUID->"3e56496d-8060-4702-9ab2-46d6b27e8613"],
Cell[36175, 859, 1102, 22, 93, "Text",ExpressionUUID->"041bae37-4419-4fc4-bfeb-bbf6e02b9933"],
Cell[CellGroupData[{
Cell[37302, 885, 243, 5, 31, "Input",ExpressionUUID->"7b0b9ca1-6197-4f99-b614-01d223334350"],
Cell[37548, 892, 2684, 53, 447, "Output",ExpressionUUID->"36042810-ddbb-4d0a-8d80-1af93758aded"]
}, Open  ]],
Cell[40247, 948, 914, 19, 74, "Text",ExpressionUUID->"c36fb3ec-01e2-4696-bd02-20c0a1eabcd3"],
Cell[41164, 969, 239, 6, 24, "Text",ExpressionUUID->"c21f6bc1-3d5e-46c3-978c-9d4e72854299"],
Cell[CellGroupData[{
Cell[41428, 979, 338, 8, 31, "Input",ExpressionUUID->"de7c349d-90a8-45c4-b478-a3ffdc4e49d3"],
Cell[41769, 989, 3098, 65, 447, "Output",ExpressionUUID->"a1611ae5-b506-4f2b-b355-5af6725c54b6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44904, 1059, 344, 8, 31, "Input",ExpressionUUID->"870dac8c-958d-437c-aede-80e9b4ce3dbb"],
Cell[45251, 1069, 2759, 61, 447, "Output",ExpressionUUID->"6c55e658-30b1-44a6-a826-f648f033c9c4"]
}, Open  ]],
Cell[48025, 1133, 2147, 53, 120, "Text",ExpressionUUID->"d9954963-ec1b-4447-ac9f-7d5aa552f742"],
Cell[CellGroupData[{
Cell[50197, 1190, 242, 4, 31, "Input",ExpressionUUID->"a3e59bff-95dd-4fae-acd9-dd768580ccd8"],
Cell[50442, 1196, 2166, 49, 447, "Output",ExpressionUUID->"6828e365-0072-4e7d-ae74-4954befeda6f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[52645, 1250, 114, 0, 18, "Subsubsection",ExpressionUUID->"917a3cc9-791d-4012-a555-faae6b806146"],
Cell[52762, 1252, 479, 8, 36, "Text",ExpressionUUID->"5414e67c-79a8-4b4b-9eee-d38e70570976"],
Cell[53244, 1262, 209, 3, 20, "Text",ExpressionUUID->"cdc4282e-b13b-4b4b-9f53-22060fdab2d2"],
Cell[CellGroupData[{
Cell[53478, 1269, 561, 14, 31, "Input",ExpressionUUID->"f7a6cc38-2c41-4743-bee5-74de6c81f941",
 InitializationCell->True],
Cell[54042, 1285, 2580, 51, 447, "Output",ExpressionUUID->"77810d13-19f4-46fb-b73b-55042323fc6f"]
}, Open  ]],
Cell[56637, 1339, 458, 10, 39, "Text",ExpressionUUID->"5414c45c-0932-4ffc-babb-6d704f896131"],
Cell[CellGroupData[{
Cell[57120, 1353, 150, 2, 31, "Input",ExpressionUUID->"a34dbbe3-aac6-4d3c-b6ef-cd5231d3326d"],
Cell[57273, 1357, 152, 2, 31, "Output",ExpressionUUID->"c398c863-165b-40ca-8d8f-658963c24d23"]
}, Open  ]],
Cell[57440, 1362, 122, 0, 20, "Text",ExpressionUUID->"7ae67d97-e2f9-49ef-bcad-e9bdb0f79cab"],
Cell[CellGroupData[{
Cell[57587, 1366, 192, 3, 31, "Input",ExpressionUUID->"3f984ba2-69fc-4630-ae3f-676aecb8d09b"],
Cell[57782, 1371, 152, 2, 31, "Output",ExpressionUUID->"a7b481cd-9149-457b-be4f-b22053e4c752"]
}, Open  ]],
Cell[57949, 1376, 521, 13, 39, "Text",ExpressionUUID->"ac52a49f-d5f4-41f7-8be4-b1691a94bd36"],
Cell[58473, 1391, 304, 7, 31, "Input",ExpressionUUID->"516b6c0b-fb34-49e4-a9be-390302da24cf",
 InitializationCell->True],
Cell[58780, 1400, 191, 4, 24, "Text",ExpressionUUID->"4bb46692-865f-4eb5-a816-d3bef650ca1b"],
Cell[CellGroupData[{
Cell[58996, 1408, 153, 2, 31, "Input",ExpressionUUID->"a9deca91-bc90-4c2f-a823-06efc5ac2097"],
Cell[59152, 1412, 152, 2, 31, "Output",ExpressionUUID->"69fadfd5-da7c-4ccc-a670-10be1b6505c2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[59341, 1419, 195, 3, 31, "Input",ExpressionUUID->"c0a2591b-7a3b-45e7-9a13-8a57c05025c5"],
Cell[59539, 1424, 153, 2, 31, "Output",ExpressionUUID->"df2784cb-a965-4a6a-9de6-79a4e43faaa4"]
}, Open  ]],
Cell[59707, 1429, 373, 7, 36, "Text",ExpressionUUID->"dc6cf716-b43b-4394-b8f2-e4cfc1843aef"],
Cell[CellGroupData[{
Cell[60105, 1440, 156, 2, 31, "Input",ExpressionUUID->"bc24f402-6c7b-4fdf-b78b-306446ca9018"],
Cell[60264, 1444, 246, 5, 31, "Output",ExpressionUUID->"e5a73eb7-74e3-4369-a1bd-40d81256694b"]
}, Open  ]],
Cell[60525, 1452, 495, 11, 37, "Text",ExpressionUUID->"6b2971d0-6c3c-417b-be94-51d38770964c"],
Cell[CellGroupData[{
Cell[61045, 1467, 218, 5, 31, "Input",ExpressionUUID->"24664f21-a1b3-49d4-aab8-b40688569049"],
Cell[61266, 1474, 194, 4, 31, "Output",ExpressionUUID->"9854a269-f966-4bb3-b572-2854767e1d3a"]
}, Open  ]],
Cell[61475, 1481, 540, 13, 40, "Text",ExpressionUUID->"766e0467-bc33-4fd8-9099-c409dec8687e"],
Cell[CellGroupData[{
Cell[62040, 1498, 295, 8, 31, "Input",ExpressionUUID->"a2da3f9c-24ed-4a47-a551-35fe4554bfc0"],
Cell[62338, 1508, 149, 2, 31, "Output",ExpressionUUID->"19b5e77d-6a2d-4615-9812-06c4ce7a32b1"]
}, Open  ]],
Cell[62502, 1513, 737, 22, 40, "Text",ExpressionUUID->"b78a4852-f0b6-4913-ba47-548b6910871f"],
Cell[CellGroupData[{
Cell[63264, 1539, 455, 12, 70, "Input",ExpressionUUID->"556506bd-debb-43ec-b2ff-ab27f5161c6b"],
Cell[63722, 1553, 157, 2, 31, "Output",ExpressionUUID->"e91d46e6-66d6-485b-8bd1-ea2a27a2a8b5"]
}, Open  ]],
Cell[63894, 1558, 114, 0, 20, "Text",ExpressionUUID->"5d0ee85a-ef6e-4746-8611-f521673c9bc7"],
Cell[64011, 1560, 510, 14, 31, "Input",ExpressionUUID->"ed2f0325-fa53-4fb2-a4b4-06f973f6056d",
 InitializationCell->True],
Cell[64524, 1576, 303, 6, 21, "Text",ExpressionUUID->"566a97dc-8016-428a-9c9f-4acdaf25df48"],
Cell[64830, 1584, 384, 9, 31, "Input",ExpressionUUID->"eb6df9f4-7a1a-43c3-b9a9-88f1d90b250a",
 InitializationCell->True],
Cell[65217, 1595, 156, 4, 24, "Text",ExpressionUUID->"b8495d97-decc-4cca-9d8e-a71ddade30c9"],
Cell[CellGroupData[{
Cell[65398, 1603, 226, 4, 31, "Input",ExpressionUUID->"f113c48b-7026-42a8-b079-59baf116663c"],
Cell[65627, 1609, 2166, 49, 447, "Output",ExpressionUUID->"e8963d30-bca3-4543-9905-e18172282255"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[67854, 1665, 170, 4, 35, "Subsection",ExpressionUUID->"fb59519b-8e15-4074-8bd2-a8db4f46e995",
 CellTags->"Section1c"],
Cell[68027, 1671, 918, 20, 71, "Text",ExpressionUUID->"d9a1eb79-a654-4742-92a9-92d04171c289"],
Cell[CellGroupData[{
Cell[68970, 1695, 115, 1, 31, "Input",ExpressionUUID->"3b3eb183-ebc6-4eea-9260-d9587a5245e7"],
Cell[69088, 1698, 2675, 59, 380, "Output",ExpressionUUID->"4d6c49b8-09f4-4c5c-9c67-8ae68a4c86fe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71800, 1762, 486, 12, 31, "Input",ExpressionUUID->"6b88f5c1-c4e3-447b-b890-684ae85ffffe"],
Cell[72289, 1776, 2672, 59, 380, "Output",ExpressionUUID->"54c9b22a-a0bf-41ed-937a-f5b9de3536f3"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[75010, 1841, 173, 3, 32, "Subsection",ExpressionUUID->"31cd86bc-440b-4993-8bb3-520717ee0f3f",
 CellTags->"Section1c"],
Cell[75186, 1846, 290, 5, 39, "Text",ExpressionUUID->"8f2dbf2e-13d4-4c02-8deb-97871c3f46f4"],
Cell[CellGroupData[{
Cell[75501, 1855, 116, 1, 31, "Input",ExpressionUUID->"156d602e-3ba4-4340-8915-20f810b60a8b"],
Cell[75620, 1858, 3120, 65, 267, "Output",ExpressionUUID->"b915722f-652f-4efa-9f5e-c42082120708"]
}, Open  ]],
Cell[78755, 1926, 297, 4, 35, "Text",ExpressionUUID->"206ac3e4-754b-4ae9-a90c-f840816ac3d5"],
Cell[79055, 1932, 385, 10, 31, "Input",ExpressionUUID->"7f7763a3-7e58-4761-ac33-e10438ac8c8a",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[79465, 1946, 200, 4, 31, "Input",ExpressionUUID->"dd19a4d2-fbad-44e5-9427-02d7175e3a09"],
Cell[79668, 1952, 152, 2, 31, "Output",ExpressionUUID->"c21eb1f9-322b-4962-be8f-5ff116625fe3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[79857, 1959, 200, 4, 31, "Input",ExpressionUUID->"864a73fd-0b88-457e-86f9-c848d8753ca8"],
Cell[80060, 1965, 153, 2, 31, "Output",ExpressionUUID->"fbf2e8be-1159-4aac-8a36-4b05924cc2fb"]
}, Open  ]],
Cell[80228, 1970, 1253, 29, 67, "Text",ExpressionUUID->"369dd222-b265-43d6-8dc2-420179b8cbbe"],
Cell[81484, 2001, 929, 27, 89, "Input",ExpressionUUID->"bfaaf45d-a587-4460-9c0b-73a61a9d6c79",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[82438, 2032, 183, 3, 31, "Input",ExpressionUUID->"9c2fcac8-af2a-4bc6-8d93-04843043de18"],
Cell[82624, 2037, 159, 2, 31, "Output",ExpressionUUID->"ef83725f-c818-4985-b413-a4006fcc777c"]
}, Open  ]],
Cell[82798, 2042, 183, 3, 31, "Input",ExpressionUUID->"58d82f58-d185-41c9-aedd-ff45f33b6aa5"],
Cell[82984, 2047, 226, 3, 35, "Text",ExpressionUUID->"13b13f7b-9830-4520-8eb4-a4ed4c4e02a0"],
Cell[83213, 2052, 548, 16, 51, "Input",ExpressionUUID->"834add44-e6f7-4baf-b42c-aa669f273cda",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[83786, 2072, 185, 3, 31, "Input",ExpressionUUID->"e769e302-48df-4b6d-857c-02cfc6730843"],
Cell[83974, 2077, 232, 5, 31, "Output",ExpressionUUID->"1a9ae0ed-3d41-4f04-9e9b-77522d66189a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[84243, 2087, 185, 3, 31, "Input",ExpressionUUID->"aa71ed9e-0617-4fb0-9b60-7838b06755fa"],
Cell[84431, 2092, 166, 3, 31, "Output",ExpressionUUID->"2ec237e3-e94f-4b51-9b8c-c17ae6270e6e"]
}, Open  ]],
Cell[84612, 2098, 233, 5, 24, "Text",ExpressionUUID->"0b121f83-e765-4ff3-8234-d9eb089a6202"],
Cell[84848, 2105, 393, 10, 31, "Input",ExpressionUUID->"2c6381c2-6d58-42f8-8659-10a8f087cc74",
 InitializationCell->True],
Cell[85244, 2117, 380, 10, 31, "Input",ExpressionUUID->"f07069e7-0fc9-4dc8-b6b0-2398357d9b79",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[85649, 2131, 188, 3, 31, "Input",ExpressionUUID->"f29d83fe-76d6-4a3d-b4df-1d26737be49a"],
Cell[85840, 2136, 151, 2, 31, "Output",ExpressionUUID->"c2304473-c2a7-46e1-b14f-0fbdbabbc1b8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[86028, 2143, 178, 3, 31, "Input",ExpressionUUID->"02159b85-64df-46e5-b3c4-50584d77794f"],
Cell[86209, 2148, 155, 2, 31, "Output",ExpressionUUID->"579eaebd-db6e-41fd-92b9-14df18706aeb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[86401, 2155, 178, 3, 31, "Input",ExpressionUUID->"2d45319b-78aa-4005-b9a4-157dd8add161"],
Cell[86582, 2160, 154, 2, 31, "Output",ExpressionUUID->"2ae772f5-4038-4045-89fa-0f35e11212d8"]
}, Open  ]],
Cell[86751, 2165, 572, 17, 43, "Text",ExpressionUUID->"08a637f5-b8fe-47ae-bdd0-5ac5f5f10392"],
Cell[87326, 2184, 629, 17, 89, "Input",ExpressionUUID->"66a2317d-c8e1-4004-b515-1f3c486df6ee",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[87980, 2205, 152, 2, 31, "Input",ExpressionUUID->"737588ca-79f7-42d5-ba7b-472ed314917b"],
Cell[88135, 2209, 249, 5, 31, "Output",ExpressionUUID->"32b7b5ea-9d6e-42ab-8fe5-c8f0afaee895"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[88433, 2220, 121, 1, 32, "Subsection",ExpressionUUID->"1f9be441-f7b8-4ade-8b50-bfd00131621c",
 CellTags->"Section1d"],
Cell[88557, 2223, 192, 3, 20, "Text",ExpressionUUID->"6fb9904f-d89a-4a01-8fcf-4d318da7ba2d"],
Cell[CellGroupData[{
Cell[88774, 2230, 113, 0, 18, "Subsubsection",ExpressionUUID->"3d37d250-28e2-4a4c-8a07-82bad1c80b21"],
Cell[88890, 2232, 427, 7, 54, "Text",ExpressionUUID->"212558f9-ddd1-41b6-8f4d-bf619fc0ecc8"],
Cell[CellGroupData[{
Cell[89342, 2243, 116, 1, 31, "Input",ExpressionUUID->"417ae90d-4f52-4342-bc99-cc214ee229fd"],
Cell[89461, 2246, 3120, 65, 267, "Output",ExpressionUUID->"c0f5c396-66a8-4f50-ab2c-bdae30be4e5f"]
}, Open  ]],
Cell[92596, 2314, 2021, 52, 81, "Text",ExpressionUUID->"d8f0a17d-23b2-4dcd-969b-f494fa60922f"],
Cell[94620, 2368, 517, 9, 51, "Text",ExpressionUUID->"ff8600c1-3d16-4bf6-8844-e3ea31ab0651"],
Cell[95140, 2379, 1583, 44, 165, "Input",ExpressionUUID->"b9719e27-3440-47e2-92e3-d546ca7d8cc5",
 InitializationCell->True],
Cell[96726, 2425, 217, 3, 20, "Text",ExpressionUUID->"81ee91e5-1106-48d0-815d-dae912310899"],
Cell[CellGroupData[{
Cell[96968, 2432, 632, 14, 70, "Input",ExpressionUUID->"dca91f7b-2ece-481c-b9fa-1f92565ecbce",
 InitializationCell->True],
Cell[97603, 2448, 3331, 69, 267, "Output",ExpressionUUID->"4f57fb80-ce49-4766-a1c4-3507cee9b7ee"]
}, Open  ]],
Cell[100949, 2520, 304, 5, 39, "Text",ExpressionUUID->"e3c01a9c-ac17-4dc5-8f24-945dfa45ac71"]
}, Open  ]],
Cell[CellGroupData[{
Cell[101290, 2530, 111, 0, 18, "Subsubsection",ExpressionUUID->"eb98752f-be72-4c38-a13d-1d78ca6d5689"],
Cell[101404, 2532, 554, 8, 65, "Text",ExpressionUUID->"affb549b-a111-4035-a5a8-4931eb213da0"],
Cell[101961, 2542, 1601, 43, 184, "Input",ExpressionUUID->"5715ed0d-5383-4ad6-9c36-40b594e39a4a",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[103587, 2589, 160, 2, 31, "Input",ExpressionUUID->"a1ad9250-0ea6-4e5d-9c78-c3c999b4f8a8"],
Cell[103750, 2593, 153, 2, 31, "Output",ExpressionUUID->"395db62a-0d8c-4542-83cf-9fbe92ebcf8d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[103940, 2600, 163, 2, 31, "Input",ExpressionUUID->"27e65040-35b1-4037-8916-254451414540"],
Cell[104106, 2604, 152, 2, 31, "Output",ExpressionUUID->"3841d231-5f75-418c-935e-aa6be8c5aeb0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[104307, 2612, 108, 0, 18, "Subsubsection",ExpressionUUID->"fbcc439c-ff69-4629-b38b-52751073268c"],
Cell[104418, 2614, 624, 14, 55, "Text",ExpressionUUID->"cc7115e4-3dba-4f53-b3b8-abbff58c924f"],
Cell[CellGroupData[{
Cell[105067, 2632, 548, 13, 51, "Input",ExpressionUUID->"aa82e6ab-e7ba-414f-bca1-e5e4fab546c6",
 InitializationCell->True],
Cell[105618, 2647, 2753, 57, 312, "Output",ExpressionUUID->"c9395e1e-9494-4e08-ac34-cb76436c3abb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[108408, 2709, 154, 2, 31, "Input",ExpressionUUID->"17adaec0-bc73-421c-83bc-ba4375de4fbb"],
Cell[108565, 2713, 267, 6, 31, "Output",ExpressionUUID->"3db78bfe-8c3a-431c-a2f5-7074a48111cf"]
}, Open  ]],
Cell[108847, 2722, 675, 13, 66, "Text",ExpressionUUID->"81435248-537e-43c8-bff3-590cd751ba7a"],
Cell[109525, 2737, 300, 6, 21, "Text",ExpressionUUID->"1b1342dd-709a-412e-bccf-9c4154119895"],
Cell[CellGroupData[{
Cell[109850, 2747, 688, 17, 51, "Input",ExpressionUUID->"6fe70c2f-920b-4729-836c-fd1efe23b12c",
 InitializationCell->True],
Cell[110541, 2766, 2766, 58, 380, "Output",ExpressionUUID->"849c444c-1eae-48de-ab76-0dde66b55fe7"]
}, Open  ]],
Cell[113322, 2827, 255, 4, 35, "Text",ExpressionUUID->"875dc29a-3da8-4117-b6a2-48020ed1cbca"],
Cell[113580, 2833, 654, 12, 69, "Text",ExpressionUUID->"e37732b6-1a43-4de9-8f63-98cd5d28d8f4"],
Cell[114237, 2847, 410, 9, 43, "Text",ExpressionUUID->"f95a5000-46a7-42eb-ba8c-cb585d08ac8c"],
Cell[114650, 2858, 600, 14, 54, "Text",ExpressionUUID->"3c9ebd37-ace2-4093-9c51-c137f6d853fe"],
Cell[115253, 2874, 1171, 27, 69, "Text",ExpressionUUID->"709b0a0b-5112-46ff-ba3f-5639a18b6e15"],
Cell[116427, 2903, 2635, 70, 261, "Input",ExpressionUUID->"594a0530-8ed4-4e3b-acdb-c029c9747d55",
 InitializationCell->True],
Cell[119065, 2975, 491, 8, 51, "Text",ExpressionUUID->"2114334f-708d-4f7e-9875-3af6ac548c11"],
Cell[119559, 2985, 585, 15, 52, "Input",ExpressionUUID->"b87d3abf-e2b8-4d92-abda-0655fb6cd762",
 InitializationCell->True],
Cell[120147, 3002, 425, 10, 51, "Input",ExpressionUUID->"09e7efb6-02c6-4ab5-8f2d-2847891b1671",
 InitializationCell->True],
Cell[120575, 3014, 208, 3, 20, "Text",ExpressionUUID->"bf86f4fc-85d0-439b-83fe-7fd338251461"],
Cell[CellGroupData[{
Cell[120808, 3021, 691, 15, 70, "Input",ExpressionUUID->"3d4029ec-0803-4da0-9dec-6dcf6ed913c0",
 InitializationCell->True],
Cell[121502, 3038, 3316, 68, 312, "Output",ExpressionUUID->"2e08f01b-bd40-4d0e-a964-e635160357fc"]
}, Open  ]],
Cell[124833, 3109, 676, 15, 52, "Text",ExpressionUUID->"bc7ab27b-b4e4-4c8f-aeff-b0bbebf1ce6e"],
Cell[125512, 3126, 770, 21, 70, "Input",ExpressionUUID->"144609bf-db3c-4b69-b0b6-e4b62689e485",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[126331, 3153, 120, 1, 32, "Subsection",ExpressionUUID->"91db5bdc-a251-4a41-b3d0-daaf71262ce9",
 CellTags->"Section1e"],
Cell[126454, 3156, 233, 4, 35, "Text",ExpressionUUID->"5d3a5fa4-6290-4b7f-9635-5c95adf6e344"],
Cell[126690, 3162, 615, 9, 65, "Text",ExpressionUUID->"5315bcd2-0923-4a1e-9642-e6ad1132e162"],
Cell[127308, 3173, 1001, 26, 184, "Input",ExpressionUUID->"1b6353e4-bb15-4c3e-af0d-54e3e049ad3e",
 InitializationCell->True],
Cell[128312, 3201, 400, 12, 24, "Text",ExpressionUUID->"4c0a130c-c308-4f2b-8cd7-b9a6a6b38257"],
Cell[CellGroupData[{
Cell[128737, 3217, 183, 3, 31, "Input",ExpressionUUID->"e021827a-f6c7-4434-bcb4-fce24736deb7"],
Cell[128923, 3222, 151, 2, 31, "Output",ExpressionUUID->"2f034705-49b9-403c-8b12-ed3ae3f8bff6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[129111, 3229, 183, 3, 31, "Input",ExpressionUUID->"2b670af4-cd88-4274-adbd-6d085d3177ec"],
Cell[129297, 3234, 151, 2, 31, "Output",ExpressionUUID->"35f53306-6a6d-424f-821d-848ffb3d3c72"]
}, Open  ]],
Cell[129463, 3239, 372, 5, 35, "Text",ExpressionUUID->"acf76dfa-d505-40a1-a0c4-e20ec12139cd"],
Cell[129838, 3246, 1027, 28, 146, "Input",ExpressionUUID->"97fd9d6a-626a-42f0-906b-37ba872c1036",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[130890, 3278, 153, 2, 31, "Input",ExpressionUUID->"c9154252-9449-4745-bc8c-3531f651a19b"],
Cell[131046, 3282, 149, 2, 31, "Output",ExpressionUUID->"4a5df0c9-3352-46ac-a881-5b6f2db55842"]
}, Open  ]],
Cell[131210, 3287, 1070, 28, 55, "Text",ExpressionUUID->"b2fe44c8-b448-4f6c-bbf2-7fff550030c4"],
Cell[132283, 3317, 1245, 32, 184, "Input",ExpressionUUID->"7fffc687-ec50-4662-92dd-9d44c9476c1e",
 InitializationCell->True],
Cell[133531, 3351, 160, 4, 24, "Text",ExpressionUUID->"36d914e6-1f1a-438f-88da-f0b89bc99f98"],
Cell[CellGroupData[{
Cell[133716, 3359, 156, 2, 31, "Input",ExpressionUUID->"86de7586-2744-464a-98a7-d1f6091ef8e6"],
Cell[133875, 3363, 152, 2, 31, "Output",ExpressionUUID->"a32937f3-b09d-4a3e-b070-1c9099786189"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[134088, 3372, 123, 1, 55, "Section",ExpressionUUID->"0ae73679-accf-429d-a215-2419996459dd",
 CellTags->"Section2"],
Cell[134214, 3375, 573, 8, 65, "Text",ExpressionUUID->"4f0502fd-9c8e-48c9-9b62-cb9584a727de"],
Cell[134790, 3385, 477, 7, 50, "Text",ExpressionUUID->"2e84775b-0130-464e-8fa5-727d12a83696"],
Cell[CellGroupData[{
Cell[135292, 3396, 139, 1, 32, "Subsection",ExpressionUUID->"1aced6c8-b81c-450f-8858-ecd2cd2226fb",
 CellTags->"Section2a"],
Cell[135434, 3399, 372, 5, 50, "Text",ExpressionUUID->"9074be89-6911-46a5-ba62-03eee588275f"],
Cell[CellGroupData[{
Cell[135831, 3408, 103, 0, 18, "Subsubsection",ExpressionUUID->"fe8bf7a6-6b4b-489f-93f2-4281b30e69cd"],
Cell[135937, 3410, 675, 11, 73, "Text",ExpressionUUID->"56cda351-7316-47c2-bb54-0b9c1767e38b"],
Cell[136615, 3423, 211, 3, 20, "Text",ExpressionUUID->"00479c9b-8741-4ccd-87d1-61a4b074fb0f"],
Cell[CellGroupData[{
Cell[136851, 3430, 1121, 25, 70, "Input",ExpressionUUID->"6f672682-285e-49d8-9aff-d4bc5926c62f",
 InitializationCell->True],
Cell[137975, 3457, 2992, 62, 379, "Output",ExpressionUUID->"312d1a01-e29a-4dfc-9290-7b68902e5a8e"]
}, Open  ]],
Cell[140982, 3522, 567, 10, 51, "Text",ExpressionUUID->"22a1d909-04e0-4d18-9211-61b0299cac62"],
Cell[141552, 3534, 2143, 55, 241, "Input",ExpressionUUID->"d7117672-5a35-461a-abbd-dc679200a9bc",
 InitializationCell->True],
Cell[143698, 3591, 238, 4, 35, "Text",ExpressionUUID->"3098e9bd-a13c-48ad-912e-ed3c32ea19f3"],
Cell[CellGroupData[{
Cell[143961, 3599, 157, 2, 31, "Input",ExpressionUUID->"b1f8ae8f-46cf-4ee5-b044-ef1309fc41de"],
Cell[144121, 3603, 151, 2, 31, "Output",ExpressionUUID->"092600d9-272c-4917-89b0-ed98084dfb0f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[144309, 3610, 154, 2, 31, "Input",ExpressionUUID->"480d05ac-5bc5-4e8e-89db-9df2846fba1a"],
Cell[144466, 3614, 155, 2, 31, "Output",ExpressionUUID->"2dc0a75e-6d12-4090-85a0-ee371fde1818"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[144670, 3622, 152, 3, 21, "Subsubsection",ExpressionUUID->"714de3f0-5c5d-4012-bfbc-bdbd8b12934b"],
Cell[144825, 3627, 400, 6, 50, "Text",ExpressionUUID->"ddbcf09e-3287-4296-8c65-e8503118923b"],
Cell[145228, 3635, 499, 8, 54, "Text",ExpressionUUID->"e0bc38ed-6941-41a0-8b5c-d760f3d08604"],
Cell[145730, 3645, 393, 8, 36, "Text",ExpressionUUID->"dce41ebf-a644-4798-b8d9-b3428c9cd11d"],
Cell[CellGroupData[{
Cell[146148, 3657, 131, 2, 31, "Input",ExpressionUUID->"613a1846-663a-434a-820b-7920f6667e51"],
Cell[146282, 3661, 149, 2, 31, "Output",ExpressionUUID->"d091d2c1-af36-43de-a51b-568604d95ab6"]
}, Open  ]],
Cell[146446, 3666, 210, 5, 31, "Input",ExpressionUUID->"a37be777-d508-4307-b2da-aa3d4a13c239"],
Cell[CellGroupData[{
Cell[146681, 3675, 141, 2, 31, "Input",ExpressionUUID->"f16bec15-26c2-43d5-b139-0e1401edc7ef"],
Cell[146825, 3679, 345, 9, 24, "Message",ExpressionUUID->"e708588a-b280-4669-af22-87ea30a633d1"],
Cell[147173, 3690, 151, 2, 31, "Output",ExpressionUUID->"fb1f432c-c91e-4eeb-b65d-0b1871fc88dc"]
}, Open  ]],
Cell[147339, 3695, 555, 9, 69, "Text",ExpressionUUID->"32d1a3cb-eb40-4d35-a643-8a236edca2ef"],
Cell[147897, 3706, 593, 16, 62, "Text",ExpressionUUID->"842a5e7b-42a7-437d-bebf-b8384aad5996"],
Cell[148493, 3724, 1254, 38, 100, "Text",ExpressionUUID->"439027a2-a93e-4534-ad68-4e5a83b74f1f"],
Cell[149750, 3764, 336, 8, 51, "Input",ExpressionUUID->"83ff9b33-90ae-4b9a-abba-03b06c6cbd95"],
Cell[150089, 3774, 148, 2, 20, "Text",ExpressionUUID->"a6f988b3-444d-494b-9ef2-316aef9983dc"],
Cell[CellGroupData[{
Cell[150262, 3780, 109, 1, 31, "Input",ExpressionUUID->"218bb349-b526-4353-bad3-5a0126cef465"],
Cell[150374, 3783, 151, 2, 31, "Output",ExpressionUUID->"3a4c3a7b-221b-4351-8f2d-bdbd6733817a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[150562, 3790, 142, 2, 31, "Input",ExpressionUUID->"c21228d4-2c1e-4414-9574-28e3492ad9d7"],
Cell[150707, 3794, 151, 2, 31, "Output",ExpressionUUID->"7e68be42-a35e-47a0-a5b0-2c9cd289f35e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[150895, 3801, 109, 1, 31, "Input",ExpressionUUID->"7437fdb7-bfc9-4c30-82f9-0e1a7f48f988"],
Cell[151007, 3804, 151, 2, 31, "Output",ExpressionUUID->"e1bfe301-2fff-424d-b506-dffaea49a35c"]
}, Open  ]],
Cell[151173, 3809, 593, 12, 52, "Text",ExpressionUUID->"40a97fdd-0925-46d6-a1c2-6ba76ead161b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[151803, 3826, 100, 0, 18, "Subsubsection",ExpressionUUID->"dd2a03f5-12aa-4f1a-940d-bcd7a6834b8e"],
Cell[151906, 3828, 511, 8, 54, "Text",ExpressionUUID->"8b1c3895-2c8d-4017-b313-00d07bcecc03"],
Cell[152420, 3838, 1501, 39, 65, "Text",ExpressionUUID->"2eefec34-c3df-47ea-b29b-eff0c04fbf98"],
Cell[153924, 3879, 2860, 81, 96, "Text",ExpressionUUID->"177e2952-6579-4e50-a2f8-08cc9ad2128d"],
Cell[156787, 3962, 904, 20, 71, "Text",ExpressionUUID->"4a32aeac-5b25-4049-ab18-c7d92bef5d5a"],
Cell[157694, 3984, 651, 17, 65, "Text",ExpressionUUID->"184733c1-c55d-4337-9dd9-6372cc5595b8"],
Cell[158348, 4003, 1718, 46, 113, "Text",ExpressionUUID->"790be62b-a6f3-4755-9a4d-483eaef7abf4"],
Cell[160069, 4051, 3866, 99, 450, "Input",ExpressionUUID->"4651af98-0650-49a2-9860-c081709c59da",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[163960, 4154, 187, 3, 31, "Input",ExpressionUUID->"ea9865d0-69b4-451e-9528-46e7efb3df8d",
 InitializationCell->True],
Cell[164150, 4159, 2497, 52, 447, "Output",ExpressionUUID->"47280b35-69cc-4b75-9630-fce0e57e9b3e"]
}, Open  ]],
Cell[166662, 4214, 215, 4, 24, "Text",ExpressionUUID->"30afa1c3-2279-49ed-a91e-64866441f637"],
Cell[166880, 4220, 2121, 58, 224, "Input",ExpressionUUID->"e989d8b2-00a9-46a2-8937-cb52751123ed",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[169038, 4283, 100, 0, 18, "Subsubsection",ExpressionUUID->"84717d80-3919-4dcd-89ac-d0106050f2f7"],
Cell[169141, 4285, 288, 5, 39, "Text",ExpressionUUID->"b247b2e2-4c79-44ca-86ab-51edfefa0ac7"],
Cell[CellGroupData[{
Cell[169454, 4294, 187, 3, 31, "Input",ExpressionUUID->"0098d325-2a44-4e57-b8a4-f09dca448cba"],
Cell[169644, 4299, 157, 2, 31, "Output",ExpressionUUID->"a9bfe3da-e7f0-4e7b-8380-8fc5ec5b1ad0"]
}, Open  ]],
Cell[169816, 4304, 783, 14, 85, "Text",ExpressionUUID->"218d12cf-98f6-4dd2-b3da-ac68279e3d97"],
Cell[170602, 4320, 1437, 39, 184, "Input",ExpressionUUID->"c0316439-d159-49d3-80d5-6383ccfa37a8",
 InitializationCell->True],
Cell[172042, 4361, 1438, 39, 184, "Input",ExpressionUUID->"2acf8d6b-6871-4bdf-9650-e34e61fcc841",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[173505, 4404, 190, 3, 31, "Input",ExpressionUUID->"41f7eeed-dd9f-4a70-b536-b0c425f098ad"],
Cell[173698, 4409, 159, 2, 31, "Output",ExpressionUUID->"4591c970-6f03-4666-8d05-7bbed14410a3"]
}, Open  ]],
Cell[173872, 4414, 191, 3, 31, "Input",ExpressionUUID->"7594e694-2d33-4bf5-bc6f-eea70b77c6d7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[174100, 4422, 101, 0, 18, "Subsubsection",ExpressionUUID->"c1c4e508-5a88-43df-9003-14e1b06aee56"],
Cell[174204, 4424, 470, 7, 50, "Text",ExpressionUUID->"df38cb75-2b9a-42a0-9ef8-9b333a3c24b9"],
Cell[174677, 4433, 395, 10, 40, "Text",ExpressionUUID->"8fc4c186-bf56-48cf-8b7d-5945af0a7625"],
Cell[175075, 4445, 415, 11, 31, "Input",ExpressionUUID->"7689b21c-c887-42eb-b9cb-7ffdeecc6b63",
 InitializationCell->True],
Cell[175493, 4458, 451, 6, 50, "Text",ExpressionUUID->"598a3d25-1d7a-436b-b578-365d4849535a"],
Cell[175947, 4466, 1568, 43, 165, "Input",ExpressionUUID->"5afc82f9-cd30-43f3-b411-45ca4bbc1c5f",
 InitializationCell->True],
Cell[177518, 4511, 1570, 43, 165, "Input",ExpressionUUID->"8820796f-6a98-4f58-8da1-88e7935e37e5",
 InitializationCell->True],
Cell[179091, 4556, 492, 11, 54, "Text",ExpressionUUID->"df805ea9-dfd6-44dc-972b-4ec11753f5d9"],
Cell[179586, 4569, 1512, 41, 165, "Input",ExpressionUUID->"59f77c3b-a200-4e46-a486-5235071b6378",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[181123, 4614, 288, 7, 31, "Input",ExpressionUUID->"9c8c8ecd-5ad8-4a56-9198-d17211b22235"],
Cell[181414, 4623, 3707, 77, 447, "Output",ExpressionUUID->"c6d546b2-e42b-4a3f-99e8-d749cd028dbf"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[185182, 4707, 117, 1, 32, "Subsection",ExpressionUUID->"dfefd714-591e-48a0-b925-718a6a068ff2",
 CellTags->"Section2b"],
Cell[185302, 4710, 321, 5, 35, "Text",ExpressionUUID->"a4217676-6b5f-4ba8-802c-7699cb435cef"],
Cell[185626, 4717, 309, 6, 39, "Text",ExpressionUUID->"5f2ed652-cddd-4121-b7a4-1d6d9b655b60"],
Cell[185938, 4725, 576, 14, 40, "Text",ExpressionUUID->"641c37f7-49fb-4619-bf31-45b473679091"],
Cell[186517, 4741, 1497, 39, 115, "Text",ExpressionUUID->"62f9f9d7-aaad-4a01-bc7f-03c2d15be358"],
Cell[188017, 4782, 1296, 34, 100, "Text",ExpressionUUID->"99ee658a-6c1b-4784-bd49-84ec2ceab8d4"],
Cell[189316, 4818, 763, 25, 43, "Text",ExpressionUUID->"ec674261-fe01-475f-8252-de04e30cd5f6"],
Cell[190082, 4845, 116, 0, 20, "Text",ExpressionUUID->"1f17f431-51a6-4b80-924c-246a155a832a"],
Cell[190201, 4847, 3236, 82, 431, "Input",ExpressionUUID->"fddad126-6512-4f2c-a4cf-b0fa46e90208",
 InitializationCell->True],
Cell[193440, 4931, 1351, 37, 75, "Text",ExpressionUUID->"5e718787-a6e3-418f-8099-5feb6acec868"],
Cell[194794, 4970, 274, 7, 43, "Text",ExpressionUUID->"d733b350-ff3d-41de-aac4-65ec81b10887"],
Cell[195071, 4979, 188, 4, 24, "Text",ExpressionUUID->"1c30c83b-c941-4989-b1a7-002d6abc270e"],
Cell[CellGroupData[{
Cell[195284, 4987, 217, 5, 31, "Input",ExpressionUUID->"32ad7dc3-a082-4b41-8f4b-e7f53eb9c31d",
 InitializationCell->True],
Cell[195504, 4994, 157, 3, 31, "Output",ExpressionUUID->"0a9259e9-7133-46a9-ad14-6bddb2d92962"]
}, Open  ]],
Cell[195676, 5000, 455, 11, 39, "Text",ExpressionUUID->"41bea1d2-c82d-4bc3-ba76-9865972e5d0a"],
Cell[CellGroupData[{
Cell[196156, 5015, 315, 8, 31, "Input",ExpressionUUID->"f3fd904d-14e1-4f45-94de-9e1c61b768f6",
 InitializationCell->True],
Cell[196474, 5025, 3997, 82, 447, "Output",ExpressionUUID->"7a057612-2f0f-45d0-80c8-566e6391d5ee"]
}, Open  ]],
Cell[200486, 5110, 163, 3, 20, "Text",ExpressionUUID->"2d7396fa-5271-4111-9b63-7a38cbd4fccb"],
Cell[CellGroupData[{
Cell[200674, 5117, 218, 5, 31, "Input",ExpressionUUID->"87d44f37-120a-4249-a186-6249ac30937e",
 InitializationCell->True],
Cell[200895, 5124, 156, 3, 31, "Output",ExpressionUUID->"4c3b29b2-1e07-4c1e-af98-843fbf2576c2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[201088, 5132, 315, 8, 31, "Input",ExpressionUUID->"05dd60f5-3e22-44fe-8eae-5980c9bbb30b",
 InitializationCell->True],
Cell[201406, 5142, 3999, 82, 447, "Output",ExpressionUUID->"f956e042-317c-4c1d-a48b-080d71ade042"]
}, Open  ]],
Cell[CellGroupData[{
Cell[205442, 5229, 125, 0, 18, "Subsubsection",ExpressionUUID->"b80cdc74-92b6-4d06-adcf-46a900203c8d"],
Cell[205570, 5231, 322, 5, 39, "Text",ExpressionUUID->"3adc7651-377e-4e69-8727-502589e65a9f"],
Cell[205895, 5238, 1007, 29, 108, "Input",ExpressionUUID->"9bd95993-32ce-42a2-b7fd-3dbfff2331ad",
 InitializationCell->True],
Cell[206905, 5269, 124, 0, 20, "Text",ExpressionUUID->"35cc4b35-238c-4e1a-8b1b-3cf59426f23b"],
Cell[CellGroupData[{
Cell[207054, 5273, 553, 14, 70, "Input",ExpressionUUID->"92c283a2-3904-4f7c-bd5d-e2ec2d387d73",
 InitializationCell->True],
Cell[207610, 5289, 3043, 64, 447, "Output",ExpressionUUID->"284aa664-6284-464f-99d8-b5ee6696c29d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[210714, 5360, 115, 1, 32, "Subsection",ExpressionUUID->"41a523b3-034c-4e1a-8949-0065d06794f3",
 CellTags->"Section2c"],
Cell[210832, 5363, 435, 6, 50, "Text",ExpressionUUID->"55ee6c83-2aa8-4566-b24b-431932fa05ad"],
Cell[CellGroupData[{
Cell[211292, 5373, 107, 0, 18, "Subsubsection",ExpressionUUID->"b93b42de-3e7c-4088-b413-2cd53c6241b2"],
Cell[211402, 5375, 376, 5, 50, "Text",ExpressionUUID->"c642d9c6-359b-44ea-8089-bbcf5fdf0c9a"],
Cell[211781, 5382, 343, 6, 39, "Text",ExpressionUUID->"77214675-d8c2-4266-b5e1-2d39718e3814"],
Cell[212127, 5390, 708, 20, 108, "Input",ExpressionUUID->"d315f94f-98cd-4e3d-bcd8-1b3830a756d1",
 InitializationCell->True],
Cell[212838, 5412, 233, 3, 35, "Text",ExpressionUUID->"381d5f47-1be4-4349-9483-a1262a2d9c87"],
Cell[213074, 5417, 998, 29, 127, "Input",ExpressionUUID->"8c53adda-c8b0-4867-8477-def2e0107469",
 InitializationCell->True],
Cell[214075, 5448, 409, 8, 36, "Text",ExpressionUUID->"2938b257-b4ee-4d54-b77f-3d3ad407a316"],
Cell[CellGroupData[{
Cell[214509, 5460, 812, 22, 70, "Input",ExpressionUUID->"7427ca0f-c555-4542-8851-e6abfb54f796",
 InitializationCell->True],
Cell[215324, 5484, 5790, 145, 67, "Output",ExpressionUUID->"b8997997-ec17-40b3-a079-d77091b90e6a"]
}, Open  ]],
Cell[221129, 5632, 491, 7, 50, "Text",ExpressionUUID->"76c061f6-c6ca-4c1b-904a-8e12f55da47f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[221657, 5644, 98, 0, 18, "Subsubsection",ExpressionUUID->"981bfa05-a66d-4839-939c-fa94f22d2d7c"],
Cell[221758, 5646, 594, 13, 51, "Text",ExpressionUUID->"bff68173-a193-4292-8cb2-0924b12584dc"],
Cell[222355, 5661, 790, 22, 108, "Input",ExpressionUUID->"06105a6b-7e38-4c96-a15f-5fb1b49fdb55",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[223170, 5687, 243, 6, 31, "Input",ExpressionUUID->"d222d3d5-1bc2-457f-8867-15b4c5ecde05",
 InitializationCell->True],
Cell[223416, 5695, 5790, 145, 67, "Output",ExpressionUUID->"90a8fc0c-ca27-4260-bf72-bbcbd6223ebe"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[229255, 5846, 99, 0, 18, "Subsubsection",ExpressionUUID->"393eab59-dfe7-4a5d-bb95-3a53ef323c85"],
Cell[229357, 5848, 349, 5, 35, "Text",ExpressionUUID->"1ef2815e-661d-41a2-a5bc-4785c511ce56"],
Cell[229709, 5855, 800, 11, 80, "Text",ExpressionUUID->"34f60075-3d28-443e-9dc8-c6dd9883b861"],
Cell[230512, 5868, 4715, 129, 431, "Input",ExpressionUUID->"4b9b03b0-b70e-4663-834f-f8416fb5027c",
 InitializationCell->True],
Cell[235230, 5999, 181, 4, 24, "Text",ExpressionUUID->"c9af0dd2-f901-493a-9b7e-d99baf40cd94"],
Cell[CellGroupData[{
Cell[235436, 6007, 495, 12, 51, "Input",ExpressionUUID->"acfc7013-64fe-485e-8cf9-7f85f9c4b7b4",
 InitializationCell->True],
Cell[235934, 6021, 2120, 44, 208, "Output",ExpressionUUID->"a0d4c07a-d7e4-4d4e-b040-82a0f377faef"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[238103, 6071, 110, 0, 18, "Subsubsection",ExpressionUUID->"46c3d903-f101-4ab3-9d73-bbfe6095be7b"],
Cell[238216, 6073, 999, 23, 96, "Text",ExpressionUUID->"47fe520e-fef2-467c-ab69-e0b8533f9785"],
Cell[239218, 6098, 1758, 47, 222, "Input",ExpressionUUID->"de416c6c-68fe-4417-b442-a0efbd263847",
 InitializationCell->True],
Cell[240979, 6147, 533, 12, 54, "Text",ExpressionUUID->"1873edb7-0242-42ae-a5f1-1e7d80553bf1"],
Cell[CellGroupData[{
Cell[241537, 6163, 760, 21, 70, "Input",ExpressionUUID->"ef777783-d02e-4f89-a4e0-76c53f18544f",
 InitializationCell->True],
Cell[242300, 6186, 5619, 111, 447, "Output",ExpressionUUID->"7a3b1c46-82f5-4fef-a4cd-9f43cb84f89e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[247968, 6303, 124, 0, 18, "Subsubsection",ExpressionUUID->"ec238ff5-a34a-47cd-b616-9a8d73944249"],
Cell[248095, 6305, 409, 7, 36, "Text",ExpressionUUID->"d3276a1c-e3f1-4399-80eb-644a01819c85"],
Cell[CellGroupData[{
Cell[248529, 6316, 158, 3, 31, "Input",ExpressionUUID->"21c444bc-75a1-408f-a7b0-c961387067c2"],
Cell[248690, 6321, 272, 6, 31, "Output",ExpressionUUID->"79af905d-78c1-48a7-a746-1c8889a796e2"]
}, Open  ]],
Cell[248977, 6330, 1078, 19, 96, "Text",ExpressionUUID->"a4d735db-d99a-485f-b667-86e7c2fc03e5"],
Cell[250058, 6351, 1500, 41, 203, "Input",ExpressionUUID->"5e2fa09f-15a8-49b0-8829-24339721a903",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[251583, 6396, 190, 4, 31, "Input",ExpressionUUID->"8dc14ee8-e690-4f8c-a3d5-688adf1342bf"],
Cell[251776, 6402, 163, 3, 31, "Output",ExpressionUUID->"fdb756ff-4034-4083-b544-f422fc8154d8"]
}, Open  ]],
Cell[251954, 6408, 150, 2, 20, "Text",ExpressionUUID->"08edca90-4c08-4076-a0f6-f055ade5fd99"],
Cell[252107, 6412, 680, 19, 70, "Input",ExpressionUUID->"aa233e26-b0a3-4d33-85cb-634e57b8be46",
 InitializationCell->True],
Cell[252790, 6433, 159, 2, 20, "Text",ExpressionUUID->"929410e5-147b-47c9-a197-75e6efe72688"],
Cell[CellGroupData[{
Cell[252974, 6439, 191, 4, 31, "Input",ExpressionUUID->"1bfac435-e030-40a9-b1ac-878010a68fc5"],
Cell[253168, 6445, 170, 3, 31, "Output",ExpressionUUID->"c58d166c-0355-4dca-a57f-ab07bf32423c"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[253411, 6456, 116, 1, 55, "Section",ExpressionUUID->"2555ffbd-b4a7-44f1-afb4-8bf378fe8226",
 CellTags->"Section3"],
Cell[253530, 6459, 653, 12, 65, "Text",ExpressionUUID->"6ff2a509-df42-42ff-a83d-922d969b80bd"],
Cell[254186, 6473, 565, 12, 54, "Text",ExpressionUUID->"6525d62c-3d57-4de9-8fdf-c1a4680b32f7"],
Cell[254754, 6487, 770, 18, 40, "Text",ExpressionUUID->"3995c163-8a96-48a8-b024-2731386ab629"],
Cell[255527, 6507, 252, 4, 35, "Text",ExpressionUUID->"5965bf1f-fd31-4c71-9d7e-fef543e2c4f4"],
Cell[CellGroupData[{
Cell[255804, 6515, 2151, 45, 146, "Input",ExpressionUUID->"e4a24501-7be4-4d1e-b211-7419161ccaf8",
 InitializationCell->True],
Cell[257958, 6562, 5713, 121, 337, "Output",ExpressionUUID->"d4d9439c-5e88-4c1a-a58e-03030a25deb7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[263708, 6688, 109, 1, 32, "Subsection",ExpressionUUID->"fb748272-f1bf-4571-b171-bfc376912762",
 CellTags->"Section3a"],
Cell[263820, 6691, 354, 5, 35, "Text",ExpressionUUID->"78c1f6eb-3e0f-4d9e-9c50-1692b1c4d77b"],
Cell[264177, 6698, 656, 11, 66, "Text",ExpressionUUID->"9018d7de-1cec-4777-995f-ea0034466139"],
Cell[264836, 6711, 624, 10, 69, "Text",ExpressionUUID->"ae43d063-9427-4b0b-8ea4-72820ef98fd3"],
Cell[265463, 6723, 1286, 33, 203, "Input",ExpressionUUID->"38ad2020-d28f-4903-8922-24a5269de0df",
 InitializationCell->True],
Cell[266752, 6758, 253, 6, 20, "Text",ExpressionUUID->"0799c6d7-2f51-4320-a0b9-7e4e5d224f9e"],
Cell[CellGroupData[{
Cell[267030, 6768, 185, 4, 31, "Input",ExpressionUUID->"54e6f468-ef72-4aea-bc81-c84500cca4ed"],
Cell[267218, 6774, 270, 6, 31, "Output",ExpressionUUID->"f731ea6e-cd22-4964-98df-bc42efa09d5e"]
}, Open  ]],
Cell[267503, 6783, 589, 10, 51, "Text",ExpressionUUID->"d81f44f1-94b6-488d-bd5e-ddf4014a78e9"],
Cell[268095, 6795, 1638, 46, 184, "Input",ExpressionUUID->"f7525981-15bc-4316-897f-7f71f2bee82a",
 InitializationCell->True],
Cell[269736, 6843, 332, 8, 24, "Text",ExpressionUUID->"25cf4515-9a67-4dae-b5bd-e659b7cfa742"],
Cell[CellGroupData[{
Cell[270093, 6855, 304, 7, 31, "Input",ExpressionUUID->"7ae1b2ae-5935-4051-9787-60a59610eb7e",
 InitializationCell->True],
Cell[270400, 6864, 2895, 61, 380, "Output",ExpressionUUID->"c3c7860c-62a3-4315-9556-4400b63afde8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[273332, 6930, 163, 3, 31, "Input",ExpressionUUID->"9bcfaf9a-d729-42ed-912f-f910c4ef43d3"],
Cell[273498, 6935, 156, 3, 31, "Output",ExpressionUUID->"c3662cd9-c88d-41bd-81b2-d5155aadbb0e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[273703, 6944, 121, 1, 32, "Subsection",ExpressionUUID->"f33db0c0-b5a2-4e4e-85fb-3ac7e6200967",
 CellTags->"Section3b"],
Cell[273827, 6947, 264, 4, 35, "Text",ExpressionUUID->"f7dce3e5-4377-4102-b9e9-47201d0d9540"],
Cell[274094, 6953, 986, 25, 52, "Text",ExpressionUUID->"351e30fa-eede-41b7-927d-921f6d473093"],
Cell[CellGroupData[{
Cell[275105, 6982, 313, 8, 31, "Input",ExpressionUUID->"572affda-3399-43cc-a7dc-372db1dd8b29"],
Cell[275421, 6992, 284, 8, 31, "Output",ExpressionUUID->"bd9b0c03-ae56-4e50-ab97-9d917fa8cdcb"]
}, Open  ]],
Cell[275720, 7003, 732, 14, 52, "Text",ExpressionUUID->"cafcd074-aaba-454d-ad17-4ebef5e8a59c"],
Cell[CellGroupData[{
Cell[276477, 7021, 427, 12, 31, "Input",ExpressionUUID->"cf034bf2-3ae8-4ec7-aafa-74ccf8fc7dc5"],
Cell[276907, 7035, 327, 10, 31, "Output",ExpressionUUID->"454269e7-24cc-487b-b3ef-b568dd97952c"]
}, Open  ]],
Cell[277249, 7048, 736, 16, 51, "Text",ExpressionUUID->"626e4dec-ae34-4131-9e82-a9c3754aeb5d"],
Cell[CellGroupData[{
Cell[278010, 7068, 393, 11, 31, "Input",ExpressionUUID->"81850282-bc37-48a9-ba1d-04a23f7a91c7"],
Cell[278406, 7081, 211, 5, 31, "Output",ExpressionUUID->"0bd04bb2-1c1f-4dc0-9b81-d2690647e28d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[278654, 7091, 88, 0, 18, "Subsubsection",ExpressionUUID->"99020117-79c8-48d0-8879-0d4dafcf23b1"],
Cell[278745, 7093, 375, 5, 50, "Text",ExpressionUUID->"1565f100-3835-4d41-8fa6-1398844e073e"],
Cell[279123, 7100, 2183, 55, 260, "Input",ExpressionUUID->"429085e0-9277-42e3-bd3b-2bc179ecd2a2",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[281331, 7159, 151, 3, 31, "Input",ExpressionUUID->"6e0cb6d3-fb3b-45a3-86a9-507a030fc64f"],
Cell[281485, 7164, 953, 25, 31, "Output",ExpressionUUID->"fc5ad311-e1b3-46d5-bffe-e5e9cd198213"]
}, Open  ]],
Cell[282453, 7192, 488, 8, 51, "Text",ExpressionUUID->"ee49d853-70d8-424b-98e0-61e4ef092bbe"],
Cell[CellGroupData[{
Cell[282966, 7204, 180, 4, 31, "Input",ExpressionUUID->"9e60c58b-e578-42ad-a8eb-7bdf8ebc7aad"],
Cell[283149, 7210, 483, 9, 31, "Output",ExpressionUUID->"34a016ad-a261-48dc-9bb9-4940e449b976"]
}, Open  ]],
Cell[283647, 7222, 184, 3, 20, "Text",ExpressionUUID->"6e88c709-656c-4a76-ae8b-77139e9bca94"],
Cell[283834, 7227, 1130, 29, 127, "Input",ExpressionUUID->"14b1880a-6376-4e2b-a312-0e5c3b2a5283",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[284989, 7260, 160, 3, 31, "Input",ExpressionUUID->"77389cf6-d840-401a-9bc3-60c4a3f3a33d"],
Cell[285152, 7265, 3040, 59, 412, "Output",ExpressionUUID->"dddbda32-d90c-4b9c-be5b-072754964670"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[288241, 7330, 134, 1, 18, "Subsubsection",ExpressionUUID->"0c9de215-854a-495f-89f6-a62362fef82f"],
Cell[288378, 7333, 385, 7, 35, "Text",ExpressionUUID->"76203e55-0f04-4f8d-a07e-7e03bf6fa1ec"],
Cell[288766, 7342, 2185, 55, 260, "Input",ExpressionUUID->"1671d6a9-6ca9-4e65-8ab7-8040a4b3d1ba",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[290976, 7401, 152, 3, 31, "Input",ExpressionUUID->"93d454b3-4454-4898-b0bb-a2c53d7cafc0"],
Cell[291131, 7406, 967, 27, 31, "Output",ExpressionUUID->"2a7b4865-85a7-4476-ab1d-21b61d0a666c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[292147, 7439, 87, 0, 18, "Subsubsection",ExpressionUUID->"683b7970-46d5-4680-8a28-d24560cef7a2"],
Cell[292237, 7441, 283, 4, 35, "Text",ExpressionUUID->"0681f321-a5fc-4eef-9938-b9b4325c27cf"],
Cell[292523, 7447, 2777, 70, 336, "Input",ExpressionUUID->"b5f41a28-e606-42a1-b736-64071f333180",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[295325, 7521, 150, 3, 31, "Input",ExpressionUUID->"ccdb2494-d6c2-4d5c-bbe7-ee0306a615c6"],
Cell[295478, 7526, 959, 26, 31, "Output",ExpressionUUID->"40a279ed-9786-4615-b7cb-ef8ef81fb747"]
}, Open  ]],
Cell[296452, 7555, 216, 5, 20, "Text",ExpressionUUID->"6f4b8494-8fdb-4b19-a013-aa4a77358364"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[296717, 7566, 115, 1, 32, "Subsection",ExpressionUUID->"01fe650b-7c3b-4bad-aa85-a075a2b1f711",
 CellTags->"Section3c"],
Cell[296835, 7569, 421, 6, 50, "Text",ExpressionUUID->"a82839e7-1721-48a7-9950-bad6c0e35575"],
Cell[297259, 7577, 455, 6, 50, "Text",ExpressionUUID->"39eae82e-9002-4ccb-b393-e9be426a34c2"],
Cell[297717, 7585, 315, 4, 35, "Text",ExpressionUUID->"2a10dd41-1532-4d90-bbb8-587585122428"],
Cell[298035, 7591, 348, 5, 35, "Text",ExpressionUUID->"bdb76b8a-22ce-4120-b75b-c86e06d919fc"],
Cell[298386, 7598, 499, 10, 51, "Text",ExpressionUUID->"c37e758e-e15c-415c-99bc-7fac7da4d058"],
Cell[CellGroupData[{
Cell[298910, 7612, 187, 5, 31, "Input",ExpressionUUID->"351b6da0-c481-4f5d-8d94-d383d744df7f"],
Cell[299100, 7619, 230, 6, 31, "Output",ExpressionUUID->"e8891954-ea70-4879-a20a-40085fca326f"]
}, Open  ]],
Cell[299345, 7628, 356, 7, 36, "Text",ExpressionUUID->"1c3eb19f-d87a-4d22-863f-b443617e2ead"],
Cell[CellGroupData[{
Cell[299726, 7639, 218, 6, 31, "Input",ExpressionUUID->"5aa855ab-ab45-45ab-89df-962dd563c7b7"],
Cell[299947, 7647, 398, 13, 42, "Output",ExpressionUUID->"1854fe64-8658-4e95-9004-33893ebed607"]
}, Open  ]],
Cell[300360, 7663, 270, 5, 43, "Text",ExpressionUUID->"004a13a6-75d6-4353-8d54-6c6b61fcde90"],
Cell[300633, 7670, 167, 3, 20, "Text",ExpressionUUID->"252dda03-fca6-469f-88ee-05aef419e8ee"],
Cell[300803, 7675, 823, 16, 65, "Text",ExpressionUUID->"ba7baa1a-4913-4a9a-91b5-2db95138a76c"],
Cell[301629, 7693, 182, 3, 20, "Text",ExpressionUUID->"a537c6f9-ca3a-4a7e-8136-1f12bf840023"],
Cell[301814, 7698, 208, 3, 20, "Text",ExpressionUUID->"56dca077-9385-42c6-aa96-b914ad839540"],
Cell[CellGroupData[{
Cell[302047, 7705, 124, 0, 18, "Subsubsection",ExpressionUUID->"3492f798-e537-40db-a452-777390fcba08"],
Cell[302174, 7707, 214, 3, 20, "Text",ExpressionUUID->"3f464bb4-b467-47ed-9b5d-2af5b98990f9"],
Cell[302391, 7712, 151, 2, 20, "Text",ExpressionUUID->"31f9582a-9085-49b2-8b8a-67b8fd015152"],
Cell[CellGroupData[{
Cell[302567, 7718, 140, 3, 31, "Input",ExpressionUUID->"9704398f-75f5-41f1-9054-2c4d97d8d187"],
Cell[302710, 7723, 159, 3, 31, "Output",ExpressionUUID->"13c98b42-ed77-4e61-9f96-6a58ec5fdea2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[302906, 7731, 140, 3, 31, "Input",ExpressionUUID->"1bf12066-d4ab-4fbb-8174-076c121c97ce"],
Cell[303049, 7736, 158, 3, 31, "Output",ExpressionUUID->"ec800799-7b4f-4884-b05c-17624092a909"]
}, Open  ]],
Cell[303222, 7742, 405, 11, 21, "Text",ExpressionUUID->"560083f6-bf3c-4944-bc4f-cad05617f8f4"],
Cell[CellGroupData[{
Cell[303652, 7757, 163, 4, 31, "Input",ExpressionUUID->"966cf192-39e3-44a3-b1fe-bbbe96fcbbe8"],
Cell[303818, 7763, 159, 3, 31, "Output",ExpressionUUID->"a9cb7563-679e-49d3-bdda-5fc12a54d4ad"]
}, Open  ]],
Cell[303992, 7769, 889, 26, 37, "Text",ExpressionUUID->"774c6b7f-4c21-4960-a9aa-9379c5dca990"],
Cell[CellGroupData[{
Cell[304906, 7799, 195, 5, 31, "Input",ExpressionUUID->"65c38cb7-8299-43eb-9275-93bf129bc347"],
Cell[305104, 7806, 158, 3, 31, "Output",ExpressionUUID->"9f74d1c8-1993-4ba7-a822-101cd590b650"]
}, Open  ]],
Cell[305277, 7812, 663, 19, 43, "Text",ExpressionUUID->"8a6fafbf-32f0-4302-b915-de810c59fd90"],
Cell[CellGroupData[{
Cell[305965, 7835, 160, 4, 31, "Input",ExpressionUUID->"ecad80b8-91ba-47d8-b452-73e0f4debabd"],
Cell[306128, 7841, 159, 3, 31, "Output",ExpressionUUID->"0f6e8cad-4f27-4d85-83a8-bf01e5aaaa3d"]
}, Open  ]],
Cell[306302, 7847, 502, 12, 40, "Text",ExpressionUUID->"293635c4-24b0-485a-8d22-fe5b901c397f"],
Cell[CellGroupData[{
Cell[306829, 7863, 239, 7, 31, "Input",ExpressionUUID->"51a13975-97ac-468b-8f50-4f274f272aa8"],
Cell[307071, 7872, 155, 3, 31, "Output",ExpressionUUID->"40c8db3f-9ab9-4ba2-824c-b3241085a261"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[307275, 7881, 153, 2, 18, "Subsubsection",ExpressionUUID->"01bae281-e9ff-4b31-8e9c-61910ae80007"],
Cell[307431, 7885, 1020, 29, 35, "Text",ExpressionUUID->"8bd52783-27a5-4a51-bae3-21c3afb6f303"],
Cell[308454, 7916, 627, 13, 51, "Text",ExpressionUUID->"e3090132-8c4b-4d1d-9400-ae7ff0bf1134"],
Cell[CellGroupData[{
Cell[309106, 7933, 229, 6, 31, "Input",ExpressionUUID->"ac70e614-b29a-4a16-ac2e-383bb0911e32"],
Cell[309338, 7941, 170, 3, 31, "Output",ExpressionUUID->"2f3bc5a5-2fc0-4f1d-aaf6-df2ce5b10752"]
}, Open  ]],
Cell[309523, 7947, 959, 18, 90, "Text",ExpressionUUID->"94ef0318-1fa1-44ea-ab11-5226f80c8584"],
Cell[310485, 7967, 1056, 29, 127, "Input",ExpressionUUID->"988f91db-573a-4cba-acd5-815e96a9c604",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[311578, 8001, 145, 2, 18, "Subsubsection",ExpressionUUID->"9dd8e52d-fea5-4fd1-a45f-59b95c0d0175",
 PageBreakWithin->False],
Cell[311726, 8005, 257, 6, 20, "Text",ExpressionUUID->"1e309c5c-c636-422d-96f2-b7e569cf0235",
 PageBreakAbove->False,
 PageBreakWithin->False],
Cell[CellGroupData[{
Cell[312008, 8015, 327, 10, 31, "Input",ExpressionUUID->"7abdb23d-a9a2-446b-9a5d-f7327862792c",
 InitializationCell->True],
Cell[312338, 8027, 305, 9, 31, "Output",ExpressionUUID->"aeb88da0-8393-41f1-afb6-24725a30cc90"]
}, Open  ]],
Cell[312658, 8039, 901, 27, 21, "Text",ExpressionUUID->"8871c37c-80c3-4a17-b924-306390e94d41"],
Cell[313562, 8068, 766, 20, 54, "Text",ExpressionUUID->"e636855e-6d72-4ff2-8856-5c0a09394160"],
Cell[314331, 8090, 485, 12, 40, "Text",ExpressionUUID->"ee665d4b-1ee3-4e86-9949-6a136c16a568"],
Cell[CellGroupData[{
Cell[314841, 8106, 154, 3, 31, "Input",ExpressionUUID->"21d8cd99-ef8b-4e85-a98b-7f021c72fc7a"],
Cell[314998, 8111, 574, 19, 42, "Output",ExpressionUUID->"95528fd1-b449-4cb7-82e2-b9e9a63a766c"]
}, Open  ]],
Cell[315587, 8133, 694, 20, 43, "Text",ExpressionUUID->"111b8444-8ab8-4be9-8a69-561d565aef97"],
Cell[CellGroupData[{
Cell[316306, 8157, 238, 6, 31, "Input",ExpressionUUID->"f25a801b-bb4a-4415-9863-35ecb6099dbc"],
Cell[316547, 8165, 206, 5, 31, "Output",ExpressionUUID->"7b31d7d8-23fe-4d4c-97c9-ecef059a20b2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[316790, 8175, 238, 6, 31, "Input",ExpressionUUID->"c45ae548-6ffb-4f12-a467-a08d38b1c1fe"],
Cell[317031, 8183, 255, 7, 31, "Output",ExpressionUUID->"24be23fd-7c16-453b-bf05-5db848afe37e"]
}, Open  ]],
Cell[317301, 8193, 182, 3, 20, "Text",ExpressionUUID->"eb02b250-79e7-4216-b623-f79ec2b2f97b"],
Cell[CellGroupData[{
Cell[317508, 8200, 346, 11, 31, "Input",ExpressionUUID->"51bba57c-98b8-4ff8-a1ef-a37f57db1455"],
Cell[317857, 8213, 365, 11, 31, "Output",ExpressionUUID->"4da94446-a932-4689-997c-8058c7a68311"]
}, Open  ]],
Cell[318237, 8227, 215, 3, 35, "Text",ExpressionUUID->"53d6febd-df3e-48db-b68a-cb1d00b5e768"],
Cell[CellGroupData[{
Cell[318477, 8234, 256, 7, 31, "Input",ExpressionUUID->"3b04c3b7-c13b-4980-8e9d-0f273f7120f7",
 InitializationCell->True],
Cell[318736, 8243, 241, 6, 31, "Output",ExpressionUUID->"9b5d4fd7-f191-4331-a7aa-d20d48c23b44"]
}, Open  ]],
Cell[CellGroupData[{
Cell[319014, 8254, 155, 3, 31, "Input",ExpressionUUID->"127a55b0-7870-4759-b0eb-54a6257d5fa0"],
Cell[319172, 8259, 452, 15, 42, "Output",ExpressionUUID->"9e30d334-7578-4bb4-9658-d088058a7f9e"]
}, Open  ]],
Cell[319639, 8277, 693, 20, 40, "Text",ExpressionUUID->"be9137c8-cff2-44ed-a629-ea494c2dcf6c"],
Cell[CellGroupData[{
Cell[320357, 8301, 179, 4, 31, "Input",ExpressionUUID->"413cd05a-6e2d-4024-af1b-f8aea6aeb3d3"],
Cell[320539, 8307, 454, 15, 42, "Output",ExpressionUUID->"4ac91ef9-407d-433c-888a-9ec3bca4f2ef"]
}, Open  ]],
Cell[321008, 8325, 145, 2, 20, "Text",ExpressionUUID->"d6c5b27a-6358-4e7e-b2a4-53f936660b6f"],
Cell[CellGroupData[{
Cell[321178, 8331, 220, 5, 31, "Input",ExpressionUUID->"7abc47e4-83f2-4fd6-9043-103df553d98d"],
Cell[321401, 8338, 153, 3, 31, "Output",ExpressionUUID->"6d925615-fd2f-4265-ab3c-d9a4a87f9792"]
}, Open  ]],
Cell[321569, 8344, 283, 7, 21, "Text",ExpressionUUID->"9488c118-b3aa-4c79-8b1c-fdf76c362e1c"],
Cell[CellGroupData[{
Cell[321877, 8355, 356, 11, 31, "Input",ExpressionUUID->"b7143973-f7aa-4019-ab59-dc0f3a2a257b"],
Cell[322236, 8368, 332, 9, 31, "Output",ExpressionUUID->"e803bd63-56c2-47a2-a213-25c056f0893e"]
}, Open  ]],
Cell[322583, 8380, 426, 11, 43, "Text",ExpressionUUID->"7cb9925f-3149-448f-b21e-d3e7a1ac9e03"],
Cell[CellGroupData[{
Cell[323034, 8395, 225, 6, 31, "Input",ExpressionUUID->"ebcaf882-3d10-44ce-aa99-027afe5cb5b8"],
Cell[323262, 8403, 155, 3, 31, "Output",ExpressionUUID->"fc0cae56-6de4-4500-8fe5-e18e6d1d6a0d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[323454, 8411, 194, 5, 31, "Input",ExpressionUUID->"2226e595-79b8-4097-8419-82a60882df51"],
Cell[323651, 8418, 155, 3, 31, "Output",ExpressionUUID->"ebebccd5-f0aa-4dac-9f4f-c05337a511f4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[323855, 8427, 98, 0, 18, "Subsubsection",ExpressionUUID->"06857684-9175-4830-9218-1f3a44d6512a"],
Cell[323956, 8429, 277, 5, 39, "Text",ExpressionUUID->"7ce7210b-190a-4937-b55d-72b46391c598"],
Cell[324236, 8436, 510, 7, 65, "Text",ExpressionUUID->"ead7dcae-91a1-472d-b436-460016ce176b"],
Cell[324749, 8445, 1336, 37, 72, "Text",ExpressionUUID->"03c591a2-0652-4997-8a75-0050e577360c"],
Cell[326088, 8484, 4017, 111, 298, "Input",ExpressionUUID->"08a5bbcf-626f-4d96-87ae-98718c41ed23",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[330142, 8600, 97, 0, 18, "Subsubsection",ExpressionUUID->"81916242-96be-40ad-bd1c-d2cdeb515ec8"],
Cell[330242, 8602, 274, 7, 39, "Text",ExpressionUUID->"7d975209-dd2d-4458-ade6-568aa96f1cae"],
Cell[330519, 8611, 855, 20, 75, "Text",ExpressionUUID->"e1478fad-6ccc-49ec-81f3-8c216072dc69"],
Cell[331377, 8633, 317, 8, 39, "Text",ExpressionUUID->"7de78ec0-053b-4363-ba22-267a7e4670d2"],
Cell[331697, 8643, 431, 8, 36, "Text",ExpressionUUID->"dbafe0be-1356-4a0c-b681-3063557d6eea"],
Cell[332131, 8653, 92, 0, 20, "Text",ExpressionUUID->"51d79e06-9668-40c6-9c98-3a62d19e9bbe"],
Cell[332226, 8655, 2884, 78, 336, "Input",ExpressionUUID->"90d58f7c-2171-4d15-a588-d5177acbcdac",
 InitializationCell->True],
Cell[335113, 8735, 118, 0, 20, "Text",ExpressionUUID->"77838c1a-f4c8-44ea-a606-04ff369b0bb6"],
Cell[CellGroupData[{
Cell[335256, 8739, 337, 10, 31, "Input",ExpressionUUID->"f46bfe21-01ba-483f-8a04-82e6eaa186ef",
 InitializationCell->True],
Cell[335596, 8751, 4725, 96, 331, "Output",ExpressionUUID->"f4158bc6-bb4e-40a9-94a3-589fdf53cbb4"]
}, Open  ]],
Cell[340336, 8850, 236, 3, 35, "Text",ExpressionUUID->"8d13bcc3-e0e1-4557-aa66-54005080439f"],
Cell[CellGroupData[{
Cell[340597, 8857, 305, 9, 31, "Input",ExpressionUUID->"e7848866-73ed-4a95-a716-32156064ac5c"],
Cell[340905, 8868, 5216, 111, 342, "Output",ExpressionUUID->"31e13a5d-a53f-4286-b472-634540ac8ca1"]
}, Open  ]],
Cell[346136, 8982, 752, 18, 62, "Text",ExpressionUUID->"305c01a2-96a3-4e67-9cf1-49fdc23617fc"],
Cell[346891, 9002, 592, 16, 70, "Input",ExpressionUUID->"b5b59d5e-3d30-4fa2-bd81-6be5e7a6447a",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[347532, 9024, 128, 1, 32, "Subsection",ExpressionUUID->"0c5f8435-f680-42f5-8e7a-d9df45c786af",
 CellTags->"Section3d"],
Cell[347663, 9027, 441, 6, 50, "Text",ExpressionUUID->"a17d8b8e-7c7d-4015-9c0f-2f20e6974dc2"],
Cell[CellGroupData[{
Cell[348129, 9037, 374, 11, 31, "Input",ExpressionUUID->"98c630ee-da60-4f02-bafe-86eccbf2dcfb"],
Cell[348506, 9050, 3675, 68, 320, "Output",ExpressionUUID->"5e5948e1-2c25-48fc-b8dc-82117fb3c6f0"]
}, Open  ]],
Cell[352196, 9121, 372, 8, 36, "Text",ExpressionUUID->"6aac3e56-66b2-457c-8719-4de2d1751909"],
Cell[CellGroupData[{
Cell[352593, 9133, 384, 11, 31, "Input",ExpressionUUID->"0e313c7e-c25f-468b-a926-917763af7136"],
Cell[352980, 9146, 3466, 65, 406, "Output",ExpressionUUID->"284f8f13-b435-4128-bc96-0b54ea24a6fd"]
}, Open  ]],
Cell[356461, 9214, 463, 8, 36, "Text",ExpressionUUID->"36db8ccd-a6c5-4f0a-8f31-7dcd4bc8281a"],
Cell[356927, 9224, 350, 5, 35, "Text",ExpressionUUID->"167d244f-da4c-43b0-90d1-286731a8e2ac"],
Cell[357280, 9231, 378, 5, 50, "Text",ExpressionUUID->"32ea1a04-8b12-4423-9b57-afcf02a9cb17"],
Cell[357661, 9238, 3685, 100, 298, "Input",ExpressionUUID->"c7f547dd-2700-4f66-9904-9d6cf9148783",
 InitializationCell->True],
Cell[361349, 9340, 255, 6, 21, "Text",ExpressionUUID->"fd1286c4-47dc-4e5a-b9a9-506d16bab073"],
Cell[CellGroupData[{
Cell[361629, 9350, 363, 9, 31, "Input",ExpressionUUID->"dfe2edf9-cf10-4813-8e01-7a935efbc334",
 InitializationCell->True],
Cell[361995, 9361, 340, 8, 31, "Output",ExpressionUUID->"9bd5ce5a-7dda-4e9b-91ac-275d867f86b1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[362372, 9374, 160, 3, 31, "Input",ExpressionUUID->"bcb9c101-8a04-457f-9cd3-e09ff98e21a2"],
Cell[362535, 9379, 153, 3, 31, "Output",ExpressionUUID->"26af0551-a121-4488-ad2e-84da67665486"]
}, Open  ]],
Cell[362703, 9385, 184, 3, 20, "Text",ExpressionUUID->"de7b610b-e0f5-41d3-bf6f-edb2b8f0a9ca"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[362936, 9394, 116, 1, 55, "Section",ExpressionUUID->"a0d6d249-9e97-4fcb-9ddf-53c3921bb6f8",
 CellTags->"Section4"],
Cell[363055, 9397, 1052, 21, 80, "Text",ExpressionUUID->"6bf798cd-54d7-44b9-8480-0d3950efa243"],
Cell[364110, 9420, 2154, 59, 84, "Text",ExpressionUUID->"2e8d35b2-fce6-446a-8937-7cac53f274f9"],
Cell[366267, 9481, 1034, 23, 66, "Text",ExpressionUUID->"c5e4e972-2a50-478a-8d86-fde474d6c92d"],
Cell[CellGroupData[{
Cell[367326, 9508, 416, 11, 31, "Input",ExpressionUUID->"825d6387-c9c1-48aa-9305-396c28f145ce"],
Cell[367745, 9521, 2874, 63, 380, "Output",ExpressionUUID->"d3c29f09-e556-42c5-8f16-b998e0b6ab51"]
}, Open  ]],
Cell[370634, 9587, 442, 10, 36, "Text",ExpressionUUID->"bed35049-3824-4c3a-927e-5b583c46fa32"],
Cell[CellGroupData[{
Cell[371101, 9601, 2078, 50, 108, "Input",ExpressionUUID->"aad565ce-d327-4d65-b153-edbe2e3823c2",
 InitializationCell->True],
Cell[373182, 9653, 4199, 86, 108, "Output",ExpressionUUID->"16cf1d4c-996d-44f9-abad-5d96e511531c"]
}, Open  ]],
Cell[377396, 9742, 429, 10, 21, "Text",ExpressionUUID->"68ef94ec-738f-4f35-8afb-7cd7b214893f"],
Cell[CellGroupData[{
Cell[377850, 9756, 260, 6, 31, "Input",ExpressionUUID->"9b63c647-631e-4003-929a-603bfeffb379",
 InitializationCell->True],
Cell[378113, 9764, 366, 7, 31, "Output",ExpressionUUID->"82ed237e-f8f4-4a1d-a1f2-73b30b5cc1e3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[378516, 9776, 300, 7, 31, "Input",ExpressionUUID->"e4bab60c-32f9-4402-b3c6-bfb814d7d738"],
Cell[378819, 9785, 4637, 99, 447, "Output",ExpressionUUID->"e60427eb-572b-496e-bd71-c9da7aab237b"]
}, Open  ]],
Cell[383471, 9887, 255, 6, 21, "Text",ExpressionUUID->"125ff0e4-5b7a-453d-8133-a794fd389967"],
Cell[CellGroupData[{
Cell[383751, 9897, 363, 8, 51, "Input",ExpressionUUID->"5665ad53-7294-44f3-8b4a-c5658e4f4c84"],
Cell[384117, 9907, 4633, 97, 447, "Output",ExpressionUUID->"ece7aa9c-efde-45af-8a37-57e61ce08ea7"]
}, Open  ]],
Cell[388765, 10007, 609, 14, 36, "Text",ExpressionUUID->"b49f9e4c-0e1d-4418-9c1a-eb9ae2b16f66"],
Cell[CellGroupData[{
Cell[389399, 10025, 548, 13, 51, "Input",ExpressionUUID->"f285481c-8a7e-477a-b70b-2f2170017b0c"],
Cell[389950, 10040, 4871, 105, 447, "Output",ExpressionUUID->"4ebb9232-26cd-4a08-8aa0-c1e4692a8106"]
}, Open  ]],
Cell[394836, 10148, 1114, 27, 71, "Text",ExpressionUUID->"ce94dd91-12af-40bd-9f7c-a96dfff339db"],
Cell[CellGroupData[{
Cell[395975, 10179, 820, 22, 108, "Input",ExpressionUUID->"2558f7d9-3e9f-4441-81b8-4d1452c1e20b",
 InitializationCell->True],
Cell[396798, 10203, 5564, 113, 108, "Output",ExpressionUUID->"fb407e8b-bf00-4cc0-a651-0ab30e5dd7d5"]
}, Open  ]],
Cell[402377, 10319, 1545, 40, 92, "Text",ExpressionUUID->"4b74888e-c36f-4204-8397-c4cd83dce8e1"],
Cell[403925, 10361, 720, 21, 40, "Text",ExpressionUUID->"c5a43f83-8736-4e45-b86e-a0b739a7d0d9"],
Cell[CellGroupData[{
Cell[404670, 10386, 473, 13, 51, "Input",ExpressionUUID->"1955ec66-5562-485b-82b3-ce179eebcba0",
 InitializationCell->True],
Cell[405146, 10401, 774, 15, 31, "Output",ExpressionUUID->"3862656c-4ff5-46ed-88ed-f3c9c158671a"]
}, Open  ]],
Cell[405935, 10419, 119, 0, 20, "Text",ExpressionUUID->"bb7b8044-4347-43b7-85f8-2bccad155fae"],
Cell[CellGroupData[{
Cell[406079, 10423, 670, 17, 70, "Input",ExpressionUUID->"a79808c6-7001-4ef2-8472-270f06605f6d"],
Cell[406752, 10442, 2165, 44, 184, "Output",ExpressionUUID->"02736d35-9c86-4b0a-90c2-61226b3ae689"]
}, Open  ]],
Cell[408932, 10489, 175, 3, 20, "Text",ExpressionUUID->"03bd4af2-e783-41fb-bc57-ba37cb91f8a0"],
Cell[409110, 10494, 751, 16, 54, "Text",ExpressionUUID->"5ffaf29b-48bb-45a2-a786-2c80ce35c7f8"],
Cell[409864, 10512, 465, 11, 36, "Text",ExpressionUUID->"23a63386-e64c-48d6-ba2f-2d948a89af94"],
Cell[410332, 10525, 278, 4, 35, "Text",ExpressionUUID->"3bda1bb3-f82f-4179-84ef-d16a6c6660e6"],
Cell[CellGroupData[{
Cell[410635, 10533, 119, 1, 32, "Subsection",ExpressionUUID->"bbc63933-6fe9-496e-9784-4fe47f50a3e2",
 CellTags->"Section4a"],
Cell[410757, 10536, 317, 5, 35, "Text",ExpressionUUID->"789be116-5fc1-496f-b172-0cc786cd0a76"],
Cell[411077, 10543, 808, 15, 65, "Text",ExpressionUUID->"5a0e2680-69a1-44b8-bd44-fe838bc550b8"],
Cell[411888, 10560, 263, 5, 39, "Text",ExpressionUUID->"4e6742f0-0afc-4ed3-8751-687acda27714"],
Cell[CellGroupData[{
Cell[412176, 10569, 502, 12, 31, "Item1Numbered",ExpressionUUID->"d55536b3-11b0-4eff-8395-50494d26f961"],
Cell[412681, 10583, 124, 0, 16, "Item1Numbered",ExpressionUUID->"e3c3b8b8-ba3e-400f-820e-c4819928c15c"],
Cell[CellGroupData[{
Cell[412830, 10587, 282, 5, 32, "Item2Numbered",ExpressionUUID->"3e486782-3b59-470d-9833-ea071ed800b7"],
Cell[413115, 10594, 567, 11, 53, "Item2Numbered",ExpressionUUID->"73768286-eb9e-4da8-8ecd-aa3ef4d0b8b1"],
Cell[413685, 10607, 431, 8, 49, "Item2Numbered",ExpressionUUID->"c3238d0a-c9b7-4367-aeb7-5b01c88b71d9"]
}, Open  ]],
Cell[414131, 10618, 662, 18, 50, "Item1Numbered",ExpressionUUID->"e3b516b5-bfae-4672-a672-5645fc04a776"],
Cell[CellGroupData[{
Cell[414818, 10640, 728, 21, 53, "Item2Numbered",ExpressionUUID->"70e748e7-ef27-4f1d-8c9c-4818cbbc022f"],
Cell[415549, 10663, 631, 16, 49, "Item2Numbered",ExpressionUUID->"aadcc8b7-4b76-4fda-b91c-5b14b755b4ef"]
}, Open  ]]
}, Open  ]],
Cell[416207, 10683, 98, 0, 20, "Text",ExpressionUUID->"889ed782-ac03-4b05-91eb-2b2a2a7982d3"],
Cell[416308, 10685, 3057, 80, 393, "Input",ExpressionUUID->"26c1d342-5d81-4715-8779-27e47fe78556",
 InitializationCell->True],
Cell[419368, 10767, 124, 0, 20, "Text",ExpressionUUID->"27b6b17d-2f88-4766-ae5c-130fab6af51a"],
Cell[CellGroupData[{
Cell[419517, 10771, 249, 5, 31, "Input",ExpressionUUID->"1012ec9f-283d-4fc9-8c98-d945ad1b8023"],
Cell[419769, 10778, 4106, 85, 447, "Output",ExpressionUUID->"1d44187d-502b-414c-9254-c3c8097ad044"]
}, Open  ]],
Cell[423890, 10866, 455, 10, 36, "Text",ExpressionUUID->"8193e4b8-8563-4435-93e5-729cd7e95879"],
Cell[CellGroupData[{
Cell[424370, 10880, 357, 7, 51, "Input",ExpressionUUID->"ff00ae7f-ad97-4c49-b66c-6fc1f4543961"],
Cell[424730, 10889, 3359, 66, 108, "Output",ExpressionUUID->"3f159239-8d1e-46ee-aeb1-b55a326cc0f1"]
}, Open  ]],
Cell[428104, 10958, 597, 12, 52, "Text",ExpressionUUID->"f0f3a2b7-21f0-4209-a708-133c8721ea69"],
Cell[CellGroupData[{
Cell[428726, 10974, 310, 8, 31, "Input",ExpressionUUID->"785b43e0-aa1e-4a8e-aea8-bf00d8f93a07"],
Cell[429039, 10984, 5743, 123, 108, "Output",ExpressionUUID->"4176469e-6790-4fda-b927-bc586f98d15b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[434831, 11113, 121, 1, 32, "Subsection",ExpressionUUID->"ac7ec516-07ab-485a-a7d0-5de60b065c6a",
 CellTags->"Section4b"],
Cell[434955, 11116, 380, 5, 50, "Text",ExpressionUUID->"1c2d8dfc-7dc0-49a5-9b18-8e7accf8007e"],
Cell[435338, 11123, 271, 5, 39, "Text",ExpressionUUID->"569e33c8-d59f-4c15-8217-47f6d3ca24db"],
Cell[CellGroupData[{
Cell[435634, 11132, 324, 7, 17, "Item1Numbered",ExpressionUUID->"6a64cbde-a0d9-4180-afef-614bb3a2d297"],
Cell[435961, 11141, 124, 0, 16, "Item1Numbered",ExpressionUUID->"5e3ac4cd-65d1-4a65-8322-daa48250bd80"],
Cell[CellGroupData[{
Cell[436110, 11145, 287, 5, 32, "Item2Numbered",ExpressionUUID->"a1f93847-4dfc-4dd4-b3e0-51cff6514f93"],
Cell[436400, 11152, 386, 7, 36, "Item2Numbered",ExpressionUUID->"ad232d55-ec8e-4d3b-bf87-45b790b5bfa0"],
Cell[436789, 11161, 282, 5, 32, "Item2Numbered",ExpressionUUID->"116a4030-b9b2-4bd1-b5d1-64eb2bd0d74c"]
}, Open  ]],
Cell[437086, 11169, 1085, 39, 71, "Item1Numbered",ExpressionUUID->"1983df22-e31c-4d2f-81fe-14a9b3011246"]
}, Open  ]],
Cell[438186, 11211, 344, 6, 39, "Text",ExpressionUUID->"49f1b268-2678-485a-8539-0dbf6eadcd37"],
Cell[438533, 11219, 99, 0, 20, "Text",ExpressionUUID->"2f8e7471-0e3e-4f2f-8971-7fd53d7d96af"],
Cell[438635, 11221, 2751, 73, 355, "Input",ExpressionUUID->"1fdf1cac-d8ac-4246-a150-fe8b7422e3e9",
 InitializationCell->True],
Cell[441389, 11296, 115, 0, 20, "Text",ExpressionUUID->"5cece031-e768-493c-9361-54d0cff36b88"],
Cell[CellGroupData[{
Cell[441529, 11300, 359, 7, 51, "Input",ExpressionUUID->"f2d428c3-e9ed-4462-a255-5fb20bf9f731"],
Cell[441891, 11309, 3360, 66, 108, "Output",ExpressionUUID->"d066f54d-febe-43d4-8429-a3c75510ce80"]
}, Open  ]],
Cell[445266, 11378, 184, 3, 20, "Text",ExpressionUUID->"734235b8-cf33-450a-b6af-42a5c1701329"],
Cell[CellGroupData[{
Cell[445475, 11385, 424, 10, 51, "Input",ExpressionUUID->"e9aaa347-c002-45a1-bdcf-f6aecc2f1018"],
Cell[445902, 11397, 2906, 54, 447, "Output",ExpressionUUID->"d6b092ff-eebd-4294-ae56-b238904d1a73"]
}, Open  ]],
Cell[448823, 11454, 262, 4, 35, "Text",ExpressionUUID->"638dbecd-4a1e-410e-a8d9-e9805d5e3759"]
}, Open  ]],
Cell[CellGroupData[{
Cell[449122, 11463, 132, 1, 32, "Subsection",ExpressionUUID->"08f23100-fa3a-40a8-946a-6bb403785b21",
 CellTags->"Section4c"],
Cell[449257, 11466, 644, 11, 65, "Text",ExpressionUUID->"ecb67f7e-a986-4503-a2ff-04178cfa0145"],
Cell[449904, 11479, 682, 15, 35, "Text",ExpressionUUID->"fe792717-7e94-4d61-88fc-817e851ee3af"],
Cell[CellGroupData[{
Cell[450611, 11498, 787, 18, 42, "Item1Numbered",ExpressionUUID->"f077bcd7-e793-4fbb-8ea8-649705121dcc"],
Cell[451401, 11518, 2036, 57, 97, "Item1Numbered",ExpressionUUID->"e80e23d0-a303-4921-9b9f-0fd980f57d78"],
Cell[453440, 11577, 337, 10, 33, "Item1Numbered",ExpressionUUID->"f302c010-b81e-4d73-be47-c7e1cef95018"],
Cell[453780, 11589, 764, 20, 50, "Item1Numbered",ExpressionUUID->"46a4ca81-6dbe-423a-9971-4864f739054a"],
Cell[454547, 11611, 1122, 27, 59, "Item1Numbered",ExpressionUUID->"1e7e637a-1e07-47b6-ab05-b02337682543"],
Cell[455672, 11640, 776, 16, 63, "Item1Numbered",ExpressionUUID->"cba1bfd1-327f-4418-a0d8-ce868bf2f297"]
}, Open  ]],
Cell[456463, 11659, 605, 14, 40, "Text",ExpressionUUID->"f12ddd2e-1807-4191-8d22-81ce62a57a32"],
Cell[457071, 11675, 5371, 132, 640, "Input",ExpressionUUID->"6d9856c4-ff90-4dd1-adf6-07b070b5e992",
 InitializationCell->True],
Cell[462445, 11809, 169, 3, 20, "Text",ExpressionUUID->"b8c55835-787d-4cf8-a170-120e0330506f"],
Cell[CellGroupData[{
Cell[462639, 11816, 1350, 34, 89, "Input",ExpressionUUID->"e51d1376-4a4e-4a91-81d2-f41a1bf15e87",
 InitializationCell->True],
Cell[463992, 11852, 2479, 48, 211, "Output",ExpressionUUID->"65a1ca23-dbc5-480b-862c-5b1389058410"]
}, Open  ]],
Cell[CellGroupData[{
Cell[466508, 11905, 248, 6, 31, "Input",ExpressionUUID->"7050d8ff-a837-4914-a013-db5ab80aed90"],
Cell[466759, 11913, 2807, 56, 211, "Output",ExpressionUUID->"22069236-5b63-49dc-89a2-3fa09e96cfa9"]
}, Open  ]],
Cell[469581, 11972, 355, 8, 36, "Text",ExpressionUUID->"6dc603f4-ed82-4c1d-802d-600ac8581440"],
Cell[469939, 11982, 219, 6, 31, "Input",ExpressionUUID->"ca597add-67c3-4486-90fe-894cc9574974",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[470183, 11992, 352, 10, 31, "Input",ExpressionUUID->"d08dd4c3-8e5f-4a38-86cc-7c87a49b705c"],
Cell[470538, 12004, 159, 3, 31, "Output",ExpressionUUID->"a6c65ceb-788b-4151-9332-f6c44f56a394"]
}, Open  ]],
Cell[CellGroupData[{
Cell[470734, 12012, 352, 10, 31, "Input",ExpressionUUID->"4802f8c7-9a0d-4507-8938-63dfd5016242"],
Cell[471089, 12024, 159, 3, 31, "Output",ExpressionUUID->"b831f362-776a-4c5e-89cb-ac095c9c2547"]
}, Open  ]],
Cell[CellGroupData[{
Cell[471285, 12032, 352, 10, 31, "Input",ExpressionUUID->"9a8e215f-09ff-4eb3-91ea-ea30703f889d"],
Cell[471640, 12044, 2722, 53, 358, "Output",ExpressionUUID->"6a19b43e-6b87-4dd3-8592-216779e0bd19"]
}, Open  ]],
Cell[474377, 12100, 653, 11, 65, "Text",ExpressionUUID->"2c3af98b-c741-4374-8172-b22addd434ba"],
Cell[475033, 12113, 5302, 131, 602, "Input",ExpressionUUID->"ba264c4d-966e-4861-8985-0d0db378f6b2",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[480360, 12248, 250, 6, 31, "Input",ExpressionUUID->"8e12eec0-02e3-4663-ba0d-7eb92404e0b5"],
Cell[480613, 12256, 2835, 56, 447, "Output",ExpressionUUID->"be287e6a-5438-4e72-86a3-f317002c7506"]
}, Open  ]],
Cell[CellGroupData[{
Cell[483485, 12317, 354, 10, 31, "Input",ExpressionUUID->"e9988742-ba40-4d2f-a6b2-fc90ae8cc06f"],
Cell[483842, 12329, 5634, 104, 220, "Output",ExpressionUUID->"6c80edb7-9244-4db6-8ff4-14d0cc6d2196"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[489525, 12439, 134, 1, 32, "Subsection",ExpressionUUID->"d8c086a6-1333-4231-9367-d285111cd50a",
 CellTags->"Section4d"],
Cell[489662, 12442, 958, 18, 80, "Text",ExpressionUUID->"370b89ae-e881-42d3-a932-d65e0da7ac49"],
Cell[490623, 12462, 1517, 42, 77, "Text",ExpressionUUID->"ebe2461d-83ff-466b-ac4a-db77ee76265a"],
Cell[492143, 12506, 849, 14, 85, "Text",ExpressionUUID->"485d3185-3b26-483c-907b-3c17d3568264"],
Cell[CellGroupData[{
Cell[493017, 12524, 257, 7, 31, "Input",ExpressionUUID->"6a9757f9-37c0-4ef0-8cdb-512dd84031f9"],
Cell[493277, 12533, 850, 24, 108, "Output",ExpressionUUID->"0f1a069d-795b-44f9-ae9c-cdcb189f62b2"]
}, Open  ]],
Cell[494142, 12560, 452, 8, 54, "Text",ExpressionUUID->"ef7ea3c7-b822-477e-8181-db105cd51b85"],
Cell[494597, 12570, 3492, 89, 355, "Input",ExpressionUUID->"8374a50d-a1e6-403b-a67b-cdf042709c30",
 InitializationCell->True],
Cell[498092, 12661, 367, 8, 35, "Text",ExpressionUUID->"3cfe3377-01fa-429a-bff6-5e41b086a8b4"],
Cell[CellGroupData[{
Cell[498484, 12673, 259, 8, 31, "Input",ExpressionUUID->"296ba1a4-81fa-4aee-b986-7b5b2517839d"],
Cell[498746, 12683, 1276, 29, 194, "Output",ExpressionUUID->"e28eeef4-dae9-490e-b727-230e8b0beaa9"]
}, Open  ]],
Cell[500037, 12715, 614, 14, 77, "Text",ExpressionUUID->"b71921ed-f30e-4207-b8d9-f1fbe03346c7"],
Cell[500654, 12731, 1389, 37, 184, "Input",ExpressionUUID->"2847ac8f-bc6d-41cf-b344-fbd6dab42154",
 InitializationCell->True],
Cell[502046, 12770, 267, 5, 39, "Text",ExpressionUUID->"6c700eb8-1ccf-4b87-b717-544a52b2cca1"],
Cell[CellGroupData[{
Cell[502338, 12779, 216, 5, 20, "Item1Numbered",ExpressionUUID->"488edfa9-6a3d-4839-929a-61c3119c5682"],
Cell[502557, 12786, 701, 12, 76, "Item1Numbered",ExpressionUUID->"fadef8e6-de1b-465a-8026-f0abe2f8757f"],
Cell[503261, 12800, 288, 8, 20, "Item1Numbered",ExpressionUUID->"4d20cead-31b2-4670-8d19-1f85168cdaba"],
Cell[503552, 12810, 384, 7, 37, "Item1Numbered",ExpressionUUID->"f9977e9d-92ce-48c9-a152-1725038f9759"],
Cell[503939, 12819, 308, 6, 33, "Item1Numbered",ExpressionUUID->"e024b176-469d-4433-b289-1529bea8aac2"]
}, Open  ]],
Cell[504262, 12828, 3124, 82, 355, "Input",ExpressionUUID->"2b8cab0b-97de-41bc-b664-217c2a355a38",
 InitializationCell->True],
Cell[507389, 12912, 440, 11, 20, "Text",ExpressionUUID->"cd84e75b-7b26-4f98-912c-9d3edff91a8d"],
Cell[CellGroupData[{
Cell[507854, 12927, 143, 3, 31, "Input",ExpressionUUID->"c5d7b5e1-d317-4334-a900-f7ad5aa24766"],
Cell[508000, 12932, 1132, 27, 160, "Output",ExpressionUUID->"97e24390-7193-436e-b1d7-7c014576f43a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[509181, 12965, 136, 1, 32, "Subsection",ExpressionUUID->"89a6196b-e20e-4f00-bc29-a3d9556c2782",
 CellTags->"Section4e"],
Cell[509320, 12968, 1681, 47, 50, "Text",ExpressionUUID->"a2c56f4d-8c6e-4315-9559-a45fa776741f"],
Cell[511004, 13017, 787, 21, 54, "Text",ExpressionUUID->"b596b434-9ace-4b77-ae5f-b7e20c020c31"],
Cell[CellGroupData[{
Cell[511816, 13042, 269, 7, 31, "Input",ExpressionUUID->"0c5dbb6f-61bc-4a9e-a556-3de7d6dacc78",
 InitializationCell->True],
Cell[512088, 13051, 249, 6, 31, "Output",ExpressionUUID->"6b02078e-a590-4d64-8096-99a3d6a2a1b5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[512374, 13062, 147, 3, 31, "Input",ExpressionUUID->"12df437f-ba17-4b05-9d5d-ebbf361a41cb"],
Cell[512524, 13067, 154, 3, 31, "Output",ExpressionUUID->"d4565cc8-69c0-4afb-ab8c-fc628ea7ddd4"]
}, Open  ]],
Cell[512693, 13073, 477, 10, 39, "Text",ExpressionUUID->"35118e15-3e34-490b-849e-af846582284e"],
Cell[CellGroupData[{
Cell[513195, 13087, 331, 8, 31, "Input",ExpressionUUID->"c6435960-18d0-4b90-a59e-28b429d1c9b0",
 InitializationCell->True],
Cell[513529, 13097, 310, 6, 31, "Output",ExpressionUUID->"60d02c21-93e1-41f5-b5f4-ef87d30e947f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[513876, 13108, 238, 6, 31, "Input",ExpressionUUID->"bf42474b-4b0f-4762-817a-e19786bfeb15",
 InitializationCell->True],
Cell[514117, 13116, 220, 5, 31, "Output",ExpressionUUID->"93182373-4b6c-4df9-bbc0-ee13eb3a0d44"]
}, Open  ]],
Cell[CellGroupData[{
Cell[514374, 13126, 182, 4, 31, "Input",ExpressionUUID->"29a2c7e4-d12b-432d-a7c0-3388f2364185"],
Cell[514559, 13132, 255, 6, 31, "Output",ExpressionUUID->"bd862963-2e55-4a70-b1ac-eba8509d3648"]
}, Open  ]],
Cell[CellGroupData[{
Cell[514851, 13143, 229, 6, 31, "Input",ExpressionUUID->"5242663b-961c-45c1-bca8-7e4efc8e68b8"],
Cell[515083, 13151, 234, 6, 31, "Output",ExpressionUUID->"c7420d4e-06e3-4957-aad2-7232410acb85"]
}, Open  ]],
Cell[515332, 13160, 209, 3, 20, "Text",ExpressionUUID->"1bce1f61-7ab3-488e-8914-40e71ff1bed1"],
Cell[515544, 13165, 4328, 110, 507, "Input",ExpressionUUID->"64dc64a4-3783-4ae6-a499-55b1bddbff7b",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[519897, 13279, 267, 7, 31, "Input",ExpressionUUID->"c84bd534-92c2-4895-89dc-89ba8904c54a"],
Cell[520167, 13288, 209, 5, 31, "Output",ExpressionUUID->"5efb1165-b854-4d4e-b6e7-1b34756f953d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[520413, 13298, 267, 7, 31, "Input",ExpressionUUID->"f95d6515-1b12-4f0c-816d-1b663ac3cf3b"],
Cell[520683, 13307, 159, 3, 31, "Output",ExpressionUUID->"2f37d8bf-ac52-4fe8-8b4f-bc4113fb97fc"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[520903, 13317, 124, 1, 55, "Section",ExpressionUUID->"c76e3480-cc6e-42c0-be1b-0319ea682950",
 CellTags->"Section5"],
Cell[521030, 13320, 1146, 26, 80, "Text",ExpressionUUID->"7aecad67-4f3e-4e94-adf3-594c5d333814"],
Cell[522179, 13348, 559, 11, 36, "Text",ExpressionUUID->"d0d9713c-cb77-4b0c-9eb1-a495cfab4ea8"],
Cell[522741, 13361, 863, 20, 55, "Text",ExpressionUUID->"296cc27c-c3ec-42aa-98be-fbac5a287f3e"],
Cell[CellGroupData[{
Cell[523629, 13385, 2915, 70, 165, "Input",ExpressionUUID->"6b39229b-da9c-40af-9ed7-9b53782f6985",
 InitializationCell->True],
Cell[526547, 13457, 4906, 90, 374, "Output",ExpressionUUID->"fd84a8ae-3fda-4194-81c2-3f7155dd9cf5"]
}, Open  ]],
Cell[531468, 13550, 675, 16, 36, "Text",ExpressionUUID->"0d868143-2560-4877-acc8-4ba138c33778"],
Cell[CellGroupData[{
Cell[532168, 13570, 206, 4, 31, "Input",ExpressionUUID->"2909828e-1008-4f28-a8a3-3005f385ff9d"],
Cell[532377, 13576, 155, 3, 31, "Output",ExpressionUUID->"4453d1e6-b70b-4f03-891f-4fba39ed5cf5"]
}, Open  ]],
Cell[532547, 13582, 701, 14, 51, "Text",ExpressionUUID->"87f58efd-03e6-47e4-84c5-fc2715b19b14"],
Cell[CellGroupData[{
Cell[533273, 13600, 188, 4, 31, "Input",ExpressionUUID->"74b011f1-c3a6-457d-a328-272991465573"],
Cell[533464, 13606, 291, 7, 31, "Output",ExpressionUUID->"040405bb-b8a3-459c-adc8-b567bc1475bd"]
}, Open  ]],
Cell[533770, 13616, 570, 12, 37, "Text",ExpressionUUID->"1c9d2f7d-06e8-4840-b949-6b0d31fa2658"],
Cell[CellGroupData[{
Cell[534365, 13632, 199, 5, 31, "Input",ExpressionUUID->"e371a0d9-2234-4d55-8ce0-801852db36ab"],
Cell[534567, 13639, 1332, 28, 176, "Output",ExpressionUUID->"191040ff-604a-4ffd-a98b-c6a424820ae9"]
}, Open  ]],
Cell[535914, 13670, 659, 16, 37, "Text",ExpressionUUID->"0bcc877b-f846-4365-9571-a25d03fc1236"],
Cell[CellGroupData[{
Cell[536598, 13690, 417, 11, 51, "Input",ExpressionUUID->"86d1d674-53e7-45e2-8d50-4cd2a3aedcd5"],
Cell[537018, 13703, 2607, 83, 194, "Output",ExpressionUUID->"4936b4db-2438-45a8-b1e0-c3ce54b3a49d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[539662, 13791, 134, 1, 32, "Subsection",ExpressionUUID->"f94d4e9f-ae94-418b-b70b-8ef993e01b6b",
 CellTags->"Section5a"],
Cell[539799, 13794, 259, 4, 35, "Text",ExpressionUUID->"669e82c8-d084-46e8-9a9c-b68937f81a22"],
Cell[540061, 13800, 1248, 29, 87, "Text",ExpressionUUID->"9c5b422c-65d6-4929-9f8b-35d71cab4f95"],
Cell[541312, 13831, 660, 19, 70, "Input",ExpressionUUID->"a1d66d6d-ce25-4fe4-9161-e0b9625b0f52",
 InitializationCell->True],
Cell[541975, 13852, 536, 16, 43, "Text",ExpressionUUID->"e2203b6b-2557-44ef-9f6e-f96dd5881ac3"],
Cell[542514, 13870, 609, 15, 58, "Text",ExpressionUUID->"2cc96d07-1c01-49e4-bf57-800d429bc73e"],
Cell[CellGroupData[{
Cell[543148, 13889, 212, 5, 31, "Input",ExpressionUUID->"3d3a024b-00f2-4224-a933-4c1fc76a145f",
 InitializationCell->True],
Cell[543363, 13896, 11810, 222, 229, "Output",ExpressionUUID->"959902b9-5f5d-4c6d-8ffc-1fbd58048617"]
}, Open  ]],
Cell[CellGroupData[{
Cell[555210, 14123, 281, 7, 31, "Input",ExpressionUUID->"28206371-34f5-4960-b6db-8b1f74b6d68c"],
Cell[555494, 14132, 156, 3, 31, "Output",ExpressionUUID->"f256d5c8-9647-4420-85f9-f2bfd47181c4"]
}, Open  ]],
Cell[555665, 14138, 317, 5, 35, "Text",ExpressionUUID->"fc076023-a99f-4911-be6c-3ca7e8db10d3"],
Cell[555985, 14145, 403, 8, 43, "Text",ExpressionUUID->"3d8c1c5b-dfe8-4f74-a675-30a25ff1426f"],
Cell[556391, 14155, 1010, 17, 107, "Text",ExpressionUUID->"f7f8a15d-22bb-423d-ada0-541597f4b322"],
Cell[557404, 14174, 2806, 70, 336, "Input",ExpressionUUID->"7e406cd3-c99c-496a-925a-771c8ad1f575",
 InitializationCell->True],
Cell[560213, 14246, 183, 3, 20, "Text",ExpressionUUID->"2489b9c6-3013-4a96-bc6c-b4d65a44b1a6"],
Cell[CellGroupData[{
Cell[560421, 14253, 260, 5, 33, "Item1Numbered",ExpressionUUID->"041b19b0-d79f-46ea-a267-f2a6c0ea1117"],
Cell[560684, 14260, 468, 9, 34, "Item1Numbered",ExpressionUUID->"0601615c-800c-428c-b114-b59c2c4174fa"],
Cell[561155, 14271, 452, 11, 16, "Item1Numbered",ExpressionUUID->"942aeea2-9811-4590-8407-98d607b033b1"]
}, Open  ]],
Cell[561622, 14285, 3741, 104, 393, "Input",ExpressionUUID->"9ca0e2a4-4703-42c6-b6f3-bd214751ea1e",
 InitializationCell->True],
Cell[565366, 14391, 160, 3, 20, "Text",ExpressionUUID->"0af62cba-a7fe-4723-b321-c59538e68880"],
Cell[CellGroupData[{
Cell[565551, 14398, 287, 7, 31, "Input",ExpressionUUID->"44502a8e-aa6a-4866-a604-0f649c6816ce",
 InitializationCell->True],
Cell[565841, 14407, 5822, 116, 447, "Output",ExpressionUUID->"c5601806-4b9f-4c2d-97ce-e7306950f724"]
}, Open  ]],
Cell[CellGroupData[{
Cell[571700, 14528, 193, 4, 31, "Input",ExpressionUUID->"1bf4a561-ed6d-4600-84fe-964ca3021cb3"],
Cell[571896, 14534, 6208, 115, 374, "Output",ExpressionUUID->"7b7b6c49-5b99-4199-85c3-b9bf7fb581ef"]
}, Open  ]],
Cell[578119, 14652, 415, 7, 39, "Text",ExpressionUUID->"c3f4e3bb-b938-48a8-b846-b2e49aece6d5"],
Cell[578537, 14661, 2404, 62, 317, "Input",ExpressionUUID->"0f01c4e7-c9ea-442a-86e4-07ef0a5cf47c",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[580966, 14727, 153, 3, 31, "Input",ExpressionUUID->"f778819e-4a69-40d0-b64f-72f46e73affe"],
Cell[581122, 14732, 710, 14, 31, "Output",ExpressionUUID->"9fc7fa48-bdb7-4e60-b610-1f04a8498b21"]
}, Open  ]],
Cell[581847, 14749, 331, 6, 39, "Text",ExpressionUUID->"df35c3cd-290a-40b9-a824-3dd23eae02a1"],
Cell[582181, 14757, 1078, 29, 108, "Input",ExpressionUUID->"ceb31c39-4be3-4ad6-8d5e-09b5ee3d2f1d",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[583284, 14790, 223, 5, 31, "Input",ExpressionUUID->"add8a558-9db2-4668-99b6-ba66e615e45f"],
Cell[583510, 14797, 3012, 60, 450, "Output",ExpressionUUID->"0626023a-0636-44fd-a7d0-022533d548a7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[586571, 14863, 137, 1, 32, "Subsection",ExpressionUUID->"1fc0032e-8b16-4e84-8c58-6ff52f3ff970",
 CellTags->"Section5b"],
Cell[586711, 14866, 484, 7, 50, "Text",ExpressionUUID->"bd2ecc11-6497-4098-b8e9-10c7359fad84"],
Cell[587198, 14875, 976, 17, 81, "Text",ExpressionUUID->"1c93ec1e-4f16-4f7e-ac78-5500a27d140d"],
Cell[588177, 14894, 1344, 36, 165, "Input",ExpressionUUID->"c6e4a9e2-64ee-49e2-a907-8fadafa95c34",
 InitializationCell->True],
Cell[589524, 14932, 163, 3, 20, "Text",ExpressionUUID->"417f672b-b2d5-4993-9469-aa8d23eb47f8"],
Cell[CellGroupData[{
Cell[589712, 14939, 272, 6, 20, "Item1Numbered",ExpressionUUID->"f5b5d0fa-decc-4259-9040-bdb403f5b6b4"],
Cell[589987, 14947, 217, 6, 20, "Item1Numbered",ExpressionUUID->"ac5bd8e4-e873-4658-ad48-5d577199d000"],
Cell[590207, 14955, 392, 9, 37, "Item1Numbered",ExpressionUUID->"8fe3c04b-1bfa-45b9-9c15-ccff7e562513"],
Cell[590602, 14966, 462, 10, 50, "Item1Numbered",ExpressionUUID->"29727c80-ff46-46e1-9419-5d2a9a69ec49"],
Cell[591067, 14978, 429, 11, 16, "Item1Numbered",ExpressionUUID->"3dcfbded-77b7-4afe-b13b-5f958cb6d7b9"]
}, Open  ]],
Cell[591511, 14992, 2842, 74, 374, "Input",ExpressionUUID->"e528778e-e7a2-4f2f-824f-961908b26136",
 InitializationCell->True],
Cell[594356, 15068, 307, 5, 35, "Text",ExpressionUUID->"7ef90475-ff89-4c04-8bef-76f66bce2fa1"],
Cell[CellGroupData[{
Cell[594688, 15077, 226, 5, 31, "Input",ExpressionUUID->"f33778bf-d679-43e2-8eed-da3cfc8d42a8"],
Cell[594917, 15084, 5641, 113, 447, "Output",ExpressionUUID->"82aa694d-2464-45ed-81af-36324cb58ab7"]
}, Open  ]],
Cell[600573, 15200, 332, 6, 39, "Text",ExpressionUUID->"41d038ba-7d52-4db0-95d1-d63e3af4329b"],
Cell[600908, 15208, 2181, 55, 336, "Input",ExpressionUUID->"0baeb994-f8d1-4f15-9039-5846cad0fd92",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[603114, 15267, 226, 5, 31, "Input",ExpressionUUID->"e1d20c3a-4f9e-4163-82a0-9cc38b1f91cd"],
Cell[603343, 15274, 3012, 60, 450, "Output",ExpressionUUID->"1fa97aa4-4812-4d26-8fc1-9a5a04499373"]
}, Open  ]],
Cell[606370, 15337, 197, 3, 20, "Text",ExpressionUUID->"569aaaf3-6e8f-4d95-8e7c-81175cc0a6be"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[606616, 15346, 170, 3, 55, "Section",ExpressionUUID->"4b4b17bd-6b37-46ca-83be-f0f8f25e6cac",
 CellTags->"Solutions"],
Cell[CellGroupData[{
Cell[606811, 15353, 126, 2, 32, "Subsection",ExpressionUUID->"bdf6b0ce-46c9-419a-9ed9-acbac6bbcac6",
 CellTags->"SolutionsCP6"],
Cell[606940, 15357, 188, 3, 42, "Problem",ExpressionUUID->"29ed8bf9-74e6-412b-9e61-60225275dfcd"],
Cell[607131, 15362, 894, 21, 50, "Text",ExpressionUUID->"900f4fe9-fca5-4569-a367-5bd2d0ddb576"],
Cell[608028, 15385, 457, 6, 50, "Text",ExpressionUUID->"616f1958-3eab-416c-a3c4-f7d67243eea7"],
Cell[608488, 15393, 438, 7, 39, "Text",ExpressionUUID->"a1678e08-9dd9-4bd3-9b9e-deee8024e461"],
Cell[CellGroupData[{
Cell[608951, 15404, 822, 17, 51, "Input",ExpressionUUID->"d45ddeb3-63fb-4c19-9ce3-db9b53d9eca6",
 InitializationCell->True],
Cell[609776, 15423, 794, 16, 31, "Output",ExpressionUUID->"703215ff-9757-4714-9eeb-5f4c8562fac6"]
}, Open  ]],
Cell[610585, 15442, 292, 4, 35, "Text",ExpressionUUID->"38186edc-8447-418f-b2d1-4a267192a979"],
Cell[610880, 15448, 281, 7, 21, "Text",ExpressionUUID->"5e937dc2-3682-48fe-917c-b193d638f129"],
Cell[611164, 15457, 226, 6, 31, "Input",ExpressionUUID->"2cb6a74c-f476-47b7-8df3-5771f5e9b22c",
 InitializationCell->True],
Cell[611393, 15465, 203, 3, 20, "Text",ExpressionUUID->"1730ae61-6bdc-434f-a1c2-95f3c10a902c"],
Cell[CellGroupData[{
Cell[611621, 15472, 154, 3, 31, "Input",ExpressionUUID->"630e9c9b-d58e-4634-bcd5-56b0cf8abba4"],
Cell[611778, 15477, 155, 3, 31, "Output",ExpressionUUID->"e6168078-c62c-4945-b137-e593cc009a29"]
}, Open  ]],
Cell[611948, 15483, 338, 5, 35, "Text",ExpressionUUID->"8435e61a-b738-4be5-a3f2-a791b7407d39"],
Cell[CellGroupData[{
Cell[612311, 15492, 344, 10, 31, "Input",ExpressionUUID->"ace0521f-f158-4f63-a269-e23fe4e25caf",
 InitializationCell->True],
Cell[612658, 15504, 153, 3, 31, "Output",ExpressionUUID->"4998528c-5759-4ad7-926e-b93bc4672994"]
}, Open  ]],
Cell[612826, 15510, 1405, 30, 149, "Text",ExpressionUUID->"e6a25314-3bc2-4583-9df7-d92fabb0ecbf"],
Cell[614234, 15542, 1244, 34, 165, "Input",ExpressionUUID->"9d23d2d3-c1a1-4f10-b3c3-d59af90154e9",
 InitializationCell->True],
Cell[615481, 15578, 155, 2, 20, "Text",ExpressionUUID->"0d20c3f9-dd70-4c40-941c-ac31b7774b1c"],
Cell[CellGroupData[{
Cell[615661, 15584, 161, 3, 31, "Input",ExpressionUUID->"4594bb8e-4eec-4054-b171-18916a35eb8b"],
Cell[615825, 15589, 158, 3, 31, "Output",ExpressionUUID->"1bcb1c48-e70d-46bb-8083-1b9120d5fa45"]
}, Open  ]],
Cell[CellGroupData[{
Cell[616020, 15597, 223, 5, 31, "Input",ExpressionUUID->"29c5a056-93d5-4b95-b9a4-4110e047c252"],
Cell[616246, 15604, 4513, 99, 294, "Output",ExpressionUUID->"77974cc0-68a9-4110-8165-679503406713"]
}, Open  ]],
Cell[620774, 15706, 118, 0, 20, "Text",ExpressionUUID->"d440b893-0bae-41cc-847d-c9a0fa11fee6"],
Cell[620895, 15708, 2084, 54, 279, "Input",ExpressionUUID->"de110c7b-f639-46e0-8260-0d7bd3984be1",
 InitializationCell->True],
Cell[622982, 15764, 1496, 26, 119, "Text",ExpressionUUID->"3de30971-0eef-4472-b61a-d86cd64d6920"],
Cell[624481, 15792, 3658, 85, 336, "Input",ExpressionUUID->"12ed41fe-b10c-4e13-a0f2-32f62e4c5a8b",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[628164, 15881, 161, 3, 31, "Input",ExpressionUUID->"3320a672-2cfc-4f2b-b5d5-4eb65e6cc8cb"],
Cell[628328, 15886, 5057, 109, 289, "Output",ExpressionUUID->"8faa8d87-870f-4f19-b1f2-a7c34cf632cf"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[633434, 16001, 138, 2, 32, "Subsection",ExpressionUUID->"d5ff6e5c-5844-4a24-a8d2-8b4e618331a3",
 CellTags->"SolutionsCE1"],
Cell[633575, 16005, 110, 0, 42, "Problem",ExpressionUUID->"b0dfe88c-53f8-4116-ad5c-f9783971a36b"],
Cell[633688, 16007, 586, 9, 65, "Text",ExpressionUUID->"349b9b3b-33ef-49f1-b38d-74820346ae34"],
Cell[634277, 16018, 632, 14, 39, "Text",ExpressionUUID->"be6add61-3596-44b9-ba61-463756daca2e"],
Cell[634912, 16034, 1622, 43, 241, "Input",ExpressionUUID->"f9f81ab1-4c0b-4c0e-ac65-4417d8771026",
 InitializationCell->True],
Cell[636537, 16079, 213, 3, 20, "Text",ExpressionUUID->"6497d935-81b2-4283-9b1f-7b352d0c4f79"],
Cell[CellGroupData[{
Cell[636775, 16086, 503, 14, 70, "Input",ExpressionUUID->"33fba284-9108-4e0c-ae75-833b7d99ae37",
 InitializationCell->True],
Cell[637281, 16102, 912, 20, 233, "Output",ExpressionUUID->"26060c7a-3faa-4073-b6c3-c8586c08c03f"]
}, Open  ]],
Cell[638208, 16125, 392, 12, 31, "Input",ExpressionUUID->"bb32d37f-8186-48b9-9431-f6a148a098d6",
 InitializationCell->True],
Cell[638603, 16139, 118, 0, 20, "Text",ExpressionUUID->"630612bf-587a-49f4-b61b-6e9a3d64298f"],
Cell[CellGroupData[{
Cell[638746, 16143, 268, 7, 31, "Input",ExpressionUUID->"0105976b-ecdc-4ff4-9b71-1149a787bc95"],
Cell[639017, 16152, 6971, 150, 463, "Output",ExpressionUUID->"ccb7b4bc-34de-49f1-8d0a-15e5cef906a8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[646037, 16308, 138, 2, 32, "Subsection",ExpressionUUID->"4d758b29-280d-4e7f-aa62-bcb7b92ee796",
 CellTags->"SolutionsCE3"],
Cell[646178, 16312, 207, 3, 42, "Problem",ExpressionUUID->"261a4d8a-8d35-4461-815b-09cec24a7e8d"],
Cell[646388, 16317, 500, 8, 50, "Text",ExpressionUUID->"3e8bf03b-4e5e-428a-a5e8-edd62b82cd22"],
Cell[646891, 16327, 428, 7, 54, "Text",ExpressionUUID->"e90dd81d-2aa0-4b07-95ed-77bbc403d321"],
Cell[CellGroupData[{
Cell[647344, 16338, 286, 6, 70, "Input",ExpressionUUID->"74f6aa12-43aa-4d89-ac9b-2963af0249f2",
 InitializationCell->True],
Cell[647633, 16346, 273, 4, 70, "Output",ExpressionUUID->"89e4a5d0-64b9-41b9-a64e-393ed1e76280"]
}, Open  ]],
Cell[647921, 16353, 265, 6, 21, "Text",ExpressionUUID->"7a29cfad-ff5d-460e-bd7e-e615fd35fa23"],
Cell[CellGroupData[{
Cell[648211, 16363, 211, 5, 31, "Input",ExpressionUUID->"f151852b-c440-4d9c-b442-39d6d2350e2c",
 InitializationCell->True],
Cell[648425, 16370, 2070, 30, 89, "Output",ExpressionUUID->"5050abf3-3a1c-4de4-a689-4796a80e5275"]
}, Open  ]],
Cell[650510, 16403, 367, 8, 36, "Text",ExpressionUUID->"2a8d98f9-e97b-4506-a154-03543fe00c65"],
Cell[CellGroupData[{
Cell[650902, 16415, 200, 5, 31, "Input",ExpressionUUID->"9a00e0eb-13fc-4da2-af19-faab699d1f23"],
Cell[651105, 16422, 296, 10, 42, "Output",ExpressionUUID->"4992bf33-5585-4afd-8f70-02ed9b07ceac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[651438, 16437, 199, 5, 31, "Input",ExpressionUUID->"46b45f86-0bc8-45f9-bb6c-895d446443a4"],
Cell[651640, 16444, 294, 10, 42, "Output",ExpressionUUID->"98d0925c-ad93-4f4f-a741-d56bd50b409c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[651971, 16459, 258, 7, 31, "Input",ExpressionUUID->"2797ae19-8b85-4bb6-8338-920753913e37"],
Cell[652232, 16468, 156, 3, 31, "Output",ExpressionUUID->"b44bbc23-a4c5-4530-a4be-78b2aa57c389"]
}, Open  ]],
Cell[652403, 16474, 536, 12, 36, "Text",ExpressionUUID->"4b8c9c7e-5bbb-4cc1-ae57-753622758265"],
Cell[CellGroupData[{
Cell[652964, 16490, 186, 4, 31, "Input",ExpressionUUID->"875ed14f-cfd0-4651-b883-8a995d90f40c"],
Cell[653153, 16496, 2196, 65, 70, "Output",ExpressionUUID->"68d7539a-5b32-40d9-a53b-da0c15e93a23"]
}, Open  ]],
Cell[655364, 16564, 373, 7, 36, "Text",ExpressionUUID->"faad8d78-ce39-4bca-a0a9-abe3e19d5fac"],
Cell[CellGroupData[{
Cell[655762, 16575, 187, 4, 31, "Input",ExpressionUUID->"5a530d28-b0db-4349-862d-03179b27d014"],
Cell[655952, 16581, 154, 3, 31, "Output",ExpressionUUID->"f3328044-f021-45dc-8a9f-01a3470b6880"]
}, Open  ]],
Cell[CellGroupData[{
Cell[656143, 16589, 431, 13, 31, "Input",ExpressionUUID->"1e0d7983-7d5c-4035-93e9-ddda99a7bbb8",
 InitializationCell->True],
Cell[656577, 16604, 2943, 95, 191, "Output",ExpressionUUID->"e5a5d26e-3791-4dfc-95b2-254a475ece6b"]
}, Open  ]],
Cell[659535, 16702, 169, 4, 24, "Text",ExpressionUUID->"113665e4-b1e4-4cc9-8f90-9569e6bfc3cf"],
Cell[CellGroupData[{
Cell[659729, 16710, 404, 10, 31, "Input",ExpressionUUID->"540eda25-39f9-4026-8708-057fdf29131b",
 InitializationCell->True],
Cell[660136, 16722, 36689, 736, 585, "Output",ExpressionUUID->"dbd9fa98-a978-48cc-98db-14a93776ffe1"]
}, Open  ]],
Cell[696840, 17461, 178, 3, 20, "Text",ExpressionUUID->"175157f1-8d03-4669-95de-eab57ed5165b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[697055, 17469, 138, 2, 32, "Subsection",ExpressionUUID->"866a7da5-284a-40f3-a0d6-d4e9941012c6",
 CellTags->"SolutionsCE8"],
Cell[697196, 17473, 296, 7, 42, "Problem",ExpressionUUID->"7d551eee-1f0c-41f8-8d77-2c0b50ea5227"],
Cell[697495, 17482, 662, 11, 69, "Text",ExpressionUUID->"f363ba92-8cda-4bb5-9a0c-ce449c8b5a6f"],
Cell[698160, 17495, 557, 8, 65, "Text",ExpressionUUID->"013d6c2a-0c81-4683-97d8-84c08366a23c"],
Cell[CellGroupData[{
Cell[698742, 17507, 627, 17, 51, "Input",ExpressionUUID->"75fe6072-3a36-44ca-842f-9382e1d79dd1",
 InitializationCell->True],
Cell[699372, 17526, 798, 23, 92, "Output",ExpressionUUID->"f00cdbf4-8e9d-4768-81b5-dace48e74e3d"]
}, Open  ]],
Cell[700185, 17552, 353, 6, 39, "Text",ExpressionUUID->"fe155f95-bd5d-4461-afd4-9e54901ea916"],
Cell[CellGroupData[{
Cell[700563, 17562, 246, 5, 20, "Item1Numbered",ExpressionUUID->"76e213d4-b6ab-4d7e-a146-bbed60d86693"],
Cell[700812, 17569, 425, 12, 37, "Item1Numbered",ExpressionUUID->"b191f2e1-be6d-4b53-aeed-52793c327808"],
Cell[701240, 17583, 1134, 24, 89, "Item1Numbered",ExpressionUUID->"6514ce6c-5ed0-4e62-8068-9e027291ea25"],
Cell[702377, 17609, 880, 23, 71, "Item1Numbered",ExpressionUUID->"9b6fa2ab-7fdd-4005-9584-1c5d4c593c13"],
Cell[703260, 17634, 329, 6, 33, "Item1Numbered",ExpressionUUID->"f105d298-02ba-4142-9934-9c49452c6e88"],
Cell[703592, 17642, 578, 12, 46, "Item1Numbered",ExpressionUUID->"972d3c2e-5ff9-4f57-a50b-ff10118d40e1"],
Cell[704173, 17656, 360, 6, 33, "Item1Numbered",ExpressionUUID->"dbf08eea-fc48-4249-b11d-fe28ce63178f"],
Cell[704536, 17664, 438, 7, 46, "Item1Numbered",ExpressionUUID->"9288c64f-4d8c-4d65-b0af-e21d8b61fd46"],
Cell[704977, 17673, 459, 8, 46, "Item1Numbered",ExpressionUUID->"95f2fcba-1ad9-4354-892c-58c0585daadd"],
Cell[705439, 17683, 150, 2, 16, "Item1Numbered",ExpressionUUID->"77075e96-2ca3-4cee-b0f2-29eafd4e8f23"]
}, Open  ]],
Cell[705604, 17688, 92, 0, 20, "Text",ExpressionUUID->"665eefef-3a91-4052-80ce-5045fbddc4b1"],
Cell[705699, 17690, 11237, 256, 849, "Input",ExpressionUUID->"c187718a-95d9-4306-95d0-19c69c810ab7",
 InitializationCell->True],
Cell[716939, 17948, 121, 0, 20, "Text",ExpressionUUID->"ff43b5d9-38be-48dd-a819-6ce2bb9d2d9a"],
Cell[CellGroupData[{
Cell[717085, 17952, 324, 9, 51, "Input",ExpressionUUID->"9f2d0824-edd0-4b0a-8bed-98bcb9ad985d",
 InitializationCell->True],
Cell[717412, 17963, 2215, 62, 81, "Output",ExpressionUUID->"10bda5cf-484e-4e21-b1f6-5548bf059551"]
}, Open  ]],
Cell[CellGroupData[{
Cell[719664, 18030, 374, 11, 51, "Input",ExpressionUUID->"06508b77-4aee-4d54-abe6-dec55c26ec16",
 InitializationCell->True],
Cell[720041, 18043, 2215, 62, 81, "Output",ExpressionUUID->"b1923299-27a9-467f-848e-cb0342a48784"]
}, Open  ]],
Cell[CellGroupData[{
Cell[722293, 18110, 374, 11, 51, "Input",ExpressionUUID->"1586b4aa-b983-4965-b1c5-0d75ab89684d",
 InitializationCell->True],
Cell[722670, 18123, 2239, 63, 81, "Output",ExpressionUUID->"816a65cc-697e-406c-8fe4-070d396648aa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[724946, 18191, 374, 11, 51, "Input",ExpressionUUID->"e1424e8a-47ea-4f8c-8a61-45d5d612f83f",
 InitializationCell->True],
Cell[725323, 18204, 1584, 45, 81, "Output",ExpressionUUID->"fd0bedcd-0be6-4d26-a73c-31ff6284dc05"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[726968, 18256, 107, 1, 55, "Section",ExpressionUUID->"e399b6bc-1ebf-4882-9370-2d8d329f2d64",
 CellTags->"Exercises"],
Cell[CellGroupData[{
Cell[727100, 18261, 328, 5, 33, "Item1Exercise",ExpressionUUID->"09c5236f-4412-439b-8af5-4c5945cf229e"],
Cell[727431, 18268, 262, 4, 33, "Item1Exercise",ExpressionUUID->"1f62fba9-eed6-4ba5-a152-1b776c55d2ac"],
Cell[727696, 18274, 199, 3, 20, "Item1Exercise",ExpressionUUID->"3a280708-d5ee-4572-964b-9cd2b4cc1d7b"],
Cell[727898, 18279, 163, 2, 20, "Item1Exercise",ExpressionUUID->"89ec93ae-79f3-4c3d-897b-1d69cd26d779"],
Cell[CellGroupData[{
Cell[728086, 18285, 497, 10, 46, "Item2Exercise",ExpressionUUID->"4a79be44-258c-47b4-ad2b-45dfb790b236"],
Cell[728586, 18297, 726, 18, 49, "Item2Exercise",ExpressionUUID->"7b770241-d947-4bbd-95d8-88e9d387a786"],
Cell[729315, 18317, 307, 6, 16, "Item2Exercise",ExpressionUUID->"785a77c2-b7e2-4c08-96d2-6ac87129135a"],
Cell[729625, 18325, 974, 26, 63, "Item2Exercise",ExpressionUUID->"e44f367c-5182-40a5-9e37-12b21f23c00c"]
}, Open  ]],
Cell[730614, 18354, 409, 6, 50, "Item1Exercise",ExpressionUUID->"7efe0fe9-0dc1-410c-bca1-99d2d91f8b16"],
Cell[731026, 18362, 826, 16, 85, "Item1Exercise",ExpressionUUID->"0fd5916d-5091-47ca-b829-552328216902"],
Cell[731855, 18380, 749, 18, 51, "Item1Exercise",ExpressionUUID->"960b84f9-2d40-4b80-af75-d51ea1f3f7a5"],
Cell[732607, 18400, 350, 8, 41, "Item1Exercise",ExpressionUUID->"92fc15ee-9035-44c8-b318-d67cdbc4da56"],
Cell[732960, 18410, 306, 4, 33, "Item1Exercise",ExpressionUUID->"b49f13de-224c-4fa4-a958-d16c306dda21"],
Cell[733269, 18416, 489, 12, 38, "Item1Exercise",ExpressionUUID->"86d47247-b8d4-4599-bea2-a6fd111d86d3"],
Cell[733761, 18430, 468, 14, 20, "ExerciseContinuation",ExpressionUUID->"a017fd4f-4c60-4b58-b55c-fcf01743cce3"],
Cell[734232, 18446, 537, 13, 42, "ExerciseContinuation",ExpressionUUID->"896f8071-44c8-4f17-a561-c925f09ba192"],
Cell[734772, 18461, 409, 6, 46, "Item1Exercise",ExpressionUUID->"2c45404e-5789-4c00-82fb-7ad315344d05"],
Cell[735184, 18469, 412, 12, 33, "Item1Exercise",ExpressionUUID->"9635f9fb-de1e-4c09-8c34-932b60a60fd9"],
Cell[735599, 18483, 346, 7, 33, "Item1Exercise",ExpressionUUID->"ed927cc9-5b1d-44cc-8a79-02e9453736b7"],
Cell[735948, 18492, 202, 3, 20, "Item1Exercise",ExpressionUUID->"6c5b6b1a-7ffc-4e74-8f56-d668f6974b4d"],
Cell[736153, 18497, 171, 3, 20, "Item1Exercise",ExpressionUUID->"ad68701d-fb78-4526-b351-3c149071665e"],
Cell[736327, 18502, 354, 7, 33, "Item1Exercise",ExpressionUUID->"6cf5984e-0db9-40ff-bdb7-f3a9b5c21e85"],
Cell[736684, 18511, 205, 4, 24, "Item1Exercise",ExpressionUUID->"b4584e69-3bb1-4866-8268-943915b0204a"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

