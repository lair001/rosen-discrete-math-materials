(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    776999,      20794]
NotebookOptionsPosition[    600955,      17906]
NotebookOutlinePosition[    627171,      18428]
CellTagsIndexPosition[    625944,      18388]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["\<\
Basic Structures: Sets, Functions, Sequences, Sums, and Matrices\
\>", "BookChapterTitle",
 CounterAssignments->{{
   "ChapterNumber", 
    2}},ExpressionUUID->"90d9b518-d271-4793-8910-be5a4de5c3ce"],

Cell[CellGroupData[{

Cell["Introduction", "Section",ExpressionUUID->"7c514063-e696-49d8-af87-6ea63c952e08"],

Cell["\<\
Chapter 2 of the textbook covers mathematical objects fundamental to the \
study of discrete mathematics. We will see how the Wolfram Language \
represents these objects.\
\>", "Text",ExpressionUUID->"e3197cad-9bac-48a1-b051-907c1bd501d4"],

Cell[TextData[{
 "In Sections 1 and 2, we will see that the Wolfram \
Language\[CloseCurlyQuote]s implementation of a list can be used to model the \
mathematical concept of set. We will also see how to extend ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s capabilities to include fuzzy sets. In Section 3, we \
will consider different ways in which the concept of function can be \
represented in the Wolfram Language and how these approaches can be used in \
different circumstances. Section 4 will look at how to use lists to model \
finite sequences, how to represent recurrence relations, and how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can be used to compute both finite and symbolic summations. In Section 5, \
we will use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to list positive rational numbers in a way that demonstrates the fact that \
the rationals are enumerable. In Section 6, we will see how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can be used to study matrices."
}], "Text",ExpressionUUID->"784e4a37-6dd8-4211-9560-0267298c57f2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.1 Sets", "Section",
 CellTags->"Section1",ExpressionUUID->"27354a6b-880a-4906-8cdb-c65372b7bd14"],

Cell[TextData[{
 "Sets are fundamental to the description of almost all of the discrete \
objects that we will study. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " provides support for both their representation and manipulation."
}], "Text",ExpressionUUID->"3f33bab5-8d38-4996-a0ec-f78642cf728b"],

Cell[CellGroupData[{

Cell["Set Basics", "Subsection",
 CellTags->"Section1a",ExpressionUUID->"6e99df8d-7219-4939-9b6e-d6427dcad09f"],

Cell["\<\
In the Wolfram Language, sets are modeled as lists. Note that the syntax for \
a list matches the standard syntax for a mathematical set: a list of the \
elements of the set separated by commas and enclosed in braces. The elements \
can be any object. Typical examples are shown below.\
\>", "Text",ExpressionUUID->"ecec6408-77d9-4f31-93dd-d478224ebbfb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"86788e61-18fb-430a-8b3f-1069820da7f6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Output",
 CellLabel->"Out[1]=",ExpressionUUID->"e96f7a65-21f7-4816-aef5-6592f470dd85"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}]], "Input",
 CellLabel->"In[2]:=",ExpressionUUID->"bc5ba819-2f0d-43d4-9d3e-eee105db4ece"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}]], "Output",\

 CellLabel->"Out[2]=",ExpressionUUID->"e5a2f24b-0875-4bc5-aa2e-a2b6e8cab9e9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}]}], "}"}]], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"b1b3c3ef-43df-4b39-b6a1-09f8caa0da1c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[3]=",ExpressionUUID->"355da334-4a42-4321-bf8c-096639f2277c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", "}"}]], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"bdebdb56-7c1a-4fb7-a76d-eddbc9fa4e6a"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellLabel->"Out[4]=",ExpressionUUID->"71354446-7aba-4553-996b-35795463e6f4"]
}, Open  ]],

Cell["\<\
In the first two examples above, the lists contain the numbers 1, 2, and 3, \
and the characters a, b, and c, respectively (note that the quotation marks \
distinguish them as strings and not symbols). In the third example, the \
elements of the list are themselves lists. The fourth example is the empty \
list. \
\>", "Text",ExpressionUUID->"200a35c6-cec9-4b0b-ab7c-f93ba7a5f1dc"],

Cell[TextData[{
 "Note, however, that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " does not treat these list objects as sets, that is, it does not \
automatically respect the mathematical properties of sets. In particular, \
repetition and order make lists distinct, unlike mathematical sets. For \
example, consider the lists defined below."
}], "Text",ExpressionUUID->"8d37ea9c-96ec-43aa-895d-f0ccae9e26b2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"set1", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "1", ",", "2"}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[5]:=",ExpressionUUID->"03b91400-441d-4978-8184-210cd1880db9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "1", ",", "2"}], "}"}]], "Output",
 CellLabel->"Out[5]=",ExpressionUUID->"8bc94f0b-86e6-46e3-b27c-13eed9e850c0"]
}, Open  ]],

Cell[TextData[{
 "Observe that when ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " echoes the list, it preserves the duplicate entries."
}], "Text",ExpressionUUID->"2f00e2ae-738b-4d71-b28d-5f237222f0ac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"set2", "=", 
  RowBox[{"{", 
   RowBox[{"2", ",", "3", ",", "1"}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[6]:=",ExpressionUUID->"5b89d78a-903b-4096-be50-b0da250b1f2f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "1"}], "}"}]], "Output",
 CellLabel->"Out[6]=",ExpressionUUID->"7365eb64-3148-4312-822a-8dfd424f7dd0"]
}, Open  ]],

Cell["\<\
In addition, note that the order in which elements are entered is preserved.\
\>", "Text",ExpressionUUID->"ac4914ed-22b8-4d8a-a361-91304312dc82"],

Cell[TextData[{
 "To test whether two lists are the same, use the ",
 StyleBox[ButtonBox["Equal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equal"], "FunctionLink"],
 " (",
 StyleBox["==", "Code"],
 ") relation. Below, you see that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " considers the lists ",
 StyleBox["set1", "Code"],
 " and ",
 StyleBox["set2", "Code"],
 " different from each other and different from ",
 StyleBox["{1,2,3}", "Code"],
 ", despite the fact that, as sets, they are all identical."
}], "Text",ExpressionUUID->"dcf3fafd-b6a9-4627-850b-f09dec3bea73"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"set1", "==", "set2"}]], "Input",
 CellLabel->"In[7]:=",ExpressionUUID->"1d7d055c-5025-4c76-af1a-63323e1d185d"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[7]=",ExpressionUUID->"25507b6a-07d9-440e-afb5-2c436e858a28"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"set1", "==", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}]}]], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"c2496b4d-b06f-418b-9285-1210bac7c2de"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[8]=",ExpressionUUID->"23783e31-950d-41d4-ab08-0418e88ef2b1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"set2", "==", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}]}]], "Input",
 CellLabel->"In[9]:=",ExpressionUUID->"8659ab0e-473c-43a8-bfee-a84b60d79b12"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[9]=",ExpressionUUID->"8fe951f7-f3bd-40a0-a588-750bb54da026"]
}, Open  ]],

Cell[TextData[{
 "In order to get ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to recognize that ",
 StyleBox["set1", "Code"],
 " and ",
 StyleBox["set2", "Code"],
 " are equal as sets, you must force ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to represent them in a canonical fashion. This is achieved with the ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " function. We will see below how to use ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " to find the union of two or more sets. When applied to a single list, ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " returns the list obtained by sorting the elements and removing \
duplicates."
}], "Text",ExpressionUUID->"59563b9a-bf2c-4a3d-a29b-ad4cf4f9f5af"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Union", "[", 
  RowBox[{"{", 
   RowBox[{"4", ",", "2", ",", "1", ",", "1", ",", "3", ",", "2", ",", "4"}], 
   "}"}], "]"}]], "Input",
 CellLabel->"In[10]:=",ExpressionUUID->"e15d0644-f6c2-4e31-9d35-4cbe0e7e60d0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]], "Output",
 CellLabel->"Out[10]=",ExpressionUUID->"7f72e311-2911-4287-9b67-bb58664014dd"]
}, Open  ]],

Cell[TextData[{
 "Because ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " puts the elements of a list in a canonical order, the results of applying ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " to two different lists that represent the same mathematical set will be \
the same."
}], "Text",ExpressionUUID->"f53b0e33-3baa-43d3-b140-565e4e40edce"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Union", "[", "set1", "]"}], "==", 
  RowBox[{"Union", "[", "set2", "]"}]}]], "Input",
 CellLabel->"In[11]:=",ExpressionUUID->"bc9b8bbd-c85e-4a72-8cb2-749935209505"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[11]=",ExpressionUUID->"acd74f30-3492-441f-8a65-ef07edcd869c"]
}, Open  ]],

Cell[TextData[{
 "It is a good idea, when doing work involving sets, to apply the ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " function as part of the definition of the set.",
 " "
}], "Text",ExpressionUUID->"0d39883a-23e4-41b4-b24b-9bdec43904e9"],

Cell[CellGroupData[{

Cell["Parts of Sets", "Subsubsection",ExpressionUUID->"8124b0a7-3909-4397-856e-a1cb5ea0a1d2"],

Cell[TextData[{
 "Because the Wolfram Language uses lists to represent sets, you can use the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " operator to access individual elements and to select subsets based on \
their index. To obtain, for example, the fourth element, enclose 4 in double \
brackets."
}], "Text",
 PageBreakAbove->False,
 PageBreakWithin->
  False,ExpressionUUID->"76180fbf-5332-43ef-b115-4da2edc27f69"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"set3", "=", 
  RowBox[{"Union", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\"", ",", 
     "\"\<e\>\"", ",", "\"\<f\>\""}], "}"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[12]:=",ExpressionUUID->"4bc9d849-e778-487d-a551-eddf16a2ed80"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"e\"\>", ",", "\<\"f\"\>"}], "}"}]], "Output",
 CellLabel->"Out[12]=",ExpressionUUID->"64b0ba41-007e-4134-8acf-12e93434532d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"set3", "[", 
  RowBox[{"[", "4", "]"}], "]"}]], "Input",
 CellLabel->"In[13]:=",ExpressionUUID->"c832ae8a-dcd3-44ee-bc79-2c1f3f66bbe2"],

Cell[BoxData["\<\"d\"\>"], "Output",
 CellLabel->"Out[13]=",ExpressionUUID->"b7a1de84-2de7-46cb-a032-784588a4d0a6"]
}, Open  ]],

Cell["\<\
Negative values count from the right, so the second to last element (in the \
canonical order) is accessed as follows.\
\>", "Text",ExpressionUUID->"2cfd7fe3-1980-4675-a280-ff91a3d0b1bf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"set3", "[", 
  RowBox[{"[", 
   RowBox[{"-", "2"}], "]"}], "]"}]], "Input",
 CellLabel->"In[14]:=",ExpressionUUID->"5122258e-8a8e-42c8-9a51-42f1c635483e"],

Cell[BoxData["\<\"e\"\>"], "Output",
 CellLabel->"Out[14]=",ExpressionUUID->"be1ffc23-2eac-4376-b628-b392fa45e3f7"]
}, Open  ]],

Cell["\<\
By putting a list of indices within the double brackets, you can obtain any \
subset you wish. Note that the list must be contained in braces within the \
double brackets.\
\>", "Text",ExpressionUUID->"abd24fcd-4632-4a36-b620-c55fda412cd5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"set3", "[", 
  RowBox[{"[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4"}], "}"}], "]"}], "]"}]], "Input",
 CellLabel->"In[15]:=",ExpressionUUID->"e525ce1c-c040-4987-88a6-7e9aae279802"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>"}], "}"}]], "Output",\

 CellLabel->"Out[15]=",ExpressionUUID->"bb67f645-f70c-4466-a66a-f0211c0194ee"]
}, Open  ]],

Cell[TextData[{
 "Finally, you can obtain a range of elements using the ",
 StyleBox[ButtonBox["Span",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Span"], "FunctionLink"],
 " (",
 StyleBox[";;", "Code"],
 ") operator. For example, to obtain the second through fifth element, enter \
the following."
}], "Text",ExpressionUUID->"9c3e642c-cdef-481d-9606-7f9e82226257"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"set3", "[", 
  RowBox[{"[", 
   RowBox[{"2", ";;", "5"}], "]"}], "]"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"ef115e99-df16-4126-b02e-20b5a93d542f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", ",", "\<\"e\"\>"}],
   "}"}]], "Output",
 CellLabel->"Out[16]=",ExpressionUUID->"494a71ac-8c99-4cbf-a45b-7bf5bb7f3307"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generating Sets", "Subsubsection",ExpressionUUID->"0fb7590c-b3b0-4414-be10-e8e120739630"],

Cell[TextData[{
 "The Wolfram Language contains many functions that can be used to generate \
sets (lists). Two of these are ",
 StyleBox[ButtonBox["Range",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Range"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 ". ",
 StyleBox[ButtonBox["Range",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Range"], "FunctionLink"],
 " is the simpler function and we describe it first."
}], "Text",ExpressionUUID->"cfbb4663-dd18-46d3-8eee-9f3f0b05340c"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Range",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Range"], "FunctionLink"],
 " function is used to generate lists consisting of simple sequences of \
numbers. It has three basic forms. The first form of ",
 StyleBox[ButtonBox["Range",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Range"], "FunctionLink"],
 " is with one argument. ",
 "In this case, it produces the list of integers from 1 through the given \
value."
}], "Text",ExpressionUUID->"7b2f1b20-1e27-4b9f-a59c-530debb727b7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", "8", "]"}]], "Input",
 CellLabel->"In[17]:=",ExpressionUUID->"933a30f8-a0e8-4487-ad3f-76a21ceb983f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8"}],
   "}"}]], "Output",
 CellLabel->"Out[17]=",ExpressionUUID->"7584856a-5d88-41ac-b6a6-da0852f951b5"]
}, Open  ]],

Cell[TextData[{
 "The second form of ",
 StyleBox[ButtonBox["Range",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Range"], "FunctionLink"],
 " is with two arguments.",
 " ",
 "In this case, it produces the list of values with the first argument as the \
starting value and the second argument as the maximum."
}], "Text",ExpressionUUID->"c4048639-5b89-4522-98f9-426be289a582"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", 
  RowBox[{
   RowBox[{"-", "3"}], ",", "5"}], "]"}]], "Input",
 CellLabel->"In[18]:=",ExpressionUUID->"f2d14cc7-4e10-4459-8d41-3ff57e4bd1ac"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "1"}], ",", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", 
   "5"}], "}"}]], "Output",
 CellLabel->"Out[18]=",ExpressionUUID->"4e5eaeea-c8ce-45d5-b44b-b1c08c05f3b2"]
}, Open  ]],

Cell["\<\
The third form takes three arguments. Again, the first argument is the \
starting value and the second is the maximum. The third argument specifies \
the \[OpenCurlyDoubleQuote]step,\[CloseCurlyDoubleQuote] that is, the \
difference between successive values in the list. For example, the following \
produces every third integer beginning with 2 up to 25.\
\>", "Text",ExpressionUUID->"a9852e8f-9c4c-436c-a928-f826724bd75c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", 
  RowBox[{"2", ",", "25", ",", "3"}], "]"}]], "Input",
 CellLabel->"In[19]:=",ExpressionUUID->"d4558912-7cbe-400f-9c2d-7b46ff844bcc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "5", ",", "8", ",", "11", ",", "14", ",", "17", ",", "20", ",", 
   "23"}], "}"}]], "Output",
 CellLabel->"Out[19]=",ExpressionUUID->"66e127a0-f174-4335-9f2d-2b46185b0ff1"]
}, Open  ]],

Cell["\<\
Note that the maximum does not need to be a member of the list. Also note \
that the values given do not need to be integers. The command below produces \
the numbers beginning at 0.25 and increasing by 0.41 up until at most 7.\
\>", "Text",ExpressionUUID->"aaea1032-6792-4db5-8b45-263d18a4d9b0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", 
  RowBox[{"0.25", ",", "7", ",", "0.41"}], "]"}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"b13bc27f-6c84-40a8-8825-5c2285acc8b0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.25`", ",", "0.6599999999999999`", ",", "1.0699999999999998`", ",", 
   "1.48`", ",", "1.89`", ",", "2.3`", ",", "2.71`", ",", 
   "3.1199999999999997`", ",", "3.53`", ",", "3.94`", ",", "4.35`", ",", 
   "4.76`", ",", "5.17`", ",", "5.58`", ",", "5.989999999999999`", ",", 
   "6.3999999999999995`", ",", "6.81`"}], "}"}]], "Output",
 CellLabel->"Out[20]=",ExpressionUUID->"5beaf470-b191-45b2-95a4-a560059e352f"]
}, Open  ]],

Cell[TextData[{
 "The second function, ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 ", gives you even more control over forming lists. Generally, ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " requires two arguments. The first argument is an expression, often \
involving a symbol called the table index or table variable, that specifies \
the elements of the list being created. The second argument is a list \
defining the values that are to be substituted for the table variable in \
order to produce the list. There are five distinct forms for this second \
argument."
}], "Text",ExpressionUUID->"5d0ef640-e820-436f-8f2c-580eb6a73cc8"],

Cell[TextData[{
 "The simplest form of ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " has no variable used in the first argument, and the second argument is a \
positive integer. This results in a list consisting of that many copies of \
the first argument. For example, to produce a list of seven fives, enter the \
following."
}], "Text",ExpressionUUID->"c9557c19-75cc-48e6-84a0-a7bcf5ec977b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"5", ",", "7"}], "]"}]], "Input",
 CellLabel->"In[21]:=",ExpressionUUID->"eb88a71c-7684-4580-a9d5-29d1052dd779"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "5", ",", "5", ",", "5", ",", "5", ",", "5", ",", "5"}], 
  "}"}]], "Output",
 CellLabel->"Out[21]=",ExpressionUUID->"4f8e4457-d4fa-4f16-9ec3-5dada77ad9e5"]
}, Open  ]],

Cell[TextData[{
 "The other forms all use a table index. For these examples, we will use the \
variable ",
 StyleBox["i", "Code"],
 ", and the expression that we give as the first argument will be ",
 Cell[BoxData[
  RowBox[{"i", "^", "2"}]], "myCode",ExpressionUUID->
  "c8eafa87-641d-42d3-8082-58879d5acd9c"],
 ". This will produce lists whose elements are the squares of the values \
substituted for ",
 StyleBox["i", "Code"],
 ". The second argument to ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 ", when using a variable, is always a list whose first element is the name \
of the variable, as in ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    StyleBox["var", "CodeVar"], ",", "..."}], "}"}]], "myCode",
  ExpressionUUID->"5f2b1305-e7fc-4fe7-a339-e5ac699a1a42"],
 "."
}], "Text",ExpressionUUID->"618214b9-373f-4482-a70d-365c2da83ab3"],

Cell[TextData[{
 "If you evaluate ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " with the second argument consisting of the variable and a positive \
integer, the result will be to substitute the integers 1 though the given \
integer for the variable. The following produces the squares of the integers \
1 through 9. "
}], "Text",ExpressionUUID->"3fb78d3c-7b65-4ce7-ae9a-8029d379a007"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"i", "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "9"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[22]:=",ExpressionUUID->"5cfb7188-630b-4991-8a09-f695aaed7cd1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "9", ",", "16", ",", "25", ",", "36", ",", "49", ",", 
   "64", ",", "81"}], "}"}]], "Output",
 CellLabel->"Out[22]=",ExpressionUUID->"5894cb04-f674-48bf-9b32-72d4c42ba058"]
}, Open  ]],

Cell["\<\
In the next form, the second argument is the list consisting of the name of \
the variable and two numbers, a minimum and a maximum. The following produces \
the list of squares of the integers from 5 to 12.\
\>", "Text",ExpressionUUID->"635e2722-1722-426c-bce1-f0d0b771ee87"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"i", "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "5", ",", "12"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[23]:=",ExpressionUUID->"ac951075-0f01-4368-a11e-58f4bce181f2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "25", ",", "36", ",", "49", ",", "64", ",", "81", ",", "100", ",", "121", 
   ",", "144"}], "}"}]], "Output",
 CellLabel->"Out[23]=",ExpressionUUID->"f2bb9c13-1e2e-46d8-8b5b-13ac81efb340"]
}, Open  ]],

Cell[TextData[{
 "You can also include a \[OpenCurlyDoubleQuote]step\[CloseCurlyDoubleQuote] \
by adding yet another number to the second argument. The following shows the \
squares of every other integer beginning at ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["4", "2"], TraditionalForm]],ExpressionUUID->
  "74438699-798f-439f-8f4c-32ac2903e8c3"],
 " and ending at ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["20", "2"], TraditionalForm]],ExpressionUUID->
  "074b4239-63fa-4869-8ab8-f4b76e4f2d28"],
 "."
}], "Text",ExpressionUUID->"e9e61da8-cc9a-4ec2-a1cf-c031eb61f05e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"i", "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "4", ",", "20", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[24]:=",ExpressionUUID->"23d36106-9e00-47e1-b1e7-a7089ab0af95"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "16", ",", "36", ",", "64", ",", "100", ",", "144", ",", "196", ",", "256", 
   ",", "324", ",", "400"}], "}"}]], "Output",
 CellLabel->"Out[24]=",ExpressionUUID->"fa9d0888-6792-4bf9-aeb1-65a69156bf34"]
}, Open  ]],

Cell[TextData[{
 "In the final form of the second argument, you are able to specify an \
explicit list of values to substitute for the variable. You do this using the \
syntax ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    StyleBox["var", "CodeVar"], ",", 
    RowBox[{"{", 
     StyleBox["values", "CodeVar"], "}"}]}], "}"}]], "myCode",ExpressionUUID->
  "aefb05e4-d9e2-40b3-a4cf-b54323797d96"],
 ". That is, the second argument to ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " is a list consisting of two elements: first the name of the variable, and \
second the list of values enclosed in braces. The following computes the \
squares of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", ",", "3", ",", "5", ",", "7", ",", "11", ",", " ", 
    RowBox[{"and", " ", "13"}]}], TraditionalForm]],ExpressionUUID->
  "f55afaef-d32a-4b7b-b12b-1cdcb7ffd14d"],
 "."
}], "Text",ExpressionUUID->"821498bf-005c-4c64-93a3-9facaebae7a5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"i", "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "5", ",", "7", ",", "11", ",", "13"}], 
      "}"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[25]:=",ExpressionUUID->"0c779760-cfca-4911-8132-fa52d967eed8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "9", ",", "25", ",", "49", ",", "121", ",", "169"}], 
  "}"}]], "Output",
 CellLabel->"Out[25]=",ExpressionUUID->"1c47f132-9fec-4a70-a1e5-0350187b31bb"]
}, Open  ]],

Cell[TextData[{
 "We summarize the allowed forms of the second argument to ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " in the table below."
}], "Text",ExpressionUUID->"364e5c72-fcf4-4f9b-8543-a6a1a77821cf"],

Cell[TextData[Cell[BoxData[GridBox[{
   {Cell[BoxData[
     StyleBox["count", "CodeVar"]], "myCode",ExpressionUUID->
     "17bcc1b0-e341-442c-8d88-773406b3f858"], 
    RowBox[{"repeat", " ", 
     StyleBox["count", "CodeVar"], " ", "times"}]},
   {Cell[BoxData[
     RowBox[{"{", 
      StyleBox["i", "CodeVar"], ",", 
      StyleBox[
       SubscriptBox["i", "max"], "CodeVar"], "}"}]], "myCode",ExpressionUUID->
     "24aebc96-85d4-43d6-9cb5-b9a2c8cbaa8a"], 
    RowBox[{
     StyleBox["i", "CodeVar"], " ", "ranges", " ", "from", " ", "1", " ", 
     "to", " ", 
     StyleBox[
      SubscriptBox["i", "max"], "CodeVar"]}]},
   {Cell[BoxData[
     RowBox[{"{", 
      StyleBox["i", "CodeVar"], ",", 
      StyleBox[
       SubscriptBox["i", "min"], "CodeVar"], ",", 
      StyleBox[
       SubscriptBox["i", "max"], "CodeVar"], "}"}]], "myCode",ExpressionUUID->
     "5e12050f-368c-4c92-911b-a4339ba7d56b"], 
    RowBox[{
     StyleBox["i", "CodeVar"], " ", "ranges", " ", "from", " ", 
     StyleBox[
      SubscriptBox["i", "min"], "CodeVar"], " ", "to", " ", 
     StyleBox[
      SubscriptBox["i", "max"], "CodeVar"]}]},
   {Cell[BoxData[
     RowBox[{"{", 
      StyleBox["i", "CodeVar"], ",", 
      StyleBox[
       SubscriptBox["i", "min"], "CodeVar"], ",", 
      StyleBox[
       SubscriptBox["i", "max"], "CodeVar"], ",", 
      StyleBox["step", "CodeVar"], "}"}]], "myCode",ExpressionUUID->
     "42111de7-a279-42cd-84a8-56d028a5bf7a"], 
    RowBox[{
     StyleBox["i", "CodeVar"], " ", "ranges", " ", "from", " ", 
     StyleBox[
      SubscriptBox["i", "min"], "CodeVar"], " ", "to", " ", 
     StyleBox[
      SubscriptBox["i", "max"], "CodeVar"], " ", "by", " ", 
     StyleBox["step", "CodeVar"]}]},
   {Cell[BoxData[
     RowBox[{"{", 
      StyleBox["i", "CodeVar"], ",", 
      StyleBox["list", "CodeVar"], "}"}]], "myCode",ExpressionUUID->
     "aacc32bf-1c8e-461e-98b5-b086103bbe30"], 
    RowBox[{
     StyleBox["i", "CodeVar"], " ", "ranges", " ", "over", " ", "elements", 
     " ", "of", " ", 
     StyleBox["list", "CodeVar"]}]}
  },
  GridBoxDividers->{
   "Columns" -> {{True}}, "ColumnsIndexed" -> {}, "Rows" -> {{True}}, 
    "RowsIndexed" -> {}}]],
 FontFamily->
  "Times",ExpressionUUID->"0d15bc88-8a9d-4e44-9503-e8aa4e1a94a6"]], "Text",
 TextAlignment->Center,ExpressionUUID->"1fb8bf5e-e689-4d27-b44f-2d753d6c9d21"],

Cell[TextData[{
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " can also be used with more than one variable in the expression. To do \
this, you simply provide an additional argument specifying each table \
variable. The ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " function ensures that all combinations of values are included. For \
example, if ",
 StyleBox["f", "Code"],
 " were a function of two values, the following would evaluate the function \
with the first value ranging from 3 to 9 and the second taking the values 0, \
1, and 5."
}], "Text",ExpressionUUID->"df218b1c-e7db-4e69-8d04-37783273456b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tableExample", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"f", "[", 
     RowBox[{"i", ",", "j"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "3", ",", "9"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "5"}], "}"}]}], "}"}]}], "]"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->"In[26]:=",ExpressionUUID->"ecd656a3-68db-408d-b5fc-45c24503afc4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"3", ",", "0"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"3", ",", "1"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"3", ",", "5"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"4", ",", "0"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"4", ",", "1"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"4", ",", "5"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"5", ",", "0"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"5", ",", "1"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"5", ",", "5"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"6", ",", "0"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"6", ",", "1"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"6", ",", "5"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"7", ",", "0"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"7", ",", "1"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"7", ",", "5"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"8", ",", "0"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"8", ",", "1"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"8", ",", "5"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"9", ",", "0"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"9", ",", "1"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"9", ",", "5"}], "]"}]}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[26]=",ExpressionUUID->"c1b647f9-1733-44c0-a721-12ef786e02c7"]
}, Open  ]],

Cell[TextData[{
 "Note that this produces a nested list. If your goal is to produce a single \
list of all of the values, for example, to form the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "(", 
      RowBox[{"i", ",", "j"}], ")"}], "|", 
     RowBox[{
      RowBox[{"3", "\[LessEqual]", "i", "\[LessEqual]", 
       RowBox[{"9", " ", "and", " ", "j"}]}], "\[Element]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "5"}], "}"}]}]}], "}"}], TraditionalForm]],
  ExpressionUUID->"6b7525d4-1a92-4879-80a2-c1965b493cfe"],
 ", use ",
 StyleBox[ButtonBox["Flatten",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Flatten"], "FunctionLink"],
 " to eliminate the nested structure and use ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " to ensure that the result is canonically ordered and that duplicates have \
been removed. Be sure that ",
 StyleBox[ButtonBox["Flatten",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Flatten"], "FunctionLink"],
 " is applied first."
}], "Text",ExpressionUUID->"897c4ced-a9a1-4330-a57f-7eae4cd339d6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Union", "[", 
  RowBox[{"Flatten", "[", "tableExample", "]"}], "]"}]], "Input",
 CellLabel->"In[27]:=",ExpressionUUID->"06efac10-91af-4d30-a328-1fc79beb48f3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"3", ",", "0"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", "5"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"4", ",", "0"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"4", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"4", ",", "5"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"5", ",", "0"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"5", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"5", ",", "5"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"6", ",", "0"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"6", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"6", ",", "5"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"7", ",", "0"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"7", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"7", ",", "5"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"8", ",", "0"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"8", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"8", ",", "5"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"9", ",", "0"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"9", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"9", ",", "5"}], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[27]=",ExpressionUUID->"36799ca7-fecc-47b3-a562-30758b67ba7f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Membership, Subset, and Size", "Subsubsection",ExpressionUUID->"eb29d36c-235a-48f9-8bdf-7180413322e5"],

Cell[TextData[{
 "The most basic question one can ask about a set is whether or not a \
particular object is or is not a member of it. In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", you do this with the ",
 StyleBox[ButtonBox["MemberQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MemberQ"], "FunctionLink"],
 " function. The first argument to ",
 StyleBox[ButtonBox["MemberQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MemberQ"], "FunctionLink"],
 " is the list and the second is the object being sought."
}], "Text",ExpressionUUID->"5e292227-36e5-4e3e-a9cb-b8b904676b98"],

Cell[TextData[{
 "For example, if we use ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " to define ",
 StyleBox["set4", "Code"],
 ", the set of squares of integers from 0 to 10, we can use ",
 StyleBox[ButtonBox["MemberQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MemberQ"], "FunctionLink"],
 " to see that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"4", "\[Element]", 
    StyleBox["set4", "Code"]}], TraditionalForm]],ExpressionUUID->
  "1c2e9335-d4c3-436d-b4b5-b6dfd26a3b15"],
 " but that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"5", "\[NotElement]", 
    StyleBox["set4", "Code"]}], TraditionalForm]],ExpressionUUID->
  "9acb7461-36dc-4a9f-b73d-d140ff7bfaca"],
 ". As mentioned earlier, when modeling a set as a list, it is a good idea to \
apply ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " when defining it."
}], "Text",ExpressionUUID->"154bfcb2-b669-4647-a583-fef18cb81580"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"set4", "=", 
  RowBox[{"Union", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"i", "^", "2"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "0", ",", "10"}], "}"}]}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[28]:=",ExpressionUUID->"fcb07ee7-2939-481e-9b76-3c3813570ef6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "4", ",", "9", ",", "16", ",", "25", ",", "36", ",", 
   "49", ",", "64", ",", "81", ",", "100"}], "}"}]], "Output",
 CellLabel->"Out[28]=",ExpressionUUID->"10e28227-7132-4782-ada6-1478dda85ef8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MemberQ", "[", 
  RowBox[{"set4", ",", "4"}], "]"}]], "Input",
 CellLabel->"In[29]:=",ExpressionUUID->"0c2ddb03-6755-488e-9c54-3bed75a2c86c"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[29]=",ExpressionUUID->"1671559e-05f1-4421-ace7-7ffd82196ed4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MemberQ", "[", 
  RowBox[{"set4", ",", "5"}], "]"}]], "Input",
 CellLabel->"In[30]:=",ExpressionUUID->"fa848c4b-cf52-4db7-8550-5ed3ee9bc5cb"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[30]=",ExpressionUUID->"d9684d70-b600-4870-ad12-081ad20a350f"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Length",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Length"], "FunctionLink"],
 " function returns the number of elements in a list. "
}], "Text",ExpressionUUID->"d07cc7bc-61c9-458a-a715-867faa378df7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "set4", "]"}]], "Input",
 CellLabel->"In[31]:=",ExpressionUUID->"776d8135-acb4-4783-b803-b610fc73b148"],

Cell[BoxData["11"], "Output",
 CellLabel->"Out[31]=",ExpressionUUID->"a8b5ec18-7933-48f1-b9cd-670cf67adaef"]
}, Open  ]],

Cell[TextData[{
 "Be careful to keep in mind that if it is the cardinality of a set you are \
after, you must use ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " or risk over-counting."
}], "Text",ExpressionUUID->"ae042de6-3cad-487b-8498-a3988a7c8b2b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "2", ",", "3"}], "}"}], 
  "]"}]], "Input",
 CellLabel->"In[32]:=",ExpressionUUID->"371695f9-eeb2-4a83-91da-bbda1394c197"],

Cell[BoxData["5"], "Output",
 CellLabel->"Out[32]=",ExpressionUUID->"7a29350e-20e6-46be-9b25-1ce3a13e2111"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"Union", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "2", ",", "3"}], "}"}], "]"}], 
  "]"}]], "Input",
 CellLabel->"In[33]:=",ExpressionUUID->"d8c5a2ca-4b73-49de-b2fd-e355d4841185"],

Cell[BoxData["3"], "Output",
 CellLabel->"Out[33]=",ExpressionUUID->"f3941481-a427-438e-b10a-568d8cd427d4"]
}, Open  ]],

Cell[TextData[{
 "In version 10, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " introduced ",
 StyleBox[ButtonBox["SubsetQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SubsetQ"], "FunctionLink"],
 ", a built-in function for checking whether one set is a subset of another. \
The ",
 StyleBox[ButtonBox["SubsetQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SubsetQ"], "FunctionLink"],
 " function takes two lists as arguments, and tests whether the second is a \
subset of the first. For example, the command below tests that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "5"}], "}"}], "\[SubsetEqual]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], 
   TraditionalForm]],ExpressionUUID->"6cdcc6a4-61f7-4ca9-9dc1-bdaaa87672a6"],
 "."
}], "Text",ExpressionUUID->"44ce842f-dae6-437d-b11a-a1fe8dfe7fd0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SubsetQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[34]:=",ExpressionUUID->"d93a7d73-0331-4c57-8084-fd639760d776"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[34]=",ExpressionUUID->"286e30ca-43f9-4209-8124-e6cbab9eaecc"]
}, Open  ]],

Cell[TextData[{
 "Note that you do not need to first apply union in order for ",
 StyleBox[ButtonBox["SubsetQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SubsetQ"], "FunctionLink"],
 " to give the expected output. In addition, ",
 StyleBox[ButtonBox["SubsetQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SubsetQ"], "FunctionLink"],
 " tests for non-strict subsets, that is, it will result in true when the \
sets are equal."
}], "Text",ExpressionUUID->"97276677-f987-4cd0-8b31-3338192d221e"],

Cell[TextData[{
 "However, it is not difficult to create a function from basic programming \
constructs. Given finite sets ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "733394b7-7290-4301-a4c7-d4d1d396c8af"],
 " and ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "d408b32d-e276-4dd7-89d1-556b6ded2c0a"],
 ", determining whether or not ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "\[SubsetEqual]", "B"}], TraditionalForm]],ExpressionUUID->
  "78ccd60e-e90c-43b6-a955-7c1bd6849adb"],
 " amounts to checking, for every element of ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "a3add436-f497-4dce-879c-118d229009cd"],
 ", whether it is also a member of ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "4a91274d-c34f-4ce2-bdd5-e0903b91a46c"],
 ". "
}], "Text",ExpressionUUID->"e33739d1-724a-43c7-81fe-67e86f8f151e"],

Cell[TextData[{
 "We can loop over all members of a given list ",
 StyleBox["A", "Code"],
 " by using the ",
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Do"], "FunctionLink"],
 " function with the ",
 Cell[BoxData[
  RowBox[{"{", 
   StyleBox["var", "CodeVar"], ",", 
   StyleBox["list", "CodeVar"], "}"}]], "myCode",ExpressionUUID->
  "3d42c065-5d9a-413b-aa00-61de47e8d0c9"],
 " construction for the second argument (assuming ",
 StyleBox["A", "Code"],
 " is a list). Note that ",
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Do"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " use the same syntax for their iteration specifications. The main \
difference between ",
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Do"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " is that ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " builds a list as its output while ",
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Do"], "FunctionLink"],
 " simply executes the code in the first argument without producing output \
unless explicitly told to do so. "
}], "Text",ExpressionUUID->"94abb913-6f80-4643-b43f-8c15b89bd4fc"],

Cell[TextData[{
 "Within the loop, we use the ",
 StyleBox[ButtonBox["MemberQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MemberQ"], "FunctionLink"],
 " function to test whether the object is in the list ",
 StyleBox["B", "Code"],
 ". We embed the loop within a ",
 StyleBox[ButtonBox["Catch",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Catch"], "FunctionLink"],
 " and use ",
 StyleBox[ButtonBox["Throw",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Throw"], "FunctionLink"],
 " if we find an element of ",
 StyleBox["A", "Code"],
 " missing from ",
 StyleBox["B", "Code"],
 ". This ensures that we return false as soon as possible rather than \
checking every element of ",
 StyleBox["A", "Code"],
 " if it is not necessary. If the loop completes, we ",
 StyleBox[ButtonBox["Throw",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Throw"], "FunctionLink"],
 " ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 ". Without that statement, nothing would be thrown and the ",
 StyleBox[ButtonBox["Catch",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Catch"], "FunctionLink"],
 " would output ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"5fb62271-62e9-4e9e-85b9-7f099d0e95b0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"subsetQ", "[", 
   RowBox[{"B_", ",", "A_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "i", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Catch", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"B", ",", "i"}], "]"}]}], ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "A"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"Throw", "[", "True", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[35]:=",ExpressionUUID->"07293bb1-a1a0-405f-bea3-5d223ff5a23a"],

Cell["We demonstrate our function on a few sets.", "Text",ExpressionUUID->"2ce3952e-41df-414c-8b45-3c29635da75a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"subsetQ", "[", 
  RowBox[{"set4", ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "9", ",", "100"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[36]:=",ExpressionUUID->"828592ad-003c-4498-9801-f4d5f5e2a05d"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[36]=",ExpressionUUID->"c7f724a3-0c36-4ee4-9a2b-066650b8243f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"subsetQ", "[", 
  RowBox[{"set4", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[37]:=",ExpressionUUID->"ee6167cc-6fd9-474f-ac83-3e3160c872c4"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[37]=",ExpressionUUID->"ce2e579a-0325-44de-966e-4e07a5b910b5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"subsetQ", "[", 
  RowBox[{
   RowBox[{"Range", "[", "10", "]"}], ",", 
   RowBox[{"Range", "[", 
    RowBox[{"3", ",", "7"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[38]:=",ExpressionUUID->"6d734e7e-4a62-45ae-a05a-e3f8d1f16983"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[38]=",ExpressionUUID->"796cb8dc-110d-44bf-aed0-06dee78cc8e4"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Power Set and Cartesian Product", "Subsection",
 CellTags->"Section1b",ExpressionUUID->"68fed074-2acf-46eb-a6ff-27da64d4ffe8"],

Cell[TextData[{
 "The Wolfram Language has a built-in function to compute the power set of a \
finite set. The ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " function accepts a list as its argument and returns the list of all \
possible sublists. For example, the power set of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], TraditionalForm]],
  ExpressionUUID->"c5054a92-ed7d-4bb3-8cfd-0d4960c9bbed"],
 " can be computed as below."
}], "Text",ExpressionUUID->"3eadeee9-f878-4bef-b8b5-977c39400684"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Subsets", "[", 
  RowBox[{"{", 
   RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}], 
  "]"}]], "Input",
 CellLabel->"In[39]:=",ExpressionUUID->"a3151d6d-6da4-4de2-a43c-6133644f76b5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "\<\"a\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"b\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"c\"\>", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[39]=",ExpressionUUID->"4d2e6f99-da95-4981-9b23-a4ce8eabd6d3"]
}, Open  ]],

Cell[TextData[{
 "Keep in mind that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " does not automatically remove duplicates. For example, if we apply ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " to a list with repeated elements, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will compute the power set as if the duplicates were distinct."
}], "Text",ExpressionUUID->"0b5c8153-ce66-4d27-80ba-b047c94a86cc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Subsets", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<c\>\""}], "}"}],
   "]"}]], "Input",
 CellLabel->"In[40]:=",ExpressionUUID->"08da33a9-e3cf-4af3-a0b1-d185267c1f69"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "\<\"a\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"b\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"c\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"c\"\>", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"c\"\>"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[40]=",ExpressionUUID->"794de61e-364a-4726-a39e-f08f6446ddbb"]
}, Open  ]],

Cell[TextData[{
 "As always, applying ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " before using the ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " function will help avoid this."
}], "Text",ExpressionUUID->"ee8c7c52-a827-405b-b4ba-7443a9dc6400"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Subsets", "[", 
  RowBox[{"Union", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<c\>\""}], 
    "}"}], "]"}], "]"}]], "Input",
 CellLabel->"In[41]:=",ExpressionUUID->"d418cafb-cf91-4ded-b5e6-8b526daad1c3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "\<\"a\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"b\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"c\"\>", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[41]=",ExpressionUUID->"a3849ef7-c247-4b63-8597-eda1465aba46"]
}, Open  ]],

Cell[TextData[{
 "The function ",
 StyleBox[ButtonBox["Tuples",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Tuples"], "FunctionLink"],
 " can be used to compute the Cartesian product of sets.",
 " ",
 "There are two ways to use this function."
}], "Text",ExpressionUUID->"aa47bfed-157a-45e3-9801-00632ca090da"],

Cell[TextData[{
 "First, to compute the Cartesian product of two or more sets, say ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c"}], "}"}], "\[Cross]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], TraditionalForm]],ExpressionUUID->
  "978a3b33-f6a4-45d3-9017-2e1902bc9172"],
 ", apply ",
 StyleBox[ButtonBox["Tuples",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Tuples"], "FunctionLink"],
 " with one argument: a list whose elements are the lists to be combined."
}], "Text",ExpressionUUID->"a8cb1d46-e9a8-48a4-aefe-12bb4d245757"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tuples", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "}"}], "]"}]], "Input",
 CellLabel->"In[42]:=",ExpressionUUID->"350607c2-5a74-470d-b932-3a835ce1b1e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[42]=",ExpressionUUID->"6eeb8728-d741-429e-a5e4-b2770f509de2"]
}, Open  ]],

Cell[TextData[{
 "Note that the result is a list of lists. We interpret the outer list as a \
set, the Cartesian product, and we interpret the inner lists as the ordered \
tuples. You can extend this to more than two sets just by including more \
lists in the argument to ",
 StyleBox[ButtonBox["Tuples",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Tuples"], "FunctionLink"],
 ". "
}], "Text",ExpressionUUID->"d6e66177-7135-4425-8529-28053e512254"],

Cell[TextData[{
 "The second syntax is used to compute the Cartesian product of a set with \
itself. For example, if ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", 
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], TraditionalForm]],
  ExpressionUUID->"07bba78d-9c4e-4a32-8e2e-24ac6985b64a"],
 ", you can compute ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["A", "3"], TraditionalForm]],ExpressionUUID->
  "a2761529-9e80-4592-83a2-4ec364bdbc94"],
 " by giving the list as the first argument and the exponent as the second."
}], "Text",ExpressionUUID->"74786cf9-d7c6-4fa2-bce7-600a341d07d4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tuples", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}], ",", 
   "3"}], "]"}]], "Input",
 CellLabel->"In[43]:=",ExpressionUUID->"1eb329bd-a753-4692-bf89-e2c3c141387c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"c\"\>", ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"c\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[43]=",ExpressionUUID->"8c44b311-e43b-46e7-8945-1d0135ad02fd"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example Using the Power Set", "Subsection",
 CellTags->"Section1c",ExpressionUUID->"150298f0-d0a4-4762-853d-c62cab32f9f1"],

Cell[TextData[{
 "As an example of a practical use of ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 ", we will search for the subsets of the first five positive integers which \
have their own cardinality as a member, that is, those sets ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "107e0eb7-a0f7-4154-970f-ef4980189b66"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"|", "S", "|", 
    RowBox[{"\[Element]", "S"}]}], TraditionalForm]],ExpressionUUID->
  "f6d3a17b-afa4-4a9c-8c22-bc2fb2a73965"],
 ". We do this by considering each subset in turn and checking whether its \
size, obtained using the ",
 StyleBox[ButtonBox["Length",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Length"], "FunctionLink"],
 " function, is a member of the subset, using ",
 StyleBox[ButtonBox["MemberQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MemberQ"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"ed15abfd-20f8-4c67-af19-e8ca8f01396f"],

Cell[TextData[{
 "Below is the function that will list all subsets of the first five positive \
integers whose ",
 StyleBox["cardinalities",
  IgnoreSpellCheck->True],
 " are members of themselves."
}], "Text",ExpressionUUID->"fd9a69ae-28fe-4de4-b540-8747866c7e6f"],

Cell[BoxData[
 RowBox[{"selfSize", ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"mainSet", ",", "powerSet", ",", "S"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mainSet", "=", 
      RowBox[{"Range", "[", "5", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"powerSet", "=", 
      RowBox[{"Subsets", "[", "mainSet", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"S", ",", 
           RowBox[{"Length", "[", "S", "]"}]}], "]"}], ",", 
         RowBox[{"Print", "[", "S", "]"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"S", ",", "powerSet"}], "}"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[44]:=",ExpressionUUID->"3c39ca05-ad2c-4ef5-9248-8b13dd152a47"],

Cell[TextData[{
 "After declaring local variables, we form the set of the integers from 1 to \
5 using ",
 StyleBox[ButtonBox["Range",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Range"], "FunctionLink"],
 ". Then, we apply the ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " function to form the power set, ",
 StyleBox["powerSet", "Code"],
 ". Using a ",
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Do"], "FunctionLink"],
 " loop, we iterate over every member ",
 StyleBox["S", "Code"],
 " of ",
 StyleBox["powerSet", "Code"],
 ". Inside the loop, we print those sets that have their own size as a member."
}], "Text",ExpressionUUID->"c8e8dd9f-bcba-4994-9655-423559fd5832"],

Cell["Now, we execute it.", "Text",ExpressionUUID->"232fc200-02e1-45bb-a01a-00196cbc174a"],

Cell[CellGroupData[{

Cell[BoxData["selfSize"], "Input",
 CellLabel->"In[45]:=",ExpressionUUID->"aa4f4005-544a-4280-9c35-4392502905c2"],

Cell[BoxData[
 RowBox[{"{", "1", "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[45]:=",ExpressionUUID->"8141afd2-3d59-4e11-a639-d897b2824285"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[45]:=",ExpressionUUID->"1c3f4f29-8fa4-4c72-bf23-b72ee9463be3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[45]:=",ExpressionUUID->"24cbf441-89ea-47aa-93b7-b89072786b7d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "4"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[45]:=",ExpressionUUID->"13528b9e-3e49-4d7f-ad6d-b8301a5f78c9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "5"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[45]:=",ExpressionUUID->"0a8e7516-29cc-4128-a2ea-163e01fb74df"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[45]:=",ExpressionUUID->"5e476186-0523-4a5b-8b2d-39522a533ddd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "3", ",", "4"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[45]:=",ExpressionUUID->"12c32c85-fb9d-4c13-83ac-6afeb32fcf37"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "3", ",", "5"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[45]:=",ExpressionUUID->"3c5025ba-e964-442a-a169-e96a17310e87"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "4"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[45]:=",ExpressionUUID->"f9784f94-4319-4608-b344-7aeb2450b091"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "5"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[45]:=",ExpressionUUID->"283529e1-8285-41b7-9b60-610fb2674692"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "4", ",", "5"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[45]:=",ExpressionUUID->"6b427653-8ff4-48a2-99bf-198722e9a3de"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[45]:=",ExpressionUUID->"c0e76be5-0d65-4072-b630-7e6a8a31709a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "4", ",", "5"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[45]:=",ExpressionUUID->"371f27b4-c07d-4c32-a00f-1c4f7c8ab049"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "3", ",", "4", ",", "5"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[45]:=",ExpressionUUID->"e4c3499e-8930-4696-a0fa-79e418020bef"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[45]:=",ExpressionUUID->"48b6d65a-8cfe-4e72-85c3-bdd886b77a98"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[45]:=",ExpressionUUID->"3ca88416-079d-46e6-876c-47d7e7e4f582"]
}, Open  ]],

Cell["\<\
The reader is encouraged to modify the function definition to take the main \
set as an argument.\
\>", "Text",ExpressionUUID->"27a59b81-765c-4db0-881f-5c06706d6e39"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.2 Set Operations", "Section",
 CellTags->"Section2",ExpressionUUID->"19113839-17c8-4f3d-a135-c29e993f8cc3"],

Cell[TextData[{
 "In this section, we will examine the functions the Wolfram Language \
provides for computing set operations. Then, we will use these commands and \
the concept of membership tables to see how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can be used to prove set identities. Finally, we see how we can use the \
Wolfram Language to represent and manipulate fuzzy sets."
}], "Text",ExpressionUUID->"91e91a17-0d52-4d0c-aadb-2f6e9184dc0f"],

Cell[CellGroupData[{

Cell["Basic Operations", "Subsection",
 CellTags->"Section2a",ExpressionUUID->"d5f0cb69-cd5d-4315-a463-f8e450da37fe"],

Cell[TextData[{
 "The Wolfram Language provides fairly intuitive functions related to the \
basic set operations of union, intersection, and complement. The functions \
are named ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 ", ",
 StyleBox[ButtonBox["Intersection",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Intersection"], "FunctionLink"],
 ", and ",
 StyleBox[ButtonBox["Complement",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Complement"], "FunctionLink"],
 ". Consider the following sets."
}], "Text",ExpressionUUID->"5b424b94-1c56-4683-b46a-3d7169c7b4cd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"primes", "=", 
  RowBox[{"{", 
   RowBox[{"2", ",", "3", ",", "5", ",", "7", ",", "11", ",", "13"}], 
   "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[46]:=",ExpressionUUID->"7c610431-6c57-4548-bb70-83fa54a18fbe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "5", ",", "7", ",", "11", ",", "13"}], 
  "}"}]], "Output",
 CellLabel->"Out[46]=",ExpressionUUID->"e6b389dc-3d90-4939-a573-3c9dc645330d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"odds", "=", 
  RowBox[{"Range", "[", 
   RowBox[{"1", ",", "13", ",", "2"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[47]:=",ExpressionUUID->"6a145363-50e5-4a7b-938a-5b1eabb38f9f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13"}],
   "}"}]], "Output",
 CellLabel->"Out[47]=",ExpressionUUID->"9fc13845-3bf2-4968-b8f7-10c701833bf9"]
}, Open  ]],

Cell["We compute their union and intersection as follows:", "Text",ExpressionUUID->"3943d9ae-e1ce-43f6-bc5b-b6a681757d45"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Union", "[", 
  RowBox[{"primes", ",", "odds"}], "]"}]], "Input",
 CellLabel->"In[48]:=",ExpressionUUID->"ab0fddc9-8520-4167-a8c3-766f7f9b4081"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", 
   "13"}], "}"}]], "Output",
 CellLabel->"Out[48]=",ExpressionUUID->"2ff31f29-5e1a-4279-8b76-86536597496d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Intersection", "[", 
  RowBox[{"primes", ",", "odds"}], "]"}]], "Input",
 CellLabel->"In[49]:=",ExpressionUUID->"b3a10dde-26c1-4965-b7be-c2eb91796484"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "5", ",", "7", ",", "11", ",", "13"}], "}"}]], "Output",
 CellLabel->"Out[49]=",ExpressionUUID->"e962adfc-66f8-4e7c-a27d-66081b996226"]
}, Open  ]],

Cell[TextData[{
 "Neither of these functions is restricted to two arguments, but will find \
the union or common intersection of any number of sets. In addition, both \
functions have infix forms obtained using the aliases \[EscapeKey]",
 StyleBox["un",
  IgnoreSpellCheck->True],
 "\[EscapeKey] and \[EscapeKey]inter\[EscapeKey]. "
}], "Text",ExpressionUUID->"0124bf1c-7b9e-4cc6-a843-727d366c5c4d"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Complement",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Complement"], "FunctionLink"],
 " function is slightly different. Its first argument is the universal set, \
and its second argument is the set whose complement is desired. For example, \
to find the complement of ",
 StyleBox["odds", "Code"],
 " in the universe consisting of integers from 1 through 13, you enter the \
following."
}], "Text",ExpressionUUID->"cf00c4f9-7385-4714-a28c-f6d4647d4d73"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Complement", "[", 
  RowBox[{
   RowBox[{"Range", "[", "13", "]"}], ",", "odds"}], "]"}]], "Input",
 CellLabel->"In[50]:=",ExpressionUUID->"a7a15762-bf0b-47d4-85ae-5b06063b28ae"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "4", ",", "6", ",", "8", ",", "10", ",", "12"}], 
  "}"}]], "Output",
 CellLabel->"Out[50]=",ExpressionUUID->"87c544c9-e253-4d7c-bbcd-15655122326a"]
}, Open  ]],

Cell[TextData[{
 "Recall from the textbook that the complement of a set can be defined in \
terms of set difference. The ",
 StyleBox[ButtonBox["Complement",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Complement"], "FunctionLink"],
 " function can be thought of as implementing the set difference of the first \
argument minus the second. The following examples compute the differences of \
the ",
 StyleBox["primes", "Code"],
 " and ",
 StyleBox["odds", "Code"],
 " sets and illustrate that, unlike union and intersection, set difference is \
not symmetric, that is, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "-", "B"}], TraditionalForm]],ExpressionUUID->
  "8ce2652f-f590-432b-9ac4-328be2b5d299"],
 " is generally not the same as ",
 Cell[BoxData[
  FormBox[
   RowBox[{"B", "-", "A"}], TraditionalForm]],ExpressionUUID->
  "2164addd-9c09-4630-bb10-06d2baba9ad6"],
 "."
}], "Text",ExpressionUUID->"bc19a8a0-28c9-474c-b9f7-1416ef69c1a3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Complement", "[", 
  RowBox[{"primes", ",", "odds"}], "]"}]], "Input",
 CellLabel->"In[51]:=",ExpressionUUID->"0f6f3c47-7371-4226-a10e-fca0032ea093"],

Cell[BoxData[
 RowBox[{"{", "2", "}"}]], "Output",
 CellLabel->"Out[51]=",ExpressionUUID->"5890b216-21a8-4e62-bd3e-bd063ba597fb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Complement", "[", 
  RowBox[{"odds", ",", "primes"}], "]"}]], "Input",
 CellLabel->"In[52]:=",ExpressionUUID->"1743abd2-8eea-4525-8901-cbd7773e27c8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "9"}], "}"}]], "Output",
 CellLabel->"Out[52]=",ExpressionUUID->"e51ed640-f052-4631-bd15-472f0b6bb382"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Complement",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Complement"], "FunctionLink"],
 " function can accept more than two arguments. In this case, it returns the \
list of all elements of the first set that appear in none of the others. That \
is to say, it finds the complement of the union of all of the sets following \
the first relative to the first: ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"Complement", "["}], 
   StyleBox["U", "CodeVar"], ",", 
   StyleBox["A", "CodeVar"], ",", 
   StyleBox["B", "CodeVar"], ",", "...", "]"}]], "myCode",ExpressionUUID->
  "535ff464-6758-48b2-9f1b-72d995cea7e7"],
 " computes ",
 Cell[BoxData[
  FormBox[
   RowBox[{"U", "-", 
    RowBox[{"(", 
     RowBox[{"A", "\[Union]", "B", "\[Union]", "\[Ellipsis]"}], ")"}]}], 
   TraditionalForm]],ExpressionUUID->"7037cdf4-98ec-4897-b119-4bc2666964c8"],
 ". This is equivalent to ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"U", "-", "A"}], ")"}], "-", "B"}], ")"}], "-"}], "..."}], 
   TraditionalForm]],ExpressionUUID->"48970655-9625-4e65-9a99-cb519f5bbdd2"],
 "."
}], "Text",ExpressionUUID->"e3590dcf-0604-4bf5-a48f-627136958737"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Complement", "[", 
  RowBox[{
   RowBox[{"Range", "[", "13", "]"}], ",", "odds", ",", "primes"}], 
  "]"}]], "Input",
 CellLabel->"In[53]:=",ExpressionUUID->"ec5cfc64-671b-42f4-8c63-16ba97c7cd95"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "6", ",", "8", ",", "10", ",", "12"}], "}"}]], "Output",
 CellLabel->"Out[53]=",ExpressionUUID->"3d7b0736-79f2-424d-8daf-c695dc775d74"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Set Identities and Membership Tables", "Subsection",
 CellTags->"Section2b",ExpressionUUID->"a1f25d24-ced1-4fcc-90c3-f33dd498c4b6"],

Cell[TextData[{
 "The textbook discusses how membership tables can be used to prove set \
identities. In this subsection, we use the idea of membership tables to have ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " verify set identities."
}], "Text",ExpressionUUID->"88cb4f2d-cd7a-440b-8f10-066abb1b15a8"],

Cell["\<\
A membership table is very similar to a truth table. In a membership table, \
each row corresponds to a possible element in the universe. We use 1 and 0 to \
indicate that the element corresponding to that row is or is not in the set.\
\>", "Text",ExpressionUUID->"d754ad24-382d-4866-b2f3-e179f35af3a6"],

Cell[CellGroupData[{

Cell["An Illustration of the General Approach", "Subsubsection",ExpressionUUID->"9c08e14e-6824-4c22-98a5-0e2fc14e604a"],

Cell[TextData[{
 "We first consider a specific example in detail in order to get an idea of \
how we can use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to automate the construction of membership tables. Consider the De Morgan\
\[CloseCurlyQuote]s law ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox[
     RowBox[{"A", "\[Union]", "B"}], "_"], "=", 
    RowBox[{
     OverscriptBox["A", "_"], "\[Intersection]", 
     OverscriptBox["B", "_"]}]}], TraditionalForm]],ExpressionUUID->
  "1686f6d1-4e8f-435e-9c52-eab404331d25"],
 ". We begin the table by considering all possible combinations of 1s and 0s \
for A and B and add columns for the two sides of the identity. "
}], "Text",ExpressionUUID->"33ca1fea-0a8d-4dcd-acc0-b8bc98a17ace"],

Cell[TextData[Cell[BoxData[GridBox[{
   {
    RowBox[{"Row", " ", "number"}], 
    StyleBox[Cell[TextData[Cell[BoxData[
      FormBox["A", TraditionalForm]],ExpressionUUID->
      "adf8b54f-10bd-4ed5-97a4-250e582f60f7"]],ExpressionUUID->
      "8a858bcc-30a9-43b4-a25e-68328f574cdd"], "Text"], 
    StyleBox[Cell["B",ExpressionUUID->"af730ef2-4d76-419e-93f4-356010baf222"],
      "Text"], Cell[TextData[Cell[BoxData[
     FormBox[
      OverscriptBox[
       RowBox[{"A", "\[Union]", "B"}], "_"], TraditionalForm]],
     ExpressionUUID->"f7204435-e99c-4f10-93d0-da3d70ac3402"]],ExpressionUUID->
     "bdaa27de-de74-4e84-bdcd-6cda304187b9"], Cell[TextData[Cell[BoxData[
     FormBox[
      RowBox[{
       OverscriptBox["A", "_"], "\[Intersection]", 
       OverscriptBox["B", "_"]}], TraditionalForm]],ExpressionUUID->
     "57489335-5cdb-4f24-bbe0-d2b59dddabbb"]],ExpressionUUID->
     "1ef31128-d517-42a6-b2f8-77eb19993b71"]},
   {"1", 
    StyleBox["1", "Text"], 
    StyleBox["1", "Text"], " ", 
    StyleBox[" ", "Text"]},
   {
    StyleBox["2", "Text"], 
    StyleBox["1", "Text"], 
    StyleBox["0", "Text"], 
    StyleBox[" ", "Text"], 
    StyleBox[" ", "Text"]},
   {
    StyleBox["3", "Text"], 
    StyleBox["0", "Text"], 
    StyleBox["1", "Text"], 
    StyleBox[" ", "Text"], 
    StyleBox[" ", "Text"]},
   {
    StyleBox["4", "Text"], 
    StyleBox["0", "Text"], 
    StyleBox["0", "Text"], 
    StyleBox[" ", "Text"], 
    StyleBox[" ", "Text"]}
  },
  GridBoxDividers->{
   "Columns" -> {{True}}, "ColumnsIndexed" -> {}, "Rows" -> {{True}}, 
    "RowsIndexed" -> {}}]],
 FontFamily->
  "Times",ExpressionUUID->"444c4d60-7db0-47e1-b7fa-8fb9e0604e0c"]], "Text",
 TextAlignment->Center,ExpressionUUID->"4c128cda-14b6-4085-9bcc-b6d809a4a135"],

Cell[TextData[{
 "We determine the values for the last two columns as follows. Let the \
universe be the set consisting of the row numbers ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], TraditionalForm]],
  ExpressionUUID->"e96f90ba-c46e-4e46-99a3-ac12182577b1"],
 ". Now, form sets ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "1290d3d8-c90a-43ac-91e3-80ac239b64d7"],
 " and ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "4a1bce75-bd23-40f1-85c7-9bdc9c113578"],
 " as follows: a value in the universe of row numbers is in ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "19f65561-29c8-442c-96d7-b73024048dc9"],
 " if there is a 1 in the column for ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "48c28247-49ec-4674-aaa8-b7aad8f0416e"],
 " in that row. Thus, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], TraditionalForm]],ExpressionUUID->
  "da6f8233-3897-4c60-b1f1-e05291586b86"],
 " because rows 1 and 2 have 1s in the column for ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "d1aa8331-6f14-4d9d-b8f4-888699bac999"],
 ". Likewise, ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "30d69ee5-9794-4aa5-871c-ca1eaf69244b"],
 " is defined to be ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], TraditionalForm]],ExpressionUUID->
  "c7bb0173-c6d8-43a1-badb-f25a513f0df7"],
 "."
}], "Text",ExpressionUUID->"d0fcf9ba-b4f3-48f1-a3a9-295c7bc5ebc1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rows", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[54]:=",ExpressionUUID->"a98ccadf-9319-4e8e-92b4-bb10a54eae47"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]], "Output",
 CellLabel->"Out[54]=",ExpressionUUID->"8692181d-4e92-4bb6-ab16-1690c12019f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"setA", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2"}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[55]:=",ExpressionUUID->"53b0a251-b000-4d62-afe8-07b5aa65b28b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2"}], "}"}]], "Output",
 CellLabel->"Out[55]=",ExpressionUUID->"a92dd44b-7c60-41e0-834c-4c330f766dc7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"setB", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "3"}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[56]:=",ExpressionUUID->"7a33e027-09c0-4e58-835e-421494e19889"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "3"}], "}"}]], "Output",
 CellLabel->"Out[56]=",ExpressionUUID->"972740d1-da70-4caa-8a38-561786ecf947"]
}, Open  ]],

Cell[TextData[{
 "Next, compute both sides of the identity ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox[
     RowBox[{"A", "\[Union]", "B"}], "_"], "=", 
    RowBox[{
     OverscriptBox["A", "_"], "\[Intersection]", 
     OverscriptBox["B", "_"]}]}], TraditionalForm]],ExpressionUUID->
  "69f98ad5-b4ea-4e85-a403-579d8fc3fc83"],
 ". "
}], "Text",ExpressionUUID->"db5a30e5-2e19-4e12-b3b6-c00d1b72a279"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Complement", "[", 
  RowBox[{"rows", ",", 
   RowBox[{"Union", "[", 
    RowBox[{"setA", ",", "setB"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[57]:=",ExpressionUUID->"547403ec-c1ac-4b1b-892c-2918553ddb47"],

Cell[BoxData[
 RowBox[{"{", "4", "}"}]], "Output",
 CellLabel->"Out[57]=",ExpressionUUID->"5d09e872-0abd-4a39-aa10-1a83a568b7fb"]
}, Open  ]],

Cell[TextData[{
 "This indicates that row 4 is the only row with a 1 in the column for",
 " ",
 Cell[BoxData[
  FormBox[
   OverscriptBox[
    RowBox[{"A", "\[Union]", "B"}], "_"], TraditionalForm]],ExpressionUUID->
  "caaaf7c3-9f93-4da6-a230-5d850a7f79a5"],
 "."
}], "Text",ExpressionUUID->"c3fda72c-76be-49a5-8c87-10a9f5bb7834"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Intersection", "[", 
  RowBox[{
   RowBox[{"Complement", "[", 
    RowBox[{"rows", ",", "setA"}], "]"}], ",", 
   RowBox[{"Complement", "[", 
    RowBox[{"rows", ",", "setB"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[58]:=",ExpressionUUID->"f5df83ae-8a05-4530-b4a3-dbf8da77cb5c"],

Cell[BoxData[
 RowBox[{"{", "4", "}"}]], "Output",
 CellLabel->"Out[58]=",ExpressionUUID->"6a1263b9-7cf5-410e-b140-f6c4504c7758"]
}, Open  ]],

Cell[TextData[{
 "This tells us that row 4 is also the only row with a 1 in the column for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["A", "_"], "\[Intersection]", 
    OverscriptBox["B", "_"]}], TraditionalForm]],ExpressionUUID->
  "52dd068e-e28a-4d78-96f0-4a8c75c3858f"],
 ". ",
 "Since the two sets are equal, the two columns must be identical."
}], "Text",ExpressionUUID->"21a01bdf-4091-4624-9731-f9ce4b091376"],

Cell["\<\
The above illustrates the approach that we will be using. First, compute the \
initial entries in the rows of the membership table; each row corresponds to \
a different assignment of 1s and 0s. Second, construct sets whose entries are \
the row numbers corresponding to 1s in the table. And finally, compute both \
sides of the identity. If the resulting sets are equal, then we have \
confirmed the identity.\
\>", "Text",ExpressionUUID->"55cc9e4e-7320-4c8d-a43d-525d0e73721b"],

Cell[TextData[{
 "Much of what we do here will be very similar to how we created the ",
 StyleBox["myEquivalentQ", "Code"],
 " function in Section 1.3 of this manual. First, we need to be able to \
create expressions representing the two sides of the identity. We will use \
Example 14 of the text as our example: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox[
     RowBox[{"A", "\[Union]", 
      RowBox[{"(", 
       RowBox[{"B", "\[Intersection]", "C"}], ")"}]}], "_"], "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       OverscriptBox["C", "_"], "\[Union]", 
       OverscriptBox["B", "_"]}], ")"}], "\[Intersection]", 
     OverscriptBox["A", "_"]}]}], TraditionalForm]],ExpressionUUID->
  "cfa45a29-f5d7-4ef8-a8d4-57bc410a5476"],
 ". We will use the symbol ",
 StyleBox["U", "Code"],
 " for the universe and ",
 StyleBox["a", "Code"],
 ", ",
 StyleBox["b", "Code"],
 ", and ",
 StyleBox["c", "Code"],
 " for the names of sets. (We use lowercase set names in order to avoid \
conflict with the Wolfram Language\[CloseCurlyQuote]s reserved symbol ",
 StyleBox["C", "Code"],
 ".) It is important that these symbols not already have assigned values, so \
we first ",
 StyleBox[ButtonBox["Clear",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Clear"], "FunctionLink"],
 " them."
}], "Text",ExpressionUUID->"7af04586-3215-4053-8d3c-c5b90354c80e"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"U", ",", "a", ",", "b", ",", "c"}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[59]:=",ExpressionUUID->"19bcab81-481d-45c8-9127-afa06f4e0388"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Set Expressions and Delayed Evaluation", "Subsubsection",ExpressionUUID->"911e7371-4e4e-4ec8-9c92-1cd5637aaeb3"],

Cell[TextData[{
 "Creating an expression involving set operations and variables is not as \
simple as it is for the logical operators.",
 " ",
 "With the logical operators, we can, for example, create the expression ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "\[And]", "b"}], TraditionalForm]],ExpressionUUID->
  "f4baa1ee-d468-49da-8f93-284226737295"],
 "."
}], "Text",ExpressionUUID->"38629159-6c9d-4080-a10c-af79aaf338fc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "[", 
  RowBox[{"a", ",", "b"}], "]"}]], "Input",
 CellLabel->"In[60]:=",ExpressionUUID->"28a0fd72-b6d1-486b-abb8-1c4a313870b1"],

Cell[BoxData[
 RowBox[{"a", "&&", "b"}]], "Output",
 CellLabel->"Out[60]=",ExpressionUUID->"8f1a6619-7d63-4a3c-979e-9e9882f6e04e"]
}, Open  ]],

Cell["\<\
In contrast, for the set operations, the Wolfram Language requires the \
arguments to not be symbols. When we try to enter the analogous set \
expression, a warning is produced.\
\>", "Text",ExpressionUUID->"2e74acc1-96e6-428e-8ca3-e5d2ea7b14ea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Intersection", "[", 
  RowBox[{"a", ",", "b"}], "]"}]], "Input",
 CellLabel->"In[61]:=",ExpressionUUID->"492e3c43-a487-4406-a25f-8fda09401086"],

Cell[BoxData[
 TemplateBox[{
  "Intersection","normal",
   "\"Nonatomic expression expected at position \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"a\\\", \\\"\
\[Intersection]\\\", \\\"b\\\"}]\\).\"",2,61,1,22491832706348855871,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[61]:=",ExpressionUUID->"a1975f59-4cc4-4dc1-b257-48d600d317f0"],

Cell[BoxData[
 RowBox[{"a", "\[Intersection]", "b"}]], "Output",
 CellLabel->"Out[61]=",ExpressionUUID->"97a2cd87-dc60-4c60-a931-4342c3b5db5b"]
}, Open  ]],

Cell[TextData[{
 "The message is telling us that the function we applied is supposed to be a \
list or other compound expression, not a mere symbol (or number or string). \
Beyond the warning message, there is another difficulty in representing \
expressions involving set operations in the Wolfram Language. Observe what \
happens when we attempt to enter ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"A", "\[Intersection]", "B"}], ")"}], "\[Union]", 
    RowBox[{"(", 
     RowBox[{"A", "\[Intersection]", "C"}], ")"}]}], TraditionalForm]],
  ExpressionUUID->"dd4f31c0-d113-4762-bf2e-d773781efaf0"],
 "."
}], "Text",ExpressionUUID->"4df52510-e54b-4658-a60f-5d0e8ac81912"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Union", "[", 
  RowBox[{
   RowBox[{"Intersection", "[", 
    RowBox[{"a", ",", "b"}], "]"}], ",", 
   RowBox[{"Intersection", "[", 
    RowBox[{"a", ",", "c"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[62]:=",ExpressionUUID->"34c70e79-5d08-4fa6-a236-c670b91d7b2a"],

Cell[BoxData[
 TemplateBox[{
  "Intersection","normal",
   "\"Nonatomic expression expected at position \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"a\\\", \\\"\
\[Intersection]\\\", \\\"b\\\"}]\\).\"",2,62,2,22491832706348855871,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[62]:=",ExpressionUUID->"3b140af4-3e65-40a0-9708-8e07cd51c746"],

Cell[BoxData[
 TemplateBox[{
  "Intersection","normal",
   "\"Nonatomic expression expected at position \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"a\\\", \\\"\
\[Intersection]\\\", \\\"c\\\"}]\\).\"",2,62,3,22491832706348855871,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[62]:=",ExpressionUUID->"58e0d256-a98d-4c69-880b-e4a455a34550"],

Cell[BoxData[
 TemplateBox[{
  "Intersection","normal",
   "\"Nonatomic expression expected at position \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"a\\\", \\\"\
\[Intersection]\\\", \\\"b\\\", \\\"\[Intersection]\\\", \\\"c\\\"}]\\).\"",2,
   62,4,22491832706348855871,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[62]:=",ExpressionUUID->"319c37c2-cfe0-43cb-aa5b-e274a07e1901"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Intersection\\\", \
\\\"::\\\", \\\"normal\\\"}], \\\"MessageName\\\"]\\) will be suppressed \
during this calculation.\"",2,62,5,22491832706348855871,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[62]:=",ExpressionUUID->"b1055843-8052-4a1c-9e5a-155748b30ba1"],

Cell[BoxData[
 RowBox[{"a", "\[Intersection]", "b", "\[Intersection]", "c"}]], "Output",
 CellLabel->"Out[62]=",ExpressionUUID->"0b601918-ea4c-4d0f-a06f-d840f590f6a7"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " transformed the expression we entered into the intersection of all three \
sets, which does not represent the same set as the original expression. The \
reason for this behavior is that the ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " function\[CloseCurlyQuote]s arguments are not required to be lists. \
Provided the arguments have the same head, ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " returns the expression consisting of that common head and the union of the \
arguments. This is illustrated below using the symbol ",
 StyleBox["f", "Code"],
 " for the head."
}], "Text",ExpressionUUID->"e8328e74-da90-4f11-bfb4-fabb3551db92"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Union", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"a", ",", "b", ",", "c"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"a", ",", "c", ",", "d"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"b", ",", "d", ",", "e"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[63]:=",ExpressionUUID->"ddbfda3a-0e0b-4c98-b53f-7cdb25a7bc38"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "]"}]], "Output",
 CellLabel->"Out[63]=",ExpressionUUID->"42f26156-f7c8-45b0-9606-2641285e1c42"]
}, Open  ]],

Cell[TextData[{
 "In order to work properly, our functions in this section will need to \
ensure that the set expressions they are given are not evaluated. We will do \
this with ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 ". (Note that in ",
 StyleBox["Mathematica 10",
  FontSlant->"Italic"],
 ", ",
 StyleBox[ButtonBox["Inactivate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Inactivate"], "FunctionLink"],
 " was introduced, which could also be used here. ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " is more fundamental and, in some ways, simpler, so we focus on it here.)"
}], "Text",ExpressionUUID->"97cfd86d-b29b-41bb-8071-c157a13ced80"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " function accepts a single argument, which can be any expression \
whatsoever. The result is to maintain the expression just as it was given to ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " with no evaluation performed on it."
}], "Text",ExpressionUUID->"6811de2c-68c0-43d9-adb8-0bd30dcb2af0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"holdExample", "=", 
  RowBox[{"Hold", "[", 
   RowBox[{"Union", "[", 
    RowBox[{
     RowBox[{"Intersection", "[", 
      RowBox[{"a", ",", "b"}], "]"}], ",", 
     RowBox[{"Intersection", "[", 
      RowBox[{"a", ",", "c"}], "]"}]}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[64]:=",ExpressionUUID->"dd26b032-c9a0-498f-a826-a9010c8288ac"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{"a", "\[Intersection]", "b"}], "\[Union]", 
   RowBox[{"a", "\[Intersection]", "c"}]}], "]"}]], "Output",
 CellLabel->"Out[64]=",ExpressionUUID->"5ed887c4-3af5-4297-8568-535d6359a947"]
}, Open  ]],

Cell[TextData[{
 "In the above, the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " front end has displayed the set expression using the infix symbols rather \
than the function names (",
 StyleBox[ButtonBox["FullForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FullForm"], "FunctionLink"],
 " will show that the function names are still in the internal \
representation). However, the expression was retained as we intended it, in \
contrast to what happened to the same expression above."
}], "Text",ExpressionUUID->"70587b82-f6c6-476c-8149-58e16da6ec4c"],

Cell[TextData[{
 "Note also that the result has ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " as its head. This means that the expression will remain held until we \
explicitly cause it to be evaluated using ",
 StyleBox[ButtonBox["ReleaseHold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReleaseHold"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"20a3017a-e55d-4aa0-9729-6e2db7978406"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReleaseHold", "[", "holdExample", "]"}]], "Input",
 CellLabel->"In[65]:=",ExpressionUUID->"c9c965a8-18cb-462f-aca1-ca731c9a895e"],

Cell[BoxData[
 TemplateBox[{
  "Intersection","normal",
   "\"Nonatomic expression expected at position \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"a\\\", \\\"\
\[Intersection]\\\", \\\"b\\\"}]\\).\"",2,65,6,22491832706348855871,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[65]:=",ExpressionUUID->"967d8e76-e1db-420c-a62a-9a214d03512b"],

Cell[BoxData[
 TemplateBox[{
  "Intersection","normal",
   "\"Nonatomic expression expected at position \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"a\\\", \\\"\
\[Intersection]\\\", \\\"c\\\"}]\\).\"",2,65,7,22491832706348855871,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[65]:=",ExpressionUUID->"9e58164e-3d77-49a7-b2e8-f615313e6cca"],

Cell[BoxData[
 TemplateBox[{
  "Intersection","normal",
   "\"Nonatomic expression expected at position \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"a\\\", \\\"\
\[Intersection]\\\", \\\"b\\\", \\\"\[Intersection]\\\", \\\"c\\\"}]\\).\"",2,
   65,8,22491832706348855871,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[65]:=",ExpressionUUID->"da9c7309-7867-4582-975d-4e01d03578be"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Intersection\\\", \
\\\"::\\\", \\\"normal\\\"}], \\\"MessageName\\\"]\\) will be suppressed \
during this calculation.\"",2,65,9,22491832706348855871,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[65]:=",ExpressionUUID->"a7f29c2f-11b2-4e7c-9cde-4b1fbbaeea4e"],

Cell[BoxData[
 RowBox[{"a", "\[Intersection]", "b", "\[Intersection]", "c"}]], "Output",
 CellLabel->"Out[65]=",ExpressionUUID->"ecf85e4c-f8a0-4dc6-a477-8821b3fe3931"]
}, Open  ]],

Cell[TextData[{
 "In what follows, we will initially require that all set expressions are \
manually held, by being entered with the ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " function explicitly applied. At the end of this section, we will see how \
to remove this cumbersome requirement."
}], "Text",ExpressionUUID->"2456e6d7-593c-48f8-85f8-b69847a885cd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Revising the ",
 StyleBox["getVars", "Code"],
 " Function"
}], "Subsubsection",ExpressionUUID->"6b4226e1-710d-40ff-ba17-1ce5b6c91068"],

Cell[TextData[{
 "Much of what follows will parallel the construction of the ",
 StyleBox["myEquivalentQ", "Code"],
 " function from Section 1.3 of this manual. First, we create expressions \
representing the two sides of the identity from Example 14 of the text. We \
will use the symbol ",
 StyleBox["U", "Code"],
 " for the universe and ",
 StyleBox["a", "Code"],
 ", ",
 StyleBox["b", "Code"],
 ", and ",
 StyleBox["c", "Code"],
 " for the sets."
}], "Text",ExpressionUUID->"1db07088-d1cb-4f62-a4d4-5d2cd6351471"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ex14L", "=", 
  RowBox[{"Hold", "[", 
   RowBox[{"Complement", "[", 
    RowBox[{"U", ",", 
     RowBox[{"Union", "[", 
      RowBox[{"a", ",", 
       RowBox[{"Intersection", "[", 
        RowBox[{"b", ",", "c"}], "]"}]}], "]"}]}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[66]:=",ExpressionUUID->"d58a460c-35e1-4c00-a1bc-1efa82f9e6ca"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"Complement", "[", 
   RowBox[{"U", ",", 
    RowBox[{"a", "\[Union]", 
     RowBox[{"b", "\[Intersection]", "c"}]}]}], "]"}], "]"}]], "Output",
 CellLabel->"Out[66]=",ExpressionUUID->"778be184-ece8-4574-8229-d2ecb5cfc6d6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ex14R", "=", 
  RowBox[{"Hold", "[", 
   RowBox[{"Intersection", "[", 
    RowBox[{
     RowBox[{"Union", "[", 
      RowBox[{
       RowBox[{"Complement", "[", 
        RowBox[{"U", ",", "c"}], "]"}], ",", 
       RowBox[{"Complement", "[", 
        RowBox[{"U", ",", "b"}], "]"}]}], "]"}], ",", 
     RowBox[{"Complement", "[", 
      RowBox[{"U", ",", "a"}], "]"}]}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[67]:=",ExpressionUUID->"3ac1d522-652d-46ac-aefd-6f5b2d468208"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"U", ",", "c"}], "]"}], "\[Union]", 
     RowBox[{"Complement", "[", 
      RowBox[{"U", ",", "b"}], "]"}]}], ")"}], "\[Intersection]", 
   RowBox[{"Complement", "[", 
    RowBox[{"U", ",", "a"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[67]=",ExpressionUUID->"ab036d1d-4222-40de-99e5-271685fbc0be"]
}, Open  ]],

Cell[TextData[{
 "Now, we will create a version of the ",
 StyleBox["getVars", "Code"],
 " function from Section 1.3. In Section 1.3 of this manual, we built ",
 StyleBox["getVars", "Code"],
 " using the most fundamental Wolfram Language functions possible. Our \
purpose then was to build the functions from scratch as an illustration of \
essential programming constructions and concepts. Here, we will instead take \
advantage of some of the Wolfram Language\[CloseCurlyQuote]s more \
sophisticated built-in functions to illustrate their use."
}], "Text",ExpressionUUID->"13e740b0-d9b4-4713-96af-160a2257ec26"],

Cell[TextData[{
 "Most of the work of the function will be done by using the built-in \
function ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 ". The purpose of the ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " function is to analyze an expression and produce a list of the elements of \
the expression that satisfy a certain condition. A simple example is finding \
the integers in a list of numbers."
}], "Text",ExpressionUUID->"d21b3821-6f66-4e75-9684-dae356dc0487"],

Cell[TextData[{
 "The first argument to ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " is the expression being searched, for example the list of numbers. The \
second argument must be a \[OpenCurlyDoubleQuote]pattern\
\[CloseCurlyDoubleQuote] that describes which elements are to be matched. \
Patterns in the Wolfram Language can be rather involved. Here, we will \
describe only the aspects needed for the current task. "
}], "Text",ExpressionUUID->"eaf473ed-aa99-4462-8837-79a93fa135e5"],

Cell[TextData[{
 "We have already used the most basic pattern, the ",
 StyleBox[ButtonBox["Blank",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Blank"], "FunctionLink"],
 " (",
 StyleBox["_", "Code"],
 "), which matches anything at all. When you define a function in the Wolfram \
Language, as in ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"f", "[", "x_", "]"}], ":=", 
   RowBox[{"x", "^", "2"}]}]], "myCode",ExpressionUUID->
  "767b7a3f-9124-459b-86e1-853d2badc8ca"],
 ", the ",
 StyleBox[ButtonBox["Blank",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Blank"], "FunctionLink"],
 " (",
 StyleBox["_", "Code"],
 ") indicates that you wish to match any expression as the argument to the \
function. The symbol preceding the blank, in this case, ",
 StyleBox["x", "Code"],
 ", indicates that you will be using that symbol to refer to the expression \
that was matched by the blank."
}], "Text",ExpressionUUID->"5896309e-d498-46d8-b484-be4d6bda17c2"],

Cell["\<\
You can create more specific patterns, that is, patterns that are selective \
about the kinds of expressions that they match, by following the blank with \
the name of a head. Consider, for example, the following function definition.\
\
\>", "Text",ExpressionUUID->"da6dd63f-127d-4ffe-9f5e-51154e2bfe38"],

Cell[BoxData[
 RowBox[{
  RowBox[{"patternEx", "[", "x_Integer", "]"}], ":=", 
  RowBox[{"x", "^", "2"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[68]:=",ExpressionUUID->"861f02e1-e202-4396-9760-d7705ddd3d13"],

Cell[TextData[{
 "Here, ",
 StyleBox["x_Integer", "Code"],
 " is a pattern. As before, the symbol preceding the blank indicates that you \
will refer to the matched expression with ",
 StyleBox["x", "Code"],
 ". The fact that the blank is followed by ",
 StyleBox["Integer", "Code"],
 " indicates that you only allow a match when the expression has head ",
 StyleBox["Integer", "Code"],
 ". If you give this function an argument that is not an integer, it will not \
match the pattern that specifies the argument and so the function definition \
will not apply."
}], "Text",ExpressionUUID->"10d38586-2201-4b86-970d-919fb3fde3ad"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"patternEx", "[", "5", "]"}]], "Input",
 CellLabel->"In[69]:=",ExpressionUUID->"4884a104-3582-4b98-a170-70ef05a73cb7"],

Cell[BoxData["25"], "Output",
 CellLabel->"Out[69]=",ExpressionUUID->"bacc367c-317b-4c72-ba2a-1a224ac0c0c2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"patternEx", "[", "2.9", "]"}]], "Input",
 CellLabel->"In[70]:=",ExpressionUUID->"ba00e4cb-8aea-4d38-bc5f-e24bbdc1fbf6"],

Cell[BoxData[
 RowBox[{"patternEx", "[", "2.9`", "]"}]], "Output",
 CellLabel->"Out[70]=",ExpressionUUID->"eca31fcf-c776-4b0c-b561-9497b0c14751"]
}, Open  ]],

Cell[TextData[{
 "We can use this pattern with ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " in order to find the elements of a list that are integers. We use the \
function with first argument a list of objects and second argument the \
pattern describing the objects we want to find."
}], "Text",ExpressionUUID->"9c4ae957-1dd0-45c9-9936-375ee21642cd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", 
     RowBox[{"-", "3"}], ",", "9", ",", "x", ",", "Pi", ",", "0", ",", 
     "4.7"}], "}"}], ",", "_Integer"}], "]"}]], "Input",
 CellLabel->"In[71]:=",ExpressionUUID->"56a59b3f-550c-420d-b224-1acd2183a072"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", 
   RowBox[{"-", "3"}], ",", "9", ",", "0"}], "}"}]], "Output",
 CellLabel->"Out[71]=",ExpressionUUID->"0c634c6b-7e8b-4d22-909d-139556a7d87a"]
}, Open  ]],

Cell[TextData[{
 "Note that we were able to leave off the symbol preceding the blank in the \
pattern ",
 StyleBox["_Integer", "Code"],
 ", since we did not need to refer to the integers being matched. Here is \
another example."
}], "Text",ExpressionUUID->"cd4c6f9a-853f-4843-a4c8-5a69e2e6c340"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "q", ",", "3"}], "}"}], ",", "x", ",", "6"}], "}"}], 
   ",", "_Integer"}], "]"}]], "Input",
 CellLabel->"In[72]:=",ExpressionUUID->"bb67df22-5536-4c76-9c91-ec3cb91c7c73"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", 
   RowBox[{"-", "1"}], ",", "6"}], "}"}]], "Output",
 CellLabel->"Out[72]=",ExpressionUUID->"3906352a-34f7-478c-8715-d3a14e543e66"]
}, Open  ]],

Cell[TextData[{
 "In this example, ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " did not return the 5 and the 3 found in the sublist. This is because ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 ", by default, only checks the first level of its argument. To be more \
specific, in the example above, the expression that ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " was applied to was a list with 5 elements. The ",
 StyleBox["2", "Code"],
 ", ",
 StyleBox["-1", "Code"],
 ", and ",
 StyleBox["6", "Code"],
 " were elements with head ",
 StyleBox["Integer", "Code"],
 " and were matched by the pattern. The ",
 StyleBox["x", "Code"],
 " has head ",
 StyleBox["Symbol", "Code"],
 " and is not matched. The other element was the list ",
 StyleBox["{5,q,3}", "Code"],
 ", which has head ",
 StyleBox["List", "Code"],
 " and so the sublist was not matched by the pattern. Moreover, ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " did not delve into that subexpression."
}], "Text",ExpressionUUID->"cf358d3a-360b-4496-9225-79a1260155b1"],

Cell[TextData[{
 "You can have ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " dig deeper, that is, analyze elements of subexpressions, by providing a \
level specification. By providing a positive integer as an optional third \
argument, ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " will include everything from the first level down to the specified level. \
For example, to have ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " include the ",
 StyleBox["5", "Code"],
 " and ",
 StyleBox["3", "Code"],
 " in its result for the example above, you just need to tell it to work down \
to level 2."
}], "Text",ExpressionUUID->"ca98da7d-12ef-41ac-8943-d536a1304d37"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "q", ",", "3"}], "}"}], ",", "x", ",", "6"}], "}"}], 
   ",", "_Integer", ",", "2"}], "]"}]], "Input",
 CellLabel->"In[73]:=",ExpressionUUID->"e9cfde73-4266-4634-9ae1-1fc8da822732"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", 
   RowBox[{"-", "1"}], ",", "5", ",", "3", ",", "6"}], "}"}]], "Output",
 CellLabel->"Out[73]=",ExpressionUUID->"88feead6-725c-4310-b126-136fb12e6706"]
}, Open  ]],

Cell[TextData[{
 "The symbol ",
 StyleBox["Infinity", "Code"],
 " is used as the level specification to indicate that you want ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " to go as deep as possible."
}], "Text",ExpressionUUID->"4067a0fa-c938-4635-a240-7c70b09b332b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", 
         RowBox[{"{", 
          RowBox[{"4", ",", 
           RowBox[{"{", 
            RowBox[{"5", ",", 
             RowBox[{"{", 
              RowBox[{"6", ",", 
               RowBox[{"{", 
                RowBox[{"7", ",", 
                 RowBox[{"{", 
                  RowBox[{"8", ",", 
                   RowBox[{"{", "9", "}"}]}], "}"}]}], "}"}]}], "}"}]}], 
            "}"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}], ",", "_Integer", ",", 
   "Infinity"}], "]"}]], "Input",
 CellLabel->"In[74]:=",ExpressionUUID->"d3d5be95-f195-4817-95e9-4c6b64e4ece8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9"}], "}"}]], "Output",
 CellLabel->"Out[74]=",ExpressionUUID->"09ab40b0-9e1c-4706-b5eb-f2e0ad11a785"]
}, Open  ]],

Cell[TextData[{
 "Since the first argument does not have to be a list, but can be any \
expression, we can identify the variables used in an expression by using ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"], "FunctionLink"],
 " to search for the symbols in the expression with the pattern ",
 StyleBox["_Symbol", "Code"],
 "."
}], "Text",ExpressionUUID->"993a95ec-98e6-4cc5-9d1c-1b7bb73e529c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{"ex14R", ",", "_Symbol", ",", "Infinity"}], "]"}]], "Input",
 CellLabel->"In[75]:=",ExpressionUUID->"ad7a0aa1-ddd7-4641-9540-bf43ab5d9be8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"U", ",", "c", ",", "U", ",", "b", ",", "U", ",", "a"}], 
  "}"}]], "Output",
 CellLabel->"Out[75]=",ExpressionUUID->"f2c98aaa-9309-4fe5-8715-e1b4af894ca9"]
}, Open  ]],

Cell[TextData[{
 "We are nearly finished, but we want to exclude the universe from our list \
of variables. To do this, we will be assuming, for convenience, that the \
universe is always denoted by U in expressions. The reason for excluding the \
universe is so that the list of variables returned by ",
 StyleBox["getVarsSets", "Code"],
 " corresponds to the columns of the membership table."
}], "Text",ExpressionUUID->"690683b0-a684-4e01-a1c7-307a5dcf0c8d"],

Cell[TextData[{
 "We will exclude ",
 StyleBox["U", "Code"],
 " by making a modification to the pattern specification. ",
 StyleBox[ButtonBox["Except",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Except"], "FunctionLink"],
 " is used in patterns to exclude certain matches. With two arguments, the \
first argument specifies patterns to exclude (in this case ",
 StyleBox["U", "Code"],
 "), and the second argument is the pattern to include."
}], "Text",ExpressionUUID->"d3acb00e-532e-4a81-8c37-458827eb96fe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{"ex14R", ",", 
   RowBox[{"Except", "[", 
    RowBox[{"U", ",", "_Symbol"}], "]"}], ",", "Infinity"}], "]"}]], "Input",
 CellLabel->"In[76]:=",ExpressionUUID->"9b4e1524-2352-42a3-b100-ff8d1401ec86"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"c", ",", "b", ",", "a"}], "}"}]], "Output",
 CellLabel->"Out[76]=",ExpressionUUID->"64d6e64b-4589-4fa0-8ed9-42db33ffaba2"]
}, Open  ]],

Cell[TextData[{
 "We apply ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " in order to remove duplicates and put the results in a standard order. \
This is everything we need to create ",
 StyleBox["getVarsSets", "Code"],
 "."
}], "Text",ExpressionUUID->"668c8939-517a-4d71-9c14-0bb543bf530f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getVarsSets", "[", "S_", "]"}], ":=", 
  RowBox[{"Union", "[", 
   RowBox[{"Cases", "[", 
    RowBox[{"S", ",", 
     RowBox[{"Except", "[", 
      RowBox[{"U", ",", "_Symbol"}], "]"}], ",", "Infinity"}], "]"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[77]:=",ExpressionUUID->"d37f2af2-5955-489b-aba5-5d01f7a8b408"],

Cell[TextData[{
 "In order to be sure to include all variables that appear in either ",
 StyleBox["ex14L", "Code"],
 " or ",
 StyleBox["ex14R", "Code"],
 ", we combine the two into a list and pass that list as the argument to ",
 StyleBox["getVarsSets", "Code"],
 "."
}], "Text",ExpressionUUID->"52387a6f-7752-4416-93b5-77c197cdb2dd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ex14Vars", "=", 
  RowBox[{"getVarsSets", "[", 
   RowBox[{"{", 
    RowBox[{"ex14L", ",", "ex14R"}], "}"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[78]:=",ExpressionUUID->"ae624e0a-6e5e-408d-b3d4-bb5172e34fb7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c"}], "}"}]], "Output",
 CellLabel->"Out[78]=",ExpressionUUID->"2a05a845-a5f9-4b97-9dd4-3c24101514cb"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Producing the Rows of the Table", "Subsubsection",ExpressionUUID->"7290f9c2-55ad-4f55-9fcd-e7204310d4dc"],

Cell[TextData[{
 "In Section 1.3, we created a procedure called ",
 StyleBox["nextTA", "Code"],
 ". This function was responsible for producing the truth value assignments \
for the variables. In other words, it produced the rows of the truth table. \
Look again at the membership table above. Observe that the rows correspond to \
the members of the Cartesian product"
}], "Text",ExpressionUUID->"33cd82a2-1d36-440b-93de-016a99ad26f8"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "\[Times]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}]}], "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"0", ",", "0"}], ")"}], ",", 
      RowBox[{"(", 
       RowBox[{"0", ",", "1"}], ")"}], ",", 
      RowBox[{"(", 
       RowBox[{"1", ",", "0"}], ")"}], ",", 
      RowBox[{"(", 
       RowBox[{"1", ",", "1"}], ")"}]}], "}"}], "."}]}], 
  TraditionalForm]], "Equation",ExpressionUUID->"ed0f468b-4a40-4549-a843-\
cac689e4c86c"],

Cell[TextData[{
 "In fact, the Cartesian product is exactly suited to what we need. The rows \
of the table are all the possible choices of 0s and 1s for the variables. The \
Cartesian product of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], TraditionalForm]],ExpressionUUID->
  "50bebacb-0193-4a12-b948-b47fc72870a3"],
 " with itself is the collection of all possible tuples with each entry in \
the tuple equal to 0 or to 1."
}], "Text",ExpressionUUID->"8a38d7cf-cdc8-4748-b3ec-940119157eb4"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Tuples",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Tuples"], "FunctionLink"],
 " function, described earlier, produces the list of all possible tuples \
whose members are given by the first argument and whose size is given by the \
second."
}], "Text",ExpressionUUID->"a55ba7a6-e655-41a4-805b-58eb0ec5066a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tuples", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "3"}], "]"}]], "Input",
 CellLabel->"In[79]:=",ExpressionUUID->"181667bd-230d-4f46-93a0-193cdf1c4f65"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[79]=",ExpressionUUID->"5bd0607a-fb54-4b89-a13c-d4ca8fec74e1"]
}, Open  ]],

Cell["\<\
You can see that the results are identical, in reverse order, to the first \
three columns of Table 2 of Section 2.2 in the textbook.\
\>", "Text",ExpressionUUID->"bcf469a5-fb84-4881-8688-d7d5fa6ef8dd"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Building Sets to Correspond to the Table Rows", "Subsubsection",ExpressionUUID->"71edcc9a-0c8e-4cd3-976b-f8474a0f420b"],

Cell[TextData[{
 "We need to build sets whose entries are determined by the rows of the \
membership table (i.e., by the elements of a Cartesian power of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], TraditionalForm]],ExpressionUUID->
  "9ca2ad24-cbed-4af3-84f1-2ef3edef1b56"],
 ", as above). The sets, corresponding to what we called ",
 StyleBox["setA", "Code"],
 " and ",
 StyleBox["setB", "Code"],
 " in the example, will be stored in a list, e.g., ",
 StyleBox["{setA,setB}", "Code"],
 ". That is, we will create a list of sets. These sets are identified with \
the variables in the identity to be checked as follows: the set in position \
",
 StyleBox["i", "Code"],
 " in the list of sets corresponds to the variable in position ",
 StyleBox["i", "Code"],
 " in the list that results from ",
 StyleBox["getVarsSets", "Code"],
 "."
}], "Text",ExpressionUUID->"d7e54abf-575e-4ec4-b94f-f59f15bf1176"],

Cell[TextData[{
 "Begin by initializing a list of the right size (the number of variables) \
whose entries are the empty set.",
 " We use the ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " function to create multiple copies of the empty set."
}], "Text",ExpressionUUID->"3b6aadc0-f729-42ce-8395-7b74ab95e00a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"memberTableSets", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "3"}], "]"}]}]], "Input",
 CellLabel->"In[80]:=",ExpressionUUID->"33ddcd94-2e0d-48a4-9ac7-1765aa5801f0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[80]=",ExpressionUUID->"38b2bde7-0efb-42ee-89b8-b9ac77b24fcf"]
}, Open  ]],

Cell[TextData[{
 "Note that we can access and modify the lists as usual. For instance, to add \
5 to the second set, we use the ",
 StyleBox[ButtonBox["AppendTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AppendTo"], "FunctionLink"],
 " function, which modifies a list given as the first argument by adding the \
second argument to the end of the list."
}], "Text",ExpressionUUID->"e2cf64b2-9b64-4130-8d5c-70ad0a0df0a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AppendTo", "[", 
  RowBox[{
   RowBox[{"memberTableSets", "[", 
    RowBox[{"[", "2", "]"}], "]"}], ",", "5"}], "]"}]], "Input",
 CellLabel->"In[81]:=",ExpressionUUID->"f4c616f2-c88c-4ab7-ae54-18c4c9dc041e"],

Cell[BoxData[
 RowBox[{"{", "5", "}"}]], "Output",
 CellLabel->"Out[81]=",ExpressionUUID->"4410844b-6e28-474e-83bd-a39e931b3017"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["memberTableSets"], "Input",
 CellLabel->"In[82]:=",ExpressionUUID->"d201c831-de29-486b-85d9-6a7ada6d0139"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[82]=",ExpressionUUID->"6bd2a0bb-bd8c-4304-9592-ed3f249bc804"]
}, Open  ]],

Cell["Reinitialize this so we can use it below.", "Text",ExpressionUUID->"33c980ed-6e2d-4a6c-989a-d288f07ca127"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"memberTableSets", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "3"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[83]:=",ExpressionUUID->"961b26ea-3cbc-4cce-82fc-1ed3377f3d53"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[83]=",ExpressionUUID->"fa6049bd-6395-4c25-b6d5-50bb50cd8cd6"]
}, Open  ]],

Cell["We also compute and store the Cartesian product. ", "Text",ExpressionUUID->"0e3fb2f5-a363-489e-a5a0-b34808effc71"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cartesianMembership", "=", 
  RowBox[{"Tuples", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], ",", "3"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[84]:=",ExpressionUUID->"83ea64b2-3099-41c6-9e45-f4f91872e125"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[84]=",ExpressionUUID->"1aeeb4d1-28e4-4f80-98de-eb87c73bc4f5"]
}, Open  ]],

Cell[TextData[{
 "Now, we use a ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop with a loop variable ",
 StyleBox["rownum", "Input",
  IgnoreSpellCheck->True],
 ". This variable corresponds to the row number in the membership table. The ",
 StyleBox["rownum", "Input",
  IgnoreSpellCheck->True],
 " is also used as the index into the Cartesian product. Remember from the \
discussion above that the row number is added to those sets corresponding to \
1s in the appropriate position. Below, we have the loop print out the index, \
the tuple from the Cartesian product, and the current state of ",
 StyleBox["memberTableSets", "Code"],
 " to show the progress of the sets as they are built."
}], "Text",ExpressionUUID->"358ee70b-b14a-411a-afce-ad0ca59c5888"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"rownum", "=", "1"}], ",", 
   RowBox[{"rownum", "\[LessEqual]", 
    RowBox[{"Length", "[", "cartesianMembership", "]"}]}], ",", 
   RowBox[{"rownum", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"currentTuple", "=", 
     RowBox[{"cartesianMembership", "[", 
      RowBox[{"[", "rownum", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"i", "=", "1"}], ",", 
      RowBox[{"i", "\[LessEqual]", "3"}], ",", 
      RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"currentTuple", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "\[Equal]", "1"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{
          RowBox[{"memberTableSets", "[", 
           RowBox[{"[", "i", "]"}], "]"}], ",", "rownum"}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{
     "rownum", ",", "\"\< \>\"", ",", "currentTuple", ",", "\"\< \>\"", ",", 
      "memberTableSets"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[85]:=",ExpressionUUID->"74b973df-6e04-41c7-9ba1-20e8b9cd5526"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"1", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}]}],
  SequenceForm[1, " ", {0, 0, 0}, " ", {{}, {}, {}}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[85]:=",ExpressionUUID->"d2513a71-3762-4dce-9387-36a69e1cbbf0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"2", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "2", "}"}]}], "}"}]}],
  SequenceForm[2, " ", {0, 0, 1}, " ", {{}, {}, {2}}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[85]:=",ExpressionUUID->"b3ef5ccc-6622-46c6-a337-ec5c447eda7c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"3", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "3", "}"}], ",", 
     RowBox[{"{", "2", "}"}]}], "}"}]}],
  SequenceForm[3, " ", {0, 1, 0}, " ", {{}, {3}, {2}}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[85]:=",ExpressionUUID->"cc0315e7-e847-4a0d-8bca-50eb118696fb"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"4", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1"}], "}"}], 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}]}], "}"}]}],
  SequenceForm[4, " ", {0, 1, 1}, " ", {{}, {3, 4}, {2, 4}}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[85]:=",ExpressionUUID->"272d08dc-978d-4f8e-af77-6a996a823033"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"5", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "5", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}]}], "}"}]}],
  SequenceForm[5, " ", {1, 0, 0}, " ", {{5}, {3, 4}, {2, 4}}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[85]:=",ExpressionUUID->"2ff45ad1-e6eb-40d5-90ff-73d5746a504a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"6", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1"}], "}"}], 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "6"}], "}"}]}], "}"}]}],
  SequenceForm[6, " ", {1, 0, 1}, " ", {{5, 6}, {3, 4}, {2, 4, 6}}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[85]:=",ExpressionUUID->"37570ba0-50cb-4390-8f72-464c7c65a294"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"7", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0"}], "}"}], 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "6", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "6"}], "}"}]}], "}"}]}],
  SequenceForm[7, " ", {1, 1, 0}, " ", {{5, 6, 7}, {3, 4, 7}, {2, 4, 6}}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[85]:=",ExpressionUUID->"9eacdb84-10a3-4e03-ba11-3e55c287a90c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"8", "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}], 
   "\[InvisibleSpace]", "\<\" \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "6", ",", "7", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "7", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}]}], "}"}]}],
  SequenceForm[
  8, " ", {1, 1, 1}, " ", {{5, 6, 7, 8}, {3, 4, 7, 8}, {2, 4, 6, 8}}],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[85]:=",ExpressionUUID->"7a4e7e25-74e6-41c0-ba0a-2cad9a398df0"]
}, Open  ]],

Cell["\<\
We also need the universe represented. The universe, in this context, is the \
set of row numbers.\
\>", "Text",ExpressionUUID->"930f8dd3-0582-4226-aa3f-1e3d58336e94"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ex14U", "=", 
  RowBox[{"Range", "[", "8", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[86]:=",ExpressionUUID->"977f4f71-8782-4806-8671-c499b19570aa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8"}],
   "}"}]], "Output",
 CellLabel->"Out[86]=",ExpressionUUID->"2cfeeec7-0bd1-4247-af50-0220579a9fb8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluating the Identity", "Subsubsection",ExpressionUUID->"7088858d-4b23-4789-896a-bb5163cf88aa"],

Cell[TextData[{
 "Once the list of sets is built up, all that remains is to evaluate the \
identity with these sets in place of the names. We do this with the same \
technique as in Section 1.3 of this manual. We use ",
 StyleBox[ButtonBox["MapThread",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MapThread"], "FunctionLink"],
 " to turn the list of variables obtained by ",
 StyleBox["getVarsSets", "Code"],
 " and the list of sets stored as ",
 StyleBox["memberTableSets", "Code"],
 " into a list of rules."
}], "Text",ExpressionUUID->"ff6d3218-3d4e-4bad-a66d-3b352060a44f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"memberRules", "=", 
  RowBox[{"MapThread", "[", 
   RowBox[{"Rule", ",", 
    RowBox[{"{", 
     RowBox[{"ex14Vars", ",", "memberTableSets"}], "}"}]}], "]"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->"In[87]:=",ExpressionUUID->"70dceef5-9619-4260-919f-0ecf7d0fa7f6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"5", ",", "6", ",", "7", ",", "8"}], "}"}]}], ",", 
   RowBox[{"b", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "7", ",", "8"}], "}"}]}], ",", 
   RowBox[{"c", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}]}]}], "}"}]], "Output",\

 CellLabel->"Out[87]=",ExpressionUUID->"418b97e5-2f55-4736-b8b2-ed3ec5c1c2f5"]
}, Open  ]],

Cell["We add to this a rule for the universe.", "Text",ExpressionUUID->"ad07b92b-6faf-4564-9be7-2c91c15cdbef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AppendTo", "[", 
  RowBox[{"memberRules", ",", 
   RowBox[{"U", "\[Rule]", "ex14U"}]}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[88]:=",ExpressionUUID->"1b1b8686-22d4-4942-a63a-787330ec5f5b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"5", ",", "6", ",", "7", ",", "8"}], "}"}]}], ",", 
   RowBox[{"b", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "7", ",", "8"}], "}"}]}], ",", 
   RowBox[{"c", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}]}], ",", 
   RowBox[{"U", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
      "8"}], "}"}]}]}], "}"}]], "Output",
 CellLabel->"Out[88]=",ExpressionUUID->"0b37f09e-4432-40eb-8e0f-26ae5e996bc4"]
}, Open  ]],

Cell[TextData[{
 "The question we are trying to answer is whether the set expressions stored \
in ",
 StyleBox["ex14L", "Code"],
 " and ",
 StyleBox["ex14R", "Code"],
 " are identical. We use ",
 StyleBox[ButtonBox["ReplaceAll",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReplaceAll"], "FunctionLink"],
 " (",
 StyleBox["/.", "Code"],
 ") to substitute the lists in for the variables in the two expressions."
}], "Text",ExpressionUUID->"c332e06f-3078-4933-bc9c-c29d97eda2f9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ex14L", "/.", "memberRules"}]], "Input",
 CellLabel->"In[89]:=",ExpressionUUID->"101a84c5-0146-4ac0-9178-3e55d084e269"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"Complement", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
      "8"}], "}"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "6", ",", "7", ",", "8"}], "}"}], "\[Union]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "4", ",", "7", ",", "8"}], "}"}], "\[Intersection]", 
      
      RowBox[{"{", 
       RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}]}]}]}], "]"}], 
  "]"}]], "Output",
 CellLabel->"Out[89]=",ExpressionUUID->"a6485b78-84db-43a9-b2a0-37052d9355fc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ex14R", "/.", "memberRules"}]], "Input",
 CellLabel->"In[90]:=",ExpressionUUID->"d364a16a-274e-4ae3-8268-c4e60cce403f"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
         "8"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}]}], "]"}], 
     "\[Union]", 
     RowBox[{"Complement", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
         "8"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4", ",", "7", ",", "8"}], "}"}]}], "]"}]}], ")"}], 
   "\[Intersection]", 
   RowBox[{"Complement", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
       "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6", ",", "7", ",", "8"}], "}"}]}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[90]=",ExpressionUUID->"57491025-e862-4e01-b1fc-69d25a33ad86"]
}, Open  ]],

Cell[TextData[{
 "Observe that the substitution happened within the ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 ". To tell ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " that it should now evaluate the set, we apply ",
 StyleBox[ButtonBox["ReleaseHold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReleaseHold"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"86717d7b-236c-404f-b0e0-09d9b7ffe534"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReleaseHold", "[", 
  RowBox[{"ex14L", "/.", "memberRules"}], "]"}]], "Input",
 CellLabel->"In[91]:=",ExpressionUUID->"5a2b1426-8e55-4bb6-a593-3e4104a6fd12"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Output",
 CellLabel->"Out[91]=",ExpressionUUID->"3d85d2cb-ef03-4221-a775-2a18bdc1ba42"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReleaseHold", "[", 
  RowBox[{"ex14R", "/.", "memberRules"}], "]"}]], "Input",
 CellLabel->"In[92]:=",ExpressionUUID->"dd9fdb42-f584-44c9-92e3-09dc8a83e6ff"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Output",
 CellLabel->"Out[92]=",ExpressionUUID->"5326619d-d682-46ae-87d9-981ff18a9ed8"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Equal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equal"], "FunctionLink"],
 " (",
 StyleBox["==", "Code"],
 ") operator confirms the equality of the sets. To be safe, we apply ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " before using ",
 StyleBox[ButtonBox["Equal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equal"], "FunctionLink"],
 " (",
 StyleBox["==)", "Code"],
 " so as to ensure we do not get an incorrect result due to order or \
duplication."
}], "Text",ExpressionUUID->"9d8bdfc5-7874-4f04-a1dc-7f83f9bfbda3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Union", "[", 
   RowBox[{"ReleaseHold", "[", 
    RowBox[{"ex14L", "/.", "memberRules"}], "]"}], "]"}], "==", 
  RowBox[{"Union", "[", 
   RowBox[{"ReleaseHold", "[", 
    RowBox[{"ex14R", "/.", "memberRules"}], "]"}], "]"}]}]], "Input",
 CellLabel->"In[93]:=",ExpressionUUID->"c7fa25c8-3afc-4248-863a-af081ff82a58"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[93]=",ExpressionUUID->"aa3eb185-8496-4393-827a-220ead39e92f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Function", "Subsubsection",ExpressionUUID->"bab6aa29-94b2-4978-8c4e-692fe40b929a"],

Cell["\<\
Finally, we combine it all into a single function that accepts two held \
expressions as arguments and uses the technique of membership tables to \
determine if the expressions are a set identity.\
\>", "Text",ExpressionUUID->"3d7b134f-e0bd-464a-9cfd-b86d8d9928eb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"membershipTable", "[", 
   RowBox[{"L_", ",", "R_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "vars", ",", "numvars", ",", "cartesian", ",", "setList", ",", "rownum", 
      ",", "currentTuple", ",", "i", ",", "universe", ",", "ruleList"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"vars", "=", 
      RowBox[{"getVarsSets", "[", 
       RowBox[{"{", 
        RowBox[{"L", ",", "R"}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"numvars", "=", 
      RowBox[{"Length", "[", "vars", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"cartesian", "=", 
      RowBox[{"Tuples", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", "numvars"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"setList", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "numvars"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"rownum", "=", "1"}], ",", 
       RowBox[{"rownum", "\[LessEqual]", 
        RowBox[{"2", "^", "numvars"}]}], ",", 
       RowBox[{"rownum", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"currentTuple", "=", 
         RowBox[{"cartesian", "[", 
          RowBox[{"[", "rownum", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"i", "=", "1"}], ",", 
          RowBox[{"i", "\[LessEqual]", "numvars"}], ",", 
          RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"currentTuple", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "\[Equal]", "1"}], ",", 
            RowBox[{"AppendTo", "[", 
             RowBox[{
              RowBox[{"setList", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", "rownum"}], "]"}]}], 
           "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"universe", "=", 
      RowBox[{"Range", "[", 
       RowBox[{"2", "^", "numvars"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ruleList", "=", 
      RowBox[{"MapThread", "[", 
       RowBox[{"Rule", ",", 
        RowBox[{"{", 
         RowBox[{"vars", ",", "setList"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"ruleList", ",", 
       RowBox[{"U", "\[Rule]", "universe"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Union", "[", 
       RowBox[{"ReleaseHold", "[", 
        RowBox[{"L", "/.", "ruleList"}], "]"}], "]"}], "==", 
      RowBox[{"Union", "[", 
       RowBox[{"ReleaseHold", "[", 
        RowBox[{"R", "/.", "ruleList"}], "]"}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->"In[94]:=",ExpressionUUID->"289e5fcb-a074-427f-9ff7-ff98b0774033"],

Cell[TextData[{
 "We now use our function to check that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"A", "-", "B"}], ")"}], "-", "C"}], "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"A", "-", "C"}], ")"}], "-", 
     RowBox[{"(", 
      RowBox[{"B", "-", "C"}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "cf2726bc-bf08-4fe1-b75b-52aed195b484"],
 ". Recall that ",
 StyleBox[ButtonBox["Complement",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Complement"], "FunctionLink"],
 " is in fact an implementation of set difference. "
}], "Text",ExpressionUUID->"d065ea29-8b69-4aad-ae4d-977e01c79a8b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"membershipTable", "[", 
  RowBox[{
   RowBox[{"Hold", "[", 
    RowBox[{"Complement", "[", 
     RowBox[{
      RowBox[{"Complement", "[", 
       RowBox[{"a", ",", "b"}], "]"}], ",", "c"}], "]"}], "]"}], ",", 
   RowBox[{"Hold", "[", 
    RowBox[{"Complement", "[", 
     RowBox[{
      RowBox[{"Complement", "[", 
       RowBox[{"a", ",", "c"}], "]"}], ",", 
      RowBox[{"Complement", "[", 
       RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[95]:=",ExpressionUUID->"90fe74d1-4caf-4577-9934-518017490fe1"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[95]=",ExpressionUUID->"fdada5f3-d8af-4ec3-ac00-636c0b5cc9bc"]
}, Open  ]],

Cell[TextData[{
 "However, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox[
     RowBox[{"A", "\[Union]", "B"}], "_"], "\[NotEqual]", 
    RowBox[{
     OverscriptBox["A", "_"], "\[Union]", 
     OverscriptBox["B", "_"]}]}], TraditionalForm]],ExpressionUUID->
  "e00f463a-1ee9-413c-8809-dcacd73afffa"],
 "."
}], "Text",ExpressionUUID->"345d3b85-b664-4cdc-a003-4834a9d7f818"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"membershipTable", "[", 
  RowBox[{
   RowBox[{"Hold", "[", 
    RowBox[{"Complement", "[", 
     RowBox[{"U", ",", 
      RowBox[{"Union", "[", 
       RowBox[{"a", ",", "b"}], "]"}]}], "]"}], "]"}], ",", 
   RowBox[{"Hold", "[", 
    RowBox[{"Union", "[", 
     RowBox[{
      RowBox[{"Complement", "[", 
       RowBox[{"U", ",", "a"}], "]"}], ",", 
      RowBox[{"Complement", "[", 
       RowBox[{"U", ",", "b"}], "]"}]}], "]"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[96]:=",ExpressionUUID->"bd03a782-ae90-41e7-937d-c4f03a7ee8a4"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[96]=",ExpressionUUID->"bd374097-da54-4b00-b8a8-c166d4b1f6bc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Holding the Argument Automatically", "Subsubsection",ExpressionUUID->"aaef2bea-6ad0-4b70-af44-a1502a3e7efd"],

Cell[TextData[{
 "We have constructed the ",
 StyleBox["membershipTable", "Code"],
 " function with the restriction that the arguments must be manually held \
when the function is called. Here, we will remove this inconvenience. Doing \
so is a bit involved, but reveals a lot about ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s internal workings."
}], "Text",ExpressionUUID->"20a79997-5a0d-436e-9d1c-1924341dc2d9"],

Cell[TextData[{
 "An important consequence of ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " is that we are able to manipulate the contents of an expression with head ",
 StyleBox["Hold", "Code"],
 " without it being evaluated. For example, we might want to change the head ",
 StyleBox["Union", "Code"],
 " to a ",
 StyleBox["List", "Code"],
 ". To achieve this, recall that we can use ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") to access parts of any expression, not just lists. For example, consider \
the expression below."
}], "Text",ExpressionUUID->"573686db-0d54-4968-acb2-8ef99eed2fa5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"partExample", "=", 
  RowBox[{"f", "[", 
   RowBox[{"a", ",", "b", ",", 
    RowBox[{"{", 
     RowBox[{"c", ",", "d"}], "}"}], ",", "e"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[97]:=",ExpressionUUID->"f1213b53-3455-4026-b830-249e33eaaa47"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"a", ",", "b", ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "d"}], "}"}], ",", "e"}], "]"}]], "Output",
 CellLabel->"Out[97]=",ExpressionUUID->"b2658a72-8b9d-4a86-8ae6-bc0d406e6e02"]
}, Open  ]],

Cell["\<\
By accessing the 0 position, we can examine the head of the expression.\
\>", "Text",ExpressionUUID->"0482cd52-6f31-497c-8084-1711191d0232"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"partExample", "[", 
  RowBox[{"[", "0", "]"}], "]"}]], "Input",
 CellLabel->"In[98]:=",ExpressionUUID->"0aef22f5-0db3-43d3-bb0d-b7b7cab10ac3"],

Cell[BoxData["f"], "Output",
 CellLabel->"Out[98]=",ExpressionUUID->"4f365b2c-7946-4e6d-8aef-ad9f6d89f7e3"]
}, Open  ]],

Cell["Positions 1 through 4 access the arguments.", "Text",ExpressionUUID->"c03c22e5-4413-4541-bdaa-a778c639e2c7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"partExample", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellLabel->"In[99]:=",ExpressionUUID->"c73971b7-15f7-40e2-8764-bd225cdc39d9"],

Cell[BoxData["a"], "Output",
 CellLabel->"Out[99]=",ExpressionUUID->"19216cf3-0d33-4e75-b57e-ae42e7743160"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"partExample", "[", 
  RowBox[{"[", "4", "]"}], "]"}]], "Input",
 CellLabel->
  "In[100]:=",ExpressionUUID->"0025c24a-e2fc-48e3-9fe2-33476a6d1c4f"],

Cell[BoxData["e"], "Output",
 CellLabel->
  "Out[100]=",ExpressionUUID->"f41e962c-d53a-4e45-8136-92d25876e1b1"]
}, Open  ]],

Cell[TextData[{
 "The third argument is itself an expression and consequently its head and \
arguments can be accessed by ",
 StyleBox["[[3,\[Ellipsis]]]", "Code"],
 ", where the comma is followed by the position within the subexpression, \
that is, ",
 StyleBox["[[3,0]]", "Code"],
 " for the head, ",
 StyleBox["[[3,1]]", "Code"],
 " for the first argument, etc."
}], "Text",ExpressionUUID->"ee1f3a32-b345-4ad0-8e42-849aff46fb1a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"partExample", "[", 
  RowBox[{"[", 
   RowBox[{"3", ",", "0"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[101]:=",ExpressionUUID->"c4a020b6-7303-4394-a609-94daba1c8674"],

Cell[BoxData["List"], "Output",
 CellLabel->
  "Out[101]=",ExpressionUUID->"651f7a3b-7f4d-4fd8-a4b6-631834c55540"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"partExample", "[", 
  RowBox[{"[", 
   RowBox[{"3", ",", "1"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[102]:=",ExpressionUUID->"85995b1c-fe0c-4cd0-ad64-606d675bcbef"],

Cell[BoxData["c"], "Output",
 CellLabel->
  "Out[102]=",ExpressionUUID->"7aa3fdfd-8ef5-4c2b-861b-5bc9dfb37e8e"]
}, Open  ]],

Cell[TextData[{
 "Recall the example ",
 StyleBox["holdExample", "Code"],
 " we created above."
}], "Text",ExpressionUUID->"ffd7c6d3-28a9-408f-909d-0c040d2daaef"],

Cell[CellGroupData[{

Cell[BoxData["holdExample"], "Input",
 InitializationCell->True,
 CellLabel->
  "In[103]:=",ExpressionUUID->"1b48371e-eee3-48b3-bd42-583abbb6675f"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{"a", "\[Intersection]", "b"}], "\[Union]", 
   RowBox[{"a", "\[Intersection]", "c"}]}], "]"}]], "Output",
 CellLabel->
  "Out[103]=",ExpressionUUID->"7990ef1c-72a0-4fbb-a3c1-b5a78fb5f592"]
}, Open  ]],

Cell[TextData[{
 "In this held expression, the index ",
 StyleBox["[[1]]", "Code"],
 " refers to the set expression, while ",
 StyleBox["[[1,0]]", "Code"],
 " refers to the head of the set expression. Thus, assigning that to the ",
 StyleBox["List", "Code"],
 " head will transform the union into a list. Moreover, this change is \
accomplished without any part of the held expression being evaluated."
}], "Text",ExpressionUUID->"b92b08fa-729d-4b9f-9871-a55098a36e74"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"holdExample", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "0"}], "]"}], "]"}], "=", "List"}], 
  ";"}], "\[IndentingNewLine]", "holdExample"}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[104]:=",ExpressionUUID->"e34c19ac-8aab-4c16-869c-e0f61ee30253"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"a", "\[Intersection]", "b"}], ",", 
    RowBox[{"a", "\[Intersection]", "c"}]}], "}"}], "]"}]], "Output",
 CellLabel->
  "Out[105]=",ExpressionUUID->"0ad19466-97d3-4d6b-895f-f583354cfc2a"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Extract",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Extract"], "FunctionLink"],
 " function allows you to pull out a part of an expression and nearly \
simultaneously apply a head to the part accessed. The first argument is the \
main expression you wish to extract from, the second argument is a list \
specifying the position being extracted, and the third argument is the head \
you wish to apply to the extracted part. For example, we can extract the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "\[Intersection]", "c"}], TraditionalForm]],ExpressionUUID->
  "81710868-2ccc-4cec-b1b6-b3b2a4dba3d3"],
 " from ",
 StyleBox["holdExample", "Code"],
 " and ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " it, as follows. "
}], "Text",ExpressionUUID->"129c755b-f3cb-40cb-a8d3-1ec712f2d4f6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{"holdExample", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", "Hold"}], "]"}]], "Input",
 CellLabel->
  "In[106]:=",ExpressionUUID->"a894c119-bad6-4e63-8ca9-f9c5894c881a"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"a", "\[Intersection]", "c"}], "]"}]], "Output",
 CellLabel->
  "Out[106]=",ExpressionUUID->"b10a0154-c71c-48a1-a124-65bbabb96be5"]
}, Open  ]],

Cell[TextData[{
 "While ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " acts on an expression to explicitly prevent its evaluation, ",
 StyleBox[ButtonBox["HoldAll",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldAll"], "FunctionLink"],
 " is an attribute that tells a function to delay evaluation of its \
arguments. Ordinarily, when you evaluate an expression involving a function \
call, any arguments to the function are evaluated first, before they are sent \
to the function. Our ultimate goal in this section is to write functions that \
can operate on set expressions. In particular, we would like to be able to \
call expressions like the one shown below to create a membership table for a \
set."
}], "Text",ExpressionUUID->"5b5aefcf-bfc0-419b-a4c3-fb0a38501069"],

Cell[BoxData[
 RowBox[{"membershipTable", "[", 
  RowBox[{
   RowBox[{"Complement", "[", 
    RowBox[{"U", ",", 
     RowBox[{"Union", "[", 
      RowBox[{"a", ",", "b"}], "]"}]}], "]"}], ",", 
   RowBox[{"Union", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"U", ",", "a"}], "]"}], ",", 
     RowBox[{"Complement", "[", 
      RowBox[{"U", ",", "b"}], "]"}]}], "]"}]}], "]"}]], "Input",
 Evaluatable->False,
 InitializationCell->
  False,ExpressionUUID->"6c2b7942-7bce-402f-9e47-cfcb40bc39e9"],

Cell[TextData[{
 "In order for the above to work, either we must include a ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " as part of the argument each time we want to use the function, as we did \
above, or we have to prevent ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " from evaluating the argument long enough for us to explicitly place a ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " on the argument within the body of the function definition. Clearly, \
avoiding the need for including ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " with every function call is preferable. The ",
 StyleBox[ButtonBox["HoldAll",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldAll"], "FunctionLink"],
 " attribute allows us to do this."
}], "Text",ExpressionUUID->"16709508-4035-4966-b828-1b488bc2cd65"],

Cell[TextData[{
 "To see how this works, we will design a small function to use as an \
example. This function will print its argument as entered by applying ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " to the argument. ",
 "Here is the definition of the function."
}], "Text",ExpressionUUID->"0924e896-f008-4608-87e8-ac788cb76939"],

Cell[BoxData[
 RowBox[{
  RowBox[{"printHold", "[", "x_", "]"}], ":=", 
  RowBox[{"Print", "[", 
   RowBox[{"Hold", "[", "x", "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[107]:=",ExpressionUUID->"046adf82-8769-412b-be2b-ed2ecedf7f15"],

Cell[TextData[{
 "We expect this function to take an argument, for instance ",
 StyleBox["1+2", "Code"],
 ", and print ",
 StyleBox["1+2", "Code"],
 " (with the ",
 StyleBox["Hold", "Code"],
 " head). For the moment, however, it does not."
}], "Text",ExpressionUUID->"bbde9fb7-c569-436d-9291-0a7d7cf561e7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"printHold", "[", 
  RowBox[{"1", "+", "2"}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[108]:=",ExpressionUUID->"5430fd6e-abdd-46b2-afb8-1d74e224e469"],

Cell[BoxData[
 RowBox[{"Hold", "[", "3", "]"}]], "Print",
 CellLabel->
  "During evaluation of \
In[108]:=",ExpressionUUID->"18f81d5e-23eb-4972-993a-b94d98c13fa2"]
}, Open  ]],

Cell[TextData[{
 "The problem is that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is evaluating the argument, ",
 StyleBox["1+2", "Code"],
 ", before actually applying the function. Thus, when the body of the \
function is called, ",
 StyleBox["x", "Code"],
 " has value ",
 StyleBox["3", "Code"],
 ", not ",
 StyleBox["1+2", "Code"],
 ". To fix this, we assign the ",
 StyleBox[ButtonBox["HoldAll",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldAll"], "FunctionLink"],
 " attribute to the function by calling ",
 StyleBox[ButtonBox["SetAttributes",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SetAttributes"], "FunctionLink"],
 " with the function name and the name of the attribute as arguments."
}], "Text",ExpressionUUID->"b1bdc343-760b-4873-9b7c-4129a24222f8"],

Cell[BoxData[
 RowBox[{"SetAttributes", "[", 
  RowBox[{"printHold", ",", "HoldAll"}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[109]:=",ExpressionUUID->"3032e32b-027b-4152-89ff-9f88d59efc1c"],

Cell[TextData[{
 "Now when we execute the function, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " does not evaluate the argument, so that the explicit ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " is able to be applied to the expression ",
 StyleBox["1+2", "Code"],
 "."
}], "Text",ExpressionUUID->"d71b2236-c0b1-4f5e-899e-9e0afe881c70"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"printHold", "[", 
  RowBox[{"1", "+", "2"}], "]"}]], "Input",
 CellLabel->
  "In[110]:=",ExpressionUUID->"726f70bd-735a-435c-9e32-a6489ca127b8"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"1", "+", "2"}], "]"}]], "Print",
 CellLabel->
  "During evaluation of \
In[110]:=",ExpressionUUID->"3822fdfd-d08c-4121-b8e8-d21cc87ecf78"]
}, Open  ]],

Cell[TextData[{
 "Note that the ",
 StyleBox[ButtonBox["HoldAll",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldAll"], "FunctionLink"],
 " attribute is a bit of a misnomer. It does not cause the arguments to the \
function to be held, in the sense of applying the ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " function to them. It is a temporary hold, and the first time the argument \
is used within the body of the function definition, it will be evaluated, \
unless it is explicitly held. In other words, the ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " within the ",
 StyleBox[ButtonBox["Print",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Print"], "FunctionLink"],
 " is required, or else 1+2 will be evaluated to 3 within the execution of ",
 StyleBox[ButtonBox["Print",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Print"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"d52c8e41-5b3e-40df-a178-0fd8e69cdcf9"],

Cell[TextData[{
 "In addition to calling ",
 StyleBox["membershipTable", "Code"],
 " with set expressions, we also want to be able to apply the function to \
symbols that store set expressions. Using ",
 StyleBox[ButtonBox["SetDelayed",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SetDelayed"], "FunctionLink"],
 " (",
 StyleBox[":=", "Code"],
 "), we can assign an expression to a symbol without the expression being \
evaluated."
}], "Text",ExpressionUUID->"13214da6-5460-4048-8907-8210871894c7"],

Cell[BoxData[
 RowBox[{"delayedExample", ":=", 
  RowBox[{"Union", "[", 
   RowBox[{
    RowBox[{"Intersection", "[", 
     RowBox[{"a", ",", "b"}], "]"}], ",", 
    RowBox[{"Intersection", "[", 
     RowBox[{"a", ",", "c"}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[111]:=",ExpressionUUID->"e6e52491-ee10-4787-bc16-17c6ba33b32e"],

Cell[TextData[{
 "Because we used ",
 StyleBox[ButtonBox["SetDelayed",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SetDelayed"], "FunctionLink"],
 " (",
 StyleBox[":=", "Code"],
 "), the symbol ",
 StyleBox["delayedExample", "Code"],
 " holds the unevaluated expression. However, if we evaluate the symbol, we \
are faced with the warnings and unwanted simplification that we saw before."
}], "Text",ExpressionUUID->"99244df3-c702-4eae-b945-10ec78249c3a"],

Cell[CellGroupData[{

Cell[BoxData["delayedExample"], "Input",
 CellLabel->
  "In[112]:=",ExpressionUUID->"ac9b0581-354c-4755-b63a-ce439a6593fc"],

Cell[BoxData[
 TemplateBox[{
  "Intersection","normal",
   "\"Nonatomic expression expected at position \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"a\\\", \\\"\
\[Intersection]\\\", \\\"b\\\"}]\\).\"",2,112,10,22491832706348855871,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[112]:=",ExpressionUUID->"5c776cfd-185e-48a6-97da-92c377633687"],

Cell[BoxData[
 TemplateBox[{
  "Intersection","normal",
   "\"Nonatomic expression expected at position \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"a\\\", \\\"\
\[Intersection]\\\", \\\"c\\\"}]\\).\"",2,112,11,22491832706348855871,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[112]:=",ExpressionUUID->"8f9a198c-8c3c-4db7-bcd0-7ace64a1c3a0"],

Cell[BoxData[
 TemplateBox[{
  "Intersection","normal",
   "\"Nonatomic expression expected at position \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"a\\\", \\\"\
\[Intersection]\\\", \\\"b\\\", \\\"\[Intersection]\\\", \\\"c\\\"}]\\).\"",2,
   112,12,22491832706348855871,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[112]:=",ExpressionUUID->"4486a799-996a-4698-b23b-430f639c5bba"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Intersection\\\", \
\\\"::\\\", \\\"normal\\\"}], \\\"MessageName\\\"]\\) will be suppressed \
during this calculation.\"",2,112,13,22491832706348855871,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[112]:=",ExpressionUUID->"1e0d32a1-df63-4d3a-bf77-2578ac9ab84b"],

Cell[BoxData[
 RowBox[{"a", "\[Intersection]", "b", "\[Intersection]", "c"}]], "Output",
 CellLabel->
  "Out[112]=",ExpressionUUID->"895530e9-cd5e-4c7c-bd4a-01f3145d7eeb"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox["printHold", "Code"],
 " function, applied to the symbol, does not print the expression."
}], "Text",ExpressionUUID->"be23619f-70d0-47a5-b018-d9b699bb79b5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"printHold", "[", "delayedExample", "]"}]], "Input",
 CellLabel->
  "In[113]:=",ExpressionUUID->"b66ab92f-4de8-4442-b502-58bb4544b5ce"],

Cell[BoxData[
 RowBox[{"Hold", "[", "delayedExample", "]"}]], "Print",
 CellLabel->
  "During evaluation of \
In[113]:=",ExpressionUUID->"6eb85ff4-0c5c-4687-9cba-50c418299a1f"]
}, Open  ]],

Cell[TextData[{
 "We seem to have a conundrum. We cannot allow the symbol to be evaluated or \
it will produce errors, but if we do not evaluate it, all we see is the name \
of the symbol. To deal with this, we will use ",
 StyleBox[ButtonBox["OwnValues",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/OwnValues"], "FunctionLink"],
 ", a function that reveals the value assigned to a symbol, expressed as a \
list of transformation rules. Observe what happens when we apply ",
 StyleBox[ButtonBox["OwnValues",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/OwnValues"], "FunctionLink"],
 " to ",
 StyleBox["delayedExample", "Code"],
 "."
}], "Text",ExpressionUUID->"92a11ec9-6922-4400-80f5-11d6ed738907"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OwnValues", "[", "delayedExample", "]"}]], "Input",
 CellLabel->
  "In[114]:=",ExpressionUUID->"fb776ba8-b7a6-427d-8e39-b194e6fb5641"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"HoldPattern", "[", "delayedExample", "]"}], "\[RuleDelayed]", 
   RowBox[{
    RowBox[{"a", "\[Intersection]", "b"}], "\[Union]", 
    RowBox[{"a", "\[Intersection]", "c"}]}]}], "}"}]], "Output",
 CellLabel->
  "Out[114]=",ExpressionUUID->"beda263e-6d16-465b-8cdb-0494612c0a7b"]
}, Open  ]],

Cell[TextData[{
 "Let us explain this output a bit. First, the ",
 StyleBox[ButtonBox["HoldPattern",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldPattern"], "FunctionLink"],
 " function, which is applied to the name ",
 StyleBox["delayedExample", "Code"],
 ", can be thought of, in this context, as a hold for the left-hand side of a \
rule. The \[RuleDelayed] symbol is for ",
 StyleBox[ButtonBox["RuleDelayed",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RuleDelayed"], "FunctionLink"],
 ", indicating that our assignment was delayed. Finally, the right-hand side \
of the \[RuleDelayed] is our original assignment."
}], "Text",ExpressionUUID->"394574c7-caea-486f-9e02-de671a8366cc"],

Cell[TextData[{
 "By looking at this in ",
 ButtonBox["FullForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FullForm"],
 ", we can more easily see how we can access the expression."
}], "Text",ExpressionUUID->"62e2f45b-ac4e-457b-a4be-6811c7d99a38"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"OwnValues", "[", "delayedExample", "]"}], "//", 
  "FullForm"}]], "Input",
 CellLabel->
  "In[115]:=",ExpressionUUID->"619b7041-697c-48ed-8647-5bd1780d5c49"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"List", "[", 
    RowBox[{"RuleDelayed", "[", 
     RowBox[{
      RowBox[{"HoldPattern", "[", "delayedExample", "]"}], ",", 
      RowBox[{"Union", "[", 
       RowBox[{
        RowBox[{"Intersection", "[", 
         RowBox[{"a", ",", "b"}], "]"}], ",", 
        RowBox[{"Intersection", "[", 
         RowBox[{"a", ",", "c"}], "]"}]}], "]"}]}], "]"}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[115]//FullForm=",ExpressionUUID->"2ac85e37-0372-4274-af49-\
22de4ec0ed6a"]
}, Open  ]],

Cell[TextData[{
 "This expression is a list containing a single element. That element has \
head ",
 StyleBox[ButtonBox["RuleDelayed",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RuleDelayed"], "FunctionLink"],
 ", which itself has two arguments, the second of which is our expression. \
Consequently, we can access the expression by use of ",
 StyleBox["[[1,2]]", "Code"],
 "."
}], "Text",ExpressionUUID->"f50cd16b-e65d-464c-a1aa-2c3fd07d5f09"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"OwnValues", "[", "delayedExample", "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "2"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[116]:=",ExpressionUUID->"a4f7fd6e-89bf-408f-b39a-f86a09a0f35d"],

Cell[BoxData[
 TemplateBox[{
  "Intersection","normal",
   "\"Nonatomic expression expected at position \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"a\\\", \\\"\
\[Intersection]\\\", \\\"b\\\", \\\"\[Intersection]\\\", \\\"c\\\"}]\\).\"",2,
   116,14,22491832706348855871,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[116]:=",ExpressionUUID->"a3acb5d2-e927-41a6-9432-eb32110be102"],

Cell[BoxData[
 RowBox[{"a", "\[Intersection]", "b", "\[Intersection]", "c"}]], "Output",
 CellLabel->
  "Out[116]=",ExpressionUUID->"337097cf-1c78-4be6-83d0-3688161f7ab9"]
}, Open  ]],

Cell[TextData[{
 "Sadly, as soon as we access the expression, it is evaluated. Therefore, we \
use ",
 StyleBox[ButtonBox["Extract",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Extract"], "FunctionLink"],
 " instead."
}], "Text",ExpressionUUID->"c5244345-05ca-4c22-a350-5461dbe8794d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{
   RowBox[{"OwnValues", "[", "delayedExample", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", "Hold"}], "]"}]], "Input",
 CellLabel->
  "In[117]:=",ExpressionUUID->"3b435612-f884-4c5c-930a-029d42af0b2a"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{"a", "\[Intersection]", "b"}], "\[Union]", 
   RowBox[{"a", "\[Intersection]", "c"}]}], "]"}]], "Output",
 CellLabel->
  "Out[117]=",ExpressionUUID->"0764ee5e-9109-40cd-8ba7-e65f11add6d5"]
}, Open  ]],

Cell[TextData[{
 "We now know how to handle the argument to our function, whether it is an \
expression or a symbol that is assigned to an expression. To distinguish \
between these, we only need to test whether the head of the input is ",
 StyleBox[ButtonBox["Symbol",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Symbol"], "FunctionLink"],
 " or not. Given the argument to a function with ",
 StyleBox[ButtonBox["HoldAll",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldAll"], "FunctionLink"],
 " attribute, we can determine the head of the argument, while still \
preventing the argument from being evaluated, as follows: apply ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 " explicitly and then access ",
 StyleBox["[[1,0]]", "Code"],
 ". This is the correct \
\[OpenCurlyDoubleQuote]address\[CloseCurlyDoubleQuote] for the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") operator because the 1 refers to the argument of the ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 ", and the 0 then refers to the head of what is being held."
}], "Text",ExpressionUUID->"48edf6e9-e75e-4e84-a727-71f26332980c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Hold", "[", "delayedExample", "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "0"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[118]:=",ExpressionUUID->"931daacc-a3e6-4edc-8c12-fc548ce30032"],

Cell[BoxData["Symbol"], "Output",
 CellLabel->
  "Out[118]=",ExpressionUUID->"e9814a6c-9d82-4cc9-9d76-986e17e4c786"]
}, Open  ]],

Cell[TextData[{
 "Here now is our improved version of the ",
 StyleBox["printHold", "Code"],
 " function. Recall that it was previously given the ",
 StyleBox[ButtonBox["HoldAll",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldAll"], "FunctionLink"],
 " attribute."
}], "Text",ExpressionUUID->"12a7e1bc-58b7-4770-8048-98d51317302a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"printHold", "[", "x_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "y", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Hold", "[", "x", "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", "0"}], "]"}], "]"}], "===", "Symbol"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"y", "=", 
        RowBox[{"Extract", "[", 
         RowBox[{
          RowBox[{"OwnValues", "[", "x", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], ",", "Hold"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"y", "=", 
        RowBox[{"Hold", "[", "x", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "y", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellLabel->
  "In[119]:=",ExpressionUUID->"e1e00279-544a-4d84-9f6d-5d7c3ddc3399"],

Cell[TextData[{
 "If we pass a variable to ",
 StyleBox["printHold", "Code"],
 ", the ",
 StyleBox[ButtonBox["If",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/If"], "FunctionLink"],
 " condition identifies it as a symbol and uses ",
 StyleBox[ButtonBox["Extract",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Extract"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["OwnValues",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/OwnValues"], "FunctionLink"],
 " to get access to the definition."
}], "Text",ExpressionUUID->"f932b056-78eb-4069-9ee9-55f5d8289ea5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"printHold", "[", "delayedExample", "]"}]], "Input",
 CellLabel->
  "In[120]:=",ExpressionUUID->"1f958ad2-1b18-4bf2-a360-4de519d67350"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{"a", "\[Intersection]", "b"}], "\[Union]", 
   RowBox[{"a", "\[Intersection]", "c"}]}], "]"}]], "Print",
 CellLabel->
  "During evaluation of \
In[120]:=",ExpressionUUID->"034c67cc-db42-4211-b56c-fbbe808e9eba"]
}, Open  ]],

Cell["\<\
On the other hand, if we give it an expression, then the argument is not a \
symbol and is held just as it was called.\
\>", "Text",ExpressionUUID->"9d87c704-d2a2-49d5-aa98-f929c7ee912b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"printHold", "[", 
  RowBox[{"1", "+", "2"}], "]"}]], "Input",
 CellLabel->
  "In[121]:=",ExpressionUUID->"6dc7770d-efa2-4317-9dad-c046abc5aff3"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"1", "+", "2"}], "]"}]], "Print",
 CellLabel->
  "During evaluation of \
In[121]:=",ExpressionUUID->"d11d33af-739c-4872-ba68-cb5a475440fb"]
}, Open  ]],

Cell[TextData[{
 "We also want the function to behave properly if it is given an explicitly \
held expression. In particular, we want to avoid nesting holds. To do this, \
we replace the ",
 StyleBox[ButtonBox["If",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/If"], "FunctionLink"],
 " statement with a ",
 StyleBox[ButtonBox["Switch",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Switch"], "FunctionLink"],
 ". The first argument of a ",
 StyleBox[ButtonBox["Switch",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Switch"], "FunctionLink"],
 " is evaluated. In this case, the first argument will evaluate to the head \
of the input. The ",
 StyleBox[ButtonBox["Switch",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Switch"], "FunctionLink"],
 " then looks at the even indexed arguments until it finds one that matches \
the result of the first argument and it evaluates the argument after the one \
that matches. We include a ",
 StyleBox[ButtonBox["Blank",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Blank"], "FunctionLink"],
 " (",
 StyleBox["_", "Code"],
 ") as the next to last argument, which means that the final argument will \
serve as a default."
}], "Text",ExpressionUUID->"9813128b-4298-45c9-b8e9-01c6a32c27d0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"printHold", "[", "x_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "y", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Hold", "[", "x", "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "0"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
       "Hold", ",", 
       RowBox[{"y", "=", "x"}], ",", "\[IndentingNewLine]", "Symbol", ",", 
       RowBox[{"y", "=", 
        RowBox[{"Extract", "[", 
         RowBox[{
          RowBox[{"OwnValues", "[", "x", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], ",", "Hold"}], "]"}]}], ",", 
       "\[IndentingNewLine]", "_", ",", 
       RowBox[{"y", "=", 
        RowBox[{"Hold", "[", "x", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "y", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[122]:=",ExpressionUUID->"91e0d96d-4f14-472e-a917-6c06899f85fb"],

Cell["\<\
We will be using this technique several times in what follows, so we \
encapsulate it as its own function.\
\>", "Text",ExpressionUUID->"84e91e73-bfe1-4259-ba3c-a90bb54f5738"],

Cell[BoxData[
 RowBox[{"SetAttributes", "[", 
  RowBox[{"holdArgument", ",", "HoldAll"}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[123]:=",ExpressionUUID->"173baf72-4447-4fac-b8a5-ccb9905af50b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"holdArgument", "[", "x_", "]"}], ":=", 
  RowBox[{"Switch", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Hold", "[", "x", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "0"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
    "Hold", ",", "x", ",", "\[IndentingNewLine]", "Symbol", ",", 
    RowBox[{"Extract", "[", 
     RowBox[{
      RowBox[{"OwnValues", "[", "x", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", "Hold"}], "]"}], ",", 
    "\[IndentingNewLine]", "_", ",", 
    RowBox[{"Hold", "[", "x", "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[124]:=",ExpressionUUID->"60aa19d1-fc3f-4e61-81c1-4821c009c3fe"],

Cell[TextData[{
 "This allows us to embed this part of the argument processing into the \
declaration of the module variables, as shown in the following alternate \
version of ",
 StyleBox["printHold", "Code"],
 "."
}], "Text",ExpressionUUID->"6f99d2ff-6d64-462b-a686-2c188035a12b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"printHold2", "[", "x_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"y", "=", 
      RowBox[{"holdArgument", "[", "x", "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Print", "[", "y", "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[125]:=",ExpressionUUID->"d9e0f65b-516e-45af-93e4-7356a8718ddd"],

Cell[BoxData[
 RowBox[{"SetAttributes", "[", 
  RowBox[{"printHold2", ",", "HoldAll"}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[126]:=",ExpressionUUID->"c942e6e3-22ff-4d97-9e33-f613244bc504"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"printHold2", "[", "delayedExample", "]"}]], "Input",
 CellLabel->
  "In[127]:=",ExpressionUUID->"1c013ec1-b9dc-4f13-ae5b-1e6fd9187238"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{"a", "\[Intersection]", "b"}], "\[Union]", 
   RowBox[{"a", "\[Intersection]", "c"}]}], "]"}]], "Print",
 CellLabel->
  "During evaluation of \
In[127]:=",ExpressionUUID->"1e5c5303-ccf2-4645-8555-52a1fad6ff36"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"printHold2", "[", 
  RowBox[{"1", "+", "2"}], "]"}]], "Input",
 CellLabel->
  "In[128]:=",ExpressionUUID->"b4b3c4eb-0ab3-4125-9d39-936159a27c33"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"1", "+", "2"}], "]"}]], "Print",
 CellLabel->
  "During evaluation of \
In[128]:=",ExpressionUUID->"1ecd83a3-00fc-4df9-8d80-460cac2276f9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"printHold2", "[", 
  RowBox[{"Hold", "[", 
   RowBox[{"p", "&&", "q"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[129]:=",ExpressionUUID->"4bbcdb03-abf1-4c58-bbd6-62518d6db539"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"p", "&&", "q"}], "]"}]], "Print",
 CellLabel->
  "During evaluation of \
In[129]:=",ExpressionUUID->"6c28131d-e1bc-4029-960f-3fd04b75a7ff"]
}, Open  ]],

Cell[TextData[{
 "We now use the ",
 StyleBox["holdArgument", "Code"],
 " function to update ",
 StyleBox["membershipTable", "Code"],
 "."
}], "Text",ExpressionUUID->"24ca0be4-a00b-484a-a530-ee014c5d6644"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"membershipTable", ",", "HoldAll"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"membershipTable", "[", 
    RowBox[{"LS_", ",", "RS_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"L", "=", 
        RowBox[{"holdArgument", "[", "LS", "]"}]}], ",", 
       RowBox[{"R", "=", 
        RowBox[{"holdArgument", "[", "RS", "]"}]}], ",", "vars", ",", 
       "numvars", ",", "cartesian", ",", "setList", ",", "rownum", ",", 
       "currentTuple", ",", "i", ",", "universe", ",", "ruleList"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"vars", "=", 
       RowBox[{"getVarsSets", "[", 
        RowBox[{"{", 
         RowBox[{"L", ",", "R"}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"numvars", "=", 
       RowBox[{"Length", "[", "vars", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"cartesian", "=", 
       RowBox[{"Tuples", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", "numvars"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"setList", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "numvars"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"rownum", "=", "1"}], ",", 
        RowBox[{"rownum", "\[LessEqual]", 
         RowBox[{"2", "^", "numvars"}]}], ",", 
        RowBox[{"rownum", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"currentTuple", "=", 
          RowBox[{"cartesian", "[", 
           RowBox[{"[", "rownum", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"i", "=", "1"}], ",", 
           RowBox[{"i", "\[LessEqual]", "numvars"}], ",", 
           RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"currentTuple", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "\[Equal]", "1"}], ",", 
             RowBox[{"AppendTo", "[", 
              RowBox[{
               RowBox[{"setList", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", "rownum"}], "]"}]}], 
            "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"universe", "=", 
       RowBox[{"Range", "[", 
        RowBox[{"2", "^", "numvars"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ruleList", "=", 
       RowBox[{"MapThread", "[", 
        RowBox[{"Rule", ",", 
         RowBox[{"{", 
          RowBox[{"vars", ",", "setList"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"ruleList", ",", 
        RowBox[{"U", "\[Rule]", "universe"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Union", "[", 
        RowBox[{"ReleaseHold", "[", 
         RowBox[{"L", "/.", "ruleList"}], "]"}], "]"}], "==", 
       RowBox[{"Union", "[", 
        RowBox[{"ReleaseHold", "[", 
         RowBox[{"R", "/.", "ruleList"}], "]"}], "]"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[130]:=",ExpressionUUID->"f3613d10-c9b9-4ce1-898a-d0b5d48875ef"],

Cell[TextData[{
 "We can now omit the explicit calls to ",
 StyleBox[ButtonBox["Hold",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Hold"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"531f0bd4-243a-4879-82fa-6426f9471da4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"membershipTable", "[", 
  RowBox[{
   RowBox[{"Complement", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"a", ",", "b"}], "]"}], ",", "c"}], "]"}], ",", 
   RowBox[{"Complement", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"a", ",", "c"}], "]"}], ",", 
     RowBox[{"Complement", "[", 
      RowBox[{"b", ",", "c"}], "]"}]}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[132]:=",ExpressionUUID->"0b2adf13-392c-4515-b498-0ba9fb276fa6"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[132]=",ExpressionUUID->"4103509d-5680-4b93-8f9d-756ec1442aad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"membershipTable", "[", 
  RowBox[{
   RowBox[{"Complement", "[", 
    RowBox[{"U", ",", 
     RowBox[{"Union", "[", 
      RowBox[{"a", ",", "b"}], "]"}]}], "]"}], ",", 
   RowBox[{"Union", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"U", ",", "a"}], "]"}], ",", 
     RowBox[{"Complement", "[", 
      RowBox[{"U", ",", "b"}], "]"}]}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[133]:=",ExpressionUUID->"3f694ed5-675d-40b8-be14-f5c894a0acb2"],

Cell[BoxData["False"], "Output",
 CellLabel->
  "Out[133]=",ExpressionUUID->"9c20460a-dc47-45d5-9c26-e09e08d323e1"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computer Representation of Fuzzy Sets", "Subsection",
 CellTags->"Section2c",ExpressionUUID->"ab9c1ee4-ca67-412b-853f-85a495c37cd5"],

Cell["\<\
The textbook describes a way to represent sets as bit strings in order to \
efficiently store and compute with them. Here, we will explore this idea \
further in order to see how we can represent fuzzy sets in the Wolfram \
Language. Fuzzy sets are described in the preamble to Exercise 73 in Section \
2.2.\
\>", "Text",ExpressionUUID->"b878bc55-6505-4dca-a7e7-ec0e5ba3164e"],

Cell[CellGroupData[{

Cell["Three Representations of Fuzzy Sets", "Subsubsection",ExpressionUUID->"29a69d51-43ae-465f-a25f-6a7bc264bcb6"],

Cell["\<\
In a fuzzy set, every element has an associated degree of membership, which \
is a real number between 0 and 1. We will represent fuzzy sets in three \
different ways.\
\>", "Text",ExpressionUUID->"c9abcaac-38c6-44c5-837d-f21402f51abc"],

Cell["\<\
The first way we can represent a fuzzy set in the Wolfram Language is to \
combine the element with the degree of membership as a two-element list. For \
example, if the elements of our fuzzy set are the letters \
\[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]b\
\[CloseCurlyDoubleQuote], and \
\[OpenCurlyDoubleQuote]e\[CloseCurlyDoubleQuote], where \
\[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote] has degree of membership \
0.3, \[OpenCurlyDoubleQuote]b\[CloseCurlyDoubleQuote] has degree 0.7, and \
\[OpenCurlyDoubleQuote]e\[CloseCurlyDoubleQuote] has degree 0.1, then we \
would represent the set as:\
\>", "Text",ExpressionUUID->"6cf701c8-84c0-4164-9991-1f5fc3d29e02"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fuzzyRoster", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<a\>\"", ",", "0.3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<b\>\"", ",", "0.7"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<e\>\"", ",", "0.1"}], "}"}]}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[134]:=",ExpressionUUID->"8419fc7a-a416-49c9-bb20-55921efa2346"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "0.3`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "0.7`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"e\"\>", ",", "0.1`"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[134]=",ExpressionUUID->"82818ea6-e958-4043-bd34-3e7f0cb006d3"]
}, Open  ]],

Cell["\<\
We refer to this as the \[OpenCurlyDoubleQuote]roster representation\
\[CloseCurlyDoubleQuote] of the fuzzy set.\
\>", "Text",ExpressionUUID->"9426bcb1-e189-4728-ac6d-2ebe7468c859"],

Cell["\<\
The second approach is to use a \[OpenCurlyDoubleQuote]fuzzy-bit string,\
\[CloseCurlyDoubleQuote] similar to how the main text uses bit strings to \
represent ordinary sets. First, we need to specify the universe and impose an \
order on it. Suppose the universe consists of the letters \
\[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote] through \
\[OpenCurlyDoubleQuote]g\[CloseCurlyDoubleQuote] ordered alphabetically. \
\>", "Text",ExpressionUUID->"c485ae2d-a43f-4987-b062-1a5c0630fcd7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fuzzyU", "=", 
  RowBox[{"{", 
   RowBox[{
   "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\"", ",", 
    "\"\<e\>\"", ",", "\"\<f\>\"", ",", "\"\<g\>\""}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[135]:=",ExpressionUUID->"9cee6ead-b1d0-4ed7-bfe4-bb6b4caaadd1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[135]=",ExpressionUUID->"327fab6e-7095-4e79-bce3-f65e0ae9a988"]
}, Open  ]],

Cell[TextData[{
 "The fuzzy-bit string for the set ",
 StyleBox["fuzzyR", "Code"],
 " will be the list of the degrees of membership of each element of the \
universe with 0 indicating ",
 StyleBox["nonmembership",
  IgnoreSpellCheck->True],
 "."
}], "Text",ExpressionUUID->"9585a787-851a-49f7-a78f-171703552ee1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fuzzyBitString", "=", 
  RowBox[{"{", 
   RowBox[{
   "0.3", ",", "0.7", ",", "0", ",", "0", ",", "0.1", ",", "0", ",", "0"}], 
   "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[136]:=",ExpressionUUID->"45e8e75f-9cfb-4aa4-bda4-ab9a6daea0e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.3`", ",", "0.7`", ",", "0", ",", "0", ",", "0.1`", ",", "0", ",", "0"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[136]=",ExpressionUUID->"26f874bd-249e-4c01-8014-0be299b8cf9f"]
}, Open  ]],

Cell[TextData[{
 "The third approach we\[CloseCurlyQuote]ll use to represent fuzzy sets \
requires more explanation but is the most natural, from a programming \
perspective. An ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 ", also referred to as a dictionary, associative array, map, or hash table \
in various languages, is a fundamental data type. From a mathematical \
perspective, an ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 " is a function (see Section 2.3 of the main text). In computer science, it \
is described as a collection of key\[Dash]value pairs. You can think of an \
association as an generalization of a list. Given a list, you can extract the \
first element, the second element, etc."
}], "Text",ExpressionUUID->"cedccc48-da5a-4ab4-a573-7550c649f4f8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "\"\<apple\>\"", ",", "\"\<banana\>\"", ",", "\"\<peach\>\"", ",", 
    "\"\<grape\>\""}], "}"}], "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellLabel->
  "In[137]:=",ExpressionUUID->"71e8be48-685d-40aa-95d0-d0313d23a396"],

Cell[BoxData["\<\"banana\"\>"], "Output",
 CellLabel->
  "Out[137]=",ExpressionUUID->"1bfa27ce-9516-4c63-9128-c0f93b157e5a"]
}, Open  ]],

Cell[TextData[{
 "In the language of lists, the code above extracted the element in position \
2 from the list. If that were an association, we would instead say that \
\[OpenCurlyDoubleQuote]banana\[CloseCurlyDoubleQuote] is the value associated \
to the key 2. But where a list is restricted to referencing positions with \
integers, an association has no such restrictions on what the keys may be. \
For example, we might want to create an association to store the amount of \
vitamin C in one serving of each of these fruits. Rather that looking for the \
second element of a list to find out how much vitamin C a banana has, an \
association lets up ask for the \[OpenCurlyDoubleQuote]banana\
\[CloseCurlyDoubleQuote] entry; that is, we query the association for the \
value associated to the key \[OpenCurlyDoubleQuote]banana.\
\[CloseCurlyDoubleQuote] We define such an ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 " below."
}], "Text",ExpressionUUID->"ba490223-d209-4389-b053-9d42412b4511"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fruit", "=", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<apple\>\"", "\[Rule]", "7.8"}], ",", 
    RowBox[{"\"\<banana\>\"", "\[Rule]", "10"}], ",", 
    RowBox[{"\"\<peach\>\"", "\[Rule]", "9.9"}], ",", 
    RowBox[{"\"\<grape\>\"", "\[Rule]", "11"}]}], "|>"}]}]], "Input",
 CellLabel->
  "In[138]:=",ExpressionUUID->"b7944ab0-9bf6-4c58-8962-258cb8fc3dff"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"apple\"\>", "\[Rule]", "7.8`"}], ",", 
   RowBox[{"\<\"banana\"\>", "\[Rule]", "10"}], ",", 
   RowBox[{"\<\"peach\"\>", "\[Rule]", "9.9`"}], ",", 
   RowBox[{"\<\"grape\"\>", "\[Rule]", "11"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[138]=",ExpressionUUID->"98d4ad2d-daa5-4f13-b77e-39b3c0195011"]
}, Open  ]],

Cell[TextData[{
 "The syntax for defining an ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 " is as follows. The list of key\[Dash]value pairs are delimited on the left \
by a less than symbol and then a vertical bar\[LongDash]found on a standard \
keyboard as shift together with the backslash (\\)\[LongDash]and a vertical \
bar followed by a greater than symbol on the right. The key\[Dash]value pairs \
are separated by commas, and a key and its value are connected by a ",
 StyleBox[ButtonBox["Rule",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Rule"], "FunctionLink"],
 " (\[Rule]), which you type as a hyphen followed by a greater than symbol. "
}], "Text",ExpressionUUID->"3c3f3f2e-8606-41ec-b7d9-4bdd71615a0a"],

Cell[TextData[{
 "Having created an association, you can obtain the value associated with a \
specific key using the same syntax as if it were a function, that is, a pair \
of brackets enclosing the key (",
 StyleBox["[\[Ellipsis]]", "Code"],
 "). Since our keys are strings, we put the string inside the brackets. "
}], "Text",ExpressionUUID->"b889ac05-7325-49da-80e4-d424b348e3fa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fruit", "[", "\"\<banana\>\"", "]"}]], "Input",
 CellLabel->
  "In[139]:=",ExpressionUUID->"6647e844-8743-4f1f-9d5d-dc8ba0f71866"],

Cell[BoxData["10"], "Output",
 CellLabel->
  "Out[139]=",ExpressionUUID->"3d538826-1ee4-4c19-818c-5ff727e2dc9d"]
}, Open  ]],

Cell[TextData[{
 "Note that, you can also use the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") operator to access associations, but it can be wise to wrap the key in \
the ",
 StyleBox[ButtonBox["Key",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Key"], "FunctionLink"],
 " symbol, since some keys may produce unexpected results without it. \
Integers, in particular, retain their positional meaning for the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") operator and can thus give misleading results. The first output below \
suggests that 1 is a fruit with 7.8 mg of vitamin C (actually, 7.8 is the \
value associated with the key\[Dash]value pair in position 1), while the \
second informs us that 1 is not a key in the ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"8d121d1f-7ef3-42f7-968d-3d4949c2810e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fruit", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellLabel->
  "In[140]:=",ExpressionUUID->"8eb3db7b-c9cf-49cb-8c56-557655ca17eb"],

Cell[BoxData["7.8`"], "Output",
 CellLabel->
  "Out[140]=",ExpressionUUID->"620d434e-645f-44bd-9b38-ae222979b359"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fruit", "[", 
  RowBox[{"[", 
   RowBox[{"Key", "[", "1", "]"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[141]:=",ExpressionUUID->"30dd08a4-2524-4948-bb0b-f9a06bc9fef1"],

Cell[BoxData[
 RowBox[{"Missing", "[", 
  RowBox[{"\<\"KeyAbsent\"\>", ",", "1"}], "]"}]], "Output",
 CellLabel->
  "Out[141]=",ExpressionUUID->"ad810e2b-0017-48a3-ab37-4d8cb3ac7c42"]
}, Open  ]],

Cell[TextData[{
 "Before turning back to fuzzy sets, you may have occasions where you wish to \
modify associations. Two functions useful for this are ",
 StyleBox[ButtonBox["AssociateTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AssociateTo"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["KeyDropFrom",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/KeyDropFrom"], "FunctionLink"],
 ". ",
 StyleBox[ButtonBox["AssociateTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AssociateTo"], "FunctionLink"],
 " takes two arguments. The first is the name of an association, and that \
association is modified \[OpenCurlyDoubleQuote]in place,\
\[CloseCurlyDoubleQuote] that is, without needing an explicit assignment \
statement. The second argument is either a ",
 StyleBox[ButtonBox["Rule",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Rule"], "FunctionLink"],
 " (\[Rule]) or a list of rules to add to the association. For example, the \
command below adds pears to our fruit association."
}], "Text",ExpressionUUID->"1a1c5768-f1ea-4603-ada2-9458dbfaaea5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociateTo", "[", 
  RowBox[{"fruit", ",", 
   RowBox[{"\"\<pear\>\"", "\[Rule]", "7.7"}]}], "]"}]], "Input",
 CellLabel->
  "In[142]:=",ExpressionUUID->"46d0b654-9927-4fec-a6ed-7e295d6b923f"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"apple\"\>", "\[Rule]", "7.8`"}], ",", 
   RowBox[{"\<\"banana\"\>", "\[Rule]", "10"}], ",", 
   RowBox[{"\<\"peach\"\>", "\[Rule]", "9.9`"}], ",", 
   RowBox[{"\<\"grape\"\>", "\[Rule]", "11"}], ",", 
   RowBox[{"\<\"pear\"\>", "\[Rule]", "7.7`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[142]=",ExpressionUUID->"4e334555-1a52-44c5-8018-a2d5be9c7af9"]
}, Open  ]],

Cell[TextData[{
 "Note that the symbol ",
 StyleBox["fruit", "Code"],
 " has been modified."
}], "Text",ExpressionUUID->"16b73d4a-1edc-447c-b803-6f8c9531ff35"],

Cell[CellGroupData[{

Cell[BoxData["fruit"], "Input",
 CellLabel->
  "In[143]:=",ExpressionUUID->"fa75830b-e91b-4b6a-a211-65210c9d7740"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"apple\"\>", "\[Rule]", "7.8`"}], ",", 
   RowBox[{"\<\"banana\"\>", "\[Rule]", "10"}], ",", 
   RowBox[{"\<\"peach\"\>", "\[Rule]", "9.9`"}], ",", 
   RowBox[{"\<\"grape\"\>", "\[Rule]", "11"}], ",", 
   RowBox[{"\<\"pear\"\>", "\[Rule]", "7.7`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[143]=",ExpressionUUID->"8fb1c179-7006-4933-80e4-199f3a0ab45c"]
}, Open  ]],

Cell[TextData[{
 "If we wish to remove grapes from the association, we use ",
 StyleBox[ButtonBox["KeyDropFrom",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/KeyDropFrom"], "FunctionLink"],
 ". Again, the first argument is the name of an association, which will be \
modified. The second argument is a key or a list of keys. "
}], "Text",ExpressionUUID->"10ec5fdc-c92f-4f8d-8f93-d03c1c72ad3f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KeyDropFrom", "[", 
  RowBox[{"fruit", ",", "\"\<grape\>\""}], "]"}]], "Input",
 CellLabel->
  "In[144]:=",ExpressionUUID->"294b0d73-6a96-4a0e-a454-e0ab3edf4de0"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"apple\"\>", "\[Rule]", "7.8`"}], ",", 
   RowBox[{"\<\"banana\"\>", "\[Rule]", "10"}], ",", 
   RowBox[{"\<\"peach\"\>", "\[Rule]", "9.9`"}], ",", 
   RowBox[{"\<\"pear\"\>", "\[Rule]", "7.7`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[144]=",ExpressionUUID->"4d973878-097d-4e8d-b443-b337530d3467"]
}, Open  ]],

Cell["\<\
Finally, changing a value for a given key is as easy as assigning the new \
value.\
\>", "Text",ExpressionUUID->"d855edc8-8d68-493e-9df2-065b3827b645"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"fruit", "[", "\"\<banana\>\"", "]"}], "=", "10.1"}]], "Input",
 CellLabel->
  "In[145]:=",ExpressionUUID->"161a49f2-515f-4861-a788-57e5494905ff"],

Cell[BoxData["10.1`"], "Output",
 CellLabel->
  "Out[145]=",ExpressionUUID->"57e401c5-3fc3-480a-9c54-33a51a6ff5d2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implementing Fuzzy Set Operations with Associations", "Subsubsection",ExpressionUUID->"3030cc7d-eb3d-4ff9-b1a2-b25f700e2cce"],

Cell[TextData[{
 "Returning to the topic of fuzzy sets, we will see more about how to use the \
rich and highly functional data structure ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 ". First, we define the fuzzy set example presented above as an ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"4272f598-dcdd-4e9a-b2b7-f092b0e4d0c9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fuzzyAssociation", "=", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<a\>\"", "\[Rule]", "0.3"}], ",", 
    RowBox[{"\"\<b\>\"", "\[Rule]", "0.7"}], ",", 
    RowBox[{"\"\<e\>\"", "\[Rule]", "0.1"}]}], "|>"}]}]], "Input",
 CellLabel->
  "In[146]:=",ExpressionUUID->"afe86735-b0f2-45b1-af93-0e5d43103e63"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", "0.3`"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "0.7`"}], ",", 
   RowBox[{"\<\"e\"\>", "\[Rule]", "0.1`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[146]=",ExpressionUUID->"5e4ee3f4-7464-4e2a-8535-c40e4ce99366"]
}, Open  ]],

Cell[TextData[{
 "The first question one asks about a representation of sets is how to \
determine whether (or, for fuzzy sets, to what degree) an object is a member \
of the set. The usual extraction operator (",
 StyleBox["[\[Ellipsis]]", "Code"],
 ") is not entirely satisfying in this context. While we can use it to \
determine the degree of membership of the element \[OpenCurlyDoubleQuote]a\
\[CloseCurlyDoubleQuote], for the element \[OpenCurlyDoubleQuote]d\
\[CloseCurlyDoubleQuote], it reports the key as missing rather than providing \
its degree of membership as 0."
}], "Text",ExpressionUUID->"a174e8ea-a3fe-4b31-bf4b-d92d62e8c948"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fuzzyAssociation", "[", "\"\<a\>\"", "]"}]], "Input",
 CellLabel->
  "In[147]:=",ExpressionUUID->"3d8aceeb-2b88-4869-a5a0-0574cb7bf26a"],

Cell[BoxData["0.3`"], "Output",
 CellLabel->
  "Out[147]=",ExpressionUUID->"b7d32f06-996f-4179-a4ac-c4ee7862f705"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fuzzyAssociation", "[", "\"\<d\>\"", "]"}]], "Input",
 CellLabel->
  "In[148]:=",ExpressionUUID->"06f788c3-dc75-4f21-8f58-5c0390e8fcf6"],

Cell[BoxData[
 RowBox[{"Missing", "[", 
  RowBox[{"\<\"KeyAbsent\"\>", ",", "\<\"d\"\>"}], "]"}]], "Output",
 CellLabel->
  "Out[148]=",ExpressionUUID->"3f5ff8d0-8f19-44c5-93df-85c13fff6344"]
}, Open  ]],

Cell[TextData[{
 "Fortunately, the Wolfram Language provides the ",
 StyleBox[ButtonBox["Lookup",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Lookup"], "FunctionLink"],
 " function. Given an association and a key as its two arguments, ",
 StyleBox[ButtonBox["Lookup",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Lookup"], "FunctionLink"],
 " returns the value. "
}], "Text",ExpressionUUID->"d7869841-b43e-4b65-8b4a-3ae0abb56424"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Lookup", "[", 
  RowBox[{"fuzzyAssociation", ",", "\"\<a\>\""}], "]"}]], "Input",
 CellLabel->
  "In[149]:=",ExpressionUUID->"1227b949-6618-4cb1-b119-d75a7b5def41"],

Cell[BoxData["0.3`"], "Output",
 CellLabel->
  "Out[149]=",ExpressionUUID->"8c23f99d-6ef0-402a-b678-fce86d0378f2"]
}, Open  ]],

Cell["\<\
By adding a third argument, we can specify a default value, so that instead \
of reporting the key as missing, we obtain the degree of membership 0.\
\>", "Text",ExpressionUUID->"bef55fc3-a77e-4c58-b181-86fcd81e968e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Lookup", "[", 
  RowBox[{"fuzzyAssociation", ",", "\"\<d\>\"", ",", "0"}], "]"}]], "Input",
 CellLabel->
  "In[150]:=",ExpressionUUID->"87686b85-883a-49f2-9e55-af48f370c30b"],

Cell[BoxData["0"], "Output",
 CellLabel->
  "Out[150]=",ExpressionUUID->"587dca7f-3901-4bbb-83e6-6eec35c2dcec"]
}, Open  ]],

Cell["\<\
We will be constructing a collection of functions for fuzzy sets, so we begin \
by defining a membership function.\
\>", "Text",ExpressionUUID->"ff1a1f73-293b-46a4-9a1d-9866aa993556"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fuzzyMemberQ", "[", 
   RowBox[{"set_", ",", "object_"}], "]"}], ":=", 
  RowBox[{"Lookup", "[", 
   RowBox[{"set", ",", "object", ",", "0"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[151]:=",ExpressionUUID->"df8626ba-7bc0-4022-a1ab-58ec7c074dac"],

Cell["\<\
Next, we create a fuzzy intersection function. Recall the the intersection of \
two fuzzy sets is the set in which the degree of membership of each object is \
the minimum of the degrees of membership that object has in the two sets. To \
begin, we create a second example set.\
\>", "Text",ExpressionUUID->"cea59e22-7fab-4542-8124-dbfba924ba73"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fuzzyAssociation2", "=", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<a\>\"", "\[Rule]", "0.5"}], ",", 
    RowBox[{"\"\<b\>\"", "\[Rule]", "0.2"}], ",", 
    RowBox[{"\"\<f\>\"", "\[Rule]", "0.6"}]}], "|>"}]}]], "Input",
 CellLabel->
  "In[152]:=",ExpressionUUID->"36ca616d-1d19-4d18-bd33-c674c702a59f"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", "0.5`"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "0.2`"}], ",", 
   RowBox[{"\<\"f\"\>", "\[Rule]", "0.6`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[152]=",ExpressionUUID->"d4dee3c5-fa34-49bf-8648-170fd2d08f1d"]
}, Open  ]],

Cell[TextData[{
 "To implement the fuzzy intersection modeled as associations, we first will \
need to determine what objects have degrees of membership stored in the \
associations. The ",
 StyleBox[ButtonBox["Keys",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Keys"], "FunctionLink"],
 " function applied to an association provides a list of the keys. Similarly, \
",
 StyleBox[ButtonBox["Values",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Values"], "FunctionLink"],
 " extracts a list of the values."
}], "Text",ExpressionUUID->"b60c511c-0159-4dca-8741-6675d5972a79"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Keys", "[", "fuzzyAssociation", "]"}]], "Input",
 CellLabel->
  "In[153]:=",ExpressionUUID->"1abfa657-6cf4-4456-ba99-d67b31126351"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"e\"\>"}], "}"}]], "Output",\

 CellLabel->
  "Out[153]=",ExpressionUUID->"fb3b9425-240b-4aa1-b1ac-c8fe607b7a37"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Values", "[", "fuzzyAssociation", "]"}]], "Input",
 CellLabel->
  "In[154]:=",ExpressionUUID->"52596702-ffaf-4105-bce5-fa28644f5de5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.3`", ",", "0.7`", ",", "0.1`"}], "}"}]], "Output",
 CellLabel->
  "Out[154]=",ExpressionUUID->"13b811f9-5851-4cbd-8d82-6f4885d9a815"]
}, Open  ]],

Cell["\<\
To find the intersection of two fuzzy sets, the natural first step is to find \
the intersection of the keys of the associations representing the sets.\
\>", "Text",ExpressionUUID->"8b8dbca6-fd6f-4f4c-b73b-d7f1afc310d6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"intersectionKeys", "=", 
  RowBox[{"Intersection", "[", 
   RowBox[{
    RowBox[{"Keys", "[", "fuzzyAssociation", "]"}], ",", 
    RowBox[{"Keys", "[", "fuzzyAssociation2", "]"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[155]:=",ExpressionUUID->"2d892af0-6c63-44d2-a9a5-e5d0d86fc8ae"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[155]=",ExpressionUUID->"1a1948ac-b78a-4be8-9827-0335d54464ae"]
}, Open  ]],

Cell[TextData[{
 "For each of the objects appearing in the sets, the degree of membership in \
the union is the minimum of the degrees of membership in the original sets. \
Applying ",
 StyleBox["fuzzyMemberQ", "Code"],
 " to a member and then using the ",
 StyleBox[ButtonBox["Min",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Min"], "FunctionLink"],
 " function produces the needed value."
}], "Text",ExpressionUUID->"30134cb6-0c27-45e5-990c-5e324d7787ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Min", "[", 
  RowBox[{
   RowBox[{"fuzzyMemberQ", "[", 
    RowBox[{"fuzzyAssociation", ",", "\"\<a\>\""}], "]"}], ",", 
   RowBox[{"fuzzyMemberQ", "[", 
    RowBox[{"fuzzyAssociation2", ",", "\"\<a\>\""}], "]"}]}], "]"}]], "Input",\

 CellLabel->
  "In[156]:=",ExpressionUUID->"4e9a41e7-de21-4122-b789-63e2271b8fc9"],

Cell[BoxData["0.3`"], "Output",
 CellLabel->
  "Out[156]=",ExpressionUUID->"4c76537b-1977-472f-a5dd-9c5f0a466614"]
}, Open  ]],

Cell[TextData[{
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " will allow us to create a list of the degrees of membership. Recall that \
the ",
 StyleBox["{i,list}", "Code"],
 " form of the second argument iterates the table variable ",
 StyleBox["i", "Code"],
 " is over the elements of the ",
 StyleBox["list", "Code"],
 ". Usefully, the output is in the same order as the provided list. "
}], "Text",ExpressionUUID->"31e88d54-7945-4085-926b-8b1ccd5d15c1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"intersectionMembership", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Min", "[", 
     RowBox[{
      RowBox[{"fuzzyMemberQ", "[", 
       RowBox[{"fuzzyAssociation", ",", "i"}], "]"}], ",", 
      RowBox[{"fuzzyMemberQ", "[", 
       RowBox[{"fuzzyAssociation2", ",", "i"}], "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "intersectionKeys"}], "}"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[157]:=",ExpressionUUID->"7b43d043-4d34-441f-8083-580183fc4718"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.3`", ",", "0.2`"}], "}"}]], "Output",
 CellLabel->
  "Out[157]=",ExpressionUUID->"3195b6ca-3dcc-4106-9833-f477474e5577"]
}, Open  ]],

Cell[TextData[{
 "We now have one list consisting of the keys of the intersection and one \
that consists of their degrees of membership. Observe that the two lists are \
aligned. That is to say, the first value in the list of degrees of membership \
is the degree of membership of the first member of the list of objects, the \
second value is the degree of membership of the second object, etc. The \
function ",
 StyleBox[ButtonBox["AssociationThread",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AssociationThread"], "FunctionLink"],
 " will take two lists of the same length and will create the association in \
which the members of the first list are associated to the corresponding \
members of the second list. Note that the two lists are separated by a ",
 StyleBox[ButtonBox["Rule",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Rule"], "FunctionLink"],
 " (\[Rule])."
}], "Text",ExpressionUUID->"1fdfb786-5234-43cc-973e-0107731ec870"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociationThread", "[", 
  RowBox[{"intersectionKeys", "\[Rule]", "intersectionMembership"}], 
  "]"}]], "Input",
 CellLabel->
  "In[158]:=",ExpressionUUID->"e5851e82-dc17-445d-98ee-a9a21a0ca978"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", "0.3`"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "0.2`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[158]=",ExpressionUUID->"7974cc2c-9f6b-4f98-b4b7-e2d3c76c8781"]
}, Open  ]],

Cell["\<\
This example has illustrated the outline of the intersection function.\
\>", "Text",ExpressionUUID->"a9eef996-cab0-44dc-a49a-066ba5811043"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fuzzyIntersection", "[", 
   RowBox[{"A_", ",", "B_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"keys", ",", "membership"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"keys", "=", 
      RowBox[{"Intersection", "[", 
       RowBox[{
        RowBox[{"Keys", "[", "A", "]"}], ",", 
        RowBox[{"Keys", "[", "B", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"membership", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Min", "[", 
         RowBox[{
          RowBox[{"fuzzyMemberQ", "[", 
           RowBox[{"A", ",", "i"}], "]"}], ",", 
          RowBox[{"fuzzyMemberQ", "[", 
           RowBox[{"B", ",", "i"}], "]"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "keys"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"AssociationThread", "[", 
      RowBox[{"keys", "\[Rule]", "membership"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[159]:=",ExpressionUUID->"2ee57203-fa45-4364-bb2d-d59b61b7aca8"],

Cell["\<\
In the remainder of this section, we consider how to convert among the three \
representations of fuzzy sets described above.\
\>", "Text",ExpressionUUID->"58e15bb5-be6d-47aa-ba45-de09a0c53d11"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Converting from Bit String to Roster Representation", "Subsubsection",ExpressionUUID->"d0ecfce0-3adf-4e5d-8460-738dcf1fa0c7"],

Cell[TextData[{
 "Converting from a fuzzy-bit string to the roster representation is fairly \
straightforward. Use a ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop with index running from 1 to the number of elements in the universe. \
For each index, if the entry in the fuzzy-bit string is nonzero, then we add \
to the roster the pair consisting of the element from the universe and the \
degree of membership."
}], "Text",ExpressionUUID->"46a92af0-5665-4cac-b03c-1853b30ebdb8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"bitToRoster", "[", 
   RowBox[{"bitstring_", ",", "universe_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"S", "=", 
       RowBox[{"{", "}"}]}], ",", "i"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"Length", "[", "universe", "]"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"bitstring", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "\[NotEqual]", "0"}], ",", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"S", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"universe", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", 
             RowBox[{"bitstring", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "}"}]}], "]"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "S"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[160]:=",ExpressionUUID->"c9917f50-b9fe-40c8-9ff3-a3780ea4c4c5"],

Cell[TextData[{
 "Note that we give ",
 StyleBox["S", "Code"],
 " as the last expression so that it will be the output of the function. \
Otherwise, the ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop will produce no output."
}], "Text",ExpressionUUID->"26659f44-7040-4308-85ef-0792c9fdfa4d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bitToRoster", "[", 
  RowBox[{"fuzzyBitString", ",", "fuzzyU"}], "]"}]], "Input",
 CellLabel->
  "In[161]:=",ExpressionUUID->"db1458a2-f196-4d30-bf66-8a92d9bd3cf9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "0.3`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "0.7`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"e\"\>", ",", "0.1`"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[161]=",ExpressionUUID->"066745a0-3161-4d15-8982-e2209d3b85e1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Converting from Roster to Bit String Representation", "Subsubsection",ExpressionUUID->"3a27f9c3-5a10-42b3-b148-5fc38ec5ec96"],

Cell[TextData[{
 "In the other direction, we initialize a bit string to the zero string. \
Then, we consider each member of the roster representation in turn, using a \
",
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Do"], "FunctionLink"],
 " loop over the elements of the roster. Recall that with second argument of \
the form ",
 Cell[BoxData[
  RowBox[{"{", 
   StyleBox["var", "CodeVar"], ",", 
   StyleBox["list", "CodeVar"], "}"}]], "myCode",ExpressionUUID->
  "232db212-ca8a-4463-9c09-f914f8b5d62f"],
 " the variable will be assigned to each element of the list in turn. In this \
case, ",
 Cell[BoxData[
  FormBox["list", CodeVar]], "myCode",ExpressionUUID->
  "fcf7e004-62e5-452a-ac07-40606dbd1115"],
 " will be the roster representation and so the variable will be assigned to \
each of the lists consisting of the element/membership pairs."
}], "Text",ExpressionUUID->"56ddede0-7348-48f6-b091-784f551e6af3"],

Cell[TextData[{
 "For every member of the set, we will need to determine the position of the \
set member in the universe in order to change the correct bit in the \
fuzzy-bit string.",
 " To do this, we will make use of the ",
 StyleBox[ButtonBox["Position",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Position"], "FunctionLink"],
 " function. Given two arguments, ",
 StyleBox[ButtonBox["Position",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Position"], "FunctionLink"],
 " will return a list of lists specifying all the positions at which the \
second argument appears in the first. The following illustrates using ",
 StyleBox[ButtonBox["Position",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Position"], "FunctionLink"],
 " to determine that 2 appears in locations 3 and 6 in the list."
}], "Text",ExpressionUUID->"9e2c4972-86df-4d04-a055-05c37d00f7f6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "3", ",", "5", ",", "2", ",", "9", ",", "4", ",", "2", ",", "1", ",", 
     "8"}], "}"}], ",", "2"}], "]"}]], "Input",
 CellLabel->
  "In[162]:=",ExpressionUUID->"af266e0a-d9fe-45d8-862c-2fe2b84d68f0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "6", "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[162]=",ExpressionUUID->"6e2d6792-8a29-4fd9-b304-5c8bc69cc5d0"]
}, Open  ]],

Cell[TextData[{
 "The reason ",
 StyleBox[ButtonBox["Position",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Position"], "FunctionLink"],
 " returns a list of this form is in case of nesting in the first argument."
}], "Text",ExpressionUUID->"635015b2-b81c-4855-a79a-9bf7f383a5aa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"9", ",", "7", ",", "1", ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "0", ",", "7"}], "}"}], ",", "5"}], "}"}], ",", "7"}],
   "]"}]], "Input",
 CellLabel->
  "In[163]:=",ExpressionUUID->"ab9edf98-d2a6-4666-9824-0de4e64e3dbe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[163]=",ExpressionUUID->"8c5c08cc-8502-488c-8c6c-3f9058ec0382"]
}, Open  ]],

Cell["\<\
The above shows that 7 appears in position 2 and in position 3 of the sublist \
at location 4.\
\>", "Text",ExpressionUUID->"8346fa73-f81b-468b-ba77-446921961152"],

Cell[TextData[{
 "In the current context, we will assume that our data is well formed, in \
which case when we apply ",
 StyleBox[ButtonBox["Position",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Position"], "FunctionLink"],
 " to the universe, there is only one instance of the sought-after object and \
there is no nesting. Therefore, we can access the appropriate index by \
applying the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") operator as follows."
}], "Text",ExpressionUUID->"a5b1787c-cb0e-4430-9c13-3a48eb1ac452"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Position", "[", 
   RowBox[{"fuzzyU", ",", "\"\<b\>\""}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "1"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[164]:=",ExpressionUUID->"b6365a4d-7a02-43b3-a180-6cca8e5c814a"],

Cell[BoxData["2"], "Output",
 CellLabel->
  "Out[164]=",ExpressionUUID->"bbcd997b-2608-487c-ad90-8b303772321a"]
}, Open  ]],

Cell[TextData[{
 "We can now write the ",
 StyleBox["rosterToBit", "Code"],
 " function."
}], "Text",ExpressionUUID->"822e4c81-5331-4b1d-a897-f2ee4768862a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rosterToBit", "[", 
   RowBox[{"roster_", ",", "universe_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"B", ",", "e", ",", "position"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"B", "=", 
      RowBox[{"Table", "[", 
       RowBox[{"0", ",", 
        RowBox[{"{", 
         RowBox[{"Length", "[", "universe", "]"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"position", "=", 
         RowBox[{
          RowBox[{"Position", "[", 
           RowBox[{"universe", ",", 
            RowBox[{"e", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"B", "[", 
          RowBox[{"[", "position", "]"}], "]"}], "=", 
         RowBox[{"e", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}]}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"e", ",", "roster"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "B"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->
  "In[165]:=",ExpressionUUID->"1d26bfd8-f19d-4abe-912f-4c5f0406e10a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rosterToBit", "[", 
  RowBox[{"fuzzyRoster", ",", "fuzzyU"}], "]"}]], "Input",
 CellLabel->
  "In[166]:=",ExpressionUUID->"0a07c262-1834-4e1c-8569-8f246f3dcb40"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.3`", ",", "0.7`", ",", "0", ",", "0", ",", "0.1`", ",", "0", ",", "0"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[166]=",ExpressionUUID->"4a2788dd-ccda-48da-a9a9-6e85fc7f005d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Converting between Roster and Association Representations", \
"Subsubsection",ExpressionUUID->"c5f1b64d-3cb7-4022-9a4e-d412b6e45fb7"],

Cell[TextData[{
 "Given a roster representation, we can most easily create an ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 " by manipulating the heads of the roster. Compare the ",
 StyleBox[ButtonBox["FullForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FullForm"], "FunctionLink"],
 " displays of our roster and association examples."
}], "Text",ExpressionUUID->"a8eaed72-41d4-421f-9ebe-24c9c3d884ee"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", "fuzzyRoster", "]"}]], "Input",
 CellLabel->
  "In[167]:=",ExpressionUUID->"0d80349f-c743-4b4f-8976-9c5f8ffc1879"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"List", "[", 
    RowBox[{
     RowBox[{"List", "[", 
      RowBox[{"\"\<a\>\"", ",", "0.3`"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"\"\<b\>\"", ",", "0.7`"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"\"\<e\>\"", ",", "0.1`"}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[167]//FullForm=",ExpressionUUID->"ab5ec12e-041f-4424-831a-\
0e6539123032"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", "fuzzyAssociation", "]"}]], "Input",
 CellLabel->
  "In[168]:=",ExpressionUUID->"13a5c2ed-4af9-4cf1-a303-a5b89c46b74d"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Association", "[", 
    RowBox[{
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<a\>\"", ",", "0.3`"}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<b\>\"", ",", "0.7`"}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<e\>\"", ",", "0.1`"}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[168]//FullForm=",ExpressionUUID->"7accd513-9ac5-49f6-8e14-\
a65fc77354a2"]
}, Open  ]],

Cell[TextData[{
 "The difference is that the inner lists of the roster representation are \
each a ",
 StyleBox[ButtonBox["Rule",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Rule"], "FunctionLink"],
 " (\[Rule]) and the main head is ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 ". In Chapter 1 of this manual, we saw how to use ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " (",
 StyleBox["@@", "Code"],
 ") to change heads of expressions. This function accepts an optional third \
argument, called a level specification, to modify heads at different levels \
in the expression being modified. The head of the whole expression is at \
level 0, so we need to change the heads at level 1. To modify heads at a \
single level, the third argument to ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " is the level number enclosed in braces. "
}], "Text",ExpressionUUID->"8540db8a-4bb8-460b-a710-b0ce6bbe018c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"Rule", ",", "fuzzyRoster", ",", 
   RowBox[{"{", "1", "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[169]:=",ExpressionUUID->"134bc6ec-5627-45a6-a268-7c5b1644ca34"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", "0.3`"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "0.7`"}], ",", 
   RowBox[{"\<\"e\"\>", "\[Rule]", "0.1`"}]}], "}"}]], "Output",
 CellLabel->
  "Out[169]=",ExpressionUUID->"4e400fa2-4b2a-42ee-b87e-f66c8e1a77f4"]
}, Open  ]],

Cell[TextData[{
 "In Chapter 1, we used the infix operator form (",
 StyleBox["@@", "Code"],
 ") of ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " for changing the head of an expression. Modifying heads at level 1 is \
sufficiently common that it also has an operator form, namely three at \
symbols (",
 StyleBox["@@@", "Code"],
 ")."
}], "Text",ExpressionUUID->"9688673a-b2ad-42ba-b480-a19727eb2227"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Rule", "@@@", "fuzzyRoster"}]], "Input",
 CellLabel->
  "In[170]:=",ExpressionUUID->"f28e9387-d7f7-48eb-a371-41727f0c0677"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", "0.3`"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "0.7`"}], ",", 
   RowBox[{"\<\"e\"\>", "\[Rule]", "0.1`"}]}], "}"}]], "Output",
 CellLabel->
  "Out[170]=",ExpressionUUID->"f4c84a7c-4506-48d8-9c89-3ac5b2e1d99d"]
}, Open  ]],

Cell[TextData[{
 "After the list of lists has been turned into a list of rules, we can obtain \
the association by changing the main head into ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 ". So we use ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " (",
 StyleBox["@@", "Code"],
 ") again."
}], "Text",ExpressionUUID->"c9bb0842-bcae-4a6b-b3bd-bb1b1b34b6ff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Association", "@@", 
  RowBox[{"Rule", "@@@", "fuzzyRoster"}]}]], "Input",
 CellLabel->
  "In[171]:=",ExpressionUUID->"878bc1dd-69db-4fd0-ae3d-822846858f08"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", "0.3`"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "0.7`"}], ",", 
   RowBox[{"\<\"e\"\>", "\[Rule]", "0.1`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[171]=",ExpressionUUID->"1a48fcfb-02a7-43a7-b324-6a1d5c45a116"]
}, Open  ]],

Cell[TextData[{
 "An ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 " can be transformed into a roster representation in a similar, but slightly \
different, way. The difference is that we cannot use ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " (",
 StyleBox["@@", "Code"],
 ") to change heads in an ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 ". This is because the ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 " structure is designed so that functions applied to it will operate on the \
values of the association. This is a useful feature; for example, we can find \
the maximum degree of membership over all members of the set simply by \
applying ",
 StyleBox[ButtonBox["Max",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Max"], "FunctionLink"],
 " ."
}], "Text",ExpressionUUID->"87eb2c6e-22f9-4bd3-8aec-684906b62366"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Max", "[", "fuzzyAssociation", "]"}]], "Input",
 CellLabel->
  "In[172]:=",ExpressionUUID->"fa1e8240-02ef-416c-8fb0-1629ff4878a1"],

Cell[BoxData["0.7`"], "Output",
 CellLabel->
  "Out[172]=",ExpressionUUID->"a3a03484-1684-4a3d-8b48-f76ee936a278"]
}, Open  ]],

Cell[TextData[{
 "But as a consequence, ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " (",
 StyleBox["@@", "Code"],
 ") does not behave as expected."
}], "Text",ExpressionUUID->"cab842cd-6182-43bf-82f2-f07c5bd7d40d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", "@@", "fuzzyAssociation"}]], "Input",
 CellLabel->
  "In[173]:=",ExpressionUUID->"59456243-a0cc-40a8-a642-da80df33509c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.3`", ",", "0.7`", ",", "0.1`"}], "}"}]], "Output",
 CellLabel->
  "Out[173]=",ExpressionUUID->"700b698c-9694-4d23-8e47-85d68bdcbb5a"]
}, Open  ]],

Cell[TextData[{
 "Instead, we use the ",
 StyleBox[ButtonBox["Normal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Normal"], "FunctionLink"],
 " function, which, for associations, returns a list of the rules making up \
the association."
}], "Text",ExpressionUUID->"7ef76962-0d46-4f79-8948-45ead9bd53c9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normal", "[", "fuzzyAssociation", "]"}]], "Input",
 CellLabel->
  "In[174]:=",ExpressionUUID->"fa895188-f5d4-4be4-8a61-e2a8f3f70968"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", "0.3`"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "0.7`"}], ",", 
   RowBox[{"\<\"e\"\>", "\[Rule]", "0.1`"}]}], "}"}]], "Output",
 CellLabel->
  "Out[174]=",ExpressionUUID->"8a6e730c-047e-4169-8e1e-1724f92461d0"]
}, Open  ]],

Cell[TextData[{
 "We can then use ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " at level 1 (",
 StyleBox["@@@", "Code"],
 ") to turn the rules into lists. "
}], "Text",ExpressionUUID->"60196904-2c8a-4adb-8763-cf64f2ff18e1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", "@@@", 
  RowBox[{"Normal", "[", "fuzzyAssociation", "]"}]}]], "Input",
 CellLabel->
  "In[175]:=",ExpressionUUID->"dd43ac23-e84e-4a8e-9f41-e0c5c1e1f71b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "0.3`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "0.7`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"e\"\>", ",", "0.1`"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[175]=",ExpressionUUID->"79ef7d4a-1a41-4f51-83bc-239ef0ac49c1"]
}, Open  ]],

Cell["\<\
We encapsulate the conversion in both directions into functions.\
\>", "Text",ExpressionUUID->"4aa5de63-960b-495f-810e-577dcdf29e95"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"rosterToFuzzy", "[", "roster_", "]"}], " ", ":=", 
   RowBox[{"Association", "@@", 
    RowBox[{"Rule", "@@@", "roster"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fuzzyToRoster", "[", "fuzzy_", "]"}], ":=", 
  RowBox[{"List", "@@@", 
   RowBox[{"Normal", "[", "fuzzy", "]"}]}]}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[176]:=",ExpressionUUID->"d14ba305-471a-415d-8d01-0819343823e5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rosterToFuzzy", "[", "fuzzyRoster", "]"}]], "Input",
 CellLabel->
  "In[178]:=",ExpressionUUID->"50bdb074-0dfd-40df-8690-a35ad9823edc"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", "0.3`"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "0.7`"}], ",", 
   RowBox[{"\<\"e\"\>", "\[Rule]", "0.1`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[178]=",ExpressionUUID->"b7be102b-7c4b-44a0-b633-644f12843f02"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fuzzyToRoster", "[", "fuzzyAssociation", "]"}]], "Input",
 CellLabel->
  "In[179]:=",ExpressionUUID->"b7019b7a-f766-4d37-ae5b-31264562c9c0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "0.3`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "0.7`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"e\"\>", ",", "0.1`"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[179]=",ExpressionUUID->"1ff6ba7e-a7d0-4387-9bd9-127e9820e7d9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.3 Functions", "Section",
 CellTags->"Section3",ExpressionUUID->"e6c90751-d1e3-40ed-bf12-f13c23d685bc"],

Cell["\<\
In this section, we will see ways to represent functions in the Wolfram \
Language and explore a variety of the concepts described in the text relative \
to these different representations.\
\>", "Text",ExpressionUUID->"0ea662fc-1a56-4312-9512-d5a72333f5d5"],

Cell[CellGroupData[{

Cell["Functions", "Subsection",
 CellTags->"Section3a",ExpressionUUID->"d8821b9e-0343-412a-9613-a059e8476eab"],

Cell[TextData[{
 "In this manual, we have already seen several examples of Wolfram Language \
functions. In some ways, a computer program is the ultimate generalization of \
a mathematical function. As an example, consider the ",
 StyleBox["getVars", "Code"],
 " function. This function assigns to each valid input (a Wolfram Language \
logical expression) a unique output (a list of the symbols appearing in the \
expression). Setting ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "50e50547-d952-4ac9-bdd9-1c9501d38211"],
 " equal to the set consisting of all logic expressions and ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "9c438ae5-ce40-4cae-8901-884c68ea341d"],
 " equal to the set of all possible lists of valid symbols, ",
 StyleBox["getVars", "Code"],
 " satisfies the definition of being a function from ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "844b0341-a1f5-4c24-9f27-e86b9d7cf8c9"],
 " to ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "8bafcd83-0134-4027-90c1-e1b7f88a388a"],
 "."
}], "Text",ExpressionUUID->"29543f9c-457d-40cc-89ea-bc74f39fbcda"],

Cell["\<\
We discussed functions in some depth in the introductory chapter. Here, we \
will discuss the concept of domain as they relate to programs via the \
computer programming concept of type.\
\>", "Text",ExpressionUUID->"051de457-7d38-41ce-ab0c-5ba5e76de2c0"],

Cell["\<\
In Example 5 of Section 2.3, the text gives examples from Java and C++ \
showing how domain and codomain are specified in those programming languages. \
The function below illustrates how to specify the domain of a function in the \
Wolfram Language.\
\>", "Text",ExpressionUUID->"5edbc1fa-1f7a-4be3-81d1-9587428957df"],

Cell[BoxData[
 RowBox[{
  RowBox[{"floor1", "[", "x_Real", "]"}], ":=", 
  RowBox[{"Floor", "[", "x", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[180]:=",ExpressionUUID->"d3da3d96-1d3c-4f06-835b-dd41a0fd1c5e"],

Cell[TextData[{
 "The body of the ",
 StyleBox["floor1", "Code"],
 " function is merely a call to the Wolfram Language\[CloseCurlyQuote]s \
built-in ",
 StyleBox[ButtonBox["Floor",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Floor"], "FunctionLink"],
 " command, but the example illustrates how you can specify the domain (i.e., \
the type of a parameter) of a function."
}], "Text",ExpressionUUID->"dc138eb9-e5f4-4c1f-a7fc-8a3673a7bd71"],

Cell[TextData[{
 "In the example above, we declared the type of the parameter ",
 StyleBox["x", "Code"],
 " by following the blank (",
 StyleBox["_", "Code"],
 ") with the symbol ",
 StyleBox[ButtonBox["Real",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Real"], "FunctionLink"],
 ", which is the head used for floating-point numbers in the Wolfram \
Language. If the function is called with an argument whose head does not \
match, then the function definition is not applied. In this case, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " merely returns the expression unevaluated."
}], "Text",ExpressionUUID->"72e1722b-0b0b-4f10-9763-acdb90fb8894"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"floor1", "[", "\"\<hello\>\"", "]"}]], "Input",
 CellLabel->
  "In[181]:=",ExpressionUUID->"8fafed04-390a-4866-89a4-fbdefe1cd479"],

Cell[BoxData[
 RowBox[{"floor1", "[", "\<\"hello\"\>", "]"}]], "Output",
 CellLabel->
  "Out[181]=",ExpressionUUID->"16ed9c2f-fe34-45a3-ab77-36b08cc386ad"]
}, Open  ]],

Cell[TextData[{
 "There are four built-in numeric types in the Wolfram Language: ",
 StyleBox[ButtonBox["Integer",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Integer"], "FunctionLink"],
 ", ",
 StyleBox[ButtonBox["Rational",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Rational"], "FunctionLink"],
 ", ",
 StyleBox[ButtonBox["Real",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Real"], "FunctionLink"],
 ", and ",
 StyleBox[ButtonBox["Complex",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Complex"], "FunctionLink"],
 ". Any head can be used in the same manner, though. For example, to create a \
function whose argument must be a list, you would define the function as \
below."
}], "Text",ExpressionUUID->"a368c21e-0b31-40ff-87dd-d88aee751e4e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"last", "[", "L_List", "]"}], ":=", 
  RowBox[{"L", "[", 
   RowBox[{"[", 
    RowBox[{"-", "1"}], "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[182]:=",ExpressionUUID->"320296a5-158c-4453-a1a8-d615c81ed8a2"],

Cell["\<\
This function will determine the last element of any list, but will not \
execute if it is given an object that is not a list.\
\>", "Text",ExpressionUUID->"232a1fc4-3b6a-4202-9327-872470c9bf27"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"last", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], 
  "]"}]], "Input",
 CellLabel->
  "In[183]:=",ExpressionUUID->"af5afcb9-2797-4548-bc28-f01fe6d02765"],

Cell[BoxData["5"], "Output",
 CellLabel->
  "Out[183]=",ExpressionUUID->"31bf44a9-8cd4-47bd-a358-95a11372fc55"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"last", "[", "5", "]"}]], "Input",
 CellLabel->
  "In[184]:=",ExpressionUUID->"5b8379a6-dcd6-49c9-a39d-a299e75c918b"],

Cell[BoxData[
 RowBox[{"last", "[", "5", "]"}]], "Output",
 CellLabel->
  "Out[184]=",ExpressionUUID->"429b0d41-deab-42bd-a665-71812939f478"]
}, Open  ]],

Cell[TextData[{
 "The expressions ",
 StyleBox["x_Real", "Code"],
 " and ",
 StyleBox["L_List", "Code"],
 " are examples of patterns. When you define a function, you are providing ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " with a rule that tells it how to evaluate an expression matching the \
pattern. Specifically, the definition for ",
 StyleBox["last", "Code"],
 " creates an evaluation rule that tells ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " what to do with an expression that has head ",
 StyleBox["List", "Code"],
 ". "
}], "Text",ExpressionUUID->"9aa0d1eb-288f-4ab7-b4e3-2816a9a435fa"],

Cell[TextData[{
 "You can further specify the allowed domain of a function by creating a \
pattern that uses a Boolean-valued function to determine whether the argument \
is allowable. For example, the Wolfram Language contains a function ",
 StyleBox[ButtonBox["EvenQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/EvenQ"], "FunctionLink"],
 " that returns true for even integers and false otherwise. The function \
below will apply only to even integers."
}], "Text",ExpressionUUID->"7f36abee-1c7d-48cd-b504-b8f66bdea6c5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"half", "[", 
   RowBox[{"x_", "?", "EvenQ"}], "]"}], ":=", 
  RowBox[{"x", "/", "2"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[185]:=",ExpressionUUID->"bcdfd51c-e0b5-4fb3-b775-9e09f7a42976"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"half", "[", "8", "]"}]], "Input",
 CellLabel->
  "In[186]:=",ExpressionUUID->"e353ea1f-df35-427a-a31b-38c89fc69735"],

Cell[BoxData["4"], "Output",
 CellLabel->
  "Out[186]=",ExpressionUUID->"f74d5170-d350-4bad-98b6-334134b57e09"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"half", "[", "9", "]"}]], "Input",
 CellLabel->
  "In[187]:=",ExpressionUUID->"a0338cb6-ae0e-4d54-901c-38434194566f"],

Cell[BoxData[
 RowBox[{"half", "[", "9", "]"}]], "Output",
 CellLabel->
  "Out[187]=",ExpressionUUID->"ce660c2c-f81c-4bef-8571-05ff9b206551"]
}, Open  ]],

Cell[TextData[{
 "This is called a ",
 ButtonBox["PatternTest",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{"pacler:ref"}, "PatternTest", CharacterEncoding -> 
     "UTF-8"], None}],
 ". The blank is followed by a question mark which is followed by the name of \
a function. When the function returns true, then the argument is considered \
to match and otherwise it does not match. The Wolfram Language includes \
several useful built-in functions, like ",
 StyleBox[ButtonBox["EvenQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/EvenQ"], "FunctionLink"],
 ", ",
 StyleBox[ButtonBox["OddQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/OddQ"], "FunctionLink"],
 ", ",
 StyleBox[ButtonBox["PrimeQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PrimeQ"], "FunctionLink"],
 ", and ",
 StyleBox[ButtonBox["NumberQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/NumberQ"], "FunctionLink"],
 ", which matches any kind of number. You can also define your own functions \
to use as the test."
}], "Text",ExpressionUUID->"80759587-cb37-4951-9c65-c3373153cd52"],

Cell[TextData[{
 "Specifying the allowable type in a function definition is useful because it \
helps to ensure that the function is never applied to invalid input, which \
may have undesirable consequences. For example, consider the functions below. \
First, we define a function ",
 StyleBox["posIntQ", "Code"],
 " that returns true only for positive integers, making use of the Wolfram \
Language\[CloseCurlyQuote]s ",
 StyleBox[ButtonBox["IntegerQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerQ"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Positive",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Positive"], "FunctionLink"],
 " functions. Then, we define the function ",
 StyleBox["loopy", "Code"],
 " which prints and then decreases its argument by 1 (using the ",
 StyleBox[ButtonBox["Decrement",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Decrement"], "FunctionLink"],
 " (",
 StyleBox["--", "Code"],
 ") operator) until it reaches 0."
}], "Text",ExpressionUUID->"3be7cebd-3e27-4a20-8e2e-5790d751f37b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"posIntQ", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{"IntegerQ", "[", "x", "]"}], "&&", 
   RowBox[{"Positive", "[", "x", "]"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[188]:=",ExpressionUUID->"1296b28a-867f-484f-a642-5d015f5ec69b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"loopy", "[", 
   RowBox[{"n_", "?", "posIntQ"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"m", "=", "n"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"While", "[", 
     RowBox[{
      RowBox[{"m", "\[NotEqual]", "0"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", "m", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"m", "--"}]}]}], "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[189]:=",ExpressionUUID->"160b25ed-7bf4-451a-afef-163bb62b3e8b"],

Cell["\<\
Applying this function with a positive integer has the desired result.\
\>", "Text",ExpressionUUID->"c074d0c2-f1b8-438d-bf5c-d1bc00901aef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"loopy", "[", "3", "]"}]], "Input",
 CellLabel->
  "In[190]:=",ExpressionUUID->"95b78065-2499-4fa2-9c1a-529834fc85e8"],

Cell[BoxData["3"], "Print",
 CellLabel->
  "During evaluation of \
In[190]:=",ExpressionUUID->"e5098654-35b1-4b34-9847-771aa7044445"],

Cell[BoxData["2"], "Print",
 CellLabel->
  "During evaluation of \
In[190]:=",ExpressionUUID->"03f0a60f-acb3-49d9-9c07-dd0fd6cf568a"],

Cell[BoxData["1"], "Print",
 CellLabel->
  "During evaluation of \
In[190]:=",ExpressionUUID->"5a932e19-e8d3-4376-aaa4-fd6be5b0eae6"]
}, Open  ]],

Cell[TextData[{
 "If you call the function with a value that does not satisfy the ",
 StyleBox["posIntQ", "Code"],
 " function, that is, a value not in the domain, the function is not \
evaluated."
}], "Text",ExpressionUUID->"f5933ea4-9943-4cbf-afd5-c9f70e6e1350"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"loopy", "[", 
  RowBox[{"-", "5"}], "]"}]], "Input",
 CellLabel->
  "In[191]:=",ExpressionUUID->"99778533-68e1-4618-af2d-2bb903640fc3"],

Cell[BoxData[
 RowBox[{"loopy", "[", 
  RowBox[{"-", "5"}], "]"}]], "Output",
 CellLabel->
  "Out[191]=",ExpressionUUID->"45f16a06-061f-4024-9de0-6b886ab11337"]
}, Open  ]],

Cell[TextData[{
 "Without the restriction that the parameter be a positive integer, applying ",
 StyleBox["loopy", "Code"],
 " to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "5"}], TraditionalForm]],ExpressionUUID->
  "87b6ded1-91c0-4807-9e44-fd6bd3e31ea7"],
 " would have resulted in an infinite loop."
}], "Text",ExpressionUUID->"02a43c02-0d7c-4f81-80dd-3f2db454ffd7"],

Cell[TextData[{
 "The Wolfram Language also provides a syntax for imposing conditions without \
the need to write additional functions like ",
 StyleBox["posIntQ", "Code"],
 ". A ",
 StyleBox[ButtonBox["Condition",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Condition"], "FunctionLink"],
 " (",
 StyleBox["/;", "Code"],
 ") can be used after any pattern and can make use of the named elements of \
the pattern to create a test. The syntax is to enter the pattern, followed by \
",
 StyleBox["/;", "Code"],
 " (read \[OpenCurlyDoubleQuote]provided\[CloseCurlyDoubleQuote]), followed \
by an expression that evaluates to true on valid input. In the case of a \
function definition, the ",
 StyleBox[ButtonBox["Condition",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Condition"], "FunctionLink"],
 " (",
 StyleBox["/;", "Code"],
 ") can be placed within the arguments, between the closing bracket ending \
the arguments and the ",
 StyleBox[ButtonBox["SetDelayed",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SetDelayed"], "FunctionLink"],
 " (",
 StyleBox[":=", "Code"],
 ") operator, or at the end of the function definition. In this manual, we \
typically enter conditions immediately before the ",
 StyleBox[ButtonBox["SetDelayed",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SetDelayed"], "FunctionLink"],
 " (",
 StyleBox[":=", "Code"],
 ") operator. "
}], "Text",ExpressionUUID->"6717d6f7-e0af-4972-abd6-c9b46fd0899f"],

Cell[TextData[{
 "We use this method to revise the loopy function without using the ",
 StyleBox["posIntQ", "Code"],
 " auxiliary function."
}], "Text",ExpressionUUID->"1d0b6982-0b5e-4313-98af-378ce7f63db5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"loopy2", "[", "n_", "]"}], "/;", 
   RowBox[{
    RowBox[{"IntegerQ", "[", "n", "]"}], "&&", 
    RowBox[{"Positive", "[", "n", "]"}]}]}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"m", "=", "n"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"While", "[", 
     RowBox[{
      RowBox[{"m", "\[NotEqual]", "0"}], ",", 
      RowBox[{
       RowBox[{"Print", "[", "m", "]"}], ";", 
       RowBox[{"m", "--"}]}]}], "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[192]:=",ExpressionUUID->"7306cddf-3233-488b-94b3-b0b8af09c082"],

Cell[TextData[{
 "You can provide alternative argument forms using the ",
 StyleBox[ButtonBox["Alternatives",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Alternatives"], "FunctionLink"],
 " (",
 StyleBox["|", "Code"],
 ") operator. For example, the function below accepts either a two-element \
list or a list of three elements where the third element must be a 1."
}], "Text",ExpressionUUID->"73c6be07-434f-4090-9647-f12fdf03959f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"alternateEx", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x_", ",", "y_"}], "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"x_", ",", "y_", ",", "1"}], "}"}]}], "]"}], ":=", 
  RowBox[{"x", "+", "y"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[193]:=",ExpressionUUID->"68c3f7be-9994-4a77-805d-89644e97a51a"],

Cell["\<\
This function applies when either pattern is matched, but not otherwise. Note \
that it is important that the same variable names are used in both \
alternatives.\
\>", "Text",ExpressionUUID->"451702c4-8652-441b-998e-e99c3886da71"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"alternateEx", "[", 
  RowBox[{"{", 
   RowBox[{"3", ",", "2"}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[194]:=",ExpressionUUID->"eef27122-c8f2-4697-bef9-73afd823f7a5"],

Cell[BoxData["5"], "Output",
 CellLabel->
  "Out[194]=",ExpressionUUID->"5e4a17a8-1f5b-43be-831e-81b1b585be45"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"alternateEx", "[", 
  RowBox[{"{", 
   RowBox[{"3", ",", "2", ",", "1"}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[195]:=",ExpressionUUID->"d1c597ff-aad4-46fe-9c3d-6051b6c62091"],

Cell[BoxData["5"], "Output",
 CellLabel->
  "Out[195]=",ExpressionUUID->"fa6eee49-dc91-4064-8b32-62eef9c01a14"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"alternateEx", "[", 
  RowBox[{"{", 
   RowBox[{"3", ",", "2", ",", "7"}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[196]:=",ExpressionUUID->"07d2d517-0c6e-499a-9fee-ab902acfec20"],

Cell[BoxData[
 RowBox[{"alternateEx", "[", 
  RowBox[{"{", 
   RowBox[{"3", ",", "2", ",", "7"}], "}"}], "]"}]], "Output",
 CellLabel->
  "Out[196]=",ExpressionUUID->"f5ebe2a4-b643-49dc-9283-517aa0b5011d"]
}, Open  ]],

Cell["\<\
This same effect can be created by giving multiple definitions, one for each \
argument pattern.\
\>", "Text",ExpressionUUID->"c4afe929-820f-4387-ae0d-cfa008a7f134"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"alternateEx2", "[", 
    RowBox[{"{", 
     RowBox[{"x_", ",", "y_"}], "}"}], "]"}], ":=", 
   RowBox[{"x", "+", "y"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"alternateEx2", "[", 
   RowBox[{"{", 
    RowBox[{"x_", ",", "y_", ",", "1"}], "}"}], "]"}], ":=", 
  RowBox[{"x", "+", "y"}]}]}], "Input",
 CellLabel->
  "In[197]:=",ExpressionUUID->"8fa1a935-f5bd-424f-a468-e57e8079a43e"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will apply whichever definition, if either, matches."
}], "Text",ExpressionUUID->"8172a504-3668-4046-bae9-28034770f282"],

Cell[TextData[{
 "Sometimes, you may wish to give names to larger pieces of patterns. For \
this, the Wolfram Language provides the name-colon-pattern syntax. For \
example, in the function below, ",
 StyleBox["p", "Code"],
 " refers to the list consisting of an integer and a string."
}], "Text",ExpressionUUID->"674a6020-6d9e-4715-a195-3ed8e5dd64bf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"repeat", "[", 
   RowBox[{"p", ":", 
    RowBox[{"{", 
     RowBox[{"_Integer", ",", "_String"}], "}"}]}], "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"p", "[", 
     RowBox[{"[", "2", "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"p", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "}"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[199]:=",ExpressionUUID->"243a7d09-9ccb-4773-a1cd-3a103024a55c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"repeat", "[", 
  RowBox[{"{", 
   RowBox[{"5", ",", "\"\<Hello\>\""}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[200]:=",ExpressionUUID->"02ee332e-c51d-4256-b8a0-4f17cd0db554"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Hello\"\>", ",", "\<\"Hello\"\>", ",", "\<\"Hello\"\>", 
   ",", "\<\"Hello\"\>", ",", "\<\"Hello\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[200]=",ExpressionUUID->"ef8cdad8-00fd-405c-bff0-8efbe952cae8"]
}, Open  ]],

Cell[TextData[{
 "While a single underscore matches a single expression, two underscores, \
called ",
 StyleBox[ButtonBox["BlankSequence",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BlankSequence"], "FunctionLink"],
 " (",
 StyleBox["_\[ThinSpace]_", "Code"],
 "), matches a comma-separated sequence of one or more objects. If you follow \
a ",
 StyleBox[ButtonBox["BlankSequence",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BlankSequence"], "FunctionLink"],
 " with a head or with a ",
 ButtonBox["PatternTest",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{"pacler:ref"}, "PatternTest", CharacterEncoding -> 
     "UTF-8"], None}],
 " (",
 StyleBox["?", "Code"],
 " and function name), then every element of the sequence must have the head \
or pass the test in order for the sequence to match. This provides, for \
example, a way to insist that a list have all integer members, as shown in \
the function below, which multiplies each integer by a power of 10 \
commensurate with its location in the list."
}], "Text",ExpressionUUID->"989e0fda-83f0-4930-8e80-261ecf8496d9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"intShift", "[", 
   RowBox[{"L", ":", 
    RowBox[{"{", "__Integer", "}"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"result", "=", "0"}], ",", "i"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"Length", "[", "L", "]"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"result", "=", 
        RowBox[{"result", "+", 
         RowBox[{
          RowBox[{"L", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "*", 
          RowBox[{"10", "^", 
           RowBox[{"(", 
            RowBox[{"i", "-", "1"}], ")"}]}]}]}]}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", "result"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[201]:=",ExpressionUUID->"0a628048-2a3c-4213-9a43-7be84e91157b"],

Cell["\<\
The result of this function is clearest to see when applied to individual \
digits.\
\>", "Text",ExpressionUUID->"e51f692e-81ec-478a-a3e1-ca3afd2c0a5c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"intShift", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[202]:=",ExpressionUUID->"60d44183-0142-4c63-afa0-237beecd1819"],

Cell[BoxData["4321"], "Output",
 CellLabel->
  "Out[202]=",ExpressionUUID->"cc60fde6-eee8-4fdf-903a-08eeec45a9e4"]
}, Open  ]],

Cell["\<\
If any element of the list is not an integer, the function will not be \
applied.\
\>", "Text",ExpressionUUID->"4706e520-5e39-45c3-8a18-96bbd6328ac0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"intShift", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", "7", ",", "1", ",", "3.4"}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[203]:=",ExpressionUUID->"d013d2ad-2bad-46c2-82a4-d4e41ff1796f"],

Cell[BoxData[
 RowBox[{"intShift", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", "7", ",", "1", ",", "3.4`"}], "}"}], "]"}]], "Output",
 CellLabel->
  "Out[203]=",ExpressionUUID->"9860aa62-050e-4702-98a7-6a92f27860a8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pure Functions", "Subsection",
 CellTags->"Section3b",ExpressionUUID->"79aa057a-ae89-407a-a83c-53659d9a3d0c"],

Cell[TextData[{
 "A pure ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " (",
 StyleBox["&", "Code"],
 ") in the Wolfram Language is typically used when you need to define a \
function that you will only use once or when you want to define a function \
within the body of another function."
}], "Text",ExpressionUUID->"db7cec0b-2db5-4646-a4b5-cd8046b0cfbb"],

Cell[TextData[{
 "The typical syntax for a pure function is to enter the function body \
followed by an ampersand (",
 StyleBox["&", "Code"],
 "). When the function accepts a single argument, the pound (",
 StyleBox["#", "Code"],
 ") symbol (called a ",
 StyleBox[ButtonBox["Slot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Slot"], "FunctionLink"],
 ") is used as the name of the argument. For example, the following is the \
pure function for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "\[Rule]", 
    RowBox[{
     SuperscriptBox["x", "2"], "+", "1"}]}], TraditionalForm]],
  ExpressionUUID->"a4e79219-b7d6-43ee-a74c-6c0627c11b56"],
 "."
}], "Text",ExpressionUUID->"e78292c7-4c26-4ff3-a97a-0816f68e80d2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "^", "2"}], "+", "1"}], "&"}]], "myCode",
 Evaluatable->False,
 InitializationCell->
  False,ExpressionUUID->"e717c28a-87e0-492c-8344-45b2e4222ef7"],

Cell[TextData[{
 "There are two main applications for a pure function. First, you can pass it \
a value for its argument by following the ampersand with the argument \
enclosed in brackets. The following computes ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["3", "2"], "+", "1"}], TraditionalForm]],ExpressionUUID->
  "d7d56357-f45e-4a24-be07-f21251ac1ca5"],
 "."
}], "Text",ExpressionUUID->"0a6aba3b-d42c-4ca6-81f5-424ecc59889a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"#", "^", "2"}], "+", "1"}], "&"}], "[", "3", "]"}]], "Input",
 CellLabel->
  "In[204]:=",ExpressionUUID->"c9f958ac-1c16-440f-af2b-01af02f3b653"],

Cell[BoxData["10"], "Output",
 CellLabel->
  "Out[204]=",ExpressionUUID->"39ded985-2676-447e-83b8-559b3b90bf00"]
}, Open  ]],

Cell[TextData[{
 "More usefully, you can use a pure function any place you would normally \
give the name of a function. For example, recall the discussion of ",
 StyleBox[ButtonBox["Map",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Map"], "FunctionLink"],
 " (",
 StyleBox["/@", "Code"],
 ") from Section 1.1 of this manual. Given a function and a list, ",
 StyleBox[ButtonBox["Map",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Map"], "FunctionLink"],
 " applies the function to each element of the list. The following computes \
",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "2"], "+", "1"}], TraditionalForm]],ExpressionUUID->
  "c0d9a49c-ef5b-4029-9db5-8c54f3b9604f"],
 " for each member of the given list."
}], "Text",ExpressionUUID->"c9a2b9ec-b4be-4d5f-b519-0a1e8b09cb52"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"#", "^", "2"}], "+", "1"}], "&"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "5", ",", "7", ",", "11", ",", "13"}], 
    "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[205]:=",ExpressionUUID->"aa9ade12-26a8-4323-a5dd-b4ba82f18d5f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "10", ",", "26", ",", "50", ",", "122", ",", "170"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[205]=",ExpressionUUID->"4361eeb4-63a2-4201-948a-b35c7d08c1d0"]
}, Open  ]],

Cell[TextData[{
 "The following is identical, but using the ",
 StyleBox["/@", "Code"],
 " operator syntax."
}], "Text",ExpressionUUID->"03f64472-d52d-4cee-8a1b-c50d26b7347e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"#", "^", "2"}], "+", "1"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"2", ",", "3", ",", "5", ",", "7", ",", "11", ",", "13"}], 
   "}"}]}]], "Input",
 CellLabel->
  "In[206]:=",ExpressionUUID->"4c3271b8-bdb8-43b7-8ed0-c6fbb0a2a55f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "10", ",", "26", ",", "50", ",", "122", ",", "170"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[206]=",ExpressionUUID->"69a2d591-c740-4cdf-a6cd-fa062d6a10d7"]
}, Open  ]],

Cell[TextData[{
 "If you need more than one argument, you can follow the ampersand by an \
index starting at 1: ",
 StyleBox["#1", "Code"],
 " for the first argument, ",
 StyleBox["#2", "Code"],
 " for the second, etc. The following expression uses ",
 StyleBox[ButtonBox["MapThread",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MapThread"], "FunctionLink"],
 " to compute ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    SuperscriptBox["y", "3"]}], TraditionalForm]],ExpressionUUID->
  "fd21e069-5cf6-4437-ae22-487dd6a325fa"],
 " with values of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "227e6265-4e30-4a5e-8287-a2cf899d1b6f"],
 " and ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "be029892-1f6a-4e73-ad90-415c6be17312"],
 " coming from the two lists."
}], "Text",ExpressionUUID->"6fc24462-d777-4b53-afb1-e51ead2b688d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapThread", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"#1", "^", "2"}], "+", 
     RowBox[{"#2", "^", "3"}]}], "&"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}]}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->
  "In[207]:=",ExpressionUUID->"e44b7514-4e84-4a1e-9a09-2d8c7f67f3f5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"9", ",", "68", ",", "225", ",", "528"}], "}"}]], "Output",
 CellLabel->
  "Out[207]=",ExpressionUUID->"8b45638b-5c59-40d2-887c-8f350eddc114"]
}, Open  ]],

Cell[TextData[{
 "You can, if you wish, name pure functions, using ",
 StyleBox[ButtonBox["Set",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Set"], "FunctionLink"],
 " (",
 StyleBox["=", "Code"],
 ") just like you assign values to variables. Once the name is assigned, you \
evaluate the function as usual."
}], "Text",ExpressionUUID->"3056048f-1080-4112-af97-5a338ebe4820"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pureExample", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"#1", "^", "2"}], "+", 
    RowBox[{"#1", "*", "#2"}], "+", 
    RowBox[{"#2", "^", "2"}]}], "&"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[208]:=",ExpressionUUID->"d279be19-44c7-4329-9038-e1aeb3124b1d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["#1", "2"], "+", 
   RowBox[{"#1", " ", "#2"}], "+", 
   SuperscriptBox["#2", "2"]}], "&"}]], "Output",
 CellLabel->
  "Out[208]=",ExpressionUUID->"76d56e26-aa39-425c-91cb-c748e7dd9662"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pureExample", "[", 
  RowBox[{"2", ",", "3"}], "]"}]], "Input",
 CellLabel->
  "In[209]:=",ExpressionUUID->"b47150e9-e842-476f-a566-286a50bd133a"],

Cell[BoxData["19"], "Output",
 CellLabel->
  "Out[209]=",ExpressionUUID->"2da24b5a-8a71-44f4-a359-50a6ee2c45f6"]
}, Open  ]],

Cell["\<\
Note that applying the pure function to symbols produces an expression for \
the function in terms of the given symbols.\
\>", "Text",ExpressionUUID->"1a68ea7a-196e-450a-8f1b-09a2f6fc5754"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pureExample", "[", 
  RowBox[{"s", ",", "t"}], "]"}]], "Input",
 CellLabel->
  "In[210]:=",ExpressionUUID->"b1660e95-ea52-42a0-b4ad-c1ea5b6bf346"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["s", "2"], "+", 
  RowBox[{"s", " ", "t"}], "+", 
  SuperscriptBox["t", "2"]}]], "Output",
 CellLabel->
  "Out[210]=",ExpressionUUID->"809f92ed-a863-4091-9464-d1f5ca64910b"]
}, Open  ]],

Cell[TextData[{
 "The Wolfram Language also provides a functional syntax for defining pure \
functions with ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 ". This syntax has more flexibility, but is used less frequently, so we will \
not discuss it here."
}], "Text",ExpressionUUID->"4efd10fd-4327-4d61-a72e-5ee6f3cd771c"],

Cell[CellGroupData[{

Cell["Composition of Functions", "Subsubsection",ExpressionUUID->"700a3e6c-5765-4211-9a68-c9f77baa1ffb"],

Cell["\<\
The Wolfram System\[CloseCurlyQuote]s support for algebraic combinations of \
functions is not as natural as you might hope, but pure functions provide a \
useful way to make exploring these ideas fairly easy. \
\>", "Text",ExpressionUUID->"5ad43e52-5d7e-4e71-9040-935fc5ae7417"],

Cell[TextData[{
 "Consider two functions, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], "=", 
    RowBox[{
     SuperscriptBox["x", "2"], "+", "1"}]}], TraditionalForm]],
  ExpressionUUID->"ca1706f8-f7bf-44dd-982e-82e0cdd984e1"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"g", "(", "x", ")"}], "=", 
    SuperscriptBox["x", "3"]}], TraditionalForm]],ExpressionUUID->
  "2451b97e-a3ef-4556-bd8e-08093bb7345e"],
 ". We define these two functions, ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]],ExpressionUUID->
  "0c4727c4-4dcf-4141-87a3-f68da944360f"],
 " defined in the usual way and ",
 Cell[BoxData[
  FormBox["g", TraditionalForm]],ExpressionUUID->
  "d539807a-19e5-4973-b0e6-5c02969783a0"],
 " as a pure function."
}], "Text",ExpressionUUID->"ccafac83-3542-4184-b3e8-1a58679f8a3d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{"x", "^", "2"}], "+", "1"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[211]:=",ExpressionUUID->"8f191f2b-dc79-4d21-a3fa-b7ecc392e364"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{
   RowBox[{"#", "^", "3"}], "&"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[212]:=",ExpressionUUID->"4c7cac59-08e5-4309-9381-b026a5ee00c2"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["#1", "3"], "&"}]], "Output",
 CellLabel->
  "Out[212]=",ExpressionUUID->"0b77be7c-1ebf-4923-b500-29ddd3f3a3aa"]
}, Open  ]],

Cell["\<\
Note that you use exactly the same syntax to apply them to values.\
\>", "Text",ExpressionUUID->"8e3c6e62-4522-4489-85bd-ac06b0e90eb8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "2", "]"}]], "Input",
 CellLabel->
  "In[213]:=",ExpressionUUID->"f8de1f7e-7926-410d-b681-f25ad157d0b9"],

Cell[BoxData["5"], "Output",
 CellLabel->
  "Out[213]=",ExpressionUUID->"09877c38-2b95-458e-9dfc-22528471eae7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", "5", "]"}]], "Input",
 CellLabel->
  "In[214]:=",ExpressionUUID->"d3451eba-7f14-4edb-bd34-034dc1deeb22"],

Cell[BoxData["125"], "Output",
 CellLabel->
  "Out[214]=",ExpressionUUID->"394be5f2-0d0f-490e-bde3-4e5ab7bcbe2e"]
}, Open  ]],

Cell[TextData[{
 "To create a function that is the algebraic combination of these two, say ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "=", 
    RowBox[{"f", "/", "g"}]}], TraditionalForm]],ExpressionUUID->
  "8c761eac-7189-4eb3-8a37-b541755ef6f2"],
 ", we can define the combined function as a pure function obtained by \
evaluating ",
 StyleBox["f", "Code"],
 " and ",
 StyleBox["g", "Code"],
 " on the argument ",
 StyleBox["#", "Code"],
 "."
}], "Text",ExpressionUUID->"88ec8b34-f706-421b-83a0-95e1a2f1fffc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "[", "#", "]"}], "/", 
    RowBox[{"g", "[", "#", "]"}]}], "&"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[215]:=",ExpressionUUID->"dd41c862-53a4-4559-9691-60be6a90d102"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"f", "[", "#1", "]"}], 
   RowBox[{"g", "[", "#1", "]"}]], "&"}]], "Output",
 CellLabel->
  "Out[215]=",ExpressionUUID->"67abe25b-62d2-45bc-8a5d-7f1bbc3cf5da"]
}, Open  ]],

Cell[TextData[{
 "We can now evaluate ",
 StyleBox["h", "Code"],
 " at values or obtain a formula."
}], "Text",ExpressionUUID->"16a1bd6d-9fb4-47d4-bbee-d35ce717fa91"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", "[", "3", "]"}]], "Input",
 CellLabel->
  "In[216]:=",ExpressionUUID->"77531b6b-4446-4c68-b2b2-c41bd7766a78"],

Cell[BoxData[
 FractionBox["10", "27"]], "Output",
 CellLabel->
  "Out[216]=",ExpressionUUID->"e69fb152-82b0-4430-833a-58d4870f9e4e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", "[", "t", "]"}]], "Input",
 CellLabel->
  "In[217]:=",ExpressionUUID->"56fd16b5-fa9f-4f8d-8eba-49b042e818c5"],

Cell[BoxData[
 FractionBox[
  RowBox[{"1", "+", 
   SuperscriptBox["t", "2"]}], 
  SuperscriptBox["t", "3"]]], "Output",
 CellLabel->
  "Out[217]=",ExpressionUUID->"73835b73-6e07-4a85-91cc-de216ed62884"]
}, Open  ]],

Cell[TextData[{
 "For composition of functions, the Wolfram Language provides ",
 StyleBox[ButtonBox["Composition",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Composition"], "FunctionLink"],
 " (",
 StyleBox["@*", "Code"],
 "). The following defines ",
 StyleBox["h1", "Code"],
 " to be ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "\[SmallCircle]", "g"}], TraditionalForm]],ExpressionUUID->
  "60ed429e-1120-4466-9109-d8013a536914"],
 " and ",
 StyleBox["h2", "Code"],
 " to be ",
 Cell[BoxData[
  FormBox[
   RowBox[{"g", "\[SmallCircle]", "h"}], TraditionalForm]],ExpressionUUID->
  "07aa04e7-322d-4012-b0c5-102d59ee376f"],
 " and applies them both to the symbol ",
 StyleBox["t", "Code"],
 " to obtain formulas."
}], "Text",ExpressionUUID->"7a6ab7cc-fba1-4eda-84da-341ddd166aba"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"h1", "=", 
   RowBox[{"Composition", "[", 
    RowBox[{"f", ",", "g"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"h1", "[", "t", "]"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[218]:=",ExpressionUUID->"5f03526d-62b5-442e-97ec-ccc8208b7617"],

Cell[BoxData[
 RowBox[{"1", "+", 
  SuperscriptBox["t", "6"]}]], "Output",
 CellLabel->
  "Out[219]=",ExpressionUUID->"0faed894-191b-453c-9449-e44008e27daf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"h2", "=", 
   RowBox[{"g", "@*", "f"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"h2", "[", "t", "]"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[220]:=",ExpressionUUID->"4d314af1-0883-4f61-9b15-2a83f5424dd4"],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   RowBox[{"1", "+", 
    SuperscriptBox["t", "2"]}], ")"}], "3"]], "Output",
 CellLabel->
  "Out[221]=",ExpressionUUID->"806e1932-588f-470f-8a04-a4c4b0c883f2"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "Note that the arguments of ",
 StyleBox[ButtonBox["Composition",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Composition"], "FunctionLink"],
 " can be pure functions."
}], "Text",ExpressionUUID->"ac944982-6192-45c9-9567-5b86eeac055b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Composition", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "^", "2"}], "&"}], ",", 
    RowBox[{
     RowBox[{"#", "+", "3"}], "&"}]}], "]"}], "[", "x", "]"}]], "Input",
 CellLabel->
  "In[222]:=",ExpressionUUID->"7755afd0-07f9-455d-a779-1bf6595c85c7"],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   RowBox[{"3", "+", "x"}], ")"}], "2"]], "Output",
 CellLabel->
  "Out[222]=",ExpressionUUID->"2ce4293c-3d3f-4de3-827e-bbe730519f64"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Plotting Graphs of Functions", "Subsubsection",ExpressionUUID->"15c51881-a4bb-461a-a46d-2dd704b8f12e"],

Cell[TextData[{
 "You can have ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " draw the graph of a function with the ",
 StyleBox[ButtonBox["Plot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plot"], "FunctionLink"],
 " function. ",
 StyleBox[ButtonBox["Plot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plot"], "FunctionLink"],
 " requires two arguments: the first is the function to be graphed in terms \
of a variable, and the second is a list containing the variable and the \
minimum and maximum values of the domain of the variable. Typically, you \
provide the function as an algebraic expression as in the example below, \
which graphs ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "2"], "-", "x", "+", "2"}], TraditionalForm]],
  ExpressionUUID->"30b579b4-cd53-440b-bab7-d20a953cbb95"],
 " from ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "5"}], TraditionalForm]],ExpressionUUID->
  "3d49d9c7-800c-4725-8742-dbcdda563613"],
 " to ",
 Cell[BoxData[
  FormBox["5", TraditionalForm]],ExpressionUUID->
  "4d0398d5-294a-4078-a76d-b4460a8c9d1f"],
 "."
}], "Text",ExpressionUUID->"5e326eeb-ecf1-431e-8d55-a001225c65f8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "^", "2"}], "-", "x", "+", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[223]:=",ExpressionUUID->"a63d6134-dd68-4d7a-8b6c-a1112a9a5961"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwtmHk01N//x2ds2bKNZURkqSyRMPZ63ZKlhaRIFCX5lESW7PTxISKtStlK
di0qylZ5TyEhkuzr2LfSGGt5z8x3fuf8/rrnce6957xer+fzvM7rXiV3X/uz
XAQCgZ9IIPzfGjlpw2CzSdQcM8deNhvQRLj0Uh9Oonpv/HHl5AogW7GhlfI/
JGpZy+9T7+cAbTK+xPRdIFGHsvk7IwcAfUq8y0+bIFFdxSuui74DxK/dpUBt
JlGN1ols9gkCdC/w1IF/00nUPY4pouS5XegZMSCXYEiiFkSTaxWGdyLes1a6
siclqKjwU0n/U1NE6q7zzr4jTs1FVU6iL42RfU3aGfVGMarywbTLXa2GKPz3
Tu/bo6JUmUh1eVEaBVUEp3m9PCRCNSHrP1y/WR/Z3nXYxEoVpqqbHS645KKL
rDI/2Fr/FKR6ap5T/PlKB+XXh3YGuAhQ84f1Dtf7aCPX2HtS3wrXUYUdBVaP
ndNEUae4i4VIfFRVj0I7VrUaImgpYuZXeag+o+5pYvu3oN7rqfHPOrioPVj8
HdcmFSQveK5ocQ+R6r40bHAxSwldoGjw9smzMffIAbrhpAI6YzhYWFOzhkXu
dvwWiG9AGiEmbJ/cVUyVtytEKl8GPRk4Uhu6ewn7GazhmOomiSajpcysyAyM
8uOGdE2OOKq6r2Yx5fgLK2S42zuKiiCd6Z7F7ZkTWBGBHC2VL4AC6VrqMrET
mKunmdhyigCqWIk+yfKawCquNgTR4gXQbj6Nz1+NJjCH+Y2NbecFkL1K2IPz
7eOYUcTLBC1tAXT55AaTHKFxLO/UZe93Ffyo6rvzFemwUYzskUQ16liH9lb1
CTAdaZirw2R2pSYfKn6aZ1xvSsO8REvi2Rv5EDnd9/ydTTTsTpk4y06MD3Wu
8N090D6E6X+99Vh6iRdtDncUy/w7iDVLxr/dhvGiT9FLwshqAENy7lqxDrwI
v6nHF0frwXSZDQdpiTyo1bf+7IanPRjVWdfjYRQPyrFzqSsO6MG88ravP+HP
g/ZLxMR28fVg4lzTJD5nHpR6v41LXasbK+l2XBxT50EGGX7sptBOjLKmQGxp
4kaXil6uipN+YFZSp/fbkLmRjohPzB5aGyatMmm4XYQbzftvEwl40Ya5bFQ0
lePhRv5mRSrtVm3Yvq7c/8TpXOjyt2zblIjv2OtT66SDv3ChhRnNfZSv37CK
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
m4L+B8M67Ck=
       "]]},
     Annotation[#, "Charting`Private`Tag$2277#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-5, 5}, {0., 31.999997755102083`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->
  "Out[223]=",ExpressionUUID->"6d1bcb29-394e-405e-89d7-052c03c0d185"]
}, Open  ]],

Cell["\<\
The first argument may also be based on a named function, as the following \
examples illustrate. The essential requirement is that the first argument \
must evaluate to a numeric value whenever the variable is assigned a value.\
\>", "Text",ExpressionUUID->"e0236c2a-e2ba-47d5-978e-1b830c1414fc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[224]:=",ExpressionUUID->"11608e4e-07d8-42a2-89db-5d618333553e"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJw1mHk41U/0x5EtlOWW7JFIlIhwLZ1BtixJReibLKm0kD1bi7W0kCVLkpSi
omhTNNeulD37VvYlPvdyubb87u95fr+/5nk9z8w5M+8z58w8R8bF0+Y0GwsL
ixArC8v/jqGjlrS1NRKlsry8d22NjEaChendKySKT9idG/IMMrIS6F/4uEii
ZPMwXKwIMpIme616zpIoDxJftWUNkFH5rfvcAyMkSv6lhJt2ZWTErdwuRflJ
onzQOS757wYZJfqeMr+WTqJIkr+uaHKR0UtWn6csmiSKbtly2kmSFuI4bbJX
9D8hylq9insySQOROqouPIkXpGR+jynNOaiObCrSXHd+F6BYphdJWD7ai4Jn
9C7EDfJTFHDWxoxBFfQpIM2j4NBGSuT9smN7Pigjq/vHpP+l8lEw6U61c5wS
MskotTKd4qEEzUgrVecooJyaK20+juspJZ5JjhNb5NHJiMTNDS+4KHT1p3u3
h8misFPr8nlJnBT22ztO62jLIJbdW7FhJDvlhIrGsauHpVBXbGr0y19slKpi
A6dRJTEkwXM2d86AlfJhmF/0VKYwOr9PkaNbYg1zE/f3sEqTkKtm34uKimX8
tEhqOJxXACkGaq9desrA6vUC3rOLPCir90jlFX065mRV+u4nxYn2Du1dalWn
4/zzouX5GzhR5YSgiooCHXvod3ykrnCgkYWG9JGNdCyuXPMwqZsDKQpZ+Bzp
mcNn+TwsjqVyoELjA9t2B8zhtz0VBu+EOVBlgfq1gVez+F9dTSwhwo5Gr2/W
NRGh4YBhgXsuOmyIJ7RgJoGHhq/I1kyNK7Eh5UCz7IEVKpaoLuQIlWBD/pdC
eYJ+U/F+suK56lVWxOk43PEqj4pX21LnhymsaLv6ez8hPSp2IIKVjpuxIpeR
owW9zgR+mGa+yu3KgqJ+T7soHiVw7IX8Mq5jLCivJ0Y4wJjAotnG+kImLIjW
XBIqoETgTfu3eB9UYkFsV81SosZmMKudt/q9sTUA1fGmwxtmcGDtGveEwBp8
TlIwGrP9i33TVG9o+awCt+OoK6vuX8zBLheZ6rAKttI5N8Rk/uImw1o5QYNV
oOXJUiwmp7CIsRQ6ILgKOylSOm+vTuEzx7g7i9+sQMrEJtWgF5OYM7M1/c/s
MvgBqyTf0jjW77M8rRi7BOXsFB25/nEsz68r5eS3BALfwxz2V45jU+Eu3zyn
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
uq0TssLcX3ikg+YCGf1fPwT9fz/kfwChpYaO
       "]]},
     Annotation[#, "Charting`Private`Tag$2381#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-5, 5}, {0., 25.999997959183716`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->
  "Out[224]=",ExpressionUUID->"ec44c07e-8d30-45c8-99f5-6badef40d5ff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"g", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[225]:=",ExpressionUUID->"1d8c9f76-bbd1-4973-bc84-2649709c0a73"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$2425#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-5, 5}, {-124.99998469387819`, 124.99998469387819`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->
  "Out[225]=",ExpressionUUID->"8b08a5c2-6933-4dc6-9ef0-f1403317b16f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Floor", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[226]:=",ExpressionUUID->"9d070b69-e117-4bd6-8db5-c3e01f5d9077"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], 
       LineBox[{{-4.9999997959183675`, -5.}, {-4.901856591951532, -5.}, \
{-4.803713387984696, -5.}, {-4.590916429145413, -5.}, {-4.392221164298479, \
-5.}, {-4.294822338054859, -5.}, {-4.197423511811239, -5.}, \
{-4.144596460963027, -5.}, {-4.091769410114814, -5.}, {-4.0653558846907085`, \
-5.}, {-4.038942359266602, -5.}, {-4.025735596554549, -5.}, \
{-4.012528833842495, -5.}, {-4.009227143164482, -5.}, {-4.005925452486469, \
-5.}, {-4.003188775510204, -5.}}], 
       LineBox[{{-3.9968112244897958`, -4.}, {-3.9927186897744154`, -4.}, \
{-3.986115308418389, -4.}, {-3.8875120537181376`, -4.}, {-3.788908799017886, \
-4.}, {-3.575191738711772, -4.}, {-3.3653722907653534`, -4.}, \
{-3.2675134137883175`, -4.}, {-3.169654536811282, -4.}, \
{-3.1165974605963616`, -4.}, {-3.063540384381441, -4.}, {-3.037011846273981, \
-4.}, {-3.0104833081665205`, -4.}, {-3.007167240903088, -4.}, \
{-3.0038511736396556`, -4.}, {-3.0031887755102042`, -4.}}], 
       LineBox[CompressedData["
1:eJxTTMoPSmViYGAQAWIQ7XfwtGbFT/YDDGDAceBR2I7LO94g+Md1Nq5Vvo/g
T7qxKPHnYQQ/rmWK6PkVCH7ep9OJb++ywfl1CczruIURfAZd+f3OrSxw/q3u
me2rrzLB+b9PNUgE8CD4MlwZK784McL5Tn6b71+6ygDnZ076J7oxA8EvSp64
OMMXwa8xUTFUMELwGee+/V6tguC3sW7fd10MwT+xU3oRqwCCz5XX0GrMieBv
sjO51s6G4AMAxthbmg==
        "]], 
       LineBox[{{-1.996811224489796, -2.}, {-1.9711883622067754`, -2.}, \
{-1.9445448114159614`, -2.}, {-1.8399194144325521`, -2.}, \
{-1.735294017449143, -2.}, {-1.5401449174746724`, -2.}, \
{-1.3284852665945908`, -2.}, {-1.229706288150724, -2.}, {-1.130927309706857, \
-2.}, {-1.0774101827585207`, -2.}, {-1.0238930558101846`, -2.}, \
{-1.0172034149416427`, -2.}, {-1.0105137740731007`, -2.}, \
{-1.0071689536388297`, -2.}, {-1.0038241332045588`, -2.}, \
{-1.003188775510204, -2.}}], 
       LineBox[{{-0.9968112244897959, -1.}, {-0.9837552105989325, -1.}, \
{-0.9703759288618484, -1.}, {-0.9436173653876803, -1.}, {-0.9168588019135122, \
-1.}, {-0.8117733541966873, -1.}, {-0.7066879064798623, -1.}, \
{-0.5106187050385604, -1.}, {-0.2980389526916474, -1.}, \
{-0.19879992351436487`, -1.}, {-0.09956089433708235, -1.}, \
{-0.05091578283836483, -1.}, {-0.003188775510204082, -1.}}], 
       LineBox[CompressedData["
1:eJxTTMoPSmViYGAwBmIQ3X7s14UI+Sx7Bii4J7nxHTd/DZwfbHxjT5tjC5y/
7WZ4U3t1F5zPe+C18pGoCXB+YVr2yyNTpsH5iyy1fY5unAnnX+F5ve7ouTlw
/pxIU6vkloVwPgPD1v/J+5bD+TNfihg+8VkJ5xtdLklKub0Kzk9ZZnI05cda
BF8t6qiR5CY4//iZm13GwTvg/IyKW8ejtXfC+Rwqt1lamHfB+V7Vd+qubN4N
55/RvF9UKrIfod+5aO3tV4fg/JwF5VNl15yE8610D24KmH4ZzmcqE72TIvkA
zmfnCWhMevcMzo9Qjzpgxvkczl/llPKfSwXB96usqN0cieBPe7agkuUogq92
8GPhstkv4HzXsslJrzxeIdRPnLtwXzKC/2LN8geT6hD8nse746y3IPhXAp5E
9ci/RoSntmmw3jcEv/nBNeeixW8R6WWnd27FHgTfavKBaXVXEfwPrqtedrG/
g/PjVtf2L85G8He1fNqxsgXBF41Lf7R+LoJ/RiDQdM95BN+qTOX2FeP3CP/5
z2S57YPgf9Tg03uYiuCvuP294e10BJ9la86qzxsQ/Pi+h5d/nkTwd6WH/f3/
CMG3ZNVf/uApgg8AI2XVew==
        "]], 
       LineBox[{{1.003188775510204, 1.}, {1.0086787401946014`, 1.}, {
        1.0117334362486905`, 1.}, {1.0178428283568688`, 1.}, {
        1.0239522204650469`, 1.}, {1.072827357330472, 1.}, {
        1.1217024941958975`, 1.}, {1.227708043379554, 1.}, {
        1.3337135925632102`, 1.}, {1.5316229969381747`, 1.}, {
        1.7256347889534445`, 1.}, {1.8308959604138848`, 1.}, {
        1.9361571318743254`, 1.}, {1.9607097129903919`, 1.}, {
        1.9852622941064584`, 1.}, {1.9914004393854752`, 1.}, {
        1.996811224489796, 1.}}], LineBox[CompressedData["
1:eJxTTMoPSmViYGAQAWIQvcnO5Fo7G4MDAwQ4rLrqve8CL4K/6ZDDJUkRBP98
mYiSnS6C/0brRWGSG4Kf9Nts4+dVCP71060fWvgZ4fxpyiWT+18i+KHVSWaz
DjPB+Tncr5XORbHA+fKrj01je8UK5581ZP3adYgNzq/e4RzMP5sdzo9yLzsZ
uAXBt7q2wn7KWQR/leyhKtNbCL5k6u2t154h+Bc4MoLV3yL4HWu+fCj/jOD7
HTytWfETwQcAUxVKYA==
        "]], 
       LineBox[{{3.0031887755102042`, 3.}, {3.024715605746873, 3.}, {
        3.049383199546294, 3.}, {3.098718387145135, 3.}, {3.148053574743976, 
        3.}, {3.2549792253944636`, 3.}, {3.3619048760449513`, 3.}, {
        3.5718585649862313`, 3.}, {3.767710559935164, 3.}, {3.873891832862436,
         3.}, {3.9800731057897076`, 3.}, {3.986268757410401, 3.}, {
        3.992464409031095, 3.}, {3.995562234841442, 3.}, {3.9968112244897958`,
         3.}}], LineBox[{{4.003188775510204, 4.}, {4.0172470155138695`, 4.}, {
        4.029638318755257, 4.}, {4.054420925238031, 4.}, {4.079203531720806, 
        4.}, {4.128768744686354, 4.}, {4.178333957651903, 4.}, {
        4.275515577403153, 4.}, {4.3726971971544035`, 4.}, {4.583570987562515,
         4.}, {4.780343083978279, 4.}, {4.890171439948324, 4.}, {
        4.9999997959183675`, 4.}}]},
      Annotation[#, 
       "Charting`Private`Tag$2472#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-5, 5}, {-5., 4.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->
  "Out[226]=",ExpressionUUID->"22928262-ca89-445b-ae82-4fdfe4b1bc24"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Associations", "Subsection",
 CellTags->"Section3c",ExpressionUUID->"8333cb75-60d8-4f5f-9dce-e0c514e2307e"],

Cell[TextData[{
 "For finite domains, an ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 ", introduced in Section 2.2 of this manual, is a natural way to represent a \
function. Another common approach is to use an ",
 ButtonBox["indexed variable",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/MakingDefinitionsForIndexedObjects"],
 ", which we use below to model recursively defined sequences. "
}], "Text",ExpressionUUID->"4c6900fb-dc09-44f8-bd2d-328a3e5d556a"],

Cell[TextData[{
 "For example, suppose ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]],ExpressionUUID->
  "e07a2703-059e-4d34-8b88-5abe10a5351a"],
 " is the function whose domain is the set of students in a class and that \
maps each student to their grade on an exam. Let ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]],ExpressionUUID->
  "06c72076-2ea5-4676-9f92-a297aad85167"],
 " be defined by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "Ann", ")"}], "=", "83"}], TraditionalForm]],
  ExpressionUUID->"26852847-a7bc-474a-b410-4df4ef35d9db"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "Bob", ")"}], "=", "79"}], TraditionalForm]],
  ExpressionUUID->"248a9227-dce2-4bb4-b577-d48714cdab8c"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "Carla", ")"}], "=", "91"}], TraditionalForm]],
  ExpressionUUID->"bd23a373-645f-48fd-b485-761f2a0b2152"],
 ", and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "Dave", ")"}], "=", "72"}], TraditionalForm]],
  ExpressionUUID->"01a13bb0-a942-47e1-9d36-805609b461fa"],
 ". We model ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]],ExpressionUUID->
  "81026ce4-d38c-400a-a817-ed97deb56cba"],
 " as an ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 " named ",
 StyleBox["exams", "Code"],
 ". Recall that an ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"], "FunctionLink"],
 " can be entered as a sequence of rules delimitated by ",
 StyleBox["<|", "Code"],
 " on the left and ",
 StyleBox["|>", "Code"],
 " on the right, with the arrow (\[Rule]) entered as a hyphen followed by the \
greater than symbol (",
 StyleBox["->", "Code"],
 ")."
}], "Text",ExpressionUUID->"94aef252-4dbe-4c40-a715-15d5a4002096"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exams", "=", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<Ann\>\"", "\[Rule]", "83"}], ",", 
    RowBox[{"\"\<Bob\>\"", "\[Rule]", "79"}], ",", 
    RowBox[{"\"\<Carlos\>\"", "\[Rule]", "91"}], ",", 
    RowBox[{"\"\<Delia\>\"", "\[Rule]", "72"}]}], "|>"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[227]:=",ExpressionUUID->"e3c0435e-558c-48da-bd8b-10d8f435dfb6"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Ann\"\>", "\[Rule]", "83"}], ",", 
   RowBox[{"\<\"Bob\"\>", "\[Rule]", "79"}], ",", 
   RowBox[{"\<\"Carlos\"\>", "\[Rule]", "91"}], ",", 
   RowBox[{"\<\"Delia\"\>", "\[Rule]", "72"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[227]=",ExpressionUUID->"b2ff9c39-89d6-4d23-9fc6-7001e9dd440d"]
}, Open  ]],

Cell[TextData[{
 "Once the indexed variable has been assigned, you can obtain the value ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "Carla", ")"}], TraditionalForm]],ExpressionUUID->
  "801f3033-0abb-461f-896d-7bfbc66b1318"],
 " as follows."
}], "Text",ExpressionUUID->"dfcb60f5-ea13-4dc9-a998-629859414745"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exams", "[", "\"\<Carlos\>\"", "]"}]], "Input",
 CellLabel->
  "In[228]:=",ExpressionUUID->"154a8455-fb8c-40a7-9896-00b48a12e67c"],

Cell[BoxData["91"], "Output",
 CellLabel->
  "Out[228]=",ExpressionUUID->"2fec2bb1-12d1-4d60-be9f-86dbcea9b38d"]
}, Open  ]],

Cell[TextData[{
 "You can also modify values just by performing an assignment of the form ",
 Cell[BoxData[
  RowBox[{
   StyleBox["association", "CodeVar"], "[", 
   StyleBox["key", "CodeVar"], 
   RowBox[{"]", "="}], 
   StyleBox["value", "CodeVar"]}]], "myCode",ExpressionUUID->
  "200f0f93-e879-48dc-8371-e7f99000c901"],
 ". Moreover, with the association already defined, you can add new \
key\[Dash]value pairs by making such an assignment."
}], "Text",ExpressionUUID->"c90f10da-7198-4527-b2c2-53cc6122007f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"exams", "[", "\"\<Ann\>\"", "]"}], "=", "84"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[229]:=",ExpressionUUID->"247fbe47-0c10-420d-9c30-8ac450a424d7"],

Cell[BoxData["84"], "Output",
 CellLabel->
  "Out[229]=",ExpressionUUID->"40640d86-0070-4da3-89b5-6ce89c3de92a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"exams", "[", "\"\<Ernie\>\"", "]"}], "=", "86"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[230]:=",ExpressionUUID->"f4064912-a86e-4095-842a-980585d5e0d4"],

Cell[BoxData["86"], "Output",
 CellLabel->
  "Out[230]=",ExpressionUUID->"bbd0df50-f636-4ded-857d-cdbb5b842f21"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["exams"], "Input",
 CellLabel->
  "In[231]:=",ExpressionUUID->"d8cb413f-b87d-4a40-8b00-40c9903a9f19"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Ann\"\>", "\[Rule]", "84"}], ",", 
   RowBox[{"\<\"Bob\"\>", "\[Rule]", "79"}], ",", 
   RowBox[{"\<\"Carlos\"\>", "\[Rule]", "91"}], ",", 
   RowBox[{"\<\"Delia\"\>", "\[Rule]", "72"}], ",", 
   RowBox[{"\<\"Ernie\"\>", "\[Rule]", "86"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[231]=",ExpressionUUID->"06e9563f-de0f-4138-a723-adf2551169f3"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["AssociateTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AssociateTo"], "FunctionLink"],
 " function can also be used to add key\[Dash]value pairs. The first argument \
of ",
 StyleBox[ButtonBox["AssociateTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AssociateTo"], "FunctionLink"],
 " is the symbol representing an association and the second is either a \
single ",
 StyleBox[ButtonBox["Rule",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Rule"], "FunctionLink"],
 " (\[Rule]) or a list of rules. Note that ",
 StyleBox[ButtonBox["AssociateTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AssociateTo"], "FunctionLink"],
 " modifies the association whose name is given as the first argument without \
explicit reassignment."
}], "Text",ExpressionUUID->"f5a52cd5-958b-4271-9dd7-abf0581d2f5a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociateTo", "[", 
  RowBox[{"exams", ",", 
   RowBox[{"\"\<Fred\>\"", "\[Rule]", "97"}]}], "]"}]], "Input",
 CellLabel->
  "In[232]:=",ExpressionUUID->"5007202a-32d4-46b5-a31e-4604307066b2"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Ann\"\>", "\[Rule]", "84"}], ",", 
   RowBox[{"\<\"Bob\"\>", "\[Rule]", "79"}], ",", 
   RowBox[{"\<\"Carlos\"\>", "\[Rule]", "91"}], ",", 
   RowBox[{"\<\"Delia\"\>", "\[Rule]", "72"}], ",", 
   RowBox[{"\<\"Ernie\"\>", "\[Rule]", "86"}], ",", 
   RowBox[{"\<\"Fred\"\>", "\[Rule]", "97"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[232]=",ExpressionUUID->"c3d0c425-f8ed-43f9-a1c1-0b5cb8a22ec5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociateTo", "[", 
  RowBox[{"exams", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<Gigi\>\"", "\[Rule]", "98"}], ",", 
     RowBox[{"\"\<Hector\>\"", "\[Rule]", "88"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[233]:=",ExpressionUUID->"0d31f554-1010-4582-b78d-693eac33e65d"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Ann\"\>", "\[Rule]", "84"}], ",", 
   RowBox[{"\<\"Bob\"\>", "\[Rule]", "79"}], ",", 
   RowBox[{"\<\"Carlos\"\>", "\[Rule]", "91"}], ",", 
   RowBox[{"\<\"Delia\"\>", "\[Rule]", "72"}], ",", 
   RowBox[{"\<\"Ernie\"\>", "\[Rule]", "86"}], ",", 
   RowBox[{"\<\"Fred\"\>", "\[Rule]", "97"}], ",", 
   RowBox[{"\<\"Gigi\"\>", "\[Rule]", "98"}], ",", 
   RowBox[{"\<\"Hector\"\>", "\[Rule]", "88"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[233]=",ExpressionUUID->"4d71a733-c6e7-4c91-8039-4772f34f7202"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["exams"], "Input",
 CellLabel->
  "In[234]:=",ExpressionUUID->"da3b27a6-eeba-4274-bea0-c08bbd4476c5"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Ann\"\>", "\[Rule]", "84"}], ",", 
   RowBox[{"\<\"Bob\"\>", "\[Rule]", "79"}], ",", 
   RowBox[{"\<\"Carlos\"\>", "\[Rule]", "91"}], ",", 
   RowBox[{"\<\"Delia\"\>", "\[Rule]", "72"}], ",", 
   RowBox[{"\<\"Ernie\"\>", "\[Rule]", "86"}], ",", 
   RowBox[{"\<\"Fred\"\>", "\[Rule]", "97"}], ",", 
   RowBox[{"\<\"Gigi\"\>", "\[Rule]", "98"}], ",", 
   RowBox[{"\<\"Hector\"\>", "\[Rule]", "88"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[234]=",ExpressionUUID->"f737473b-9b48-4022-83be-8d493d5271d1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Domain and Range", "Subsubsection",ExpressionUUID->"6a77de1c-b215-4b4a-b643-e7e6f214723c"],

Cell[TextData[{
 "Since associations represent finite functions, we can check their \
properties computationally. First, we will find the domain (that is, the \
domain of definition) and range of a function defined as an association. In \
the ",
 StyleBox["exams", "Code"],
 " function, the students\[CloseCurlyQuote] names (Ann, Bob, etc.) form the \
domain (called the ",
 StyleBox["keys",
  FontSlant->"Italic"],
 ") and the scores (84, 79, etc.) are the range (or ",
 StyleBox["values",
  FontSlant->"Italic"],
 ")."
}], "Text",ExpressionUUID->"04e0acfe-c9fb-407e-bff0-9dc5bd16b104"],

Cell[TextData[{
 "The Wolfram Language provides functions for extracting the list of keys and \
values of an association. Namely, ",
 StyleBox[ButtonBox["Keys",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Keys"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Values",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Values"], "FunctionLink"],
 " both accept an association as their argument and return the list of keys \
and values, respectively. To define functions for obtaining the domain and \
range, we merely apply those functions and then apply ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " to the resulting list, since we conceive of domain and range as sets \
rather than lists."
}], "Text",ExpressionUUID->"2ea4cc79-226c-4aef-bf77-43eaa2ae9d61"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"domain", "[", "f_Association", "]"}], ":=", 
   RowBox[{"Union", "[", 
    RowBox[{"Keys", "[", "f", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"range", "[", "f_Association", "]"}], ":=", 
  RowBox[{"Union", "[", 
   RowBox[{"Values", "[", "f", "]"}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[235]:=",ExpressionUUID->"2eca9dc6-5042-4f39-a52b-bce0ca09d485"],

Cell[TextData[{
 "Using these functions, we can easily find the domain and range of ",
 StyleBox["exams", "Code"],
 "."
}], "Text",ExpressionUUID->"ceaf6676-0b77-4f56-8ca2-c26217c645f6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"domain", "[", "exams", "]"}]], "Input",
 CellLabel->
  "In[237]:=",ExpressionUUID->"de3436fc-9fde-4d10-96b1-cceece9a3d73"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Ann\"\>", ",", "\<\"Bob\"\>", ",", "\<\"Carlos\"\>", 
   ",", "\<\"Delia\"\>", ",", "\<\"Ernie\"\>", ",", "\<\"Fred\"\>", 
   ",", "\<\"Gigi\"\>", ",", "\<\"Hector\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[237]=",ExpressionUUID->"6844338a-4722-496d-9d1f-0cbf15db9f25"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"range", "[", "exams", "]"}]], "Input",
 CellLabel->
  "In[238]:=",ExpressionUUID->"bf7235c3-e873-43fa-866d-aed8cb8d14f4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "72", ",", "79", ",", "84", ",", "86", ",", "88", ",", "91", ",", "97", ",",
    "98"}], "}"}]], "Output",
 CellLabel->
  "Out[238]=",ExpressionUUID->"741ace06-4c63-4d6a-98b1-129a5b0a6255"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Injective and Surjective", "Subsubsection",ExpressionUUID->"39821e64-3965-456c-b010-8c7deca821c5"],

Cell[TextData[{
 "We will create a few more examples and then write functions to check for \
injectivity and surjectivity. The examples below correspond to the functions ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", "1"], "(", "x", ")"}], "=", 
    SuperscriptBox["x", "2"]}], TraditionalForm]],ExpressionUUID->
  "d2dd4b7c-7d9d-4a18-9355-fc2f15c56763"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", "2"], "(", "x", ")"}], "=", 
    SuperscriptBox["x", "3"]}], TraditionalForm]],ExpressionUUID->
  "58e295cf-808e-41e6-b3e2-aef54d972cf1"],
 ", and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", "3"], "(", "x", ")"}], "=", 
    RowBox[{"|", "x", "|"}]}], TraditionalForm]],ExpressionUUID->
  "d5432978-1743-45f5-b8a2-2221368ec4e8"],
 " on the domain ",
 Cell[BoxData[
  FormBox[
   RowBox[{"D", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "5"}], ",", 
      RowBox[{"-", "4"}], ",", "\[Ellipsis]", ",", "5"}], "}"}]}], 
   TraditionalForm]],ExpressionUUID->"9ac35c34-3ddc-4536-8c9e-6ef9dde16862"],
 "."
}], "Text",ExpressionUUID->"64fc9102-7dfc-486d-b8a5-f44a50401417"],

Cell[TextData[{
 "Thus far, we have usually defined associations by manually entering all of \
the key\[Dash]value pairs. The one exception was the ",
 StyleBox["fuzzyIntersection", "Code"],
 " function in the previous section. There, we used ",
 StyleBox[ButtonBox["AssociationThread",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AssociationThread"], "FunctionLink"],
 " to take a list of keys and a list of values and form the association by \
pairing corresponding elements from the two lists. Here, we will use ",
 StyleBox[ButtonBox["AssociationMap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AssociationMap"], "FunctionLink"],
 " to apply a function to a list of keys in order to compute the \
corresponding values. Specifically, the domain ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "5"}], ",", 
     RowBox[{"-", "4"}], ",", "...", ",", "4", ",", "5"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"f2c8d711-076c-4fe0-a8ef-3d26d844bee3"],
 " is the list of keys for the associations. The function ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["f", "1"], TraditionalForm]],ExpressionUUID->
  "e43bde06-3571-498a-b81f-edbfe763dc16"],
 ", as an example, will be modeled by the association with the rules ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "5"}], "\[Rule]", 
    RowBox[{
     SubscriptBox["f", "1"], "(", 
     RowBox[{"-", "5"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "d0289160-0e46-45f4-86dd-4441063e24ec"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "4"}], "\[Rule]", 
    RowBox[{
     SubscriptBox["f", "1"], "(", 
     RowBox[{"-", "4"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "46c1038e-d20e-40c5-b91d-af34fa538e81"],
 ", etc. "
}], "Text",ExpressionUUID->"6cbdfc39-934d-4992-b23f-63b7e6ce90da"],

Cell[TextData[{
 StyleBox[ButtonBox["AssociationMap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AssociationMap"], "FunctionLink"],
 " accepts a function as its first argument. This is a function in the \
Wolfram Language sense, so we need to either define a function and assign it \
to a symbol or enter a pure ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " as the first argument. We will illustrate both options below. The second \
argument will be the domain of our function, that is, the list of keys. \
Recall that ",
 StyleBox[ButtonBox["Range",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Range"], "FunctionLink"],
 " with two integer arguments forms the list of integers from the first \
argument through the second argument."
}], "Text",ExpressionUUID->"aa9c9e6b-e103-4146-8fda-41aae14c57e0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f1formula", "[", "x_", "]"}], ":=", 
   RowBox[{"x", "^", "2"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"f1", "=", 
  RowBox[{"AssociationMap", "[", 
   RowBox[{"f1formula", ",", 
    RowBox[{"Range", "[", 
     RowBox[{
      RowBox[{"-", "5"}], ",", "5"}], "]"}]}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[239]:=",ExpressionUUID->"20d69bc4-233e-431f-90fe-82e2f51e41b5"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "5"}], "\[Rule]", "25"}], ",", 
   RowBox[{
    RowBox[{"-", "4"}], "\[Rule]", "16"}], ",", 
   RowBox[{
    RowBox[{"-", "3"}], "\[Rule]", "9"}], ",", 
   RowBox[{
    RowBox[{"-", "2"}], "\[Rule]", "4"}], ",", 
   RowBox[{
    RowBox[{"-", "1"}], "\[Rule]", "1"}], ",", 
   RowBox[{"0", "\[Rule]", "0"}], ",", 
   RowBox[{"1", "\[Rule]", "1"}], ",", 
   RowBox[{"2", "\[Rule]", "4"}], ",", 
   RowBox[{"3", "\[Rule]", "9"}], ",", 
   RowBox[{"4", "\[Rule]", "16"}], ",", 
   RowBox[{"5", "\[Rule]", "25"}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[240]=",ExpressionUUID->"90801ccb-90cf-40e1-aeba-3c4fc3a9eb02"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f2", "=", 
  RowBox[{"AssociationMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "^", "3"}], "&"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{
      RowBox[{"-", "5"}], ",", "5"}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[241]:=",ExpressionUUID->"0b4305ec-9dcb-4926-b1cc-789ac3f0097d"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "5"}], "\[Rule]", 
    RowBox[{"-", "125"}]}], ",", 
   RowBox[{
    RowBox[{"-", "4"}], "\[Rule]", 
    RowBox[{"-", "64"}]}], ",", 
   RowBox[{
    RowBox[{"-", "3"}], "\[Rule]", 
    RowBox[{"-", "27"}]}], ",", 
   RowBox[{
    RowBox[{"-", "2"}], "\[Rule]", 
    RowBox[{"-", "8"}]}], ",", 
   RowBox[{
    RowBox[{"-", "1"}], "\[Rule]", 
    RowBox[{"-", "1"}]}], ",", 
   RowBox[{"0", "\[Rule]", "0"}], ",", 
   RowBox[{"1", "\[Rule]", "1"}], ",", 
   RowBox[{"2", "\[Rule]", "8"}], ",", 
   RowBox[{"3", "\[Rule]", "27"}], ",", 
   RowBox[{"4", "\[Rule]", "64"}], ",", 
   RowBox[{"5", "\[Rule]", "125"}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[241]=",ExpressionUUID->"3f2ea7aa-a7f0-411d-9722-dcd59a9c2248"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f3", "=", 
  RowBox[{"AssociationMap", "[", 
   RowBox[{"Abs", ",", 
    RowBox[{"Range", "[", 
     RowBox[{
      RowBox[{"-", "5"}], ",", "5"}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[242]:=",ExpressionUUID->"84632a6e-f9b3-4031-bcb7-56fd5db76431"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "5"}], "\[Rule]", "5"}], ",", 
   RowBox[{
    RowBox[{"-", "4"}], "\[Rule]", "4"}], ",", 
   RowBox[{
    RowBox[{"-", "3"}], "\[Rule]", "3"}], ",", 
   RowBox[{
    RowBox[{"-", "2"}], "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"-", "1"}], "\[Rule]", "1"}], ",", 
   RowBox[{"0", "\[Rule]", "0"}], ",", 
   RowBox[{"1", "\[Rule]", "1"}], ",", 
   RowBox[{"2", "\[Rule]", "2"}], ",", 
   RowBox[{"3", "\[Rule]", "3"}], ",", 
   RowBox[{"4", "\[Rule]", "4"}], ",", 
   RowBox[{"5", "\[Rule]", "5"}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[242]=",ExpressionUUID->"1a38d58b-a9bc-440d-9f93-3466b38ce5f6"]
}, Open  ]],

Cell[TextData[{
 "Observe that for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", "1"], "(", "x", ")"}], "=", 
    SuperscriptBox["x", "2"]}], TraditionalForm]],ExpressionUUID->
  "4b1056a4-2c84-41a8-bb17-c8921c416ffd"],
 ", we used the symbol we created for the formula, and for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", "3"], "(", "x", ")"}], "=", 
    RowBox[{"|", "x", "|"}]}], TraditionalForm]],ExpressionUUID->
  "ec444231-59ea-4ba9-8a7f-092d62f3dbda"],
 ", we used the name of the built-in absolute-value function ",
 StyleBox[ButtonBox["Abs",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Abs"], "FunctionLink"],
 ". Typically, when a Wolfram Language function requires another function as \
an argument, it expects the symbol that names the function without an \
argument."
}], "Text",ExpressionUUID->"e5c5adae-35ab-4c9f-8b1b-6454cb66c6f4"],

Cell[TextData[{
 "The ",
 StyleBox["domain", "Code"],
 " and ",
 StyleBox["range", "Code"],
 " functions defined earlier produce the expected results."
}], "Text",ExpressionUUID->"daa0d318-1524-4aae-a4bc-6a9d45b7cedb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"domain", "[", "f1", "]"}]], "Input",
 CellLabel->
  "In[243]:=",ExpressionUUID->"f747a4ce-a9ac-4b5c-827a-ea62420de0fa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "5"}], ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "1"}], ",", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", 
   "5"}], "}"}]], "Output",
 CellLabel->
  "Out[243]=",ExpressionUUID->"a0761e27-1249-41eb-919d-2488a8a9be35"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"range", "[", "f1", "]"}]], "Input",
 CellLabel->
  "In[244]:=",ExpressionUUID->"ea349eef-be01-45d3-9f13-9bc0b949811f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "1", ",", "4", ",", "9", ",", "16", ",", "25"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[244]=",ExpressionUUID->"402570c9-e2d3-4c35-b9ba-ddfebd9766d6"]
}, Open  ]],

Cell["\<\
We can check to see if a function represented by an association is surjective \
for a specified codomain by comparing the codomain to the range.\
\>", "Text",ExpressionUUID->"baae0d90-8d2f-4784-b256-83d97f27d51c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"surjectiveQ", "[", 
   RowBox[{"f_Association", ",", "codomain_List"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"range", "[", "f", "]"}], "==", 
   RowBox[{"Union", "[", "codomain", "]"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[245]:=",ExpressionUUID->"11cd1f30-2d03-441c-90e5-00fbe1d7ff1c"],

Cell[TextData[{
 "Note that we applied ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " to the second argument to provide assurance that both sets being compared \
are without duplicates and in standard order (recall that ",
 StyleBox["range", "Code"],
 " applies ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " before ending)."
}], "Text",ExpressionUUID->"612df967-38f1-48d2-951f-fbf15bcf4fa2"],

Cell[TextData[{
 "As expected, ",
 StyleBox["f1", "Code"],
 " is not onto ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"6944ffb9-adb4-4bfa-b302-9ba49b415fae"],
 ", but ",
 StyleBox["f3", "Code"],
 " is. "
}], "Text",ExpressionUUID->"6d2783d9-63d9-4ba6-8923-c294609146cd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"surjectiveQ", "[", 
  RowBox[{"f1", ",", 
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "5"}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[246]:=",ExpressionUUID->"dff9cb1e-4af2-4a89-a5f1-1636f9fa0df1"],

Cell[BoxData["False"], "Output",
 CellLabel->
  "Out[246]=",ExpressionUUID->"03b5760a-6bf5-4985-a150-894029bd198f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"surjectiveQ", "[", 
  RowBox[{"f3", ",", 
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "5"}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[247]:=",ExpressionUUID->"1fadbc70-2adc-4ca7-8775-159fd1c735ab"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[247]=",ExpressionUUID->"265d68cf-790a-4875-8ac4-756a735c2d0e"]
}, Open  ]],

Cell[TextData[{
 "We can check for injectivity by making sure that no value is repeated. The \
easiest way to do this is to check that the number of values in the result of \
",
 StyleBox["range", "Code"],
 " is the same as the number of rules in the association. Note that ",
 StyleBox[ButtonBox["Length",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Length"], "FunctionLink"],
 " applied to an association gives the number of rules."
}], "Text",ExpressionUUID->"dbafbf48-1bf3-4b3f-834b-2b425dd8b0af"],

Cell[BoxData[
 RowBox[{
  RowBox[{"injectiveQ", "[", "f_Association", "]"}], ":=", 
  RowBox[{
   RowBox[{"Length", "[", 
    RowBox[{"range", "[", "f", "]"}], "]"}], "\[Equal]", 
   RowBox[{"Length", "[", "f", "]"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[248]:=",ExpressionUUID->"3149bcbd-ae4d-4739-8a1b-45d030171f52"],

Cell[TextData[{
 "This function will confirm that ",
 StyleBox["f1", "Code"],
 " is not injective but that ",
 StyleBox["f2", "Code"],
 " is."
}], "Text",ExpressionUUID->"1f3a0728-22cd-4c87-852f-01f0229b82ff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"injectiveQ", "[", "f1", "]"}]], "Input",
 CellLabel->
  "In[249]:=",ExpressionUUID->"a603c7fc-4796-484d-a1c5-2df73e7f4661"],

Cell[BoxData["False"], "Output",
 CellLabel->
  "Out[249]=",ExpressionUUID->"ee5f32ef-37b7-42ff-ade4-5a2d415dae2d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"injectiveQ", "[", "f2", "]"}]], "Input",
 CellLabel->
  "In[250]:=",ExpressionUUID->"601031c4-8875-4935-be23-d83a5e0003b7"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[250]=",ExpressionUUID->"ceaca060-414c-48a7-a994-f0ca7d225659"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Graphing a Function Defined as an Indexed Variable", "Subsubsection",ExpressionUUID->"8da78edf-b764-4678-808e-494448f5d121"],

Cell[TextData[{
 "Finally, we see how to graph a function defined by an association. The \
Wolfram Language makes this quite easy with the use of ",
 StyleBox[ButtonBox["ListPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ListPlot"], "FunctionLink"],
 ". The most common use of ",
 StyleBox[ButtonBox["ListPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ListPlot"], "FunctionLink"],
 " is to provide it with a list of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "35c9761f-9e57-4d50-97bf-142f50e53202"],
 "\[Dash]",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "98ad765b-ec60-43de-bb1e-d91ebdb05ae7"],
 " pairs (represented as a list of 2-element lists) to display a plot of the \
points. "
}], "Text",ExpressionUUID->"41763fd4-45d1-48c2-a24e-990657fd8e8f"],

Cell[TextData[{
 "Conveniently, ",
 StyleBox[ButtonBox["ListPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ListPlot"], "FunctionLink"],
 " also can accept an association as its first argument, and, provided that \
the association\[CloseCurlyQuote]s keys and values are all numeric, the \
output will be the graph with keys plotted on the horizontal axis and values \
on the vertical."
}], "Text",ExpressionUUID->"5e0a15f6-3b8d-41cd-8f5f-f13a0ab85696"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", "f1", "]"}]], "Input",
 CellLabel->
  "In[251]:=",ExpressionUUID->"1e0c738f-2598-4684-b732-b7d10b085716"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     PointBox[{{-5., 25.}, {-4., 16.}, {-3., 9.}, {-2., 4.}, {-1., 1.}, {0., 
      0.}, {1., 1.}, {2., 4.}, {3., 9.}, {4., 16.}, {5., 
      25.}}]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-5., 5.}, {0, 25.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->
  "Out[251]=",ExpressionUUID->"3262629e-9da9-4f06-9b9e-44916a467559"]
}, Open  ]],

Cell[TextData[{
 "Two common options used in conjunction with ",
 StyleBox[ButtonBox["ListPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ListPlot"], "FunctionLink"],
 " are ",
 StyleBox[ButtonBox["PlotRange",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PlotRange"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Joined",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Joined"], "FunctionLink"],
 ". ",
 StyleBox[ButtonBox["PlotRange",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PlotRange"], "FunctionLink"],
 " can be used to explicitly choose the span in both the horizontal and \
vertical directions. To use the ",
 StyleBox[ButtonBox["PlotRange",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PlotRange"], "FunctionLink"],
 " option, give ",
 Cell[BoxData[
  RowBox[{"PlotRange", "->", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      StyleBox["xmin", "CodeVar"], ",", 
      StyleBox["xmax", "CodeVar"]}], "}"}], ",", 
    RowBox[{"{", 
     StyleBox["ymin", "CodeVar"], ",", 
     StyleBox["ymax", "CodeVar"], "}", "}"}]}]}]], "myCode",ExpressionUUID->
  "7e5efee6-3e08-4881-b57f-2899cae1eecc"],
 " as an argument to ",
 StyleBox[ButtonBox["ListPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ListPlot"], "FunctionLink"],
 ". You can substitute ",
 StyleBox[ButtonBox["All",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/All"], "FunctionLink"],
 " for either of the ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "a2760c02-835a-4b7a-838c-3a6e35e971d4"],
 " or ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "5a438ad8-8de9-4444-9980-28edb305ec90"],
 " ranges to include all the data. "
}], "Text",ExpressionUUID->"c2c31d68-bcb8-4e13-9241-48c32b32090d"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Joined",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Joined"], "FunctionLink"],
 " option causes ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to \[OpenCurlyDoubleQuote]connect the dots.\[CloseCurlyDoubleQuote] You \
invoke it by including ",
 Cell[BoxData[
  RowBox[{"Joined", "->", "True"}]], "myCode",ExpressionUUID->
  "06eff77d-48e9-4d17-a00f-3e93d945d1ee"],
 " in the call to ",
 StyleBox[ButtonBox["ListPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ListPlot"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"aeaf0545-934c-4df8-8a08-03947bc4cada"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"f2", ",", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "5"}], "}"}], ",", "All"}], "}"}]}]}], 
  "]"}]], "Input",
 CellLabel->
  "In[252]:=",ExpressionUUID->"6de6543b-6620-4d79-86a3-8fabf98eb8a8"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     LineBox[{{-5., -125.}, {-4., -64.}, {-3., -27.}, {-2., -8.}, {-1., -1.}, \
{0., 0.}, {1., 1.}, {2., 8.}, {3., 27.}, {4., 64.}, {5., 
      125.}}]}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 5}, {-125., 125.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->
  "Out[252]=",ExpressionUUID->"52c3efd1-3917-4c61-825d-d32da74f0b90"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["PlotStyle",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PlotStyle"], "FunctionLink"],
 " option can be used to set a variety of visual aspects of the plot \
including color (e.g., ",
 StyleBox[ButtonBox["Red",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Red"], "FunctionLink"],
 ", ",
 StyleBox[ButtonBox["Blue",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Blue"], "FunctionLink"],
 ", ",
 StyleBox[ButtonBox["Green",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Green"], "FunctionLink"],
 ", etc.) and point size (",
 StyleBox[ButtonBox["PointSize",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PointSize"], "FunctionLink"],
 "), as illustrated below."
}], "Text",ExpressionUUID->"05fa29b7-284b-48c5-b89d-243a552e5943"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"f3", ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Red", ",", 
      RowBox[{"PointSize", "[", ".02", "]"}]}], "}"}]}]}], "]"}]], "Input",
 CellLabel->
  "In[253]:=",ExpressionUUID->"d4d2eaca-bdd7-4323-9128-8ba4335495cb"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[1, 0, 0], PointSize[0.02], AbsoluteThickness[1.6], 
     PointBox[{{-5., 5.}, {-4., 4.}, {-3., 3.}, {-2., 2.}, {-1., 1.}, {0., 
      0.}, {1., 1.}, {2., 2.}, {3., 3.}, {4., 4.}, {5., 
      5.}}]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-5., 5.}, {0, 5.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->
  "Out[253]=",ExpressionUUID->"263a02fc-370e-4996-9082-906569ab15d8"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Some Important Functions", "Subsection",
 CellTags->"Section3d",ExpressionUUID->"77045512-cba6-456f-8564-d08e41cd1097"],

Cell[TextData[{
 "We have already seen that the Wolfram Language has a built-in function ",
 StyleBox[ButtonBox["Floor",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Floor"], "FunctionLink"],
 ". It also includes ",
 StyleBox[ButtonBox["Ceiling",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Ceiling"], "FunctionLink"],
 " for computing the ceiling of a real number."
}], "Text",ExpressionUUID->"03f2db72-0ca1-42d9-b27f-1fe96c1b9db7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Floor", "[", "2.7", "]"}]], "Input",
 CellLabel->
  "In[254]:=",ExpressionUUID->"5a7d3c25-5fd6-4f8e-a121-bd613d0400a9"],

Cell[BoxData["2"], "Output",
 CellLabel->
  "Out[254]=",ExpressionUUID->"301e5931-b6e5-49c4-8dce-ea1ca3221664"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ceiling", "[", "2.7", "]"}]], "Input",
 CellLabel->
  "In[255]:=",ExpressionUUID->"6133d4e9-ed73-49ca-a53c-4b85aed6b8db"],

Cell[BoxData["3"], "Output",
 CellLabel->
  "Out[255]=",ExpressionUUID->"01c4f635-473f-4b5c-b1e0-959897d83d09"]
}, Open  ]],

Cell[TextData[{
 "The Wolfram Language contains some other related functions. The ",
 StyleBox[ButtonBox["Round",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Round"], "FunctionLink"],
 " function rounds a number to the nearest integer. The ",
 StyleBox[ButtonBox["IntegerPart",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerPart"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["FractionalPart",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FractionalPart"], "FunctionLink"],
 " functions, as their names imply, compute the integral or fractional part \
of a real number."
}], "Text",ExpressionUUID->"2384597d-b033-4099-8ea4-68b0346f501d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Round", "[", "2.7", "]"}]], "Input",
 CellLabel->
  "In[256]:=",ExpressionUUID->"b782acf8-4dd0-44b0-bec9-742373fe5f2a"],

Cell[BoxData["3"], "Output",
 CellLabel->
  "Out[256]=",ExpressionUUID->"bd5513a3-185f-4d62-911e-86db1b5fd33a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerPart", "[", "2.7", "]"}]], "Input",
 CellLabel->
  "In[257]:=",ExpressionUUID->"ee947e60-8878-4543-b1a8-77910ae069fb"],

Cell[BoxData["2"], "Output",
 CellLabel->
  "Out[257]=",ExpressionUUID->"2d8523bd-0ff1-4056-b963-7efe6e2c79da"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerPart", "[", 
  RowBox[{"-", "2.7"}], "]"}]], "Input",
 CellLabel->
  "In[258]:=",ExpressionUUID->"5973132b-cb2a-40e4-93fe-f2e865954a5e"],

Cell[BoxData[
 RowBox[{"-", "2"}]], "Output",
 CellLabel->
  "Out[258]=",ExpressionUUID->"e3fa33db-d6e5-428f-b90c-cbeefcf19aa6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FractionalPart", "[", "2.7", "]"}]], "Input",
 CellLabel->
  "In[259]:=",ExpressionUUID->"eaf7313c-6072-41e2-aa95-a2e581acb5a6"],

Cell[BoxData["0.7000000000000002`"], "Output",
 CellLabel->
  "Out[259]=",ExpressionUUID->"b74744bb-05e3-407d-8c4c-ec619becafc4"]
}, Open  ]],

Cell[TextData[{
 "The textbook also discusses the factorial function. In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", you compute the factorial of a number using the ",
 StyleBox[ButtonBox["Factorial",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Factorial"], "FunctionLink"],
 " (",
 StyleBox["!", "Code"],
 ") function, typically with the operator ",
 StyleBox["!", "Code"],
 "."
}], "Text",ExpressionUUID->"3b5345a4-f70e-40fe-a6fd-39fc78541ee2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"6", "!"}]], "Input",
 CellLabel->
  "In[260]:=",ExpressionUUID->"933d77fa-0eb1-4118-b57f-f236317f5cdd"],

Cell[BoxData["720"], "Output",
 CellLabel->
  "Out[260]=",ExpressionUUID->"a679c197-159a-4ae6-9b6f-f3b1e1ee691f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Factorial", "[", "6", "]"}]], "Input",
 CellLabel->
  "In[261]:=",ExpressionUUID->"f981490b-82b7-4b0c-bdce-55e739962873"],

Cell[BoxData["720"], "Output",
 CellLabel->
  "Out[261]=",ExpressionUUID->"d7dcf068-b8ee-4cc2-80ea-a6bcebf7ba33"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.4 Sequences and Summations", "Section",
 CellTags->"Section4",ExpressionUUID->"1b81f835-117a-4a6d-a31f-c7fe100930e5"],

Cell[TextData[{
 "In this section, we will see how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can be used to create and manipulate sequences, and in particular, we will \
see a way to generate the terms of a recurrence sequence. We will also look \
at summations and see how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s symbolic computation abilities can be used to explore \
both finite and infinite series."
}], "Text",ExpressionUUID->"3684ff7e-9010-403b-9463-fec59a278279"],

Cell[TextData[{
 "In the Wolfram Language, you represent a finite sequence as a list. The \
\[OpenCurlyDoubleQuote]empty list\[CloseCurlyDoubleQuote] is represented by \
the expression ",
 StyleBox["{}", "Code"],
 ". "
}], "Text",ExpressionUUID->"23a02fe7-586d-4ab9-b8a5-264625d9c7b6"],

Cell[TextData[{
 "There are a wide variety of ways that lists can be created in the Wolfram \
Language. Here, we will describe three of the most important: the ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " function, ",
 StyleBox[ButtonBox["Append",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Append"], "FunctionLink"],
 " and related functions, and the ",
 StyleBox[ButtonBox["Sow",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sow"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " functions."
}], "Text",ExpressionUUID->"26bb9a55-ba69-435c-b75c-ae34771dc7e5"],

Cell[CellGroupData[{

Cell[TextData[{
 "Building Lists: the ",
 StyleBox["Table", "Code"],
 " Function"
}], "Subsection",
 CellTags->"Section4a",ExpressionUUID->"870a8770-9ef8-467e-8d8c-2a7852f42402"],

Cell[TextData[{
 "We have already seen several examples of the ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " function. We briefly summarize some of the ways it can be called."
}], "Text",ExpressionUUID->"01e7235c-10c3-47b1-9209-403d5c07f368"],

Cell[TextData[{
 "The most common way to use ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " is demonstrated in the following example, which creates the first 11 terms \
of the geometric sequence ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", ",", " ", 
    RowBox[{"a", "\[CenterDot]", "r"}], ",", " ", 
    RowBox[{"a", "\[CenterDot]", 
     SuperscriptBox["r", "2"]}], ",", "\[Ellipsis]"}], TraditionalForm]],
  ExpressionUUID->"9ba7b485-98cb-4cd2-8fe3-e555f6e4fd08"],
 " for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "=", "3"}], TraditionalForm]],ExpressionUUID->
  "a876494e-ee94-48cb-b334-71ada7bd49c9"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "=", "4"}], TraditionalForm]],ExpressionUUID->
  "5bd14826-fee7-41ec-860a-b7eb577e61df"],
 "."
}], "Text",ExpressionUUID->"8e81bcca-cbbe-4e1e-9928-0f4efda48fa7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"3", "*", 
    RowBox[{"4", "^", "i"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[262]:=",ExpressionUUID->"7b4cfcca-ad12-4be7-85ff-07bec9e28b03"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "12", ",", "48", ",", "192", ",", "768", ",", "3072", ",", 
   "12288", ",", "49152", ",", "196608", ",", "786432", ",", "3145728"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[262]=",ExpressionUUID->"e3e3ec54-4bef-42d3-be75-77dd5f79775b"]
}, Open  ]],

Cell[TextData[{
 "The first argument is an expression which may involve an index variable, in \
this case ",
 StyleBox["i", "Code"],
 ". The second argument is a list whose elements are the variable and the \
minimum and maximum values for the index variable. "
}], "Text",ExpressionUUID->"0d004ee0-c891-401c-9fd8-29de1f1c7ad2"],

Cell[TextData[{
 "The minimum value can be omitted, in which case it will default to 1. The \
following shows the sequence beginning with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"i", "=", "1"}], TraditionalForm]],ExpressionUUID->
  "c97f420c-b2ac-4c56-934d-725487ab31e1"],
 "."
}], "Text",ExpressionUUID->"a958f233-0be5-4e70-95c4-d03725a3fc20"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"3", "*", 
    RowBox[{"4", "^", "i"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[263]:=",ExpressionUUID->"3d0ae34d-a981-4536-bbc0-990493f2ea45"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "12", ",", "48", ",", "192", ",", "768", ",", "3072", ",", "12288", ",", 
   "49152", ",", "196608", ",", "786432", ",", "3145728"}], "}"}]], "Output",
 CellLabel->
  "Out[263]=",ExpressionUUID->"b92671a6-cc06-4abb-ac5d-4e1d31339bae"]
}, Open  ]],

Cell["\<\
By including three numeric arguments, in addition to the name of the \
variable, you can control the step, that is, the amount by which the index \
variable is incremented. For example, the expression below will produce every \
other term of the same geometric sequence as above.\
\>", "Text",ExpressionUUID->"a8804a78-6333-4d2c-8488-b3e0e7c3f387"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"3", "*", 
    RowBox[{"4", "^", "i"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "0", ",", "10", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[264]:=",ExpressionUUID->"784756ab-c617-488f-bc93-9e2e73111392"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "48", ",", "768", ",", "12288", ",", "196608", ",", "3145728"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[264]=",ExpressionUUID->"56c50f3a-2e0c-4614-b8fa-eaa70ce8fcb7"]
}, Open  ]],

Cell[TextData[{
 "The bounds of the range for the index variable and the step do not \
necessarily need to be integers. For example, the following produces the list \
of numbers beginning with ",
 StyleBox["2.3", "Code"],
 ", increasing by ",
 StyleBox["0.25", "Code"],
 ", up to an upper bound of ",
 StyleBox["5.1", "Code"],
 ". Note that the maximum is not included."
}], "Text",ExpressionUUID->"05577a5a-5b7c-44de-8401-3a9a130aced1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"i", ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "2.3", ",", "5.1", ",", ".25"}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->
  "In[265]:=",ExpressionUUID->"c097484e-a26c-4b98-b872-dd7e1b258a27"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2.3`", ",", "2.55`", ",", "2.8`", ",", "3.05`", ",", "3.3`", ",", "3.55`", 
   ",", "3.8`", ",", "4.05`", ",", "4.3`", ",", "4.55`", ",", "4.8`", ",", 
   "5.05`"}], "}"}]], "Output",
 CellLabel->
  "Out[265]=",ExpressionUUID->"bad8f3df-5d6d-4a42-825b-5d7b62b1ac4e"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Range",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Range"], "FunctionLink"],
 " function can be thought of as an abbreviation of ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " for situations like the previous example, where you simply want to produce \
the list of numbers without evaluating an expression. It accepts one, two, or \
three numerical arguments, with the same interpretation as the numeric \
elements of the second argument of ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"921a5ca1-09c8-4334-88e7-f661673e1529"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", "10", "]"}]], "Input",
 CellLabel->
  "In[266]:=",ExpressionUUID->"d4dd12e7-269d-4d2e-b90d-27ed7a95e46e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellLabel->
  "Out[266]=",ExpressionUUID->"e8f0dfe9-43a2-48b3-83ab-147af2f223be"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", 
  RowBox[{"0", ",", "10"}], "]"}]], "Input",
 CellLabel->
  "In[267]:=",ExpressionUUID->"7a3df680-d33b-4d74-9c0a-c2200be296c1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", 
   ",", "8", ",", "9", ",", "10"}], "}"}]], "Output",
 CellLabel->
  "Out[267]=",ExpressionUUID->"3a359914-0fb6-4c4d-8f80-2eef34124310"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", 
  RowBox[{"0", ",", "10", ",", "2"}], "]"}]], "Input",
 CellLabel->
  "In[268]:=",ExpressionUUID->"76fb0787-7db5-4f44-8c72-7de02d483028"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "2", ",", "4", ",", "6", ",", "8", ",", "10"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[268]=",ExpressionUUID->"506880fd-26ee-45b2-8654-874eeeb10aa2"]
}, Open  ]],

Cell[TextData[{
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " can also be used to evaluate an expression for a specific list of values. \
This is illustrated in the example below, which finds the squares of the \
first six primes. Note that the second argument in this formulation is a list \
with two elements: the first is the name of the index variable and the second \
is the list of values to be substituted."
}], "Text",ExpressionUUID->"dd975e89-ad2e-40ea-b359-aa569566c445"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"i", "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "5", ",", "7", ",", "11", ",", "13"}], 
      "}"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[269]:=",ExpressionUUID->"99759314-0c41-4f25-8351-f7c19e7f1f8b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "9", ",", "25", ",", "49", ",", "121", ",", "169"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[269]=",ExpressionUUID->"5524b541-7c65-49cf-b7b7-0bb7ce381283"]
}, Open  ]],

Cell["\<\
The order of the provided list determines the order of the output. For \
example, if we rearrange the primes, the output is affected accordingly.\
\>", "Text",ExpressionUUID->"3b8ae248-f452-4e4b-aa9c-a424075a35f1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"i", "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "5", ",", "7", ",", "13", ",", "11", ",", "3"}], 
      "}"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[270]:=",ExpressionUUID->"921c5945-7f69-4763-966b-878b4a305488"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "25", ",", "49", ",", "169", ",", "121", ",", "9"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[270]=",ExpressionUUID->"5e4852a6-2a39-4fa5-b4bd-3a2250da402e"]
}, Open  ]],

Cell[TextData[{
 "Apply ",
 StyleBox[ButtonBox["Union",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Union"], "FunctionLink"],
 " to the result if you want to think about the output as a set or to impose \
numerical order on the output."
}], "Text",ExpressionUUID->"bee53782-83d1-40a3-95b3-5638c65c4412"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Union", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"i", "^", "2"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "5", ",", "7", ",", "13", ",", "11", ",", "3"}], 
       "}"}]}], "}"}]}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[271]:=",ExpressionUUID->"cb81817d-467f-410c-aabf-359e8a33e939"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "9", ",", "25", ",", "49", ",", "121", ",", "169"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[271]=",ExpressionUUID->"e7eda801-c6a9-4d13-a810-9f558fc8af07"]
}, Open  ]],

Cell[TextData[{
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " can handle more than one variable\[LongDash]just provide an additional \
argument specifying the values for each variable. For example, the following \
finds the values of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", "i"], 
    SuperscriptBox["3", "j"]}], TraditionalForm]],ExpressionUUID->
  "481dd200-7d10-4cd7-af3f-30c0713d7abb"],
 " for ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "b29da7f7-0d17-425e-a2a0-4ca6d2f1915b"],
 " from 2 to 12 by 3 and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"j", "\[Element]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], TraditionalForm]],
  ExpressionUUID->"c53632b3-6d39-429d-8205-0fd47e452f8f"],
 ".",
 Cell[BoxData[
  FormBox[
  Cell["",ExpressionUUID->"467fc772-e63b-4b59-84a5-1a54c8f6c9cd"], 
   TraditionalForm]],ExpressionUUID->"985b7400-8997-4953-88d0-331f0d1104bb"]
}], "Text",ExpressionUUID->"03e93dc0-93c9-4f3d-88c4-0904984fa42a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"2", "^", "i"}], "*", 
    RowBox[{"3", "^", "j"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "2", ",", "12", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"j", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[272]:=",ExpressionUUID->"3d5a6d71-ac85-49b0-b9f7-e77538b5e213"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"12", ",", "36", ",", "108"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"96", ",", "288", ",", "864"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"768", ",", "2304", ",", "6912"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6144", ",", "18432", ",", "55296"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[272]=",ExpressionUUID->"63263407-1efe-4b01-8ed6-afd0ab3a4dde"]
}, Open  ]],

Cell[TextData[{
 "Note that the result is a list of lists, with the sublists composed of the \
values computed from a single value of the first variable. That is, the first \
sublist is the output with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"i", "=", "2"}], TraditionalForm]],ExpressionUUID->
  "f03f3914-3bb6-4ff6-9344-4fff88f0ec74"],
 " and all values of ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "f5b65f00-17d7-4602-b33b-ed7f9a64fbf2"],
 ", the second sublist is the output with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"i", "=", "5"}], TraditionalForm]],ExpressionUUID->
  "88a784f9-f785-47ac-a69b-4c076dfb86e5"],
 " (the second value of ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "5b6a3fd9-12d0-4e14-98be-f9cc378a0ebc"],
 ") and all the values of ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "ecd100e6-3e62-45a2-bac4-77c532d9908f"],
 ", etc."
}], "Text",ExpressionUUID->"868014ec-5672-4b0b-ac29-6e76dca3ec02"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Building Lists: the ",
 StyleBox["Append", "Code"],
 " Function"
}], "Subsection",
 CellTags->"Section4b",ExpressionUUID->"c8b6bc00-53b4-4269-9917-e944eeead80d"],

Cell[TextData[{
 "To add an element to the end of a list, use the ",
 StyleBox[ButtonBox["Append",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Append"], "FunctionLink"],
 " or ",
 StyleBox[ButtonBox["AppendTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AppendTo"], "FunctionLink"],
 " function. The ",
 StyleBox[ButtonBox["Append",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Append"], "FunctionLink"],
 " function requires two arguments: the first is a list and the second is a \
single object to be added to the end of the list. For example, to add ",
 Cell[BoxData[
  FormBox["4", TraditionalForm]],ExpressionUUID->
  "ffac40ce-4b33-460f-a580-2aa7613388f5"],
 " to the end of the list ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], TraditionalForm]],
  ExpressionUUID->"2a954041-727e-4c84-8c3d-df7f1cc9565a"],
 ", apply ",
 StyleBox[ButtonBox["Append",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Append"], "FunctionLink"],
 " to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], TraditionalForm]],
  ExpressionUUID->"ebb69df8-b33f-4689-a44f-aa04fb22ed7a"],
 " and ",
 Cell[BoxData[
  FormBox["4", TraditionalForm]],ExpressionUUID->
  "aca5c556-5896-4f17-9156-070424760578"],
 "."
}], "Text",ExpressionUUID->"704fbfdd-7505-4331-87ea-1b85554cd350"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Append", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", "4"}], "]"}]], "Input",
 CellLabel->
  "In[273]:=",ExpressionUUID->"30384076-3ad1-47da-825a-5990b3cdd9d1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]], "Output",
 CellLabel->
  "Out[273]=",ExpressionUUID->"9309f430-c325-4a3f-bf1a-78d643adf43d"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Append",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Append"], "FunctionLink"],
 " function can also accept a symbol storing a list as its first argument. \
However, it will not modify the stored list."
}], "Text",ExpressionUUID->"300f1406-9ade-4c98-ae47-e3b4bc8f5c23"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exampleList", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[274]:=",ExpressionUUID->"856e77d2-1257-4fd4-b9c0-abacc883c2ce"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Output",
 CellLabel->
  "Out[274]=",ExpressionUUID->"ed913a79-fc9a-4234-9ca8-bd5f8e357083"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Append", "[", 
  RowBox[{"exampleList", ",", "4"}], "]"}]], "Input",
 CellLabel->
  "In[275]:=",ExpressionUUID->"259bc101-4b3c-4813-b399-59bca0fe7ddb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]], "Output",
 CellLabel->
  "Out[275]=",ExpressionUUID->"ceeed244-1ba3-4228-81d1-c6e6d99c9093"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["exampleList"], "Input",
 CellLabel->
  "In[276]:=",ExpressionUUID->"53cc7fc0-0aa4-419a-a89f-0a8a88f5a7de"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Output",
 CellLabel->
  "Out[276]=",ExpressionUUID->"d152d90c-cbb5-4b18-90bc-ca3c65d956eb"]
}, Open  ]],

Cell[TextData[{
 "In order to have the new list stored in the name, you either need to \
explicitly reassign the result of ",
 StyleBox[ButtonBox["Append",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Append"], "FunctionLink"],
 " back to the name, or you can use ",
 StyleBox[ButtonBox["AppendTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AppendTo"], "FunctionLink"],
 " which automatically updates the list."
}], "Text",ExpressionUUID->"31dc2a81-e4a9-4832-86c6-bea523744ed7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exampleList", "=", 
  RowBox[{"Append", "[", 
   RowBox[{"exampleList", ",", "4"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[277]:=",ExpressionUUID->"4b9ef020-d667-4612-b3e4-d3164fce534f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]], "Output",
 CellLabel->
  "Out[277]=",ExpressionUUID->"69a02dc8-8f56-487c-8995-551971f8d5f8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["exampleList"], "Input",
 CellLabel->
  "In[278]:=",ExpressionUUID->"73268f0b-0612-4adc-9b74-3b1b323d39d3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]], "Output",
 CellLabel->
  "Out[278]=",ExpressionUUID->"8ba13aaa-74ad-45ab-ba5a-2a33e1914999"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AppendTo", "[", 
  RowBox[{"exampleList", ",", "5"}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[279]:=",ExpressionUUID->"d8111532-1291-49e3-af15-9b0943e64710"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Output",
 CellLabel->
  "Out[279]=",ExpressionUUID->"19d48d69-8428-4261-b56c-28bc437b79d4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["exampleList"], "Input",
 CellLabel->
  "In[280]:=",ExpressionUUID->"c60c4691-29ce-4a4d-8372-d6768dabc4a2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Output",
 CellLabel->
  "Out[280]=",ExpressionUUID->"0d3247f2-8ef6-498c-9385-418c4c7832cf"]
}, Open  ]],

Cell[TextData[{
 "Note that ",
 StyleBox[ButtonBox["AppendTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AppendTo"], "FunctionLink"],
 " requires that the first argument be a symbol. If you try to call it with \
an explicit list as the first argument, it will raise an error."
}], "Text",ExpressionUUID->"052af8d2-9e16-4a86-abae-623bf2de52fb"],

Cell[TextData[{
 "Related to ",
 StyleBox[ButtonBox["Append",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Append"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["AppendTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AppendTo"], "FunctionLink"],
 " are ",
 StyleBox[ButtonBox["Prepend",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Prepend"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["PrependTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PrependTo"], "FunctionLink"],
 ", which have the same syntax but add the element to the front of the list \
rather than the end."
}], "Text",ExpressionUUID->"705e5de6-690b-4467-a8b4-17477f933683"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PrependTo", "[", 
  RowBox[{"exampleList", ",", "6"}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[281]:=",ExpressionUUID->"94fd7b7a-68fb-4fcd-bc40-184575f9e739"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[281]=",ExpressionUUID->"c5f8591c-142f-48f1-a2c7-7d2659bee72a"]
}, Open  ]],

Cell[TextData[{
 "Earlier in this manual, we saw that you can modify elements of a list by \
using the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " operator (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") and assigning a new value. The following changes the third element of our \
list to 7."
}], "Text",ExpressionUUID->"3306d46d-1d66-488d-b560-b53e6597de9f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"exampleList", "[", 
   RowBox[{"[", "3", "]"}], "]"}], "=", "7"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[282]:=",ExpressionUUID->"21086f3e-bd9f-4beb-935d-b50685b6bb9c"],

Cell[BoxData["7"], "Output",
 CellLabel->
  "Out[282]=",ExpressionUUID->"cef3ce56-7340-46d5-9ef4-232d124a1496"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["exampleList"], "Input",
 CellLabel->
  "In[283]:=",ExpressionUUID->"83747876-4ea1-477b-9e9b-45e70dca7cda"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6", ",", "1", ",", "7", ",", "3", ",", "4", ",", "5"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[283]=",ExpressionUUID->"51aead71-f79b-4c58-b8fa-ac8a6c39b764"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["ReplacePart",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReplacePart"], "FunctionLink"],
 " function can also be used to modify an element of a list, but is more \
general. The most basic syntax of ",
 StyleBox[ButtonBox["ReplacePart",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReplacePart"], "FunctionLink"],
 " involves a list and a rule of the form ",
 Cell[BoxData[
  RowBox[{
   StyleBox["part", "CodeVar"], "->", 
   StyleBox["new", "CodeVar"]}]], "myCode",ExpressionUUID->
  "da99a2bc-25e2-4c31-b130-dc8a0e0cd424"],
 ". The output is the list with the entry at position ",
 StyleBox["part", "CodeVar"],
 " replaced by the expression ",
 StyleBox["new", "CodeVar"],
 "."
}], "Text",ExpressionUUID->"59421706-dbca-44d6-b54c-d392e678187a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReplacePart", "[", 
  RowBox[{"exampleList", ",", 
   RowBox[{"4", "\[Rule]", "11"}]}], "]"}]], "Input",
 CellLabel->
  "In[284]:=",ExpressionUUID->"7f83abf2-1fa8-46c9-b477-4f6d4b1ba5e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6", ",", "1", ",", "7", ",", "11", ",", "4", ",", "5"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[284]=",ExpressionUUID->"af43510b-c1e3-4b9b-a593-96710990e4a0"]
}, Open  ]],

Cell[TextData[{
 "Note that this does not modify the list stored in ",
 StyleBox["exampleList", "Code"],
 " without explicit reassignment. There are a variety of other syntax options \
for the second argument of ",
 StyleBox[ButtonBox["ReplacePart",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReplacePart"], "FunctionLink"],
 " to produce more general effects. These will be discussed only when they \
are needed."
}], "Text",ExpressionUUID->"83f4681c-aefa-4e28-93b5-e4c195845173"],

Cell[TextData[{
 "If you wish to add an element in the middle of the list, rather than \
overwriting an element, you use the ",
 StyleBox[ButtonBox["Insert",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Insert"], "FunctionLink"],
 " function with the list, the element to be added, and the index at which it \
is to appear. The other members of the list are shifted to accommodate the \
new one. Note that ",
 StyleBox[ButtonBox["Insert",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Insert"], "FunctionLink"],
 " does not modify a list stored as a symbol without explicitly reassigning \
it."
}], "Text",ExpressionUUID->"080a9a5a-a0ec-44fe-baf1-3f505b6aaecb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exampleList", "=", 
  RowBox[{"Insert", "[", 
   RowBox[{"exampleList", ",", "8", ",", "4"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[285]:=",ExpressionUUID->"dba0705e-7fbd-4a80-b40c-3ad89e9fd9da"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6", ",", "1", ",", "7", ",", "8", ",", "3", ",", "4", ",", "5"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[285]=",ExpressionUUID->"67471698-dcc7-4aff-b2f3-c73b52216b12"]
}, Open  ]],

Cell[TextData[{
 "Similarly, you can remove an element by calling ",
 StyleBox[ButtonBox["Delete",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Delete"], "FunctionLink"],
 " with the list and the position of the element to be removed. Like ",
 StyleBox[ButtonBox["Insert",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Insert"], "FunctionLink"],
 ", ",
 StyleBox[ButtonBox["Delete",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Delete"], "FunctionLink"],
 " does not automatically modify a variable."
}], "Text",ExpressionUUID->"aa2d7e36-c9fa-4268-91d9-211a6b2438bf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exampleList", "=", 
  RowBox[{"Delete", "[", 
   RowBox[{"exampleList", ",", "2"}], "]"}]}]], "Input",
 CellLabel->
  "In[286]:=",ExpressionUUID->"751c74c6-6875-49aa-a6a3-adcaee5d006c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6", ",", "7", ",", "8", ",", "3", ",", "4", ",", "5"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[286]=",ExpressionUUID->"77da3ff5-ec7e-43aa-9455-dd3bd2423f0f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Building Lists: ",
 StyleBox["Sow", "Code"],
 " and ",
 StyleBox["Reap", "Code"]
}], "Subsection",
 CellTags->"Section4c",ExpressionUUID->"16ae9813-9400-4c69-b133-78a5ece56926"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["AppendTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AppendTo"], "FunctionLink"],
 " (or ",
 StyleBox[ButtonBox["Append",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Append"], "FunctionLink"],
 ") function can be used within a function to build a list. For example, the \
function defined below builds the first ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "5a65eb2f-21df-4ef5-ac87-ddbc86426ca1"],
 " terms of the geometric sequence with parameters ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "340e60a6-ede2-4675-a8f2-5dd94fb1153a"],
 " and ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "dfaf2799-15c8-4ec7-923b-ca2ef689ffaf"],
 "."
}], "Text",ExpressionUUID->"0e3d7014-9049-4a31-bec4-c87fb33145c1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"geometricSequence", "[", 
   RowBox[{"a_", ",", "r_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"S", "=", 
       RowBox[{"{", "}"}]}], ",", "i"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"AppendTo", "[", 
        RowBox[{"S", ",", 
         RowBox[{"a", "*", 
          RowBox[{"r", "^", "i"}]}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "0", ",", "n"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "S"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->
  "In[287]:=",ExpressionUUID->"691caccc-9c1a-4f9b-a83a-b9fc9d703aad"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"geometricSequence", "[", 
  RowBox[{"3", ",", "4", ",", "10"}], "]"}]], "Input",
 CellLabel->
  "In[288]:=",ExpressionUUID->"f9c654d4-a70a-4d88-87c8-bed18dcd6a69"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "12", ",", "48", ",", "192", ",", "768", ",", "3072", ",", 
   "12288", ",", "49152", ",", "196608", ",", "786432", ",", "3145728"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[288]=",ExpressionUUID->"3134a953-3f2e-4330-9d8c-17d0c73fcc6c"]
}, Open  ]],

Cell[TextData[{
 "However, the pair of functions ",
 StyleBox[ButtonBox["Sow",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sow"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " tend to be a much more efficient approach to this task. The following \
recreates the above function using this method."
}], "Text",ExpressionUUID->"45c12278-ea6a-46ef-a7d1-8c5655ebd77a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"geometricSequence2", "[", 
   RowBox[{"a_", ",", "r_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "i", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Reap", "[", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"Sow", "[", 
        RowBox[{"a", "*", 
         RowBox[{"r", "^", "i"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "0", ",", "n"}], "}"}]}], "]"}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 CellLabel->
  "In[289]:=",ExpressionUUID->"1027113b-4baa-435f-99d1-6209d677ae8b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"geometricSequence2", "[", 
  RowBox[{"3", ",", "4", ",", "10"}], "]"}]], "Input",
 CellLabel->
  "In[290]:=",ExpressionUUID->"b061e53a-a611-46ca-a2bb-5da92a836d6e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Null", ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
     "3", ",", "12", ",", "48", ",", "192", ",", "768", ",", "3072", ",", 
      "12288", ",", "49152", ",", "196608", ",", "786432", ",", "3145728"}], 
     "}"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[290]=",ExpressionUUID->"59b34733-1e3b-4d0f-b848-fe42626fb297"]
}, Open  ]],

Cell[TextData[{
 "Let us analyze the function above. The ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " function accepts any expression (or multiple expressions separated by \
semicolons) as its argument. Its result is a two-member list, the first \
element of which is the output obtained by evaluating the expression. In the \
above, ",
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Do"], "FunctionLink"],
 " always outputs ",
 StyleBox["Null", "Code"],
 ", so that is the first element of the output. "
}], "Text",ExpressionUUID->"6a99f9bc-ffeb-4558-8d61-28182ab03745"],

Cell[TextData[{
 "The second element of the output of ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " is a list of lists, whose members are determined by the use of ",
 StyleBox[ButtonBox["Sow",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sow"], "FunctionLink"],
 " within the ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 ". In the simplest form, as above, the second element of the output is a \
list which contains a single list comprised of all of the results of \
evaluating ",
 StyleBox[ButtonBox["Sow",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sow"], "FunctionLink"],
 ". That is, each time ",
 StyleBox[ButtonBox["Sow",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sow"], "FunctionLink"],
 " is encountered, its argument is evaluated and added to this list. We can \
modify ",
 StyleBox["geometricSequence2", "Code"],
 " to produce the same output as ",
 StyleBox["geometricSequence", "Code"],
 " just by accessing the ",
 StyleBox["[[2,1]]", "Code"],
 " position of the result of ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"66acbc03-6707-4a77-aeba-04ce5d87e901"],

Cell[BoxData[
 RowBox[{
  RowBox[{"geometricSequence2", "[", 
   RowBox[{"a_", ",", "r_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "i", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Reap", "[", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"Sow", "[", 
         RowBox[{"a", "*", 
          RowBox[{"r", "^", "i"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "0", ",", "n"}], "}"}]}], "]"}], 
      "\[IndentingNewLine]", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[291]:=",ExpressionUUID->"3c327396-d3e8-434c-a14f-499d022b2552"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"geometricSequence2", "[", 
  RowBox[{"3", ",", "4", ",", "10"}], "]"}]], "Input",
 CellLabel->
  "In[292]:=",ExpressionUUID->"11757310-fef7-420a-9cf6-259fe0ee0c6d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "12", ",", "48", ",", "192", ",", "768", ",", "3072", ",", 
   "12288", ",", "49152", ",", "196608", ",", "786432", ",", "3145728"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[292]=",ExpressionUUID->"834952ca-dc52-478b-9c00-036a8f33078c"]
}, Open  ]],

Cell[TextData[{
 "While the ",
 StyleBox[ButtonBox["Sow",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sow"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " approach may seem more complicated than using ",
 StyleBox[ButtonBox["AppendTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AppendTo"], "FunctionLink"],
 ", the resulting function is significantly more efficient. The ",
 StyleBox[ButtonBox["Timing",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Timing"], "FunctionLink"],
 " function returns the list whose first element is the time it took to \
execute the expression and the second argument is the output. The semicolons \
suppress the output of the functions so we can focus on the time."
}], "Text",ExpressionUUID->"6b0e6f68-93c3-464f-bc48-16a8299ab968"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"geometricSequence", "[", 
    RowBox[{"3", ",", "4", ",", "10000"}], "]"}], ";"}], "]"}]], "Input",
 CellLabel->
  "In[293]:=",ExpressionUUID->"6499355f-f8c5-446c-90c7-d82d968d1536"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.205748`", ",", "Null"}], "}"}]], "Output",
 CellLabel->
  "Out[293]=",ExpressionUUID->"a929aead-03ee-4f4f-9775-b5dd06b03358"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"geometricSequence2", "[", 
    RowBox[{"3", ",", "4", ",", "10000"}], "]"}], ";"}], "]"}]], "Input",
 CellLabel->
  "In[294]:=",ExpressionUUID->"865b3bc9-fff1-41dc-b89e-22526907910f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.02809`", ",", "Null"}], "}"}]], "Output",
 CellLabel->
  "Out[294]=",ExpressionUUID->"fe0e50fa-99e5-4f3f-97ad-a858b1e2a3c7"]
}, Open  ]],

Cell[TextData[{
 "The second element of the output of ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " is always a list of lists. This is to allow for more fine-tuned creation \
of lists through the use of optional tags. For example, you could separate \
the terms in our geometric sequence based on whether their index is even or \
odd as follows."
}], "Text",ExpressionUUID->"4c386b03-a4fa-4b4f-ab9d-54aa5de7762f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reap", "[", "\[IndentingNewLine]", 
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"EvenQ", "[", "i", "]"}], ",", 
      RowBox[{"Sow", "[", 
       RowBox[{
        RowBox[{"3", "*", 
         RowBox[{"4", "^", "i"}]}], ",", "even"}], "]"}], ",", 
      RowBox[{"Sow", "[", 
       RowBox[{
        RowBox[{"3", "*", 
         RowBox[{"4", "^", "i"}]}], ",", "odd"}], "]"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"i", ",", "0", ",", "10"}], "}"}]}], "]"}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[295]:=",ExpressionUUID->"bb3464ec-8d89-45b6-b858-abbe5746ab75"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Null", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "3", ",", "48", ",", "768", ",", "12288", ",", "196608", ",", 
       "3145728"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"12", ",", "192", ",", "3072", ",", "49152", ",", "786432"}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[295]=",ExpressionUUID->"b21ecda9-7e13-4c99-9527-7d52f2357a3e"]
}, Open  ]],

Cell[TextData[{
 "The result of ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " is still a two-element list with first element ",
 StyleBox["Null", "Code"],
 " (the output of ",
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Do"], "FunctionLink"],
 "). However, the second element of ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 "\[CloseCurlyQuote]s output is now a list with two sublists: one consisting \
of the elements sown with tag ",
 StyleBox["even", "Code"],
 " and one list for those sown with tag ",
 StyleBox["odd", "Code"],
 ". "
}], "Text",ExpressionUUID->"1607b033-e813-4354-959f-454a765512cb"],

Cell[TextData[{
 "The second argument of ",
 StyleBox[ButtonBox["Sow",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sow"], "FunctionLink"],
 " can, in fact, be a list of tags, in which case elements can appear in more \
than one sublist. For example, the following produces three lists (as \
sublists in the second element of the output): the even-indexed terms, the \
odd-indexed terms, and all of the terms."
}], "Text",ExpressionUUID->"45d924c3-b32b-4e98-b416-41edeefac90c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reap", "[", "\[IndentingNewLine]", 
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"EvenQ", "[", "i", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Sow", "[", 
       RowBox[{
        RowBox[{"3", "*", 
         RowBox[{"4", "^", "i"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"all", ",", "even"}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Sow", "[", 
       RowBox[{
        RowBox[{"3", "*", 
         RowBox[{"4", "^", "i"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"all", ",", "odd"}], "}"}]}], "]"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"i", ",", "0", ",", "10"}], "}"}]}], "]"}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[296]:=",ExpressionUUID->"b9b87c8c-dcef-4861-bbba-b1c2ea2786e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Null", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "3", ",", "12", ",", "48", ",", "192", ",", "768", ",", "3072", ",", 
       "12288", ",", "49152", ",", "196608", ",", "786432", ",", "3145728"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "3", ",", "48", ",", "768", ",", "12288", ",", "196608", ",", 
       "3145728"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"12", ",", "192", ",", "3072", ",", "49152", ",", "786432"}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[296]=",ExpressionUUID->"d6fd1bcb-8b21-4e5d-bdf2-8e42df4bd87c"]
}, Open  ]],

Cell[TextData[{
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " also accepts a second argument as a way to limit which tags are included \
in the output. For example, the following will output only the even-indexed \
terms."
}], "Text",ExpressionUUID->"a0076162-6439-4d08-8a6b-0b7849fac42b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reap", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"EvenQ", "[", "i", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Sow", "[", 
        RowBox[{
         RowBox[{"3", "*", 
          RowBox[{"4", "^", "i"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"all", ",", "even"}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Sow", "[", 
        RowBox[{
         RowBox[{"3", "*", 
          RowBox[{"4", "^", "i"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"all", ",", "odd"}], "}"}]}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"i", ",", "0", ",", "10"}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", ",", "even"}], "]"}]], "Input",
 CellLabel->
  "In[297]:=",ExpressionUUID->"63e4de15-a180-4089-8564-1abe0f357350"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Null", ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
     "3", ",", "48", ",", "768", ",", "12288", ",", "196608", ",", 
      "3145728"}], "}"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[297]=",ExpressionUUID->"c3f368dc-11c2-4afa-ad1e-0cb87e1e3605"]
}, Open  ]],

Cell[TextData[{
 "The second argument to ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " is actually a pattern, not a tag, so you can use pattern construction \
elements, such as the vertical bar (",
 StyleBox["|)", "Code"],
 " to include options. The result will be the list of all lists whose tags \
match the pattern."
}], "Text",ExpressionUUID->"f2569b23-9db4-4ac2-b8c3-cb9b103d2d7c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reap", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"EvenQ", "[", "i", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Sow", "[", 
        RowBox[{
         RowBox[{"3", "*", 
          RowBox[{"4", "^", "i"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"all", ",", "even"}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Sow", "[", 
        RowBox[{
         RowBox[{"3", "*", 
          RowBox[{"4", "^", "i"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"all", ",", "odd"}], "}"}]}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"i", ",", "0", ",", "10"}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"all", "|", "even"}]}], "]"}]], "Input",
 CellLabel->
  "In[298]:=",ExpressionUUID->"5b723e92-f4c6-4298-a4f0-a84c4340d96c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Null", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "3", ",", "12", ",", "48", ",", "192", ",", "768", ",", "3072", ",", 
       "12288", ",", "49152", ",", "196608", ",", "786432", ",", "3145728"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "3", ",", "48", ",", "768", ",", "12288", ",", "196608", ",", 
       "3145728"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[298]=",ExpressionUUID->"856bbcb5-50f8-4dbe-8ca2-dc48194d96c6"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " function can also accept a third argument: a function of two arguments. \
For each tag matching the pattern in ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 "\[CloseCurlyQuote]s second argument, the function is applied to the tag and \
the list associated with that tag. One useful construction is shown below and \
has the effect of turning the second element of the result into a list of \
rules identifying the tags with the associated lists."
}], "Text",ExpressionUUID->"d51cb08f-b385-4c15-9e8d-8b0a97f1114a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reap", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"EvenQ", "[", "i", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Sow", "[", 
        RowBox[{
         RowBox[{"3", "*", 
          RowBox[{"4", "^", "i"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"all", ",", "even"}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Sow", "[", 
        RowBox[{
         RowBox[{"3", "*", 
          RowBox[{"4", "^", "i"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"all", ",", "odd"}], "}"}]}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"i", ",", "0", ",", "10"}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", ",", "_", ",", "Rule"}], "]"}]], "Input",
 CellLabel->
  "In[299]:=",ExpressionUUID->"319af660-cd90-4931-bcac-4c975ab31750"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Null", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"all", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "3", ",", "12", ",", "48", ",", "192", ",", "768", ",", "3072", ",", 
        "12288", ",", "49152", ",", "196608", ",", "786432", ",", "3145728"}],
        "}"}]}], ",", 
     RowBox[{"even", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "3", ",", "48", ",", "768", ",", "12288", ",", "196608", ",", 
        "3145728"}], "}"}]}], ",", 
     RowBox[{"odd", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"12", ",", "192", ",", "3072", ",", "49152", ",", "786432"}], 
       "}"}]}]}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[299]=",ExpressionUUID->"2c7de4a7-9457-416c-9c20-cba94eb983f4"]
}, Open  ]],

Cell[TextData[{
 "Note that the second argument used above is a blank (",
 StyleBox["_", "Code"],
 "), ensuring that all tags are included in the output. The head ",
 StyleBox[ButtonBox["Rule",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Rule"], "FunctionLink"],
 " is given as the third argument, and it is applied to each tag and \
associated list creating three rules in the output. By storing this list of \
rules as a symbol, and then using a ",
 StyleBox[ButtonBox["ReplaceAll",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReplaceAll"], "FunctionLink"],
 " (",
 StyleBox["/.", "Code"],
 ") in conjunction with a ",
 StyleBox[ButtonBox["Set",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Set"], "FunctionLink"],
 " (",
 StyleBox["=", "Code"],
 ") that identifies a symbol with a tag, you can assign one of the lists to a \
symbol."
}], "Text",ExpressionUUID->"050b5e11-9d49-461a-b419-7f77896f4f79"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ruleList", "=", 
  RowBox[{
   RowBox[{"Reap", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"EvenQ", "[", "i", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Sow", "[", 
          RowBox[{
           RowBox[{"3", "*", 
            RowBox[{"4", "^", "i"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"all", ",", "even"}], "}"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Sow", "[", 
          RowBox[{
           RowBox[{"3", "*", 
            RowBox[{"4", "^", "i"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"all", ",", "odd"}], "}"}]}], "]"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"i", ",", "0", ",", "10"}], "}"}]}], "]"}], 
     "\[IndentingNewLine]", ",", "_", ",", "Rule"}], "]"}], "[", 
   RowBox[{"[", "2", "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[300]:=",ExpressionUUID->"bc340be6-8ace-47ee-889e-886c2957a053"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"all", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "3", ",", "12", ",", "48", ",", "192", ",", "768", ",", "3072", ",", 
      "12288", ",", "49152", ",", "196608", ",", "786432", ",", "3145728"}], 
     "}"}]}], ",", 
   RowBox[{"even", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "3", ",", "48", ",", "768", ",", "12288", ",", "196608", ",", 
      "3145728"}], "}"}]}], ",", 
   RowBox[{"odd", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"12", ",", "192", ",", "3072", ",", "49152", ",", "786432"}], 
     "}"}]}]}], "}"}]], "Output",
 CellLabel->
  "Out[300]=",ExpressionUUID->"418e650a-7238-4142-85a2-859e0b6a99ac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"evenList", "=", 
  RowBox[{"even", "/.", "ruleList"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[301]:=",ExpressionUUID->"28e429bc-a341-478c-b64c-ab939c5af68e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "48", ",", "768", ",", "12288", ",", "196608", ",", "3145728"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[301]=",ExpressionUUID->"ea126213-6f03-4907-9222-91cd684ad11f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["evenList"], "Input",
 CellLabel->
  "In[302]:=",ExpressionUUID->"03fc2ab7-c735-4b71-a477-3b43967d2dd1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "48", ",", "768", ",", "12288", ",", "196608", ",", "3145728"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[302]=",ExpressionUUID->"8438f8ed-cc9c-483b-9929-ee4f70f0c6ab"]
}, Open  ]],

Cell[TextData[{
 "You might wonder about using ",
 StyleBox[ButtonBox["Set",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Set"], "FunctionLink"],
 " instead of ",
 StyleBox[ButtonBox["Rule",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Rule"], "FunctionLink"],
 " as the final argument to ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 ". This will have the effect of assigning the appropriate lists to the \
symbols used as the tags. However, there is a significant drawback. \
Specifically, once the ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " expression has been evaluated and the assignment of tags to lists has been \
made, you can no longer use those symbols as tags without first removing the \
assignment with ",
 StyleBox[ButtonBox["Unset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Unset"], "FunctionLink"],
 " (",
 StyleBox["=.", "Code"],
 ") or ",
 StyleBox[ButtonBox["Clear",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Clear"], "FunctionLink"],
 ". This does not, however, apply in contexts where the tags are made local, \
such as inside of a ",
 StyleBox[ButtonBox["Module",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Module"], "FunctionLink"],
 ", as is done below. "
}], "Text",ExpressionUUID->"00537eab-5a5c-4090-9a8a-effd05cbc9a3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"geometricSequence3", "[", 
   RowBox[{"a_", ",", "r_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", "seq"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Reap", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{"Sow", "[", 
          RowBox[{
           RowBox[{"a", "*", 
            RowBox[{"r", "^", "i"}]}], ",", "seq"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "n"}], "}"}]}], "]"}], 
       "\[IndentingNewLine]", ",", "_", ",", "Set"}], "]"}], ";", 
     "\[IndentingNewLine]", "seq"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[303]:=",ExpressionUUID->"5eaf8656-e83a-4bff-94cf-220a97341193"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"geometricSequence3", "[", 
  RowBox[{"3", ",", "4", ",", "10"}], "]"}]], "Input",
 CellLabel->
  "In[304]:=",ExpressionUUID->"4b0f446a-7439-4b37-b2c0-f15ae97ede04"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "12", ",", "48", ",", "192", ",", "768", ",", "3072", ",", 
   "12288", ",", "49152", ",", "196608", ",", "786432", ",", "3145728"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[304]=",ExpressionUUID->"e69e9c51-9c88-4341-9aed-6b3f1185f83c"]
}, Open  ]],

Cell[TextData[{
 "In ",
 StyleBox["geometricSequence3", "Code"],
 ", the symbol ",
 StyleBox["seq", "Code"],
 " is localized to the module. It is then used as the tag to ",
 StyleBox[ButtonBox["Sow",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sow"], "FunctionLink"],
 ". The enclosing ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " uses the ",
 StyleBox[ButtonBox["Set",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Set"], "FunctionLink"],
 " function, which has the effect of setting ",
 StyleBox["seq", "Code"],
 " to the list containing the geometric sequence. Once the ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 " function is closed, we have the function evaluate ",
 StyleBox["seq", "Code"],
 " so that it becomes the output."
}], "Text",ExpressionUUID->"f6cc8a08-8abc-4911-bb17-e76db24c6e40"],

Cell[TextData[{
 "Note that making ",
 StyleBox["seq", "Code"],
 " local means that it does not store the sequence after the function is \
complete and that it can be reused. If we did not make it local, the function \
could only be executed once. Consequently, you should use this approach with \
caution."
}], "Text",ExpressionUUID->"b678f1c3-e506-43e3-b6bf-045fe39bab67"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Recurrence Relations", "Subsection",
 CellTags->"Section4d",ExpressionUUID->"4b3f2975-a7f5-49ef-a0c8-258837daa448"],

Cell[TextData[{
 "Next, we will see how we can use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to explore sequences that arise from recurrence relations. We will go into \
much more depth, especially in regards to the Wolfram Language\
\[CloseCurlyQuote]s functions related to solving recurrence relations, in \
Chapter 8. Here, we will only explore how we can have ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " compute terms of sequences defined by recurrence relations."
}], "Text",ExpressionUUID->"e22ef9eb-474a-46f5-9b57-0125777a494f"],

Cell[TextData[{
 "As an example, consider the Fibonacci sequence, which has recurrence \
relation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["f", "n"], "=", 
    RowBox[{
     SubscriptBox["f", 
      RowBox[{"n", "-", "1"}]], "+", 
     SubscriptBox["f", 
      RowBox[{"n", "-", "2"}]]}]}], TraditionalForm]],ExpressionUUID->
  "82f6bca9-6070-4f5a-8d3f-1da216b345ed"],
 " and initial conditions ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["f", "1"], "=", "0"}], TraditionalForm]],ExpressionUUID->
  "ab024e43-0532-4b89-aa5c-402ad23aa665"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["f", "2"], "=", "1"}], TraditionalForm]],ExpressionUUID->
  "864bde9e-5c2f-401c-971b-70c2c2636c91"],
 ". (Note that the textbook uses ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]],ExpressionUUID->
  "f52a4b70-a2f3-4cd1-a1f4-252372ab8641"],
 " as the first index for a sequence, but the Wolfram Language uses 1 as the \
first index for lists, and we will follow the Wolfram Language convention.) \
To produce this sequence in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", we can use an ",
 ButtonBox["indexed variable",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/MakingDefinitionsForIndexedObjects"],
 ". "
}], "Text",ExpressionUUID->"83aa5696-7dd6-438f-91a0-3d732a851292"],

Cell["\<\
The basic idea of an indexed variable is that the Wolfram Language allows us \
to use the notation of functions in a very flexible way. For example, we \
could define a function that squares its argument.\
\>", "Text",ExpressionUUID->"15aea650-74c4-47b5-aa8b-9b4a0269991f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"xsquared", "[", "x_", "]"}], ":=", 
  RowBox[{"x", "^", "2"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[305]:=",ExpressionUUID->"ececb563-1f21-436f-86e7-3d920d91633f"],

Cell[TextData[{
 "We might then decide that, for this function, the input value 0 should \
return ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "1"}], TraditionalForm]],ExpressionUUID->
  "292f22dd-fc9e-46d9-b753-2d5dfadeb7d2"],
 ". We could redefine the function with a an ",
 StyleBox[ButtonBox["If",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/If"], "FunctionLink"],
 " statement or ",
 StyleBox[ButtonBox["Switch",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Switch"], "FunctionLink"],
 ". But the Wolfram Language allows us to simply tell it that ",
 StyleBox["xsquared", "Input",
  IgnoreSpellCheck->True],
 StyleBox["[0]\[ThinSpace]=\[ThinSpace]-1", "Code"],
 "."
}], "Text",ExpressionUUID->"09d41c21-6925-4550-a663-b12d4c16cad2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"xsquared", "[", "0", "]"}], "=", 
  RowBox[{"-", "1"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[306]:=",ExpressionUUID->"51caa689-5df9-4ba3-967c-1a2cbf9d9b31"],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellLabel->
  "Out[306]=",ExpressionUUID->"ab6b5241-83d8-4155-bffb-5e17bd7dd4a6"]
}, Open  ]],

Cell[TextData[{
 "When we call ",
 StyleBox["xsquared", "Input",
  IgnoreSpellCheck->True],
 " on an argument, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will check which definition is most appropriate and return the relevant \
value."
}], "Text",ExpressionUUID->"6e7eed69-7997-4acc-8765-0f99c87ad2d6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"xsquared", "[", "0", "]"}]], "Input",
 CellLabel->
  "In[307]:=",ExpressionUUID->"375d5d28-76bc-499c-8ed1-f69d0c7e50ac"],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellLabel->
  "Out[307]=",ExpressionUUID->"93c67fda-61a0-4b0e-9dd9-7242cc0c605f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"xsquared", "[", "5", "]"}]], "Input",
 CellLabel->
  "In[308]:=",ExpressionUUID->"621ad0b6-7ca1-4929-bf46-bec6c80070fa"],

Cell[BoxData["25"], "Output",
 CellLabel->
  "Out[308]=",ExpressionUUID->"9d65bca2-797c-4b16-9eb6-bdcde539d0f2"]
}, Open  ]],

Cell[TextData[{
 "To see the entire definition of the indexed variable, you can use the ",
 StyleBox[ButtonBox["Definition",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Definition"], "FunctionLink"],
 " function or the ",
 StyleBox["?", "Code"],
 " operator, as shown below."
}], "Text",ExpressionUUID->"f60a702b-2495-4888-bebf-665c6564b1e1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "xsquared"}]], "Input",
 CellLabel->
  "In[309]:=",ExpressionUUID->"4b52b282-dc5c-44ca-ab49-91dc037b64fb"],

Cell["Global`xsquared", "Print", "PrintUsage",
 CellTags->
  "Info3093738413500-3998906",ExpressionUUID->"b12db159-5375-4494-8d2b-\
9dfaa1888b49"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"xsquared", "[", "0", "]"}], "=", 
         RowBox[{"-", "1"}]}]},
       {" "},
       {
        RowBox[{
         RowBox[{"xsquared", "[", "x_", "]"}], ":=", 
         SuperscriptBox["x", "2"]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  Definition[$CellContext`xsquared],
  Editable->False]], "Print",
 CellTags->
  "Info3093738413500-3998906",ExpressionUUID->"e21f23fa-3087-44ea-8136-\
f82948ca1fbd"]
}, Open  ]],

Cell[TextData[{
 "Back to the Fibonacci sequence. Define a function named ",
 StyleBox["fib", "Code"],
 " to represent the recurrence relation."
}], "Text",ExpressionUUID->"2b9011e3-aaec-44a6-942c-71fcd56298bf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fib", "[", "n_", "]"}], ":=", 
  RowBox[{
   RowBox[{"fib", "[", 
    RowBox[{"n", "-", "1"}], "]"}], "+", 
   RowBox[{"fib", "[", 
    RowBox[{"n", "-", "2"}], "]"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[310]:=",ExpressionUUID->"b9a53b59-fa2e-4852-908a-fbe6ff034437"],

Cell[TextData[{
 "The left-hand side of this definition indicates that when it\
\[CloseCurlyQuote]s asked to evaluate ",
 StyleBox["fib", "Code"],
 " on an argument, it should perform the computations on the right-hand side \
with ",
 StyleBox["n", "Code"],
 " replaced by the given argument."
}], "Text",ExpressionUUID->"58752973-18f2-450c-8827-ac22e5ad680b"],

Cell["Next, we set the initial values.", "Text",ExpressionUUID->"79208095-dd28-4bd7-8737-43ae1328bbe4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"fib", "[", "1", "]"}], "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fib", "[", "2", "]"}], "=", "1"}], ";"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[311]:=",ExpressionUUID->"eb2e4037-cd24-4418-93d9-f0056299175d"],

Cell[TextData[{
 "Now, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will compute values of the sequence."
}], "Text",ExpressionUUID->"d4ff45f3-e540-4931-acfa-2fd15576a0ee"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fib", "[", "8", "]"}]], "Input",
 CellLabel->
  "In[313]:=",ExpressionUUID->"a24a4133-882a-45ca-9dcd-524b86cba0df"],

Cell[BoxData["13"], "Output",
 CellLabel->
  "Out[313]=",ExpressionUUID->"d0f60c86-f71d-4cff-9694-01c84ebd7075"]
}, Open  ]],

Cell[TextData[{
 "To display a list of elements of the sequence, use the ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " function."
}], "Text",ExpressionUUID->"daa81b69-2db9-4469-8342-f8959eefed97"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"fib", "[", "i", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "20"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[314]:=",ExpressionUUID->"0ce71145-9250-4e20-8e86-db87ecf9b5d5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "1", ",", "2", ",", "3", ",", "5", ",", "8", ",", "13", 
   ",", "21", ",", "34", ",", "55", ",", "89", ",", "144", ",", "233", ",", 
   "377", ",", "610", ",", "987", ",", "1597", ",", "2584", ",", "4181"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[314]=",ExpressionUUID->"de37989c-fa1b-4eb8-b968-0f32c05e53eb"]
}, Open  ]],

Cell[TextData[{
 "While the above approach for calculating recurrence relations is convenient \
and intuitive, it is also very inefficient. Observe that the definition of ",
 StyleBox["fib", "Code"],
 " contains only the recurrence relation and initial conditions."
}], "Text",ExpressionUUID->"4e2d7ed9-afd6-492d-9269-86fe80c811bd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "fib"}]], "Input",
 CellLabel->
  "In[315]:=",ExpressionUUID->"5da5e0a3-82ea-4105-b687-8d8fc464cbaf"],

Cell["Global`fib", "Print", "PrintUsage",
 CellTags->
  "Info3153738413500-3998906",ExpressionUUID->"541c387f-da41-4b86-9477-\
a5efe6ddbc13"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"fib", "[", "1", "]"}], "=", "0"}]},
       {" "},
       {
        RowBox[{
         RowBox[{"fib", "[", "2", "]"}], "=", "1"}]},
       {" "},
       {
        RowBox[{
         RowBox[{"fib", "[", "n_", "]"}], ":=", 
         RowBox[{
          RowBox[{"fib", "[", 
           RowBox[{"n", "-", "1"}], "]"}], "+", 
          RowBox[{"fib", "[", 
           RowBox[{"n", "-", "2"}], "]"}]}]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  Definition[$CellContext`fib],
  Editable->False]], "Print",
 CellTags->
  "Info3153738413500-3998906",ExpressionUUID->"d14a5909-5201-465f-bc1b-\
67fa633254a2"]
}, Open  ]],

Cell[TextData[{
 "This tells us that computed values are not being stored, and so ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " must recompute all but the first two values of the sequence every time a \
value is desired. We can have ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " calculate the sequence more efficiently by having it remember all of the \
values it computes. This is demonstrated below."
}], "Text",ExpressionUUID->"b14c7607-bada-4c76-b9a5-ce876efb8bc5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"fib2", "[", "1", "]"}], "=", "0"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fib2", "[", "2", "]"}], "=", "1"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fib2", "[", "n_", "]"}], ":=", 
   RowBox[{
    RowBox[{"fib2", "[", "n", "]"}], "=", 
    RowBox[{
     RowBox[{"fib2", "[", 
      RowBox[{"n", "-", "1"}], "]"}], "+", 
     RowBox[{"fib2", "[", 
      RowBox[{"n", "-", "2"}], "]"}]}]}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[316]:=",ExpressionUUID->"b6388452-3d11-47a9-8c53-c5fb20131785"],

Cell[TextData[{
 "We combined both the recurrence relation and initial conditions into one \
input expression. The above can be understood by distinguishing between the \
",
 StyleBox["function",
  FontSlant->"Italic"],
 " ",
 StyleBox["fib2", "Code"],
 " and the ",
 StyleBox["indexed variable",
  FontSlant->"Italic"],
 " ",
 StyleBox["fib2", "Code"],
 ". The first two lines assign values to the indexed variable ",
 StyleBox["fib2", "Code"],
 " with indices 1 and 2. The third line defines the function ",
 StyleBox["fib2", "Code"],
 ". This function accepts one argument, named ",
 StyleBox["n", "Code"],
 ". The body of the function is an assignment. Specifically, the function \
assigns a value to the indexed variable ",
 StyleBox["fib2", "Code"],
 ". That value is obtained by either looking up or calculating earlier values."
}], "Text",ExpressionUUID->"dac95233-1fd0-4cbc-ae62-a7771b575917"],

Cell[TextData[{
 "This means that values will be stored as they are calculated. You can see \
this by looking at the definition of ",
 StyleBox["fib2", "Code"],
 " before and after evaluating ",
 StyleBox["fib2[3]", "Code"],
 "."
}], "Text",ExpressionUUID->"2a47fc56-54fd-49c1-97e8-fe7ad3304cbe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "fib2"}]], "Input",
 CellLabel->
  "In[319]:=",ExpressionUUID->"bb925fe0-6aba-489c-b1de-0d2fe2fd8d13"],

Cell["Global`fib2", "Print", "PrintUsage",
 CellTags->
  "Info3193738413500-3998906",ExpressionUUID->"8b1fad1f-23c4-47f3-b3a3-\
bd8cdde5eef5"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"fib2", "[", "1", "]"}], "=", "0"}]},
       {" "},
       {
        RowBox[{
         RowBox[{"fib2", "[", "2", "]"}], "=", "1"}]},
       {" "},
       {
        RowBox[{
         RowBox[{"fib2", "[", "n_", "]"}], ":=", 
         RowBox[{
          RowBox[{"fib2", "[", "n", "]"}], "=", 
          RowBox[{
           RowBox[{"fib2", "[", 
            RowBox[{"n", "-", "1"}], "]"}], "+", 
           RowBox[{"fib2", "[", 
            RowBox[{"n", "-", "2"}], "]"}]}]}]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  Definition[$CellContext`fib2],
  Editable->False]], "Print",
 CellTags->
  "Info3193738413500-3998906",ExpressionUUID->"0d452bab-700d-4f85-9372-\
9bc6cd7abfdc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fib2", "[", "3", "]"}]], "Input",
 CellLabel->
  "In[320]:=",ExpressionUUID->"f231b46a-c309-4766-a7e8-abf2536e4220"],

Cell[BoxData["1"], "Output",
 CellLabel->
  "Out[320]=",ExpressionUUID->"29baba7e-eea2-4d17-b8f0-0806ea82cf64"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "fib2"}]], "Input",
 CellLabel->
  "In[321]:=",ExpressionUUID->"c63c7e0b-d8a3-455a-a0aa-a566b101c194"],

Cell["Global`fib2", "Print", "PrintUsage",
 CellTags->
  "Info3213738413500-3998906",ExpressionUUID->"ae95c73a-7d7c-4bd7-b56d-\
f5db53266edb"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"fib2", "[", "1", "]"}], "=", "0"}]},
       {" "},
       {
        RowBox[{
         RowBox[{"fib2", "[", "2", "]"}], "=", "1"}]},
       {" "},
       {
        RowBox[{
         RowBox[{"fib2", "[", "3", "]"}], "=", "1"}]},
       {" "},
       {
        RowBox[{
         RowBox[{"fib2", "[", "n_", "]"}], ":=", 
         RowBox[{
          RowBox[{"fib2", "[", "n", "]"}], "=", 
          RowBox[{
           RowBox[{"fib2", "[", 
            RowBox[{"n", "-", "1"}], "]"}], "+", 
           RowBox[{"fib2", "[", 
            RowBox[{"n", "-", "2"}], "]"}]}]}]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  Definition[$CellContext`fib2],
  Editable->False]], "Print",
 CellTags->
  "Info3213738413500-3998906",ExpressionUUID->"7a2c7d82-ca5c-4d87-a49a-\
78afb1448ff1"]
}, Open  ]],

Cell["\<\
To illustrate the difference in performance, we see how long it takes to \
compute the 1000th Fibonacci number.\
\>", "Text",ExpressionUUID->"e12e38f3-ea1b-49fb-a65a-538810ed55b8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"fib2", "[", "1000", "]"}], "]"}]], "Input",
 CellLabel->
  "In[322]:=",ExpressionUUID->"301db838-df16-41e1-b070-37c5f2ebe4c9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.004021`", ",", 
   "26863810024485359386146727202142923967616609318986952340123175997617981700\
247881689338369654483356564191827856161443356312976673642210350324634850410377\
680367334151172899169723197082763985615764450078474174626"}], "}"}]], "Output",\

 CellLabel->
  "Out[322]=",ExpressionUUID->"3245c3bf-30c6-4afd-917f-206938d256a5"]
}, Open  ]],

Cell[TextData[{
 "Note that if we repeat the computation using ",
 StyleBox["fib2", "Code"],
 ":"
}], "Text",ExpressionUUID->"7a9d20e9-d5dc-47a8-8870-e367fe6374e5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"fib2", "[", "1000", "]"}], "]"}]], "Input",
 CellLabel->
  "In[323]:=",ExpressionUUID->"ce16b317-412d-456c-aa91-bfeeda3f13c9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "7.`*^-6", ",", 
   "26863810024485359386146727202142923967616609318986952340123175997617981700\
247881689338369654483356564191827856161443356312976673642210350324634850410377\
680367334151172899169723197082763985615764450078474174626"}], "}"}]], "Output",\

 CellLabel->
  "Out[323]=",ExpressionUUID->"50700b1b-63fb-463e-81b8-5b4bd1c06b7b"]
}, Open  ]],

Cell[TextData[{
 "The total time taken drops dramatically. This is because ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " does not need to compute the value again, it just looks it up."
}], "Text",ExpressionUUID->"e1bf6859-db80-43cb-b847-fd918a68f3f3"],

Cell[TextData[{
 "In comparison, consider the ",
 StyleBox["fib", "Code"],
 " function applied to just 30."
}], "Text",ExpressionUUID->"d1d1fcf6-f8a9-4912-b115-9d5de595e212"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"fib", "[", "30", "]"}], "]"}]], "Input",
 CellLabel->
  "In[324]:=",ExpressionUUID->"907994c9-46a7-4241-a031-ad00b6dd9dbb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.086808`", ",", "514229"}], "}"}]], "Output",
 CellLabel->
  "Out[324]=",ExpressionUUID->"991c6a3f-68a3-4de4-a7c9-b1156bbc9b29"]
}, Open  ]],

Cell["\<\
By storing the results of computations in a recursively generated sequence, \
we can get higher terms much more quickly.\
\>", "Text",ExpressionUUID->"0006ea53-dfab-4223-86b5-5b15c44f4247"],

Cell[TextData[{
 "Note that attempting to call ",
 StyleBox["fib2", "Code"],
 " with larger values, such as ",
 Cell[BoxData[
  FormBox["10000", TraditionalForm]],ExpressionUUID->
  "e03f0eb9-4eff-489e-b844-e5c7aa6e0982"],
 ", will raise an error, specifically:"
}], "Text",ExpressionUUID->"507b566f-3007-423a-a8cd-e583963f4a0a"],

Cell[BoxData[
 TemplateBox[{
  "$RecursionLimit","reclim2",
   "\"Recursion depth of \\!\\(\\*RowBox[{\\\"1024\\\"}]\\) exceeded during \
evaluation of \\!\\(\\*RowBox[{RowBox[{\\\"fib2\\\", \\\"[\\\", \
RowBox[{\\\"8978\\\", \\\"-\\\", \\\"1\\\"}], \\\"]\\\"}], \\\"+\\\", \
RowBox[{\\\"fib2\\\", \\\"[\\\", RowBox[{\\\"8978\\\", \\\"-\\\", \
\\\"2\\\"}], \\\"]\\\"}]}]\\).\"",2,396,23,22475905480626699439,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[396]:=",ExpressionUUID->"d5420600-37bb-4afe-8aab-94fe26d4a424"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " puts a limit on how far down a recursive definition it will go. This is to \
prevent ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " from crashing your computer by trying to exceed the machine\
\[CloseCurlyQuote]s stack space. To get around this, you can temporarily \
override the default recursion limit as in the following."
}], "Text",ExpressionUUID->"6a2b6d45-bbc0-464b-86df-72c35651a82b"],

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"$RecursionLimit", "=", "10000"}], "}"}], ",", 
   RowBox[{"fib2", "[", "10000", "]"}]}], "]"}]], "Input",
 Evaluatable->False,ExpressionUUID->"6c19a83a-f042-40a6-96b5-44109283ffb9"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Block",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Block"], "FunctionLink"],
 " is similar to ",
 StyleBox[ButtonBox["Module",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Module"], "FunctionLink"],
 ", in that it defines a scope and the first argument declares the variables \
local to that scope. In the above, ",
 StyleBox[ButtonBox["Block",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Block"], "FunctionLink"],
 " is used to ensure that the change to the recursion limit is only \
temporary. The built-in recursion limit is there for a reason, and overriding \
it is inherently dangerous. If you were to change it permanently and then \
unwittingly execute an expression that caused a large recursive descent, you \
could crash your ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " session and lose your work. "
}], "Text",ExpressionUUID->"05a1b675-0816-45ca-abb4-2fc2ae6a32a1"],

Cell[TextData[{
 "Note that the purely recursive implementation ",
 StyleBox["fib", "Code"],
 " cannot be reasonably used to compute the ",
 Cell[BoxData[
  FormBox["10000", TraditionalForm]],ExpressionUUID->
  "d5118b8c-07e5-4d80-8511-db6e87673b85"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " Fibonacci number. In fact, to compute the ",
 Cell[BoxData[
  FormBox["10000", TraditionalForm]],ExpressionUUID->
  "399a572d-5841-411d-a16f-d9b1ace36289"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " Fibonacci number, ",
 StyleBox["fib", "Code"],
 " would need to be invoked approximately"
}], "Text",ExpressionUUID->"5d52d0c8-bdc2-4292-96f6-586b80e1d4e9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"$RecursionLimit", "=", "10000"}], "}"}], ",", 
   RowBox[{"N", "[", 
    RowBox[{"fib2", "[", "9999", "]"}], "]"}]}], "]"}]], "Input",
 Evaluatable->False,ExpressionUUID->"958c1acb-2a27-418d-8c97-ff9a633b5375"],

Cell[BoxData["1.285115663929828519450896302`15.954589770191005*^2089"], \
"Output",
 Editable->False,ExpressionUUID->"00a1a415-a9ac-405a-ad47-5fa27810fd22"]
}, Open  ]],

Cell["\<\
times in order to handle all the recursive sub-calls that are made. (The \
reader is encouraged to prove this fact.)\
\>", "Text",ExpressionUUID->"3bfc20bd-6797-4eec-b56b-b22cb4570640"],

Cell["Even at a billion calls per second, this would require", "Text",ExpressionUUID->"b4fb4ee9-1c8c-461c-88b4-b7b930a20150"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"fib2", "[", "9999", "]"}], "/", "1000000000."}]], "Input",
 Evaluatable->False,ExpressionUUID->"6c817822-4cac-436a-8a1e-a6153e660584"],

Cell[BoxData["1.28511566392982859948994505851756731257`15.954589770191005*^\
2080"], "Output",
 Editable->False,ExpressionUUID->"a438ae9a-b6c4-4e0a-bebc-217a5395ec6a"]
}, Open  ]],

Cell["seconds, or", "Text",ExpressionUUID->"9472d0d5-eec4-44bc-8e14-17346149ad9a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"fib2", "[", "9999", "]"}], "/", 
  RowBox[{"(", 
   RowBox[{"1000000000.", "*", "60", "*", "60", "*", "24", "*", "365"}], 
   ")"}]}]], "Input",
 Evaluatable->False,ExpressionUUID->"5c83fac8-b220-4a14-8ccb-c1e3abdbea8a"],

Cell[BoxData["4.075075037829238214823813543104`15.954589770191005*^2072"], \
"Output",
 Editable->False,ExpressionUUID->"6f4478aa-8d19-4cf0-a079-c97b1c2ee2b9"]
}, Open  ]],

Cell["years to complete.", "Text",ExpressionUUID->"bbd1850d-e5f9-49aa-b076-f92908bd94a4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Summations", "Subsection",
 CellTags->"Section4e",ExpressionUUID->"010a2594-ce02-47df-8be8-79147cdc8068"],

Cell[TextData[{
 "Finally, we will see how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can be used to compute with summations, both numerically for finite sums \
and symbolically for infinite sums."
}], "Text",ExpressionUUID->"ed2fba90-c63a-4484-8668-09cbe5e69cd6"],

Cell[TextData[{
 "To add a finite list of values, we use the ",
 StyleBox[ButtonBox["Total",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Total"], "FunctionLink"],
 " function. Applied to a list, ",
 StyleBox[ButtonBox["Total",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Total"], "FunctionLink"],
 " returns the sum."
}], "Text",ExpressionUUID->"61e5c14e-0ae7-4cf7-8c84-b5b8ed2a76fd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Total", "[", 
  RowBox[{"{", 
   RowBox[{
   "1", ",", "2", ",", "4", ",", "6", ",", "9", ",", "11", ",", "14"}], "}"}],
   "]"}]], "Input",
 CellLabel->
  "In[325]:=",ExpressionUUID->"b5c2a3a0-98e4-440f-9eb0-bc6fe40729a5"],

Cell[BoxData["47"], "Output",
 CellLabel->
  "Out[325]=",ExpressionUUID->"d0ebedbe-6a58-4c4a-9dcb-2bed024937ca"]
}, Open  ]],

Cell[TextData[{
 "The argument to ",
 StyleBox[ButtonBox["Total",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Total"], "FunctionLink"],
 " can be a function that returns a list. For example, the following computes \
the sum of the integers from 1 to 100."
}], "Text",ExpressionUUID->"5d7df29a-f670-4820-a3c8-be367e6bba59"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Total", "[", 
  RowBox[{"Range", "[", "100", "]"}], "]"}]], "Input",
 CellLabel->
  "In[326]:=",ExpressionUUID->"8916e92b-a4bd-46a3-a94d-8acfffc49884"],

Cell[BoxData["5050"], "Output",
 CellLabel->
  "Out[326]=",ExpressionUUID->"49987949-9f03-4b4b-8786-bf441e6cb9ab"]
}, Open  ]],

Cell[TextData[{
 "The Wolfram Language also provides the function ",
 StyleBox[ButtonBox["Sum",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sum"], "FunctionLink"],
 ", which can be used in place of composing ",
 StyleBox[ButtonBox["Total",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Total"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 ". ",
 StyleBox[ButtonBox["Sum",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sum"], "FunctionLink"],
 " accepts arguments in the same form as ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 ", but instead of producing the list, it provides you with the sum of the \
sequence."
}], "Text",ExpressionUUID->"cb875e98-c08a-447e-a949-70acc3ef4f75"],

Cell[TextData[{
 "The first argument to ",
 StyleBox[ButtonBox["Sum",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sum"], "FunctionLink"],
 " should be an expression involving a variable (the index of summation). The \
second argument is generally a list, whose first element is the index of \
summation (e.g., ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "fd63ed1b-b2b4-4e96-9663-9bee32176873"],
 ") and whose other arguments specify the values that the index takes on, as \
detailed in the table below."
}], "Text",ExpressionUUID->"56a78481-8bd8-4d5e-b62a-ce6492213f12"],

Cell[TextData[Cell[BoxData[GridBox[{
   {Cell[BoxData[
     RowBox[{"{", 
      StyleBox["i", "CodeVar"], ",", 
      StyleBox[
       SubscriptBox["i", "max"], "CodeVar"], "}"}]], "myCode",ExpressionUUID->
     "68ae9e32-87d0-4a38-85a1-639cda1f28ad"], Cell[TextData[{
     "sum from ",
     Cell[BoxData[
      FormBox[
       RowBox[{"i", "=", "1"}], TraditionalForm]],ExpressionUUID->
      "43d0bebf-d1f5-47c3-8c0d-81cdcde27393"],
     " to ",
     Cell[BoxData[
      FormBox[
       SubscriptBox["i", "max"], TraditionalForm]],ExpressionUUID->
      "0e24e193-3321-4689-a111-3a23559e51d9"]
    }],ExpressionUUID->"b85003c4-8d43-487b-b5a0-35028edd1cc8"]},
   {Cell[BoxData[
     RowBox[{"{", 
      StyleBox["i", "CodeVar"], ",", 
      StyleBox[
       SubscriptBox["i", "min"], "CodeVar"], ",", 
      StyleBox[
       SubscriptBox["i", "max"], "CodeVar"], "}"}]], "myCode",ExpressionUUID->
     "00fab76e-7b41-4371-9a29-f4d81224a5de"], 
    RowBox[{"sum", " ", "from", " ", Cell[TextData[{
      Cell[BoxData[
       FormBox[
        RowBox[{"i", "=", 
         SubscriptBox["i", "min"]}], TraditionalForm]],ExpressionUUID->
       "1eb10054-8750-427c-b714-6054bd3595bc"],
      " to ",
      Cell[BoxData[
       FormBox[
        SubscriptBox["i", "max"], TraditionalForm]],ExpressionUUID->
       "53a208af-03bd-4427-8f6e-0881f6d2c27b"]
     }],ExpressionUUID->"c35e1d8c-6cab-480b-87b9-e922dfec3356"]}]},
   {Cell[BoxData[
     RowBox[{"{", 
      StyleBox["i", "CodeVar"], ",", 
      StyleBox[
       SubscriptBox["i", "min"], "CodeVar"], ",", 
      StyleBox[
       SubscriptBox["i", "max"], "CodeVar"], ",", 
      StyleBox["step", "CodeVar"], "}"}]], "myCode",ExpressionUUID->
     "5b8493d3-54e8-44ae-b7e2-a4764f0d742c"], 
    RowBox[{"sum", " ", "from", " ", Cell[TextData[{
      Cell[BoxData[
       FormBox[
        RowBox[{"i", "=", 
         SubscriptBox["i", "min"]}], TraditionalForm]],ExpressionUUID->
       "99f9c39c-2247-45e8-8f53-3feedee8d220"],
      " to ",
      Cell[BoxData[
       FormBox[
        SubscriptBox["i", "max"], TraditionalForm]],ExpressionUUID->
       "b6b5eae6-e0c7-4439-9324-b7f940ff2080"],
      " by ",
      Cell[BoxData[
       FormBox["step", TraditionalForm]],ExpressionUUID->
       "972bac60-3892-42fc-855b-11d6011e22db"]
     }],ExpressionUUID->"828a53c8-750e-4e53-8fb4-710ed616d44e"]}]},
   {Cell[BoxData[
     RowBox[{"{", 
      StyleBox["i", "CodeVar"], ",", 
      StyleBox["list", "CodeVar"], "}"}]], "myCode",ExpressionUUID->
     "88fc9a8e-7814-4b8e-8473-3e49b8a97515"], 
    RowBox[{
    "sum", " ", "over", " ", Cell[
     "i\[Element]list",ExpressionUUID->
      "71b0b723-9bc9-496e-bfdb-42096c9b2390"], Cell[TextData[StyleBox[
     "", "Input"]],ExpressionUUID->"55247d9d-d32a-4906-8f87-7f0edb3fa900"]}]}
  },
  GridBoxDividers->{
   "Columns" -> {{True}}, "ColumnsIndexed" -> {}, "Rows" -> {{True}}, 
    "RowsIndexed" -> {}}]],
 FontFamily->
  "Times",ExpressionUUID->"ba21d7c2-96f6-4229-9e5e-267e9714fa57"]], "Text",
 TextAlignment->Center,ExpressionUUID->"9d2d0e92-ac70-411c-944e-6a998dd0a322"],

Cell[TextData[{
 "For example, to compute the sum of the squares of the first ten positive \
integers, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{" ", 
      RowBox[{"i", "=", "1"}]}], 
     RowBox[{" ", "10"}]], 
    SuperscriptBox["i", "2"]}], TraditionalForm]],ExpressionUUID->
  "162e6505-96ef-4647-b83e-900046962bed"],
 ", we enter the following."
}], "Text",ExpressionUUID->"39283b24-9fce-44eb-9c08-bfd9d561638e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   RowBox[{"i", "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[327]:=",ExpressionUUID->"82b7206c-7911-41b9-aee2-24729d77296f"],

Cell[BoxData["385"], "Output",
 CellLabel->
  "Out[327]=",ExpressionUUID->"83a33e0b-901d-49ad-ac3d-15f8f1a14eb8"]
}, Open  ]],

Cell[TextData[{
 "To compute the sum ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{" ", 
      RowBox[{"i", "=", "10"}]}], 
     RowBox[{" ", "30"}]], 
    FractionBox["1", "i"]}], TraditionalForm]],ExpressionUUID->
  "e9fe0fde-cf53-4be8-82f5-6397e98a8a9b"],
 ", you enter:"
}], "Text",ExpressionUUID->"c039fc4c-0d06-4823-9e32-7217db77ef0a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   RowBox[{"1", "/", "i"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "10", ",", "30"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[328]:=",ExpressionUUID->"3a488f1e-26ef-4497-955d-e25fe6cc309b"],

Cell[BoxData[
 FractionBox["2715762396337", "2329089562800"]], "Output",
 CellLabel->
  "Out[328]=",ExpressionUUID->"aa4b9049-c88d-403e-9bfe-94ddd4bf2186"]
}, Open  ]],

Cell[TextData[{
 "Note that nested sums can be computed simply by providing additional \
specifications for the index of summation, just as is done with ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 ". Also note that there is a similar command for products, with identical \
syntax, called ",
 StyleBox[ButtonBox["Product",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Product"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"a01239b5-7665-48ed-bbe9-e7c31cbb9dfe"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Sum",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sum"], "FunctionLink"],
 " function can also be used for symbolic sums. For example, to compute the \
sum of the squares of the integers from 1 to ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "fb4d402e-5ffa-4557-be21-9f587261d0fd"],
 ", that is, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{" ", 
      RowBox[{"i", "=", "1"}]}], 
     RowBox[{" ", "n"}]], 
    SuperscriptBox["i", "2"]}], TraditionalForm]],ExpressionUUID->
  "b31c393d-78ff-4095-8ed3-60809c7971a6"],
 ", you simply give the maximum for the index of summation as ",
 StyleBox["n", "Code"],
 ", provided the symbol ",
 StyleBox["n", "Code"],
 " has not been assigned a value."
}], "Text",ExpressionUUID->"4d027a40-179f-41a3-a7a8-3b080739d4fa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   RowBox[{"i", "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "n"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[329]:=",ExpressionUUID->"ac0b0fac-d791-4f13-83c9-12b44622b424"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "6"], " ", "n", " ", 
  RowBox[{"(", 
   RowBox[{"1", "+", "n"}], ")"}], " ", 
  RowBox[{"(", 
   RowBox[{"1", "+", 
    RowBox[{"2", " ", "n"}]}], ")"}]}]], "Output",
 CellLabel->
  "Out[329]=",ExpressionUUID->"70c8015d-6e35-4fd8-a5e1-197a414a647d"]
}, Open  ]],

Cell[TextData[{
 "We also compute the sum of every other term from 0 to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", "n"}], TraditionalForm]],ExpressionUUID->
  "8a1dedc1-1fbd-44a8-9f7d-88f8b2ac5c5e"],
 " in the general geometric series."
}], "Text",ExpressionUUID->"56519dd9-282e-43e6-9f96-bdccab42a0c3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   RowBox[{"a", "*", 
    RowBox[{"r", "^", "i"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "0", ",", 
     RowBox[{"2", "n"}], ",", "2"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[330]:=",ExpressionUUID->"c785928c-05aa-48b7-ace0-c53cb80853a4"],

Cell[BoxData[
 FractionBox[
  RowBox[{"a", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox["r", 
      RowBox[{"2", "+", 
       RowBox[{"2", " ", 
        RowBox[{"Floor", "[", "n", "]"}]}]}]]}], ")"}]}], 
  RowBox[{
   RowBox[{"-", "1"}], "+", 
   SuperscriptBox["r", "2"]}]]], "Output",
 CellLabel->
  "Out[330]=",ExpressionUUID->"746735ab-2be9-4564-ab09-8ce7eb0b1a59"]
}, Open  ]],

Cell[TextData[{
 "You are also allowed to use the symbol ",
 StyleBox[ButtonBox["Infinity",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Infinity"], "FunctionLink"],
 " to compute infinite sums. The following computes ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{" ", 
      RowBox[{"i", "=", "1"}]}], 
     RowBox[{" ", "\[Infinity]"}]], 
    RowBox[{"i", " ", 
     SuperscriptBox["x", 
      RowBox[{"i", "-", "1"}]]}]}], TraditionalForm]],ExpressionUUID->
  "82b18c96-9ee8-48ff-9cfa-e006a175ada2"],
 "."
}], "Text",ExpressionUUID->"228faf9a-5ca7-4ae9-bf90-71e28ef265a7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   RowBox[{"i", "*", 
    RowBox[{"x", "^", 
     RowBox[{"(", 
      RowBox[{"i", "-", "1"}], ")"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "Infinity"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[331]:=",ExpressionUUID->"73028345-4f97-4837-bda6-19b4d9f7d273"],

Cell[BoxData[
 FractionBox["1", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", "x"}], ")"}], "2"]]], "Output",
 CellLabel->
  "Out[331]=",ExpressionUUID->"28fb8851-3f08-4ac3-9f51-a574e25919b3"]
}, Open  ]],

Cell["\<\
You can confirm that these results match the formulas given in Table 2 of \
Section 2.4.\
\>", "Text",ExpressionUUID->"42c5e4c3-bb75-46cf-b2ad-0a5d9c8443a2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.5 Cardinality of Sets", "Section",
 PageBreakWithin->False,
 CellTags->"Section5",ExpressionUUID->"c0f7c242-bae3-4501-b997-15827f80acf5"],

Cell["\<\
In this section, we will explore the countability of the positive rational \
numbers. In Example 4 of Section 2.5 of the text, it is shown that the \
positive rationals are countable by describing how to list them all. Here, we \
will use the Wolfram Language to implement this listing algorithm. We will \
also consider the following two questions. First, given a positive rational \
number, what is its position in the list? Second, given a positive integer, \
what rational number is located at that position within the list?\
\>", "Text",
 PageBreakAbove->False,
 PageBreakWithin->
  False,ExpressionUUID->"bf96381f-b80a-41be-b3cf-33c175c0023a"],

Cell[TextData[{
 "We begin by reviewing the description in Example 4. The first element of \
the list is the rational number ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", "1"], TraditionalForm]],ExpressionUUID->
  "6fc5ec1a-778c-4846-bb68-a81c73642e94"],
 ". We next list the positive rationals ",
 Cell[BoxData[
  FormBox[
   FractionBox["p", "q"], TraditionalForm]],ExpressionUUID->
  "2b325630-9f14-4e92-8ad9-f631157bbd3b"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"p", "+", "q"}], "=", "3"}], TraditionalForm]],ExpressionUUID->
  "6eaa23a7-8aa6-41d5-ae5d-9bb11b77d039"],
 ". Then come the rationals with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"p", "+", "q"}], "=", "4"}], TraditionalForm]],ExpressionUUID->
  "7b71923d-b22f-48bd-b038-8b397df1bb7b"],
 ", excluding ",
 Cell[BoxData[
  FormBox[
   FractionBox["2", "2"], TraditionalForm]],ExpressionUUID->
  "b9f16e6e-a81f-4c35-a25b-b8d804c1f5cd"],
 ", which is already in the list, being equivalent to ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", "1"], TraditionalForm]],ExpressionUUID->
  "9b6f72f2-b9a8-4b37-a43d-bea09d8d69d1"],
 ". This continues for each ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "278d0b74-4aaf-4982-bba9-7735e0150591"],
 ": we list the fractions ",
 Cell[BoxData[
  FormBox[
   FractionBox["p", "q"], TraditionalForm]],ExpressionUUID->
  "bcd23345-eb55-4d5d-b1d9-86a6c5db8388"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"p", "+", "q"}], "=", "n"}], TraditionalForm]],ExpressionUUID->
  "708eec56-d981-4d3c-aab1-34c41c96eb7c"],
 ", excluding those equivalent to fractions already in the list."
}], "Text",ExpressionUUID->"9c544801-8c0a-499c-b451-7c140ddf768e"],

Cell[TextData[{
 "In our function, we refer to ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "5fa82d03-5d94-4b0b-baad-eb30df1edf3d"],
 " as the stage, so that in stage 5, for example, we are listing the \
fractions ",
 Cell[BoxData[
  FormBox[
   FractionBox["p", "q"], TraditionalForm]],ExpressionUUID->
  "0b409e6f-6678-4cf8-8100-08aabdcc7fee"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"p", "+", "q"}], "=", "5"}], TraditionalForm]],ExpressionUUID->
  "ddbf0868-d570-4769-84c6-52ff73e45ba3"],
 ". The stage ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "d8659d50-58c5-4522-baff-3e53e5ba17cb"],
 " will range from ",
 Cell[BoxData[
  FormBox["2", TraditionalForm]],ExpressionUUID->
  "e1fd0b71-5793-405d-99e9-450e9cf2d35b"],
 " up to some maximum value. This maximum value of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "ed7fa2f6-85a2-415a-8a3e-6f88c504b7fe"],
 " will be the parameter to the function. We will implement this as a loop \
with index variable ",
 StyleBox["n", "Code"],
 "."
}], "Text",ExpressionUUID->"31175680-17d4-41c6-bb0b-bd14325f367d"],

Cell[TextData[{
 "Within each stage, that is, within the loop, we need to generate the \
rational numbers ",
 Cell[BoxData[
  FormBox[
   FractionBox["p", "q"], TraditionalForm]],ExpressionUUID->
  "6a725159-4df0-41a1-9978-333e718c6fac"],
 " and add them to the list, provided they are not already in it. We can \
rewrite ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"p", "+", "q"}], "=", "n"}], TraditionalForm]],ExpressionUUID->
  "91342683-b73a-457f-8cc1-7c64c4e27e52"],
 " as ",
 Cell[BoxData[
  FormBox[
   RowBox[{"p", "=", 
    RowBox[{"n", "-", "q"}]}], TraditionalForm]],ExpressionUUID->
  "9c72d9c8-56fd-4aa2-85fe-a01855dee597"],
 ". By allowing ",
 Cell[BoxData[
  FormBox["q", TraditionalForm]],ExpressionUUID->
  "74132e64-575a-45a0-8ccd-33aa01d58ac2"],
 " to range from ",
 Cell[BoxData[
  FormBox["1", TraditionalForm]],ExpressionUUID->
  "004765f9-7918-462b-bffa-8ed452d8c9ab"],
 " to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "263d9a6d-6a1b-4a3d-afb5-30788cf627ee"],
 " and calculating ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "9e348237-fcc2-48ae-98ed-befbb3604395"],
 ", we will produce all the potential rationals in stage ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "e61b0a3d-0dc8-4791-9156-885c19436871"],
 ". The ",
 StyleBox[ButtonBox["FreeQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FreeQ"], "FunctionLink"],
 " function, which has the same syntax but opposite meaning of the ",
 StyleBox[ButtonBox["MemberQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MemberQ"], "FunctionLink"],
 " function discussed in Section 2.1 in relation to sets, will be used to \
avoid duplicates. Thus, for each ",
 Cell[BoxData[
  FormBox["q", TraditionalForm]],ExpressionUUID->
  "f3c0f5a0-a1ef-496e-997d-0a05a8e9c7ea"],
 " from ",
 Cell[BoxData[
  FormBox["1", TraditionalForm]],ExpressionUUID->
  "2a622373-1075-46ac-84f6-8eee31169195"],
 " to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "99ed6546-7494-4e4b-ad16-e170d0b0410a"],
 ", we will form the fraction ",
 Cell[BoxData[
  FormBox[
   FractionBox["p", "q"], TraditionalForm]],ExpressionUUID->
  "f8b03446-416d-4c4a-9d02-98b9bb388797"],
 " (with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"p", "=", 
    RowBox[{"n", "-", "q"}]}], TraditionalForm]],ExpressionUUID->
  "19059e67-0eef-418b-8117-1b68332975bf"],
 "), use ",
 StyleBox[ButtonBox["FreeQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FreeQ"], "FunctionLink"],
 " to test whether this is already in our list of positive rationals, and, if \
not, add it to the list using ",
 StyleBox[ButtonBox["AppendTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AppendTo"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"7a467eaa-3c3c-4128-8630-7b3698cf30a8"],

Cell["Here is the complete function.", "Text",ExpressionUUID->"8f89512a-9ab6-441a-8fe9-d37d28a9d66c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"listRationals", "[", "max_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"L", "=", 
       RowBox[{"{", "}"}]}], ",", "n", ",", "p", ",", "q"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"n", "=", "2"}], ",", 
       RowBox[{"n", "\[LessEqual]", "max"}], ",", 
       RowBox[{"n", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"q", "=", "1"}], ",", 
         RowBox[{"q", "\[LessEqual]", 
          RowBox[{"n", "-", "1"}]}], ",", 
         RowBox[{"q", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"p", "=", 
           RowBox[{"n", "-", "q"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{"L", ",", 
              RowBox[{"p", "/", "q"}]}], "]"}], ",", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"L", ",", 
              RowBox[{"p", "/", "q"}]}], "]"}]}], "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "L"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->
  "In[332]:=",ExpressionUUID->"863003f0-3ee1-4071-b7f6-696557e1c07b"],

Cell[TextData[{
 "Applying this function with argument ",
 Cell[BoxData[
  FormBox["6", TraditionalForm]],ExpressionUUID->
  "5b3bdf05-b40e-4252-8d4f-08877eb0dba9"],
 ", we obtain the list of rationals through stage ",
 Cell[BoxData[
  FormBox["6", TraditionalForm]],ExpressionUUID->
  "033bddb8-915f-414b-aa96-5f7601c0ef0d"],
 "."
}], "Text",ExpressionUUID->"ee905e2a-e991-4597-a531-cd3916ff09df"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listRationals", "[", "6", "]"}]], "Input",
 CellLabel->
  "In[333]:=",ExpressionUUID->"ac94bab5-62ad-46f2-bb3a-b9cec29a15ac"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", 
   FractionBox["1", "2"], ",", "3", ",", 
   FractionBox["1", "3"], ",", "4", ",", 
   FractionBox["3", "2"], ",", 
   FractionBox["2", "3"], ",", 
   FractionBox["1", "4"], ",", "5", ",", 
   FractionBox["1", "5"]}], "}"}]], "Output",
 CellLabel->
  "Out[333]=",ExpressionUUID->"be9c04bc-6379-4c73-9dab-52e86cabc0de"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Finding the Position Given a Positive Rational", "Subsection",
 CellTags->"Section5a",ExpressionUUID->"9348afc2-1dcc-40c9-a0e7-5f3b73b7409c"],

Cell[TextData[{
 "Suppose we want to determine the position of a particular number within the \
list. Consider, for example, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"29", "/", "35"}], TraditionalForm]],ExpressionUUID->
  "8483d157-785d-4065-99a7-47c37cbaac07"],
 ". Since the fraction is in lowest terms and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"29", "+", "35"}], "=", "64"}], TraditionalForm]],ExpressionUUID->
  "3c2c5d51-0e73-4837-b441-ffd3b93c30f4"],
 ", we know that this fraction would first appear in stage 64. Therefore, we \
compute the list up to stage 64."
}], "Text",
 PageBreakAbove->False,
 PageBreakWithin->
  False,ExpressionUUID->"ab44dd2c-e3de-497b-9dfb-b8c1e5ad926b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ratsTo64", "=", 
   RowBox[{"listRationals", "[", "64", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[334]:=",ExpressionUUID->"38b5152e-b8d4-4960-beb5-11061e255e6d"],

Cell["We suppress the output because this is a long list:", "Text",ExpressionUUID->"97525960-2fb2-4a68-96a0-49cc349a0072"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "ratsTo64", "]"}]], "Input",
 CellLabel->
  "In[335]:=",ExpressionUUID->"771c091f-ff46-4644-823f-ea69bc426bbb"],

Cell[BoxData["1259"], "Output",
 CellLabel->
  "Out[335]=",ExpressionUUID->"3ed47b32-9a91-4620-9714-0cc581187916"]
}, Open  ]],

Cell[TextData[{
 "Now, we work backward from the end of the list until we find the desired \
fraction. A simple loop will help with this. Recall that the third argument \
to ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " allows us to specify how the index variable is changed each time. The \
decrement operator (",
 StyleBox["--", "Code"],
 ") causes the loop to step backward by 1 in each iteration. Once we find the \
location of the desired fraction, we want the loop to end and output the \
location of the fraction. We do this using a ",
 StyleBox[ButtonBox["Throw",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Throw"], "FunctionLink"],
 " and wrapping the entire loop in a ",
 StyleBox[ButtonBox["Catch",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Catch"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"0e1538e7-bf4e-4dc8-8624-5455147c79c9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Catch", "[", "\[IndentingNewLine]", 
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{"i", "=", "1259"}], ",", 
    RowBox[{"i", "\[GreaterEqual]", "1"}], ",", 
    RowBox[{"i", "--"}], ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ratsTo64", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "\[Equal]", 
       RowBox[{"29", "/", "35"}]}], ",", 
      RowBox[{"Throw", "[", "i", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
   "]"}], "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[336]:=",ExpressionUUID->"4eaa1db7-9930-4c69-a70b-35b7167313cd"],

Cell[BoxData["1245"], "Output",
 CellLabel->
  "Out[336]=",ExpressionUUID->"ffcc167d-8323-4008-90b8-6629626abcff"]
}, Open  ]],

Cell[TextData[{
 "We can make this process into a function. Given a fraction, the ",
 StyleBox[ButtonBox["Numerator",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Numerator"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Denominator",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Denominator"], "FunctionLink"],
 " commands will extract the numerator and denominator, respectively."
}], "Text",ExpressionUUID->"947941c7-8257-4e4e-9e8e-6bf0f7559d1c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Numerator", "[", 
  RowBox[{"29", "/", "35"}], "]"}]], "Input",
 CellLabel->
  "In[337]:=",ExpressionUUID->"8e6b01b8-82ca-4830-8455-dfb0a378748c"],

Cell[BoxData["29"], "Output",
 CellLabel->
  "Out[337]=",ExpressionUUID->"5c48c592-34dc-4aa7-9053-8fd5ed61dd62"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Denominator", "[", 
  RowBox[{"29", "/", "35"}], "]"}]], "Input",
 CellLabel->
  "In[338]:=",ExpressionUUID->"24c81e54-afff-4b76-976c-58e02bff57c5"],

Cell[BoxData["35"], "Output",
 CellLabel->
  "Out[338]=",ExpressionUUID->"45c0f8d6-9bb4-4b91-9665-8c6eb6184d29"]
}, Open  ]],

Cell[TextData[{
 "Our function will accept a rational number as its argument. For the sake of \
robustness, we will ensure that the input is rational by insisting that the \
argument has head ",
 StyleBox["Rational", "Code"],
 ", and we will also check that it is positive using a ",
 StyleBox[ButtonBox["Condition",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Condition"], "FunctionLink"],
 " (",
 StyleBox["/;", "Code"],
 ")."
}], "Text",ExpressionUUID->"68b03294-46b1-4bbe-882f-f71744200f03"],

Cell[TextData[{
 "After confirming that the input is positive, we sum the results of ",
 StyleBox[ButtonBox["Numerator",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Numerator"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Denominator",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Denominator"], "FunctionLink"],
 " to determine the stage. "
}], "Text",ExpressionUUID->"c21ca882-74a1-499a-b98b-5c94a334dd2d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"locateRational", "[", "r_Rational", "]"}], "/;", 
   RowBox[{"r", ">", "0"}]}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"stage", ",", "L", ",", "i"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"stage", "=", 
      RowBox[{
       RowBox[{"Numerator", "[", "r", "]"}], "+", 
       RowBox[{"Denominator", "[", "r", "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"L", "=", 
      RowBox[{"listRationals", "[", "stage", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", 
         RowBox[{"Length", "[", "L", "]"}]}], ",", 
        RowBox[{"i", "\[GreaterEqual]", "1"}], ",", 
        RowBox[{"i", "--"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"L", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "\[Equal]", "r"}], ",", 
          RowBox[{"Throw", "[", "i", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
       "]"}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[339]:=",ExpressionUUID->"0a7d0e4f-ec95-49c3-b662-23d08048d155"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"locateRational", "[", 
  RowBox[{"75", "/", "197"}], "]"}]], "Input",
 CellLabel->
  "In[340]:=",ExpressionUUID->"489716ea-6334-49f8-8f42-77f06334ce8c"],

Cell[BoxData["22566"], "Output",
 CellLabel->
  "Out[340]=",ExpressionUUID->"e1ca41aa-8ac5-401b-a1d6-65119263597e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Finding the Rational in a Given Position", "Subsection",
 CellTags->"Section5b",ExpressionUUID->"ec78782c-5d62-4fb8-89cf-60f490036d6a"],

Cell["\<\
On the other hand, suppose we want to know which fraction is at a particular \
position. For instance, say we want to know which is the 100th fraction \
listed. If we knew which stage of the process would yield a list of at least \
100 rational numbers, we could just generate the list up to that stage. We \
can guess and check until we find a stage that produced a long enough list.\
\>", "Text",ExpressionUUID->"6c5d0a18-398a-4902-8fdd-6f89d4a72bfd"],

Cell[CellGroupData[{

Cell["Putting a Lower Bound on the Number of Stages", "Subsubsection",ExpressionUUID->"ff870c8c-e610-4401-8f45-5c89bbada473"],

Cell[TextData[{
 "We can guide our guesses a bit, however. Remember that at stage 2, the \
process generates one fraction. At stage 3, it generates two fractions. At \
stage 4, it generates three fractions, although one of them is discarded \
because it is a repeat. At stage ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "0d58e9d1-6fa9-4243-8cbd-44f0717ab421"],
 ", the process generates ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "eb840afd-faad-4f24-a323-15069530844b"],
 " rational numbers, some of which may be discarded as repeats. Therefore, we \
know that, after stage ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "f9dc4766-c511-476f-a504-1b8da5bad2b1"],
 " is complete, the number of rational numbers in our list contains ",
 StyleBox["at most",
  FontSlant->"Italic"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{" ", 
       RowBox[{"k", "=", "2"}]}], 
      RowBox[{" ", "n"}]], "k"}], "-", "1"}], TraditionalForm]],
  ExpressionUUID->"b2cfd59e-5f86-4f9e-ab20-af84c925c4b8"],
 " rational numbers. We can use the ",
 StyleBox[ButtonBox["Sum",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sum"], "FunctionLink"],
 " function described in the previous section to find a formula for this \
summation."
}], "Text",ExpressionUUID->"603b47d2-76c2-43a6-9c19-541d205d38b5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   RowBox[{"k", "-", "1"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "2", ",", "n"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[341]:=",ExpressionUUID->"95b4c873-17fd-4281-9569-18277401c72a"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "2"], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "n"}], "+", 
    SuperscriptBox["n", "2"]}], ")"}]}]], "Output",
 CellLabel->
  "Out[341]=",ExpressionUUID->"a381f8c0-76e4-4dd5-b428-b47d0009b1b2"]
}, Open  ]],

Cell[TextData[{
 "In other words, the number of rational numbers in the list produced by ",
 StyleBox["listRationals", "Code"],
 " at the conclusion of stage ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "e7fb4ce2-f212-4a8a-b2fd-f18675a1d4d2"],
 " is at most ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{
     SuperscriptBox["n", "2"], "-", "n"}], "2"], TraditionalForm]],
  ExpressionUUID->"80cf04c0-b2f1-4d21-92f8-805ec36b7d31"],
 ". Define ",
 Cell[BoxData[
  FormBox[
   RowBox[{"F", "(", "n", ")"}], TraditionalForm]],ExpressionUUID->
  "728b0ec1-067a-40f0-a05c-ec2309224eb9"],
 " to be the number of positive rational numbers produced by the ",
 StyleBox["listRationals", "Code"],
 " algorithm at the conclusion of stage ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "fe0095a6-ed36-4617-8e2e-6594de1a4cab"],
 ". Equivalently, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"F", "(", "n", ")"}], TraditionalForm]],ExpressionUUID->
  "a06b7815-8f96-48e1-959f-fd469015461a"],
 " is the number of distinct positive rational numbers ",
 Cell[BoxData[
  FormBox[
   FractionBox["p", "q"], TraditionalForm]],ExpressionUUID->
  "58525b8b-e5e4-4bc2-82d5-1c9a959ccbff"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"p", "+", "q"}], "\[LessEqual]", "n"}], TraditionalForm]],
  ExpressionUUID->"86508143-e759-4960-8ce2-86940f09d143"],
 ". We have determined that"
}], "Text",ExpressionUUID->"3769958d-f5cc-4e8a-8896-f089beca4611"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"F", "(", "n", ")"}], "\[LessEqual]", 
   FractionBox[
    RowBox[{
     SuperscriptBox["n", "2"], "-", "n"}], "2"]}], 
  TraditionalForm]], "Equation",ExpressionUUID->"f573f2c3-7b7c-42c8-9029-\
726a6937c239"],

Cell[TextData[{
 "Now, we return to the question of how many stages we need to compute in \
order to find the 100th rational number. We can restate this as follows: find \
",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "e0830c30-2846-4b17-8ef1-e0a7b1ee5ba1"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"F", "(", "n", ")"}], "\[GreaterEqual]", "100"}], 
   TraditionalForm]],ExpressionUUID->"98da0d46-a2a3-4b9b-ad99-49a4eb149ed2"],
 ". Combining our inequalities, we have that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{
      SuperscriptBox["n", "2"], "-", "n"}], "2"], "\[GreaterEqual]", "100"}], 
   TraditionalForm]],ExpressionUUID->"0b2e9875-9064-411e-99e8-32efb87c78dd"],
 ". The Wolfram Language\[CloseCurlyQuote]s ",
 StyleBox[ButtonBox["Reduce",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reduce"], "FunctionLink"],
 " command will solve the equation for us. The ",
 StyleBox[ButtonBox["Reduce",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reduce"], "FunctionLink"],
 " function requires two arguments: the expression to be simplified and the \
variable. (Note that since an approximation is sufficient, we apply the \
function ",
 StyleBox[ButtonBox["N",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/N"], "FunctionLink"],
 ", so that the output will be given in decimal form. It is common to apply \
",
 StyleBox[ButtonBox["N",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/N"], "FunctionLink"],
 " in conjunction with the postfix operator (",
 StyleBox["//", "Code"],
 ").)"
}], "Text",ExpressionUUID->"e241ccc3-4836-47f0-aed0-467168f64095"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Reduce", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"n", "^", "2"}], "-", "n"}], ")"}], "/", "2"}], 
     "\[GreaterEqual]", "100"}], ",", "n"}], "]"}], "//", "N"}]], "Input",
 CellLabel->
  "In[342]:=",ExpressionUUID->"72aebbdb-20b3-4ed8-8a6f-30a67b44811b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"n", "\[LessEqual]", 
   RowBox[{"-", "13.650971698084906`"}]}], "||", 
  RowBox[{"n", "\[GreaterEqual]", "14.650971698084906`"}]}]], "Output",
 CellLabel->
  "Out[342]=",ExpressionUUID->"ba262e29-9f6a-4784-8668-66291818a01d"]
}, Open  ]],

Cell[TextData[{
 "This indicates that a stage of 14 is ",
 StyleBox["not enough",
  FontSlant->"Italic"],
 ". However, it gives us a place to start guessing."
}], "Text",ExpressionUUID->"94fd5302-ac4f-43dd-bb41-99a92553b0a2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ratsTo15", "=", 
   RowBox[{"listRationals", "[", "15", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[343]:=",ExpressionUUID->"fe74986d-be2f-462e-b3cd-d7f2a810d75c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "ratsTo15", "]"}]], "Input",
 CellLabel->
  "In[344]:=",ExpressionUUID->"c5c62a16-1298-4a98-a33f-3de2581603e7"],

Cell[BoxData["71"], "Output",
 CellLabel->
  "Out[344]=",ExpressionUUID->"c966e358-2893-4f29-a57a-8da4b873ed67"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ratsto17", "=", 
   RowBox[{"listRationals", "[", "17", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[345]:=",ExpressionUUID->"04e67710-487c-4976-88e2-f52f04cf61c5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "ratsto17", "]"}]], "Input",
 CellLabel->
  "In[346]:=",ExpressionUUID->"231409aa-669d-4179-8f0b-c0f9825d41e2"],

Cell[BoxData["95"], "Output",
 CellLabel->
  "Out[346]=",ExpressionUUID->"f78bf454-2c29-494d-9ec7-12eb1b50b256"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ratsTo18", "=", 
   RowBox[{"listRationals", "[", "18", "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[347]:=",ExpressionUUID->"7ccc63f6-9a83-4470-be8c-ff090b14d4df"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "ratsTo18", "]"}]], "Input",
 CellLabel->
  "In[348]:=",ExpressionUUID->"36d482d5-eb42-4fa7-800b-abc1f3dce775"],

Cell[BoxData["101"], "Output",
 CellLabel->
  "Out[348]=",ExpressionUUID->"7fe99012-cb50-40c0-a1b9-e1515135154b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ratsTo18", "[", 
  RowBox[{"[", "100", "]"}], "]"}]], "Input",
 CellLabel->
  "In[349]:=",ExpressionUUID->"11cf15b2-d918-4db6-a477-6d1a7b2e238c"],

Cell[BoxData[
 FractionBox["5", "13"]], "Output",
 CellLabel->
  "Out[349]=",ExpressionUUID->"b263a820-bbf9-45a6-b91c-413b8d48b5da"]
}, Open  ]],

Cell[TextData[{
 "Thus, the 100th rational, in the order specified by this particular \
algorithm, is ",
 Cell[BoxData[
  FormBox[
   FractionBox["5", "13"], TraditionalForm]],ExpressionUUID->
  "0114d137-f728-49aa-ba3b-97dfa2e9c109"],
 "."
}], "Text",ExpressionUUID->"1d1d9715-0375-4815-922a-f7480a432643"]
}, Open  ]],

Cell[CellGroupData[{

Cell["How Tight is the Bound?", "Subsubsection",ExpressionUUID->"fb913220-f940-4aaf-8c28-4bbea40a09fc"],

Cell[TextData[{
 "We just saw how the formula ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{
     SuperscriptBox["n", "2"], "-", "n"}], "2"], TraditionalForm]],
  ExpressionUUID->"459951b0-82fd-41c4-8211-29492e64695d"],
 " is an upper bound for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"F", "(", "n", ")"}], TraditionalForm]],ExpressionUUID->
  "3029bd8c-a0f7-4ca0-b414-48d3d3fd64ec"],
 ", the number of positive rationals listed by the end of stage ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "41a240f5-0a86-44be-83f7-a13610af062c"],
 ". We conclude this section by exploring how good this bound is. In Section \
2.3, we saw how to use the ",
 StyleBox[ButtonBox["Plot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plot"], "FunctionLink"],
 " function to graph functions. We use that technique to graph the upper \
bound ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{
     SuperscriptBox["n", "2"], "-", "n"}], "2"], TraditionalForm]],
  ExpressionUUID->"7ed6df58-23b5-40d8-b0db-52e056aee688"],
 " from 1 to 100. Recall that the first argument to ",
 StyleBox[ButtonBox["Plot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plot"], "FunctionLink"],
 " is the function and the second is a list consisting of the name of the \
independent variable and the bounds."
}], "Text",ExpressionUUID->"b82e7740-a94f-4414-97b6-444991ed09fd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"boundPlot", "=", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"n", "^", "2"}], "-", "n"}], ")"}], "/", "2"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "1", ",", "100"}], "}"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[350]:=",ExpressionUUID->"9e5ba18f-87c8-483a-af95-f2b647e17228"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwVjHk41IkDhyfkijBuxi2EJtaRlnw/pNYxbtZXYmPVym5YyfFQJEcJRRQ6
nDlKNWYc7SpHShIhCl3YciY5w6L57e+P93mf959XxS/Y5TAXhULJ+I//287f
U5GLMktQKAOHOueZ5qeKEqUOxfzXfFFW73kuEqzhqq0NK7PEoVhmdcbJAkLG
W5ATNTdHhGQmH9sRXEUwrhov9x+bJ5zGYyIofrVE7KDfV6OpeULL06vSPKOe
GHOvH5r7Z4GYfnbU7pRLCyGXNd7v+MsiQd411miwaiXsX4p333m7SJipRF42
cH9GVDv80XS0b4k4yyJ3NXZ3EfE/KRSOPFkmEiysH+rK9hO1iTa5hOUKUf0l
jqK2ZZCYbDmRcb1hhVAdOb7VUOgt4YQXpz3rVon718+mlJoOEYq7Y/16yteI
2dra02OanwiXiNsHdm5bJ3i1zV4wvEeJxJp+l7TCdeKvJsU45I0R0/p6e23y
Nojv5Jp4t/Yk8bf2iFrzeQ7Ba0Rdv1A6Q4RX86aL8FCQ4tf0l57QLHGxl5Zi
bkmBn5mG1nDbLPFYzCb+WgMFCTc3aJfs5wnt9MJQsm4TTtm/PWKTsERY3akL
Sl7aBB51vvu/eX0jfDo6A2sNuHAwdaSeYbxMZAj+6yfB5EIEteht4PIKsZLk
4tpdzo2gRefo5dJ1gloa4MgZ40aY57yv3bUNQvfJKTv6Nh7YOlmsHc7+TvzC
fXtvaiEPmFFLRRE2FLTGchta521GRXKtQoU3F7IiqyWazvNBwvFyb+UwLwS9
CyS1u/jAp15vdSqJD6ctUqWyqPzIoUy3J9P5ESToLxOQy4/s7j+l9iYKwPqa
OE20TACLz4VvHbAXwnpjqNqhR1ugndMywqsuhtASH/X2zULIJGotmWfFMHnW
dpuhjRA6puh3T8yI4bWzqiZ/txBuMVglbg+pYH7s0Wa+F4ac+SbRXwMk4M+n
/wNlVQTt/Y1DzQvS+HIiXdZIURTqD6iTOoEy0ArgkZsiRGFb8nm9akQG+YxZ
ObczohCM22lF7ZNFqmQbTUtQDGaHOU5qrfI4Uhah3C1NxbGxxl+Th5Qg9/y1
prKBBPj/Gam9fVwdckUbrrkuEkiYdjtypl4d8lHqcdRQCVyIEZh4zb0NNM3Q
AZ4qCdjs2OU3l70NSmeEz03SJeHVU6K/2KgBdVOrKZa2FEbVnpnp62wH/XZV
5T5VGeTNG/Gc86GDHj8w0GAhA+bdwbU3NXTs9OTwmPjKgJxteFIuvBN6fPbe
2gUysOZx6K5r2AmDXyeERRRl4b+LGHa+pAcTeaXgAVk5SGhmJQ3y/oC951P1
fxejwVa++7YHzQiVV5ed9uvR8LJVSbrewQhSlX4hKo406Oh94D5w2ggTHSb3
+lNp2GdW5ms7boTUraO6VvwKUP4xkL5UY4y+jD1aChwFxHSwhY77mMA/Z0ax
a1oJ7Xbu70TemeKRi1aS7CcV+LyZ+Dj22AIODPH+V4sqGPYJMXCYsMCbfd81
MzerouBYauLAFkvMmfQ9E9RURc/2eP2fXS2hrBQnvH5UFUIK/uVLHy1x8nN/
1oevqng1s4n6ZIsVTBKSi4vX1NBC3Oy7eWI/7tWMNe0Q1wDXlRTpYJYdbqjc
0uxQ1YCq0mJ28Vs7pKYdSw/8QQP+/vmZ33gYCDi86FXmrAEXjXreFQ8GVCW5
lpUvauBTMt+bAA4Dl8MUdkgIa6KleUGXy80BMQZuuf/yasGEX/iRQIoTbKqa
/3z673Z0CnVFD0S4gsm1GixmTEfbw9dLB4oOIKPJ63MHXR8TW5bPifj6Qpnx
bLBX0QC55nz2iWWHcZlrdIZlYgQBnYQQ8ZeB8Nss0thH34WHLwdqlKghqL4R
0yIpvxtp8Uq4OBmKab+cGbq+KYI/67g2W4Qj+vijvhS1PSiW5n0Snh+F2bt5
Iw0EgRfPZd9wpZxEOLzEBCoAg9DGipbeOOQ7hoi4FVhA+oLFpW/v42Ea9k75
fKUlhkNG/WWNE8HV2HXhY+le0BKuSs8nJmOPkhxVq9YK6xXMBx3bU1Bvm0SP
adqH2L87muw/pcL/WlT53P39iI4MbtW+cAFx3I+NXFt/wsQxnojnthl4ejFb
+XWzNdb+GVp3fJwJ58mzNwPu26Cu9FVWwL4sOHj07hlvsQXjpnXk8nI2wj+X
GCQ/tMPgppsZuH4F1OxOM/EOBg4dfPqSNyIXcwIyw3df2YNfIUjxnOdVrJVM
Dv/e6YBrL7r2yetcR6Q7dUnijSPqRXISZgzzISrlyw4OdMKUuQB7NbsAm8dt
/jo46gTpUc7XtUuFqLb80NYY6AwznVfNi/eKEKlvnGww7owbsQ8yHjYV49ut
3Y4KQS4o/WjqxJktwbk6Sqv0tAvEuD68VZYsRUPFgEDeb664smBltdW0DJUa
Bz0yv7jiyBy7nRFfDqZxsevVQDcUZjUbFNRXIKgn21Nu3g1H03p626Rvo9M5
V1clwh3nLGnpzuGVsDx86K7JgjvseE7qyz65gxDu3t2tUT9j/o+hVzkm91Bt
KBDmv/wzBE3zZ9j2TOTaOUWnhHogv8pl1YvDhMkXy1SNFQ8I6BqG2j2uwrTK
ql1vGImg5rqOjVgWXniUfeeEkyiqWkhknGGBmeZepRtF4qvOYMrVJBbCVquk
kk6SaG8oiPgxjYX17sARkyQSOd6q76PzWBCOexd+4wqJ5Niv/UI1LNA/NBYe
/ZvEHbeq1N+mWBCVCHK7/IDEo2TF+sYvLMzb0PhaGv77WxkZycyxUFsT+Qet
hcRF71+E2pdZME/T39X1nMRHvtL9+pvZcDAr7jB8T+IdNqaEldnQC3WO9R0i
4S/J3Reoxga1nKOfPkKCK4zF36bBxmvxg1fGR0nEdwm7n9nBhs9nCb+8GRK5
nNqojR/ZgEqLxNNZEgPqAk0HzdlQ9fjz6cI8iZ19PC4PLNgYe9Spa79MQqVn
hYyxZqNtJXooapXEA8W5znd2bNyia2eWrpEI/paZvseRjVT/AaveDRK7yQ95
N1zYCM5LWuZwSMhb9c5z3Nn4H3NAGOM=
       "]]},
     Annotation[#, "Charting`Private`Tag$2791#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{1, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{1, 100}, {0., 4949.99979896939}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->"Out[350]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
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
\
\>"],ExpressionUUID->"1e37c6f7-487b-4a15-8448-80cbd6afe790"]
}, Open  ]],

Cell[TextData[{
 "Note that we stored the plot as the symbol ",
 StyleBox["boundPlot", "Code"],
 " so as to be able to reuse it later."
}], "Text",ExpressionUUID->"fe6e0611-ff74-49d6-9e98-a26b71b662b7"],

Cell[TextData[{
 "To find the actual values of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"F", "(", "n", ")"}], TraditionalForm]],ExpressionUUID->
  "5e8a2b94-bf7f-42c7-8e8a-da2a7d2f100c"],
 ", we need to find the size of the list returned by ",
 StyleBox["listRationals", "Code"],
 " applied to ",
 StyleBox["n", "Code"],
 ". In other words, we apply ",
 StyleBox["Length", "Code"],
 " to the result of ",
 StyleBox["listRationals[n]", "Code"],
 ". We use ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " to form the list of these values with ",
 StyleBox["n", "Code"],
 " ranging from 1 to 100."
}], "Text",ExpressionUUID->"a0850186-35d7-459b-b539-ac060a2cad9d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataTable", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"listRationals", "[", "n", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "100"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[351]:=",ExpressionUUID->"a952ed4d-47d9-4c21-855d-ec317ea1b1af"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["ListPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ListPlot"], "FunctionLink"],
 " function, applied to a list of values, will interpret the members of the \
list as the ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "716a66a1-36d5-4d37-ab86-96d0d9c58aa5"],
 "-coordinates of points whose ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "f068c46f-fc5c-45ae-b649-40278950b794"],
 "-coordinates are the index of the number, which in this case is the value \
of ",
 StyleBox["n", "Code"],
 ". We make this graph red using ",
 StyleBox[ButtonBox["PlotStyle",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PlotStyle"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"23aa0b18-288a-4fb7-95e1-981d7a5bdb0a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataPlot", "=", 
  RowBox[{"ListPlot", "[", 
   RowBox[{"dataTable", ",", 
    RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[352]:=",ExpressionUUID->"fe9049c9-c3fc-409a-b812-91be1b84f553"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[1, 0, 0], PointSize[0.009166666666666668], AbsoluteThickness[
     1.6], PointBox[CompressedData["
1:eJxd1DtoE3EABvDDycGhg0iQDlWKFCmhatX47Km11netVeug1WJFStCKWkVq
OXxGrFrfVYPGZ6F0cHAQkZJBnBwcHR1FRDJ0FFH5/zKkgfDxy5cvXJK7m9N9
rL1nWhRFh/49/2d4lJqiykdc+fr0uDKr5MwpOVem5DxZLRfIGrl4ym6FrJVN
lZ+TNHMdt/B83sL1vJ3TIYs7uIF3Vh5XcQ8vDBnv5UX6fdzIXZXf48BBXhKy
0M1L9T2c4cO8LOS3I7xc38t+l0KWV4asOcqrQn7p49Uh246z37HhBMd8MmTC
faf0a7hfz6XT+rUh35zRc+msfl3IqgE9D5/T+x+HB/WcS/TrQ37nhDPn9f73
r1w+D0Yu6DeEbL2o53eX9K0+77Kec1f0G0PW5fRlX9VvcnyccO6afnPI1JCe
O6/rnaepG3rO3NRvDTljWM+THG0L2XhLz7W39c77PJevg/o7+raQ4xxz9q73
8wcu8sd79q6j5vv2PMkJdzyw5+yIfXvIzxzzz4f2PPDInqsf27tuxznmfN6e
f3P5Om98Yt8R8i3HPPTUnmcV7Pk9R7tC/uCYe5/Z8wQXOf3cfnfIQY45/cKe
93ORf3HkPtXy0p4nOOHZr+x5jKNOx88xj7225z9c5P5Re/fFT6PxX/5HxGw=

      "]]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 100.}, {0, 3043.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->
  "Out[352]=",ExpressionUUID->"1abdac47-2527-472f-90b7-d2871b797f22"]
}, Open  ]],

Cell[TextData[{
 "We can combine the two graphs using the ",
 StyleBox[ButtonBox["Show",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Show"], "FunctionLink"],
 " function. The ",
 StyleBox[ButtonBox["Show",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Show"], "FunctionLink"],
 " function allows you to combine graphics objects into one. We ensure that \
the entirety of both graphs is displayed by setting the option ",
 StyleBox[ButtonBox["PlotRange",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PlotRange"], "FunctionLink"],
 " to ",
 StyleBox["All", "Code"],
 "."
}], "Text",ExpressionUUID->"4dabc582-16e5-4cb7-a39f-c7e45413de64"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"boundPlot", ",", "dataPlot", ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellLabel->
  "In[353]:=",ExpressionUUID->"c1923220-846b-45ca-ab4b-2c2baf2569ba"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1: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
N1zYCM5LWuZwSMhb9c5z3Nn4H3NAGOM=
        "]]},
      Annotation[#, "Charting`Private`Tag$2791#1"]& ]}, {}, {}}, {{}, {{}, 
     {RGBColor[1, 0, 0], PointSize[0.009166666666666668], AbsoluteThickness[
      1.6], PointBox[CompressedData["
1:eJxd1DtoE3EABvDDycGhg0iQDlWKFCmhatX47Km11netVeug1WJFStCKWkVq
OXxGrFrfVYPGZ6F0cHAQkZJBnBwcHR1FRDJ0FFH5/zKkgfDxy5cvXJK7m9N9
rL1nWhRFh/49/2d4lJqiykdc+fr0uDKr5MwpOVem5DxZLRfIGrl4ym6FrJVN
lZ+TNHMdt/B83sL1vJ3TIYs7uIF3Vh5XcQ8vDBnv5UX6fdzIXZXf48BBXhKy
0M1L9T2c4cO8LOS3I7xc38t+l0KWV4asOcqrQn7p49Uh246z37HhBMd8MmTC
faf0a7hfz6XT+rUh35zRc+msfl3IqgE9D5/T+x+HB/WcS/TrQ37nhDPn9f73
r1w+D0Yu6DeEbL2o53eX9K0+77Kec1f0G0PW5fRlX9VvcnyccO6afnPI1JCe
O6/rnaepG3rO3NRvDTljWM+THG0L2XhLz7W39c77PJevg/o7+raQ4xxz9q73
8wcu8sd79q6j5vv2PMkJdzyw5+yIfXvIzxzzz4f2PPDInqsf27tuxznmfN6e
f3P5Om98Yt8R8i3HPPTUnmcV7Pk9R7tC/uCYe5/Z8wQXOf3cfnfIQY45/cKe
93ORf3HkPtXy0p4nOOHZr+x5jKNOx88xj7225z9c5P5Re/fFT6PxX/5HxGw=

       "]]}, {}}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{1, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->All,
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->
  "Out[353]=",ExpressionUUID->"31e3a84f-7b33-4769-8631-ef389bdeb9aa"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.6 Matrices", "Section",
 CellTags->"Section6",ExpressionUUID->"e5eff648-0a7f-4d02-91cc-bf466d1a7ff3"],

Cell["\<\
The Wolfram Language provides extensive support for calculating with \
matrices. We begin this section by describing a variety of tools for \
constructing matrices in the Wolfram Language. Then, we will consider matrix \
arithmetic and operations on zero\[Dash]one matrices.\
\>", "Text",ExpressionUUID->"e2c3a8dd-2406-45c1-a1e1-9bf75bc1cabc"],

Cell[CellGroupData[{

Cell["Constructing Matrices", "Subsection",
 CellTags->"Section6a",ExpressionUUID->"f96f17d0-bf51-4701-a9c7-8c955955b68e"],

Cell["\<\
In the Wolfram Language, matrices are represented as lists of lists, with the \
inner lists corresponding to the rows of the matrix. Consequently, the \
methods for working with lists apply also to matrices.\
\>", "Text",
 PageBreakAbove->False,
 PageBreakWithin->
  False,ExpressionUUID->"0fdf74a1-46ab-4e0f-b3b2-8ee505598397"],

Cell[CellGroupData[{

Cell["Specifying Matrices by Listing the Rows", "Subsubsection",ExpressionUUID->"c281f5ba-5310-4e1f-baee-28c3899ecb5b"],

Cell["\<\
The simplest way to create a matrix is to explicitly enter the values. The \
matrix is represented as a list of lists, with the first sublist consisting \
of the entries of the first row, the second sublist the second row, and so on.\
\>", "Text",ExpressionUUID->"4a468e93-b2b9-4f68-a668-a9236a73d649"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m1", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[354]:=",ExpressionUUID->"aa91e563-5432-4d10-8315-60adccf4c090"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[354]=",ExpressionUUID->"0e6eddd1-e738-451a-b2c4-e0209ac460d6"]
}, Open  ]],

Cell[TextData[{
 "To have ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " display the result in the typical format of a rectangular matrix, apply \
the function ",
 StyleBox[ButtonBox["MatrixForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MatrixForm"], "FunctionLink"],
 ". This is often done in conjunction with the postfix operator (",
 StyleBox["//", "Code"],
 "). "
}], "Text",ExpressionUUID->"befc4851-84c7-4241-b0ff-7a717d09494e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m1", "//", "MatrixForm"}]], "Input",
 CellLabel->
  "In[355]:=",ExpressionUUID->"4490d6a6-0427-4252-8bf8-372175643821"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "2", "3"},
     {"4", "5", "6"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[355]//MatrixForm=",ExpressionUUID->"a6effe86-89d1-4206-9494-\
c6f1605d8626"]
}, Open  ]],

Cell[TextData[{
 "Be cautious, however, in using ",
 StyleBox[ButtonBox["MatrixForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MatrixForm"], "FunctionLink"],
 " in conjunction with assignment. If you were to include the application of ",
 StyleBox[ButtonBox["MatrixForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MatrixForm"], "FunctionLink"],
 " in the assignment of ",
 StyleBox["m1", "Code"],
 " above, then the ",
 StyleBox[ButtonBox["MatrixForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MatrixForm"], "FunctionLink"],
 " head would be permanently associated with the symbol and other functions \
would not behave as expected."
}], "Text",ExpressionUUID->"d2ffa87b-cfe2-4cc8-9d28-ee6875eb83bc"],

Cell[TextData[{
 "Using ",
 StyleBox[ButtonBox["Partition",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Partition"], "FunctionLink"],
 ", you can enter the entries of the matrix in a single list and have ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " break it into rows of a size you specify. For example, the following \
creates the same matrix as ",
 StyleBox["m1", "Code"],
 "."
}], "Text",ExpressionUUID->"e3161930-3595-4099-9c39-ce02ab870144"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m2", "=", 
  RowBox[{"Partition", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
    ",", "3"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[356]:=",ExpressionUUID->"f38630f6-3850-414c-8cac-3b1372832c1f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[356]=",ExpressionUUID->"5a5e43f7-4b39-4f80-9047-49f3d8cfecc8"]
}, Open  ]],

Cell[TextData[{
 "The first argument is the list of all the entries in the matrix, from top \
left to bottom right. The second argument is the number of columns, that is, \
the number of elements in each row. Note that you can use ",
 StyleBox[ButtonBox["Equal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equal"], "FunctionLink"],
 " (",
 StyleBox["==", "Code"],
 ") to compare matrices, which confirms that these two matrices are identical."
}], "Text",ExpressionUUID->"921dec2c-7a5f-469d-9617-d8f6dfb0ed00"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m1", "\[Equal]", "m2"}]], "Input",
 CellLabel->
  "In[357]:=",ExpressionUUID->"9b671795-bdd8-406d-bfc4-43d5503efefe"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[357]=",ExpressionUUID->"86140076-56d4-4328-b420-c78bcde5c5f6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Creating Matrices with ",
 StyleBox["Table", "Code"]
}], "Subsubsection",ExpressionUUID->"070b3d16-1715-4156-b923-986822b67a45"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " function can be used to create matrices. The first argument to ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " will involve two variables, and there will be two table variable \
specifications, with the first associated to the columns and the second to \
the rows."
}], "Text",ExpressionUUID->"d95496cb-3aba-43fd-90ec-952f7c49d7bc"],

Cell["\<\
For example, the following creates the 4 by 5 matrix whose entries are the \
sum of their indices.\
\>", "Text",ExpressionUUID->"8f88db19-7458-46f3-9815-89ea54300c7f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"m3", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"i", "+", "j"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "5"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "m3", "]"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[358]:=",ExpressionUUID->"4f8cae27-9a4e-44a8-9271-829cbc47f303"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"2", "3", "4", "5", "6"},
     {"3", "4", "5", "6", "7"},
     {"4", "5", "6", "7", "8"},
     {"5", "6", "7", "8", "9"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[359]//MatrixForm=",ExpressionUUID->"d02f1f64-b676-429f-b847-\
c252424d5eac"]
}, Open  ]],

Cell[TextData[{
 "Note that the iteration specifications determine the values used while \
calculating the entries, but their position within the matrix is determined \
by the order in which the iteration occurs. Below, we create the matrix whose \
entries are ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "i"], 
    SuperscriptBox["y", "j"]}], TraditionalForm]],ExpressionUUID->
  "f19722db-553f-440f-aa30-c92838d6fa28"],
 " with the exponents to ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "93d50069-8767-4f04-b256-2c0d42db07f2"],
 " ranging from 3 to 5 in decreasing order and the exponents of ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "36850f32-32d1-4e76-b095-51a59a8c414c"],
 " determined by the list ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"3", ",", "7", ",", "2", ",", "5"}], "}"}], TraditionalForm]],
  ExpressionUUID->"8eb96cbb-fd43-44ef-a02c-7c8336fe1abe"],
 ". We emphasize that the first iteration specification corresponds to the \
columns of the matrix and the second to the rows, which is clear from this \
output."
}], "Text",ExpressionUUID->"ff2f7d9c-183a-4d86-abfe-76e44373b782"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"m4", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"x", "^", "i"}], " ", 
      RowBox[{"y", "^", "j"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "5", ",", "3", ",", 
       RowBox[{"-", "1"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "7", ",", "2", ",", "5"}], "}"}]}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"m4", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[360]:=",ExpressionUUID->"d66b2d48-4666-47bc-8f5d-aba4c1d82d53"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "3"]}], 
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "7"]}], 
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "2"]}], 
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "5"]}]},
     {
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "3"]}], 
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "7"]}], 
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "2"]}], 
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "5"]}]},
     {
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "3"]}], 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "7"]}], 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "2"]}], 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "5"]}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[361]//MatrixForm=",ExpressionUUID->"e34757c0-71b3-45a9-8ef9-\
609af8e41e1b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Manipulating and Combining Matrices", "Subsubsection",ExpressionUUID->"6a52a151-4448-4761-8004-86548fe7775f"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["IdentityMatrix",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IdentityMatrix"], "FunctionLink"],
 " function takes a positive integer as its argument and produces an identity \
matrix of that size."
}], "Text",ExpressionUUID->"d950063a-5d7e-4086-9c20-f36a6ed059da"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"IdentityMatrix", "[", "3", "]"}], "//", "MatrixForm"}]], "Input",
 CellLabel->
  "In[362]:=",ExpressionUUID->"b6132c0c-156d-45db-8364-dd08cd42ebbd"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0"},
     {"0", "1", "0"},
     {"0", "0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[362]//MatrixForm=",ExpressionUUID->"455f3b9d-5c23-40e8-8a35-\
bbc9574e1d24"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["ConstantArray",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ConstantArray"], "FunctionLink"],
 " function can be used to create a list (including a matrix) all of whose \
entries are identical. Its first argument is the constant with which to \
populate the list and the second argument specifies the size of the \
structure. "
}], "Text",ExpressionUUID->"cdfaaeca-4b61-49be-bd52-ddd021cb1220"],

Cell[TextData[{
 "If the second argument is an integer, ",
 StyleBox[ButtonBox["ConstantArray",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ConstantArray"], "FunctionLink"],
 " produces a list of that length."
}], "Text",ExpressionUUID->"fbca1d44-87e9-4ccd-9712-2e930d3cc76c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ConstantArray", "[", 
  RowBox[{"x", ",", "5"}], "]"}]], "Input",
 CellLabel->
  "In[363]:=",ExpressionUUID->"d54ec4cc-4418-48c8-86e3-6d488a074ea5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", ",", "x", ",", "x", ",", "x", ",", "x"}], "}"}]], "Output",
 CellLabel->
  "Out[363]=",ExpressionUUID->"faada4b5-1d18-4357-84f9-9ede7d7065dc"]
}, Open  ]],

Cell["\<\
If the second argument is a list consisting of a pair of integers, it \
produces a matrix of that size.\
\>", "Text",ExpressionUUID->"90d58473-f1b9-4cb5-b920-e3b3babd8222"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"m5", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "3"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"m5", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[364]:=",ExpressionUUID->"34a2e450-6f20-4556-9518-020d2348b264"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0"},
     {"0", "0", "0"},
     {"0", "0", "0"},
     {"0", "0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[365]//MatrixForm=",ExpressionUUID->"e4701bdd-2144-43b4-913c-\
059279bcd3cc"]
}, Open  ]],

Cell[TextData[{
 "We can then modify the entries of the constant matrix using the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") operator. Note that the locations within the matrix specified with the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") operator are consistent with the usual mathematical notation, that is, \
row then column."
}], "Text",ExpressionUUID->"196843cf-8f9c-4e61-aec6-7b8041670138"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"m5", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "1"}], "]"}], "]"}], "=", "5"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"m5", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "3"}], "]"}], "]"}], "=", "3"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"m5", "[", 
    RowBox[{"[", 
     RowBox[{"3", ",", "2"}], "]"}], "]"}], "=", "7"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"m5", "[", 
    RowBox[{"[", 
     RowBox[{"4", ",", "1"}], "]"}], "]"}], "=", 
   RowBox[{"-", "2"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"m5", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[366]:=",ExpressionUUID->"ec44e256-48c4-4c8b-bf67-08132f864846"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"5", "0", "3"},
     {"0", "0", "0"},
     {"0", "7", "0"},
     {
      RowBox[{"-", "2"}], "0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[370]//MatrixForm=",ExpressionUUID->"d8d1ba6d-9d08-460d-87fb-\
0abece56f7f3"]
}, Open  ]],

Cell[TextData[{
 "Provided the dimensions match, you can merge two \
matrices\[LongDash]effectively gluing one next to the other or one on top of \
the other\[LongDash]with the ",
 StyleBox[ButtonBox["Join",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Join"], "FunctionLink"],
 " function. "
}], "Text",ExpressionUUID->"00a20fb9-60f3-498f-999e-d099bfc98787"],

Cell[TextData[{
 "For example, if you have two matrices with the same number of columns, you \
can stack one on top of the other by calling ",
 StyleBox[ButtonBox["Join",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Join"], "FunctionLink"],
 " on the two matrices. The top matrix should be given as the first \
argument."
}], "Text",ExpressionUUID->"b375a0f9-94b0-4c62-a4ed-9da843f3e455"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"IdentityMatrix", "[", "3", "]"}], ",", "m5"}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[371]:=",ExpressionUUID->"003f8c22-41a9-4412-9295-89b49f5d6012"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0"},
     {"0", "1", "0"},
     {"0", "0", "1"},
     {"5", "0", "3"},
     {"0", "0", "0"},
     {"0", "7", "0"},
     {
      RowBox[{"-", "2"}], "0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[371]//MatrixForm=",ExpressionUUID->"b5471d55-4a30-47ad-878f-\
69f39d3e1936"]
}, Open  ]],

Cell[TextData[{
 "Given two matrices with the same number of rows, you can combine them side \
by side by calling ",
 StyleBox[ButtonBox["Join",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Join"], "FunctionLink"],
 " with the two matrices as the first two arguments and the number 2 as a \
third argument."
}], "Text",ExpressionUUID->"09cff3cf-e257-4720-8208-0207f685027e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"IdentityMatrix", "[", "3", "]"}], ",", "m4", ",", "2"}], "]"}], "//",
   "MatrixForm"}]], "Input",
 CellLabel->
  "In[372]:=",ExpressionUUID->"c920390b-5655-4f9e-b8bc-c4805901a128"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0", 
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "3"]}], 
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "7"]}], 
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "2"]}], 
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "5"]}]},
     {"0", "1", "0", 
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "3"]}], 
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "7"]}], 
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "2"]}], 
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "5"]}]},
     {"0", "0", "1", 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "3"]}], 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "7"]}], 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "2"]}], 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "5"]}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[372]//MatrixForm=",ExpressionUUID->"0c5dcadb-b244-4d03-ba0a-\
7b8041bd704f"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Join",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Join"], "FunctionLink"],
 " function is in fact a very useful general function. It accepts as \
arguments a number of expressions and an optional integer, provided that the \
expressions all have the same head, for example, ",
 StyleBox["List", "Code"],
 ". If the optional integer is not present, ",
 StyleBox[ButtonBox["Join",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Join"], "FunctionLink"],
 " combines the expressions into one expression with that common head. The \
optional argument specifies the level at which to join. By giving the \
argument 2, it means that rather than joining the expressions, it joins their \
corresponding subexpressions."
}], "Text",ExpressionUUID->"61e14a13-99be-4671-9643-66d7ee09785e"],

Cell[TextData[{
 "Finally, the ",
 StyleBox[ButtonBox["ArrayPad",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ArrayPad"], "FunctionLink"],
 " function can be used to extend a matrix in any direction by padding it \
with a constant. The first argument is the existing list or matrix. The \
second argument specifies the dimensions of the padding, that is, how many \
additional rows or columns to add on each side. The third (optional) argument \
specifies the object to pad with. The padding defaults to 0."
}], "Text",ExpressionUUID->"907029bf-70f3-4afe-8096-557f13990a63"],

Cell[TextData[{
 "The most general form of the second argument, the dimensions of the \
padding, is a list of the form ",
 Cell[BoxData[
  RowBox[{"{", "{", 
   StyleBox["top", "CodeVar"], ",", 
   StyleBox["bottom", "CodeVar"], "}", ",", "{", 
   StyleBox["left", "CodeVar"], ",", 
   StyleBox["right", "CodeVar"], "}", "}"}]], "myCode",ExpressionUUID->
  "11ff4c2f-5e0c-4095-acf4-3522bf90a66d"],
 ", where ",
 StyleBox["top", "CodeVar"],
 " stands for the number of rows to add above the matrix, etc. For example, \
the following adds 1s along the bottom and right of the matrix ",
 StyleBox["m4", "Code"],
 " and two columns along the left."
}], "Text",ExpressionUUID->"53d684ec-b548-40a2-83cc-e9186ba65eea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ArrayPad", "[", 
   RowBox[{"m4", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1"}], "}"}]}], "}"}], ",", "1"}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[373]:=",ExpressionUUID->"46d05143-0983-4cf2-aaaf-dcccd347678f"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", 
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "3"]}], 
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "7"]}], 
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "2"]}], 
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "5"]}], "1"},
     {"1", "1", 
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "3"]}], 
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "7"]}], 
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "2"]}], 
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "5"]}], "1"},
     {"1", "1", 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "3"]}], 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "7"]}], 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "2"]}], 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "5"]}], "1"},
     {"1", "1", "1", "1", "1", "1", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[373]//MatrixForm=",ExpressionUUID->"9333f4c4-dc82-4ea7-926f-\
67d75d1fd0a4"]
}, Open  ]],

Cell[TextData[{
 "The second argument can be simplified when the padding is consistent. For \
example, to add columns of 1s along the bottom and right, rather than \
providing ",
 StyleBox["{{0,1},{0,1}}", "Code"],
 ", you can simply use ",
 StyleBox["{0,1}", "Code"],
 ". The correct interpretation of this is that we are adding nothing at the \
beginning and one entry at the end of every level (row and column)."
}], "Text",ExpressionUUID->"1eb390fa-5397-4101-b548-d8643398fb48"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ArrayPad", "[", 
   RowBox[{"m4", ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], ",", "1"}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[374]:=",ExpressionUUID->"f04c71a1-d70f-4ff6-a075-1e76dcf2c501"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "3"]}], 
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "7"]}], 
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "2"]}], 
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "5"]}], "1"},
     {
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "3"]}], 
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "7"]}], 
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "2"]}], 
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "5"]}], "1"},
     {
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "3"]}], 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "7"]}], 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "2"]}], 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "5"]}], "1"},
     {"1", "1", "1", "1", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[374]//MatrixForm=",ExpressionUUID->"c35e123c-fa30-431b-8fd8-\
038ffcb912e4"]
}, Open  ]],

Cell["\<\
If you give just an integer as the second argument, then that number of \
elements will be added in every direction.\
\>", "Text",ExpressionUUID->"34dd98e1-4e3f-41fb-bdda-120572cff042"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ArrayPad", "[", 
   RowBox[{"m4", ",", "2", ",", "1"}], "]"}], "//", "MatrixForm"}]], "Input",
 CellLabel->
  "In[375]:=",ExpressionUUID->"c819c7a6-d911-4205-8341-ef11d1b0c9d4"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", "1", "1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1", "1", "1", "1"},
     {"1", "1", 
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "3"]}], 
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "7"]}], 
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "2"]}], 
      RowBox[{
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["y", "5"]}], "1", "1"},
     {"1", "1", 
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "3"]}], 
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "7"]}], 
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "2"]}], 
      RowBox[{
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["y", "5"]}], "1", "1"},
     {"1", "1", 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "3"]}], 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "7"]}], 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "2"]}], 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["y", "5"]}], "1", "1"},
     {"1", "1", "1", "1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1", "1", "1", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[375]//MatrixForm=",ExpressionUUID->"4841a748-0d86-4010-9269-\
a0fca51d2328"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Matrix Arithmetic", "Subsection",
 CellTags->"Section6b",ExpressionUUID->"7ff08613-5156-4863-9737-50823876e89c"],

Cell[TextData[{
 "The textbook defines addition and multiplication of matrices. The Wolfram \
Language implements these operations on matrices in a fairly intuitive way. \
To add two matrices, you use the ",
 StyleBox["+", "Code"],
 " operator, as you would expect."
}], "Text",ExpressionUUID->"d50eebd5-469e-45bf-9390-d619ef152d3b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"m6", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"m6", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[376]:=",ExpressionUUID->"f472a086-a06c-46da-acfd-86aef2a450bb"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "2", "3"},
     {"4", "5", "6"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[377]//MatrixForm=",ExpressionUUID->"376a0d42-498d-41f9-8ae5-\
75a65eb8dbf9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"m7", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "2"}], ",", "3", ",", 
       RowBox[{"-", "1"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "5", ",", "2"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"m7", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[378]:=",ExpressionUUID->"1ff906ab-559c-4a1f-9c43-0a2c7acf4b51"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", "2"}], "3", 
      RowBox[{"-", "1"}]},
     {"1", "5", "2"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[379]//MatrixForm=",ExpressionUUID->"6ed2f197-fccc-41e9-8477-\
a426ffe17501"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"m6", "+", "m7"}], "//", "MatrixForm"}]], "Input",
 CellLabel->
  "In[380]:=",ExpressionUUID->"9d2244a7-19dc-4b25-ae1e-2a5b6f012641"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", "1"}], "5", "2"},
     {"5", "10", "8"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[380]//MatrixForm=",ExpressionUUID->"74fa0d29-b872-4683-864b-\
09239e31391d"]
}, Open  ]],

Cell["\<\
The Wolfram Language\[CloseCurlyQuote]s syntax for multiplying a matrix by a \
scalar is also intuitive.\
\>", "Text",ExpressionUUID->"01b92ce1-12bb-4a22-8d06-4000534c7e3f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"3", "*", "m7"}], "//", "MatrixForm"}]], "Input",
 CellLabel->
  "In[381]:=",ExpressionUUID->"1c514dfb-156a-4a6d-9dd5-57c489c24385"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", "6"}], "9", 
      RowBox[{"-", "3"}]},
     {"3", "15", "6"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[381]//MatrixForm=",ExpressionUUID->"ae5231cd-30bd-4736-a6fc-\
d2e7308462a0"]
}, Open  ]],

Cell[TextData[{
 "This produces the matrix whose entries are three times the entries of ",
 StyleBox["m7", "Code"],
 "."
}], "Text",ExpressionUUID->"2e05c292-43f0-4d6b-a830-fdaf8a1e6f31"],

Cell[TextData[{
 "Matrix multiplication is computed using the ",
 StyleBox[ButtonBox["Dot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dot"], "FunctionLink"],
 " (",
 StyleBox[".", "Code"],
 ") operator, not the ",
 StyleBox[ButtonBox["Times",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Times"], "FunctionLink"],
 " (",
 StyleBox["*", "Code"],
 ") operator."
}], "Text",ExpressionUUID->"4359ea3d-1929-4837-bcd5-69e8f4c83fee"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"m8", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "6", ",", "11", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "2"}], ",", "5", ",", "2", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "8", ",", "9", ",", 
       RowBox[{"-", "3"}]}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"m8", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[382]:=",ExpressionUUID->"6e782f2a-2475-459c-9cad-81c9e6f1338f"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"3", "6", "11", "1"},
     {
      RowBox[{"-", "2"}], "5", "2", "0"},
     {"4", "8", "9", 
      RowBox[{"-", "3"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[383]//MatrixForm=",ExpressionUUID->"34bcde19-c1e3-46c9-a731-\
05ffe9f0ab2c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"m9", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"-", "2"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"m9", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[384]:=",ExpressionUUID->"171c0577-87a9-4a4e-bef9-e85482d60a30"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"2", "5"},
     {"1", 
      RowBox[{"-", "2"}]},
     {"3", "7"},
     {
      RowBox[{"-", "1"}], "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[385]//MatrixForm=",ExpressionUUID->"6656c18d-4865-44b3-a337-\
38157a59d55b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"m8", ".", "m9"}], "//", "MatrixForm"}]], "Input",
 CellLabel->
  "In[386]:=",ExpressionUUID->"d22bb4a9-7b3b-4221-80fd-4745e6710159"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"44", "80"},
     {"7", 
      RowBox[{"-", "6"}]},
     {"46", "67"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[386]//MatrixForm=",ExpressionUUID->"4b1ed938-f666-4263-a37e-\
f0a68f2da5c7"]
}, Open  ]],

Cell[TextData[{
 "The reason that addition and scalar multiplication work in the natural way \
is that the functions ",
 StyleBox[ButtonBox["Plus",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plus"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Times",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Times"], "FunctionLink"],
 " have the ",
 StyleBox[ButtonBox["Listable",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Listable"], "FunctionLink"],
 " attribute, which means that they are automatically threaded over lists \
(and thus matrices). However, since ",
 StyleBox[ButtonBox["Times",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Times"], "FunctionLink"],
 " is ",
 StyleBox[ButtonBox["Listable",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Listable"], "FunctionLink"],
 ", ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " would compute the product ",
 StyleBox["m6*m7", "Code"],
 " by multiplying corresponding entries, even though this is not the correct \
operation mathematically. Hence, the ",
 StyleBox[ButtonBox["Dot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dot"], "FunctionLink"],
 " (",
 StyleBox[".", "Code"],
 ") operator is needed."
}], "Text",ExpressionUUID->"d220fcfb-955c-4cf3-9416-37022b21bdb5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Powers and Transposes of Matrices", "Subsection",
 CellTags->"Section6c",ExpressionUUID->"9ca9c11c-3503-41b7-9466-e73ecc7de737"],

Cell[TextData[{
 "Computing powers of square matrices is done with the ",
 StyleBox[ButtonBox["MatrixPower",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MatrixPower"], "FunctionLink"],
 " function. (Note that the usual ",
 StyleBox[ButtonBox["Power",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Power"], "FunctionLink"],
 " (",
 StyleBox["^", "Code"],
 ") operator will compute the power of each element of the matrix.) As you \
would expect, the first argument is the matrix and the second the exponent."
}], "Text",ExpressionUUID->"1ca67bd0-452d-476d-a55c-34f663047dd4"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"m10", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"m10", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[387]:=",ExpressionUUID->"9914b567-8ddc-4c4a-9774-807f1e74f718"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "2", "3"},
     {"4", "5", "6"},
     {"7", "8", "9"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[388]//MatrixForm=",ExpressionUUID->"045e4ff9-af17-4a11-ae7e-\
0346dcddf419"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MatrixPower", "[", 
   RowBox[{"m10", ",", "5"}], "]"}], "//", "MatrixForm"}]], "Input",
 CellLabel->
  "In[389]:=",ExpressionUUID->"9401f4e5-3c04-41c6-bc38-5a4647e3a554"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"121824", "149688", "177552"},
     {"275886", "338985", "402084"},
     {"429948", "528282", "626616"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[389]//MatrixForm=",ExpressionUUID->"7e0d9860-e253-473e-9684-\
af8e9825c3cd"]
}, Open  ]],

Cell["\<\
Note that if the exponent is negative, the result will be the power of the \
inverse, provided one exists. \
\>", "Text",ExpressionUUID->"c16ee978-4484-4f70-955d-65f52814db33"],

Cell[TextData[{
 "The transpose of a matrix can be computed with the ",
 StyleBox[ButtonBox["Transpose",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Transpose"], "FunctionLink"],
 " function."
}], "Text",ExpressionUUID->"2f7aee3a-ce48-4653-8e85-c9afee66944b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "[", "m10", "]"}], "//", "MatrixForm"}]], "Input",
 CellLabel->
  "In[390]:=",ExpressionUUID->"b76fecd0-d630-45f9-9e69-309520a13b38"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "4", "7"},
     {"2", "5", "8"},
     {"3", "6", "9"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[390]//MatrixForm=",ExpressionUUID->"2b163769-1774-4279-b24a-\
251f8f3df891"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Zero\[Dash]One Matrices", "Subsection",
 CellTags->"Section6d",ExpressionUUID->"2e9c2b35-0658-4a59-9d9c-50f284de6922"],

Cell[TextData[{
 "With ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", we can create and manipulate zero\[Dash]one matrices as well. In \
particular, we will consider how to compute the meet, join, and Boolean \
product of zero\[Dash]one matrices."
}], "Text",ExpressionUUID->"42f06759-596e-44b0-9df8-b94a7efd8c63"],

Cell[TextData[{
 "Recall from the previous chapter that the Wolfram Language provides the ",
 StyleBox[ButtonBox["BitAnd",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitAnd"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["BitOr",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitOr"], "FunctionLink"],
 " functions for computing the bitwise AND and OR operations. In addition, \
recall from the textbook that the meet and join of two zero\[Dash]one \
matrices correspond to computing the bitwise AND and OR on corresponding \
entries. Since the ",
 StyleBox[ButtonBox["BitAnd",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitAnd"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["BitOr",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitOr"], "FunctionLink"],
 " functions have the ",
 StyleBox[ButtonBox["Listable",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Listable"], "FunctionLink"],
 " attribute, they automatically thread over lists. Thus, applying ",
 StyleBox[ButtonBox["BitAnd",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitAnd"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["BitOr",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitOr"], "FunctionLink"],
 " to matrices of the same dimension exactly computes the meet and join."
}], "Text",ExpressionUUID->"580ad253-2cc4-4feb-a674-658f56290558"],

Cell[TextData[{
 "Below, we define two example matrices and use ",
 StyleBox[ButtonBox["BitOr",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitOr"], "FunctionLink"],
 " to compute their meet. The reader can verify that the result is correct."
}], "Text",ExpressionUUID->"0ac19be3-f148-465e-a855-8aaca122e767"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"zerooneEx1", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"zerooneEx1", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[391]:=",ExpressionUUID->"325d1e26-009e-4a17-8fb4-f40dc8eadd29"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "1"},
     {"1", "1", "0"},
     {"0", "1", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[392]//MatrixForm=",ExpressionUUID->"688d3cd6-bd74-4c7e-b0b5-\
eb8c918a4573"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"zerooneEx2", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"zerooneEx2", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[393]:=",ExpressionUUID->"4229f83d-e9c0-465f-ad2f-6970334b7188"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0"},
     {"1", "1", "1"},
     {"0", "0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[394]//MatrixForm=",ExpressionUUID->"ea82f880-3337-4042-97ac-\
3317dc9e4717"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"BitOr", "[", 
   RowBox[{"zerooneEx1", ",", "zerooneEx2"}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[395]:=",ExpressionUUID->"bf95359f-0ce9-4857-afc7-6ac8f385ca3a"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "1"},
     {"1", "1", "1"},
     {"0", "1", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[395]//MatrixForm=",ExpressionUUID->"a66dc4d1-7316-45cb-8aff-\
94adc9110ccc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Type Checking Zero\[Dash]One Matrices", "Subsubsection",ExpressionUUID->"bbd9ac67-39c2-41de-8865-da21f196f300"],

Cell[TextData[{
 "Recall from Section 1.1 of this manual that the ",
 StyleBox[ButtonBox["BitAnd",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitAnd"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["BitOr",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitOr"], "FunctionLink"],
 " functions will accept as input any integers, not just the bits 0 and 1. It \
is a good habit, when writing functions, to ensure that the input to a \
function is of the right type. Otherwise, the function may attempt to operate \
on the bad input and produce output without telling you that the input was \
bad. To prevent this, you use \[OpenCurlyDoubleQuote]type checking.\
\[CloseCurlyDoubleQuote] Here, we will see how to type check zero\[Dash]one \
matrices and build those checks into functions ",
 StyleBox["meet", "Code"],
 " and ",
 StyleBox["join", "Code"],
 ". The body of these functions will simply be applications of ",
 StyleBox[ButtonBox["BitAnd",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitAnd"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["BitOr",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitOr"], "FunctionLink"],
 ", respectively. "
}], "Text",ExpressionUUID->"fb1a1740-7027-493a-a46a-fa3e6d673607"],

Cell[TextData[{
 "Our test will be based on the Wolfram Language\[CloseCurlyQuote]s built-in ",
 StyleBox[ButtonBox["MatrixQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MatrixQ"], "FunctionLink"],
 " function. The ",
 StyleBox[ButtonBox["MatrixQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MatrixQ"], "FunctionLink"],
 " function accepts an expression and returns true if the object is a list of \
lists that represents a rectangular matrix and false otherwise. It also \
accepts, as a second optional argument, a function in one argument that \
imposes a condition on the elements of the matrix. Specifically, the second \
argument is a function that is applied to each element of the matrix and the ",
 StyleBox[ButtonBox["MatrixQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MatrixQ"], "FunctionLink"],
 " function only returns true if the first argument is a matrix and every \
element of the matrix satisfies the test specified by the second argument."
}], "Text",ExpressionUUID->"61b6acb6-0fb5-4ff8-8e95-665d43d316fa"],

Cell[TextData[{
 "For example, the following checks that the ",
 StyleBox["zerooneEx1", "Code"],
 " matrix is a matrix of integers, using ",
 StyleBox[ButtonBox["IntegerQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerQ"], "FunctionLink"],
 " as the test function."
}], "Text",ExpressionUUID->"761dfb31-373c-451d-9168-3013505f2814"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixQ", "[", 
  RowBox[{"zerooneEx1", ",", "IntegerQ"}], "]"}]], "Input",
 CellLabel->
  "In[396]:=",ExpressionUUID->"4dfeda48-2fdd-4e09-be15-5c653e1d4ea3"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[396]=",ExpressionUUID->"29446ac6-ec9d-4089-943b-9289a383d7fe"]
}, Open  ]],

Cell["\<\
However, given a matrix with even one entry that is not an integer, it will \
return false.\
\>", "Text",ExpressionUUID->"fc4fb594-04b6-4ee2-9df7-d2f7c7d3613d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", "/", "4"}], ",", "5"}], "}"}]}], "}"}], ",", "IntegerQ"}],
   "]"}]], "Input",
 CellLabel->
  "In[397]:=",ExpressionUUID->"8565bf82-e686-47b3-abd0-8440d9da7e46"],

Cell[BoxData["False"], "Output",
 CellLabel->
  "Out[397]=",ExpressionUUID->"881257b0-6323-41d7-b084-e6eb3104724e"]
}, Open  ]],

Cell[TextData[{
 "To check whether an expression represents a zero\[Dash]one matrix, we will \
need to design a function that returns true when its input is 0 or 1 and \
false otherwise. It is easy to create such a function using a pure function. \
Recall from Section 2.3 of this manual that a pure function of one argument \
is constructed as an expression using the ",
 StyleBox[ButtonBox["Slot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Slot"], "FunctionLink"],
 " (",
 StyleBox["#", "Code"],
 ") in place of the argument and ending with an ampersand, that is, the ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " (",
 StyleBox["&", "Code"],
 ") operator. To test whether the argument is 0 or 1, we just need to \
evaluate the proposition ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", "=", "0"}], ")"}], "\[Or]", 
    RowBox[{"(", 
     RowBox[{"x", "=", "1"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "5cb284c8-7eda-4252-b913-8b4c2c14e9b4"],
 "."
}], "Text",ExpressionUUID->"cd12bb71-83c6-4f00-9923-0bb7f6c76a71"],

Cell[TextData[{
 "Here is the definition of ",
 StyleBox["zeroOneMatrixQ", "Code"],
 "."
}], "Text",ExpressionUUID->"8893a87c-45c1-43e5-b06e-a0028825caf7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"zeroOneMatrixQ", "[", "m_", "]"}], ":=", 
  RowBox[{"MatrixQ", "[", 
   RowBox[{"m", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"#", "\[Equal]", "0"}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{"#", "\[Equal]", "1"}], ")"}]}], "&"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[398]:=",ExpressionUUID->"77db4ac6-db1e-46b7-9fd8-a800b2a8ec1c"],

Cell["\<\
This function will return true for a zero\[Dash]one matrix, but false if \
given an input that is not a rectangular matrix or contains elements that are \
not 0 or 1.\
\>", "Text",ExpressionUUID->"253ac070-2e3f-4002-aa77-5a4125a4e8aa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"zeroOneMatrixQ", "[", "zerooneEx1", "]"}]], "Input",
 CellLabel->
  "In[399]:=",ExpressionUUID->"0a48330c-359d-47a8-846d-0e1c94f644f3"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[399]=",ExpressionUUID->"f7f4303e-13ab-4fa1-bd40-1acec8976b9d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"zeroOneMatrixQ", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}]}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[400]:=",ExpressionUUID->"d5f04b18-44f2-40f7-8815-bb839d87302d"],

Cell[BoxData["False"], "Output",
 CellLabel->
  "Out[400]=",ExpressionUUID->"ee5689f8-9b2c-4eca-bd71-71b074e03713"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"zeroOneMatrixQ", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "2"}], "}"}]}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[401]:=",ExpressionUUID->"b17c8a5f-1bc0-445c-ae79-44b575028c92"],

Cell[BoxData["False"], "Output",
 CellLabel->
  "Out[401]=",ExpressionUUID->"55dee6a9-9ffe-430e-9efe-e0cf75b7fa62"]
}, Open  ]],

Cell[TextData[{
 "We can now use ",
 StyleBox["zeroOneMatrixQ", "Code"],
 " to impose type checking in order to build functions ",
 StyleBox["meet", "Code"],
 " and ",
 StyleBox["join", "Code"],
 ". We use the ",
 StyleBox["_?", "Code"],
 " construction to ensure that the arguments are zero\[Dash]one matrices."
}], "Text",ExpressionUUID->"1cb2c092-ac7e-41ae-bf15-75dfecc44dc7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"meet", "[", 
   RowBox[{
    RowBox[{"a_", "?", "zeroOneMatrixQ"}], ",", 
    RowBox[{"b_", "?", "zeroOneMatrixQ"}]}], "]"}], ":=", 
  RowBox[{"BitAnd", "[", 
   RowBox[{"a", ",", "b"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[402]:=",ExpressionUUID->"8ddf0656-bb76-4e53-a76f-107e5769fb89"],

Cell[BoxData[
 RowBox[{
  RowBox[{"join", "[", 
   RowBox[{
    RowBox[{"a_", "?", "zeroOneMatrixQ"}], ",", 
    RowBox[{"b_", "?", "zeroOneMatrixQ"}]}], "]"}], ":=", 
  RowBox[{"BitOr", "[", 
   RowBox[{"a", ",", "b"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[403]:=",ExpressionUUID->"f1183917-5f8c-48bb-8ee9-0886323db3d6"],

Cell["\<\
These functions now perform their respective operations, but only on zero\
\[Dash]one matrices.\
\>", "Text",ExpressionUUID->"58d4748c-7b76-41ce-b17f-3a2accc5880d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"meet", "[", 
   RowBox[{"zerooneEx1", ",", "zerooneEx2"}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[404]:=",ExpressionUUID->"d133892f-d710-4cc2-8648-e19c753e18f2"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0"},
     {"1", "1", "0"},
     {"0", "0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[404]//MatrixForm=",ExpressionUUID->"eed4e0f6-c56d-40c5-89b4-\
b369e3baa2a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"join", "[", 
   RowBox[{"zerooneEx1", ",", "zerooneEx2"}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[405]:=",ExpressionUUID->"2a3f5291-a273-433f-808d-e10d6260fb4a"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "1"},
     {"1", "1", "1"},
     {"0", "1", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[405]//MatrixForm=",ExpressionUUID->"9f2d4079-b0f5-480e-bc09-\
2d43c2fd4ad4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implementing the Boolean Product", "Subsubsection",ExpressionUUID->"345bfa70-3511-475d-8c1d-ebf03b30f54e"],

Cell[TextData[{
 "We conclude by implementing the Boolean product. Recall two key points from \
Definition 9 in Section 2.6. First, the size of the product of an ",
 Cell[BoxData[
  FormBox[
   RowBox[{"m", "\[Times]", "k"}], TraditionalForm]],ExpressionUUID->
  "6f95984c-baf3-4a5f-9aa5-035acb8b48fd"],
 " matrix and an ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "\[Times]", "n"}], TraditionalForm]],ExpressionUUID->
  "7e069865-d18a-43f4-b96a-cf826bd9156c"],
 " is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"m", "\[Times]", "n"}], TraditionalForm]],ExpressionUUID->
  "90a952ab-dd56-41a6-9739-97b96453a79f"],
 " and the product is undefined if the number of columns of the first matrix \
does not match the number of rows in the second. Second, the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"i", ",", "j"}], ")"}], TraditionalForm]],ExpressionUUID->
  "e4f045ee-121e-4c61-adf0-446146253ffa"],
 " entry of the product is given by the formula"
}], "Text",ExpressionUUID->"6de2b212-85f0-429d-ab39-28212a84664a"],

Cell[BoxData[
 FormBox[Cell[TextData[Cell[BoxData[
   FormBox[
    RowBox[{
     SubscriptBox["c", "ij"], "=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["a", "i1"], "\[And]", 
        SubscriptBox["b", 
         RowBox[{"1", "j"}]]}], ")"}], "\[Or]", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["a", "i2"], "\[And]", 
        SubscriptBox["b", 
         RowBox[{"2", "j"}]]}], ")"}], "\[Or]", "\[CenterEllipsis]", "\[Or]", 
      
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["a", "ik"], "\[And]", 
        SubscriptBox["b", "kj"]}], ")"}]}]}], TraditionalForm]],
   ExpressionUUID->"24e961b3-f010-48c5-b1eb-0533b7acd97c"]],ExpressionUUID->
   "efd2017b-b298-48a9-9b1d-1f90e2ca7679"], TraditionalForm]], "Equation",Expr\
essionUUID->"525198fc-22e6-4e4e-941b-b01f40836984"],

Cell[TextData[{
 "Our Boolean product function, ",
 StyleBox["boolProduct", "Code"],
 ", needs to begin by confirming that the dimensions are correct. To do this, \
we will use the ",
 StyleBox[ButtonBox["Dimensions",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dimensions"], "FunctionLink"],
 " function. For a matrix, ",
 StyleBox[ButtonBox["Dimensions",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dimensions"], "FunctionLink"],
 " returns a list whose entries are the number of rows and columns."
}], "Text",ExpressionUUID->"d800de8b-823c-49cb-aa02-84eeade82c66"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[406]:=",ExpressionUUID->"f5061bbb-d0e0-45a8-9145-37d231a6cdbe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3"}], "}"}]], "Output",
 CellLabel->
  "Out[406]=",ExpressionUUID->"2e422d74-cc2e-4d03-a564-f995dd6e3123"]
}, Open  ]],

Cell[TextData[{
 "Since we know that the output will be a list with two elements, we can use ",
 StyleBox[ButtonBox["Set",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Set"], "FunctionLink"],
 " (",
 StyleBox["=", "Code"],
 ") with a two-element list of symbols on the left-hand side of the \
assignment to set two variables simultaneously, as demonstrated below."
}], "Text",ExpressionUUID->"833ae1e4-8f06-48fe-a232-34e6e9c4f84e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"numrows", ",", "numcolumns"}], "}"}], "=", 
  RowBox[{"Dimensions", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], "}"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[407]:=",ExpressionUUID->"e7c51ce0-d6d2-4146-ab80-23d59b8d52ce"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3"}], "}"}]], "Output",
 CellLabel->
  "Out[407]=",ExpressionUUID->"84e33282-47b9-4015-983a-6d171d010893"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["numrows"], "Input",
 CellLabel->
  "In[408]:=",ExpressionUUID->"bf097b2c-87bd-415d-87c1-b80902558798"],

Cell[BoxData["2"], "Output",
 CellLabel->
  "Out[408]=",ExpressionUUID->"962d8e82-6f5d-447f-9bf7-8ea111158d7e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["numcolumns"], "Input",
 CellLabel->
  "In[409]:=",ExpressionUUID->"f7fd6cfa-b384-4cd1-9c25-3c733e292fef"],

Cell[BoxData["3"], "Output",
 CellLabel->
  "Out[409]=",ExpressionUUID->"4f70b9aa-5ac8-4936-99ca-799674b19afa"]
}, Open  ]],

Cell[TextData[{
 "If the number of columns of the left-hand side matrix is not equal to the \
number of rows of the right-hand side matrix, we will display a message and \
use the ",
 StyleBox[ButtonBox["Return",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Return"], "FunctionLink"],
 " function to end the computation. The message is defined below."
}], "Text",ExpressionUUID->"5f8fe537-cc36-4432-b867-54cce176b00f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"boolProduct", "::", "dimMismatch"}], "=", 
   "\"\<The dimensions of the input matrices do not match.\>\""}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[410]:=",ExpressionUUID->"1d21a9ac-205a-4f05-b951-640fa2032a54"],

Cell[TextData[{
 "Once the function confirms that the input matrices are of appropriate \
sizes, it will use ",
 StyleBox[ButtonBox["ConstantArray",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ConstantArray"], "FunctionLink"],
 " to initialize the ",
 StyleBox["output", "Code"],
 " matrix to the correct size and fill it with zeros."
}], "Text",ExpressionUUID->"1b086a2d-aa2a-4627-abda-64ae4274fe5f"],

Cell[TextData[{
 "The main work of the function is to loop over all the entries of the result \
matrix and calculate the appropriate values. We use two nested ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loops with index variables ",
 StyleBox["i", "Code"],
 " and ",
 StyleBox["j", "Code"],
 " representing the rows and columns of the result matrix. Inside these ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loops, we need to implement the formula for ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "ij"], TraditionalForm]],ExpressionUUID->
  "dc040bc5-f80d-4570-9011-844c09f8e8f3"],
 "."
}], "Text",ExpressionUUID->"eec92407-391c-45a7-9787-b284f631dcd6"],

Cell["It will be helpful to consider a specific example:", "Text",ExpressionUUID->"4dacd868-ab8c-4e58-8086-208716fd6fa1"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "\[And]", "0"}], ")"}], "\[Or]", 
   RowBox[{"(", 
    RowBox[{"0", "\[And]", "0"}], ")"}], "\[Or]", 
   RowBox[{"(", 
    RowBox[{"0", "\[And]", "1"}], ")"}], "\[Or]", 
   RowBox[{"(", 
    RowBox[{"1", "\[And]", "1"}], ")"}], "\[Or]", 
   RowBox[{"(", 
    RowBox[{"0", "\[And]", "1"}], ")"}]}], TraditionalForm]], "Equation",Expre\
ssionUUID->"0b724b03-787d-4034-96cc-b5996087d494"],

Cell[TextData[{
 "We will approach this in the following way. First, compute ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "\[And]", "0"}], TraditionalForm]],ExpressionUUID->
  "7ccb9d70-4162-4845-8172-ee4f3ed14aa5"],
 ", the first term, and store the result as ",
 StyleBox["cij", "Input",
  IgnoreSpellCheck->True],
 "."
}], "Text",ExpressionUUID->"ecacd383-27ff-427d-8ae3-28b63a178ff5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cij", "=", 
  RowBox[{"BitAnd", "[", 
   RowBox[{"1", ",", "0"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[411]:=",ExpressionUUID->"edf8548d-ac61-4aee-b373-d31b8d0d2b7b"],

Cell[BoxData["0"], "Output",
 CellLabel->
  "Out[411]=",ExpressionUUID->"58c2e43e-1372-4e48-a49a-998d0bf07f9a"]
}, Open  ]],

Cell[TextData[{
 "Then, update ",
 StyleBox["cij", "Input",
  IgnoreSpellCheck->True],
 " to be the result of applying ",
 StyleBox[ButtonBox["BitOr",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitOr"], "FunctionLink"],
 " to it and the result of the next pair."
}], "Text",ExpressionUUID->"478037fd-9659-412d-80cd-4a0bd79be3bb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cij", "=", 
  RowBox[{"BitOr", "[", 
   RowBox[{"cij", ",", 
    RowBox[{"BitAnd", "[", 
     RowBox[{"0", ",", "0"}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[412]:=",ExpressionUUID->"593639bb-4234-4097-a1a3-994ffea8b932"],

Cell[BoxData["0"], "Output",
 CellLabel->
  "Out[412]=",ExpressionUUID->"bc663fa0-6538-4b90-850c-1d931e785ca3"]
}, Open  ]],

Cell["And then repeat with each successive meet.", "Text",ExpressionUUID->"16014a86-f43f-4c8e-bf66-517c4acffb41"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cij", "=", 
  RowBox[{"BitOr", "[", 
   RowBox[{"cij", ",", 
    RowBox[{"BitAnd", "[", 
     RowBox[{"0", ",", "1"}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[413]:=",ExpressionUUID->"e407a6ae-1b78-4859-bc0d-eb7a9a7b86ed"],

Cell[BoxData["0"], "Output",
 CellLabel->
  "Out[413]=",ExpressionUUID->"2257257a-1523-44c2-bb1a-d8c74d53d6cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cij", "=", 
  RowBox[{"BitOr", "[", 
   RowBox[{"cij", ",", 
    RowBox[{"BitAnd", "[", 
     RowBox[{"1", ",", "1"}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[414]:=",ExpressionUUID->"77dcf401-c122-4c25-96b7-0f1a1acf0835"],

Cell[BoxData["1"], "Output",
 CellLabel->
  "Out[414]=",ExpressionUUID->"2f88f39b-065a-4c11-86c5-fcd446471047"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cij", "=", 
  RowBox[{"BitOr", "[", 
   RowBox[{"cij", ",", 
    RowBox[{"BitAnd", "[", 
     RowBox[{"0", ",", "1"}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[415]:=",ExpressionUUID->"b456270a-a223-4b66-b2a6-fa305e9abbda"],

Cell[BoxData["1"], "Output",
 CellLabel->
  "Out[415]=",ExpressionUUID->"4923e941-eb39-419e-a976-6b3a45beadc0"]
}, Open  ]],

Cell[TextData[{
 "In terms of the generic formula, we initialize ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["c", "ij"], "=", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["a", "i1"], "\[And]", 
      SubscriptBox["b", 
       RowBox[{"1", "j"}]]}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "423d69c9-e8bc-4040-9b65-ee2a2ef8c793"],
 ". Then, we begin a loop with index, say ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "e855620d-93cb-4f6b-a382-99ea04c7f780"],
 ", from 2 through ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "84354266-fa1b-43bc-b85c-65948bb2fbef"],
 ". At each step in the loop, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["c", "ij"], "=", 
    RowBox[{
     SubscriptBox["c", "ij"], "\[Or]", 
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["a", "ip"], "\[And]", 
       SubscriptBox["b", "pj"]}], ")"}]}]}], TraditionalForm]],
  ExpressionUUID->"19294ff6-b9a4-4940-815b-7711e6a521d5"],
 "."
}], "Text",ExpressionUUID->"5e21c877-599d-4989-be0e-d7dd8b3ac328"],

Cell[TextData[{
 "Here is the implementation of ",
 StyleBox["boolProduct", "Code"],
 "."
}], "Text",ExpressionUUID->"281cb667-b58c-4a17-9eb2-fa5475a8bbed"],

Cell[BoxData[
 RowBox[{
  RowBox[{"boolProduct", "[", 
   RowBox[{
    RowBox[{"A_", "?", "zeroOneMatrixQ"}], ",", 
    RowBox[{"B_", "?", "zeroOneMatrixQ"}]}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "m", ",", "kA", ",", "kB", ",", "n", ",", "output", ",", "i", ",", "j", 
      ",", "c", ",", "p"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "kA"}], "}"}], "=", 
      RowBox[{"Dimensions", "[", "A", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"kB", ",", "n"}], "}"}], "=", 
      RowBox[{"Dimensions", "[", "B", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"kA", "\[NotEqual]", "kB"}], ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{"boolProduct", "::", "dimMismatch"}], "]"}], ";", 
        RowBox[{"Return", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"output", "=", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"0", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "n"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", "m"}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"j", "=", "1"}], ",", 
         RowBox[{"j", "\[LessEqual]", "n"}], ",", 
         RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"c", "=", 
           RowBox[{"BitAnd", "[", 
            RowBox[{
             RowBox[{"A", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", 
             RowBox[{"B", "[", 
              RowBox[{"[", 
               RowBox[{"1", ",", "j"}], "]"}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"p", "=", "2"}], ",", 
            RowBox[{"p", "\[LessEqual]", "kA"}], ",", 
            RowBox[{"p", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"c", "=", 
              RowBox[{"BitOr", "[", 
               RowBox[{"c", ",", 
                RowBox[{"BitAnd", "[", 
                 RowBox[{
                  RowBox[{"A", "[", 
                   RowBox[{"[", 
                    RowBox[{"i", ",", "p"}], "]"}], "]"}], ",", 
                  RowBox[{"B", "[", 
                   RowBox[{"[", 
                    RowBox[{"p", ",", "j"}], "]"}], "]"}]}], "]"}]}], "]"}]}],
              ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"output", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "j"}], "]"}], "]"}], "=", "c"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "output"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[416]:=",ExpressionUUID->"262cc0c3-9774-4473-8caf-7531d1019abc"],

Cell["\<\
We test this function on the matrices from Example 8 in the textbook.\
\>", "Text",ExpressionUUID->"d149e195-350b-4a41-8072-74b7d4f20ae2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ex8a", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ex8a", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[417]:=",ExpressionUUID->"a8629bbb-dc4f-45a8-aec7-fbfa1ab64e76"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0"},
     {"0", "1"},
     {"1", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[418]//MatrixForm=",ExpressionUUID->"f8751dd9-97b0-4889-b219-\
7c77973de363"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ex8b", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "1"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ex8b", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[419]:=",ExpressionUUID->"0c1c3c99-9b94-4ac6-bf3d-13c56f59623f"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", "0"},
     {"0", "1", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[420]//MatrixForm=",ExpressionUUID->"2165f89c-a9a3-4559-b155-\
81471f559ac5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"boolProduct", "[", 
   RowBox[{"ex8a", ",", "ex8b"}], "]"}], "//", "MatrixForm"}]], "Input",
 CellLabel->
  "In[421]:=",ExpressionUUID->"a7af3ff6-65b4-4908-ad09-ade31ef08890"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", "0"},
     {"0", "1", "1"},
     {"1", "1", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[421]//MatrixForm=",ExpressionUUID->"aef149e4-913a-4394-a718-\
d8aa868dde5d"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Solutions to Computer Projects and Computations and Explorations\
\>", "Section",
 CellTags->"Solutions",ExpressionUUID->"1b823bc4-b7ec-4fb2-9acc-a85a732f0852"],

Cell[CellGroupData[{

Cell["Computer Projects 3", "Subsection",
 CellTags->
  "SolutionsCP3",ExpressionUUID->"f59e2df4-b9cc-4c5e-8e76-25ad736c529d"],

Cell[TextData[{
 "Given fuzzy sets ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "d3980d92-f5e3-40b9-a71b-7ea76cdddb67"],
 " and ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "1ea9be44-2581-4d23-9aa2-d9f894cb740a"],
 ", find ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["A", "_"], TraditionalForm]],ExpressionUUID->
  "e28933be-1e1b-4751-ae59-a4eb5084b6f5"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "\[Union]", "B"}], TraditionalForm]],ExpressionUUID->
  "862c21da-5e3d-46e5-9a4e-aacd964326ca"],
 ", and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "\[Intersection]", "B"}], TraditionalForm]],ExpressionUUID->
  "5591a505-eb76-4b24-91f6-4615918042c4"],
 " (see preamble to Exercise 73 of Section 2.2)."
}], "Problem",ExpressionUUID->"5bbfb13c-21f8-4a19-ac95-9b38e49911ad"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " One approach to computing intersections, via associations, was given in \
Section 2.2 above. Here, we will compute the complement using bit strings, \
leaving the reader to implement union and intersection with their preferred \
representation. Recall, from Exercise 75, that the intersection of fuzzy sets \
is the fuzzy set in which the degree of membership of an element is the \
minimum of the degrees of membership of that element in the given sets."
}], "Text",ExpressionUUID->"a87298ea-23e1-4daa-9c0f-6c9c66aa5821"],

Cell["\<\
Recall, from the final subsection of Section 2.2 in this manual, that we \
developed three possible representations of fuzzy sets and functions to \
convert between them. We design our function to accept the roster \
representation as input and return a roster representation of the union, \
since this representation is the most natural for humans to interact with. \
However, in implementing the intersection, it is more natural to work with \
the fuzzy bit string representation of the sets.\
\>", "Text",ExpressionUUID->"51aeb4b7-eae1-4c58-8804-2cb56bbc622f"],

Cell[TextData[{
 "Our ",
 StyleBox["fuzzyUnion", "Code"],
 " function will accept as input two fuzzy sets in the roster representation. \
It proceeds as follows."
}], "Text",ExpressionUUID->"c647a494-0adb-4083-b294-a128037a56d7"],

Cell[CellGroupData[{

Cell[TextData[{
 "Determine the effective universe for the two sets. To do this, we will make \
use of the symbol ",
 StyleBox[ButtonBox["All",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/All"], "FunctionLink"],
 " in conjunction with the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") operator. In particular, ",
 StyleBox["A[[All,1]]", "Code"],
 ", will produce the list of first elements of every sublist of ",
 StyleBox["A", "Code"],
 ". "
}], "Item1Numbered",ExpressionUUID->"00bfad65-3774-4e3b-8b3d-1b907f5a1934"],

Cell[TextData[{
 "Use ",
 StyleBox["rosterToBit", "Code"],
 " to convert both sets to their fuzzy bit representations."
}], "Item1Numbered",ExpressionUUID->"129c389d-34b6-4b27-bc98-270cd668fcc9"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Min",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Min"], "FunctionLink"],
 " function will determine the smallest among its arguments. Using ",
 StyleBox[ButtonBox["MapThread",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MapThread"], "FunctionLink"],
 " in conjunction with ",
 StyleBox[ButtonBox["Min",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Min"], "FunctionLink"],
 " on the pair of fuzzy bit strings produces the list whose elements are the \
minimums of the corresponding entries in ",
 StyleBox["A", "Code"],
 " and ",
 StyleBox["B", "Code"],
 "."
}], "Item1Numbered",ExpressionUUID->"81763611-25d8-407e-b2e3-efa678fd695a"],

Cell[TextData[{
 "Use ",
 StyleBox["bitToRoster", "Code"],
 " on the result to obtain the roster representation."
}], "Item1Numbered",ExpressionUUID->"3a593784-ce6f-4491-a825-f6750150dfbc"]
}, Open  ]],

Cell["Here is the implementation.", "Text",ExpressionUUID->"f69b0d84-04b7-4f04-9aae-481d63836572"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fuzzyIntersectionCP", "[", 
   RowBox[{"A_", ",", "B_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"U", ",", "Abits", ",", "Bbits", ",", "resultBits"}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"U", "=", 
      RowBox[{"Union", "[", 
       RowBox[{
        RowBox[{"A", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
        RowBox[{"B", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Abits", "=", 
      RowBox[{"rosterToBit", "[", 
       RowBox[{"A", ",", "U"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Bbits", "=", 
      RowBox[{"rosterToBit", "[", 
       RowBox[{"B", ",", "U"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"resultBits", "=", 
      RowBox[{"MapThread", "[", 
       RowBox[{"Min", ",", 
        RowBox[{"{", 
         RowBox[{"Abits", ",", "Bbits"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"bitToRoster", "[", 
      RowBox[{"resultBits", ",", "U"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[422]:=",ExpressionUUID->"01f5d71a-5579-4c2b-b433-1c4e8db6e327"],

Cell["\<\
As an example, we will compute the union of the fuzzy sets defined below.\
\>", "Text",ExpressionUUID->"df594ce6-7a0c-41fc-bbbe-8d475e050765"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fuzzyA", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<a\>\"", ",", "0.1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<b\>\"", ",", "0.3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<c\>\"", ",", "0.7"}], "}"}]}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[423]:=",ExpressionUUID->"7b9d7896-6cdc-4fdd-bc82-0d9613f6c8db"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "0.1`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "0.3`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "0.7`"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[423]=",ExpressionUUID->"b9f6898e-f199-422a-b093-b9e9cd0bffd6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fuzzyB", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<a\>\"", ",", "0.5"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<b\>\"", ",", "0.1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<d\>\"", ",", "0.2"}], "}"}]}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[424]:=",ExpressionUUID->"fec8dbd7-6868-49ed-931a-d2a4b3b2522d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "0.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "0.1`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"d\"\>", ",", "0.2`"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[424]=",ExpressionUUID->"b345c1d5-4a2c-4033-a214-5f15193424ce"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fuzzyIntersectionCP", "[", 
  RowBox[{"fuzzyA", ",", "fuzzyB"}], "]"}]], "Input",
 CellLabel->
  "In[425]:=",ExpressionUUID->"c3bde0a6-eca7-48d5-abe5-a80f9729e8c5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "0.1`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "0.1`"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[425]=",ExpressionUUID->"ec753c66-027c-4caf-98af-0c3d04dd3d17"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computer Projects 9", "Subsection",
 CellTags->
  "SolutionsCP9",ExpressionUUID->"d0c5bac7-d7f1-462d-858d-dd8fc000d2f6"],

Cell["Given a square matrix, determine whether it is symmetric.", "Problem",ExpressionUUID->"3fd98236-a885-4c3c-ba69-94e247541350"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " We will create a function, ",
 StyleBox["symmetricQ", "Code"],
 ", that tests a matrix to see if it is symmetric. Recall that a matrix is \
symmetric when it is equal to its transpose. Therefore, we just need to use \
the ",
 StyleBox[ButtonBox["Equal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equal"], "FunctionLink"],
 " (",
 StyleBox["==", "Code"],
 ") operator to compare the matrix with the result of applying ",
 StyleBox[ButtonBox["Transpose",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Transpose"], "FunctionLink"],
 ". We will use ",
 StyleBox[ButtonBox["MatrixQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MatrixQ"], "FunctionLink"],
 " to ensure that the argument to the function is in fact a matrix."
}], "Text",ExpressionUUID->"3f2ad0ad-5fdc-4fd5-9154-530384df0a38"],

Cell[BoxData[
 RowBox[{
  RowBox[{"symmetricQ", "[", 
   RowBox[{"m_", "?", "MatrixQ"}], "]"}], ":=", 
  RowBox[{"m", "\[Equal]", 
   RowBox[{"Transpose", "[", "m", "]"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[426]:=",ExpressionUUID->"69c605ee-c4ec-4e08-a3a1-ecbb11315365"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"symmetricExample", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "5", ",", "6"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"symmetricExample", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[427]:=",ExpressionUUID->"4fe38a71-3394-4efc-ad0d-7f77912ee729"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "2", "3"},
     {"2", "4", "5"},
     {"3", "5", "6"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[428]//MatrixForm=",ExpressionUUID->"22c93d13-8445-48a0-9678-\
c2cad9a8c3cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"symmetricQ", "[", "symmetricExample", "]"}]], "Input",
 CellLabel->
  "In[429]:=",ExpressionUUID->"7b49b749-70cc-4ec6-890a-f3b281b8e149"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[429]=",ExpressionUUID->"fe636908-d7e0-4b2d-b501-7a9568947279"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"notsymmetricExample", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"notsymmetricExample", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[430]:=",ExpressionUUID->"09aaabf8-2338-4849-9b0d-538e0ffdd13f"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "2", "3"},
     {"4", "5", "6"},
     {"7", "8", "9"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[431]//MatrixForm=",ExpressionUUID->"20f8050e-c557-43e7-bbba-\
76614d92a271"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"symmetricQ", "[", "notsymmetricExample", "]"}]], "Input",
 CellLabel->
  "In[432]:=",ExpressionUUID->"fc5a80d7-7481-4869-89cc-4651b9c7cc2c"],

Cell[BoxData["False"], "Output",
 CellLabel->
  "Out[432]=",ExpressionUUID->"c41c4c84-fc2b-48e4-8058-77d12bb8b82d"]
}, Open  ]],

Cell[TextData[{
 "Note that the Wolfram Language has a built-in function for checking whether \
a matrix is symmetric: ",
 StyleBox[ButtonBox["SymmetricMatrixQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SymmetricMatrixQ"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"691aaaa9-e2bb-4992-9c51-0b0adbdcb177"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computations and Explorations 2", "Subsection",
 CellTags->
  "SolutionsCE2",ExpressionUUID->"3227128e-654b-4104-a171-9ee94d1b1ea4"],

Cell["Given a finite set, list all elements of its power set.", "Problem",ExpressionUUID->"a0d930aa-bd23-4bc8-8917-da11282b2202"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " The ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " function was described in Section 2.1 above. We will write a function \
independent of this built-in command in order to see how such a command might \
be created."
}], "Text",ExpressionUUID->"1ed185d9-0b89-4745-9f00-186199b33f72"],

Cell[TextData[{
 "Recall from Section 2.2 of the text that sets may be represented by bit \
strings. In particular, given a set, say ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"65c34b35-05e5-4cee-9500-96f165c0ecf4"],
 ", a subset may be represented by a string of 0s and 1s provided an order \
has been imposed on the set. For example, the string ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", ",", "1", ",", "1", ",", "0", ",", "0"}], TraditionalForm]],
  ExpressionUUID->"c4b05a2d-2386-45cd-8e17-faaa5e771076"],
 " corresponds to the subset ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"b", ",", "c"}], "}"}], TraditionalForm]],ExpressionUUID->
  "fc3df431-3411-4ab7-a617-c8cfaf5d6de0"],
 ". (Refer to the textbook for a complete explanation.)"
}], "Text",ExpressionUUID->"685b371e-75d0-4166-b329-751a8924b197"],

Cell["\<\
In terms of subsets, the bit string representation indicates that, for a \
given set, there is a one-to-one correspondence between subsets and bit \
strings. This means that we can solve the problem of listing all subsets of a \
given set by producing all corresponding bit strings.\
\>", "Text",ExpressionUUID->"e248bac2-8ea2-4217-b279-96c979a88e85"],

Cell[TextData[{
 "To create the bit strings, we follow the approach used in the function ",
 StyleBox["nextTA", "Code"],
 " from Section 1.3 of this manual. Given any bit string, the next string is \
obtained by working left to right: if a bit is 1, then it gets changed to a \
0. When you encounter a 0 bit, it is changed to a 1 and you stop the process. \
For example, suppose the current string is"
}], "Text",ExpressionUUID->"c90898f9-64b3-4a14-96b0-dd77032fa0f1"],

Cell[BoxData[
 FormBox[
  RowBox[{"1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0."}], 
  TraditionalForm]], "Equation",ExpressionUUID->"d416e7da-a11a-43ff-96a6-\
dda5a6600ee9"],

Cell["\<\
You begin on the left changing the first three 1s to 0s. The fourth bit from \
the left is 0, so this is changed to a 1 and the process stops. The new bit \
string is\
\>", "Text",ExpressionUUID->"8cc4525c-5450-4e32-9789-8a623655f0b8"],

Cell[BoxData[
 FormBox[
  RowBox[{"0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0."}], 
  TraditionalForm]], "Equation",ExpressionUUID->"494f0923-04b3-419a-aec9-\
a59717ffd879"],

Cell[TextData[{
 "Here is the ",
 StyleBox["nextBitS", "Code"],
 " (next bit string) function. It accepts a bit string and implements the \
process described above to produce the next bit string. "
}], "Text",ExpressionUUID->"4050afac-8c7d-45a8-ae5e-b2da5fbf1cba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"nextBitS", "[", "lastBitS_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"newBitS", ",", "i"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newBitS", "=", "lastBitS"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "1"}], ",", 
         RowBox[{"i", "\[LessEqual]", 
          RowBox[{"Length", "[", "lastBitS", "]"}]}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"newBitS", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "\[Equal]", "1"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"newBitS", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "=", "0"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"newBitS", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "=", "1"}], ";", 
            RowBox[{"Throw", "[", "newBitS", "]"}]}]}], "\[IndentingNewLine]",
           "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"Throw", "[", "Null", "]"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[433]:=",ExpressionUUID->"032ae186-2bed-4cff-8a72-ada7562d8a51"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nextBitS", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0"}], 
   "}"}], "]"}]], "Input",
 CellLabel->
  "In[434]:=",ExpressionUUID->"962a27ff-7d2d-470c-a52d-875a75c8de64"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[434]=",ExpressionUUID->"1a98f897-dec2-4cbd-9c54-ef0fd539db88"]
}, Open  ]],

Cell[TextData[{
 "Next, we need a way to convert a bit string into a subset of a given set. \
We can do this using a combination of the built-in function ",
 StyleBox[ButtonBox["Position",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Position"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Extract",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Extract"], "FunctionLink"],
 ". "
}], "Text",ExpressionUUID->"6ff25aa7-2d11-4f20-bce9-38951e7234e0"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Position",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Position"], "FunctionLink"],
 " function accepts an expression (in this case the list representing the bit \
string) and a pattern (in this case 1) and returns a list of the positions \
within the expression at which you can find the pattern. For example, if we \
apply ",
 StyleBox[ButtonBox["Position",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Position"], "FunctionLink"],
 " to the bit string ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0"}],
     "}"}], TraditionalForm]],ExpressionUUID->
  "08ad441a-36d2-4d9a-a00d-de8fb078c387"],
 " and 1, it indicates that the 1s occur in positions 1, 2, 3, and 6."
}], "Text",ExpressionUUID->"e5237db0-81cc-43f8-95a4-3fdaa468f892"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0"}],
     "}"}], ",", "1"}], "]"}]], "Input",
 CellLabel->
  "In[435]:=",ExpressionUUID->"bc6582bd-4eb1-4618-a04a-18fb478696a4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "6", "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[435]=",ExpressionUUID->"0f8903ed-f838-409b-8392-c5e1d62dca4c"]
}, Open  ]],

Cell[TextData[{
 "Note that the format of the output is designed to accommodate nesting in \
the expression being searched. Conveniently, the format is identical to what \
is expected by the function ",
 StyleBox[ButtonBox["Extract",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Extract"], "FunctionLink"],
 ". Recall that ",
 StyleBox[ButtonBox["Extract",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Extract"], "FunctionLink"],
 ", first described in Section 2.2 of this manual, will output the list of \
elements from the first argument specified by the second. (",
 StyleBox[ButtonBox["Extract",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Extract"], "FunctionLink"],
 " can also simultaneously apply a function to the result, but that feature \
is not needed here.)"
}], "Text",ExpressionUUID->"c7c864a0-3c38-4473-baa8-d9bc29125dd3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\"", ",", 
     "\"\<e\>\"", ",", "\"\<f\>\"", ",", "\"\<g\>\""}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Position", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0"}], 
      "}"}], ",", "1"}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[436]:=",ExpressionUUID->"9dc4eec5-7dde-4818-855e-d1900b630b26"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"f\"\>"}],
   "}"}]], "Output",
 CellLabel->
  "Out[436]=",ExpressionUUID->"f936ae4b-6773-4af8-9f5e-bfdfa149a580"]
}, Open  ]],

Cell[TextData[{
 "We create a function, ",
 StyleBox["bitToSubset", "Code"],
 ", based on that approach."
}], "Text",ExpressionUUID->"7d567649-58c7-4d90-885d-e5e7b8943cb7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"bitToSubset", "[", 
   RowBox[{"bitS_", ",", "set_"}], "]"}], ":=", 
  RowBox[{"Extract", "[", 
   RowBox[{"set", ",", 
    RowBox[{"Position", "[", 
     RowBox[{"bitS", ",", "1"}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[437]:=",ExpressionUUID->"f6c1f3c7-6617-4fc1-a247-eb3e1062595f"],

Cell["\<\
We can now combine these two functions to compute the power set of a given \
set.\
\>", "Text",ExpressionUUID->"6560001b-c0f2-420d-8f45-d7a87a0985a9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"powerSet", "[", "set_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "bitS", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"bitS", "=", 
      RowBox[{"Table", "[", 
       RowBox[{"0", ",", 
        RowBox[{"{", 
         RowBox[{"Length", "[", "set", "]"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"bitS", "=!=", "Null"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"bitToSubset", "[", 
          RowBox[{"bitS", ",", "set"}], "]"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"bitS", "=", 
         RowBox[{"nextBitS", "[", "bitS", "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[438]:=",ExpressionUUID->"9843d93d-0ba6-4de9-b4ee-d89111ad8bc4"],

Cell[TextData[{
 "We apply our function to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], TraditionalForm]],
  ExpressionUUID->"54b8a072-e3f9-41b0-991d-fe0d9db0e2b0"],
 " to confirm that it is functioning properly."
}], "Text",ExpressionUUID->"2d0e5594-e786-4b07-b662-877cf6445e7b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"powerSet", "[", 
  RowBox[{"{", 
   RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}], 
  "]"}]], "Input",
 CellLabel->
  "In[439]:=",ExpressionUUID->"889ebf6f-20c0-4194-98c8-4692923ed9fa"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[439]:=",ExpressionUUID->"48980dad-bc89-4622-ae7b-dd2faa4826f1"],

Cell[BoxData[
 RowBox[{"{", "\<\"a\"\>", "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[439]:=",ExpressionUUID->"f8d8dd9f-a7b0-4f6f-835c-3dc53ce8a1eb"],

Cell[BoxData[
 RowBox[{"{", "\<\"b\"\>", "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[439]:=",ExpressionUUID->"0b5cd6ce-ff2e-4a52-b73e-8e40e168066e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[439]:=",ExpressionUUID->"7d2095ae-0004-4e4a-ac77-e746547f9abf"],

Cell[BoxData[
 RowBox[{"{", "\<\"c\"\>", "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[439]:=",ExpressionUUID->"e43a7228-d15a-496d-871a-a6cfb6337f29"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[439]:=",ExpressionUUID->"b162d8ab-c860-47aa-b06f-689f250a6b5d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[439]:=",ExpressionUUID->"e56e32c8-e9e9-4104-93b6-8cdb51ebee82"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[439]:=",ExpressionUUID->"70044089-fcaf-438c-8ead-51b43a39d853"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exercises", "Section",
 CellTags->"Exercises",ExpressionUUID->"a84f6dc0-90a2-4dd3-b367-56577e68abd2"],

Cell[TextData[{
 "Write a function ",
 StyleBox["disjointQ", "Code"],
 " that accepts two sets as arguments and returns true if the sets are \
disjoint and false otherwise."
}], "Item1Exercise",ExpressionUUID->"00612cb2-1a3b-4a78-9457-69354717c291"],

Cell[TextData[{
 "Write a function, ",
 StyleBox["cartesian", "Input",
  IgnoreSpellCheck->True],
 ", to compute the Cartesian product of two sets."
}], "Item1Exercise",ExpressionUUID->"611c0055-e33d-49a7-b3a9-e745dd7b5ed7"],

Cell[TextData[{
 "Write functions ",
 StyleBox["fuzzyUnion", "Code"],
 " and ",
 StyleBox["fuzzyComplement", "Code"],
 " to complete Computer Project 3."
}], "Item1Exercise",ExpressionUUID->"17706863-03da-4cfe-9a86-669cd7a82037"],

Cell["\<\
Write functions for computing the complement, union, intersection, \
difference, and sum for multisets. (Refer to Section 2.2 for information \
about multisets.)\
\>", "Item1Exercise",ExpressionUUID->"c53bfc8c-97c1-4dbe-8853-d2387f1b9e52"],

Cell[TextData[{
 "Write functions to compute the ",
 StyleBox["Jaccard",
  IgnoreSpellCheck->True],
 " similarity and ",
 StyleBox["Jaccard",
  IgnoreSpellCheck->True],
 " distance between sets."
}], "Item1Exercise",ExpressionUUID->"51fe2275-16ac-4c30-815c-91a843c1af09"],

Cell["\<\
Write procedures to compute the image of a finite set under a function. \
Create one procedure for functions defined in the usual way and a second \
procedure for functions defined via indexed variables.\
\>", "Item1Exercise",ExpressionUUID->"925d5018-5b63-49d3-a56a-450c89c2273e"],

Cell["\<\
Write a procedure to find the inverse of a function defined by an association.\
\>", "Item1Exercise",ExpressionUUID->"041feb9c-0d1a-4df5-8ada-d2d191ff7d68"],

Cell["\<\
Write a procedure to find the composition of functions defined by \
associations.\
\>", "Item1Exercise",ExpressionUUID->"7d15b6a3-669c-4ff3-b1d7-b4db0956ca78"],

Cell[TextData[{
 "Use computation to discover what the largest value of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "e9e3bdb8-5362-49c6-8875-236dddd6444b"],
 " is for which ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "!"}], TraditionalForm]],ExpressionUUID->
  "e3a954c8-898c-43c7-9deb-f5a25c45fb38"],
 " has fewer than 1000 digits. (Hint: the ",
 StyleBox[ButtonBox["IntegerLength",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerLength"], "FunctionLink"],
 " command applied to an integer will return the number of digits of the \
integer.)"
}], "Item1Exercise",ExpressionUUID->"7bef36d8-610b-446b-a9ce-4c6f1946f9e3"],

Cell[TextData[{
 "Write a function ",
 StyleBox["arithmeticSequence", "Code"],
 ", modeled on ",
 StyleBox["geometricSequence2", "Code"],
 " above, that produces an arithmetic sequence."
}], "Item1Exercise",ExpressionUUID->"a3302f20-944e-48e3-9a2c-645089494440"],

Cell[CellGroupData[{

Cell["\<\
Find the first 20 terms of the sequences defined by the recurrence relations \
below.\
\>", "Item1Exercise",ExpressionUUID->"e7c0ae31-0b5b-4b62-8484-a7f4c1cbe0b1"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "n"], "=", 
    RowBox[{
     RowBox[{"2", 
      SubscriptBox["a", 
       RowBox[{"n", "-", "1"}]]}], "+", 
     RowBox[{"3", 
      SubscriptBox["a", 
       RowBox[{"n", "-", "2"}]]}]}]}], TraditionalForm]],ExpressionUUID->
  "9b51cdab-7d85-43dd-928b-ec862f9cee02"],
 ", with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "1"], "=", "1"}], TraditionalForm]],ExpressionUUID->
  "6c7b8adb-2422-40e2-b5a7-8570ddf62db8"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "2"], "=", "0"}], TraditionalForm]],ExpressionUUID->
  "6897b677-2e86-476c-8b28-edb180167138"],
 "."
}], "Item2Numbered",ExpressionUUID->"b65708bc-9444-4af8-903e-194b81d4384a"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "n"], "=", 
    RowBox[{
     SubscriptBox["a", 
      RowBox[{"n", "-", "1"}]], "+", 
     RowBox[{"n", " ", 
      SubscriptBox["a", 
       RowBox[{"n", "-", "2"}]]}], "+", 
     RowBox[{
      SuperscriptBox["n", "2"], 
      SubscriptBox["a", 
       RowBox[{"n", "-", "3"}]]}]}]}], TraditionalForm]],ExpressionUUID->
  "090b9212-64f2-4791-958a-b7a82c9ac9a7"],
 ", with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "1"], "=", "1"}], TraditionalForm]],ExpressionUUID->
  "d5ac3335-38a3-45ce-8d6a-0b17a9cf1776"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "2"], "=", "1"}], TraditionalForm]],ExpressionUUID->
  "3d41bd16-644e-4812-b59c-2a1d0a5a6c49"],
 ", and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "3"], "=", "3"}], TraditionalForm]],ExpressionUUID->
  "38f808d8-d97b-4c12-9b4b-dfa6d77c4d79"],
 "."
}], "Item2Numbered",ExpressionUUID->"027912f1-24a2-4bf4-a898-d33c7a25e940"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "n"], "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["a", 
       RowBox[{"n", "-", "1"}]], "\[CenterDot]", 
      SubscriptBox["a", 
       RowBox[{"n", "-", "2"}]]}], "+", "1"}]}], TraditionalForm]],
  ExpressionUUID->"f53f4859-6ed0-4fda-afbd-5aea1a217cff"],
 ", with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "1"], "=", 
    RowBox[{
     SubscriptBox["a", "2"], "=", "1"}]}], TraditionalForm]],ExpressionUUID->
  "b7ed26b9-7452-4f9c-9007-55150a6ca433"],
 "."
}], "Item2Numbered",ExpressionUUID->"220b19d3-397f-4fa3-9c91-dbc4c4e53f12"]
}, Open  ]],

Cell[TextData[{
 "The Lucas numbers satisfy the recurrence ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["L", "n"], "=", 
    RowBox[{
     SubscriptBox["L", 
      RowBox[{"n", "-", "1"}]], "+", 
     SubscriptBox["L", 
      RowBox[{"n", "-", "2"}]]}]}], TraditionalForm]],ExpressionUUID->
  "d5becfa2-65e3-4efe-ab26-2efe898a19a7"],
 " and the initial conditions ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["L", "1"], "=", "2"}], TraditionalForm]],ExpressionUUID->
  "67e10c14-e3ab-46b9-ac1b-1e8774e630fb"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["L", "2"], "=", "2"}], TraditionalForm]],ExpressionUUID->
  "72e1c76d-fb7b-457c-a184-b9f015984344"],
 ". Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to gain evidence for conjectures about the divisibility of Lucas numbers \
by different integer divisors."
}], "Item1Exercise",ExpressionUUID->"9e0a9b21-18d5-4bab-9a1e-887fa122cccd"],

Cell[TextData[{
 "Write a function to find the first ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "6cdba20f-d012-4dae-ac14-f88fc79fdfcb"],
 " Ulam numbers and use the function to find as many Ulam numbers as you can. \
(Ulam numbers are defined in Exercise 28 of the Supplementary Exercises for \
Chapter 2.)"
}], "Item1Exercise",ExpressionUUID->"fe8da258-4c39-46ef-ba73-933e1114c043"],

Cell[TextData[{
 "Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to find formulas for the sum of the ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "a50ef8ae-9486-4e79-9922-80c97c976b51"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " powers of the first ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "bf969c35-1eca-42ee-893a-9f1d78b5d84a"],
 " positive integers for ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "b56c0df9-283a-4bff-b048-caa88e64a8bf"],
 " up to 10."
}], "Item1Exercise",ExpressionUUID->"94384aa9-cb98-4236-af39-b0d2d27d8e0f"],

Cell[TextData[{
 "The calculation of ",
 StyleBox["dataTable", "Code"],
 " above is very inefficient, because ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " must recalculate the entire list of rational numbers for each value from 2 \
to 100. Create a new function, ",
 StyleBox["listActuals", "Code"],
 ", that accepts a maximum stage as input and returns the list whose entries \
are the values of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"F", "(", "n", ")"}], TraditionalForm]],ExpressionUUID->
  "1486722b-3a94-482c-aacd-82074dddbad4"],
 ". You can do this by modifying ",
 StyleBox["listRationals", "Code"],
 " so that at the completion of each stage, the size of ",
 StyleBox["L", "Code"],
 ", that is, the value ",
 Cell[BoxData[
  FormBox[
   RowBox[{"F", "(", "n", ")"}], TraditionalForm]],ExpressionUUID->
  "12a847cc-71a5-4598-bfbe-6a588b11d43a"],
 ", is recorded in a list."
}], "Item1Exercise",ExpressionUUID->"07e2f6bb-07b3-4db9-ab92-57422c24ade6"],

Cell[TextData[{
 "Find a value ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "17809c09-da4e-4d3b-8be4-b4a1ff54eb76"],
 " so that the graph of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"R", "\[CenterDot]", 
    FractionBox[
     RowBox[{
      SuperscriptBox["n", "2"], "-", "n"}], "2"]}], TraditionalForm]],
  ExpressionUUID->"e36a2c9b-fd5a-4550-a3ac-bc73bce8515f"],
 " is just above the graph of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"F", "(", "n", ")"}], TraditionalForm]],ExpressionUUID->
  "a651dc38-5a6a-4d6f-bc5b-20e78358f5fe"],
 ". Use your ",
 StyleBox["listActuals", "Code"],
 " function to expand the data and refine the value of ",
 Cell[BoxData[
  FormBox["R", TraditionalForm]],ExpressionUUID->
  "0bfc2ec1-0943-4a35-b9ed-467c53218060"],
 "."
}], "Item1Exercise",ExpressionUUID->"612f7193-ad6c-4d50-aa49-410f9b1cd799"],

Cell[TextData[{
 "Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to find the 100th positive rational number in the list generated by ",
 StyleBox["listRationals", "Code"],
 ". What about the 1000th? ",
 Cell[BoxData[
  FormBox["10000", TraditionalForm]],ExpressionUUID->
  "50646ead-07e1-48de-9978-8c041901d34f"],
 "th? (If you completed it, the result of the previous exercise can be \
helpful.)"
}], "Item1Exercise",ExpressionUUID->"abb96ae4-640b-4df8-8277-894c99580a00"]
}, Open  ]]
},
CellGrouping->Manual,
WindowSize->{721, 938},
WindowMargins->{{22, Automatic}, {Automatic, 0}},
DockedCells->Cell[
  BoxData[
   TagBox[
    GridBox[{{"\"Exploring Discrete Mathematics with Mathematica\"", 
       ActionMenuBox[
       "\"Navigation\"", {
        "\"CloseAll\"" :> Module[{$CellContext`DJSection$}, SelectionMove[
             SelectedNotebook[], All, Notebook]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; 
           Do[NotebookLocate[$CellContext`DJSection$]; FrontEndExecute[
               FrontEndToken["OpenCloseGroup"]], {$CellContext`DJSection$, {
              "Section1a", "Section1b", "Section1c", "Section2a", "Section2b",
                "Section2c", "Section3a", "Section3b", "Section3c", 
               "Section3d", "Section4a", "Section4b", "Section4c", 
               "Section4d", "Section4e", "Section5a", "Section5b", 
               "Section6a", "Section6b", "Section6c", "Section6d", 
               "SolutionsCE2", "SolutionsCP3", "SolutionsCP9", "Section1", 
               "Section2", "Section3", "Section4", "Section5", "Section6", 
               "Solutions", "Exercises"}}]; SelectionMove[
             SelectedNotebook[], Before, Notebook]], "\"Section1\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section1"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section2\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section2"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section3\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section3"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section4\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section4"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section5\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section5"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section6\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section6"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Solutions\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Solutions"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Exercises\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Exercises"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Open All\"" :> 
         Module[{$CellContext`DJSection$}, 
           Do[NotebookLocate[$CellContext`DJSection$]; FrontEndExecute[
               FrontEndToken[
               "SelectionOpenAllGroups"]], {$CellContext`DJSection$, {
              "Exercises", "Info3113736248549-4600312", 
               "Info3173736248561-4600312", "Info3213736248583-4600312", 
               "Info3233736248586-4600312", "Section1", "Section1a", 
               "Section1b", "Section1c", "Section2", "Section2a", "Section2b",
                "Section2c", "Section3", "Section3a", "Section3b", 
               "Section3c", "Section3d", "Section4", "Section4a", "Section4b",
                "Section4c", "Section4d", "Section4e", "Section5", 
               "Section5a", "Section5b", "Section6", "Section6a", "Section6b",
                "Section6c", "Section6d", "Solutions", "SolutionsCE2", 
               "SolutionsCP3", "SolutionsCP9"}}] SelectionMove[
             SelectedNotebook[], Before, Notebook]]}]}}, 
     GridBoxAlignment -> {
      "Columns" -> {Left, Baseline}, "Rows" -> {Right, Baseline}}, AutoDelete -> 
     False, GridBoxItemSize -> {"Columns" -> {
         Scaled[0.8], 
         Scaled[0.2]}}], "Grid"]], "DockedCell", FontFamily -> "Times"],
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
ShowSelection->True,
Magnification->1,
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"Book"}, "Textbook.nb", CharacterEncoding -> 
       "UTF-8"]]], 
   Cell[
    StyleData[All, "Printout"], PageWidth -> PaperWidth, 
    CellHorizontalScrolling -> True, 
    CellLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
    ShowAutoStyles -> False, 
    AutoStyleOptions -> {"HighlightMisspelledWords" -> False}, ScriptMinSize -> 
    9, MenuSortingValue -> 1500, 
    PrivateFontOptions -> {"FontType" -> "Outline"}, Magnification -> 1], 
   Cell[
    StyleData["Title"], Editable -> False, ShowCellBracket -> Automatic, 
    CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
    DefaultNewInlineCellStyle -> {}, LanguageCategory -> "NaturalLanguage", 
    FontFamily -> "Helvetica", FontSize -> 25, FontWeight -> "Bold", 
    FontColor -> GrayLevel[0.137255]], 
   Cell[
    StyleData["BookChapterTitle", StyleDefinitions -> StyleData["Title"]], 
    CellFrame -> {{0, 0}, {1, 1}}, CellDingbat -> Cell[
      BoxData[
       GraphicsBox[{{
          RGBColor[0.09375, 0.570313, 0.816406], 
          RectangleBox[{0, 0}]}, {
          GrayLevel[1], FontSize -> 35, FontWeight -> Bold, FontFamily -> 
          "Helvetica", 
          InsetBox[
           CounterBox["ChapterNumber"], {0.5, 0.45}, {Center, Center}]}}, 
        ImageSize -> {70, 70}]], "Output"], 
    CellMargins -> {{100, 0}, {20, 20}}, CellFrameColor -> GrayLevel[1]], 
   Cell[
    StyleData["DockedCell"], CellMargins -> {{12, 12}, {20, 0}}, 
    CellGroupingRules -> "TitleGrouping", 
    ConversionRules :> {"TeX" -> {"\n\\chapter{", "}"}}, 
    TaggingRules :> {"CounterSettings" -> {"CounterTarget" -> "CellGroup"}}, 
    PageBreakAbove -> False, PageBreakBelow -> False, LineSpacing -> {1, 2}, 
    MenuSortingValue -> 1105, FontFamily -> "Helvetica", FontSize -> 27, 
    FontWeight -> "Bold", Background -> RGBColor[0.09375, 0.570313, 0.816406],
     CounterBoxOptions -> {
     CounterFunction :> Identity}, $CellContext`DefaultReturnCreatedCellStyle -> 
    "Section"], 
   Cell[
    StyleData["FunctionLink"], ConversionRules :> {"TeX" -> {{"", 
         $CellContext`ExportAsHyperRef[], ""}, {"", Automatic, ""}}}, 
    MenuSortingValue -> 1105, ButtonStyleMenuListing -> None, FontFamily -> 
    "Courier", FontVariations -> {"Underline" -> True}, FontColor -> 
    RGBColor[0, 0, 1], 
    ButtonBoxOptions -> {Active -> True, ButtonFunction :> (FrontEndExecute[{
         FrontEnd`NotebookLocate[#2]}]& ), ButtonNote -> ButtonData}], 
   Cell[
    StyleData["Problem"], CellMargins -> {{40, 12}, {15, 15}}, 
    CellGroupingRules -> {"GroupTogetherNestedGrouping", 15010}, 
    ConversionRules :> {
     "TeX" -> {{"", Automatic, ""}, {"\n\n", Automatic, ""}}}, 
    TaggingRules :> {
     "ExtraConversionRules" -> {"General" -> {"RestartList" -> False}}}], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item1Exercise"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Exercise"], "."}], CellSize -> {30, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{50, 12}, {3, 5}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterIncrements -> "Item1Exercise", 
       CounterAssignments -> {{"Item2Exercise", 0}}, MenuSortingValue -> 
       4100], 
      Cell[
       StyleData["Item1Exercise", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Exercise"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{35, 12}, {3, 5}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["ExerciseContinuation"], CellMargins -> {{50, 12}, {1, 3}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, MenuSortingValue -> 4101], 
      Cell[
       StyleData["ExerciseContinuation", "Printout"], 
       CellMargins -> {{35, 12}, {1, 3}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item2Exercise"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item2Exercise"], "."}], CellSize -> {32, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{75, 12}, {1, 2}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17100}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterIncrements -> "Item2Exercise", MenuSortingValue -> 4200, 
       CounterBoxOptions -> {CounterFunction :> (Part[
           CharacterRange["a", "z"], #]& )}], 
      Cell[
       StyleData["Item2Exercise", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item2Exercise"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{50, 12}, {1, 2}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterBoxOptions -> {CounterFunction :> (Part[
           CharacterRange["a", "z"], #]& )}]}, Open]], 
   Cell[
    StyleData["ExerciseEquation"], CellMargins -> {{36, 12}, {7, 7}}, 
    CellGroupingRules -> {"GroupTogetherNestedGrouping", 17200}, 
    CellHorizontalScrolling -> True, 
    CellFrameLabels -> {{None, None}, {None, None}}, DefaultFormatType -> 
    TraditionalForm, InputAutoReplacements -> {}, TextAlignment -> Center, 
    MenuSortingValue -> 4300, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}], 
   Cell[
    StyleData["myCode"], CellMargins -> {{66, 10}, {5, 10}}, 
    StyleKeyMapping -> {"=" -> "WolframAlphaShort"}, Evaluatable -> False, 
    CellGroupingRules -> "InputGrouping", TextClipboardType -> "InputText", 
    PageBreakWithin -> False, GroupPageBreakWithin -> False, 
    DefaultFormatType -> DefaultInputFormatType, ContextMenu -> 
    FEPrivate`FrontEndResource["ContextMenus", "myCode"], ShowAutoStyles -> 
    True, "TwoByteSyntaxCharacterAutoReplacement" -> True, 
    HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"}, 
    AutoItalicWords -> {}, AutoQuoteCharacters -> {}, 
    PasteAutoQuoteCharacters -> {}, LanguageCategory -> "Mathematica", 
    FormatType -> InputForm, NumberMarks -> True, 
    LinebreakAdjustments -> {0.85, 2, 10, 0, 1}, CounterIncrements -> "Code", 
    MenuSortingValue -> 1495, MenuCommandKey -> "8", FontWeight -> 
    "Bold", $CellContext`StripStyleOnPaste -> True], 
   Cell[
    StyleData["CodeVar"], DefaultFormatType -> DefaultInputFormatType, 
    LineBreakWithin -> False, MenuSortingValue -> 10000, FontWeight -> "Bold",
     FontSlant -> "Italic", FontColor -> GrayLevel[0.4]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Section"], CellFrame -> {{6, 0}, {0, 1}}, ShowCellBracket -> 
       Automatic, CellMargins -> {{12, 12}, {3, 24}}, 
       CellGroupingRules -> {"SectionGrouping", 30}, 
       ConversionRules :> {
        "TeX" -> {"\n\\section{", "}"}, 
         "HTML" -> {"<h3 class=\"Section\">", "</h3>"}}, 
       TaggingRules :> {
        "CounterSettings" -> {
          "CounterFormat" -> {"BookChapterNumber", ".", "Section"}, 
           "CounterTarget" -> "Cell", "XRefPrefix" -> "Section"}}, 
       PageBreakBelow -> False, CellFrameMargins -> {{8, 8}, {4, 6}}, 
       CellFrameColor -> RGBColor[0.09375, 0.570313, 0.816406], TabSpacings -> 
       2.1, CounterIncrements -> {
        "Section", "SectionHeader", "SubsectionHeader", "SubsubsectionHeader",
          "SubsubsubsectionHeader"}, FontFamily -> "Helvetica", FontSize -> 
       16, FontWeight -> "Bold", Background -> GrayLevel[0.999985]], 
      Cell[
       StyleData["Section", "Printout"], CellFrame -> {{4, 0}, {0, 0.5}}, 
       CellMargins -> {{2, 2}, {3, 21}}, CellFrameMargins -> {{6, 6}, {3, 5}},
        CellFrameColor -> RGBColor[0.09375, 0.570313, 0.816406]], 
      Cell[
       StyleData["Section", "DoubleSpacedPrintout"], 
       CellFrame -> {{4, 0}, {0, 0.5}}, CellMargins -> {{2, 2}, {3, 21}}, 
       CellFrameMargins -> {{6, 6}, {3, 5}}, CellFrameColor -> 
       RGBColor[0.09375, 0.570313, 0.816406], FontSize -> 14]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Subsubsection"], CellDingbat -> None, 
       CellMargins -> {{12, 12}, {0, 6}}, 
       CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
       CellGroupingRules -> {"SectionGrouping", 50}, 
       ConversionRules :> {
        "TeX" -> {"\n\\subsubsection{", "}"}, 
         "HTML" -> {"<h5 class=\"Subsubsection\">", "</h5>"}}, PageBreakBelow -> 
       False, CellFrameLabelMargins -> 4, 
       CounterIncrements -> {
        "Subsubsection", "SubsubsectionHeader", "SubsubsubsectionHeader"}, 
       FontFamily -> "Helvetica", FontSize -> 11, FontWeight -> "Bold", 
       FontSlant -> "Italic"], 
      Cell[
       StyleData["Subsubsection", "Printout"], FontFamily -> "Helvetica", 
       FontSize -> 11, FontWeight -> "Bold", FontSlant -> "Italic"]}, Open]], 
   
   Cell[
    StyleData["Equation"], CellMargins -> {{26, 10}, {7, 7}}, 
    ConversionRules :> {
     "HTML" -> {{"", ""}, {"<p class=\"Equation\">", "</p>"}}}, 
    CellHorizontalScrolling -> True, DefaultFormatType -> TraditionalForm, 
    InputAutoReplacements -> {}, TextAlignment -> Center, CounterIncrements -> 
    "Equation", ButtonBoxOptions -> {Appearance -> {Automatic, None}}], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item1Numbered"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Numbered"], "."}], CellSize -> {32, Inherited}, 
         TextAlignment -> Right, 
         TextJustification -> (FontWeight -> "Plain")], 
       CellMargins -> {{36, 12}, {1, 3}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 15000}, 
       ConversionRules :> {{"TeX" -> {"\n\\item ", ""}}, {
         "HTML" -> {"<li>", "</li>"}}}, 
       TaggingRules :> {
        "ExtraConversionRules" -> {
          "General" -> {"NestingLevel" -> 30}, 
           "TeX" -> {"CellGroupEnvironment" -> "enumerate"}, 
           "HTML" -> {"CellGroupEnvironment" -> "ol"}}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, TextJustification -> 1, CounterIncrements -> "Item1Numbered", 
       CounterAssignments -> {{"Item2Numbered", 0}, {"Item3Numbered", 0}}], 
      Cell[
       StyleData["Item1Numbered", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Numbered"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Plain"], 
       CellMargins -> {{24, 2}, {1, 2}}, CellFrameLabelMargins -> 3, 
       TextJustification -> 1]}, Open]], 
   Cell[
    StyleData["InitializationCell"], Background -> GrayLevel[1]], 
   Cell[
    StyleData["Item1"], TextJustification -> 1], 
   Cell[
    StyleData["Item1Printout"], TextJustification -> 1, MenuSortingValue -> 
    10000], 
   Cell[
    StyleData["Code"], FormatType -> InputForm]}, Visible -> False, 
  FrontEndVersion -> 
  "11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, 2018)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Section1"->{
  Cell[2287, 64, 105, 1, 55, "Section",ExpressionUUID->"27354a6b-880a-4906-8cdb-c65372b7bd14",
   CellTags->"Section1"]},
 "Section1a"->{
  Cell[2725, 77, 111, 1, 32, "Subsection",ExpressionUUID->"6e99df8d-7219-4939-9b6e-d6427dcad09f",
   CellTags->"Section1a"]},
 "Section1b"->{
  Cell[46856, 1418, 132, 1, 32, "Subsection",ExpressionUUID->"68fed074-2acf-46eb-a6ff-27da64d4ffe8",
   CellTags->"Section1b"]},
 "Section1c"->{
  Cell[57670, 1724, 128, 1, 32, "Subsection",ExpressionUUID->"150298f0-d0a4-4762-853d-c62cab32f9f1",
   CellTags->"Section1c"]},
 "Section2"->{
  Cell[64325, 1942, 115, 1, 55, "Section",ExpressionUUID->"19113839-17c8-4f3d-a135-c29e993f8cc3",
   CellTags->"Section2"]},
 "Section2a"->{
  Cell[64931, 1957, 117, 1, 32, "Subsection",ExpressionUUID->"d5f0cb69-cd5d-4315-a463-f8e450da37fe",
   CellTags->"Section2a"]},
 "Section2b"->{
  Cell[72335, 2183, 137, 1, 32, "Subsection",ExpressionUUID->"a1f25d24-ced1-4fcc-90c3-f33dd498c4b6",
   CellTags->"Section2b"]},
 "Section2c"->{
  Cell[178910, 5361, 138, 1, 32, "Subsection",ExpressionUUID->"ab9c1ee4-ca67-412b-853f-85a495c37cd5",
   CellTags->"Section2c"]},
 "Section3"->{
  Cell[227752, 6819, 110, 1, 55, "Section",ExpressionUUID->"e6c90751-d1e3-40ed-bf12-f13c23d685bc",
   CellTags->"Section3"]},
 "Section3a"->{
  Cell[228158, 6830, 110, 1, 32, "Subsection",ExpressionUUID->"d8821b9e-0343-412a-9613-a059e8476eab",
   CellTags->"Section3a"]},
 "Section3b"->{
  Cell[250410, 7512, 115, 1, 32, "Subsection",ExpressionUUID->"79aa057a-ae89-407a-a83c-53659d9a3d0c",
   CellTags->"Section3b"]},
 "Section3c"->{
  Cell[299871, 8740, 113, 1, 32, "Subsection",ExpressionUUID->"8333cb75-60d8-4f5f-9dce-e0c514e2307e",
   CellTags->"Section3c"]},
 "Section3d"->{
  Cell[334953, 9829, 125, 1, 32, "Subsection",ExpressionUUID->"77045512-cba6-456f-8564-d08e41cd1097",
   CellTags->"Section3d"]},
 "Section4"->{
  Cell[339106, 9978, 125, 1, 55, "Section",ExpressionUUID->"1b81f835-117a-4a6d-a31f-c7fe100930e5",
   CellTags->"Section4"]},
 "Section4a"->{
  Cell[340778, 10025, 178, 5, 35, "Subsection",ExpressionUUID->"870a8770-9ef8-467e-8d8c-2a7852f42402",
   CellTags->"Section4a"]},
 "Section4b"->{
  Cell[353859, 10443, 179, 5, 35, "Subsection",ExpressionUUID->"c8b6bc00-53b4-4269-9917-e944eeead80d",
   CellTags->"Section4b"]},
 "Section4c"->{
  Cell[365922, 10844, 195, 6, 35, "Subsection",ExpressionUUID->"16ae9813-9400-4c69-b133-78a5ece56926",
   CellTags->"Section4c"]},
 "Section4d"->{
  Cell[392997, 11681, 121, 1, 32, "Subsection",ExpressionUUID->"4b3f2975-a7f5-49ef-a0c8-258837daa448",
   CellTags->"Section4d"]},
 "Info3093738413500-3998906"->{
  Cell[398083, 11843, 146, 3, 45, "Print",ExpressionUUID->"b12db159-5375-4494-8d2b-9dfaa1888b49",
   CellTags->"Info3093738413500-3998906"],
  Cell[398232, 11848, 969, 29, 61, "Print",ExpressionUUID->"e21f23fa-3087-44ea-8136-f82948ca1fbd",
   CellTags->"Info3093738413500-3998906"]},
 "Info3153738413500-3998906"->{
  Cell[402425, 11984, 141, 3, 45, "Print",ExpressionUUID->"541c387f-da41-4b86-9477-a5efe6ddbc13",
   CellTags->"Info3153738413500-3998906"],
  Cell[402569, 11989, 1162, 36, 93, "Print",ExpressionUUID->"d14a5909-5201-465f-bc1b-67fa633254a2",
   CellTags->"Info3153738413500-3998906"]},
 "Info3193738413500-3998906"->{
  Cell[406221, 12104, 142, 3, 45, "Print",ExpressionUUID->"8b1fad1f-23c4-47f3-b3a3-bd8cdde5eef5",
   CellTags->"Info3193738413500-3998906"],
  Cell[406366, 12109, 1242, 38, 93, "Print",ExpressionUUID->"0d452bab-700d-4f85-9372-9bc6cd7abfdc",
   CellTags->"Info3193738413500-3998906"]},
 "Info3213738413500-3998906"->{
  Cell[408069, 12169, 142, 3, 45, "Print",ExpressionUUID->"ae95c73a-7d7c-4bd7-b56d-f5db53266edb",
   CellTags->"Info3213738413500-3998906"],
  Cell[408214, 12174, 1337, 42, 127, "Print",ExpressionUUID->"7a2c7d82-ca5c-4d87-a49a-78afb1448ff1",
   CellTags->"Info3213738413500-3998906"]},
 "Section4e"->{
  Cell[417242, 12447, 111, 1, 32, "Subsection",ExpressionUUID->"010a2594-ce02-47df-8be8-79147cdc8068",
   CellTags->"Section4e"]},
 "Section5"->{
  Cell[429743, 12847, 145, 2, 55, "Section",ExpressionUUID->"c0f7c242-bae3-4501-b997-15827f80acf5",
   PageBreakWithin->False,
   CellTags->"Section5"]},
 "Section5a"->{
  Cell[438783, 13113, 147, 1, 32, "Subsection",ExpressionUUID->"9348afc2-1dcc-40c9-a0e7-5f3b73b7409c",
   CellTags->"Section5a"]},
 "Section5b"->{
  Cell[445687, 13322, 141, 1, 32, "Subsection",ExpressionUUID->"ec78782c-5d62-4fb8-89cf-60f490036d6a",
   CellTags->"Section5b"]},
 "Section6"->{
  Cell[485081, 14248, 109, 1, 55, "Section",ExpressionUUID->"e5eff648-0a7f-4d02-91cc-bf466d1a7ff3",
   CellTags->"Section6"]},
 "Section6a"->{
  Cell[485571, 14260, 122, 1, 32, "Subsection",ExpressionUUID->"f96f17d0-bf51-4701-a9c7-8c955955b68e",
   CellTags->"Section6a"]},
 "Section6b"->{
  Cell[516691, 15246, 118, 1, 32, "Subsection",ExpressionUUID->"7ff08613-5156-4863-9737-50823876e89c",
   CellTags->"Section6b"]},
 "Section6c"->{
  Cell[527181, 15603, 134, 1, 32, "Subsection",ExpressionUUID->"9ca9c11c-3503-41b7-9466-e73ecc7de737",
   CellTags->"Section6c"]},
 "Section6d"->{
  Cell[531574, 15745, 124, 1, 32, "Subsection",ExpressionUUID->"2e9c2b35-0658-4a59-9d9c-50f284de6922",
   CellTags->"Section6d"]},
 "Solutions"->{
  Cell[565453, 16816, 170, 3, 55, "Section",ExpressionUUID->"1b823bc4-b7ec-4fb2-9acc-a85a732f0852",
   CellTags->"Solutions"]},
 "SolutionsCP3"->{
  Cell[565648, 16823, 126, 2, 32, "Subsection",ExpressionUUID->"f59e2df4-b9cc-4c5e-8e76-25ad736c529d",
   CellTags->"SolutionsCP3"]},
 "SolutionsCP9"->{
  Cell[573455, 17062, 126, 2, 32, "Subsection",ExpressionUUID->"d0c5bac7-d7f1-462d-858d-dd8fc000d2f6",
   CellTags->"SolutionsCP9"]},
 "SolutionsCE2"->{
  Cell[578422, 17224, 138, 2, 32, "Subsection",ExpressionUUID->"3227128e-654b-4104-a171-9ee94d1b1ea4",
   CellTags->"SolutionsCE2"]},
 "Exercises"->{
  Cell[591090, 17597, 107, 1, 55, "Section",ExpressionUUID->"a84f6dc0-90a2-4dd3-b367-56577e68abd2",
   CellTags->"Exercises"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Section1", 619982, 18268},
 {"Section1a", 620120, 18271},
 {"Section1b", 620262, 18274},
 {"Section1c", 620407, 18277},
 {"Section2", 620551, 18280},
 {"Section2a", 620692, 18283},
 {"Section2b", 620837, 18286},
 {"Section2c", 620982, 18289},
 {"Section3", 621127, 18292},
 {"Section3a", 621269, 18295},
 {"Section3b", 621415, 18298},
 {"Section3c", 621561, 18301},
 {"Section3d", 621707, 18304},
 {"Section4", 621852, 18307},
 {"Section4a", 621994, 18310},
 {"Section4b", 622141, 18313},
 {"Section4c", 622288, 18316},
 {"Section4d", 622435, 18319},
 {"Info3093738413500-3998906", 622598, 18322},
 {"Info3153738413500-3998906", 622914, 18327},
 {"Info3193738413500-3998906", 623231, 18332},
 {"Info3213738413500-3998906", 623548, 18337},
 {"Section4e", 623850, 18342},
 {"Section5", 623996, 18345},
 {"Section5a", 624166, 18349},
 {"Section5b", 624313, 18352},
 {"Section6", 624459, 18355},
 {"Section6a", 624602, 18358},
 {"Section6b", 624749, 18361},
 {"Section6c", 624896, 18364},
 {"Section6d", 625043, 18367},
 {"Solutions", 625190, 18370},
 {"SolutionsCP3", 625337, 18373},
 {"SolutionsCP9", 625490, 18376},
 {"SolutionsCE2", 625643, 18379},
 {"Exercises", 625793, 18382}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 209, 5, 121, "BookChapterTitle",ExpressionUUID->"90d9b518-d271-4793-8910-be5a4de5c3ce",
 CounterAssignments->{{"ChapterNumber", 2}}],
Cell[CellGroupData[{
Cell[792, 29, 86, 0, 55, "Section",ExpressionUUID->"7c514063-e696-49d8-af87-6ea63c952e08"],
Cell[881, 31, 249, 4, 35, "Text",ExpressionUUID->"e3197cad-9bac-48a1-b051-907c1bd501d4"],
Cell[1133, 37, 1117, 22, 110, "Text",ExpressionUUID->"784e4a37-6dd8-4211-9560-0267298c57f2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2287, 64, 105, 1, 55, "Section",ExpressionUUID->"27354a6b-880a-4906-8cdb-c65372b7bd14",
 CellTags->"Section1"],
Cell[2395, 67, 305, 6, 35, "Text",ExpressionUUID->"3f33bab5-8d38-4996-a0ec-f78642cf728b"],
Cell[CellGroupData[{
Cell[2725, 77, 111, 1, 32, "Subsection",ExpressionUUID->"6e99df8d-7219-4939-9b6e-d6427dcad09f",
 CellTags->"Section1a"],
Cell[2839, 80, 364, 5, 50, "Text",ExpressionUUID->"ecec6408-77d9-4f31-93dd-d478224ebbfb"],
Cell[CellGroupData[{
Cell[3228, 89, 160, 3, 31, "Input",ExpressionUUID->"86788e61-18fb-430a-8b3f-1069820da7f6"],
Cell[3391, 94, 161, 3, 31, "Output",ExpressionUUID->"e96f7a65-21f7-4816-aef5-6592f470dd85"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3589, 102, 184, 3, 31, "Input",ExpressionUUID->"bc5ba819-2f0d-43d4-9d3e-eee105db4ece"],
Cell[3776, 107, 187, 4, 31, "Output",ExpressionUUID->"e5a2f24b-0875-4bc5-aa2e-a2b6e8cab9e9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4000, 116, 307, 9, 31, "Input",ExpressionUUID->"b1b3c3ef-43df-4b39-b6a1-09f8caa0da1c"],
Cell[4310, 127, 308, 9, 31, "Output",ExpressionUUID->"355da334-4a42-4321-bf8c-096639f2277c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4655, 141, 122, 2, 31, "Input",ExpressionUUID->"bdebdb56-7c1a-4fb7-a76d-eddbc9fa4e6a"],
Cell[4780, 145, 123, 2, 31, "Output",ExpressionUUID->"71354446-7aba-4553-996b-35795463e6f4"]
}, Open  ]],
Cell[4918, 150, 392, 6, 50, "Text",ExpressionUUID->"200a35c6-cec9-4b0b-ab7c-f93ba7a5f1dc"],
Cell[5313, 158, 419, 8, 50, "Text",ExpressionUUID->"8d37ea9c-96ec-43aa-895d-f0ccae9e26b2"],
Cell[CellGroupData[{
Cell[5757, 170, 234, 5, 31, "Input",ExpressionUUID->"03b91400-441d-4978-8184-210cd1880db9",
 InitializationCell->True],
Cell[5994, 177, 181, 3, 31, "Output",ExpressionUUID->"8bc94f0b-86e6-46e3-b27c-13eed9e850c0"]
}, Open  ]],
Cell[6190, 183, 211, 5, 20, "Text",ExpressionUUID->"2f00e2ae-738b-4d71-b28d-5f237222f0ac"],
Cell[CellGroupData[{
Cell[6426, 192, 214, 5, 31, "Input",ExpressionUUID->"5b89d78a-903b-4096-be50-b0da250b1f2f",
 InitializationCell->True],
Cell[6643, 199, 161, 3, 31, "Output",ExpressionUUID->"7365eb64-3148-4312-822a-8dfd424f7dd0"]
}, Open  ]],
Cell[6819, 205, 155, 2, 20, "Text",ExpressionUUID->"ac4914ed-22b8-4d8a-a361-91304312dc82"],
Cell[6977, 209, 587, 17, 43, "Text",ExpressionUUID->"dcf3fafd-b6a9-4627-850b-f09dec3bea73"],
Cell[CellGroupData[{
Cell[7589, 230, 134, 2, 31, "Input",ExpressionUUID->"1d7d055c-5025-4c76-af1a-63323e1d185d"],
Cell[7726, 234, 110, 1, 31, "Output",ExpressionUUID->"25507b6a-07d9-440e-afb5-2c436e858a28"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7873, 240, 188, 4, 31, "Input",ExpressionUUID->"c2496b4d-b06f-418b-9285-1210bac7c2de"],
Cell[8064, 246, 110, 1, 31, "Output",ExpressionUUID->"23783e31-950d-41d4-ab08-0418e88ef2b1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8211, 252, 188, 4, 31, "Input",ExpressionUUID->"8659ab0e-473c-43a8-bfee-a84b60d79b12"],
Cell[8402, 258, 110, 1, 31, "Output",ExpressionUUID->"8fe951f7-f3bd-40a0-a588-750bb54da026"]
}, Open  ]],
Cell[8527, 262, 911, 25, 56, "Text",ExpressionUUID->"59563b9a-bf2c-4a3d-a29b-ad4cf4f9f5af"],
Cell[CellGroupData[{
Cell[9463, 291, 238, 5, 31, "Input",ExpressionUUID->"e15d0644-f6c2-4e31-9d35-4cbe0e7e60d0"],
Cell[9704, 298, 172, 3, 31, "Output",ExpressionUUID->"7f72e311-2911-4287-9b67-bb58664014dd"]
}, Open  ]],
Cell[9891, 304, 467, 11, 36, "Text",ExpressionUUID->"f53b0e33-3baa-43d3-b140-565e4e40edce"],
Cell[CellGroupData[{
Cell[10383, 319, 199, 4, 31, "Input",ExpressionUUID->"bc9b8bbd-c85e-4a72-8cb2-749935209505"],
Cell[10585, 325, 110, 1, 31, "Output",ExpressionUUID->"acd74f30-3492-441f-8a65-ef07edcd869c"]
}, Open  ]],
Cell[10710, 329, 310, 7, 21, "Text",ExpressionUUID->"0d39883a-23e4-41b4-b24b-9bdec43904e9"],
Cell[CellGroupData[{
Cell[11045, 340, 93, 0, 18, "Subsubsection",ExpressionUUID->"8124b0a7-3909-4397-856e-a1cb5ea0a1d2"],
Cell[11141, 342, 479, 11, 36, "Text",ExpressionUUID->"76180fbf-5332-43ef-b115-4da2edc27f69",
 PageBreakAbove->False,
 PageBreakWithin->False],
Cell[CellGroupData[{
Cell[11645, 357, 338, 8, 31, "Input",ExpressionUUID->"4bc9d849-e778-487d-a551-eddf16a2ed80",
 InitializationCell->True],
Cell[11986, 367, 244, 4, 31, "Output",ExpressionUUID->"64b0ba41-007e-4134-8acf-12e93434532d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12267, 376, 159, 3, 31, "Input",ExpressionUUID->"c832ae8a-dcd3-44ee-bc79-2c1f3f66bbe2"],
Cell[12429, 381, 115, 1, 31, "Output",ExpressionUUID->"b7a1de84-2de7-46cb-a032-784588a4d0a6"]
}, Open  ]],
Cell[12559, 385, 197, 3, 20, "Text",ExpressionUUID->"2cfd7fe3-1980-4675-a280-ff91a3d0b1bf"],
Cell[CellGroupData[{
Cell[12781, 392, 178, 4, 31, "Input",ExpressionUUID->"5122258e-8a8e-42c8-9a51-42f1c635483e"],
Cell[12962, 398, 115, 1, 31, "Output",ExpressionUUID->"be1ffc23-2eac-4376-b628-b392fa45e3f7"]
}, Open  ]],
Cell[13092, 402, 250, 4, 35, "Text",ExpressionUUID->"abd24fcd-4632-4a36-b620-c55fda412cd5"],
Cell[CellGroupData[{
Cell[13367, 410, 218, 5, 31, "Input",ExpressionUUID->"e525ce1c-c040-4987-88a6-7e9aae279802"],
Cell[13588, 417, 188, 4, 31, "Output",ExpressionUUID->"bb67f645-f70c-4466-a66a-f0211c0194ee"]
}, Open  ]],
Cell[13791, 424, 368, 9, 39, "Text",ExpressionUUID->"9c3e642c-cdef-481d-9606-7f9e82226257"],
Cell[CellGroupData[{
Cell[14184, 437, 184, 4, 31, "Input",ExpressionUUID->"ef115e99-df16-4126-b02e-20b5a93d542f"],
Cell[14371, 443, 207, 4, 31, "Output",ExpressionUUID->"494a71ac-8c99-4cbf-a45b-7bf5bb7f3307"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[14627, 453, 95, 0, 18, "Subsubsection",ExpressionUUID->"0fb7590c-b3b0-4414-be10-e8e120739630"],
Cell[14725, 455, 571, 15, 37, "Text",ExpressionUUID->"cfbb4663-dd18-46d3-8eee-9f3f0b05340c"],
Cell[15299, 472, 537, 13, 37, "Text",ExpressionUUID->"7b2f1b20-1e27-4b9f-a59c-530debb727b7"],
Cell[CellGroupData[{
Cell[15861, 489, 137, 2, 31, "Input",ExpressionUUID->"933a30f8-a0e8-4487-ad3f-76a21ceb983f"],
Cell[16001, 493, 218, 5, 31, "Output",ExpressionUUID->"7584856a-5d88-41ac-b6a6-da0852f951b5"]
}, Open  ]],
Cell[16234, 501, 378, 9, 36, "Text",ExpressionUUID->"c4048639-5b89-4522-98f9-426be289a582"],
Cell[CellGroupData[{
Cell[16637, 514, 179, 4, 31, "Input",ExpressionUUID->"f2d14cc7-4e10-4459-8d41-3ff57e4bd1ac"],
Cell[16819, 520, 283, 7, 31, "Output",ExpressionUUID->"4e5eaeea-c8ce-45d5-b44b-b1c08c05f3b2"]
}, Open  ]],
Cell[17117, 530, 435, 6, 50, "Text",ExpressionUUID->"a9852e8f-9c4c-436c-a928-f826724bd75c"],
Cell[CellGroupData[{
Cell[17577, 540, 171, 3, 31, "Input",ExpressionUUID->"d4558912-7cbe-400f-9c2d-7b46ff844bcc"],
Cell[17751, 545, 224, 5, 31, "Output",ExpressionUUID->"66e127a0-f174-4335-9f2d-2b46185b0ff1"]
}, Open  ]],
Cell[17990, 553, 306, 4, 35, "Text",ExpressionUUID->"aaea1032-6792-4db5-8b45-263d18a4d9b0"],
Cell[CellGroupData[{
Cell[18321, 561, 176, 3, 31, "Input",ExpressionUUID->"b13bc27f-6c84-40a8-8825-5c2285acc8b0"],
Cell[18500, 566, 457, 8, 51, "Output",ExpressionUUID->"5beaf470-b191-45b2-95a4-a560059e352f"]
}, Open  ]],
Cell[18972, 577, 761, 15, 66, "Text",ExpressionUUID->"5d0ef640-e820-436f-8f2c-580eb6a73cc8"],
Cell[19736, 594, 456, 9, 36, "Text",ExpressionUUID->"c9557c19-75cc-48e6-84a0-a7bcf5ec977b"],
Cell[CellGroupData[{
Cell[20217, 607, 160, 3, 31, "Input",ExpressionUUID->"eb88a71c-7684-4580-a9d5-29d1052dd779"],
Cell[20380, 612, 205, 4, 31, "Output",ExpressionUUID->"4f8e4457-d4fa-4f16-9ec3-5dada77ad9e5"]
}, Open  ]],
Cell[20600, 619, 903, 23, 62, "Text",ExpressionUUID->"618214b9-373f-4482-a70d-365c2da83ab3"],
Cell[21506, 644, 447, 9, 36, "Text",ExpressionUUID->"3fb78d3c-7b65-4ce7-ae9a-8029d379a007"],
Cell[CellGroupData[{
Cell[21978, 657, 233, 6, 31, "Input",ExpressionUUID->"5cfb7188-630b-4991-8a09-f695aaed7cd1"],
Cell[22214, 665, 235, 5, 31, "Output",ExpressionUUID->"5894cb04-f674-48bf-9b32-72d4c42ba058"]
}, Open  ]],
Cell[22464, 673, 286, 4, 35, "Text",ExpressionUUID->"635e2722-1722-426c-bce1-f0d0b771ee87"],
Cell[CellGroupData[{
Cell[22775, 681, 244, 6, 31, "Input",ExpressionUUID->"ac951075-0f01-4368-a11e-58f4bce181f2"],
Cell[23022, 689, 230, 5, 31, "Output",ExpressionUUID->"f2bb9c13-1e2e-46d8-8b5b-13ac81efb340"]
}, Open  ]],
Cell[23267, 697, 579, 14, 38, "Text",ExpressionUUID->"e9e61da8-cc9a-4ec2-a1cf-c031eb61f05e"],
Cell[CellGroupData[{
Cell[23871, 715, 254, 6, 31, "Input",ExpressionUUID->"23d36106-9e00-47e1-b1e7-a7089ab0af95"],
Cell[24128, 723, 244, 5, 31, "Output",ExpressionUUID->"fa9d0888-6792-4bf9-aeb1-65a69156bf34"]
}, Open  ]],
Cell[24387, 731, 986, 24, 54, "Text",ExpressionUUID->"821498bf-005c-4c64-93a3-9facaebae7a5"],
Cell[CellGroupData[{
Cell[25398, 759, 335, 9, 31, "Input",ExpressionUUID->"0c779760-cfca-4911-8132-fa52d967eed8"],
Cell[25736, 770, 201, 4, 31, "Output",ExpressionUUID->"1c47f132-9fec-4a70-a1e5-0350187b31bb"]
}, Open  ]],
Cell[25952, 777, 270, 6, 21, "Text",ExpressionUUID->"364e5c72-fcf4-4f9b-8543-a6a1a77821cf"],
Cell[26225, 785, 2352, 62, 122, "Text",ExpressionUUID->"1fb8bf5e-e689-4d27-b44f-2d753d6c9d21"],
Cell[28580, 849, 729, 16, 70, "Text",ExpressionUUID->"df218b1c-e7db-4e69-8d04-37783273456b"],
Cell[CellGroupData[{
Cell[29334, 869, 467, 14, 31, "Input",ExpressionUUID->"ecd656a3-68db-408d-b5fc-45c24503afc4",
 InitializationCell->True],
Cell[29804, 885, 1833, 59, 70, "Output",ExpressionUUID->"c1b647f9-1733-44c0-a721-12ef786e02c7"]
}, Open  ]],
Cell[31652, 947, 1138, 29, 54, "Text",ExpressionUUID->"897c4ced-a9a1-4330-a57f-7eae4cd339d6"],
Cell[CellGroupData[{
Cell[32815, 980, 182, 3, 31, "Input",ExpressionUUID->"06efac10-91af-4d30-a328-1fc79beb48f3"],
Cell[33000, 985, 1476, 45, 70, "Output",ExpressionUUID->"36799ca7-fecc-47b3-a562-30758b67ba7f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[34525, 1036, 108, 0, 18, "Subsubsection",ExpressionUUID->"eb29d36c-235a-48f9-8bdf-7180413322e5"],
Cell[34636, 1038, 593, 14, 36, "Text",ExpressionUUID->"5e292227-36e5-4e3e-a9cb-b8b904676b98"],
Cell[35232, 1054, 1007, 29, 40, "Text",ExpressionUUID->"154bfcb2-b669-4647-a583-fef18cb81580"],
Cell[CellGroupData[{
Cell[36264, 1087, 338, 9, 31, "Input",ExpressionUUID->"fcb07ee7-2939-481e-9b76-3c3813570ef6",
 InitializationCell->True],
Cell[36605, 1098, 257, 5, 31, "Output",ExpressionUUID->"10e28227-7132-4782-ada6-1478dda85ef8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[36899, 1108, 165, 3, 31, "Input",ExpressionUUID->"0c2ddb03-6755-488e-9c54-3bed75a2c86c"],
Cell[37067, 1113, 110, 1, 31, "Output",ExpressionUUID->"1671559e-05f1-4421-ace7-7ffd82196ed4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37214, 1119, 165, 3, 31, "Input",ExpressionUUID->"fa848c4b-cf52-4db7-8550-5ed3ee9bc5cb"],
Cell[37382, 1124, 111, 1, 31, "Output",ExpressionUUID->"d9684d70-b600-4870-ad12-081ad20a350f"]
}, Open  ]],
Cell[37508, 1128, 251, 6, 21, "Text",ExpressionUUID->"d07cc7bc-61c9-458a-a715-867faa378df7"],
Cell[CellGroupData[{
Cell[37784, 1138, 141, 2, 31, "Input",ExpressionUUID->"776d8135-acb4-4783-b803-b610fc73b148"],
Cell[37928, 1142, 108, 1, 31, "Output",ExpressionUUID->"a8b5ec18-7933-48f1-b9cd-670cf67adaef"]
}, Open  ]],
Cell[38051, 1146, 312, 7, 21, "Text",ExpressionUUID->"ae042de6-3cad-487b-8498-a3988a7c8b2b"],
Cell[CellGroupData[{
Cell[38388, 1157, 218, 5, 31, "Input",ExpressionUUID->"371695f9-eeb2-4a83-91da-bbda1394c197"],
Cell[38609, 1164, 107, 1, 31, "Output",ExpressionUUID->"7a29350e-20e6-46be-9b25-1ce3a13e2111"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38753, 1170, 252, 6, 31, "Input",ExpressionUUID->"d8c5a2ca-4b73-49de-b2fd-e355d4841185"],
Cell[39008, 1178, 107, 1, 31, "Output",ExpressionUUID->"f3941481-a427-438e-b10a-568d8cd427d4"]
}, Open  ]],
Cell[39130, 1182, 903, 24, 52, "Text",ExpressionUUID->"44ce842f-dae6-437d-b11a-a1fe8dfe7fd0"],
Cell[CellGroupData[{
Cell[40058, 1210, 300, 7, 31, "Input",ExpressionUUID->"d93a7d73-0331-4c57-8084-fd639760d776"],
Cell[40361, 1219, 110, 1, 31, "Output",ExpressionUUID->"286e30ca-43f9-4209-8124-e6cbab9eaecc"]
}, Open  ]],
Cell[40486, 1223, 500, 11, 36, "Text",ExpressionUUID->"97276677-f987-4cd0-8b31-3338192d221e"],
Cell[40989, 1236, 905, 24, 35, "Text",ExpressionUUID->"e33739d1-724a-43c7-81fe-67e86f8f151e"],
Cell[41897, 1262, 1449, 42, 74, "Text",ExpressionUUID->"94abb913-6f80-4643-b43f-8c15b89bd4fc"],
Cell[43349, 1306, 1330, 39, 78, "Text",ExpressionUUID->"5fb62271-62e9-4e9e-85b9-7f099d0e95b0"],
Cell[44682, 1347, 854, 23, 127, "Input",ExpressionUUID->"07293bb1-a1a0-405f-bea3-5d223ff5a23a",
 InitializationCell->True],
Cell[45539, 1372, 113, 0, 20, "Text",ExpressionUUID->"2ce3952e-41df-414c-8b45-3c29635da75a"],
Cell[CellGroupData[{
Cell[45677, 1376, 226, 5, 31, "Input",ExpressionUUID->"828592ad-003c-4498-9801-f4d5f5e2a05d"],
Cell[45906, 1383, 110, 1, 31, "Output",ExpressionUUID->"c7f724a3-0c36-4ee4-9a2b-066650b8243f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46053, 1389, 224, 5, 31, "Input",ExpressionUUID->"ee6167cc-6fd9-474f-ac83-3e3160c872c4"],
Cell[46280, 1396, 111, 1, 31, "Output",ExpressionUUID->"ce2e579a-0325-44de-966e-4e07a5b910b5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46428, 1402, 254, 6, 31, "Input",ExpressionUUID->"6d734e7e-4a62-45ae-a05a-e3f8d1f16983"],
Cell[46685, 1410, 110, 1, 31, "Output",ExpressionUUID->"796cb8dc-110d-44bf-aed0-06dee78cc8e4"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[46856, 1418, 132, 1, 32, "Subsection",ExpressionUUID->"68fed074-2acf-46eb-a6ff-27da64d4ffe8",
 CellTags->"Section1b"],
Cell[46991, 1421, 608, 14, 36, "Text",ExpressionUUID->"3eadeee9-f878-4bef-b8b5-977c39400684"],
Cell[CellGroupData[{
Cell[47624, 1439, 223, 5, 31, "Input",ExpressionUUID->"a3151d6d-6da4-4de2-a43c-6133644f76b5"],
Cell[47850, 1446, 608, 16, 31, "Output",ExpressionUUID->"4d2e6f99-da95-4981-9b23-a4ce8eabd6d3"]
}, Open  ]],
Cell[48473, 1465, 489, 12, 36, "Text",ExpressionUUID->"0b5c8153-ce66-4d27-80ba-b047c94a86cc"],
Cell[CellGroupData[{
Cell[48987, 1481, 245, 6, 31, "Input",ExpressionUUID->"08da33a9-e3cf-4af3-a0b1-d185267c1f69"],
Cell[49235, 1489, 1268, 31, 51, "Output",ExpressionUUID->"794de61e-364a-4726-a39e-f08f6446ddbb"]
}, Open  ]],
Cell[50518, 1523, 373, 10, 21, "Text",ExpressionUUID->"ee8c7c52-a827-405b-b4ba-7443a9dc6400"],
Cell[CellGroupData[{
Cell[50916, 1537, 282, 7, 31, "Input",ExpressionUUID->"d418cafb-cf91-4ded-b5e6-8b526daad1c3"],
Cell[51201, 1546, 608, 16, 31, "Output",ExpressionUUID->"a3849ef7-c247-4b63-8597-eda1465aba46"]
}, Open  ]],
Cell[51824, 1565, 313, 8, 21, "Text",ExpressionUUID->"aa47bfed-157a-45e3-9801-00632ca090da"],
Cell[52140, 1575, 595, 15, 36, "Text",ExpressionUUID->"a8cb1d46-e9a8-48a4-aefe-12bb4d245757"],
Cell[CellGroupData[{
Cell[52760, 1594, 321, 8, 31, "Input",ExpressionUUID->"350607c2-5a74-470d-b932-3a835ce1b1e1"],
Cell[53084, 1604, 534, 15, 31, "Output",ExpressionUUID->"6eeb8728-d741-429e-a5e4-b2770f509de2"]
}, Open  ]],
Cell[53633, 1622, 451, 9, 36, "Text",ExpressionUUID->"d6e66177-7135-4425-8529-28053e512254"],
Cell[54087, 1633, 612, 15, 38, "Text",ExpressionUUID->"74786cf9-d7c6-4fa2-bce7-600a341d07d4"],
Cell[CellGroupData[{
Cell[54724, 1652, 248, 6, 31, "Input",ExpressionUUID->"1eb329bd-a753-4692-bf89-e2c3c141387c"],
Cell[54975, 1660, 2646, 58, 89, "Output",ExpressionUUID->"8c44b311-e43b-46e7-8945-1d0135ad02fd"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[57670, 1724, 128, 1, 32, "Subsection",ExpressionUUID->"150298f0-d0a4-4762-853d-c62cab32f9f1",
 CellTags->"Section1c"],
Cell[57801, 1727, 1030, 26, 54, "Text",ExpressionUUID->"ed15abfd-20f8-4c67-af19-e8ca8f01396f"],
Cell[58834, 1755, 265, 6, 20, "Text",ExpressionUUID->"fd9a69ae-28fe-4de4-b540-8747866c7e6f"],
Cell[59102, 1763, 951, 26, 127, "Input",ExpressionUUID->"3c39ca05-ad2c-4ef5-9248-8b13dd152a47",
 InitializationCell->True],
Cell[60056, 1791, 771, 21, 55, "Text",ExpressionUUID->"c8e8dd9f-bcba-4994-9655-423559fd5832"],
Cell[60830, 1814, 90, 0, 20, "Text",ExpressionUUID->"232fc200-02e1-45bb-a01a-00196cbc174a"],
Cell[CellGroupData[{
Cell[60945, 1818, 113, 1, 31, "Input",ExpressionUUID->"aa4f4005-544a-4280-9c35-4392502905c2"],
Cell[61061, 1821, 154, 4, 24, "Print",ExpressionUUID->"8141afd2-3d59-4e11-a639-d897b2824285"],
Cell[61218, 1827, 177, 5, 24, "Print",ExpressionUUID->"1c3f4f29-8fa4-4c72-bf23-b72ee9463be3"],
Cell[61398, 1834, 177, 5, 24, "Print",ExpressionUUID->"24cbf441-89ea-47aa-93b7-b89072786b7d"],
Cell[61578, 1841, 177, 5, 24, "Print",ExpressionUUID->"13528b9e-3e49-4d7f-ad6d-b8301a5f78c9"],
Cell[61758, 1848, 177, 5, 24, "Print",ExpressionUUID->"0a8e7516-29cc-4128-a2ea-163e01fb74df"],
Cell[61938, 1855, 187, 5, 24, "Print",ExpressionUUID->"5e476186-0523-4a5b-8b2d-39522a533ddd"],
Cell[62128, 1862, 187, 5, 24, "Print",ExpressionUUID->"12c32c85-fb9d-4c13-83ac-6afeb32fcf37"],
Cell[62318, 1869, 187, 5, 24, "Print",ExpressionUUID->"3c5025ba-e964-442a-a169-e96a17310e87"],
Cell[62508, 1876, 187, 5, 24, "Print",ExpressionUUID->"f9784f94-4319-4608-b344-7aeb2450b091"],
Cell[62698, 1883, 187, 5, 24, "Print",ExpressionUUID->"283529e1-8285-41b7-9b60-610fb2674692"],
Cell[62888, 1890, 187, 5, 24, "Print",ExpressionUUID->"6b427653-8ff4-48a2-99bf-198722e9a3de"],
Cell[63078, 1897, 197, 5, 24, "Print",ExpressionUUID->"c0e76be5-0d65-4072-b630-7e6a8a31709a"],
Cell[63278, 1904, 197, 5, 24, "Print",ExpressionUUID->"371f27b4-c07d-4c32-a00f-1c4f7c8ab049"],
Cell[63478, 1911, 197, 5, 24, "Print",ExpressionUUID->"e4c3499e-8930-4696-a0fa-79e418020bef"],
Cell[63678, 1918, 197, 5, 24, "Print",ExpressionUUID->"48b6d65a-8cfe-4e72-85c3-bdd886b77a98"],
Cell[63878, 1925, 207, 5, 24, "Print",ExpressionUUID->"3ca88416-079d-46e6-876c-47d7e7e4f582"]
}, Open  ]],
Cell[64100, 1933, 176, 3, 20, "Text",ExpressionUUID->"27a59b81-765c-4db0-881f-5c06706d6e39"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[64325, 1942, 115, 1, 55, "Section",ExpressionUUID->"19113839-17c8-4f3d-a135-c29e993f8cc3",
 CellTags->"Section2"],
Cell[64443, 1945, 463, 8, 50, "Text",ExpressionUUID->"91e91a17-0d52-4d0c-aadb-2f6e9184dc0f"],
Cell[CellGroupData[{
Cell[64931, 1957, 117, 1, 32, "Subsection",ExpressionUUID->"d5f0cb69-cd5d-4315-a463-f8e450da37fe",
 CellTags->"Section2a"],
Cell[65051, 1960, 630, 16, 36, "Text",ExpressionUUID->"5b424b94-1c56-4683-b46a-3d7169c7b4cd"],
Cell[CellGroupData[{
Cell[65706, 1980, 253, 6, 31, "Input",ExpressionUUID->"7c610431-6c57-4548-bb70-83fa54a18fbe",
 InitializationCell->True],
Cell[65962, 1988, 197, 4, 31, "Output",ExpressionUUID->"e6b389dc-3d90-4939-a573-3c9dc645330d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[66196, 1997, 225, 5, 31, "Input",ExpressionUUID->"6a145363-50e5-4a7b-938a-5b1eabb38f9f",
 InitializationCell->True],
Cell[66424, 2004, 207, 4, 31, "Output",ExpressionUUID->"9fc13845-3bf2-4968-b8f7-10c701833bf9"]
}, Open  ]],
Cell[66646, 2011, 122, 0, 20, "Text",ExpressionUUID->"3943d9ae-e1ce-43f6-bc5b-b6a681757d45"],
Cell[CellGroupData[{
Cell[66793, 2015, 168, 3, 31, "Input",ExpressionUUID->"ab0fddc9-8520-4167-a8c3-766f7f9b4081"],
Cell[66964, 2020, 221, 5, 31, "Output",ExpressionUUID->"2ff31f29-5e1a-4279-8b76-86536597496d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[67222, 2030, 175, 3, 31, "Input",ExpressionUUID->"b3a10dde-26c1-4965-b7be-c2eb91796484"],
Cell[67400, 2035, 184, 3, 31, "Output",ExpressionUUID->"e962adfc-66f8-4e7c-a27d-66081b996226"]
}, Open  ]],
Cell[67599, 2041, 399, 7, 35, "Text",ExpressionUUID->"0124bf1c-7b9e-4cc6-a843-727d366c5c4d"],
Cell[68001, 2050, 505, 11, 55, "Text",ExpressionUUID->"cf00c4f9-7385-4714-a28c-f6d4647d4d73"],
Cell[CellGroupData[{
Cell[68531, 2065, 202, 4, 31, "Input",ExpressionUUID->"a7a15762-bf0b-47d4-85ae-5b06063b28ae"],
Cell[68736, 2071, 197, 4, 31, "Output",ExpressionUUID->"87c544c9-e253-4d7c-bbcd-15655122326a"]
}, Open  ]],
Cell[68948, 2078, 945, 24, 70, "Text",ExpressionUUID->"bc19a8a0-28c9-474c-b9f7-1416ef69c1a3"],
Cell[CellGroupData[{
Cell[69918, 2106, 173, 3, 31, "Input",ExpressionUUID->"0f6f3c47-7371-4226-a10e-fca0032ea093"],
Cell[70094, 2111, 129, 2, 31, "Output",ExpressionUUID->"5890b216-21a8-4e62-bd3e-bd063ba597fb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70260, 2118, 173, 3, 31, "Input",ExpressionUUID->"1743abd2-8eea-4525-8901-cbd7773e27c8"],
Cell[70436, 2123, 152, 3, 31, "Output",ExpressionUUID->"e51ed640-f052-4631-bd15-472f0b6bb382"]
}, Open  ]],
Cell[70603, 2129, 1251, 34, 55, "Text",ExpressionUUID->"e3590dcf-0604-4bf5-a48f-627136958737"],
Cell[CellGroupData[{
Cell[71879, 2167, 220, 5, 31, "Input",ExpressionUUID->"ec5cfc64-671b-42f4-8c63-16ba97c7cd95"],
Cell[72102, 2174, 184, 3, 31, "Output",ExpressionUUID->"3d7b0736-79f2-424d-8daf-c695dc775d74"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[72335, 2183, 137, 1, 32, "Subsection",ExpressionUUID->"a1f25d24-ced1-4fcc-90c3-f33dd498c4b6",
 CellTags->"Section2b"],
Cell[72475, 2186, 312, 6, 35, "Text",ExpressionUUID->"88cb4f2d-cd7a-440b-8f10-066abb1b15a8"],
Cell[72790, 2194, 313, 4, 35, "Text",ExpressionUUID->"d754ad24-382d-4866-b2f3-e179f35af3a6"],
Cell[CellGroupData[{
Cell[73128, 2202, 119, 0, 18, "Subsubsection",ExpressionUUID->"9c08e14e-6824-4c22-98a5-0e2fc14e604a"],
Cell[73250, 2204, 757, 18, 53, "Text",ExpressionUUID->"33ca1fea-0a8d-4dcd-acc0-b8bc98a17ace"],
Cell[74010, 2224, 1755, 48, 100, "Text",ExpressionUUID->"4c128cda-14b6-4085-9bcc-b6d809a4a135"],
Cell[75768, 2274, 1631, 46, 50, "Text",ExpressionUUID->"d0fcf9ba-b4f3-48f1-a3a9-295c7bc5ebc1"],
Cell[CellGroupData[{
Cell[77424, 2324, 225, 5, 31, "Input",ExpressionUUID->"a98ccadf-9319-4e8e-92b4-bb10a54eae47",
 InitializationCell->True],
Cell[77652, 2331, 172, 3, 31, "Output",ExpressionUUID->"8692181d-4e92-4bb6-ab16-1690c12019f5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[77861, 2339, 205, 5, 31, "Input",ExpressionUUID->"53b0a251-b000-4d62-afe8-07b5aa65b28b",
 InitializationCell->True],
Cell[78069, 2346, 152, 3, 31, "Output",ExpressionUUID->"a92dd44b-7c60-41e0-834c-4c330f766dc7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78258, 2354, 205, 5, 31, "Input",ExpressionUUID->"7a33e027-09c0-4e58-835e-421494e19889",
 InitializationCell->True],
Cell[78466, 2361, 152, 3, 31, "Output",ExpressionUUID->"972740d1-da70-4caa-8a38-561786ecf947"]
}, Open  ]],
Cell[78633, 2367, 415, 12, 23, "Text",ExpressionUUID->"db5a30e5-2e19-4e12-b3b6-c00d1b72a279"],
Cell[CellGroupData[{
Cell[79073, 2383, 232, 5, 31, "Input",ExpressionUUID->"547403ec-c1ac-4b1b-892c-2918553ddb47"],
Cell[79308, 2390, 129, 2, 31, "Output",ExpressionUUID->"5d09e872-0abd-4a39-aa10-1a83a568b7fb"]
}, Open  ]],
Cell[79452, 2395, 330, 9, 23, "Text",ExpressionUUID->"c3fda72c-76be-49a5-8c87-10a9f5bb7834"],
Cell[CellGroupData[{
Cell[79807, 2408, 305, 7, 31, "Input",ExpressionUUID->"f5df83ae-8a05-4530-b4a3-dbf8da77cb5c"],
Cell[80115, 2417, 129, 2, 31, "Output",ExpressionUUID->"6a1263b9-7cf5-410e-b140-f6c4504c7758"]
}, Open  ]],
Cell[80259, 2422, 431, 10, 38, "Text",ExpressionUUID->"21a01bdf-4091-4624-9731-f9ce4b091376"],
Cell[80693, 2434, 489, 7, 50, "Text",ExpressionUUID->"55cc9e4e-7320-4c8d-a43d-525d0e73721b"],
Cell[81185, 2443, 1368, 37, 97, "Text",ExpressionUUID->"7af04586-3215-4053-8d3c-c5b90354c80e"],
Cell[82556, 2482, 207, 4, 31, "Input",ExpressionUUID->"19bcab81-481d-45c8-9127-afa06f4e0388",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[82800, 2491, 118, 0, 18, "Subsubsection",ExpressionUUID->"911e7371-4e4e-4ec8-9c92-1cd5637aaeb3"],
Cell[82921, 2493, 427, 10, 35, "Text",ExpressionUUID->"38629159-6c9d-4080-a10c-af79aaf338fc"],
Cell[CellGroupData[{
Cell[83373, 2507, 158, 3, 31, "Input",ExpressionUUID->"28a0fd72-b6d1-486b-abb8-1c4a313870b1"],
Cell[83534, 2512, 130, 2, 31, "Output",ExpressionUUID->"8f1a6619-7d63-4a3c-979e-9e9882f6e04e"]
}, Open  ]],
Cell[83679, 2517, 256, 4, 35, "Text",ExpressionUUID->"2e74acc1-96e6-428e-8ca3-e5d2ea7b14ea"],
Cell[CellGroupData[{
Cell[83960, 2525, 167, 3, 31, "Input",ExpressionUUID->"492e3c43-a487-4406-a25f-8fda09401086"],
Cell[84130, 2530, 398, 9, 24, "Message",ExpressionUUID->"a1975f59-4cc4-4dc1-b257-48d600d317f0"],
Cell[84531, 2541, 143, 2, 31, "Output",ExpressionUUID->"97a2cd87-dc60-4c60-a931-4342c3b5db5b"]
}, Open  ]],
Cell[84689, 2546, 700, 15, 50, "Text",ExpressionUUID->"4df52510-e54b-4658-a60f-5d0e8ac81912"],
Cell[CellGroupData[{
Cell[85414, 2565, 290, 7, 31, "Input",ExpressionUUID->"34c70e79-5d08-4fa6-a236-c670b91d7b2a"],
Cell[85707, 2574, 398, 9, 24, "Message",ExpressionUUID->"3b140af4-3e65-40a0-9708-8e07cd51c746"],
Cell[86108, 2585, 398, 9, 24, "Message",ExpressionUUID->"58e0d256-a98d-4c69-880b-e4a455a34550"],
Cell[86509, 2596, 438, 10, 24, "Message",ExpressionUUID->"319c37c2-cfe0-43cb-aa5b-e274a07e1901"],
Cell[86950, 2608, 409, 9, 24, "Message",ExpressionUUID->"b1055843-8052-4a1c-9e5a-155748b30ba1"],
Cell[87362, 2619, 167, 2, 31, "Output",ExpressionUUID->"0b601918-ea4c-4d0f-a06f-d840f590f6a7"]
}, Open  ]],
Cell[87544, 2624, 829, 18, 71, "Text",ExpressionUUID->"e8328e74-da90-4f11-bfb4-fabb3551db92"],
Cell[CellGroupData[{
Cell[88398, 2646, 362, 9, 31, "Input",ExpressionUUID->"ddbfda3a-0e0b-4c98-b53f-7cdb25a7bc38"],
Cell[88763, 2657, 187, 3, 31, "Output",ExpressionUUID->"42f26156-f7c8-45b0-9606-2641285e1c42"]
}, Open  ]],
Cell[88965, 2663, 770, 19, 51, "Text",ExpressionUUID->"97cfd86d-b29b-41bb-8071-c157a13ced80"],
Cell[89738, 2684, 480, 11, 37, "Text",ExpressionUUID->"6811de2c-68c0-43d9-adb8-0bd30dcb2af0"],
Cell[CellGroupData[{
Cell[90243, 2699, 392, 10, 31, "Input",ExpressionUUID->"dd26b032-c9a0-498f-a826-a9010c8288ac",
 InitializationCell->True],
Cell[90638, 2711, 243, 5, 31, "Output",ExpressionUUID->"5ed887c4-3af5-4297-8568-535d6359a947"]
}, Open  ]],
Cell[90896, 2719, 569, 12, 51, "Text",ExpressionUUID->"70587b82-f6c6-476c-8149-58e16da6ec4c"],
Cell[91468, 2733, 456, 11, 37, "Text",ExpressionUUID->"20a3017a-e55d-4aa0-9729-6e2db7978406"],
Cell[CellGroupData[{
Cell[91949, 2748, 153, 2, 31, "Input",ExpressionUUID->"c9c965a8-18cb-462f-aca1-ca731c9a895e"],
Cell[92105, 2752, 398, 9, 24, "Message",ExpressionUUID->"967d8e76-e1db-420c-a62a-9a214d03512b"],
Cell[92506, 2763, 398, 9, 24, "Message",ExpressionUUID->"9e58164e-3d77-49a7-b2e8-f615313e6cca"],
Cell[92907, 2774, 438, 10, 24, "Message",ExpressionUUID->"da9c7309-7867-4582-975d-4e01d03578be"],
Cell[93348, 2786, 409, 9, 24, "Message",ExpressionUUID->"a7f29c2f-11b2-4e7c-9cde-4b1fbbaeea4e"],
Cell[93760, 2797, 167, 2, 31, "Output",ExpressionUUID->"ecf85e4c-f8a0-4dc6-a477-8821b3fe3931"]
}, Open  ]],
Cell[93942, 2802, 420, 8, 36, "Text",ExpressionUUID->"2456e6d7-593c-48f8-85f8-b69847a885cd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[94399, 2815, 152, 4, 21, "Subsubsection",ExpressionUUID->"6b4226e1-710d-40ff-ba17-1ce5b6c91068"],
Cell[94554, 2821, 517, 14, 62, "Text",ExpressionUUID->"1db07088-d1cb-4f62-a4d4-5d2cd6351471"],
Cell[CellGroupData[{
Cell[95096, 2839, 388, 10, 31, "Input",ExpressionUUID->"d58a460c-35e1-4c00-a1bc-1efa82f9e6ca",
 InitializationCell->True],
Cell[95487, 2851, 270, 6, 31, "Output",ExpressionUUID->"778be184-ece8-4574-8229-d2ecb5cfc6d6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[95794, 2862, 526, 14, 51, "Input",ExpressionUUID->"3ac1d522-652d-46ac-aefd-6f5b2d468208",
 InitializationCell->True],
Cell[96323, 2878, 427, 11, 31, "Output",ExpressionUUID->"ab036d1d-4222-40de-99e5-271685fbc0be"]
}, Open  ]],
Cell[96765, 2892, 613, 10, 69, "Text",ExpressionUUID->"13e740b0-d9b4-4713-96af-160a2257ec26"],
Cell[97381, 2904, 591, 13, 51, "Text",ExpressionUUID->"d21b3821-6f66-4e75-9684-dae356dc0487"],
Cell[97975, 2919, 551, 10, 51, "Text",ExpressionUUID->"eaf473ed-aa99-4462-8837-79a93fa135e5"],
Cell[98529, 2931, 949, 25, 77, "Text",ExpressionUUID->"5896309e-d498-46d8-b484-be4d6bda17c2"],
Cell[99481, 2958, 314, 5, 35, "Text",ExpressionUUID->"da6dd63f-127d-4ffe-9f5e-51154e2bfe38"],
Cell[99798, 2965, 223, 5, 31, "Input",ExpressionUUID->"861f02e1-e202-4396-9760-d7705ddd3d13",
 InitializationCell->True],
Cell[100024, 2972, 629, 13, 73, "Text",ExpressionUUID->"10d38586-2201-4b86-970d-919fb3fde3ad"],
Cell[CellGroupData[{
Cell[100678, 2989, 141, 2, 31, "Input",ExpressionUUID->"4884a104-3582-4b98-a170-70ef05a73cb7"],
Cell[100822, 2993, 108, 1, 31, "Output",ExpressionUUID->"bacc367c-317b-4c72-ba2a-1a224ac0c0c2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[100967, 2999, 143, 2, 31, "Input",ExpressionUUID->"ba00e4cb-8aea-4d38-bc5f-e24bbdc1fbf6"],
Cell[101113, 3003, 145, 2, 31, "Output",ExpressionUUID->"eca31fcf-c776-4b0c-b561-9497b0c14751"]
}, Open  ]],
Cell[101273, 3008, 415, 8, 36, "Text",ExpressionUUID->"9c4ae957-1dd0-45c9-9936-375ee21642cd"],
Cell[CellGroupData[{
Cell[101713, 3020, 296, 7, 31, "Input",ExpressionUUID->"56a59b3f-550c-420d-b224-1acd2183a072"],
Cell[102012, 3029, 191, 4, 31, "Output",ExpressionUUID->"0c634c6b-7e8b-4d22-909d-139556a7d87a"]
}, Open  ]],
Cell[102218, 3036, 296, 6, 39, "Text",ExpressionUUID->"cd4c6f9a-853f-4843-a4c8-5a69e2e6c340"],
Cell[CellGroupData[{
Cell[102539, 3046, 334, 9, 31, "Input",ExpressionUUID->"bb67df22-5536-4c76-9c91-ec3cb91c7c73"],
Cell[102876, 3057, 181, 4, 31, "Output",ExpressionUUID->"3906352a-34f7-478c-8715-d3a14e543e66"]
}, Open  ]],
Cell[103072, 3064, 1277, 35, 90, "Text",ExpressionUUID->"cf358d3a-360b-4496-9225-79a1260155b1"],
Cell[104352, 3101, 844, 22, 56, "Text",ExpressionUUID->"ca98da7d-12ef-41ac-8943-d536a1304d37"],
Cell[CellGroupData[{
Cell[105221, 3127, 344, 9, 31, "Input",ExpressionUUID->"e9cfde73-4266-4634-9ae1-1fc8da822732"],
Cell[105568, 3138, 201, 4, 31, "Output",ExpressionUUID->"88feead6-725c-4310-b126-136fb12e6706"]
}, Open  ]],
Cell[105784, 3145, 329, 8, 24, "Text",ExpressionUUID->"4067a0fa-c938-4635-a240-7c70b09b332b"],
Cell[CellGroupData[{
Cell[106138, 3157, 745, 22, 31, "Input",ExpressionUUID->"d3d5be95-f195-4817-95e9-4c6b64e4ece8"],
Cell[106886, 3181, 229, 5, 31, "Output",ExpressionUUID->"09ab40b0-9e1c-4706-b5eb-f2e0ad11a785"]
}, Open  ]],
Cell[107130, 3189, 434, 9, 39, "Text",ExpressionUUID->"993a95ec-98e6-4cc5-9d1c-1b7bb73e529c"],
Cell[CellGroupData[{
Cell[107589, 3202, 187, 3, 31, "Input",ExpressionUUID->"ad7a0aa1-ddd7-4641-9540-bf43ab5d9be8"],
Cell[107779, 3207, 195, 4, 31, "Output",ExpressionUUID->"f2c98aaa-9309-4fe5-8715-e1b4af894ca9"]
}, Open  ]],
Cell[107989, 3214, 461, 7, 54, "Text",ExpressionUUID->"690683b0-a684-4e01-a1c7-307a5dcf0c8d"],
Cell[108453, 3223, 512, 11, 43, "Text",ExpressionUUID->"d3acb00e-532e-4a81-8c37-458827eb96fe"],
Cell[CellGroupData[{
Cell[108990, 3238, 246, 5, 31, "Input",ExpressionUUID->"9b4e1524-2352-42a3-b100-ff8d1401ec86"],
Cell[109239, 3245, 162, 3, 31, "Output",ExpressionUUID->"64d6e64b-4589-4fa0-8ed9-42db33ffaba2"]
}, Open  ]],
Cell[109416, 3251, 353, 9, 40, "Text",ExpressionUUID->"668c8939-517a-4d71-9c14-0bb543bf530f"],
Cell[109772, 3262, 375, 10, 31, "Input",ExpressionUUID->"d37f2af2-5955-489b-aba5-5d01f7a8b408",
 InitializationCell->True],
Cell[110150, 3274, 334, 8, 43, "Text",ExpressionUUID->"52387a6f-7752-4416-93b5-77c197cdb2dd"],
Cell[CellGroupData[{
Cell[110509, 3286, 257, 6, 31, "Input",ExpressionUUID->"ae624e0a-6e5e-408d-b3d4-bb5172e34fb7",
 InitializationCell->True],
Cell[110769, 3294, 162, 3, 31, "Output",ExpressionUUID->"2a05a845-a5f9-4b97-9dd4-3c24101514cb"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[110980, 3303, 111, 0, 18, "Subsubsection",ExpressionUUID->"7290f9c2-55ad-4f55-9fcd-e7204310d4dc"],
Cell[111094, 3305, 436, 7, 54, "Text",ExpressionUUID->"33cd82a2-1d36-440b-93de-016a99ad26f8"],
Cell[111533, 3314, 584, 20, 26, "Equation",ExpressionUUID->"ed0f468b-4a40-4549-a843-cac689e4c86c"],
Cell[112120, 3336, 530, 11, 50, "Text",ExpressionUUID->"8a38d7cf-cdc8-4748-b3ec-940119157eb4"],
Cell[112653, 3349, 358, 8, 36, "Text",ExpressionUUID->"a55ba7a6-e655-41a4-805b-58eb0ec5066a"],
Cell[CellGroupData[{
Cell[113036, 3361, 210, 5, 31, "Input",ExpressionUUID->"181667bd-230d-4f46-93a0-193cdf1c4f65"],
Cell[113249, 3368, 684, 19, 31, "Output",ExpressionUUID->"5bd0607a-fb54-4b89-a13c-d4ca8fec74e1"]
}, Open  ]],
Cell[113948, 3390, 212, 3, 20, "Text",ExpressionUUID->"bcf469a5-fb84-4881-8688-d7d5fa6ef8dd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[114197, 3398, 125, 0, 18, "Subsubsection",ExpressionUUID->"71edcc9a-0c8e-4cd3-976b-f8474a0f420b"],
Cell[114325, 3400, 939, 23, 77, "Text",ExpressionUUID->"d7e54abf-575e-4ec4-b94f-f59f15bf1176"],
Cell[115267, 3425, 370, 8, 36, "Text",ExpressionUUID->"3b6aadc0-f729-42ce-8395-7b74ab95e00a"],
Cell[CellGroupData[{
Cell[115662, 3437, 218, 5, 31, "Input",ExpressionUUID->"33ddcd94-2e0d-48a4-9ac7-1765aa5801f0"],
Cell[115883, 3444, 219, 6, 31, "Output",ExpressionUUID->"38b2bde7-0efb-42ee-89b8-b9ac77b24fcf"]
}, Open  ]],
Cell[116117, 3453, 425, 8, 36, "Text",ExpressionUUID->"e2cf64b2-9b64-4130-8d5c-70ad0a0df0a0"],
Cell[CellGroupData[{
Cell[116567, 3465, 231, 5, 31, "Input",ExpressionUUID->"f4c616f2-c88c-4ab7-ae54-18c4c9dc041e"],
Cell[116801, 3472, 129, 2, 31, "Output",ExpressionUUID->"4410844b-6e28-474e-83bd-a39e931b3017"]
}, Open  ]],
Cell[CellGroupData[{
Cell[116967, 3479, 120, 1, 31, "Input",ExpressionUUID->"d201c831-de29-486b-85d9-6a7ada6d0139"],
Cell[117090, 3482, 224, 6, 31, "Output",ExpressionUUID->"6bd2a0bb-bd8c-4304-9592-ed3f249bc804"]
}, Open  ]],
Cell[117329, 3491, 112, 0, 20, "Text",ExpressionUUID->"33c980ed-6e2d-4a6c-989a-d288f07ca127"],
Cell[CellGroupData[{
Cell[117466, 3495, 245, 6, 31, "Input",ExpressionUUID->"961b26ea-3cbc-4cce-82fc-1ed3377f3d53",
 InitializationCell->True],
Cell[117714, 3503, 219, 6, 31, "Output",ExpressionUUID->"fa6049bd-6395-4c25-b6d5-50bb50cd8cd6"]
}, Open  ]],
Cell[117948, 3512, 120, 0, 20, "Text",ExpressionUUID->"0e3fb2f5-a363-489e-a5a0-b34808effc71"],
Cell[CellGroupData[{
Cell[118093, 3516, 281, 7, 31, "Input",ExpressionUUID->"83ea64b2-3099-41c6-9e45-f4f91872e125",
 InitializationCell->True],
Cell[118377, 3525, 684, 19, 31, "Output",ExpressionUUID->"1aeeb4d1-28e4-4f80-98de-eb87c73bc4f5"]
}, Open  ]],
Cell[119076, 3547, 818, 17, 77, "Text",ExpressionUUID->"358ee70b-b14a-411a-afce-ad0ca59c5888"],
Cell[CellGroupData[{
Cell[119919, 3568, 1356, 33, 184, "Input",ExpressionUUID->"74b973df-6e04-41c7-9ba1-20e8b9cd5526",
 InitializationCell->True],
Cell[121278, 3603, 544, 15, 24, "Print",ExpressionUUID->"d2513a71-3762-4dce-9387-36a69e1cbbf0"],
Cell[121825, 3620, 550, 15, 24, "Print",ExpressionUUID->"b3ef5ccc-6622-46c6-a337-ec5c447eda7c"],
Cell[122378, 3637, 556, 15, 24, "Print",ExpressionUUID->"cc0315e7-e847-4a0d-8bca-50eb118696fb"],
Cell[122937, 3654, 616, 17, 24, "Print",ExpressionUUID->"272d08dc-978d-4f8e-af77-6a996a823033"],
Cell[123556, 3673, 622, 17, 24, "Print",ExpressionUUID->"2ff45ad1-e6eb-40d5-90ff-73d5746a504a"],
Cell[124181, 3692, 665, 18, 24, "Print",ExpressionUUID->"37570ba0-50cb-4390-8f72-464c7c65a294"],
Cell[124849, 3712, 691, 18, 24, "Print",ExpressionUUID->"9eacdb84-10a3-4e03-ba11-3e55c287a90c"],
Cell[125543, 3732, 733, 19, 24, "Print",ExpressionUUID->"7a4e7e25-74e6-41c0-ba0a-2cad9a398df0"]
}, Open  ]],
Cell[126291, 3754, 177, 3, 20, "Text",ExpressionUUID->"930f8dd3-0582-4226-aa3f-1e3d58336e94"],
Cell[CellGroupData[{
Cell[126493, 3761, 191, 4, 31, "Input",ExpressionUUID->"977f4f71-8782-4806-8671-c499b19570aa",
 InitializationCell->True],
Cell[126687, 3767, 218, 5, 31, "Output",ExpressionUUID->"2cfeeec7-0bd1-4247-af50-0220579a9fb8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[126954, 3778, 103, 0, 18, "Subsubsection",ExpressionUUID->"7088858d-4b23-4789-896a-bb5163cf88aa"],
Cell[127060, 3780, 579, 12, 58, "Text",ExpressionUUID->"ff6d3218-3d4e-4bad-a66d-3b352060a44f"],
Cell[CellGroupData[{
Cell[127664, 3796, 302, 8, 31, "Input",ExpressionUUID->"70dceef5-9619-4260-919f-0ecf7d0fa7f6",
 InitializationCell->True],
Cell[127969, 3806, 467, 13, 31, "Output",ExpressionUUID->"418b97e5-2f55-4736-b8b2-ed3ec5c1c2f5"]
}, Open  ]],
Cell[128451, 3822, 110, 0, 20, "Text",ExpressionUUID->"ad07b92b-6faf-4564-9be7-2c91c15cdbef"],
Cell[CellGroupData[{
Cell[128586, 3826, 234, 5, 31, "Input",ExpressionUUID->"1b1b8686-22d4-4942-a63a-787330ec5f5b",
 InitializationCell->True],
Cell[128823, 3833, 629, 17, 31, "Output",ExpressionUUID->"0b37f09e-4432-40eb-8e0f-26ae5e996bc4"]
}, Open  ]],
Cell[129467, 3853, 479, 13, 43, "Text",ExpressionUUID->"c332e06f-3078-4933-bc9c-c29d97eda2f9"],
Cell[CellGroupData[{
Cell[129971, 3870, 143, 2, 31, "Input",ExpressionUUID->"101a84c5-0146-4ac0-9178-3e55d084e269"],
Cell[130117, 3874, 627, 18, 31, "Output",ExpressionUUID->"a6485b78-84db-43a9-b2a0-37052d9355fc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[130781, 3897, 143, 2, 31, "Input",ExpressionUUID->"d364a16a-274e-4ae3-8268-c4e60cce403f"],
Cell[130927, 3901, 1067, 32, 70, "Output",ExpressionUUID->"57491025-e862-4e01-b1fc-69d25a33ad86"]
}, Open  ]],
Cell[132009, 3936, 472, 13, 37, "Text",ExpressionUUID->"86717d7b-236c-404f-b0e0-09d9b7ffe534"],
Cell[CellGroupData[{
Cell[132506, 3953, 181, 3, 31, "Input",ExpressionUUID->"5a2b1426-8e55-4bb6-a593-3e4104a6fd12"],
Cell[132690, 3958, 162, 3, 31, "Output",ExpressionUUID->"3d85d2cb-ef03-4221-a775-2a18bdc1ba42"]
}, Open  ]],
Cell[CellGroupData[{
Cell[132889, 3966, 181, 3, 31, "Input",ExpressionUUID->"dd9fdb42-f584-44c9-92e3-09dc8a83e6ff"],
Cell[133073, 3971, 162, 3, 31, "Output",ExpressionUUID->"5326619d-d682-46ae-87d9-981ff18a9ed8"]
}, Open  ]],
Cell[133250, 3977, 638, 19, 39, "Text",ExpressionUUID->"9d8bdfc5-7874-4f04-a1dc-7f83f9bfbda3"],
Cell[CellGroupData[{
Cell[133913, 4000, 351, 8, 31, "Input",ExpressionUUID->"c7fa25c8-3afc-4248-863a-af081ff82a58"],
Cell[134267, 4010, 110, 1, 31, "Output",ExpressionUUID->"aa3eb185-8496-4393-827a-220ead39e92f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[134426, 4017, 92, 0, 18, "Subsubsection",ExpressionUUID->"bab6aa29-94b2-4978-8c4e-692fe40b929a"],
Cell[134521, 4019, 275, 4, 35, "Text",ExpressionUUID->"3d7b134f-e0bd-464a-9cfd-b86d8d9928eb"],
Cell[134799, 4025, 2991, 76, 355, "Input",ExpressionUUID->"289e5fcb-a074-427f-9ff7-ff98b0774033"],
Cell[137793, 4103, 650, 19, 36, "Text",ExpressionUUID->"d065ea29-8b69-4aad-ae4d-977e01c79a8b"],
Cell[CellGroupData[{
Cell[138468, 4126, 571, 15, 51, "Input",ExpressionUUID->"90fe74d1-4caf-4577-9934-518017490fe1"],
Cell[139042, 4143, 110, 1, 31, "Output",ExpressionUUID->"fdada5f3-d8af-4ec3-ac00-636c0b5cc9bc"]
}, Open  ]],
Cell[139167, 4147, 385, 12, 23, "Text",ExpressionUUID->"345d3b85-b664-4cdc-a003-4834a9d7f818"],
Cell[CellGroupData[{
Cell[139577, 4163, 561, 15, 51, "Input",ExpressionUUID->"bd03a782-ae90-41e7-937d-c4f03a7ee8a4"],
Cell[140141, 4180, 111, 1, 31, "Output",ExpressionUUID->"bd374097-da54-4b00-b8a8-c166d4b1f6bc"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[140301, 4187, 114, 0, 18, "Subsubsection",ExpressionUUID->"aaef2bea-6ad0-4b70-af44-a1502a3e7efd"],
Cell[140418, 4189, 443, 9, 54, "Text",ExpressionUUID->"20a79997-5a0d-436e-9d1c-1924341dc2d9"],
Cell[140864, 4200, 762, 19, 58, "Text",ExpressionUUID->"573686db-0d54-4968-acb2-8ef99eed2fa5"],
Cell[CellGroupData[{
Cell[141651, 4223, 288, 7, 31, "Input",ExpressionUUID->"f1213b53-3455-4026-b830-249e33eaaa47",
 InitializationCell->True],
Cell[141942, 4232, 226, 5, 31, "Output",ExpressionUUID->"b2658a72-8b9d-4a86-8ae6-bc0d406e6e02"]
}, Open  ]],
Cell[142183, 4240, 150, 2, 20, "Text",ExpressionUUID->"0482cd52-6f31-497c-8084-1711191d0232"],
Cell[CellGroupData[{
Cell[142358, 4246, 166, 3, 31, "Input",ExpressionUUID->"0aef22f5-0db3-43d3-bb0d-b7b7cab10ac3"],
Cell[142527, 4251, 107, 1, 31, "Output",ExpressionUUID->"4f365b2c-7946-4e6d-8aef-ad9f6d89f7e3"]
}, Open  ]],
Cell[142649, 4255, 114, 0, 20, "Text",ExpressionUUID->"c03c22e5-4413-4541-bdaa-a778c639e2c7"],
Cell[CellGroupData[{
Cell[142788, 4259, 166, 3, 31, "Input",ExpressionUUID->"c73971b7-15f7-40e2-8764-bd225cdc39d9"],
Cell[142957, 4264, 107, 1, 31, "Output",ExpressionUUID->"19216cf3-0d33-4e75-b57e-ae42e7743160"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143101, 4270, 170, 4, 31, "Input",ExpressionUUID->"0025c24a-e2fc-48e3-9fe2-33476a6d1c4f"],
Cell[143274, 4276, 111, 2, 31, "Output",ExpressionUUID->"f41e962c-d53a-4e45-8136-92d25876e1b1"]
}, Open  ]],
Cell[143400, 4281, 432, 10, 43, "Text",ExpressionUUID->"ee1f3a32-b345-4ad0-8e42-849aff46fb1a"],
Cell[CellGroupData[{
Cell[143857, 4295, 194, 5, 31, "Input",ExpressionUUID->"c4a020b6-7303-4394-a609-94daba1c8674"],
Cell[144054, 4302, 114, 2, 31, "Output",ExpressionUUID->"651f7a3b-7f4d-4fd8-a4b6-631834c55540"]
}, Open  ]],
Cell[CellGroupData[{
Cell[144205, 4309, 194, 5, 31, "Input",ExpressionUUID->"85995b1c-fe0c-4cd0-ad64-606d675bcbef"],
Cell[144402, 4316, 111, 2, 31, "Output",ExpressionUUID->"7aa3fdfd-8ef5-4c2b-861b-5bc9dfb37e8e"]
}, Open  ]],
Cell[144528, 4321, 162, 4, 24, "Text",ExpressionUUID->"ffd7c6d3-28a9-408f-909d-0c040d2daaef"],
Cell[CellGroupData[{
Cell[144715, 4329, 147, 3, 31, "Input",ExpressionUUID->"1b48371e-eee3-48b3-bd42-583abbb6675f",
 InitializationCell->True],
Cell[144865, 4334, 247, 6, 31, "Output",ExpressionUUID->"7990ef1c-72a0-4fbb-a3c1-b5a78fb5f592"]
}, Open  ]],
Cell[145127, 4343, 469, 9, 58, "Text",ExpressionUUID->"b92b08fa-729d-4b9f-9871-a55098a36e74"],
Cell[CellGroupData[{
Cell[145621, 4356, 313, 9, 51, "Input",ExpressionUUID->"e34c19ac-8aab-4c16-869c-e0f61ee30253",
 InitializationCell->True],
Cell[145937, 4367, 266, 7, 31, "Output",ExpressionUUID->"0ad19466-97d3-4d6b-895f-f583354cfc2a"]
}, Open  ]],
Cell[146218, 4377, 897, 21, 71, "Text",ExpressionUUID->"129c755b-f3cb-40cb-a8d3-1ec712f2d4f6"],
Cell[CellGroupData[{
Cell[147140, 4402, 238, 6, 31, "Input",ExpressionUUID->"a894c119-bad6-4e63-8ca9-f9c5894c881a"],
Cell[147381, 4410, 178, 4, 31, "Output",ExpressionUUID->"b10a0154-c71c-48a1-a124-65bbabb96be5"]
}, Open  ]],
Cell[147574, 4417, 835, 16, 66, "Text",ExpressionUUID->"5b5aefcf-bfc0-419b-a4c3-fb0a38501069"],
Cell[148412, 4435, 515, 15, 51, "Input",ExpressionUUID->"6c2b7942-7bce-402f-9e47-cfcb40bc39e9",
 Evaluatable->False,
 InitializationCell->False],
Cell[148930, 4452, 980, 23, 69, "Text",ExpressionUUID->"16709508-4035-4966-b828-1b488bc2cd65"],
Cell[149913, 4477, 393, 8, 36, "Text",ExpressionUUID->"0924e896-f008-4608-87e8-ac788cb76939"],
Cell[150309, 4487, 261, 7, 31, "Input",ExpressionUUID->"046adf82-8769-412b-be2b-ed2ecedf7f15",
 InitializationCell->True],
Cell[150573, 4496, 306, 8, 39, "Text",ExpressionUUID->"bbde9fb7-c569-436d-9291-0a7d7cf561e7"],
Cell[CellGroupData[{
Cell[150904, 4508, 195, 5, 31, "Input",ExpressionUUID->"5430fd6e-abdd-46b2-afb8-1d74e224e469",
 InitializationCell->True],
Cell[151102, 4515, 163, 4, 24, "Print",ExpressionUUID->"18f81d5e-23eb-4972-993a-b94d98c13fa2"]
}, Open  ]],
Cell[151280, 4522, 784, 22, 58, "Text",ExpressionUUID->"b1bdc343-760b-4873-9b7c-4129a24222f8"],
Cell[152067, 4546, 213, 5, 31, "Input",ExpressionUUID->"3032e32b-027b-4152-89ff-9f88d59efc1c",
 InitializationCell->True],
Cell[152283, 4553, 406, 11, 40, "Text",ExpressionUUID->"d71b2236-c0b1-4f5e-899e-9e0afe881c70"],
Cell[CellGroupData[{
Cell[152714, 4568, 168, 4, 31, "Input",ExpressionUUID->"726f70bd-735a-435c-9e32-a6489ca127b8"],
Cell[152885, 4574, 186, 5, 24, "Print",ExpressionUUID->"3822fdfd-d08c-4121-b8e8-d21cc87ecf78"]
}, Open  ]],
Cell[153086, 4582, 1050, 25, 69, "Text",ExpressionUUID->"d52c8e41-5b3e-40df-a178-0fd8e69cdcf9"],
Cell[154139, 4609, 501, 12, 43, "Text",ExpressionUUID->"13214da6-5460-4048-8907-8210871894c7"],
Cell[154643, 4623, 363, 10, 31, "Input",ExpressionUUID->"e6e52491-ee10-4787-bc16-17c6ba33b32e",
 InitializationCell->True],
Cell[155009, 4635, 458, 11, 39, "Text",ExpressionUUID->"99244df3-c702-4eae-b945-10ec78249c3a"],
Cell[CellGroupData[{
Cell[155492, 4650, 123, 2, 31, "Input",ExpressionUUID->"ac9b0581-354c-4755-b63a-ce439a6593fc"],
Cell[155618, 4654, 401, 9, 24, "Message",ExpressionUUID->"5c776cfd-185e-48a6-97da-92c377633687"],
Cell[156022, 4665, 401, 9, 24, "Message",ExpressionUUID->"8f9a198c-8c3c-4db7-bcd0-7ace64a1c3a0"],
Cell[156426, 4676, 441, 10, 24, "Message",ExpressionUUID->"4486a799-996a-4698-b23b-430f639c5bba"],
Cell[156870, 4688, 412, 9, 24, "Message",ExpressionUUID->"1e0d32a1-df63-4d3a-bf77-2578ac9ab84b"],
Cell[157285, 4699, 171, 3, 31, "Output",ExpressionUUID->"895530e9-cd5e-4c7c-bd4a-01f3145d7eeb"]
}, Open  ]],
Cell[157471, 4705, 191, 4, 24, "Text",ExpressionUUID->"be23619f-70d0-47a5-b018-d9b699bb79b5"],
Cell[CellGroupData[{
Cell[157687, 4713, 158, 3, 31, "Input",ExpressionUUID->"b66ab92f-4de8-4442-b502-58bb4544b5ce"],
Cell[157848, 4718, 176, 4, 24, "Print",ExpressionUUID->"6eb85ff4-0c5c-4687-9cba-50c418299a1f"]
}, Open  ]],
Cell[158039, 4725, 705, 15, 55, "Text",ExpressionUUID->"92a11ec9-6922-4400-80f5-11d6ed738907"],
Cell[CellGroupData[{
Cell[158769, 4744, 158, 3, 31, "Input",ExpressionUUID->"fb776ba8-b7a6-427d-8e39-b194e6fb5641"],
Cell[158930, 4749, 330, 8, 31, "Output",ExpressionUUID->"beda263e-6d16-465b-8cdb-0494612c0a7b"]
}, Open  ]],
Cell[159275, 4760, 694, 14, 55, "Text",ExpressionUUID->"394574c7-caea-486f-9e02-de671a8366cc"],
Cell[159972, 4776, 253, 6, 20, "Text",ExpressionUUID->"62e2f45b-ac4e-457b-a4be-6811c7d99a38"],
Cell[CellGroupData[{
Cell[160250, 4786, 192, 5, 31, "Input",ExpressionUUID->"619b7041-697c-48ed-8647-5bd1780d5c49"],
Cell[160445, 4793, 611, 19, 62, "Output",ExpressionUUID->"2ac85e37-0372-4274-af49-22de4ec0ed6a"]
}, Open  ]],
Cell[161071, 4815, 448, 10, 40, "Text",ExpressionUUID->"f50cd16b-e65d-464c-a1aa-2c3fd07d5f09"],
Cell[CellGroupData[{
Cell[161544, 4829, 233, 6, 31, "Input",ExpressionUUID->"a4f7fd6e-89bf-408f-b39a-f86a09a0f35d"],
Cell[161780, 4837, 441, 10, 24, "Message",ExpressionUUID->"a3acb5d2-e927-41a6-9432-eb32110be102"],
Cell[162224, 4849, 171, 3, 31, "Output",ExpressionUUID->"337097cf-1c78-4be6-83d0-3688161f7ab9"]
}, Open  ]],
Cell[162410, 4855, 287, 7, 21, "Text",ExpressionUUID->"c5244345-05ca-4c22-a350-5461dbe8794d"],
Cell[CellGroupData[{
Cell[162722, 4866, 278, 7, 31, "Input",ExpressionUUID->"3b435612-f884-4c5c-930a-029d42af0b2a"],
Cell[163003, 4875, 247, 6, 31, "Output",ExpressionUUID->"0764ee5e-9109-40cd-8ba7-e65f11add6d5"]
}, Open  ]],
Cell[163265, 4884, 1328, 30, 87, "Text",ExpressionUUID->"48edf6e9-e75e-4e84-a727-71f26332980c"],
Cell[CellGroupData[{
Cell[164618, 4918, 228, 6, 31, "Input",ExpressionUUID->"931daacc-a3e6-4edc-8c12-fc548ce30032"],
Cell[164849, 4926, 116, 2, 31, "Output",ExpressionUUID->"e9814a6c-9d82-4cc9-9d76-986e17e4c786"]
}, Open  ]],
Cell[164980, 4931, 336, 8, 24, "Text",ExpressionUUID->"12a7e1bc-58b7-4770-8048-98d51317302a"],
Cell[165319, 4941, 1019, 28, 165, "Input",ExpressionUUID->"e1e00279-544a-4d84-9f6d-5d7c3ddc3399"],
Cell[166341, 4971, 565, 16, 39, "Text",ExpressionUUID->"f932b056-78eb-4069-9ee9-55f5d8289ea5"],
Cell[CellGroupData[{
Cell[166931, 4991, 158, 3, 31, "Input",ExpressionUUID->"1f958ad2-1b18-4bf2-a360-4de519d67350"],
Cell[167092, 4996, 269, 7, 24, "Print",ExpressionUUID->"034c67cc-db42-4211-b56c-fbbe808e9eba"]
}, Open  ]],
Cell[167376, 5006, 197, 3, 20, "Text",ExpressionUUID->"9d87c704-d2a2-49d5-aa98-f929c7ee912b"],
Cell[CellGroupData[{
Cell[167598, 5013, 168, 4, 31, "Input",ExpressionUUID->"6dc7770d-efa2-4317-9dad-c046abc5aff3"],
Cell[167769, 5019, 186, 5, 24, "Print",ExpressionUUID->"d11d33af-739c-4872-ba68-cb5a475440fb"]
}, Open  ]],
Cell[167970, 5027, 1235, 30, 86, "Text",ExpressionUUID->"9813128b-4298-45c9-b8e9-01c6a32c27d0"],
Cell[169208, 5059, 1087, 29, 165, "Input",ExpressionUUID->"91e0d96d-4f14-472e-a917-6c06899f85fb",
 InitializationCell->True],
Cell[170298, 5090, 185, 3, 20, "Text",ExpressionUUID->"84e91e73-bfe1-4259-ba3c-a90bb54f5738"],
Cell[170486, 5095, 216, 5, 31, "Input",ExpressionUUID->"173baf72-4447-4fac-b8a5-ccb9905af50b",
 InitializationCell->True],
Cell[170705, 5102, 741, 20, 108, "Input",ExpressionUUID->"60aa19d1-fc3f-4e61-81c1-4821c009c3fe",
 InitializationCell->True],
Cell[171449, 5124, 282, 6, 39, "Text",ExpressionUUID->"6f99d2ff-6d64-462b-a686-2c188035a12b"],
Cell[171734, 5132, 438, 13, 70, "Input",ExpressionUUID->"d9e0f65b-516e-45af-93e4-7356a8718ddd",
 InitializationCell->True],
Cell[172175, 5147, 214, 5, 31, "Input",ExpressionUUID->"c942e6e3-22ff-4d97-9e33-f613244bc504",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[172414, 5156, 159, 3, 31, "Input",ExpressionUUID->"1c013ec1-b9dc-4f13-ae5b-1e6fd9187238"],
Cell[172576, 5161, 269, 7, 24, "Print",ExpressionUUID->"1e5c5303-ccf2-4645-8555-52a1fad6ff36"]
}, Open  ]],
Cell[CellGroupData[{
Cell[172882, 5173, 169, 4, 31, "Input",ExpressionUUID->"b4b3c4eb-0ab3-4125-9d39-936159a27c33"],
Cell[173054, 5179, 186, 5, 24, "Print",ExpressionUUID->"1ecd83a3-00fc-4df9-8d80-460cac2276f9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[173277, 5189, 202, 5, 31, "Input",ExpressionUUID->"4bbcdb03-abf1-4c58-bbd6-62518d6db539"],
Cell[173482, 5196, 187, 5, 24, "Print",ExpressionUUID->"6c28131d-e1bc-4029-960f-3fd04b75a7ff"]
}, Open  ]],
Cell[173684, 5204, 205, 6, 24, "Text",ExpressionUUID->"24ca0be4-a00b-484a-a530-ee014c5d6644"],
Cell[173892, 5212, 3435, 89, 374, "Input",ExpressionUUID->"f3613d10-c9b9-4ce1-898a-d0b5d48875ef",
 InitializationCell->True],
Cell[177330, 5303, 230, 6, 21, "Text",ExpressionUUID->"531f0bd4-243a-4879-82fa-6426f9471da4"],
Cell[CellGroupData[{
Cell[177585, 5313, 501, 14, 51, "Input",ExpressionUUID->"0b2adf13-392c-4515-b498-0ba9fb276fa6"],
Cell[178089, 5329, 114, 2, 31, "Output",ExpressionUUID->"4103509d-5680-4b93-8f9d-756ec1442aad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[178240, 5336, 491, 14, 51, "Input",ExpressionUUID->"3f694ed5-675d-40b8-be14-f5c894a0acb2"],
Cell[178734, 5352, 115, 2, 31, "Output",ExpressionUUID->"9c20460a-dc47-45d5-9c26-e09e08d323e1"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[178910, 5361, 138, 1, 32, "Subsection",ExpressionUUID->"ab9c1ee4-ca67-412b-853f-85a495c37cd5",
 CellTags->"Section2c"],
Cell[179051, 5364, 386, 6, 50, "Text",ExpressionUUID->"b878bc55-6505-4dca-a7e7-ec0e5ba3164e"],
Cell[CellGroupData[{
Cell[179462, 5374, 115, 0, 18, "Subsubsection",ExpressionUUID->"29a69d51-43ae-465f-a25f-6a7bc264bcb6"],
Cell[179580, 5376, 246, 4, 35, "Text",ExpressionUUID->"c9abcaac-38c6-44c5-837d-f21402f51abc"],
Cell[179829, 5382, 713, 11, 50, "Text",ExpressionUUID->"6cf701c8-84c0-4164-9991-1f5fc3d29e02"],
Cell[CellGroupData[{
Cell[180567, 5397, 409, 12, 31, "Input",ExpressionUUID->"8419fc7a-a416-49c9-bb20-55921efa2346",
 InitializationCell->True],
Cell[180979, 5411, 346, 10, 31, "Output",ExpressionUUID->"82818ea6-e958-4043-bd34-3e7f0cb006d3"]
}, Open  ]],
Cell[181340, 5424, 191, 3, 20, "Text",ExpressionUUID->"9426bcb1-e189-4728-ac6d-2ebe7468c859"],
Cell[181534, 5429, 501, 7, 50, "Text",ExpressionUUID->"c485ae2d-a43f-4987-b062-1a5c0630fcd7"],
Cell[CellGroupData[{
Cell[182060, 5440, 326, 8, 31, "Input",ExpressionUUID->"9cee6ead-b1d0-4ed7-bfe4-bb6b4caaadd1",
 InitializationCell->True],
Cell[182389, 5450, 266, 5, 31, "Output",ExpressionUUID->"327fab6e-7095-4e79-bce3-f65e0ae9a988"]
}, Open  ]],
Cell[182670, 5458, 312, 8, 39, "Text",ExpressionUUID->"9585a787-851a-49f7-a78f-171703552ee1"],
Cell[CellGroupData[{
Cell[183007, 5470, 283, 8, 31, "Input",ExpressionUUID->"45e8e75f-9cfb-4aa4-bda4-ab9a6daea0e1",
 InitializationCell->True],
Cell[183293, 5480, 221, 6, 31, "Output",ExpressionUUID->"26f874bd-249e-4c01-8014-0be299b8cf9f"]
}, Open  ]],
Cell[183529, 5489, 921, 17, 82, "Text",ExpressionUUID->"cedccc48-da5a-4ab4-a573-7550c649f4f8"],
Cell[CellGroupData[{
Cell[184475, 5510, 285, 8, 31, "Input",ExpressionUUID->"71e8be48-685d-40aa-95d0-d0313d23a396"],
Cell[184763, 5520, 124, 2, 31, "Output",ExpressionUUID->"1bfa27ce-9516-4c63-9128-c0f93b157e5a"]
}, Open  ]],
Cell[184902, 5525, 1071, 17, 96, "Text",ExpressionUUID->"ba490223-d209-4389-b053-9d42412b4511"],
Cell[CellGroupData[{
Cell[185998, 5546, 384, 9, 31, "Input",ExpressionUUID->"b7944ab0-9bf6-4c58-8962-258cb8fc3dff"],
Cell[186385, 5557, 391, 9, 33, "Output",ExpressionUUID->"98d4ad2d-daa5-4f13-b77e-39b3c0195011"]
}, Open  ]],
Cell[186791, 5569, 793, 14, 67, "Text",ExpressionUUID->"3c3f3f2e-8606-41ec-b7d9-4bdd71615a0a"],
Cell[187587, 5585, 383, 6, 39, "Text",ExpressionUUID->"b889ac05-7325-49da-80e4-d424b348e3fa"],
Cell[CellGroupData[{
Cell[187995, 5595, 154, 3, 31, "Input",ExpressionUUID->"6647e844-8743-4f1f-9d5d-dc8ba0f71866"],
Cell[188152, 5600, 112, 2, 31, "Output",ExpressionUUID->"3d538826-1ee4-4c19-818c-5ff727e2dc9d"]
}, Open  ]],
Cell[188279, 5605, 1125, 27, 90, "Text",ExpressionUUID->"8d121d1f-7ef3-42f7-968d-3d4949c2810e"],
Cell[CellGroupData[{
Cell[189429, 5636, 164, 4, 31, "Input",ExpressionUUID->"8eb3db7b-c9cf-49cb-8c56-557655ca17eb"],
Cell[189596, 5642, 114, 2, 31, "Output",ExpressionUUID->"620d434e-645f-44bd-9b38-ae222979b359"]
}, Open  ]],
Cell[CellGroupData[{
Cell[189747, 5649, 195, 5, 31, "Input",ExpressionUUID->"30dd08a4-2524-4948-bb0b-f9a06bc9fef1"],
Cell[189945, 5656, 183, 4, 31, "Output",ExpressionUUID->"ad810e2b-0017-48a3-ab37-4d8cb3ac7c42"]
}, Open  ]],
Cell[190143, 5663, 1064, 23, 67, "Text",ExpressionUUID->"1a1c5768-f1ea-4603-ada2-9458dbfaaea5"],
Cell[CellGroupData[{
Cell[191232, 5690, 217, 5, 31, "Input",ExpressionUUID->"46d0b654-9927-4fec-a6ed-7e295d6b923f"],
Cell[191452, 5697, 445, 10, 33, "Output",ExpressionUUID->"4e334555-1a52-44c5-8018-a2d5be9c7af9"]
}, Open  ]],
Cell[191912, 5710, 159, 4, 24, "Text",ExpressionUUID->"16b73d4a-1edc-447c-b803-6f8c9531ff35"],
Cell[CellGroupData[{
Cell[192096, 5718, 114, 2, 31, "Input",ExpressionUUID->"fa75830b-e91b-4b6a-a211-65210c9d7740"],
Cell[192213, 5722, 445, 10, 33, "Output",ExpressionUUID->"8fb1c179-7006-4933-80e4-199f3a0ab45c"]
}, Open  ]],
Cell[192673, 5735, 395, 7, 36, "Text",ExpressionUUID->"10ec5fdc-c92f-4f8d-8f93-d03c1c72ad3f"],
Cell[CellGroupData[{
Cell[193093, 5746, 186, 4, 31, "Input",ExpressionUUID->"294b0d73-6a96-4a0e-a454-e0ab3edf4de0"],
Cell[193282, 5752, 392, 9, 33, "Output",ExpressionUUID->"4d973878-097d-4e8d-b443-b337530d3467"]
}, Open  ]],
Cell[193689, 5764, 161, 3, 20, "Text",ExpressionUUID->"d855edc8-8d68-493e-9df2-065b3827b645"],
Cell[CellGroupData[{
Cell[193875, 5771, 180, 4, 31, "Input",ExpressionUUID->"161a49f2-515f-4861-a788-57e5494905ff"],
Cell[194058, 5777, 115, 2, 31, "Output",ExpressionUUID->"57e401c5-3fc3-480a-9c54-33a51a6ff5d2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[194222, 5785, 131, 0, 18, "Subsubsection",ExpressionUUID->"3030cc7d-eb3d-4ff9-b1a2-b25f700e2cce"],
Cell[194356, 5787, 508, 11, 37, "Text",ExpressionUUID->"4272f598-dcdd-4e9a-b2b7-f092b0e4d0c9"],
Cell[CellGroupData[{
Cell[194889, 5802, 329, 8, 31, "Input",ExpressionUUID->"afe86735-b0f2-45b1-af93-0e5d43103e63"],
Cell[195221, 5812, 327, 8, 33, "Output",ExpressionUUID->"5e4ee3f4-7464-4e2a-8535-c40e4ce99366"]
}, Open  ]],
Cell[195563, 5823, 645, 10, 69, "Text",ExpressionUUID->"a174e8ea-a3fe-4b31-bf4b-d92d62e8c948"],
Cell[CellGroupData[{
Cell[196233, 5837, 160, 3, 31, "Input",ExpressionUUID->"3d8aceeb-2b88-4869-a5a0-0574cb7bf26a"],
Cell[196396, 5842, 114, 2, 31, "Output",ExpressionUUID->"b7d32f06-996f-4179-a4ac-c4ee7862f705"]
}, Open  ]],
Cell[CellGroupData[{
Cell[196547, 5849, 160, 3, 31, "Input",ExpressionUUID->"06f788c3-dc75-4f21-8f58-5c0390e8fcf6"],
Cell[196710, 5854, 191, 4, 31, "Output",ExpressionUUID->"3f5ff8d0-8f19-44c5-93df-85c13fff6344"]
}, Open  ]],
Cell[196916, 5861, 435, 10, 36, "Text",ExpressionUUID->"d7869841-b43e-4b65-8b4a-3ae0abb56424"],
Cell[CellGroupData[{
Cell[197376, 5875, 188, 4, 31, "Input",ExpressionUUID->"1227b949-6618-4cb1-b119-d75a7b5def41"],
Cell[197567, 5881, 114, 2, 31, "Output",ExpressionUUID->"8c23f99d-6ef0-402a-b678-fce86d0378f2"]
}, Open  ]],
Cell[197696, 5886, 227, 3, 35, "Text",ExpressionUUID->"bef55fc3-a77e-4c58-b181-86fcd81e968e"],
Cell[CellGroupData[{
Cell[197948, 5893, 198, 4, 31, "Input",ExpressionUUID->"87686b85-883a-49f2-9e55-af48f370c30b"],
Cell[198149, 5899, 111, 2, 31, "Output",ExpressionUUID->"587dca7f-3901-4bbb-83e6-6eec35c2dcec"]
}, Open  ]],
Cell[198275, 5904, 193, 3, 20, "Text",ExpressionUUID->"ff1a1f73-293b-46a4-9a1d-9866aa993556"],
Cell[198471, 5909, 306, 8, 31, "Input",ExpressionUUID->"df8626ba-7bc0-4022-a1ab-58ec7c074dac",
 InitializationCell->True],
Cell[198780, 5919, 356, 5, 35, "Text",ExpressionUUID->"cea59e22-7fab-4542-8124-dbfba924ba73"],
Cell[CellGroupData[{
Cell[199161, 5928, 330, 8, 31, "Input",ExpressionUUID->"36ca616d-1d19-4d18-bd33-c674c702a59f"],
Cell[199494, 5938, 327, 8, 33, "Output",ExpressionUUID->"d4dee3c5-fa34-49bf-8648-170fd2d08f1d"]
}, Open  ]],
Cell[199836, 5949, 578, 13, 51, "Text",ExpressionUUID->"b60c511c-0159-4dca-8741-6675d5972a79"],
Cell[CellGroupData[{
Cell[200439, 5966, 155, 3, 31, "Input",ExpressionUUID->"1abfa657-6cf4-4456-ba99-d67b31126351"],
Cell[200597, 5971, 192, 5, 31, "Output",ExpressionUUID->"fb3b9425-240b-4aa1-b1ac-c8fe607b7a37"]
}, Open  ]],
Cell[CellGroupData[{
Cell[200826, 5981, 157, 3, 31, "Input",ExpressionUUID->"52596702-ffaf-4105-bce5-fa28644f5de5"],
Cell[200986, 5986, 175, 4, 31, "Output",ExpressionUUID->"13b811f9-5851-4cbd-8d82-6f4885d9a815"]
}, Open  ]],
Cell[201176, 5993, 230, 3, 35, "Text",ExpressionUUID->"8b8dbca6-fd6f-4f4c-b73b-d7f1afc310d6"],
Cell[CellGroupData[{
Cell[201431, 6000, 307, 7, 31, "Input",ExpressionUUID->"2d892af0-6c63-44d2-a9a5-e5d0d86fc8ae"],
Cell[201741, 6009, 172, 4, 31, "Output",ExpressionUUID->"1a1948ac-b78a-4be8-9827-0335d54464ae"]
}, Open  ]],
Cell[201928, 6016, 461, 10, 39, "Text",ExpressionUUID->"30134cb6-0c27-45e5-990c-5e324d7787ae"],
Cell[CellGroupData[{
Cell[202414, 6030, 341, 9, 31, "Input",ExpressionUUID->"4e9a41e7-de21-4122-b789-63e2271b8fc9"],
Cell[202758, 6041, 114, 2, 31, "Output",ExpressionUUID->"4c76537b-1977-472f-a5dd-9c5f0a466614"]
}, Open  ]],
Cell[202887, 6046, 517, 12, 43, "Text",ExpressionUUID->"31e88d54-7945-4085-926b-8b1ccd5d15c1"],
Cell[CellGroupData[{
Cell[203429, 6062, 506, 13, 70, "Input",ExpressionUUID->"7b43d043-4d34-441f-8083-580183fc4718"],
Cell[203938, 6077, 162, 4, 31, "Output",ExpressionUUID->"3195b6ca-3dcc-4106-9833-f477474e5577"]
}, Open  ]],
Cell[204115, 6084, 949, 17, 82, "Text",ExpressionUUID->"1fdfb786-5234-43cc-973e-0107731ec870"],
Cell[CellGroupData[{
Cell[205089, 6105, 221, 5, 31, "Input",ExpressionUUID->"e5851e82-dc17-445d-98ee-a9a21a0ca978"],
Cell[205313, 6112, 276, 7, 33, "Output",ExpressionUUID->"7974cc2c-9f6b-4f98-b4b7-e2d3c76c8781"]
}, Open  ]],
Cell[205604, 6122, 149, 2, 20, "Text",ExpressionUUID->"a9eef996-cab0-44dc-a49a-066ba5811043"],
Cell[205756, 6126, 1144, 32, 108, "Input",ExpressionUUID->"2ee57203-fa45-4364-bb2d-d59b61b7aca8",
 InitializationCell->True],
Cell[206903, 6160, 204, 3, 20, "Text",ExpressionUUID->"58e15bb5-be6d-47aa-ba45-de09a0c53d11"]
}, Open  ]],
Cell[CellGroupData[{
Cell[207144, 6168, 131, 0, 18, "Subsubsection",ExpressionUUID->"d0ecfce0-3adf-4e5d-8460-738dcf1fa0c7"],
Cell[207278, 6170, 542, 10, 51, "Text",ExpressionUUID->"46a92af0-5665-4cac-b03c-1853b30ebdb8"],
Cell[207823, 6182, 1245, 34, 127, "Input",ExpressionUUID->"c9917f50-b9fe-40c8-9ff3-a3780ea4c4c5",
 InitializationCell->True],
Cell[209071, 6218, 353, 9, 24, "Text",ExpressionUUID->"26659f44-7040-4308-85ef-0792c9fdfa4d"],
Cell[CellGroupData[{
Cell[209449, 6231, 188, 4, 31, "Input",ExpressionUUID->"db1458a2-f196-4d30-bf66-8a92d9bd3cf9"],
Cell[209640, 6237, 346, 10, 31, "Output",ExpressionUUID->"066745a0-3161-4d15-8982-e2209d3b85e1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[210035, 6253, 131, 0, 18, "Subsubsection",ExpressionUUID->"3a27f9c3-5a10-42b3-b148-5fc38ec5ec96"],
Cell[210169, 6255, 946, 21, 69, "Text",ExpressionUUID->"56ddede0-7348-48f6-b091-784f551e6af3"],
Cell[211118, 6278, 869, 18, 67, "Text",ExpressionUUID->"9e2c4972-86df-4d04-a055-05c37d00f7f6"],
Cell[CellGroupData[{
Cell[212012, 6300, 287, 8, 31, "Input",ExpressionUUID->"af266e0a-d9fe-45d8-862c-2fe2b84d68f0"],
Cell[212302, 6310, 204, 6, 31, "Output",ExpressionUUID->"6e2d6792-8a29-4fd9-b304-5c8bc69cc5d0"]
}, Open  ]],
Cell[212521, 6319, 283, 6, 21, "Text",ExpressionUUID->"635015b2-b81c-4855-a79a-9bf7f383a5aa"],
Cell[CellGroupData[{
Cell[212829, 6329, 312, 9, 31, "Input",ExpressionUUID->"ab9edf98-d2a6-4666-9824-0de4e64e3dbe"],
Cell[213144, 6340, 229, 7, 31, "Output",ExpressionUUID->"8c5c08cc-8502-488c-8c6c-3f9058ec0382"]
}, Open  ]],
Cell[213388, 6350, 173, 3, 20, "Text",ExpressionUUID->"8346fa73-f81b-468b-ba77-446921961152"],
Cell[213564, 6355, 634, 15, 55, "Text",ExpressionUUID->"a5b1787c-cb0e-4430-9c13-3a48eb1ac452"],
Cell[CellGroupData[{
Cell[214223, 6374, 256, 7, 31, "Input",ExpressionUUID->"b6365a4d-7a02-43b3-a180-6cca8e5c814a"],
Cell[214482, 6383, 111, 2, 31, "Output",ExpressionUUID->"bbcd997b-2608-487c-ad90-8b303772321a"]
}, Open  ]],
Cell[214608, 6388, 156, 4, 24, "Text",ExpressionUUID->"822e4c81-5331-4b1d-a897-f2ee4768862a"],
Cell[214767, 6394, 1333, 39, 146, "Input",ExpressionUUID->"1d26bfd8-f19d-4abe-912f-4c5f0406e10a",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[216125, 6437, 185, 4, 31, "Input",ExpressionUUID->"0a07c262-1834-4e1c-8569-8f246f3dcb40"],
Cell[216313, 6443, 221, 6, 31, "Output",ExpressionUUID->"4a2788dd-ccda-48da-a9a9-6e85fc7f005d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[216583, 6455, 139, 1, 18, "Subsubsection",ExpressionUUID->"c5f1b64d-3cb7-4022-9a4e-d412b6e45fb7"],
Cell[216725, 6458, 481, 10, 37, "Text",ExpressionUUID->"a8eaed72-41d4-421f-9ebe-24c9c3d884ee"],
Cell[CellGroupData[{
Cell[217231, 6472, 154, 3, 31, "Input",ExpressionUUID->"0d80349f-c743-4b4f-8976-9c5f8ffc1879"],
Cell[217388, 6477, 527, 17, 42, "Output",ExpressionUUID->"ab5ec12e-041f-4424-831a-0e6539123032"]
}, Open  ]],
Cell[CellGroupData[{
Cell[217952, 6499, 159, 3, 31, "Input",ExpressionUUID->"13a5c2ed-4af9-4cf1-a303-a5b89c46b74d"],
Cell[218114, 6504, 534, 17, 42, "Output",ExpressionUUID->"7accd513-9ac5-49f6-8e14-a65fc77354a2"]
}, Open  ]],
Cell[218663, 6524, 1099, 25, 86, "Text",ExpressionUUID->"8540db8a-4bb8-460b-a710-b0ce6bbe018c"],
Cell[CellGroupData[{
Cell[219787, 6553, 211, 5, 31, "Input",ExpressionUUID->"134bc6ec-5627-45a6-a268-7c5b1644ca34"],
Cell[220001, 6560, 289, 7, 31, "Output",ExpressionUUID->"4e400fa2-4b2a-42ee-b87e-f66c8e1a77f4"]
}, Open  ]],
Cell[220305, 6570, 463, 12, 43, "Text",ExpressionUUID->"9688673a-b2ad-42ba-b480-a19727eb2227"],
Cell[CellGroupData[{
Cell[220793, 6586, 147, 3, 31, "Input",ExpressionUUID->"f28e9387-d7f7-48eb-a371-41727f0c0677"],
Cell[220943, 6591, 289, 7, 31, "Output",ExpressionUUID->"f4c84a7c-4506-48d8-9c89-3ac5b2e1d99d"]
}, Open  ]],
Cell[221247, 6601, 489, 13, 40, "Text",ExpressionUUID->"c9bb0842-bcae-4a6b-b3bd-bb1b1b34b6ff"],
Cell[CellGroupData[{
Cell[221761, 6618, 181, 4, 31, "Input",ExpressionUUID->"878bc1dd-69db-4fd0-ae3d-822846858f08"],
Cell[221945, 6624, 327, 8, 33, "Output",ExpressionUUID->"1a48fcfb-02a7-43a7-b324-6a1d5c45a116"]
}, Open  ]],
Cell[222287, 6635, 1106, 28, 71, "Text",ExpressionUUID->"87eb2c6e-22f9-4bd3-8aec-684906b62366"],
Cell[CellGroupData[{
Cell[223418, 6667, 154, 3, 31, "Input",ExpressionUUID->"fa1e8240-02ef-416c-8fb0-1629ff4878a1"],
Cell[223575, 6672, 114, 2, 31, "Output",ExpressionUUID->"a3a03484-1684-4a3d-8b48-f76ee936a278"]
}, Open  ]],
Cell[223704, 6677, 277, 8, 24, "Text",ExpressionUUID->"cab842cd-6182-43bf-82f2-f07c5bd7d40d"],
Cell[CellGroupData[{
Cell[224006, 6689, 151, 3, 31, "Input",ExpressionUUID->"59456243-a0cc-40a8-a642-da80df33509c"],
Cell[224160, 6694, 175, 4, 31, "Output",ExpressionUUID->"700b698c-9694-4d23-8e47-85d68bdcbb5a"]
}, Open  ]],
Cell[224350, 6701, 307, 7, 21, "Text",ExpressionUUID->"7ef76962-0d46-4f79-8948-45ead9bd53c9"],
Cell[CellGroupData[{
Cell[224682, 6712, 157, 3, 31, "Input",ExpressionUUID->"fa895188-f5d4-4be4-8a61-e2a8f3f70968"],
Cell[224842, 6717, 289, 7, 31, "Output",ExpressionUUID->"8a6e730c-047e-4169-8e1e-1724f92461d0"]
}, Open  ]],
Cell[225146, 6727, 285, 8, 24, "Text",ExpressionUUID->"60196904-2c8a-4adb-8763-cf64f2ff18e1"],
Cell[CellGroupData[{
Cell[225456, 6739, 185, 4, 31, "Input",ExpressionUUID->"dd43ac23-e84e-4a8e-9f41-e0c5c1e1f71b"],
Cell[225644, 6745, 346, 10, 31, "Output",ExpressionUUID->"79ef7d4a-1a41-4f51-83bc-239ef0ac49c1"]
}, Open  ]],
Cell[226005, 6758, 143, 2, 20, "Text",ExpressionUUID->"4aa5de63-960b-495f-810e-577dcdf29e95"],
Cell[226151, 6762, 464, 12, 51, "Input",ExpressionUUID->"d14ba305-471a-415d-8d01-0819343823e5",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[226640, 6778, 159, 3, 31, "Input",ExpressionUUID->"50bdb074-0dfd-40df-8690-a35ad9823edc"],
Cell[226802, 6783, 327, 8, 33, "Output",ExpressionUUID->"b7be102b-7c4b-44a0-b633-644f12843f02"]
}, Open  ]],
Cell[CellGroupData[{
Cell[227166, 6796, 164, 3, 31, "Input",ExpressionUUID->"b7019b7a-f766-4d37-ae5b-31264562c9c0"],
Cell[227333, 6801, 346, 10, 31, "Output",ExpressionUUID->"1ff6ba7e-a7d0-4387-9bd9-127e9820e7d9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[227752, 6819, 110, 1, 55, "Section",ExpressionUUID->"e6c90751-d1e3-40ed-bf12-f13c23d685bc",
 CellTags->"Section3"],
Cell[227865, 6822, 268, 4, 35, "Text",ExpressionUUID->"0ea662fc-1a56-4312-9512-d5a72333f5d5"],
Cell[CellGroupData[{
Cell[228158, 6830, 110, 1, 32, "Subsection",ExpressionUUID->"d8821b9e-0343-412a-9613-a059e8476eab",
 CellTags->"Section3a"],
Cell[228271, 6833, 1163, 26, 88, "Text",ExpressionUUID->"29543f9c-457d-40cc-89ea-bc74f39fbcda"],
Cell[229437, 6861, 265, 4, 35, "Text",ExpressionUUID->"051de457-7d38-41ce-ab0c-5ba5e76de2c0"],
Cell[229705, 6867, 329, 5, 35, "Text",ExpressionUUID->"5edbc1fa-1f7a-4be3-81d1-9587428957df"],
Cell[230037, 6874, 230, 6, 31, "Input",ExpressionUUID->"d3da3d96-1d3c-4f06-835b-dd41a0fd1c5e",
 InitializationCell->True],
Cell[230270, 6882, 441, 10, 39, "Text",ExpressionUUID->"dc138eb9-e5f4-4c1f-a7fc-8a3673a7bd71"],
Cell[230714, 6894, 659, 15, 54, "Text",ExpressionUUID->"72e1722b-0b0b-4f10-9763-acdb90fb8894"],
Cell[CellGroupData[{
Cell[231398, 6913, 154, 3, 31, "Input",ExpressionUUID->"8fafed04-390a-4866-89a4-fbdefe1cd479"],
Cell[231555, 6918, 155, 3, 31, "Output",ExpressionUUID->"16ed9c2f-fe34-45a3-ab77-36b08cc386ad"]
}, Open  ]],
Cell[231725, 6924, 758, 20, 36, "Text",ExpressionUUID->"a368c21e-0b31-40ff-87dd-d88aee751e4e"],
Cell[232486, 6946, 268, 8, 31, "Input",ExpressionUUID->"320296a5-158c-4453-a1a8-d615c81ed8a2",
 InitializationCell->True],
Cell[232757, 6956, 205, 3, 20, "Text",ExpressionUUID->"232a1fc4-3b6a-4202-9327-872470c9bf27"],
Cell[CellGroupData[{
Cell[232987, 6963, 220, 6, 31, "Input",ExpressionUUID->"af5afcb9-2797-4548-bc28-f01fe6d02765"],
Cell[233210, 6971, 111, 2, 31, "Output",ExpressionUUID->"31bf44a9-8cd4-47bd-a358-95a11372fc55"]
}, Open  ]],
Cell[CellGroupData[{
Cell[233358, 6978, 140, 3, 31, "Input",ExpressionUUID->"5b8379a6-dcd6-49c9-a39d-a299e75c918b"],
Cell[233501, 6983, 141, 3, 31, "Output",ExpressionUUID->"429b0d41-deab-42bd-a665-71812939f478"]
}, Open  ]],
Cell[233657, 6989, 620, 17, 62, "Text",ExpressionUUID->"9aa0d1eb-288f-4ab7-b4e3-2816a9a435fa"],
Cell[234280, 7008, 526, 9, 51, "Text",ExpressionUUID->"7f36abee-1c7d-48cd-b504-b8f66bdea6c5"],
Cell[234809, 7019, 243, 7, 31, "Input",ExpressionUUID->"bcdfd51c-e0b5-4fb3-b775-9e09f7a42976",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[235077, 7030, 140, 3, 31, "Input",ExpressionUUID->"e353ea1f-df35-427a-a31b-38c89fc69735"],
Cell[235220, 7035, 111, 2, 31, "Output",ExpressionUUID->"f74d5170-d350-4bad-98b6-334134b57e09"]
}, Open  ]],
Cell[CellGroupData[{
Cell[235368, 7042, 140, 3, 31, "Input",ExpressionUUID->"a0338cb6-ae0e-4d54-901c-38434194566f"],
Cell[235511, 7047, 141, 3, 31, "Output",ExpressionUUID->"ce660c2c-f81c-4bef-8571-05ff9b206551"]
}, Open  ]],
Cell[235667, 7053, 1082, 28, 66, "Text",ExpressionUUID->"80759587-cb37-4951-9c65-c3373153cd52"],
Cell[236752, 7083, 1032, 24, 74, "Text",ExpressionUUID->"3be7cebd-3e27-4a20-8e2e-5790d751f37b"],
Cell[237787, 7109, 291, 8, 31, "Input",ExpressionUUID->"1296b28a-867f-484f-a642-5d015f5ec69b",
 InitializationCell->True],
Cell[238081, 7119, 612, 17, 108, "Input",ExpressionUUID->"160b25ed-7bf4-451a-afef-163bb62b3e8b",
 InitializationCell->True],
Cell[238696, 7138, 149, 2, 20, "Text",ExpressionUUID->"c074d0c2-f1b8-438d-bf5c-d1bc00901aef"],
Cell[CellGroupData[{
Cell[238870, 7144, 141, 3, 31, "Input",ExpressionUUID->"95b78065-2499-4fa2-9c1a-529834fc85e8"],
Cell[239014, 7149, 133, 3, 24, "Print",ExpressionUUID->"e5098654-35b1-4b34-9847-771aa7044445"],
Cell[239150, 7154, 133, 3, 24, "Print",ExpressionUUID->"03f0a60f-acb3-49d9-9c07-dd0fd6cf568a"],
Cell[239286, 7159, 133, 3, 24, "Print",ExpressionUUID->"5a932e19-e8d3-4376-aaa4-fd6be5b0eae6"]
}, Open  ]],
Cell[239434, 7165, 264, 5, 39, "Text",ExpressionUUID->"f5933ea4-9943-4cbf-afd5-c9f70e6e1350"],
Cell[CellGroupData[{
Cell[239723, 7174, 159, 4, 31, "Input",ExpressionUUID->"99778533-68e1-4618-af2d-2bb903640fc3"],
Cell[239885, 7180, 160, 4, 31, "Output",ExpressionUUID->"45f16a06-061f-4024-9de0-6b886ab11337"]
}, Open  ]],
Cell[240060, 7187, 371, 9, 24, "Text",ExpressionUUID->"02a43c02-0d7c-4f81-80dd-3f2db454ffd7"],
Cell[240434, 7198, 1435, 37, 119, "Text",ExpressionUUID->"6717d6f7-e0af-4972-abd6-c9b46fd0899f"],
Cell[241872, 7237, 207, 4, 24, "Text",ExpressionUUID->"1d0b6982-0b5e-4313-98af-378ce7f63db5"],
Cell[242082, 7243, 661, 20, 70, "Input",ExpressionUUID->"7306cddf-3233-488b-94b3-b0b8af09c082",
 InitializationCell->True],
Cell[242746, 7265, 435, 9, 39, "Text",ExpressionUUID->"73c6be07-434f-4090-9647-f12fdf03959f"],
Cell[243184, 7276, 361, 11, 32, "Input",ExpressionUUID->"68c3f7be-9994-4a77-805d-89644e97a51a",
 InitializationCell->True],
Cell[243548, 7289, 241, 4, 35, "Text",ExpressionUUID->"451702c4-8652-441b-998e-e99c3886da71"],
Cell[CellGroupData[{
Cell[243814, 7297, 194, 5, 31, "Input",ExpressionUUID->"eef27122-c8f2-4697-bef9-73afd823f7a5"],
Cell[244011, 7304, 111, 2, 31, "Output",ExpressionUUID->"5e4a17a8-1f5b-43be-831e-81b1b585be45"]
}, Open  ]],
Cell[CellGroupData[{
Cell[244159, 7311, 204, 5, 31, "Input",ExpressionUUID->"d1c597ff-aad4-46fe-9c3d-6051b6c62091"],
Cell[244366, 7318, 111, 2, 31, "Output",ExpressionUUID->"fa6eee49-dc91-4064-8b32-62eef9c01a14"]
}, Open  ]],
Cell[CellGroupData[{
Cell[244514, 7325, 204, 5, 31, "Input",ExpressionUUID->"07d2d517-0c6e-499a-9fee-ab902acfec20"],
Cell[244721, 7332, 205, 5, 31, "Output",ExpressionUUID->"f5ebe2a4-b643-49dc-9283-517aa0b5011d"]
}, Open  ]],
Cell[244941, 7340, 175, 3, 20, "Text",ExpressionUUID->"c4afe929-820f-4387-ae0d-cfa008a7f134"],
Cell[245119, 7345, 444, 13, 51, "Input",ExpressionUUID->"8fa1a935-f5bd-424f-a468-e57e8079a43e"],
Cell[245566, 7360, 188, 4, 20, "Text",ExpressionUUID->"8172a504-3668-4046-bae9-28034770f282"],
Cell[245757, 7366, 352, 6, 39, "Text",ExpressionUUID->"674a6020-6d9e-4715-a195-3ed8e5dd64bf"],
Cell[246112, 7374, 476, 15, 31, "Input",ExpressionUUID->"243a7d09-9ccb-4773-a1cd-3a103024a55c",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[246613, 7393, 201, 5, 31, "Input",ExpressionUUID->"02ee332e-c51d-4256-b8a0-4f17cd0db554"],
Cell[246817, 7400, 250, 5, 31, "Output",ExpressionUUID->"ef8cdad8-00fd-405c-bff0-8efbe952cae8"]
}, Open  ]],
Cell[247082, 7408, 1102, 26, 88, "Text",ExpressionUUID->"989e0fda-83f0-4930-8e80-261ecf8496d9"],
Cell[248187, 7436, 1025, 30, 127, "Input",ExpressionUUID->"0a628048-2a3c-4213-9a43-7be84e91157b",
 InitializationCell->True],
Cell[249215, 7468, 162, 3, 20, "Text",ExpressionUUID->"e51f692e-81ec-478a-a3e1-ca3afd2c0a5c"],
Cell[CellGroupData[{
Cell[249402, 7475, 211, 5, 31, "Input",ExpressionUUID->"60d44183-0142-4c63-afa0-237beecd1819"],
Cell[249616, 7482, 114, 2, 31, "Output",ExpressionUUID->"cc60fde6-eee8-4fdf-903a-08eeec45a9e4"]
}, Open  ]],
Cell[249745, 7487, 160, 3, 20, "Text",ExpressionUUID->"4706e520-5e39-45c3-8a18-96bbd6328ac0"],
Cell[CellGroupData[{
Cell[249930, 7494, 213, 5, 31, "Input",ExpressionUUID->"d013d2ad-2bad-46c2-82a4-d4e41ff1796f"],
Cell[250146, 7501, 215, 5, 31, "Output",ExpressionUUID->"9860aa62-050e-4702-98a7-6a92f27860a8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[250410, 7512, 115, 1, 32, "Subsection",ExpressionUUID->"79aa057a-ae89-407a-a83c-53659d9a3d0c",
 CellTags->"Section3b"],
Cell[250528, 7515, 422, 10, 39, "Text",ExpressionUUID->"db7cec0b-2db5-4646-a4b5-cd8046b0cfbb"],
Cell[250953, 7527, 713, 19, 61, "Text",ExpressionUUID->"e78292c7-4c26-4ff3-a97a-0816f68e80d2"],
Cell[251669, 7548, 199, 6, 31, "myCode",ExpressionUUID->"e717c28a-87e0-492c-8344-45b2e4222ef7",
 Evaluatable->False,
 InitializationCell->False],
Cell[251871, 7556, 445, 10, 38, "Text",ExpressionUUID->"0a6aba3b-d42c-4ca6-81f5-424ecc59889a"],
Cell[CellGroupData[{
Cell[252341, 7570, 204, 6, 31, "Input",ExpressionUUID->"c9f958ac-1c16-440f-af2b-01af02f3b653"],
Cell[252548, 7578, 112, 2, 31, "Output",ExpressionUUID->"39ded985-2676-447e-83b8-559b3b90bf00"]
}, Open  ]],
Cell[252675, 7583, 803, 20, 57, "Text",ExpressionUUID->"c9a2b9ec-b4be-4d5f-b519-0a1e8b09cb52"],
Cell[CellGroupData[{
Cell[253503, 7607, 328, 10, 31, "Input",ExpressionUUID->"aa9ade12-26a8-4323-a5dd-b4ba82f18d5f"],
Cell[253834, 7619, 206, 5, 31, "Output",ExpressionUUID->"4361eeb4-63a2-4201-948a-b35c7d08c1d0"]
}, Open  ]],
Cell[254055, 7627, 175, 4, 24, "Text",ExpressionUUID->"03f64472-d52d-4cee-8a1b-c50d26b7347e"],
Cell[CellGroupData[{
Cell[254255, 7635, 293, 9, 31, "Input",ExpressionUUID->"4c3271b8-bdb8-43b7-8ed0-c6fbb0a2a55f"],
Cell[254551, 7646, 206, 5, 31, "Output",ExpressionUUID->"69a2d591-c740-4cdf-a6cd-fa062d6a10d7"]
}, Open  ]],
Cell[254772, 7654, 907, 26, 42, "Text",ExpressionUUID->"6fc24462-d777-4b53-afb1-e51ead2b688d"],
Cell[CellGroupData[{
Cell[255704, 7684, 464, 15, 31, "Input",ExpressionUUID->"e44b7514-4e84-4a1e-9a09-2d8c7f67f3f5"],
Cell[256171, 7701, 181, 4, 31, "Output",ExpressionUUID->"8b45638b-5c59-40d2-887c-8f350eddc114"]
}, Open  ]],
Cell[256367, 7708, 377, 9, 39, "Text",ExpressionUUID->"3056048f-1080-4112-af97-5a338ebe4820"],
Cell[CellGroupData[{
Cell[256769, 7721, 300, 9, 31, "Input",ExpressionUUID->"d279be19-44c7-4329-9038-e1aeb3124b1d",
 InitializationCell->True],
Cell[257072, 7732, 239, 7, 32, "Output",ExpressionUUID->"76d56e26-aa39-425c-91cb-c748e7dd9662"]
}, Open  ]],
Cell[CellGroupData[{
Cell[257348, 7744, 170, 4, 31, "Input",ExpressionUUID->"b47150e9-e842-476f-a566-286a50bd133a"],
Cell[257521, 7750, 112, 2, 31, "Output",ExpressionUUID->"2da24b5a-8a71-44f4-a359-50a6ee2c45f6"]
}, Open  ]],
Cell[257648, 7755, 199, 3, 20, "Text",ExpressionUUID->"1a68ea7a-196e-450a-8f1b-09a2f6fc5754"],
Cell[CellGroupData[{
Cell[257872, 7762, 170, 4, 31, "Input",ExpressionUUID->"b1660e95-ea52-42a0-b4ad-c1ea5b6bf346"],
Cell[258045, 7768, 214, 6, 32, "Output",ExpressionUUID->"809f92ed-a863-4091-9464-d1f5ca64910b"]
}, Open  ]],
Cell[258274, 7777, 387, 8, 36, "Text",ExpressionUUID->"4efd10fd-4327-4d61-a72e-5ee6f3cd771c"],
Cell[CellGroupData[{
Cell[258686, 7789, 104, 0, 18, "Subsubsection",ExpressionUUID->"700a3e6c-5765-4211-9a68-c9f77baa1ffb"],
Cell[258793, 7791, 289, 4, 35, "Text",ExpressionUUID->"5ad43e52-5d7e-4e71-9040-935fc5ae7417"],
Cell[259085, 7797, 836, 25, 38, "Text",ExpressionUUID->"ccafac83-3542-4184-b3e8-1a58679f8a3d"],
Cell[259924, 7824, 236, 7, 31, "Input",ExpressionUUID->"8f191f2b-dc79-4d21-a3fa-b7ecc392e364",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[260185, 7835, 201, 6, 31, "Input",ExpressionUUID->"4c7cac59-08e5-4309-9381-b026a5ee00c2",
 InitializationCell->True],
Cell[260389, 7843, 153, 4, 32, "Output",ExpressionUUID->"0b77be7c-1ebf-4923-b500-29ddd3f3a3aa"]
}, Open  ]],
Cell[260557, 7850, 145, 2, 20, "Text",ExpressionUUID->"8e3c6e62-4522-4489-85bd-ac06b0e90eb8"],
Cell[CellGroupData[{
Cell[260727, 7856, 137, 3, 31, "Input",ExpressionUUID->"f8de1f7e-7926-410d-b681-f25ad157d0b9"],
Cell[260867, 7861, 111, 2, 31, "Output",ExpressionUUID->"09877c38-2b95-458e-9dfc-22528471eae7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[261015, 7868, 137, 3, 31, "Input",ExpressionUUID->"d3451eba-7f14-4edb-bd34-034dc1deeb22"],
Cell[261155, 7873, 113, 2, 31, "Output",ExpressionUUID->"394be5f2-0d0f-490e-bde3-4e5ab7bcbe2e"]
}, Open  ]],
Cell[261283, 7878, 513, 15, 39, "Text",ExpressionUUID->"88ec8b34-f706-421b-83a0-95e1a2f1fffc"],
Cell[CellGroupData[{
Cell[261821, 7897, 261, 8, 31, "Input",ExpressionUUID->"dd41c862-53a4-4559-9691-60be6a90d102",
 InitializationCell->True],
Cell[262085, 7907, 209, 6, 51, "Output",ExpressionUUID->"67abe25b-62d2-45bc-8a5d-7f1bbc3cf5da"]
}, Open  ]],
Cell[262309, 7916, 166, 4, 24, "Text",ExpressionUUID->"16a1bd6d-9fb4-47d4-bbee-d35ce717fa91"],
Cell[CellGroupData[{
Cell[262500, 7924, 137, 3, 31, "Input",ExpressionUUID->"77531b6b-4446-4c68-b2b2-c41bd7766a78"],
Cell[262640, 7929, 133, 3, 47, "Output",ExpressionUUID->"e69fb152-82b0-4430-833a-58d4870f9e4e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[262810, 7937, 137, 3, 31, "Input",ExpressionUUID->"56fd16b5-fa9f-4f8d-8eba-49b042e818c5"],
Cell[262950, 7942, 203, 6, 51, "Output",ExpressionUUID->"73835b73-6e07-4a85-91cc-de216ed62884"]
}, Open  ]],
Cell[263168, 7951, 787, 24, 43, "Text",ExpressionUUID->"7a6ab7cc-fba1-4eda-84da-341ddd166aba"],
Cell[CellGroupData[{
Cell[263980, 7979, 300, 8, 51, "Input",ExpressionUUID->"5f03526d-62b5-442e-97ec-ccc8208b7617",
 InitializationCell->True],
Cell[264283, 7989, 157, 4, 32, "Output",ExpressionUUID->"0faed894-191b-453c-9449-e44008e27daf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[264477, 7998, 261, 7, 51, "Input",ExpressionUUID->"4d314af1-0883-4f61-9b15-2a83f5424dd4",
 InitializationCell->True],
Cell[264741, 8007, 207, 6, 34, "Output",ExpressionUUID->"806e1932-588f-470f-8a04-a4c4b0c883f2"]
}, Open  ]]
}, Open  ]],
Cell[264975, 8017, 255, 6, 21, "Text",ExpressionUUID->"ac944982-6192-45c9-9567-5b86eeac055b"],
Cell[CellGroupData[{
Cell[265255, 8027, 291, 9, 31, "Input",ExpressionUUID->"7755afd0-07f9-455d-a779-1bf6595c85c7"],
Cell[265549, 8038, 181, 5, 32, "Output",ExpressionUUID->"2ce4293c-3d3f-4de3-827e-bbe730519f64"]
}, Open  ]],
Cell[CellGroupData[{
Cell[265767, 8048, 108, 0, 18, "Subsubsection",ExpressionUUID->"15c51881-a4bb-461a-a46d-2dd704b8f12e"],
Cell[265878, 8050, 1155, 32, 69, "Text",ExpressionUUID->"5e326eeb-ecf1-431e-8d55-a001225c65f8"],
Cell[CellGroupData[{
Cell[267058, 8086, 302, 9, 31, "Input",ExpressionUUID->"a63d6134-dd68-4d7a-8b6c-a1112a9a5961"],
Cell[267363, 8097, 7037, 134, 240, "Output",ExpressionUUID->"6d1bcb29-394e-405e-89d7-052c03c0d185"]
}, Open  ]],
Cell[274415, 8234, 307, 4, 35, "Text",ExpressionUUID->"e0236c2a-e2ba-47d5-978e-1b830c1414fc"],
Cell[CellGroupData[{
Cell[274747, 8242, 272, 8, 31, "Input",ExpressionUUID->"11608e4e-07d8-42a2-89db-5d618333553e"],
Cell[275022, 8252, 7244, 137, 240, "Output",ExpressionUUID->"ec44c07e-8d30-45c8-99f5-6badef40d5ff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[282303, 8394, 272, 8, 31, "Input",ExpressionUUID->"1d8c9f76-bbd1-4973-bc84-2649709c0a73"],
Cell[282578, 8404, 10942, 197, 238, "Output",ExpressionUUID->"8b08a5c2-6933-4dc6-9ef0-f1403317b16f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[293557, 8606, 276, 8, 31, "Input",ExpressionUUID->"9d070b69-e117-4bd6-8db5-c3e01f5d9077"],
Cell[293836, 8616, 5974, 117, 238, "Output",ExpressionUUID->"22928262-ca89-445b-ae82-4fdfe4b1bc24"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[299871, 8740, 113, 1, 32, "Subsection",ExpressionUUID->"8333cb75-60d8-4f5f-9dce-e0c514e2307e",
 CellTags->"Section3c"],
Cell[299987, 8743, 540, 11, 36, "Text",ExpressionUUID->"4c6900fb-dc09-44f8-bd2d-328a3e5d556a"],
Cell[300530, 8756, 1853, 56, 74, "Text",ExpressionUUID->"94aef252-4dbe-4c40-a715-15d5a4002096"],
Cell[CellGroupData[{
Cell[302408, 8816, 405, 10, 31, "Input",ExpressionUUID->"e3c0435e-558c-48da-bd8b-10d8f435dfb6",
 InitializationCell->True],
Cell[302816, 8828, 383, 9, 33, "Output",ExpressionUUID->"b2ff9c39-89d6-4d23-9fc6-7001e9dd440d"]
}, Open  ]],
Cell[303214, 8840, 314, 7, 20, "Text",ExpressionUUID->"dfcb60f5-ea13-4dc9-a998-629859414745"],
Cell[CellGroupData[{
Cell[303553, 8851, 154, 3, 31, "Input",ExpressionUUID->"154a8455-fb8c-40a7-9896-00b48a12e67c"],
Cell[303710, 8856, 112, 2, 31, "Output",ExpressionUUID->"2fec2bb1-12d1-4d60-be9f-86dbcea9b38d"]
}, Open  ]],
Cell[303837, 8861, 514, 11, 39, "Text",ExpressionUUID->"c90f10da-7198-4527-b2c2-53cc6122007f"],
Cell[CellGroupData[{
Cell[304376, 8876, 202, 5, 31, "Input",ExpressionUUID->"247fbe47-0c10-420d-9c30-8ac450a424d7",
 InitializationCell->True],
Cell[304581, 8883, 112, 2, 31, "Output",ExpressionUUID->"40640d86-0070-4da3-89b5-6ce89c3de92a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[304730, 8890, 204, 5, 31, "Input",ExpressionUUID->"f4064912-a86e-4095-842a-980585d5e0d4",
 InitializationCell->True],
Cell[304937, 8897, 112, 2, 31, "Output",ExpressionUUID->"bbd0df50-f636-4ded-857d-cdbb5b842f21"]
}, Open  ]],
Cell[CellGroupData[{
Cell[305086, 8904, 114, 2, 31, "Input",ExpressionUUID->"d8cb413f-b87d-4a40-8b00-40c9903a9f19"],
Cell[305203, 8908, 436, 10, 33, "Output",ExpressionUUID->"06e9563f-de0f-4138-a723-adf2551169f3"]
}, Open  ]],
Cell[305654, 8921, 853, 21, 52, "Text",ExpressionUUID->"f5a52cd5-958b-4271-9dd7-abf0581d2f5a"],
Cell[CellGroupData[{
Cell[306532, 8946, 216, 5, 31, "Input",ExpressionUUID->"5007202a-32d4-46b5-a31e-4604307066b2"],
Cell[306751, 8953, 488, 11, 33, "Output",ExpressionUUID->"c3d0c425-f8ed-43f9-a1c1-0b5cb8a22ec5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[307276, 8969, 313, 8, 31, "Input",ExpressionUUID->"0d31f554-1010-4582-b78d-693eac33e65d"],
Cell[307592, 8979, 594, 13, 54, "Output",ExpressionUUID->"4d71a733-c6e7-4c91-8039-4772f34f7202"]
}, Open  ]],
Cell[CellGroupData[{
Cell[308223, 8997, 114, 2, 31, "Input",ExpressionUUID->"da3b27a6-eeba-4274-bea0-c08bbd4476c5"],
Cell[308340, 9001, 594, 13, 54, "Output",ExpressionUUID->"f737473b-9b48-4022-83be-8d493d5271d1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[308971, 9019, 96, 0, 18, "Subsubsection",ExpressionUUID->"6a77de1c-b215-4b4a-b643-e7e6f214723c"],
Cell[309070, 9021, 587, 14, 54, "Text",ExpressionUUID->"04e0acfe-c9fb-407e-bff0-9dc5bd16b104"],
Cell[309660, 9037, 821, 18, 67, "Text",ExpressionUUID->"2ea4cc79-226c-4aef-bf77-43eaa2ae9d61"],
Cell[310484, 9057, 453, 12, 51, "Input",ExpressionUUID->"2eca9dc6-5042-4f39-a52b-bce0ca09d485",
 InitializationCell->True],
Cell[310940, 9071, 186, 4, 24, "Text",ExpressionUUID->"ceaf6676-0b77-4f56-8ca2-c26217c645f6"],
Cell[CellGroupData[{
Cell[311151, 9079, 146, 3, 31, "Input",ExpressionUUID->"de3436fc-9fde-4d10-96b1-cceece9a3d73"],
Cell[311300, 9084, 316, 6, 31, "Output",ExpressionUUID->"6844338a-4722-496d-9d1f-0cbf15db9f25"]
}, Open  ]],
Cell[CellGroupData[{
Cell[311653, 9095, 145, 3, 31, "Input",ExpressionUUID->"bf7235c3-e873-43fa-866d-aed8cb8d14f4"],
Cell[311801, 9100, 231, 6, 31, "Output",ExpressionUUID->"741ace06-4c63-4d6a-98b1-129a5b0a6255"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[312081, 9112, 104, 0, 18, "Subsubsection",ExpressionUUID->"39821e64-3965-456c-b010-8c7deca821c5"],
Cell[312188, 9114, 1178, 36, 40, "Text",ExpressionUUID->"64fc9102-7dfc-486d-b8a5-f44a50401417"],
Cell[313369, 9152, 1806, 46, 85, "Text",ExpressionUUID->"6cbdfc39-934d-4992-b23f-63b7e6ce90da"],
Cell[315178, 9200, 875, 18, 68, "Text",ExpressionUUID->"aa9c9e6b-e103-4146-8fda-41aae14c57e0"],
Cell[CellGroupData[{
Cell[316078, 9222, 448, 13, 51, "Input",ExpressionUUID->"20d69bc4-233e-431f-90fe-82e2f51e41b5",
 InitializationCell->True],
Cell[316529, 9237, 715, 20, 31, "Output",ExpressionUUID->"90801ccb-90cf-40e1-aeba-3c4fc3a9eb02"]
}, Open  ]],
Cell[CellGroupData[{
Cell[317281, 9262, 353, 11, 31, "Input",ExpressionUUID->"0b4305ec-9dcb-4926-b1cc-789ac3f0097d",
 InitializationCell->True],
Cell[317637, 9275, 819, 25, 51, "Output",ExpressionUUID->"3f2ea7aa-a7f0-411d-9722-dcd59a9c2248"]
}, Open  ]],
Cell[CellGroupData[{
Cell[318493, 9305, 309, 9, 31, "Input",ExpressionUUID->"84632a6e-f9b3-4031-bcb7-56fd5db76431",
 InitializationCell->True],
Cell[318805, 9316, 711, 20, 31, "Output",ExpressionUUID->"1a38d58b-a9bc-440d-9f93-3466b38ce5f6"]
}, Open  ]],
Cell[319531, 9339, 915, 24, 56, "Text",ExpressionUUID->"e5c5adae-35ab-4c9f-8b1b-6454cb66c6f4"],
Cell[320449, 9365, 218, 6, 24, "Text",ExpressionUUID->"daa0d318-1524-4aae-a4bc-6a9d45b7cedb"],
Cell[CellGroupData[{
Cell[320692, 9375, 143, 3, 31, "Input",ExpressionUUID->"f747a4ce-a9ac-4b5c-827a-ea62420de0fa"],
Cell[320838, 9380, 345, 10, 31, "Output",ExpressionUUID->"a0761e27-1249-41eb-919d-2488a8a9be35"]
}, Open  ]],
Cell[CellGroupData[{
Cell[321220, 9395, 142, 3, 31, "Input",ExpressionUUID->"ea349eef-be01-45d3-9f13-9bc0b949811f"],
Cell[321365, 9400, 201, 5, 31, "Output",ExpressionUUID->"402570c9-e2d3-4c35-b9ba-ddfebd9766d6"]
}, Open  ]],
Cell[321581, 9408, 223, 3, 35, "Text",ExpressionUUID->"baae0d90-8d2f-4784-b256-83d97f27d51c"],
Cell[321807, 9413, 343, 9, 31, "Input",ExpressionUUID->"11cd1f30-2d03-441c-90e5-00fbe1d7ff1c",
 InitializationCell->True],
Cell[322153, 9424, 514, 13, 40, "Text",ExpressionUUID->"612df967-38f1-48d2-951f-fbf15bcf4fa2"],
Cell[322670, 9439, 386, 12, 24, "Text",ExpressionUUID->"6d2783d9-63d9-4ba6-8923-c294609146cd"],
Cell[CellGroupData[{
Cell[323081, 9455, 229, 6, 31, "Input",ExpressionUUID->"dff9cb1e-4af2-4a89-a5f1-1636f9fa0df1"],
Cell[323313, 9463, 115, 2, 31, "Output",ExpressionUUID->"03b5760a-6bf5-4985-a150-894029bd198f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[323465, 9470, 229, 6, 31, "Input",ExpressionUUID->"1fadbc70-2adc-4ca7-8775-159fd1c735ab"],
Cell[323697, 9478, 114, 2, 31, "Output",ExpressionUUID->"265d68cf-790a-4875-8ac4-756a735c2d0e"]
}, Open  ]],
Cell[323826, 9483, 504, 10, 54, "Text",ExpressionUUID->"dbafbf48-1bf3-4b3f-834b-2b425dd8b0af"],
Cell[324333, 9495, 341, 9, 31, "Input",ExpressionUUID->"3149bcbd-ae4d-4739-8a1b-45d030171f52",
 InitializationCell->True],
Cell[324677, 9506, 209, 6, 24, "Text",ExpressionUUID->"1f3a0728-22cd-4c87-852f-01f0229b82ff"],
Cell[CellGroupData[{
Cell[324911, 9516, 147, 3, 31, "Input",ExpressionUUID->"a603c7fc-4796-484d-a1c5-2df73e7f4661"],
Cell[325061, 9521, 115, 2, 31, "Output",ExpressionUUID->"ee5f32ef-37b7-42ff-ade4-5a2d415dae2d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[325213, 9528, 147, 3, 31, "Input",ExpressionUUID->"601031c4-8875-4935-be23-d83a5e0003b7"],
Cell[325363, 9533, 114, 2, 31, "Output",ExpressionUUID->"ceaca060-414c-48a7-a994-f0ca7d225659"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[325526, 9541, 130, 0, 18, "Subsubsection",ExpressionUUID->"8da78edf-b764-4678-808e-494448f5d121"],
Cell[325659, 9543, 816, 20, 51, "Text",ExpressionUUID->"41763fd4-45d1-48c2-a24e-990657fd8e8f"],
Cell[326478, 9565, 458, 9, 36, "Text",ExpressionUUID->"5e0a15f6-3b8d-41cd-8f5f-f13a0ab85696"],
Cell[CellGroupData[{
Cell[326961, 9578, 145, 3, 31, "Input",ExpressionUUID->"1e0c738f-2598-4684-b732-b7d10b085716"],
Cell[327109, 9583, 1324, 37, 246, "Output",ExpressionUUID->"3262629e-9da9-4f06-9b9e-44916a467559"]
}, Open  ]],
Cell[328448, 9623, 1733, 51, 71, "Text",ExpressionUUID->"c2c31d68-bcb8-4e13-9241-48c32b32090d"],
Cell[330184, 9676, 622, 18, 40, "Text",ExpressionUUID->"aeaf0545-934c-4df8-8a08-03947bc4cada"],
Cell[CellGroupData[{
Cell[330831, 9698, 365, 11, 31, "Input",ExpressionUUID->"6de6543b-6620-4d79-86a3-8fabf98eb8a8"],
Cell[331199, 9711, 1295, 35, 222, "Output",ExpressionUUID->"52c3efd1-3917-4c61-825d-d32da74f0b90"]
}, Open  ]],
Cell[332509, 9749, 779, 23, 37, "Text",ExpressionUUID->"05fa29b7-284b-48c5-b89d-243a552e5943"],
Cell[CellGroupData[{
Cell[333313, 9776, 301, 8, 31, "Input",ExpressionUUID->"d4d2eaca-bdd7-4323-9128-8ba4335495cb"],
Cell[333617, 9786, 1275, 36, 246, "Output",ExpressionUUID->"263a02fc-370e-4996-9082-906569ab15d8"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[334953, 9829, 125, 1, 32, "Subsection",ExpressionUUID->"77045512-cba6-456f-8564-d08e41cd1097",
 CellTags->"Section3d"],
Cell[335081, 9832, 438, 10, 36, "Text",ExpressionUUID->"03f2db72-0ca1-42d9-b27f-1fe96c1b9db7"],
Cell[CellGroupData[{
Cell[335544, 9846, 143, 3, 31, "Input",ExpressionUUID->"5a7d3c25-5fd6-4f8e-a121-bd613d0400a9"],
Cell[335690, 9851, 111, 2, 31, "Output",ExpressionUUID->"301e5931-b6e5-49c4-8dce-ea1ca3221664"]
}, Open  ]],
Cell[CellGroupData[{
Cell[335838, 9858, 145, 3, 31, "Input",ExpressionUUID->"6133d4e9-ed73-49ca-a53c-4b85aed6b8db"],
Cell[335986, 9863, 111, 2, 31, "Output",ExpressionUUID->"01c4f635-473f-4b5c-b1e0-959897d83d09"]
}, Open  ]],
Cell[336112, 9868, 653, 15, 37, "Text",ExpressionUUID->"2384597d-b033-4099-8ea4-68b0346f501d"],
Cell[CellGroupData[{
Cell[336790, 9887, 143, 3, 31, "Input",ExpressionUUID->"b782acf8-4dd0-44b0-bec9-742373fe5f2a"],
Cell[336936, 9892, 111, 2, 31, "Output",ExpressionUUID->"bd5513a3-185f-4d62-911e-86db1b5fd33a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[337084, 9899, 149, 3, 31, "Input",ExpressionUUID->"ee947e60-8878-4543-b1a8-77910ae069fb"],
Cell[337236, 9904, 111, 2, 31, "Output",ExpressionUUID->"2d8523bd-0ff1-4056-b963-7efe6e2c79da"]
}, Open  ]],
Cell[CellGroupData[{
Cell[337384, 9911, 167, 4, 31, "Input",ExpressionUUID->"5973132b-cb2a-40e4-93fe-f2e865954a5e"],
Cell[337554, 9917, 128, 3, 31, "Output",ExpressionUUID->"e3fa33db-d6e5-428f-b90c-cbeefcf19aa6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[337719, 9925, 152, 3, 31, "Input",ExpressionUUID->"eaf7313c-6072-41e2-aa95-a2e581acb5a6"],
Cell[337874, 9930, 129, 2, 31, "Output",ExpressionUUID->"b74744bb-05e3-407d-8c4c-ec619becafc4"]
}, Open  ]],
Cell[338018, 9935, 461, 13, 43, "Text",ExpressionUUID->"3b5345a4-f70e-40fe-a6fd-39fc78541ee2"],
Cell[CellGroupData[{
Cell[338504, 9952, 127, 3, 31, "Input",ExpressionUUID->"933d77fa-0eb1-4118-b57f-f236317f5cdd"],
Cell[338634, 9957, 113, 2, 31, "Output",ExpressionUUID->"a679c197-159a-4ae6-9b6f-f3b1e1ee691f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[338784, 9964, 145, 3, 31, "Input",ExpressionUUID->"f981490b-82b7-4b0c-bdce-55e739962873"],
Cell[338932, 9969, 113, 2, 31, "Output",ExpressionUUID->"d7dcf068-b8ee-4cc2-80ea-a6bcebf7ba33"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[339106, 9978, 125, 1, 55, "Section",ExpressionUUID->"1b81f835-117a-4a6d-a31f-c7fe100930e5",
 CellTags->"Section4"],
Cell[339234, 9981, 517, 11, 50, "Text",ExpressionUUID->"3684ff7e-9010-403b-9463-fec59a278279"],
Cell[339754, 9994, 285, 6, 24, "Text",ExpressionUUID->"23a02fe7-586d-4ab9-b8a5-264625d9c7b6"],
Cell[340042, 10002, 711, 19, 36, "Text",ExpressionUUID->"26bb9a55-ba69-435c-b75c-ae34771dc7e5"],
Cell[CellGroupData[{
Cell[340778, 10025, 178, 5, 35, "Subsection",ExpressionUUID->"870a8770-9ef8-467e-8d8c-2a7852f42402",
 CellTags->"Section4a"],
Cell[340959, 10032, 304, 6, 21, "Text",ExpressionUUID->"01e7235c-10c3-47b1-9209-403d5c07f368"],
Cell[341266, 10040, 885, 25, 39, "Text",ExpressionUUID->"8e81bcca-cbbe-4e1e-9928-0f4efda48fa7"],
Cell[CellGroupData[{
Cell[342176, 10069, 273, 8, 31, "Input",ExpressionUUID->"7b4cfcca-ad12-4be7-85ff-07bec9e28b03"],
Cell[342452, 10079, 289, 7, 31, "Output",ExpressionUUID->"e3e3ec54-4bef-42d3-be75-77dd5f79775b"]
}, Open  ]],
Cell[342756, 10089, 328, 6, 39, "Text",ExpressionUUID->"0d004ee0-c891-401c-9fd8-29de1f1c7ad2"],
Cell[343087, 10097, 344, 8, 20, "Text",ExpressionUUID->"a958f233-0be5-4e70-95c4-d03725a3fc20"],
Cell[CellGroupData[{
Cell[343456, 10109, 263, 8, 31, "Input",ExpressionUUID->"3d0ae34d-a981-4536-bbc0-990493f2ea45"],
Cell[343722, 10119, 276, 6, 31, "Output",ExpressionUUID->"b92671a6-cc06-4abb-ac5d-4e1d31339bae"]
}, Open  ]],
Cell[344013, 10128, 358, 5, 50, "Text",ExpressionUUID->"a8804a78-6333-4d2c-8488-b3e0e7c3f387"],
Cell[CellGroupData[{
Cell[344396, 10137, 283, 8, 31, "Input",ExpressionUUID->"784756ab-c617-488f-bc93-9e2e73111392"],
Cell[344682, 10147, 220, 6, 31, "Output",ExpressionUUID->"56c50f3a-2e0c-4614-b8fa-eaa70ce8fcb7"]
}, Open  ]],
Cell[344917, 10156, 437, 10, 39, "Text",ExpressionUUID->"05577a5a-5b7c-44de-8401-3a9a130aced1"],
Cell[CellGroupData[{
Cell[345379, 10170, 242, 7, 31, "Input",ExpressionUUID->"c097484e-a26c-4b98-b872-dd7e1b258a27"],
Cell[345624, 10179, 309, 7, 31, "Output",ExpressionUUID->"bad8f3df-5d6d-4a42-825b-5d7b62b1ac4e"]
}, Open  ]],
Cell[345948, 10189, 728, 17, 52, "Text",ExpressionUUID->"921a5ca1-09c8-4334-88e7-f661673e1529"],
Cell[CellGroupData[{
Cell[346701, 10210, 142, 3, 31, "Input",ExpressionUUID->"d4dd12e7-269d-4d2e-b90d-27ed7a95e46e"],
Cell[346846, 10215, 244, 6, 31, "Output",ExpressionUUID->"e8f0dfe9-43a2-48b3-83ab-147af2f223be"]
}, Open  ]],
Cell[CellGroupData[{
Cell[347127, 10226, 165, 4, 31, "Input",ExpressionUUID->"7a3df680-d33b-4d74-9c0a-c2200be296c1"],
Cell[347295, 10232, 254, 6, 31, "Output",ExpressionUUID->"3a359914-0fb6-4c4d-8f80-2eef34124310"]
}, Open  ]],
Cell[CellGroupData[{
Cell[347586, 10243, 175, 4, 31, "Input",ExpressionUUID->"76fb0787-7db5-4f44-8c72-7de02d483028"],
Cell[347764, 10249, 200, 5, 31, "Output",ExpressionUUID->"506880fd-26ee-45b2-8654-874eeeb10aa2"]
}, Open  ]],
Cell[347979, 10257, 540, 9, 51, "Text",ExpressionUUID->"dd975e89-ad2e-40ea-b359-aa569566c445"],
Cell[CellGroupData[{
Cell[348544, 10270, 339, 10, 31, "Input",ExpressionUUID->"99759314-0c41-4f25-8351-f7c19e7f1f8b"],
Cell[348886, 10282, 205, 5, 31, "Output",ExpressionUUID->"5524b541-7c65-49cf-b7b7-0bb7ce381283"]
}, Open  ]],
Cell[349106, 10290, 224, 3, 35, "Text",ExpressionUUID->"3b8ae248-f452-4e4b-aa9c-a424075a35f1"],
Cell[CellGroupData[{
Cell[349355, 10297, 339, 10, 31, "Input",ExpressionUUID->"921c5945-7f69-4763-966b-878b4a305488"],
Cell[349697, 10309, 205, 5, 31, "Output",ExpressionUUID->"5e4852a6-2a39-4fa5-b4bd-3a2250da402e"]
}, Open  ]],
Cell[349917, 10317, 306, 7, 21, "Text",ExpressionUUID->"bee53782-83d1-40a3-95b3-5638c65c4412"],
Cell[CellGroupData[{
Cell[350248, 10328, 378, 11, 31, "Input",ExpressionUUID->"cb81817d-467f-410c-aabf-359e8a33e939"],
Cell[350629, 10341, 205, 5, 31, "Output",ExpressionUUID->"e7eda801-c6a9-4d13-a810-9f558fc8af07"]
}, Open  ]],
Cell[350849, 10349, 1066, 29, 39, "Text",ExpressionUUID->"03e93dc0-93c9-4f3d-88c4-0904984fa42a"],
Cell[CellGroupData[{
Cell[351940, 10382, 430, 13, 31, "Input",ExpressionUUID->"3d5a6d71-ac85-49b0-b9f7-e77538b5e213"],
Cell[352373, 10397, 440, 12, 31, "Output",ExpressionUUID->"63263407-1efe-4b01-8ed6-afd0ab3a4dde"]
}, Open  ]],
Cell[352828, 10412, 994, 26, 50, "Text",ExpressionUUID->"868014ec-5672-4b0b-ac29-6e76dca3ec02"]
}, Open  ]],
Cell[CellGroupData[{
Cell[353859, 10443, 179, 5, 35, "Subsection",ExpressionUUID->"c8b6bc00-53b4-4269-9917-e944eeead80d",
 CellTags->"Section4b"],
Cell[354041, 10450, 1351, 39, 52, "Text",ExpressionUUID->"704fbfdd-7505-4331-87ea-1b85554cd350"],
Cell[CellGroupData[{
Cell[355417, 10493, 224, 6, 31, "Input",ExpressionUUID->"30384076-3ad1-47da-825a-5990b3cdd9d1"],
Cell[355644, 10501, 176, 4, 31, "Output",ExpressionUUID->"9309f430-c325-4a3f-bf1a-78d643adf43d"]
}, Open  ]],
Cell[355835, 10508, 318, 7, 21, "Text",ExpressionUUID->"300f1406-9ade-4c98-ae47-e3b4bc8f5c23"],
Cell[CellGroupData[{
Cell[356178, 10519, 226, 6, 31, "Input",ExpressionUUID->"856e77d2-1257-4fd4-b9c0-abacc883c2ce",
 InitializationCell->True],
Cell[356407, 10527, 166, 4, 31, "Output",ExpressionUUID->"ed913a79-fc9a-4234-9ca8-bd5f8e357083"]
}, Open  ]],
Cell[CellGroupData[{
Cell[356610, 10536, 175, 4, 31, "Input",ExpressionUUID->"259bc101-4b3c-4813-b399-59bca0fe7ddb"],
Cell[356788, 10542, 176, 4, 31, "Output",ExpressionUUID->"ceeed244-1ba3-4228-81d1-c6e6d99c9093"]
}, Open  ]],
Cell[CellGroupData[{
Cell[357001, 10551, 120, 2, 31, "Input",ExpressionUUID->"53cc7fc0-0aa4-419a-a89f-0a8a88f5a7de"],
Cell[357124, 10555, 166, 4, 31, "Output",ExpressionUUID->"d152d90c-cbb5-4b18-90bc-ca3c65d956eb"]
}, Open  ]],
Cell[357305, 10562, 485, 11, 37, "Text",ExpressionUUID->"31dc2a81-e4a9-4832-86c6-bea523744ed7"],
Cell[CellGroupData[{
Cell[357815, 10577, 236, 6, 31, "Input",ExpressionUUID->"4b9ef020-d667-4612-b3e4-d3164fce534f",
 InitializationCell->True],
Cell[358054, 10585, 176, 4, 31, "Output",ExpressionUUID->"69a02dc8-8f56-487c-8995-551971f8d5f8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[358267, 10594, 120, 2, 31, "Input",ExpressionUUID->"73268f0b-0612-4adc-9b74-3b1b323d39d3"],
Cell[358390, 10598, 176, 4, 31, "Output",ExpressionUUID->"8ba13aaa-74ad-45ab-ba5a-2a33e1914999"]
}, Open  ]],
Cell[CellGroupData[{
Cell[358603, 10607, 204, 5, 31, "Input",ExpressionUUID->"d8111532-1291-49e3-af15-9b0943e64710",
 InitializationCell->True],
Cell[358810, 10614, 186, 4, 31, "Output",ExpressionUUID->"19d48d69-8428-4261-b56c-28bc437b79d4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[359033, 10623, 120, 2, 31, "Input",ExpressionUUID->"c60c4691-29ce-4a4d-8372-d6768dabc4a2"],
Cell[359156, 10627, 186, 4, 31, "Output",ExpressionUUID->"0d3247f2-8ef6-498c-9385-418c4c7832cf"]
}, Open  ]],
Cell[359357, 10634, 348, 7, 36, "Text",ExpressionUUID->"052af8d2-9e16-4a86-abae-623bf2de52fb"],
Cell[359708, 10643, 656, 19, 36, "Text",ExpressionUUID->"705e5de6-690b-4467-a8b4-17477f933683"],
Cell[CellGroupData[{
Cell[360389, 10666, 205, 5, 31, "Input",ExpressionUUID->"94fd7b7a-68fb-4fcd-bc40-184575f9e739",
 InitializationCell->True],
Cell[360597, 10673, 199, 5, 31, "Output",ExpressionUUID->"c5f8591c-142f-48f1-a2c7-7d2659bee72a"]
}, Open  ]],
Cell[360811, 10681, 418, 10, 39, "Text",ExpressionUUID->"3306d46d-1d66-488d-b560-b53e6597de9f"],
Cell[CellGroupData[{
Cell[361254, 10695, 221, 6, 31, "Input",ExpressionUUID->"21086f3e-bd9f-4beb-935d-b50685b6bb9c",
 InitializationCell->True],
Cell[361478, 10703, 111, 2, 31, "Output",ExpressionUUID->"cef3ce56-7340-46d5-9ef4-232d124a1496"]
}, Open  ]],
Cell[CellGroupData[{
Cell[361626, 10710, 120, 2, 31, "Input",ExpressionUUID->"83747876-4ea1-477b-9e9b-45e70dca7cda"],
Cell[361749, 10714, 199, 5, 31, "Output",ExpressionUUID->"51aead71-f79b-4c58-b8fa-ac8a6c39b764"]
}, Open  ]],
Cell[361963, 10722, 798, 21, 55, "Text",ExpressionUUID->"59421706-dbca-44d6-b54c-d392e678187a"],
Cell[CellGroupData[{
Cell[362786, 10747, 211, 5, 31, "Input",ExpressionUUID->"7f83abf2-1fa8-46c9-b477-4f6d4b1ba5e1"],
Cell[363000, 10754, 200, 5, 31, "Output",ExpressionUUID->"af43510b-c1e3-4b9b-a593-96710990e4a0"]
}, Open  ]],
Cell[363215, 10762, 485, 10, 55, "Text",ExpressionUUID->"83f4681c-aefa-4e28-93b5-e4c195845173"],
Cell[363703, 10774, 664, 14, 52, "Text",ExpressionUUID->"080a9a5a-a0ec-44fe-baf1-3f505b6aaecb"],
Cell[CellGroupData[{
Cell[364392, 10792, 246, 6, 31, "Input",ExpressionUUID->"dba0705e-7fbd-4a80-b40c-3ad89e9fd9da",
 InitializationCell->True],
Cell[364641, 10800, 209, 5, 31, "Output",ExpressionUUID->"67471698-dcc7-4aff-b2f3-c73b52216b12"]
}, Open  ]],
Cell[364865, 10808, 572, 14, 37, "Text",ExpressionUUID->"aa2d7e36-c9fa-4268-91d9-211a6b2438bf"],
Cell[CellGroupData[{
Cell[365462, 10826, 209, 5, 31, "Input",ExpressionUUID->"751c74c6-6875-49aa-a6a3-adcaee5d006c"],
Cell[365674, 10833, 199, 5, 31, "Output",ExpressionUUID->"77da3ff5-ec7e-43aa-9455-dd3bd2423f0f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[365922, 10844, 195, 6, 35, "Subsection",ExpressionUUID->"16ae9813-9400-4c69-b133-78a5ece56926",
 CellTags->"Section4c"],
Cell[366120, 10852, 852, 24, 36, "Text",ExpressionUUID->"0e3d7014-9049-4a31-bec4-c87fb33145c1"],
Cell[366975, 10878, 757, 23, 89, "Input",ExpressionUUID->"691caccc-9c1a-4f9b-a83a-b9fc9d703aad",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[367757, 10905, 187, 4, 31, "Input",ExpressionUUID->"f9c654d4-a70a-4d88-87c8-bed18dcd6a69"],
Cell[367947, 10911, 289, 7, 31, "Output",ExpressionUUID->"3134a953-3f2e-4330-9d8c-17d0c73fcc6c"]
}, Open  ]],
Cell[368251, 10921, 450, 11, 36, "Text",ExpressionUUID->"45c12278-ea6a-46ef-a7d1-8c5655ebd77a"],
Cell[368704, 10934, 650, 18, 108, "Input",ExpressionUUID->"1027113b-4baa-435f-99d1-6209d677ae8b"],
Cell[CellGroupData[{
Cell[369379, 10956, 188, 4, 31, "Input",ExpressionUUID->"b061e53a-a611-46ca-a2bb-5da92a836d6e"],
Cell[369570, 10962, 376, 10, 31, "Output",ExpressionUUID->"59b34733-1e3b-4d0f-b848-fe42626fb297"]
}, Open  ]],
Cell[369961, 10975, 658, 15, 56, "Text",ExpressionUUID->"6a99f9bc-ffeb-4558-8d61-28182ab03745"],
Cell[370622, 10992, 1290, 35, 87, "Text",ExpressionUUID->"66acbc03-6707-4a77-aeba-04ce5d87e901"],
Cell[371915, 11029, 771, 22, 108, "Input",ExpressionUUID->"3c327396-d3e8-434c-a14f-499d022b2552",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[372711, 11055, 188, 4, 31, "Input",ExpressionUUID->"11757310-fef7-420a-9cf6-259fe0ee0c6d"],
Cell[372902, 11061, 289, 7, 31, "Output",ExpressionUUID->"834952ca-dc52-478b-9c00-036a8f33078c"]
}, Open  ]],
Cell[373206, 11071, 856, 20, 52, "Text",ExpressionUUID->"6b0e6f68-93c3-464f-bc48-16a8299ab968"],
Cell[CellGroupData[{
Cell[374087, 11095, 244, 6, 31, "Input",ExpressionUUID->"6499355f-f8c5-446c-90c7-d82d968d1536"],
Cell[374334, 11103, 167, 4, 31, "Output",ExpressionUUID->"a929aead-03ee-4f4f-9775-b5dd06b03358"]
}, Open  ]],
Cell[CellGroupData[{
Cell[374538, 11112, 245, 6, 31, "Input",ExpressionUUID->"865b3bc9-fff1-41dc-b89e-22526907910f"],
Cell[374786, 11120, 166, 4, 31, "Output",ExpressionUUID->"fe0e50fa-99e5-4f3f-97ad-a858b1e2a3c7"]
}, Open  ]],
Cell[374967, 11127, 473, 9, 51, "Text",ExpressionUUID->"4c386b03-a4fa-4b4f-ab9d-54aa5de7762f"],
Cell[CellGroupData[{
Cell[375465, 11140, 682, 20, 89, "Input",ExpressionUUID->"bb3464ec-8d89-45b6-b858-abbe5746ab75"],
Cell[376150, 11162, 439, 13, 31, "Output",ExpressionUUID->"b21ecda9-7e13-4c99-9527-7d52f2357a3e"]
}, Open  ]],
Cell[376604, 11178, 751, 21, 43, "Text",ExpressionUUID->"1607b033-e813-4354-959f-454a765512cb"],
Cell[377358, 11201, 479, 9, 51, "Text",ExpressionUUID->"45d924c3-b32b-4e98-b416-41edeefac90c"],
Cell[CellGroupData[{
Cell[377862, 11214, 857, 25, 127, "Input",ExpressionUUID->"b9b87c8c-dcef-4861-bbba-b1c2ea2786e1"],
Cell[378722, 11241, 647, 18, 51, "Output",ExpressionUUID->"d6fd1bcb-8b21-4e5d-bdf2-8e42df4bd87c"]
}, Open  ]],
Cell[379384, 11262, 346, 7, 36, "Text",ExpressionUUID->"a0076162-6439-4d08-8a6b-0b7849fac42b"],
Cell[CellGroupData[{
Cell[379755, 11273, 905, 26, 127, "Input",ExpressionUUID->"63e4de15-a180-4089-8564-1abe0f357350"],
Cell[380663, 11301, 305, 9, 31, "Output",ExpressionUUID->"c3f368dc-11c2-4afa-ad1e-0cb87e1e3605"]
}, Open  ]],
Cell[380983, 11313, 446, 10, 39, "Text",ExpressionUUID->"f2569b23-9db4-4ac2-b8c3-cb9b103d2d7c"],
Cell[CellGroupData[{
Cell[381454, 11327, 931, 27, 127, "Input",ExpressionUUID->"5b723e92-f4c6-4298-a4f0-a84c4340d96c"],
Cell[382388, 11356, 532, 15, 51, "Output",ExpressionUUID->"856bbcb5-50f8-4dbe-8ca2-dc48194d96c6"]
}, Open  ]],
Cell[382935, 11374, 699, 14, 51, "Text",ExpressionUUID->"d51cb08f-b385-4c15-9e8d-8b0a97f1114a"],
Cell[CellGroupData[{
Cell[383659, 11392, 915, 26, 127, "Input",ExpressionUUID->"319af660-cd90-4931-bcac-4c975ab31750"],
Cell[384577, 11420, 762, 21, 51, "Output",ExpressionUUID->"2c7de4a7-9457-416c-9c20-cba94eb983f4"]
}, Open  ]],
Cell[385354, 11444, 911, 23, 73, "Text",ExpressionUUID->"050b5e11-9d49-461a-b419-7f77896f4f79"],
Cell[CellGroupData[{
Cell[386290, 11471, 1071, 30, 127, "Input",ExpressionUUID->"bc340be6-8ace-47ee-889e-886c2957a053",
 InitializationCell->True],
Cell[387364, 11503, 680, 19, 51, "Output",ExpressionUUID->"418e650a-7238-4142-85a2-859e0b6a99ac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[388081, 11527, 200, 5, 31, "Input",ExpressionUUID->"28e429bc-a341-478c-b64c-ab939c5af68e",
 InitializationCell->True],
Cell[388284, 11534, 220, 6, 31, "Output",ExpressionUUID->"ea126213-6f03-4907-9222-91cd684ad11f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[388541, 11545, 117, 2, 31, "Input",ExpressionUUID->"03fc2ab7-c735-4b71-a477-3b43967d2dd1"],
Cell[388661, 11549, 220, 6, 31, "Output",ExpressionUUID->"8438f8ed-cc9c-483b-9929-ee4f70f0c6ab"]
}, Open  ]],
Cell[388896, 11558, 1386, 37, 87, "Text",ExpressionUUID->"00537eab-5a5c-4090-9a8a-effd05cbc9a3"],
Cell[390285, 11597, 854, 24, 127, "Input",ExpressionUUID->"5eaf8656-e83a-4bff-94cf-220a97341193",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[391164, 11625, 188, 4, 31, "Input",ExpressionUUID->"4b0f446a-7439-4b37-b2c0-f15ae97ede04"],
Cell[391355, 11631, 289, 7, 31, "Output",ExpressionUUID->"e69e9c51-9c88-4341-9aed-6b3f1185f83c"]
}, Open  ]],
Cell[391659, 11641, 924, 26, 62, "Text",ExpressionUUID->"f6cc8a08-8abc-4911-bb17-e76db24c6e40"],
Cell[392586, 11669, 374, 7, 39, "Text",ExpressionUUID->"b678f1c3-e506-43e3-b6bf-045fe39bab67"]
}, Open  ]],
Cell[CellGroupData[{
Cell[392997, 11681, 121, 1, 32, "Subsection",ExpressionUUID->"4b3f2975-a7f5-49ef-a0c8-258837daa448",
 CellTags->"Section4d"],
Cell[393121, 11684, 559, 11, 50, "Text",ExpressionUUID->"e22ef9eb-474a-46f5-9b57-0125777a494f"],
Cell[393683, 11697, 1332, 39, 50, "Text",ExpressionUUID->"83aa5696-7dd6-438f-91a0-3d732a851292"],
Cell[395018, 11738, 283, 4, 35, "Text",ExpressionUUID->"15aea650-74c4-47b5-aa8b-9b4a0269991f"],
Cell[395304, 11744, 219, 6, 31, "Input",ExpressionUUID->"ececb563-1f21-436f-86e7-3d920d91633f",
 InitializationCell->True],
Cell[395526, 11752, 742, 20, 40, "Text",ExpressionUUID->"09d41c21-6925-4550-a663-b12d4c16cad2"],
Cell[CellGroupData[{
Cell[396293, 11776, 212, 6, 31, "Input",ExpressionUUID->"51caa689-5df9-4ba3-967c-1a2cbf9d9b31",
 InitializationCell->True],
Cell[396508, 11784, 128, 3, 31, "Output",ExpressionUUID->"ab6b5241-83d8-4155-bffb-5e17bd7dd4a6"]
}, Open  ]],
Cell[396651, 11790, 314, 9, 24, "Text",ExpressionUUID->"6e7eed69-7997-4acc-8765-0f99c87ad2d6"],
Cell[CellGroupData[{
Cell[396990, 11803, 144, 3, 31, "Input",ExpressionUUID->"375d5d28-76bc-499c-8ed1-f69d0c7e50ac"],
Cell[397137, 11808, 128, 3, 31, "Output",ExpressionUUID->"93c67fda-61a0-4b0e-9dd9-7242cc0c605f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[397302, 11816, 144, 3, 31, "Input",ExpressionUUID->"621ad0b6-7ca1-4929-bf46-bec6c80070fa"],
Cell[397449, 11821, 112, 2, 31, "Output",ExpressionUUID->"9d65bca2-797c-4b16-9eb6-bdcde539d0f2"]
}, Open  ]],
Cell[397576, 11826, 345, 8, 24, "Text",ExpressionUUID->"f60a702b-2495-4888-bebf-665c6564b1e1"],
Cell[CellGroupData[{
Cell[397946, 11838, 134, 3, 31, "Input",ExpressionUUID->"4b52b282-dc5c-44ca-ab49-91dc037b64fb"],
Cell[398083, 11843, 146, 3, 45, "Print",ExpressionUUID->"b12db159-5375-4494-8d2b-9dfaa1888b49",
 CellTags->"Info3093738413500-3998906"],
Cell[398232, 11848, 969, 29, 61, "Print",ExpressionUUID->"e21f23fa-3087-44ea-8136-f82948ca1fbd",
 CellTags->"Info3093738413500-3998906"]
}, Open  ]],
Cell[399216, 11880, 211, 4, 24, "Text",ExpressionUUID->"2b9011e3-aaec-44a6-942c-71fcd56298bf"],
Cell[399430, 11886, 326, 10, 31, "Input",ExpressionUUID->"b9a53b59-fa2e-4852-908a-fbe6ff034437",
 InitializationCell->True],
Cell[399759, 11898, 360, 8, 43, "Text",ExpressionUUID->"58752973-18f2-450c-8827-ac22e5ad680b"],
Cell[400122, 11908, 103, 0, 20, "Text",ExpressionUUID->"79208095-dd28-4bd7-8737-43ae1328bbe4"],
Cell[400228, 11910, 309, 9, 51, "Input",ExpressionUUID->"eb2e4037-cd24-4418-93d9-f0056299175d",
 InitializationCell->True],
Cell[400540, 11921, 182, 5, 20, "Text",ExpressionUUID->"d4ff45f3-e540-4931-acfa-2fd15576a0ee"],
Cell[CellGroupData[{
Cell[400747, 11930, 139, 3, 31, "Input",ExpressionUUID->"a24a4133-882a-45ca-9dcd-524b86cba0df"],
Cell[400889, 11935, 112, 2, 31, "Output",ExpressionUUID->"d0f60c86-f71d-4cff-9694-01c84ebd7075"]
}, Open  ]],
Cell[401016, 11940, 258, 6, 21, "Text",ExpressionUUID->"daa81b69-2db9-4469-8342-f8959eefed97"],
Cell[CellGroupData[{
Cell[401299, 11950, 245, 7, 31, "Input",ExpressionUUID->"0ce71145-9250-4e20-8e86-db87ecf9b5d5"],
Cell[401547, 11959, 374, 8, 31, "Output",ExpressionUUID->"de37989c-fa1b-4eb8-b968-0f32c05e53eb"]
}, Open  ]],
Cell[401936, 11970, 332, 5, 39, "Text",ExpressionUUID->"4e2d7ed9-afd6-492d-9269-86fe80c811bd"],
Cell[CellGroupData[{
Cell[402293, 11979, 129, 3, 31, "Input",ExpressionUUID->"5da5e0a3-82ea-4105-b687-8d8fc464cbaf"],
Cell[402425, 11984, 141, 3, 45, "Print",ExpressionUUID->"541c387f-da41-4b86-9477-a5efe6ddbc13",
 CellTags->"Info3153738413500-3998906"],
Cell[402569, 11989, 1162, 36, 93, "Print",ExpressionUUID->"d14a5909-5201-465f-bc1b-67fa633254a2",
 CellTags->"Info3153738413500-3998906"]
}, Open  ]],
Cell[403746, 12028, 487, 10, 50, "Text",ExpressionUUID->"b14c7607-bada-4c76-b9a5-ce876efb8bc5"],
Cell[404236, 12040, 623, 21, 70, "Input",ExpressionUUID->"b6388452-3d11-47a9-8c53-c5fb20131785",
 InitializationCell->True],
Cell[404862, 12063, 902, 23, 92, "Text",ExpressionUUID->"dac95233-1fd0-4cbc-ae62-a7771b575917"],
Cell[405767, 12088, 296, 7, 43, "Text",ExpressionUUID->"2a47fc56-54fd-49c1-97e8-fe7ad3304cbe"],
Cell[CellGroupData[{
Cell[406088, 12099, 130, 3, 31, "Input",ExpressionUUID->"bb925fe0-6aba-489c-b1de-0d2fe2fd8d13"],
Cell[406221, 12104, 142, 3, 45, "Print",ExpressionUUID->"8b1fad1f-23c4-47f3-b3a3-bd8cdde5eef5",
 CellTags->"Info3193738413500-3998906"],
Cell[406366, 12109, 1242, 38, 93, "Print",ExpressionUUID->"0d452bab-700d-4f85-9372-9bc6cd7abfdc",
 CellTags->"Info3193738413500-3998906"]
}, Open  ]],
Cell[CellGroupData[{
Cell[407645, 12152, 140, 3, 31, "Input",ExpressionUUID->"f231b46a-c309-4766-a7e8-abf2536e4220"],
Cell[407788, 12157, 111, 2, 31, "Output",ExpressionUUID->"29baba7e-eea2-4d17-b8f0-0806ea82cf64"]
}, Open  ]],
Cell[CellGroupData[{
Cell[407936, 12164, 130, 3, 31, "Input",ExpressionUUID->"c63c7e0b-d8a3-455a-a0aa-a566b101c194"],
Cell[408069, 12169, 142, 3, 45, "Print",ExpressionUUID->"ae95c73a-7d7c-4bd7-b56d-f5db53266edb",
 CellTags->"Info3213738413500-3998906"],
Cell[408214, 12174, 1337, 42, 127, "Print",ExpressionUUID->"7a2c7d82-ca5c-4d87-a49a-78afb1448ff1",
 CellTags->"Info3213738413500-3998906"]
}, Open  ]],
Cell[409566, 12219, 190, 3, 20, "Text",ExpressionUUID->"e12e38f3-ea1b-49fb-a65a-538810ed55b8"],
Cell[CellGroupData[{
Cell[409781, 12226, 176, 4, 31, "Input",ExpressionUUID->"301db838-df16-41e1-b070-37c5f2ebe4c9"],
Cell[409960, 12232, 385, 9, 89, "Output",ExpressionUUID->"3245c3bf-30c6-4afd-917f-206938d256a5"]
}, Open  ]],
Cell[410360, 12244, 164, 4, 24, "Text",ExpressionUUID->"7a9d20e9-d5dc-47a8-8870-e367fe6374e5"],
Cell[CellGroupData[{
Cell[410549, 12252, 176, 4, 31, "Input",ExpressionUUID->"ce16b317-412d-456c-aa91-bfeeda3f13c9"],
Cell[410728, 12258, 383, 9, 94, "Output",ExpressionUUID->"50700b1b-63fb-463e-81b8-5b4bd1c06b7b"]
}, Open  ]],
Cell[411126, 12270, 260, 5, 20, "Text",ExpressionUUID->"e1bf6859-db80-43cb-b847-fd918a68f3f3"],
Cell[411389, 12277, 174, 4, 24, "Text",ExpressionUUID->"d1d1fcf6-f8a9-4912-b115-9d5de595e212"],
Cell[CellGroupData[{
Cell[411588, 12285, 173, 4, 31, "Input",ExpressionUUID->"907994c9-46a7-4241-a031-ad00b6dd9dbb"],
Cell[411764, 12291, 169, 4, 31, "Output",ExpressionUUID->"991c6a3f-68a3-4de4-a7c9-b1156bbc9b29"]
}, Open  ]],
Cell[411948, 12298, 199, 3, 20, "Text",ExpressionUUID->"0006ea53-dfab-4223-86b5-5b15c44f4247"],
Cell[412150, 12303, 329, 8, 24, "Text",ExpressionUUID->"507b566f-3007-423a-a8cd-e583963f4a0a"],
Cell[412482, 12313, 564, 11, 24, "Message",ExpressionUUID->"d5420600-37bb-4afe-8aab-94fe26d4a424"],
Cell[413049, 12326, 469, 10, 50, "Text",ExpressionUUID->"6a2b6d45-bbc0-464b-86df-72c35651a82b"],
Cell[413521, 12338, 260, 6, 31, "Input",ExpressionUUID->"6c19a83a-f042-40a6-96b5-44109283ffb9",
 Evaluatable->False],
Cell[413784, 12346, 943, 22, 67, "Text",ExpressionUUID->"05a1b675-0816-45ca-abb4-2fc2ae6a32a1"],
Cell[414730, 12370, 657, 18, 43, "Text",ExpressionUUID->"5d52d0c8-bdc2-4292-96f6-586b80e1d4e9"],
Cell[CellGroupData[{
Cell[415412, 12392, 289, 7, 31, "Input",ExpressionUUID->"958c1acb-2a27-418d-8c97-ff9a633b5375",
 Evaluatable->False],
Cell[415704, 12401, 156, 2, 32, "Output",ExpressionUUID->"00a1a415-a9ac-405a-ad47-5fa27810fd22"]
}, Open  ]],
Cell[415875, 12406, 195, 3, 20, "Text",ExpressionUUID->"3bfc20bd-6797-4eec-b56b-b22cb4570640"],
Cell[416073, 12411, 125, 0, 20, "Text",ExpressionUUID->"b4fb4ee9-1c8c-461c-88b4-b7b930a20150"],
Cell[CellGroupData[{
Cell[416223, 12415, 169, 3, 31, "Input",ExpressionUUID->"6c817822-4cac-436a-8a1e-a6153e660584",
 Evaluatable->False],
Cell[416395, 12420, 167, 2, 32, "Output",ExpressionUUID->"a438ae9a-b6c4-4e0a-bebc-217a5395ec6a"]
}, Open  ]],
Cell[416577, 12425, 82, 0, 20, "Text",ExpressionUUID->"9472d0d5-eec4-44bc-8e14-17346149ad9a"],
Cell[CellGroupData[{
Cell[416684, 12429, 255, 6, 31, "Input",ExpressionUUID->"5c83fac8-b220-4a14-8ccb-c1e3abdbea8a",
 Evaluatable->False],
Cell[416942, 12437, 159, 2, 32, "Output",ExpressionUUID->"6f4478aa-8d19-4cf0-a079-c97b1c2ee2b9"]
}, Open  ]],
Cell[417116, 12442, 89, 0, 20, "Text",ExpressionUUID->"bbd1850d-e5f9-49aa-b076-f92908bd94a4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[417242, 12447, 111, 1, 32, "Subsection",ExpressionUUID->"010a2594-ce02-47df-8be8-79147cdc8068",
 CellTags->"Section4e"],
Cell[417356, 12450, 276, 6, 35, "Text",ExpressionUUID->"ed2fba90-c63a-4484-8668-09cbe5e69cd6"],
Cell[417635, 12458, 390, 10, 21, "Text",ExpressionUUID->"61e5c14e-0ae7-4cf7-8c84-b5b8ed2a76fd"],
Cell[CellGroupData[{
Cell[418050, 12472, 247, 7, 31, "Input",ExpressionUUID->"b5c2a3a0-98e4-440f-9eb0-bc6fe40729a5"],
Cell[418300, 12481, 112, 2, 31, "Output",ExpressionUUID->"d0ebedbe-6a58-4c4a-9dcb-2bed024937ca"]
}, Open  ]],
Cell[418427, 12486, 325, 7, 21, "Text",ExpressionUUID->"5d7df29a-f670-4820-a3c8-be367e6bba59"],
Cell[CellGroupData[{
Cell[418777, 12497, 175, 4, 31, "Input",ExpressionUUID->"8916e92b-a4bd-46a3-a94d-8acfffc49884"],
Cell[418955, 12503, 114, 2, 31, "Output",ExpressionUUID->"49987949-9f03-4b4b-8786-bf441e6cb9ab"]
}, Open  ]],
Cell[419084, 12508, 833, 23, 37, "Text",ExpressionUUID->"cb875e98-c08a-447e-a949-70acc3ef4f75"],
Cell[419920, 12533, 599, 13, 51, "Text",ExpressionUUID->"56a78481-8bd8-4d5e-b62a-ce6492213f12"],
Cell[420522, 12548, 3071, 79, 100, "Text",ExpressionUUID->"9d2d0e92-ac70-411c-944e-6a998dd0a322"],
Cell[423596, 12629, 464, 13, 25, "Text",ExpressionUUID->"39283b24-9fce-44eb-9c08-bfd9d561638e"],
Cell[CellGroupData[{
Cell[424085, 12646, 236, 7, 31, "Input",ExpressionUUID->"82b7206c-7911-41b9-aee2-24729d77296f"],
Cell[424324, 12655, 113, 2, 31, "Output",ExpressionUUID->"83a33e0b-901d-49ad-ac3d-15f8f1a14eb8"]
}, Open  ]],
Cell[424452, 12660, 383, 12, 30, "Text",ExpressionUUID->"c039fc4c-0d06-4823-9e32-7217db77ef0a"],
Cell[CellGroupData[{
Cell[424860, 12676, 247, 7, 31, "Input",ExpressionUUID->"3a488f1e-26ef-4497-955d-e25fe6cc309b"],
Cell[425110, 12685, 155, 3, 47, "Output",ExpressionUUID->"aa4b9049-c88d-403e-9bfe-94ddd4bf2186"]
}, Open  ]],
Cell[425280, 12691, 530, 12, 36, "Text",ExpressionUUID->"a01239b5-7665-48ed-bbe9-e7c31cbb9dfe"],
Cell[425813, 12705, 876, 25, 41, "Text",ExpressionUUID->"4d027a40-179f-41a3-a7a8-3b080739d4fa"],
Cell[CellGroupData[{
Cell[426714, 12734, 235, 7, 31, "Input",ExpressionUUID->"ac0b0fac-d791-4f13-83c9-12b44622b424"],
Cell[426952, 12743, 293, 9, 47, "Output",ExpressionUUID->"70c8015d-6e35-4fd8-a5e1-197a414a647d"]
}, Open  ]],
Cell[427260, 12755, 305, 7, 20, "Text",ExpressionUUID->"56519dd9-282e-43e6-9f96-bdccab42a0c3"],
Cell[CellGroupData[{
Cell[427590, 12766, 301, 9, 31, "Input",ExpressionUUID->"c785928c-05aa-48b7-ace0-c53cb80853a4"],
Cell[427894, 12777, 411, 14, 53, "Output",ExpressionUUID->"746735ab-2be9-4564-ab09-8ce7eb0b1a59"]
}, Open  ]],
Cell[428320, 12794, 619, 18, 25, "Text",ExpressionUUID->"228faf9a-5ca7-4ae9-bf90-71e28ef265a7"],
Cell[CellGroupData[{
Cell[428964, 12816, 320, 10, 31, "Input",ExpressionUUID->"73028345-4f97-4837-bda6-19b4d9f7d273"],
Cell[429287, 12828, 225, 7, 51, "Output",ExpressionUUID->"28fb8851-3f08-4ac3-9f51-a574e25919b3"]
}, Open  ]],
Cell[429527, 12838, 167, 3, 20, "Text",ExpressionUUID->"42c5e4c3-bb75-46cf-b2ad-0a5d9c8443a2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[429743, 12847, 145, 2, 55, "Section",ExpressionUUID->"c0f7c242-bae3-4501-b997-15827f80acf5",
 PageBreakWithin->False,
 CellTags->"Section5"],
Cell[429891, 12851, 659, 11, 65, "Text",ExpressionUUID->"bf96381f-b80a-41be-b3cf-33c175c0023a",
 PageBreakAbove->False,
 PageBreakWithin->False],
Cell[430553, 12864, 1734, 50, 84, "Text",ExpressionUUID->"9c544801-8c0a-499c-b451-7c140ddf768e"],
Cell[432290, 12916, 1157, 33, 65, "Text",ExpressionUUID->"31175680-17d4-41c6-bb0b-bd14325f367d"],
Cell[433450, 12951, 2849, 84, 104, "Text",ExpressionUUID->"7a467eaa-3c3c-4128-8630-7b3698cf30a8"],
Cell[436302, 13037, 101, 0, 20, "Text",ExpressionUUID->"8f89512a-9ab6-441a-8fe9-d37d28a9d66c"],
Cell[436406, 13039, 1384, 38, 184, "Input",ExpressionUUID->"863003f0-3ee1-4071-b7f6-696557e1c07b",
 InitializationCell->True],
Cell[437793, 13079, 398, 10, 20, "Text",ExpressionUUID->"ee905e2a-e991-4597-a531-cd3916ff09df"],
Cell[CellGroupData[{
Cell[438216, 13093, 149, 3, 31, "Input",ExpressionUUID->"ac94bab5-62ad-46f2-bb3a-b9cec29a15ac"],
Cell[438368, 13098, 378, 10, 47, "Output",ExpressionUUID->"be9c04bc-6379-4c73-9dab-52e86cabc0de"]
}, Open  ]],
Cell[CellGroupData[{
Cell[438783, 13113, 147, 1, 32, "Subsection",ExpressionUUID->"9348afc2-1dcc-40c9-a0e7-5f3b73b7409c",
 CellTags->"Section5a"],
Cell[438933, 13116, 702, 18, 35, "Text",ExpressionUUID->"ab44dd2c-e3de-497b-9dfb-b8c1e5ad926b",
 PageBreakAbove->False,
 PageBreakWithin->False],
Cell[439638, 13136, 226, 6, 31, "Input",ExpressionUUID->"38b5152e-b8d4-4960-beb5-11061e255e6d",
 InitializationCell->True],
Cell[439867, 13144, 122, 0, 20, "Text",ExpressionUUID->"97525960-2fb2-4a68-96a0-49cc349a0072"],
Cell[CellGroupData[{
Cell[440014, 13148, 149, 3, 31, "Input",ExpressionUUID->"771c091f-ff46-4644-823f-ea69bc426bbb"],
Cell[440166, 13153, 114, 2, 31, "Output",ExpressionUUID->"3ed47b32-9a91-4620-9714-0cc581187916"]
}, Open  ]],
Cell[440295, 13158, 916, 21, 70, "Text",ExpressionUUID->"0e1538e7-bf4e-4dc8-8624-5455147c79c9"],
Cell[CellGroupData[{
Cell[441236, 13183, 625, 16, 108, "Input",ExpressionUUID->"4eaa1db7-9930-4c69-a70b-35b7167313cd"],
Cell[441864, 13201, 114, 2, 31, "Output",ExpressionUUID->"ffcc167d-8323-4008-90b8-6629626abcff"]
}, Open  ]],
Cell[441993, 13206, 456, 10, 36, "Text",ExpressionUUID->"947941c7-8257-4e4e-9e8e-6bf0f7559d1c"],
Cell[CellGroupData[{
Cell[442474, 13220, 170, 4, 31, "Input",ExpressionUUID->"8e6b01b8-82ca-4830-8455-dfb0a378748c"],
Cell[442647, 13226, 112, 2, 31, "Output",ExpressionUUID->"5c48c592-34dc-4aa7-9053-8fd5ed61dd62"]
}, Open  ]],
Cell[CellGroupData[{
Cell[442796, 13233, 172, 4, 31, "Input",ExpressionUUID->"24c81e54-afff-4b76-976c-58e02bff57c5"],
Cell[442971, 13239, 112, 2, 31, "Output",ExpressionUUID->"45c0f8d6-9bb4-4b91-9665-8c6eb6184d29"]
}, Open  ]],
Cell[443098, 13244, 498, 12, 39, "Text",ExpressionUUID->"68b03294-46b1-4bbe-882f-f71744200f03"],
Cell[443599, 13258, 417, 10, 21, "Text",ExpressionUUID->"c21ca882-74a1-499a-b98b-5c94a334dd2d"],
Cell[444019, 13270, 1300, 34, 184, "Input",ExpressionUUID->"0a7d0e4f-ec95-49c3-b662-23d08048d155",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[445344, 13308, 176, 4, 31, "Input",ExpressionUUID->"489716ea-6334-49f8-8f42-77f06334ce8c"],
Cell[445523, 13314, 115, 2, 31, "Output",ExpressionUUID->"e1ca41aa-8ac5-401b-a1d6-65119263597e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[445687, 13322, 141, 1, 32, "Subsection",ExpressionUUID->"ec78782c-5d62-4fb8-89cf-60f490036d6a",
 CellTags->"Section5b"],
Cell[445831, 13325, 463, 6, 50, "Text",ExpressionUUID->"6c5d0a18-398a-4902-8fdd-6f89d4a72bfd"],
Cell[CellGroupData[{
Cell[446319, 13335, 125, 0, 18, "Subsubsection",ExpressionUUID->"ff870c8c-e610-4401-8f45-5c89bbada473"],
Cell[446447, 13337, 1439, 37, 83, "Text",ExpressionUUID->"603b47d2-76c2-43a6-9c19-541d205d38b5"],
Cell[CellGroupData[{
Cell[447911, 13378, 245, 7, 31, "Input",ExpressionUUID->"95b4c873-17fd-4281-9569-18277401c72a"],
Cell[448159, 13387, 247, 8, 47, "Output",ExpressionUUID->"a381f8c0-76e4-4dd5-b428-b47d0009b1b2"]
}, Open  ]],
Cell[448421, 13398, 1499, 42, 79, "Text",ExpressionUUID->"3769958d-f5cc-4e8a-8896-f089beca4611"],
Cell[449923, 13442, 255, 8, 48, "Equation",ExpressionUUID->"f573f2c3-7b7c-42c8-9029-726a6937c239"],
Cell[450181, 13452, 1636, 43, 100, "Text",ExpressionUUID->"e241ccc3-4836-47f0-aed0-467168f64095"],
Cell[CellGroupData[{
Cell[451842, 13499, 347, 11, 31, "Input",ExpressionUUID->"72aebbdb-20b3-4ed8-8a6f-30a67b44811b"],
Cell[452192, 13512, 260, 6, 31, "Output",ExpressionUUID->"ba262e29-9f6a-4784-8668-66291818a01d"]
}, Open  ]],
Cell[452467, 13521, 225, 5, 20, "Text",ExpressionUUID->"94fd5302-ac4f-43dd-bb41-99a92553b0a2"],
Cell[452695, 13528, 199, 5, 31, "Input",ExpressionUUID->"fe74986d-be2f-462e-b3cd-d7f2a810d75c"],
Cell[CellGroupData[{
Cell[452919, 13537, 149, 3, 31, "Input",ExpressionUUID->"c5c62a16-1298-4a98-a33f-3de2581603e7"],
Cell[453071, 13542, 112, 2, 31, "Output",ExpressionUUID->"c966e358-2893-4f29-a57a-8da4b873ed67"]
}, Open  ]],
Cell[453198, 13547, 199, 5, 31, "Input",ExpressionUUID->"04e67710-487c-4976-88e2-f52f04cf61c5"],
Cell[CellGroupData[{
Cell[453422, 13556, 149, 3, 31, "Input",ExpressionUUID->"231409aa-669d-4179-8f0b-c0f9825d41e2"],
Cell[453574, 13561, 112, 2, 31, "Output",ExpressionUUID->"f78bf454-2c29-494d-9ec7-12eb1b50b256"]
}, Open  ]],
Cell[453701, 13566, 199, 5, 31, "Input",ExpressionUUID->"7ccc63f6-9a83-4470-be8c-ff090b14d4df"],
Cell[CellGroupData[{
Cell[453925, 13575, 149, 3, 31, "Input",ExpressionUUID->"36d482d5-eb42-4fa7-800b-abc1f3dce775"],
Cell[454077, 13580, 113, 2, 31, "Output",ExpressionUUID->"7fe99012-cb50-40c0-a1b9-e1515135154b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[454227, 13587, 169, 4, 31, "Input",ExpressionUUID->"11cf15b2-d918-4db6-a477-6d1a7b2e238c"],
Cell[454399, 13593, 132, 3, 47, "Output",ExpressionUUID->"b263a820-bbf9-45a6-b91c-413b8d48b5da"]
}, Open  ]],
Cell[454546, 13599, 307, 8, 31, "Text",ExpressionUUID->"1d1d9715-0375-4815-922a-f7480a432643"]
}, Open  ]],
Cell[CellGroupData[{
Cell[454890, 13612, 103, 0, 18, "Subsubsection",ExpressionUUID->"fb913220-f940-4aaf-8c28-4bbea40a09fc"],
Cell[454996, 13614, 1381, 36, 94, "Text",ExpressionUUID->"b82e7740-a94f-4414-97b6-444991ed09fd"],
Cell[CellGroupData[{
Cell[456402, 13654, 364, 11, 31, "Input",ExpressionUUID->"9e5ba18f-87c8-483a-af95-f2b647e17228"],
Cell[456769, 13667, 17723, 309, 230, 4471, 91, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"1e37c6f7-487b-4a15-8448-80cbd6afe790"]
}, Open  ]],
Cell[474507, 13979, 202, 4, 24, "Text",ExpressionUUID->"fe6e0611-ff74-49d6-9e98-a26b71b662b7"],
Cell[474712, 13985, 720, 21, 43, "Text",ExpressionUUID->"a0850186-35d7-459b-b539-ac060a2cad9d"],
Cell[475435, 14008, 351, 10, 31, "Input",ExpressionUUID->"a952ed4d-47d9-4c21-855d-ec317ea1b1af"],
Cell[475789, 14020, 801, 22, 40, "Text",ExpressionUUID->"23aa0b18-288a-4fb7-95e1-981d7a5bdb0a"],
Cell[CellGroupData[{
Cell[476615, 14046, 247, 6, 31, "Input",ExpressionUUID->"fe9049c9-c3fc-409a-b812-91be1b84f553"],
Cell[476865, 14054, 1866, 47, 236, "Output",ExpressionUUID->"1abdac47-2527-472f-90b7-d2871b797f22"]
}, Open  ]],
Cell[478746, 14104, 641, 17, 40, "Text",ExpressionUUID->"4dabc582-16e5-4cb7-a39f-c7e45413de64"],
Cell[CellGroupData[{
Cell[479412, 14125, 228, 5, 31, "Input",ExpressionUUID->"c1923220-846b-45ca-ab4b-2c2baf2569ba"],
Cell[479643, 14132, 5365, 108, 230, "Output",ExpressionUUID->"31e3a84f-7b33-4769-8631-ef389bdeb9aa"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[485081, 14248, 109, 1, 55, "Section",ExpressionUUID->"e5eff648-0a7f-4d02-91cc-bf466d1a7ff3",
 CellTags->"Section6"],
Cell[485193, 14251, 353, 5, 35, "Text",ExpressionUUID->"e2c3a8dd-2406-45c1-a1e1-9bf75bc1cabc"],
Cell[CellGroupData[{
Cell[485571, 14260, 122, 1, 32, "Subsection",ExpressionUUID->"f96f17d0-bf51-4701-a9c7-8c955955b68e",
 CellTags->"Section6a"],
Cell[485696, 14263, 338, 7, 35, "Text",ExpressionUUID->"0fdf74a1-46ab-4e0f-b3b2-8ee505598397",
 PageBreakAbove->False,
 PageBreakWithin->False],
Cell[CellGroupData[{
Cell[486059, 14274, 119, 0, 18, "Subsubsection",ExpressionUUID->"c281f5ba-5310-4e1f-baee-28c3899ecb5b"],
Cell[486181, 14276, 312, 4, 35, "Text",ExpressionUUID->"4a468e93-b2b9-4f68-a668-a9236a73d649"],
Cell[CellGroupData[{
Cell[486518, 14284, 329, 10, 31, "Input",ExpressionUUID->"aa91e563-5432-4d10-8315-60adccf4c090",
 InitializationCell->True],
Cell[486850, 14296, 274, 8, 31, "Output",ExpressionUUID->"0e6eddd1-e738-451a-b2c4-e0209ac460d6"]
}, Open  ]],
Cell[487139, 14307, 449, 12, 40, "Text",ExpressionUUID->"befc4851-84c7-4241-b0ff-7a717d09494e"],
Cell[CellGroupData[{
Cell[487613, 14323, 143, 3, 31, "Input",ExpressionUUID->"4490d6a6-0427-4252-8bf8-372175643821"],
Cell[487759, 14328, 692, 20, 58, "Output",ExpressionUUID->"a6effe86-89d1-4206-9494-c6f1605d8626"]
}, Open  ]],
Cell[488466, 14351, 717, 17, 55, "Text",ExpressionUUID->"d2ffa87b-cfe2-4cc8-9d28-ee6875eb83bc"],
Cell[489186, 14370, 459, 12, 40, "Text",ExpressionUUID->"e3161930-3595-4099-9c39-ce02ab870144"],
Cell[CellGroupData[{
Cell[489670, 14386, 316, 9, 31, "Input",ExpressionUUID->"f38630f6-3850-414c-8cac-3b1372832c1f",
 InitializationCell->True],
Cell[489989, 14397, 274, 8, 31, "Output",ExpressionUUID->"5a5e43f7-4b39-4f80-9047-49f3d8cfecc8"]
}, Open  ]],
Cell[490278, 14408, 514, 10, 54, "Text",ExpressionUUID->"921dec2c-7a5f-469d-9617-d8f6dfb0ed00"],
Cell[CellGroupData[{
Cell[490817, 14422, 141, 3, 31, "Input",ExpressionUUID->"9b671795-bdd8-406d-bfc4-43d5503efefe"],
Cell[490961, 14427, 114, 2, 31, "Output",ExpressionUUID->"86140076-56d4-4328-b420-c78bcde5c5f6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[491124, 14435, 146, 3, 21, "Subsubsection",ExpressionUUID->"070b3d16-1715-4156-b923-986822b67a45"],
Cell[491273, 14440, 522, 12, 36, "Text",ExpressionUUID->"d95496cb-3aba-43fd-90ec-952f7c49d7bc"],
Cell[491798, 14454, 177, 3, 20, "Text",ExpressionUUID->"8f88db19-7458-46f3-9815-89ea54300c7f"],
Cell[CellGroupData[{
Cell[492000, 14461, 445, 13, 51, "Input",ExpressionUUID->"4f8cae27-9a4e-44a8-9271-829cbc47f303",
 InitializationCell->True],
Cell[492448, 14476, 776, 22, 92, "Output",ExpressionUUID->"d02f1f64-b676-429f-b847-c252424d5eac"]
}, Open  ]],
Cell[493239, 14501, 1189, 28, 68, "Text",ExpressionUUID->"ff2f7d9c-183a-4d86-abfe-76e44373b782"],
Cell[CellGroupData[{
Cell[494453, 14533, 620, 19, 51, "Input",ExpressionUUID->"d66b2d48-4666-47bc-8f5d-aba4c1d82d53",
 InitializationCell->True],
Cell[495076, 14554, 1749, 57, 80, "Output",ExpressionUUID->"e34757c0-71b3-45a9-8ef9-609af8e41e1b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[496874, 14617, 115, 0, 18, "Subsubsection",ExpressionUUID->"6a52a151-4448-4761-8004-86548fe7775f"],
Cell[496992, 14619, 313, 7, 21, "Text",ExpressionUUID->"d950063a-5d7e-4086-9c20-f36a6ed059da"],
Cell[CellGroupData[{
Cell[497330, 14630, 183, 4, 31, "Input",ExpressionUUID->"b6132c0c-156d-45db-8364-dd08cd42ebbd"],
Cell[497516, 14636, 714, 21, 74, "Output",ExpressionUUID->"455f3b9d-5c23-40e8-8a35-bbc9574e1d24"]
}, Open  ]],
Cell[498245, 14660, 443, 9, 36, "Text",ExpressionUUID->"cdfaaeca-4b61-49be-bd52-ddd021cb1220"],
Cell[498691, 14671, 279, 6, 21, "Text",ExpressionUUID->"fbca1d44-87e9-4ccd-9712-2e930d3cc76c"],
Cell[CellGroupData[{
Cell[498995, 14681, 172, 4, 31, "Input",ExpressionUUID->"d54ec4cc-4418-48c8-86e3-6d488a074ea5"],
Cell[499170, 14687, 186, 4, 31, "Output",ExpressionUUID->"faada4b5-1d18-4357-84f9-9ede7d7065dc"]
}, Open  ]],
Cell[499371, 14694, 182, 3, 20, "Text",ExpressionUUID->"90d58473-f1b9-4cb5-b920-e3b3babd8222"],
Cell[CellGroupData[{
Cell[499578, 14701, 360, 10, 51, "Input",ExpressionUUID->"34a2e450-6f20-4556-9518-020d2348b264",
 InitializationCell->True],
Cell[499941, 14713, 736, 22, 92, "Output",ExpressionUUID->"e4701bdd-2144-43b4-913c-059279bcd3cc"]
}, Open  ]],
Cell[500692, 14738, 614, 15, 43, "Text",ExpressionUUID->"196843cf-8f9c-4e61-aec6-7b8041670138"],
Cell[CellGroupData[{
Cell[501331, 14757, 796, 28, 108, "Input",ExpressionUUID->"ec44e256-48c4-4c8b-bf67-08132f864846",
 InitializationCell->True],
Cell[502130, 14787, 758, 23, 92, "Output",ExpressionUUID->"d8d1ba6d-9d08-460d-87fb-0abece56f7f3"]
}, Open  ]],
Cell[502903, 14813, 361, 8, 36, "Text",ExpressionUUID->"00a20fb9-60f3-498f-999e-d099bfc98787"],
Cell[503267, 14823, 390, 8, 36, "Text",ExpressionUUID->"b375a0f9-94b0-4c62-a4ed-9da843f3e455"],
Cell[CellGroupData[{
Cell[503682, 14835, 244, 7, 31, "Input",ExpressionUUID->"003f8c22-41a9-4412-9295-89b49f5d6012"],
Cell[503929, 14844, 824, 26, 142, "Output",ExpressionUUID->"b5471d55-4a30-47ad-878f-69f39d3e1936"]
}, Open  ]],
Cell[504768, 14873, 376, 8, 36, "Text",ExpressionUUID->"09cff3cf-e257-4720-8208-0207f685027e"],
Cell[CellGroupData[{
Cell[505169, 14885, 254, 7, 31, "Input",ExpressionUUID->"c920390b-5655-4f9e-b8bc-c4805901a128"],
Cell[505426, 14894, 1794, 57, 80, "Output",ExpressionUUID->"0c5dcadb-b244-4d03-ba0a-7b8041bd704f"]
}, Open  ]],
Cell[507235, 14954, 827, 17, 70, "Text",ExpressionUUID->"61e14a13-99be-4671-9643-66d7ee09785e"],
Cell[508065, 14973, 577, 10, 51, "Text",ExpressionUUID->"907029bf-70f3-4afe-8096-557f13990a63"],
Cell[508645, 14985, 711, 16, 58, "Text",ExpressionUUID->"53d684ec-b548-40a2-83cc-e9186ba65eea"],
Cell[CellGroupData[{
Cell[509381, 15005, 376, 12, 31, "Input",ExpressionUUID->"46d05143-0983-4cf2-aaaf-dcccd347678f"],
Cell[509760, 15019, 1836, 58, 98, "Output",ExpressionUUID->"9333f4c4-dc82-4ea7-926f-67d75d1fd0a4"]
}, Open  ]],
Cell[511611, 15080, 482, 9, 54, "Text",ExpressionUUID->"1eb390fa-5397-4101-b548-d8643398fb48"],
Cell[CellGroupData[{
Cell[512118, 15093, 266, 8, 31, "Input",ExpressionUUID->"f04c71a1-d70f-4ff6-a075-1e76dcf2c501"],
Cell[512387, 15103, 1796, 58, 98, "Output",ExpressionUUID->"c35e123c-fa30-431b-8fd8-038ffcb912e4"]
}, Open  ]],
Cell[514198, 15164, 195, 3, 20, "Text",ExpressionUUID->"34dd98e1-4e3f-41fb-bdda-120572cff042"],
Cell[CellGroupData[{
Cell[514418, 15171, 212, 5, 31, "Input",ExpressionUUID->"c819c7a6-d911-4205-8341-ef11d1b0c9d4"],
Cell[514633, 15178, 1997, 61, 148, "Output",ExpressionUUID->"4841a748-0d86-4010-9269-a0fca51d2328"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[516691, 15246, 118, 1, 32, "Subsection",ExpressionUUID->"7ff08613-5156-4863-9737-50823876e89c",
 CellTags->"Section6b"],
Cell[516812, 15249, 333, 6, 39, "Text",ExpressionUUID->"d50eebd5-469e-45bf-9390-d619ef152d3b"],
Cell[CellGroupData[{
Cell[517170, 15259, 419, 13, 51, "Input",ExpressionUUID->"f472a086-a06c-46da-acfd-86aef2a450bb",
 InitializationCell->True],
Cell[517592, 15274, 692, 20, 58, "Output",ExpressionUUID->"376a0d42-498d-41f9-8ae5-75a65eb8dbf9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[518321, 15299, 465, 15, 51, "Input",ExpressionUUID->"1ff906ab-559c-4a1f-9c43-0a2c7acf4b51",
 InitializationCell->True],
Cell[518789, 15316, 736, 22, 58, "Output",ExpressionUUID->"6ed2f197-fccc-41e9-8477-a426ffe17501"]
}, Open  ]],
Cell[CellGroupData[{
Cell[519562, 15343, 167, 4, 31, "Input",ExpressionUUID->"9d2244a7-19dc-4b25-ae1e-2a5b6f012641"],
Cell[519732, 15349, 715, 21, 58, "Output",ExpressionUUID->"74fa0d29-b872-4683-864b-09239e31391d"]
}, Open  ]],
Cell[520462, 15373, 183, 3, 20, "Text",ExpressionUUID->"01b92ce1-12bb-4a22-8d06-4000534c7e3f"],
Cell[CellGroupData[{
Cell[520670, 15380, 166, 4, 31, "Input",ExpressionUUID->"1c514dfb-156a-4a6d-9dd5-57c489c24385"],
Cell[520839, 15386, 737, 22, 58, "Output",ExpressionUUID->"ae5231cd-30bd-4736-a6fc-d2e7308462a0"]
}, Open  ]],
Cell[521591, 15411, 187, 4, 24, "Text",ExpressionUUID->"2e05c292-43f0-4d6b-a830-fdaf8a1e6f31"],
Cell[521781, 15417, 433, 14, 24, "Text",ExpressionUUID->"4359ea3d-1929-4837-bcd5-69e8f4c83fee"],
Cell[CellGroupData[{
Cell[522239, 15435, 566, 16, 51, "Input",ExpressionUUID->"6e782f2a-2475-459c-9cad-81c9e6f1338f",
 InitializationCell->True],
Cell[522808, 15453, 774, 23, 74, "Output",ExpressionUUID->"34bcde19-c1e3-46c9-a731-05ffe9f0ab2c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[523619, 15481, 571, 19, 51, "Input",ExpressionUUID->"171c0577-87a9-4a4e-bef9-e85482d60a30",
 InitializationCell->True],
Cell[524193, 15502, 760, 24, 92, "Output",ExpressionUUID->"6656c18d-4865-44b3-a337-38157a59d55b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[524990, 15531, 167, 4, 31, "Input",ExpressionUUID->"d22bb4a9-7b3b-4221-80fd-4745e6710159"],
Cell[525160, 15537, 725, 22, 74, "Output",ExpressionUUID->"4b1ed938-f666-4263-a37e-f0a68f2da5c7"]
}, Open  ]],
Cell[525900, 15562, 1244, 36, 75, "Text",ExpressionUUID->"d220fcfb-955c-4cf3-9416-37022b21bdb5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[527181, 15603, 134, 1, 32, "Subsection",ExpressionUUID->"9ca9c11c-3503-41b7-9466-e73ecc7de737",
 CellTags->"Section6c"],
Cell[527318, 15606, 578, 13, 39, "Text",ExpressionUUID->"1ca67bd0-452d-476d-a55c-34f663047dd4"],
Cell[CellGroupData[{
Cell[527921, 15623, 494, 15, 51, "Input",ExpressionUUID->"9914b567-8ddc-4c4a-9774-807f1e74f718",
 InitializationCell->True],
Cell[528418, 15640, 714, 21, 74, "Output",ExpressionUUID->"045e4ff9-af17-4a11-ae7e-0346dcddf419"]
}, Open  ]],
Cell[CellGroupData[{
Cell[529169, 15666, 206, 5, 31, "Input",ExpressionUUID->"9401f4e5-3c04-41c6-bc38-5a4647e3a554"],
Cell[529378, 15673, 759, 21, 74, "Output",ExpressionUUID->"7e0d9860-e253-473e-9684-af8e9825c3cd"]
}, Open  ]],
Cell[530152, 15697, 186, 3, 20, "Text",ExpressionUUID->"c16ee978-4484-4f70-955d-65f52814db33"],
Cell[530341, 15702, 262, 6, 21, "Text",ExpressionUUID->"2f7aee3a-ce48-4653-8e85-c9afee66944b"],
Cell[CellGroupData[{
Cell[530628, 15712, 180, 4, 31, "Input",ExpressionUUID->"b76fecd0-d630-45f9-9e69-309520a13b38"],
Cell[530811, 15718, 714, 21, 74, "Output",ExpressionUUID->"2b163769-1774-4279-b24a-251f8f3df891"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[531574, 15745, 124, 1, 32, "Subsection",ExpressionUUID->"2e9c2b35-0658-4a59-9d9c-50f284de6922",
 CellTags->"Section6d"],
Cell[531701, 15748, 323, 7, 35, "Text",ExpressionUUID->"42f06759-596e-44b0-9df8-b94a7efd8c63"],
Cell[532027, 15757, 1330, 33, 83, "Text",ExpressionUUID->"580ad253-2cc4-4feb-a674-658f56290558"],
Cell[533360, 15792, 312, 6, 21, "Text",ExpressionUUID->"0ac19be3-f148-465e-a855-8aaca122e767"],
Cell[CellGroupData[{
Cell[533697, 15802, 508, 15, 51, "Input",ExpressionUUID->"325d1e26-009e-4a17-8fb4-f40dc8eadd29",
 InitializationCell->True],
Cell[534208, 15819, 714, 21, 74, "Output",ExpressionUUID->"688d3cd6-bd74-4c7e-b0b5-eb8c918a4573"]
}, Open  ]],
Cell[CellGroupData[{
Cell[534959, 15845, 508, 15, 51, "Input",ExpressionUUID->"4229f83d-e9c0-465f-ad2f-6970334b7188",
 InitializationCell->True],
Cell[535470, 15862, 714, 21, 74, "Output",ExpressionUUID->"ea82f880-3337-4042-97ac-3317dc9e4717"]
}, Open  ]],
Cell[CellGroupData[{
Cell[536221, 15888, 219, 6, 31, "Input",ExpressionUUID->"bf95359f-0ce9-4857-afc7-6ac8f385ca3a"],
Cell[536443, 15896, 714, 21, 74, "Output",ExpressionUUID->"a66dc4d1-7316-45cb-8aff-94adc9110ccc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[537194, 15922, 117, 0, 18, "Subsubsection",ExpressionUUID->"bbd9ac67-39c2-41de-8865-da21f196f300"],
Cell[537314, 15924, 1224, 28, 86, "Text",ExpressionUUID->"fb1a1740-7027-493a-a46a-fa3e6d673607"],
Cell[538541, 15954, 1038, 19, 82, "Text",ExpressionUUID->"61b6acb6-0fb5-4ff8-8e95-665d43d316fa"],
Cell[539582, 15975, 341, 8, 24, "Text",ExpressionUUID->"761dfb31-373c-451d-9168-3013505f2814"],
Cell[CellGroupData[{
Cell[539948, 15987, 182, 4, 31, "Input",ExpressionUUID->"4dfeda48-2fdd-4e09-be15-5c653e1d4ea3"],
Cell[540133, 15993, 114, 2, 31, "Output",ExpressionUUID->"29446ac6-ec9d-4089-943b-9289a383d7fe"]
}, Open  ]],
Cell[540262, 15998, 170, 3, 20, "Text",ExpressionUUID->"fc4fb594-04b6-4ee2-9df7-d2f7c7d3613d"],
Cell[CellGroupData[{
Cell[540457, 16005, 359, 12, 31, "Input",ExpressionUUID->"8565bf82-e686-47b3-abd0-8440d9da7e46"],
Cell[540819, 16019, 115, 2, 31, "Output",ExpressionUUID->"881257b0-6323-41d7-b084-e6eb3104724e"]
}, Open  ]],
Cell[540949, 16024, 1126, 28, 73, "Text",ExpressionUUID->"cd12bb71-83c6-4f00-9923-0bb7f6c76a71"],
Cell[542078, 16054, 155, 4, 24, "Text",ExpressionUUID->"8893a87c-45c1-43e5-b06e-a0028825caf7"],
Cell[542236, 16060, 431, 13, 31, "Input",ExpressionUUID->"77db4ac6-db1e-46b7-9fd8-a800b2a8ec1c",
 InitializationCell->True],
Cell[542670, 16075, 245, 4, 35, "Text",ExpressionUUID->"253ac070-2e3f-4002-aa77-5a4125a4e8aa"],
Cell[CellGroupData[{
Cell[542940, 16083, 159, 3, 31, "Input",ExpressionUUID->"0a48330c-359d-47a8-846d-0e1c94f644f3"],
Cell[543102, 16088, 114, 2, 31, "Output",ExpressionUUID->"f7f4303e-13ab-4fa1-bd40-1acec8976b9d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[543253, 16095, 309, 9, 31, "Input",ExpressionUUID->"d5f04b18-44f2-40f7-8815-bb839d87302d"],
Cell[543565, 16106, 115, 2, 31, "Output",ExpressionUUID->"ee5689f8-9b2c-4eca-bd71-71b074e03713"]
}, Open  ]],
Cell[CellGroupData[{
Cell[543717, 16113, 319, 9, 31, "Input",ExpressionUUID->"b17c8a5f-1bc0-445c-ae79-44b575028c92"],
Cell[544039, 16124, 115, 2, 31, "Output",ExpressionUUID->"55dee6a9-9ffe-430e-9efe-e0cf75b7fa62"]
}, Open  ]],
Cell[544169, 16129, 379, 10, 39, "Text",ExpressionUUID->"1cb2c092-ac7e-41ae-bf15-75dfecc44dc7"],
Cell[544551, 16141, 350, 10, 31, "Input",ExpressionUUID->"8ddf0656-bb76-4e53-a76f-107e5769fb89",
 InitializationCell->True],
Cell[544904, 16153, 349, 10, 31, "Input",ExpressionUUID->"f1183917-5f8c-48bb-8ee9-0886323db3d6",
 InitializationCell->True],
Cell[545256, 16165, 174, 3, 20, "Text",ExpressionUUID->"58d4748c-7b76-41ce-b17f-3a2accc5880d"],
Cell[CellGroupData[{
Cell[545455, 16172, 218, 6, 31, "Input",ExpressionUUID->"d133892f-d710-4cc2-8648-e19c753e18f2"],
Cell[545676, 16180, 714, 21, 74, "Output",ExpressionUUID->"eed4e0f6-c56d-40c5-89b4-b369e3baa2a1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[546427, 16206, 218, 6, 31, "Input",ExpressionUUID->"2a3f5291-a273-433f-808d-e10d6260fb4a"],
Cell[546648, 16214, 714, 21, 74, "Output",ExpressionUUID->"9f2d4079-b0f5-480e-bc09-2d43c2fd4ad4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[547411, 16241, 112, 0, 18, "Subsubsection",ExpressionUUID->"345bfa70-3511-475d-8c1d-ebf03b30f54e"],
Cell[547526, 16243, 1026, 25, 50, "Text",ExpressionUUID->"6de2b212-85f0-429d-ab39-28212a84664a"],
Cell[548555, 16270, 828, 23, 34, "Equation",ExpressionUUID->"525198fc-22e6-4e4e-941b-b01f40836984"],
Cell[549386, 16295, 573, 13, 40, "Text",ExpressionUUID->"d800de8b-823c-49cb-aa02-84eeade82c66"],
Cell[CellGroupData[{
Cell[549984, 16312, 315, 9, 31, "Input",ExpressionUUID->"f5061bbb-d0e0-45a8-9145-37d231a6cdbe"],
Cell[550302, 16323, 156, 4, 31, "Output",ExpressionUUID->"2e422d74-cc2e-4d03-a564-f995dd6e3123"]
}, Open  ]],
Cell[550473, 16330, 433, 9, 39, "Text",ExpressionUUID->"833ae1e4-8f06-48fe-a232-34e6e9c4f84e"],
Cell[CellGroupData[{
Cell[550931, 16343, 433, 13, 31, "Input",ExpressionUUID->"e7c51ce0-d6d2-4146-ab80-23d59b8d52ce",
 InitializationCell->True],
Cell[551367, 16358, 156, 4, 31, "Output",ExpressionUUID->"84e33282-47b9-4015-983a-6d171d010893"]
}, Open  ]],
Cell[CellGroupData[{
Cell[551560, 16367, 116, 2, 31, "Input",ExpressionUUID->"bf097b2c-87bd-415d-87c1-b80902558798"],
Cell[551679, 16371, 111, 2, 31, "Output",ExpressionUUID->"962d8e82-6f5d-447f-9bf7-8ea111158d7e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[551827, 16378, 119, 2, 31, "Input",ExpressionUUID->"f7fd6cfa-b384-4cd1-9c25-3c733e292fef"],
Cell[551949, 16382, 111, 2, 31, "Output",ExpressionUUID->"4f70b9aa-5ac8-4936-99ca-799674b19afa"]
}, Open  ]],
Cell[552075, 16387, 420, 8, 36, "Text",ExpressionUUID->"5f8fe537-cc36-4432-b867-54cce176b00f"],
Cell[552498, 16397, 286, 8, 31, "Input",ExpressionUUID->"1d21a9ac-205a-4f05-b951-640fa2032a54",
 InitializationCell->True],
Cell[552787, 16407, 404, 9, 39, "Text",ExpressionUUID->"1b086a2d-aa2a-4627-abda-64ae4274fe5f"],
Cell[553194, 16418, 777, 20, 57, "Text",ExpressionUUID->"eec92407-391c-45a7-9787-b284f631dcd6"],
Cell[553974, 16440, 121, 0, 20, "Text",ExpressionUUID->"4dacd868-ab8c-4e58-8086-208716fd6fa1"],
Cell[554098, 16442, 454, 13, 26, "Equation",ExpressionUUID->"0b724b03-787d-4034-96cc-b5996087d494"],
Cell[554555, 16457, 388, 10, 24, "Text",ExpressionUUID->"ecacd383-27ff-427d-8ae3-28b63a178ff5"],
Cell[CellGroupData[{
Cell[554968, 16471, 218, 6, 31, "Input",ExpressionUUID->"edf8548d-ac61-4aee-b373-d31b8d0d2b7b",
 InitializationCell->True],
Cell[555189, 16479, 111, 2, 31, "Output",ExpressionUUID->"58c2e43e-1372-4e48-a49a-998d0bf07f9a"]
}, Open  ]],
Cell[555315, 16484, 333, 9, 24, "Text",ExpressionUUID->"478037fd-9659-412d-80cd-4a0bd79be3bb"],
Cell[CellGroupData[{
Cell[555673, 16497, 280, 8, 31, "Input",ExpressionUUID->"593639bb-4234-4097-a1a3-994ffea8b932",
 InitializationCell->True],
Cell[555956, 16507, 111, 2, 31, "Output",ExpressionUUID->"bc663fa0-6538-4b90-850c-1d931e785ca3"]
}, Open  ]],
Cell[556082, 16512, 113, 0, 20, "Text",ExpressionUUID->"16014a86-f43f-4c8e-bf66-517c4acffb41"],
Cell[CellGroupData[{
Cell[556220, 16516, 280, 8, 31, "Input",ExpressionUUID->"e407a6ae-1b78-4859-bc0d-eb7a9a7b86ed",
 InitializationCell->True],
Cell[556503, 16526, 111, 2, 31, "Output",ExpressionUUID->"2257257a-1523-44c2-bb1a-d8c74d53d6cc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[556651, 16533, 280, 8, 31, "Input",ExpressionUUID->"77dcf401-c122-4c25-96b7-0f1a1acf0835",
 InitializationCell->True],
Cell[556934, 16543, 111, 2, 31, "Output",ExpressionUUID->"2f88f39b-065a-4c11-86c5-fcd446471047"]
}, Open  ]],
Cell[CellGroupData[{
Cell[557082, 16550, 280, 8, 31, "Input",ExpressionUUID->"b456270a-a223-4b66-b2a6-fa305e9abbda",
 InitializationCell->True],
Cell[557365, 16560, 111, 2, 31, "Output",ExpressionUUID->"4923e941-eb39-419e-a976-6b3a45beadc0"]
}, Open  ]],
Cell[557491, 16565, 1070, 33, 47, "Text",ExpressionUUID->"5e21c877-599d-4989-be0e-d7dd8b3ac328"],
Cell[558564, 16600, 156, 4, 24, "Text",ExpressionUUID->"281cb667-b58c-4a17-9eb2-fa5475a8bbed"],
Cell[558723, 16606, 3197, 84, 336, "Input",ExpressionUUID->"262cc0c3-9774-4473-8caf-7531d1019abc",
 InitializationCell->True],
Cell[561923, 16692, 148, 2, 20, "Text",ExpressionUUID->"d149e195-350b-4a41-8072-74b7d4f20ae2"],
Cell[CellGroupData[{
Cell[562096, 16698, 463, 14, 51, "Input",ExpressionUUID->"a8629bbb-dc4f-45a8-aec7-fbfa1ab64e76",
 InitializationCell->True],
Cell[562562, 16714, 699, 21, 74, "Output",ExpressionUUID->"f8751dd9-97b0-4889-b219-7c77973de363"]
}, Open  ]],
Cell[CellGroupData[{
Cell[563298, 16740, 423, 13, 51, "Input",ExpressionUUID->"0c1c3c99-9b94-4ac6-bf3d-13c56f59623f",
 InitializationCell->True],
Cell[563724, 16755, 692, 20, 58, "Output",ExpressionUUID->"2165f89c-a9a3-4559-b155-81471f559ac5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[564453, 16780, 210, 5, 31, "Input",ExpressionUUID->"a7af3ff6-65b4-4908-ad09-ade31ef08890"],
Cell[564666, 16787, 714, 21, 74, "Output",ExpressionUUID->"aef149e4-913a-4394-a718-d8aa868dde5d"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[565453, 16816, 170, 3, 55, "Section",ExpressionUUID->"1b823bc4-b7ec-4fb2-9acc-a85a732f0852",
 CellTags->"Solutions"],
Cell[CellGroupData[{
Cell[565648, 16823, 126, 2, 32, "Subsection",ExpressionUUID->"f59e2df4-b9cc-4c5e-8e76-25ad736c529d",
 CellTags->"SolutionsCP3"],
Cell[565777, 16827, 830, 25, 45, "Problem",ExpressionUUID->"5bbfb13c-21f8-4a19-ac95-9b38e49911ad"],
Cell[566610, 16854, 588, 9, 65, "Text",ExpressionUUID->"a87298ea-23e1-4daa-9c0f-6c9c66aa5821"],
Cell[567201, 16865, 573, 8, 65, "Text",ExpressionUUID->"51aeb4b7-eae1-4c58-8804-2cb56bbc622f"],
Cell[567777, 16875, 229, 5, 24, "Text",ExpressionUUID->"c647a494-0adb-4083-b294-a128037a56d7"],
Cell[CellGroupData[{
Cell[568031, 16884, 627, 17, 34, "Item1Numbered",ExpressionUUID->"00bfad65-3774-4e3b-8b3d-1b907f5a1934"],
Cell[568661, 16903, 195, 4, 20, "Item1Numbered",ExpressionUUID->"129c389d-34b6-4b27-bc98-270cd668fcc9"],
Cell[568859, 16909, 688, 19, 34, "Item1Numbered",ExpressionUUID->"81763611-25d8-407e-b2e3-efa678fd695a"],
Cell[569550, 16930, 189, 4, 20, "Item1Numbered",ExpressionUUID->"3a593784-ce6f-4491-a825-f6750150dfbc"]
}, Open  ]],
Cell[569754, 16937, 98, 0, 20, "Text",ExpressionUUID->"f69b0d84-04b7-4f04-9aae-481d63836572"],
Cell[569855, 16939, 1324, 37, 146, "Input",ExpressionUUID->"01f5d71a-5579-4c2b-b433-1c4e8db6e327",
 InitializationCell->True],
Cell[571182, 16978, 152, 2, 20, "Text",ExpressionUUID->"df594ce6-7a0c-41fc-bbbe-8d475e050765"],
Cell[CellGroupData[{
Cell[571359, 16984, 404, 12, 31, "Input",ExpressionUUID->"7b9d7896-6cdc-4fdd-bc82-0d9613f6c8db",
 InitializationCell->True],
Cell[571766, 16998, 346, 10, 31, "Output",ExpressionUUID->"b9f6898e-f199-422a-b093-b9e9cd0bffd6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[572149, 17013, 404, 12, 31, "Input",ExpressionUUID->"fec8dbd7-6868-49ed-931a-d2a4b3b2522d",
 InitializationCell->True],
Cell[572556, 17027, 346, 10, 31, "Output",ExpressionUUID->"b345c1d5-4a2c-4033-a214-5f15193424ce"]
}, Open  ]],
Cell[CellGroupData[{
Cell[572939, 17042, 188, 4, 31, "Input",ExpressionUUID->"c3bde0a6-eca7-48d5-abe5-a80f9729e8c5"],
Cell[573130, 17048, 276, 8, 31, "Output",ExpressionUUID->"ec753c66-027c-4caf-98af-0c3d04dd3d17"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[573455, 17062, 126, 2, 32, "Subsection",ExpressionUUID->"d0c5bac7-d7f1-462d-858d-dd8fc000d2f6",
 CellTags->"SolutionsCP9"],
Cell[573584, 17066, 131, 0, 42, "Problem",ExpressionUUID->"3fd98236-a885-4c3c-ba69-94e247541350"],
Cell[573718, 17068, 861, 22, 59, "Text",ExpressionUUID->"3f2ad0ad-5fdc-4fd5-9154-530384df0a38"],
Cell[574582, 17092, 295, 8, 31, "Input",ExpressionUUID->"69c605ee-c4ec-4e08-a3a1-ecbb11315365",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[574902, 17104, 520, 15, 51, "Input",ExpressionUUID->"4fe38a71-3394-4efc-ad0d-7f77912ee729",
 InitializationCell->True],
Cell[575425, 17121, 714, 21, 74, "Output",ExpressionUUID->"22c93d13-8445-48a0-9678-c2cad9a8c3cf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[576176, 17147, 161, 3, 31, "Input",ExpressionUUID->"7b49b749-70cc-4ec6-890a-f3b281b8e149"],
Cell[576340, 17152, 114, 2, 31, "Output",ExpressionUUID->"fe636908-d7e0-4b2d-b501-7a9568947279"]
}, Open  ]],
Cell[CellGroupData[{
Cell[576491, 17159, 526, 15, 51, "Input",ExpressionUUID->"09aaabf8-2338-4849-9b0d-538e0ffdd13f",
 InitializationCell->True],
Cell[577020, 17176, 714, 21, 74, "Output",ExpressionUUID->"20f8050e-c557-43e7-bbba-76614d92a271"]
}, Open  ]],
Cell[CellGroupData[{
Cell[577771, 17202, 164, 3, 31, "Input",ExpressionUUID->"fc5a80d7-7481-4869-89cc-4651b9c7cc2c"],
Cell[577938, 17207, 115, 2, 31, "Output",ExpressionUUID->"c41c4c84-fc2b-48e4-8058-77d12bb8b82d"]
}, Open  ]],
Cell[578068, 17212, 317, 7, 21, "Text",ExpressionUUID->"691aaaa9-e2bb-4992-9c51-0b0adbdcb177"]
}, Open  ]],
Cell[CellGroupData[{
Cell[578422, 17224, 138, 2, 32, "Subsection",ExpressionUUID->"3227128e-654b-4104-a171-9ee94d1b1ea4",
 CellTags->"SolutionsCE2"],
Cell[578563, 17228, 129, 0, 42, "Problem",ExpressionUUID->"a0d930aa-bd23-4bc8-8917-da11282b2202"],
Cell[578695, 17230, 413, 10, 36, "Text",ExpressionUUID->"1ed185d9-0b89-4745-9f00-186199b33f72"],
Cell[579111, 17242, 931, 21, 50, "Text",ExpressionUUID->"685b371e-75d0-4166-b329-751a8924b197"],
Cell[580045, 17265, 361, 5, 35, "Text",ExpressionUUID->"e248bac2-8ea2-4217-b279-96c979a88e85"],
Cell[580409, 17272, 468, 7, 54, "Text",ExpressionUUID->"c90898f9-64b3-4a14-96b0-dd77032fa0f1"],
Cell[580880, 17281, 192, 4, 26, "Equation",ExpressionUUID->"d416e7da-a11a-43ff-96a6-dda5a6600ee9"],
Cell[581075, 17287, 245, 4, 35, "Text",ExpressionUUID->"8cc4525c-5450-4e32-9789-8a623655f0b8"],
Cell[581323, 17293, 192, 4, 26, "Equation",ExpressionUUID->"494f0923-04b3-419a-aec9-a59717ffd879"],
Cell[581518, 17299, 264, 5, 39, "Text",ExpressionUUID->"4050afac-8c7d-45a8-ae5e-b2da5fbf1cba"],
Cell[581785, 17306, 1512, 38, 241, "Input",ExpressionUUID->"032ae186-2bed-4cff-8a72-ada7562d8a51",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[583322, 17348, 245, 6, 31, "Input",ExpressionUUID->"962a27ff-7d2d-470c-a52d-875a75c8de64"],
Cell[583570, 17356, 209, 5, 31, "Output",ExpressionUUID->"1a98f897-dec2-4cbd-9c54-ef0fd539db88"]
}, Open  ]],
Cell[583794, 17364, 453, 11, 36, "Text",ExpressionUUID->"6ff25aa7-2d11-4f20-bce9-38951e7234e0"],
Cell[584250, 17377, 858, 20, 52, "Text",ExpressionUUID->"e5237db0-81cc-43f8-95a4-3fdaa468f892"],
Cell[CellGroupData[{
Cell[585133, 17401, 271, 7, 31, "Input",ExpressionUUID->"bc6582bd-4eb1-4618-a04a-18fb478696a4"],
Cell[585407, 17410, 272, 8, 31, "Output",ExpressionUUID->"0f8903ed-f838-409b-8392-c5e1d62dca4c"]
}, Open  ]],
Cell[585694, 17421, 845, 18, 67, "Text",ExpressionUUID->"c7c864a0-3c38-4473-baa8-d9bc29125dd3"],
Cell[CellGroupData[{
Cell[586564, 17443, 537, 15, 51, "Input",ExpressionUUID->"9dc4eec5-7dde-4818-855e-d1900b630b26"],
Cell[587104, 17460, 211, 5, 31, "Output",ExpressionUUID->"f936ae4b-6773-4af8-9f5e-bfdfa149a580"]
}, Open  ]],
Cell[587330, 17468, 172, 4, 24, "Text",ExpressionUUID->"7d567649-58c7-4d90-885d-e5e7b8943cb7"],
Cell[587505, 17474, 355, 10, 31, "Input",ExpressionUUID->"f6c1f3c7-6617-4fc1-a247-eb3e1062595f",
 InitializationCell->True],
Cell[587863, 17486, 160, 3, 20, "Text",ExpressionUUID->"6560001b-c0f2-420d-8f45-d7a87a0985a9"],
Cell[588026, 17491, 963, 27, 146, "Input",ExpressionUUID->"9843d93d-0ba6-4de9-b4ee-d89111ad8bc4",
 InitializationCell->True],
Cell[588992, 17520, 327, 8, 20, "Text",ExpressionUUID->"2d0e5594-e786-4b07-b662-877cf6445e7b"],
Cell[CellGroupData[{
Cell[589344, 17532, 228, 6, 31, "Input",ExpressionUUID->"889ebf6f-20c0-4194-98c8-4692923ed9fa"],
Cell[589575, 17540, 150, 4, 24, "Print",ExpressionUUID->"48980dad-bc89-4622-ae7b-dd2faa4826f1"],
Cell[589728, 17546, 163, 4, 24, "Print",ExpressionUUID->"f8d8dd9f-a7b0-4f6f-835c-3dc53ce8a1eb"],
Cell[589894, 17552, 163, 4, 24, "Print",ExpressionUUID->"0b5cd6ce-ff2e-4a52-b73e-8e40e168066e"],
Cell[590060, 17558, 194, 5, 24, "Print",ExpressionUUID->"7d2095ae-0004-4e4a-ac77-e746547f9abf"],
Cell[590257, 17565, 163, 4, 24, "Print",ExpressionUUID->"e43a7228-d15a-496d-871a-a6cfb6337f29"],
Cell[590423, 17571, 194, 5, 24, "Print",ExpressionUUID->"b162d8ab-c860-47aa-b06f-689f250a6b5d"],
Cell[590620, 17578, 194, 5, 24, "Print",ExpressionUUID->"e56e32c8-e9e9-4104-93b6-8cdb51ebee82"],
Cell[590817, 17585, 212, 5, 24, "Print",ExpressionUUID->"70044089-fcaf-438c-8ead-51b43a39d853"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[591090, 17597, 107, 1, 55, "Section",ExpressionUUID->"a84f6dc0-90a2-4dd3-b367-56577e68abd2",
 CellTags->"Exercises"],
Cell[591200, 17600, 249, 5, 24, "Item1Exercise",ExpressionUUID->"00612cb2-1a3b-4a78-9457-69354717c291"],
Cell[591452, 17607, 224, 5, 24, "Item1Exercise",ExpressionUUID->"611c0055-e33d-49a7-b3a9-e745dd7b5ed7"],
Cell[591679, 17614, 229, 6, 24, "Item1Exercise",ExpressionUUID->"17706863-03da-4cfe-9a86-669cd7a82037"],
Cell[591911, 17622, 249, 4, 33, "Item1Exercise",ExpressionUUID->"c53bfc8c-97c1-4dbe-8853-d2387f1b9e52"],
Cell[592163, 17628, 271, 8, 20, "Item1Exercise",ExpressionUUID->"51fe2275-16ac-4c30-815c-91a843c1af09"],
Cell[592437, 17638, 291, 4, 33, "Item1Exercise",ExpressionUUID->"925d5018-5b63-49d3-a56a-450c89c2273e"],
Cell[592731, 17644, 166, 2, 20, "Item1Exercise",ExpressionUUID->"041feb9c-0d1a-4df5-8ada-d2d191ff7d68"],
Cell[592900, 17648, 169, 3, 20, "Item1Exercise",ExpressionUUID->"7d15b6a3-669c-4ff3-b1d7-b4db0956ca78"],
Cell[593072, 17653, 653, 16, 34, "Item1Exercise",ExpressionUUID->"7bef36d8-610b-446b-a9ce-4c6f1946f9e3"],
Cell[593728, 17671, 262, 6, 24, "Item1Exercise",ExpressionUUID->"a3302f20-944e-48e3-9a2c-645089494440"],
Cell[CellGroupData[{
Cell[594015, 17681, 173, 3, 20, "Item1Exercise",ExpressionUUID->"e7c0ae31-0b5b-4b62-8484-a7f4c1cbe0b1"],
Cell[594191, 17686, 761, 26, 15, "Item2Numbered",ExpressionUUID->"b65708bc-9444-4af8-903e-194b81d4384a"],
Cell[594955, 17714, 1020, 35, 18, "Item2Numbered",ExpressionUUID->"027912f1-24a2-4bf4-a898-d33c7a25e940"],
Cell[595978, 17751, 640, 21, 15, "Item2Numbered",ExpressionUUID->"220b19d3-397f-4fa3-9c91-dbc4c4e53f12"]
}, Open  ]],
Cell[596633, 17775, 947, 29, 33, "Item1Exercise",ExpressionUUID->"9e0a9b21-18d5-4bab-9a1e-887fa122cccd"],
Cell[597583, 17806, 410, 8, 33, "Item1Exercise",ExpressionUUID->"fe8da258-4c39-46ef-ba73-933e1114c043"],
Cell[597996, 17816, 626, 19, 20, "Item1Exercise",ExpressionUUID->"94384aa9-cb98-4236-af39-b0d2d27d8e0f"],
Cell[598625, 17837, 968, 25, 75, "Item1Exercise",ExpressionUUID->"07e2f6bb-07b3-4db9-ab92-57422c24ade6"],
Cell[599596, 17864, 855, 25, 47, "Item1Exercise",ExpressionUUID->"612f7193-ad6c-4d50-aa49-410f9b1cd799"],
Cell[600454, 17891, 485, 12, 37, "Item1Exercise",ExpressionUUID->"abb96ae4-640b-4df8-8277-894c99580a00"]
}, Open  ]]
}
]
*)

