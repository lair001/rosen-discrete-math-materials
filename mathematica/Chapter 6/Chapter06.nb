(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    541905,      14400]
NotebookOptionsPosition[    429859,      12601]
NotebookOutlinePosition[    454633,      13099]
CellTagsIndexPosition[    453562,      13062]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Counting", "BookChapterTitle",
 CounterAssignments->{{
   "ChapterNumber", 
    6}},ExpressionUUID->"fb299c40-128d-45c9-90f4-493022f1e20b"],

Cell[CellGroupData[{

Cell["Introduction", "Section",ExpressionUUID->"3b024092-7252-467c-814c-4539b5c33b7a"],

Cell[TextData[{
 "This chapter presents a variety of techniques that are available in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " for counting a diverse collection of discrete objects, including \
combinations and permutations of finite sets. Objects can be counted using \
formulae or by using algorithms to list the objects and then directly \
counting the size of the list."
}], "Text",ExpressionUUID->"9f1350c5-c041-46d1-8d75-46d347fdd759"]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.1 The Basics of Counting", "Section",
 CellTags->"Section1",ExpressionUUID->"7b6124f2-f942-4f09-a4e0-0b99a7d8422d"],

Cell[TextData[{
 "In this section, we will see how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can be used to perform the computations needed to solve basic counting \
problems. We will begin by looking at some examples. We will discuss \
computations involving large integers. Then, we will see how the principles \
of counting can be used to count the number of operations used by a function \
written in the Wolfram Language. This section concludes by using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to solve counting problems by enumerating all the possibilities."
}], "Text",ExpressionUUID->"ef57c311-4009-418c-84e5-2b18098fdbf9"],

Cell[CellGroupData[{

Cell["Basic Examples", "Subsection",
 CellTags->"Section1a",ExpressionUUID->"8937d3b6-f1a9-4463-afbc-1f37757eeb9e"],

Cell["\<\
We begin with two basic examples to demonstrate the use of some Wolfram \
Language functions.\
\>", "Text",ExpressionUUID->"44c51d8f-c4b8-44b5-b13c-1432015e36fa"],

Cell[CellGroupData[{

Cell["Counting One-to-One Functions", "Subsubsection",ExpressionUUID->"8a065044-127c-4fd7-bb42-c3b409be0d09"],

Cell[TextData[{
 "Recall Example 7 from Section 6.1 of the text, which calculated that the \
number of one-to-one functions from a set with ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "c638e6f5-23dc-4001-b88e-f3672b6015d7"],
 " elements to a set with ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "8a0b33c5-96d5-4efe-84cc-e13405bfc889"],
 " elements is "
}], "Text",ExpressionUUID->"ca02c29b-c2d1-4884-8575-faee9f056187"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"n", "(", 
    RowBox[{"n", "-", "1"}], ")"}], 
   RowBox[{"(", 
    RowBox[{"n", "-", "2"}], ")"}], 
   RowBox[{"\[CenterEllipsis]", "(", 
    RowBox[{"n", "-", "m", "+", "1"}], ")"}]}], TraditionalForm]], "Equation",\
ExpressionUUID->"012eecf0-c5ca-49f7-82ba-3c3150cd2a92"],

Cell["Note that we can rewrite this using product notation as", "Text",ExpressionUUID->"e5b38c53-5610-4a00-929b-131dd9bab248"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    UnderoverscriptBox["\[Product]", 
     StyleBox[
      RowBox[{"i", " ", "=", " ", "0"}], "TI"], 
     RowBox[{"m", " ", "-", " ", "1"}],
     LimitsPositioning->False], "n"}], "-", "i", " "}], 
  TraditionalForm]], "Equation",ExpressionUUID->"ce93bd24-a999-4581-a07d-\
e5f9917dc71d"],

Cell[TextData[{
 "For small values of ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "a357e87e-532e-45c4-a99c-f0b7841b47d0"],
 ", it is easy to enter this product in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". For instance, the expression below computes the number of one-to-one \
functions from a set of 4 elements to a set of 20 elements."
}], "Text",ExpressionUUID->"5d8249a4-8cf9-4356-acb9-916b2dacc34b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"20", "*", "19", "*", "18", "*", "17"}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"e5069bea-4f53-499b-8397-fd1caf8bdf7f"],

Cell[BoxData["116280"], "Output",
 CellLabel->"Out[1]=",ExpressionUUID->"a80444be-cd17-4a77-ba78-873604f9ab91"]
}, Open  ]],

Cell[TextData[{
 "For larger values of ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "4aa49839-8b9b-4ddb-bc66-20357555d210"],
 ", it is more convenient to use the ",
 StyleBox[ButtonBox["Product",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Product"], "FunctionLink"],
 " function. The ",
 StyleBox[ButtonBox["Product",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Product"], "FunctionLink"],
 " function is used to multiply a sequence of values. Its syntax is identical \
to that of ",
 StyleBox[ButtonBox["Sum",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sum"], "FunctionLink"],
 ". The first argument is an expression in terms of a variable (e.g., ",
 StyleBox["i", "CodeVar"],
 ") that evaluates to the values that are to be multiplied together. The \
second argument can take a variety of forms. One usage has the form ",
 Cell[BoxData[
  RowBox[{"{", 
   StyleBox["i", "CodeVar"], ",", 
   StyleBox["a", "CodeVar"], ",", 
   StyleBox["b", "CodeVar"], "}"}]], "myCode",ExpressionUUID->
  "c0829a12-48c6-4062-b047-0e8668b6e4a1"],
 ", which indicates that the variable ",
 StyleBox["i", "CodeVar"],
 " is to range from a minimum of ",
 StyleBox["a", "CodeVar"],
 " to a maximum of ",
 StyleBox["b", "CodeVar"],
 ". If the minimum value is to be 1, then ",
 StyleBox["a", "CodeVar"],
 " can be omitted. "
}], "Text",ExpressionUUID->"0f375a30-1bbb-442b-9dfa-00ad7b608263"],

Cell["\<\
For example, we can recompute the number of one-to-one functions from a set \
of 20 elements to a set of 4 elements as follows.\
\>", "Text",ExpressionUUID->"7b884a43-5f80-4c1e-86c3-40c3980c920d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Product", "[", 
  RowBox[{
   RowBox[{"20", "-", "i"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "0", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[2]:=",ExpressionUUID->"7604f3f0-79ce-4483-a916-7709270d5ac7"],

Cell[BoxData["116280"], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"671b1d2e-c24b-40e6-acc5-e3ab5477e2e1"]
}, Open  ]],

Cell[TextData[{
 "The second argument indicates that the index variable will be assigned the \
integers 0, 1, 2, and 3. These are then substituted into the first argument, ",
 Cell[BoxData[
  RowBox[{"20", "-", "i"}]], "myCode",ExpressionUUID->
  "9a4cba11-abd8-4fb7-ab0b-c7cf80e13f19"],
 ", producing the values 20, 19, 18, and 17, which are multiplied together."
}], "Text",ExpressionUUID->"ff907bf1-c6ce-42b9-a50b-153f85193e3d"],

Cell["\<\
We can easily compute the number of one-to-one functions from a set of 12 \
elements to a set of 300 elements.\
\>", "Text",ExpressionUUID->"09deb72d-9dec-43e2-9dea-b3d5c48004a3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Product", "[", 
  RowBox[{
   RowBox[{"300", "-", "i"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "0", ",", "11"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"3bbefc93-91c1-4b50-82c5-0036b65d94fe"],

Cell[BoxData["425270752192695317567218560000"], "Output",
 CellLabel->"Out[3]=",ExpressionUUID->"d4b8776e-279a-431b-a409-f276e08bdfcc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computer Passwords", "Subsubsection",ExpressionUUID->"03745c62-4401-4648-800d-5ece97526c15"],

Cell["\<\
Example 16 from Section 6.1 describes a computer system in which each user \
has a password. Passwords must be between six and eight characters long, each \
character must be an uppercase letter or digit, and each password must \
contain at least one digit. \
\>", "Text",ExpressionUUID->"9c71b605-2736-4202-b737-6693deb02db3"],

Cell["\<\
The solution to the example describes how to calculate this. For each \
possible password length, 6, 7, or 8, the number of passwords is\
\>", "Text",ExpressionUUID->"0204f8d3-9ebd-46da-82de-afaa21f4838c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"P6", "=", 
  RowBox[{
   RowBox[{"36", "^", "6"}], "-", 
   RowBox[{"26", "^", "6"}]}]}]], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"b0d0fc4a-de3a-4a59-8c2d-344d3dad91b4"],

Cell[BoxData["1867866560"], "Output",
 CellLabel->"Out[4]=",ExpressionUUID->"d07408ba-acea-4267-9976-1aebea387965"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"P7", "=", 
  RowBox[{
   RowBox[{"36", "^", "7"}], "-", 
   RowBox[{"26", "^", "7"}]}]}]], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"3da77856-06ce-4c96-a9bf-904bb4e65860"],

Cell[BoxData["70332353920"], "Output",
 CellLabel->"Out[5]=",ExpressionUUID->"fa58df34-5859-4ee8-adce-fb8a37ba94a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"P8", "=", 
  RowBox[{
   RowBox[{"36", "^", "8"}], "-", 
   RowBox[{"26", "^", "8"}]}]}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"24e22ebc-4892-489c-baab-c83e250c4807"],

Cell[BoxData["2612282842880"], "Output",
 CellLabel->"Out[6]=",ExpressionUUID->"40c72ee2-3775-407d-8dd6-e62fef0b1005"]
}, Open  ]],

Cell["Thus, the total number of possible passwords is ", "Text",ExpressionUUID->"c9b81c4f-bc1c-411e-830e-cdd3319fb051"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"P", "=", 
  RowBox[{"P6", "+", "P7", "+", "P8"}]}]], "Input",
 CellLabel->"In[7]:=",ExpressionUUID->"2e0e3915-e131-4813-903b-4a970228b29a"],

Cell[BoxData["2684483063360"], "Output",
 CellLabel->"Out[7]=",ExpressionUUID->"aa4c0467-8b3c-4144-b1c1-22c423e2824a"]
}, Open  ]],

Cell[TextData[{
 "We can use the ",
 StyleBox[ButtonBox["Sum",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sum"], "FunctionLink"],
 " function to perform this calculation in one step."
}], "Text",ExpressionUUID->"d46b0b4a-e0fb-4a56-b104-e38fc65ce692"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"36", "^", "i"}], "-", 
    RowBox[{"26", "^", "i"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "6", ",", "8"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"791c9b45-d22d-49a2-8e92-732d6e189984"],

Cell[BoxData["2684483063360"], "Output",
 CellLabel->"Out[8]=",ExpressionUUID->"e058039b-535f-42c4-a3e5-0b92091d252e"]
}, Open  ]],

Cell["\<\
This makes it easy to compute the number of valid passwords for larger \
ranges. For instance, it is common to require passwords to be between 8 and \
64 characters. If we retain the rules that the password must be uppercase \
letters or numbers and include at least one number, then the total number of \
possible passwords is calculated with the expression below.\
\>", "Text",ExpressionUUID->"b6ae8849-bb90-40e8-a740-03d121d07378"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"36", "^", "i"}], "-", 
    RowBox[{"26", "^", "i"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "8", ",", "64"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[9]:=",ExpressionUUID->"e9111bde-a2d4-4391-b734-9cb81bbc0d63"],

Cell[BoxData[\
"41266202512020668285513002299997125271297176960575928894500997032195112920801\
16014779039630823409920"], "Output",
 CellLabel->"Out[9]=",ExpressionUUID->"d45a5417-9a26-48ec-a86a-20bbceb7ed06"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Working with Large Integers", "Subsection",
 CellTags->"Section1b",ExpressionUUID->"1b3165d9-8b3d-4911-a079-327009c2cf2e"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s computational engine is able to work with arbitrarily \
large integers, subject only to the limitations imposed by the computer\
\[CloseCurlyQuote]s memory and speed. "
}], "Text",ExpressionUUID->"461bc976-6ccd-4a0f-a65c-d580e3d583b2"],

Cell[CellGroupData[{

Cell["DNA", "Subsubsection",ExpressionUUID->"1bc9707a-2f9e-4b3f-8a68-730d9ef2c8cb"],

Cell[TextData[{
 "In Example 11, the text provides a brief description of DNA and concludes \
that there are at least ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["4", 
    SuperscriptBox["10", "8"]], TraditionalForm]],ExpressionUUID->
  "57e8a81b-adb1-44db-a662-cca80fa97298"],
 " different possible sequences of bases in the DNA for complex organisms."
}], "Text",ExpressionUUID->"54d89d6c-beee-4e40-87d8-1c0810a5866d"],

Cell["\<\
To compute this value, we just enter the expression and wait for it to \
complete the computation. \
\>", "Text",ExpressionUUID->"92e8a8d4-5a4c-4cc1-8ff8-b200487c02f1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DNAsequences", "=", 
  RowBox[{"4", "^", 
   RowBox[{"10", "^", "8"}]}]}]], "Input",
 CellLabel->"In[10]:=",ExpressionUUID->"75faba6d-9147-49a8-8c6f-fc0949688f5d"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{
         "13576763067144082109859764943426215110923900940995100861638392126957\
29141091760891148955293572538052744826297004740481577241009561512201133765", 
          TemplateBox[{"60205715"},
           "OutputSizeLimit`Skeleton"], 
          "5800970591381345362537777216940422106238175084912673084643237880141\
9793910906892709552426541101314285829832336140162991461016516356273787109376"}\
],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 10, 22492513455415507983, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 10, 22492513455415507983, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 10, 22492513455415507983, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[22492513455415507983 === $SessionID, 
   Out[10], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellLabel->"Out[10]=",ExpressionUUID->"3628e3bf-881f-49a8-9a30-55f07baebab2"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " reports that the result is very large. The output shows the first several \
digits and the last several digits, with the number in between indicating the \
number of digits that were omitted. This does not imply that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " has not computed the entire value, it only means that displaying the \
integer would require excessive space."
}], "Text",ExpressionUUID->"cff4d663-ce75-4324-af39-3cfa13e29181"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " has computed and stored the exact value and we can use this value in \
further computations. For example, we can find the last three digits of the \
number by computing the result modulo 1000."
}], "Text",ExpressionUUID->"b9374348-8ffd-4aa4-b62d-ded1495344f7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mod", "[", 
  RowBox[{"DNAsequences", ",", "1000"}], "]"}]], "Input",
 CellLabel->"In[11]:=",ExpressionUUID->"120bd4f6-e32b-490c-83a1-513e9f377b03"],

Cell[BoxData["376"], "Output",
 CellLabel->"Out[11]=",ExpressionUUID->"9442fb8d-1ae4-43a9-ad7b-5da2d1fe81cf"]
}, Open  ]],

Cell[TextData[{
 "We can determine the number of digits in the result by applying the ",
 StyleBox[ButtonBox["IntegerLength",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerLength"], "FunctionLink"],
 " function. This function is slightly more efficient than computing the base \
10 logarithm of the integer. "
}], "Text",ExpressionUUID->"2d72a7da-debd-4cef-8c3f-183464ba3e4e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerLength", "[", "DNAsequences", "]"}]], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"dde57cd6-ff77-44b9-8700-021003d18122"],

Cell[BoxData["60206000"], "Output",
 CellLabel->"Out[12]=",ExpressionUUID->"7976b2ec-18d0-4a1d-84ca-f3e6d5fa41fd"]
}, Open  ]],

Cell[TextData[{
 "Remember that the approximation ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["4", 
    SuperscriptBox["10", "8"]], TraditionalForm]],ExpressionUUID->
  "13a24881-8e16-40ef-90ba-17f930b3abbd"],
 " was a lower bound. In other words, the minimum number of possible \
sequences of bases in the DNA of a complex organism has over 60 million \
digits. "
}], "Text",ExpressionUUID->"fb624876-5e1d-4225-962e-a19cccb9a6aa"],

Cell["\<\
Suppose you wanted to print this number. Using a typical fixed-width 12-point \
font and 1-inch margins, you can fit about 64 digits in each line and 45 \
lines on a page. With these parameters, it would require \
\>", "Text",ExpressionUUID->"04007bf9-26d3-48fb-bcfb-7ca7398441e4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"IntegerLength", "[", "DNAsequences", "]"}], "/", 
   RowBox[{"(", 
    RowBox[{"64", "*", "45"}], ")"}]}], "]"}]], "Input",
 CellLabel->"In[13]:=",ExpressionUUID->"af113166-b6c0-4d12-b0f9-de59cd09eed3"],

Cell[BoxData["20904.86111111111`"], "Output",
 CellLabel->"Out[13]=",ExpressionUUID->"547443d8-ebf5-4c34-a584-1a3185491a7f"]
}, Open  ]],

Cell["pages to print the entire number.", "Text",ExpressionUUID->"67d04476-3ee7-479f-9f40-0a3fbe6d7e72"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Symbol Names in Mathematica", "Subsubsection",ExpressionUUID->"678d4f36-4816-4416-ac6d-5b18266652d8"],

Cell["\<\
Example 15 in Section 6.1 of the textbook calculated that in one version of \
the programming language BASIC, there were 957 different names for variables. \
\>", "Text",ExpressionUUID->"7ab2b82a-490f-4497-b66c-627b0640f382"],

Cell["\<\
The Wolfram Language is extremely flexible with regards to symbol names. For \
simplicity, we will say that a symbol consists of a letter possibly followed \
by additional letters or numbers. Uppercase letters are considered distinct \
from lowercase letters. Restricting ourselves to letters on a standard \
keyboard, there are 52 uppercase or lowercase letters that can be used as the \
first character. With the ten digits included, there are 62 possibilities for \
each character following the first. \
\>", "Text",ExpressionUUID->"214f57d2-007f-44a1-a535-7de6ee899540"],

Cell["\<\
There is no maximum length of symbol names in the Wolfram Language. For this \
example, however, we will consider only variable names up to a reasonable \
length of 15 characters. \
\>", "Text",ExpressionUUID->"76202be8-4e74-439e-8d21-5c2936a3cfc2"],

Cell[TextData[{
 "How many possible symbols are there? We need to compute the sum ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     StyleBox[
      RowBox[{"i", "=", "0"}], "TI"], "14",
     LimitsPositioning->False], 
    RowBox[{"52", "\[CenterDot]", 
     SuperscriptBox["62", "i"]}]}], TraditionalForm]],ExpressionUUID->
  "b5a154e2-594c-4ee6-8cc3-f8e642f5d4bd"],
 ". Apply the ",
 StyleBox[ButtonBox["Sum",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sum"], "FunctionLink"],
 " function to calculate this value."
}], "Text",ExpressionUUID->"543548ce-3cee-48a3-a3bf-d085f9fa6a00"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   RowBox[{"52", "*", 
    RowBox[{"62", "^", "i"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "0", ",", "14"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[14]:=",ExpressionUUID->"694a8c09-1c6b-4dcb-94e2-00cc76203122"],

Cell[BoxData["655464010775997815815360444"], "Output",
 CellLabel->"Out[14]=",ExpressionUUID->"2a9b90aa-9a86-4ce7-8cfd-1a624df91823"]
}, Open  ]],

Cell["\<\
We see that even limiting ourselves to a maximum of 15 characters, there are \
over 650 septillion distinct Wolfram Language symbols. (The number above is \
slightly inaccurate because it does not exclude the names of pre-defined \
functions and other protected symbols that you are not allowed to assign \
values to. Of course, the number of those is relatively insignificant.)\
\>", "Text",ExpressionUUID->"1f4d8485-2a4d-4a1e-99b9-d392386706ed"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Counting Operations in a Function", "Subsection",
 CellTags->"Section1c",ExpressionUUID->"f8c330c6-3a3a-446d-a137-c7a6e56a7906"],

Cell[TextData[{
 "Next, we consider an example of counting the number of operations performed \
by a function. Example 9 in Section 6.1 of the textbook demonstrates that the \
number of times that the innermost statement in a nested ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop is executed is the product of the number of iterations of each loop. \
"
}], "Text",ExpressionUUID->"6c0ab8ab-5ab3-4dc0-8d2d-b5bc77c06808"],

Cell[TextData[{
 "As an example of this, consider the ",
 StyleBox["makePostage", "Code"],
 " function from Section 5.1 of this manual. Recall that the purpose of this \
function was to determine the numbers of stamps of two given denominations \
that are required to make a given amount of postage. Here is the definition \
again."
}], "Text",ExpressionUUID->"195ba9ce-0239-4f07-83c1-4bb46c45f8f6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"makePostage", "[", 
   RowBox[{"stampA_Integer", ",", "stampB_Integer", ",", "postage_Integer"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Catch", "[", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"a", "=", "0"}], ",", 
       RowBox[{"a", "\[LessEqual]", 
        RowBox[{"Floor", "[", 
         RowBox[{"postage", "/", "stampA"}], "]"}]}], ",", 
       RowBox[{"a", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"b", "=", "0"}], ",", 
         RowBox[{"b", "\[LessEqual]", 
          RowBox[{"Floor", "[", 
           RowBox[{"postage", "/", "stampB"}], "]"}]}], ",", 
         RowBox[{"b", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"stampA", "*", "a"}], "+", 
             RowBox[{"stampB", "*", "b"}]}], "\[Equal]", "postage"}], ",", 
           RowBox[{"Throw", "[", 
            RowBox[{"{", 
             RowBox[{"a", ",", "b"}], "}"}], "]"}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->"In[15]:=",ExpressionUUID->"a4d33d32-7b57-4386-8ed5-8689780b21fb"],

Cell[TextData[{
 "We will count the number of multiplications and additions that this \
function requires in the worst case. The ",
 StyleBox[ButtonBox["Catch",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Catch"], "FunctionLink"],
 "/",
 StyleBox[ButtonBox["Throw",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Throw"], "FunctionLink"],
 " pair means that once the function has found a way to make the desired \
amount of postage, execution is immediately terminated. This means that \
knowing the number of iterations used for a particular input value is \
equivalent to knowing the output of the function. If there was a formula for \
that, we would not need the function. By considering the worst-case scenario, \
we can get an idea of the complexity of the algorithm without having to \
execute the function."
}], "Text",ExpressionUUID->"8bd607c7-143c-4406-9cc8-d358266eb637"],

Cell[TextData[{
 "The worst-case scenario, that is, the situation that requires the most \
number of iterations of the loop, occurs when the desired postage cannot be \
made. In this case, the outer loop variable will range from 0 to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[LeftFloor]", 
    FractionBox["postage", "stampA"], "\[RightFloor]"}], TraditionalForm]],
  ExpressionUUID->"6e65c625-2ff2-486f-8ed5-b5f0e5fb0661"],
 " and the inner loop will range from 0 to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[LeftFloor]", 
    FractionBox["postage", "stampB"], "\[RightFloor]"}], TraditionalForm]],
  ExpressionUUID->"c371a0ab-0d67-4470-8b78-d1a3a73ccd13"],
 ". Thus, the number of times the if statement is executed is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"\[LeftFloor]", 
       FractionBox["postage", "stampA"], "\[RightFloor]"}], "+", "1"}], ")"}], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"\[LeftFloor]", 
       FractionBox["postage", "stampB"], "\[RightFloor]"}], "+", "1"}], 
     ")"}]}], TraditionalForm]],ExpressionUUID->
  "d253b52a-3fd3-458e-9f47-62a1c9768fbf"],
 ". Therefore, in the worst case, the ",
 StyleBox["makePostage", "Code"],
 " function requires that number of additions and twice as many \
multiplications."
}], "Text",ExpressionUUID->"61f81d98-6512-4479-96c1-3030011e09b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Counting by Listing All Possibilities", "Subsection",
 CellTags->"Section1d",ExpressionUUID->"c5860cbb-b483-4954-9b2c-aa5ebe680b83"],

Cell[TextData[{
 "At the end of Section 6.1, the textbook discusses using tree diagrams to \
solve counting problems. Tree diagrams provide a visual way to organize \
information so you can be sure that you arrive at all possible results. We \
will not, in this section, implement trees, as that is the focus of Chapter \
11. The goal of a tree diagram is to list all the possibilities. In this \
subsection, we will consider two problems that can be solved by using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to list all the possibilities."
}], "Text",ExpressionUUID->"f85dae07-36a5-4c9f-a769-026a14ec32aa"],

Cell[CellGroupData[{

Cell["Subsets", "Subsubsection",ExpressionUUID->"e052f3e4-6022-4946-bfbc-550cbde241c0"],

Cell["\<\
For the first example, we consider the following question: how many subsets \
of the set of integers 1 through 10 have sums less than 15? (This is similar \
to Exercise 69 in Section 6.1.) \
\>", "Text",ExpressionUUID->"0c7900e7-546a-4bc9-afcb-8044cf99a28e"],

Cell["\<\
To solve this problem, we will consider all of the possible subsets and count \
those that satisfy the condition. \
\>", "Text",ExpressionUUID->"780c1dfa-9ec5-4223-bf59-773d87bb0f7e"],

Cell[TextData[{
 "In order to generate all of the possible subsets of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", "10"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"9df12713-6446-48ba-9920-9c63444b5ae8"],
 ", we use the ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " function, first introduced in Section 2.1 of this manual."
}], "Text",ExpressionUUID->"46e73231-9d86-49a9-b965-aeb5fb1b321b"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " function accepts a list (representing a set) as an argument and produces \
the list of all subsets. Here is an example of ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " applied to the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], TraditionalForm]],ExpressionUUID->
  "46d5c2dc-3fa7-470c-a7d3-de4494974448"],
 "."
}], "Text",ExpressionUUID->"e7ff786c-1160-4440-a460-4da9ef73cd8e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Subsets", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2"}], "}"}], "]"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"76d38d04-3700-4e5c-b636-0da8b9a49130"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[16]=",ExpressionUUID->"989305f2-b4c4-4cda-ba0b-88ce0c4a4e9e"]
}, Open  ]],

Cell[TextData[{
 "We will use ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " to solve the problem of counting the number of subsets of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", "10"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"362ba3ed-42ae-4963-9b33-c78691611e05"],
 " whose sum is less than 15. Instead of displaying all subsets, we will \
instead test their sum using the ",
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"], "FunctionLink"],
 " function."
}], "Text",ExpressionUUID->"2031bc12-1e5d-408c-a5a7-cc2f20aff23c"],

Cell[TextData[{
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"], "FunctionLink"],
 ", when applied to a list and a Boolean-valued function, returns the sublist \
consisting of all elements of the original list that cause the function to \
return ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 ". In our case, the first argument to ",
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"], "FunctionLink"],
 " will be the output from ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 ". The second argument will be the pure function that adds the elements in \
the subset and compares the result to the target sum of 15. "
}], "Text",ExpressionUUID->"e617453a-e783-4d7f-a3c2-88b7a24cb4d2"],

Cell[TextData[{
 "To add the elements of a list, we will ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " (",
 StyleBox["@@", "Code"],
 ") the addition operator ",
 StyleBox[ButtonBox["Plus",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plus"], "FunctionLink"],
 " (",
 StyleBox["+", "Code"],
 ") to the set, as illustrated below."
}], "Text",ExpressionUUID->"8737e102-e084-4b3f-a616-db152a90dca9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"Plus", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[17]:=",ExpressionUUID->"3fd5793d-8559-408a-9e88-20ecc91aa05e"],

Cell[BoxData["10"], "Output",
 CellLabel->"Out[17]=",ExpressionUUID->"7030b81f-211f-4eaa-b544-07f8f53b104b"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " function has the effect of replacing the head of the second argument with \
the first argument. In the example above, the expression ",
 Cell[BoxData[
  RowBox[{"{", "1", ",", "2", ",", "3", ",", "4", "}"}]], "myCode",
  ExpressionUUID->"6b9d37b3-fc47-426e-b05f-9158e3f77e91"],
 " has head ",
 StyleBox[ButtonBox["List",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/List"], "FunctionLink"],
 ". ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " replaces ",
 StyleBox[ButtonBox["List",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/List"], "FunctionLink"],
 " with ",
 StyleBox[ButtonBox["Plus",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plus"], "FunctionLink"],
 ", transforming the expression into ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"Plus", "["}], "1", ",", "2", ",", "3", ",", "4", "]"}]], "myCode",
  ExpressionUUID->"82341f16-d091-4936-b1c8-752dcb5ba074"],
 ", which is then evaluated and outputs the sum. ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " can be used any time you need to use the elements of a list as the \
arguments to a function."
}], "Text",ExpressionUUID->"47af10be-82ae-4b6f-8473-7daf713699c4"],

Cell["\<\
To compare the sum with 15, we just need to add the inequality to the \
expression.\
\>", "Text",ExpressionUUID->"360288d9-de2a-4e99-9923-045973698f94"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Apply", "[", 
   RowBox[{"Plus", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], "]"}], "<", 
  "15"}]], "Input",
 CellLabel->"In[18]:=",ExpressionUUID->"9d8f8d83-e8a5-4c32-ba39-03b5755d2803"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[18]=",ExpressionUUID->"7cd66a66-69fa-4d5e-a01f-76494db671b0"]
}, Open  ]],

Cell[TextData[{
 "To turn this example into a pure function, we replace the specific set with \
a ",
 StyleBox[ButtonBox["Slot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Slot"], "FunctionLink"],
 " (",
 StyleBox["#", "Code"],
 ") and put an ampersand at the end to indicate its status as a ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " (&)."
}], "Text",ExpressionUUID->"259e6398-01d8-4997-afd6-2ea90eb96412"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Apply", "[", 
    RowBox[{"Plus", ",", "#"}], "]"}], "<", "15"}], "&"}]], "myCode",
 Editable->False,ExpressionUUID->"812dca17-9027-4282-81bb-a5821c40cfd5"],

Cell[TextData[{
 "With this as the second argument to ",
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"], "FunctionLink"],
 ", and an application of ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " as the first argument, we obtain the list of all subsets with the \
specified sum. As an example, we list the subsets of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], TraditionalForm]],
  ExpressionUUID->"4f4dd741-f762-486a-9c58-c14f947cea3e"],
 " whose sum is less than 5."
}], "Text",ExpressionUUID->"049f35e1-b100-4145-b3ce-70d0bf79378f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"Subsets", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Apply", "[", 
      RowBox[{"Plus", ",", "#"}], "]"}], "<", "5"}], "&"}]}], "]"}]], "Input",\

 CellLabel->"In[19]:=",ExpressionUUID->"32ec3541-2a07-4945-991e-e0c17e373927"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[19]=",ExpressionUUID->"fb4d72fe-9663-43df-aff4-549fab4ead88"]
}, Open  ]],

Cell[TextData[{
 "The original question was to count the number of subsets of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "\[Ellipsis]", ",", "10"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"3aed5904-a352-42ab-8ac1-90d6b8bccf44"],
 " whose sum is at most 15. All that remains is to apply ",
 StyleBox[ButtonBox["Length",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Length"], "FunctionLink"],
 " in order to get a count of the number of subsets. We can generalize a bit \
and create a function that accepts a set of integers and a target value and \
counts the number of subsets of the given set whose elements sum to a value \
less than the target."
}], "Text",ExpressionUUID->"bc2cfc28-2b49-42de-a039-7b96481182b2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"subsetSumCount", "[", 
   RowBox[{
    RowBox[{"S", ":", 
     RowBox[{"{", "__Integer", "}"}]}], ",", "target_Integer"}], "]"}], ":=", 
  
  RowBox[{"Length", "[", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"Subsets", "[", "S", "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Apply", "[", 
        RowBox[{"Plus", ",", "#"}], "]"}], "<", "target"}], "&"}]}], "]"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[20]:=",ExpressionUUID->"f10e39ac-306f-4f6d-8673-75d7ab93978d"],

Cell[TextData[{
 "Applying this function to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", "10"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"aaefdfcb-2e78-47af-8682-6b993aed6493"],
 " and 15 will answer the original question."
}], "Text",ExpressionUUID->"09a0ba74-4a75-49d4-b8ff-f78544711237"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"subsetSumCount", "[", 
  RowBox[{
   RowBox[{"Range", "[", "10", "]"}], ",", "15"}], "]"}]], "Input",
 CellLabel->"In[21]:=",ExpressionUUID->"8153a22e-d86f-47d0-9c7d-558f2f6def02"],

Cell[BoxData["99"], "Output",
 CellLabel->"Out[21]=",ExpressionUUID->"89c8a5b4-cbd8-4429-9c60-15835d80baaa"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Bit Strings", "Subsubsection",ExpressionUUID->"78f33301-c293-4174-94fd-a0f29cd5b1e8"],

Cell["\<\
For the second example, we consider a problem similar to Example 22. How many \
bit strings of length ten do not have three consecutive ones? \
\>", "Text",ExpressionUUID->"509a4431-90bb-4f0e-aa3a-812f085fd4a0"],

Cell["\<\
We could use an approach similar to the previous example and produce all bit \
strings of length ten and then count the bit strings that do not contain \
three consecutive ones. However, the solution to Example 22 of Section 6.1, \
and especially Figure 4, suggests a more efficient solution. Instead of \
creating all the possible bit strings, we can build them in such a way as to \
only create those that satisfy the limitation on the number of consecutive \
1s. \
\>", "Text",ExpressionUUID->"d6a85fd3-04f9-46f4-8fab-2b592a8a1cb0"],

Cell["\<\
To implement this strategy, we use a recursive algorithm. The basis step will \
be the set consisting of all bit strings of length 2 (these cannot have three \
consecutive 1s). In the recursive step, the new version of the set will be \
constructed as follows. For each bit string in the previous set, we will \
append a 0. In addition, we will append a 1 to all of the bit strings whose \
last two bits are not both 1. \
\>", "Text",ExpressionUUID->"c0ceb626-e397-41c9-ae1f-2b708bcf633d"],

Cell["\<\
For this problem, we will model bit strings as lists of 0s and 1s. The \
algorithm described above will be implemented as two functions. The first \
function will be responsible for extending a particular bit string. That is, \
given a bit string (a list of 0s and 1s), it will return either the two bit \
strings obtained by appending a 0 and by appending a 1 or the single bit \
string formed by appending a 0 if appending a 1 would result in three \
consecutive 1s. The second function will apply the first function to build \
the entire set of admissible bit strings.\
\>", "Text",ExpressionUUID->"8c8cb965-fa6c-449a-b1a2-ffcc4789a280"],

Cell["\<\
First, we implement the function that extends a single bit string. The \
parameter to this function will be a bit string, that is, a list of 0s and \
1s. \
\>", "Text",ExpressionUUID->"9a2622ef-9380-4a4c-99cb-f67841a94bfe"],

Cell[TextData[{
 "The function consists of an ",
 StyleBox[ButtonBox["If",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/If"], "FunctionLink"],
 " statement that tests the last two elements of the original bit string to \
determine if they are both ones. We accomplish this test by extracting the \
last two entries with the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") operator. We use the fact that negative integers indicate the position \
from the end of the list: ",
 Cell["L[[-1]]", "myCode",ExpressionUUID->
  "0a1e6f23-d0a2-4f8b-8167-07e2b99b42bc"],
 " is the last element, ",
 Cell["L[[-2]]", "myCode",ExpressionUUID->
  "fd93114a-1c89-4c17-84c5-6b9131638a7b"],
 " is the next to last element, and so on. We use ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") with the list consisting of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "2"}], TraditionalForm]],ExpressionUUID->
  "07510aa4-e4ad-4bec-9908-7f0645588e93"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "1"}], TraditionalForm]],ExpressionUUID->
  "a0a5d0be-2fe3-4cbc-8ff7-f8418da1de7c"],
 ", that is, ",
 Cell[BoxData[
  RowBox[{"L", "[", 
   RowBox[{"[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "2"}], ",", 
      RowBox[{"-", "1"}]}], "}"}], "]"}], "]"}]], "myCode",ExpressionUUID->
  "1e1d1a04-d3a9-4ad5-af59-ff0421684929"],
 ", so that we obtain the sublist of the last two elements. We can then \
compare the result against the list ",
 Cell[BoxData[
  RowBox[{"{", "1", ",", "1", "}"}]], "myCode",ExpressionUUID->
  "f6c0fe50-fe56-4961-8728-4b2f40d25a75"],
 ". If those lists are equal, that is, the last two bits are both 1, then the \
function only returns the list obtained by adding 0. Otherwise, it will \
append both 0 and 1. Note that the result of the function is a list of one or \
two lists."
}], "Text",ExpressionUUID->"e0f2b734-e669-41d7-88df-25d7d506ede1"],

Cell["Here is the implementation.", "Text",ExpressionUUID->"7b2a8fd5-c0d0-4549-9f9f-4a02ab5f92c0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"addBit", "[", "L_List", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"L", "[", 
        RowBox[{"[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "2"}], ",", 
           RowBox[{"-", "1"}]}], "}"}], "]"}], "]"}], "\[Equal]", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"Append", "[", 
        RowBox[{"L", ",", "0"}], "]"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Append", "[", 
         RowBox[{"L", ",", "0"}], "]"}], ",", 
        RowBox[{"Append", "[", 
         RowBox[{"L", ",", "1"}], "]"}]}], "}"}]}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[22]:=",ExpressionUUID->"95aa3e3c-7d4b-465a-8a98-c7f171a94121"],

Cell[TextData[{
 "Let us test this function: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}], TraditionalForm]],
  ExpressionUUID->"facda479-507d-466a-aad5-544c974dd9ca"],
 " should produce only ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1", ",", "0"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"1048b530-de9d-492e-91f9-99095516e03e"],
 ", while applying the function to that result should produce ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"510f73e9-42f7-433f-9125-952684828074"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"604ae57c-4cf3-4b15-abee-be7f6aa78651"],
 "."
}], "Text",ExpressionUUID->"373730b7-c4e7-4bb5-aa81-f5201612e5be"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"addBit", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}], "]"}]], "Input",
 CellLabel->"In[23]:=",ExpressionUUID->"f582a351-80cb-490c-9589-bec97c63ab56"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"1", ",", "0", ",", "1", ",", "1", ",", "0"}], "}"}], 
  "}"}]], "Output",
 CellLabel->"Out[23]=",ExpressionUUID->"6f2e94f2-0e4c-4ffb-b2dd-677e95d72180"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"addBit", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "0", ",", "1", ",", "1", ",", "0"}], "}"}], 
  "]"}]], "Input",
 CellLabel->"In[24]:=",ExpressionUUID->"1706330b-1477-4bba-8279-a51e2b871963"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[24]=",ExpressionUUID->"b6dcfb35-5495-4fc8-a9d4-0e0958d3f975"]
}, Open  ]],

Cell[TextData[{
 "We are now prepared to write the main function. It will accept as input a \
positive integer ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "46f03cfb-9959-4b8c-bd71-0e09bd6eee96"],
 " representing the length of the bit strings to be output. In case this \
value is 2, the output is the four bit strings of length 2. For values of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "41a1cdd9-1291-4c98-b83e-7c074c074f08"],
 " larger than 2, it will recursively call itself on ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "90b03363-12f9-46ff-977f-b16fe0efdeb1"],
 " and store the result of the recursion as ",
 StyleBox["S", "Code"],
 ". It then initializes a new list ",
 StyleBox["T", "Code"],
 " to the empty set. Finally, it loops through the set ",
 StyleBox["S", "Code"],
 ", applying ",
 StyleBox["addBit", "Code"],
 " to each member and adding the result to ",
 StyleBox["T", "Code"],
 "."
}], "Text",ExpressionUUID->"782725a5-30f1-43f5-8c20-47558236b624"],

Cell["Here is the implementation.", "Text",ExpressionUUID->"66416560-f9a2-4afc-ad8d-2b27e9f04a53"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findBitStrings", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"S", ",", "s", ",", 
      RowBox[{"T", "=", 
       RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"n", "\[Equal]", "2"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{
       RowBox[{"S", "=", 
        RowBox[{"findBitStrings", "[", 
         RowBox[{"n", "-", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{"T", "=", 
          RowBox[{"Join", "[", 
           RowBox[{"T", ",", 
            RowBox[{"addBit", "[", "s", "]"}]}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"s", ",", "S"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]",
        "T"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[25]:=",ExpressionUUID->"18c4e788-3aed-4e91-9a4b-c84236913fd9"],

Cell[TextData[{
 "Applying the function to 10 and using ",
 StyleBox[ButtonBox["Length",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Length"], "FunctionLink"],
 " on the output will give us the number of bit strings of length 10 that do \
not include three successive ones."
}], "Text",ExpressionUUID->"dfcd5c7a-5f12-4ab2-b45d-0e984945fa80"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"findBitStrings", "[", "10", "]"}], "]"}]], "Input",
 CellLabel->"In[26]:=",ExpressionUUID->"d31da172-2b6b-44cb-bd0e-6e57d53641fb"],

Cell[BoxData["504"], "Output",
 CellLabel->"Out[26]=",ExpressionUUID->"15114d90-1afe-4bee-bed4-b8d7c64455ed"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.2 The Pigeonhole Principle", "Section",
 CellTags->"Section2",ExpressionUUID->"80447c3b-dd4b-4bf0-bb66-bc6cf3927f05"],

Cell[TextData[{
 "In this section, we will see how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can be used to help explore two problems related to the pigeonhole \
principle: finding consecutive entries in a sequence with a given sum and \
finding increasing and decreasing subsequences."
}], "Text",ExpressionUUID->"de341f3b-5e66-4559-9618-a11227309487"],

Cell[TextData[{
 "Before considering those two problems, however, recall the ",
 StyleBox[ButtonBox["Ceiling",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Ceiling"], "FunctionLink"],
 " function. This function calculates the ceiling of an expression. For \
example, the solution to Example 8 in the text indicates that the minimum \
number of area codes needed to assign different phone numbers to 25 million \
phones is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[LeftCeiling]", 
    FractionBox["25000000", "8000000"], "\[RightCeiling]"}], 
   TraditionalForm]],ExpressionUUID->"a5483925-5ea4-4957-92e9-c63b362fe52c"],
 ". In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", this is computed by the following expression."
}], "Text",ExpressionUUID->"5e3acc86-6911-41b9-9aea-a8d2a7820ba1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ceiling", "[", 
  RowBox[{"25000000", "/", "8000000"}], "]"}]], "Input",
 CellLabel->"In[27]:=",ExpressionUUID->"3fad30f9-8960-4a31-8703-9bdf16ffa8c9"],

Cell[BoxData["4"], "Output",
 CellLabel->"Out[27]=",ExpressionUUID->"5e874d1f-d8cb-455b-8b2b-1c074a00bf42"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Consecutive Entries with a Given Sum", "Subsection",
 CellTags->"Section2a",ExpressionUUID->"e8ae0ab9-085b-48df-beab-dee6d93834c9"],

Cell["\<\
Example 10 in Section 6.2 describes the solution to the following problem. In \
a month with 30 days, a baseball team plays at least one game per day but at \
most 45 games during the month. Then, there must be a period of consecutive \
days during which the team plays exactly 14 games.\
\>", "Text",ExpressionUUID->"1c44251e-782d-4ff1-a960-0b9710d2121b"],

Cell[TextData[{
 "The problem can be generalized. Given a sequence of ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "32654a8d-dc2d-482b-adb5-49a68bf4181c"],
 " positive integers whose sum is at most ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "ea354fd5-ccfb-4457-afc8-c1f6a5f343ee"],
 ", there must be a consecutive subsequence with sum ",
 Cell[BoxData[
  FormBox["T", TraditionalForm]],ExpressionUUID->
  "e402fd54-6665-4e71-aecb-8a496895714f"],
 " for any ",
 Cell[BoxData[
  FormBox[
   RowBox[{"T", "<", 
    RowBox[{"S", "-", "d"}]}], TraditionalForm]],ExpressionUUID->
  "e2f2c508-da2f-4501-8fb7-83ed855be3b8"],
 ". We leave it to the reader to prove this assertion."
}], "Text",ExpressionUUID->"1772cb10-de36-4d19-9537-d21f6476bc47"],

Cell[TextData[{
 "We will write a function that, given a sequence and target sum ",
 Cell[BoxData[
  FormBox["T", TraditionalForm]],ExpressionUUID->
  "ebec2276-a0d4-4224-8e61-4a2972c568a7"],
 ", will find the consecutive terms whose sum is ",
 Cell[BoxData[
  FormBox["T", TraditionalForm]],ExpressionUUID->
  "45b056d3-60b9-4c83-8a2a-97e0bd1db4a8"],
 ". Our function will be based on the approach described in the solution of \
Example 10."
}], "Text",ExpressionUUID->"f62b2332-c456-4442-9f9a-70f195c90b02"],

Cell[TextData[{
 "First, we will calculate the numbers ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "1"], ",", 
    SubscriptBox["a", "2"], ",", "\[Ellipsis]", ",", 
    SubscriptBox["a", "d"]}], TraditionalForm]],ExpressionUUID->
  "0da0ad30-940f-4fdc-a92b-b4bf0c030124"],
 " with each ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "i"], TraditionalForm]],ExpressionUUID->
  "b9776ccb-cd41-4cb4-988a-e7bc44a9150e"],
 " equal to the sum of the first ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "32366497-421f-4e1b-8055-5b94d0c085da"],
 " terms in the sequence. These values will be stored as a list, ",
 StyleBox["A", "Code"],
 ". We will calculate these sums using the observation that each one is equal \
to the previous sum plus the next entry in the sequence."
}], "Text",ExpressionUUID->"fa0b8cd1-f838-4c11-913f-0f102cae478b"],

Cell[TextData[{
 "Next, for each ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "8685b8e8-5e3a-45c6-bdbf-5f2255231967"],
 ", we will calculate ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "i"], "+", "T"}], TraditionalForm]],ExpressionUUID->
  "c4916bbe-1004-439b-b506-c61044920f2c"],
 " and use the ",
 StyleBox[ButtonBox["MemberQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MemberQ"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Position",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Position"], "FunctionLink"],
 " functions to check to see if this value is in ",
 StyleBox["A", "Code"],
 ". Both functions requires two arguments: the first is the list to be \
searched and the second is the element being sought. ",
 StyleBox[ButtonBox["MemberQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MemberQ"], "FunctionLink"],
 " returns ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 " or ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 " depending on whether the object is or is not a member of the list. The ",
 StyleBox[ButtonBox["Position",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Position"], "FunctionLink"],
 " function returns a list of position specifications. Consider the example \
below."
}], "Text",ExpressionUUID->"f709bd2e-3006-4d98-b932-98952bc1bb53"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\"", ",", 
     "\"\<b\>\"", ",", "\"\<a\>\"", ",", "\"\<a\>\"", ",", "\"\<c\>\""}], 
    "}"}], ",", "\"\<a\>\""}], "]"}]], "Input",
 CellLabel->"In[28]:=",ExpressionUUID->"855ab377-bdad-4507-90a8-b787f7278ce3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", "6", "}"}], ",", 
   RowBox[{"{", "7", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[28]=",ExpressionUUID->"6ab4dcd0-dfeb-4db3-985b-64124b21111b"]
}, Open  ]],

Cell["\<\
Note that the result is a list of three sublists. Each element of the main \
list indicates the position at which an \[OpenCurlyDoubleQuote]a\
\[CloseCurlyDoubleQuote] occurs, namely positions 1, 6, and 7. The reason \
that the location specifications are enclosed in their own lists is for the \
case when the desired element is found within sublists of the original list. \
For example, in the example below, the character \[OpenCurlyDoubleQuote]c\
\[CloseCurlyDoubleQuote] is found both in the third element of the sublist at \
position 2 as well as in position 4.\
\>", "Text",ExpressionUUID->"c38ee694-7878-4eea-8a1b-46144dc060b0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<a\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<b\>\"", ",", "\"\<a\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\""}], 
      "}"}], ",", "\"\<d\>\"", ",", "\"\<c\>\"", ",", "\"\<a\>\""}], "}"}], 
   ",", "\"\<c\>\""}], "]"}]], "Input",
 CellLabel->"In[29]:=",ExpressionUUID->"1625a925-1e72-4d3d-b7e1-f09645ca4af0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", "4", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[29]=",ExpressionUUID->"50529c2a-7d27-47ed-9c1a-e49db5630b8a"]
}, Open  ]],

Cell[TextData[{
 "Our list ",
 StyleBox["A", "Code"],
 " will be flat, that is, with no sublists. We are only interested in finding \
the first match, since that will tell us the location of a sublist with the \
desired sum. To find the position of the first match, we use the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") specification ",
 StyleBox["[[1,1]]", "Code"],
 "."
}], "Text",ExpressionUUID->"86040373-4bcc-4a18-b0bd-659632f412c2"],

Cell[TextData[{
 "Finally, if ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "i"], "+", "T"}], TraditionalForm]],ExpressionUUID->
  "2552bc9b-b2d4-411c-891d-5af27d002399"],
 " is found in the list ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "1"], ",", 
    SubscriptBox["a", "2"], ",", "\[Ellipsis]", ",", 
    SubscriptBox["a", "d"]}], TraditionalForm]],ExpressionUUID->
  "28c3fcdf-83e3-4135-a9c3-dc504beb8f34"],
 ", say at position ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "248655b2-ae86-4046-afbd-4596a42c38a1"],
 ", then we know that ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "6aa76f1e-cef7-4cab-b1ea-19a02982be82"],
 " through ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "7ca3d567-3ac2-45ea-96ea-4f0d1175d580"],
 " are the positions of the consecutive subsequence with the desired sum. The \
function will output the starting and ending positions as well as the \
subsequence."
}], "Text",ExpressionUUID->"53edfdde-63c1-4762-8da7-2a053cc918b4"],

Cell[TextData[{
 "Here is the function. Note that the first line uses ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " to update the value of ",
 StyleBox["a", "Code"],
 ", which serves as the sum of the list elements, at the same time it \
populates the list ",
 StyleBox["A", "Code"],
 " with those values."
}], "Text",ExpressionUUID->"8f195946-1d66-4509-aaea-5de86bce8fe2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findSubSum", "[", 
   RowBox[{
    RowBox[{"L", ":", 
     RowBox[{"{", "__Integer", "}"}]}], ",", "T_Integer"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"A", ",", "i", ",", "j", ",", 
      RowBox[{"a", "=", "0"}], ",", "p"}], "}"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{
     RowBox[{"A", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"a", "=", 
         RowBox[{"a", "+", 
          RowBox[{"L", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Length", "[", "L", "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Catch", "[", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "\[LessEqual]", 
         RowBox[{"Length", "[", "L", "]"}]}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"A", ",", 
            RowBox[{
             RowBox[{"A", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "+", "T"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"j", "=", 
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{"A", ",", 
               RowBox[{
                RowBox[{"A", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "+", "T"}]}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Throw", "[", 
            RowBox[{"{", 
             RowBox[{"i", ",", "j", ",", 
              RowBox[{"L", "[", 
               RowBox[{"[", 
                RowBox[{"i", ";;", "j"}], "]"}], "]"}]}], "}"}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[30]:=",ExpressionUUID->"c867ce85-15df-413f-b20f-fca38b34f1b8"],

Cell["\<\
We apply the function to the following sequence, representing the number of \
games a baseball team played on each day of a 30-day month: \
\>", "Text",ExpressionUUID->"384ab4bf-6200-4970-857c-46649eaf5873"],

Cell[BoxData[
 FormBox[
  RowBox[{
  "2", ",", "1", ",", "3", ",", "1", ",", "1", ",", "3", ",", "1", ",", "1", 
   ",", "1", ",", "1", ",", "3", ",", "1", ",", "3", ",", "1", ",", "1", ",", 
   "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "3", 
   ",", "1", ",", "1", ",", "3", ",", "1", ",", "3", ",", "1", ",", "1"}], 
  TraditionalForm]], "Equation",ExpressionUUID->"a0cf5d5d-f16f-4074-a3fb-\
c1ccc6c2ede8"],

Cell["\<\
As in Example 10, we find the consecutive days during which the team played \
14 games. \
\>", "Text",ExpressionUUID->"41778477-5139-4fbe-8af3-b7bab925462b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findSubSum", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "2", ",", "1", ",", "3", ",", "1", ",", "1", ",", "3", ",", "1", ",", "1",
      ",", "1", ",", "1", ",", "3", ",", "1", ",", "3", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
     ",", "3", ",", "1", ",", "1", ",", "3", ",", "1", ",", "3", ",", "1", 
     ",", "1"}], "}"}], ",", "14"}], "]"}]], "Input",
 CellLabel->"In[31]:=",ExpressionUUID->"9d549de5-7119-48c7-9afe-ca495765a028"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "13", ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "3", ",", "1", ",", "1", ",", "1", ",", "1", ",", "3", ",", "1",
      ",", "3"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[31]=",ExpressionUUID->"fc6db39f-5e0b-4d5d-9f65-c34dc6cf7b49"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Strictly Increasing Subsequences", "Subsection",
 CellTags->"Section2b",ExpressionUUID->"f598a935-470c-4ed1-956e-8be4c0bedade"],

Cell[TextData[{
 "Theorem 3 of Section 6.2 asserts that every sequence of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["n", "2"], "+", "1"}], TraditionalForm]],ExpressionUUID->
  "f73e4522-67f0-41b6-a16d-d66826376c0d"],
 " distinct real numbers contains a subsequence of length ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "62b5cc3e-a9cc-4e99-a472-79910ee5d8c2"],
 " that is either strictly increasing or strictly decreasing. We will develop \
a function that will find a longest strictly increasing subsequence."
}], "Text",ExpressionUUID->"fe866473-f1bf-42d4-95c2-75ef44a498b0"],

Cell[CellGroupData[{

Cell["The Patience Algorithm", "Subsubsection",ExpressionUUID->"9bd13b98-9196-4d94-9c7b-e2aae87e0f6b"],

Cell["\<\
To find the longest increasing subsequence, we will use a greedy strategy \
based on \[OpenCurlyDoubleQuote]Patience sorting\[CloseCurlyDoubleQuote] (the \
name refers to the solitaire card game also called Klondike). The idea is as \
follows. Imagine that the numbers in the sequence are written on cards. The \
cards are placed in a \[OpenCurlyDoubleQuote]deck\[CloseCurlyDoubleQuote] in \
the order they appear in the sequence and with the first element of the \
sequence on top. Now, play a \[OpenCurlyDoubleQuote]game\
\[CloseCurlyDoubleQuote] using the deck of cards based on the following rules.\
\>", "Text",ExpressionUUID->"aee5331b-f2fe-4758-a611-306ad1f182e3"],

Cell["\<\
The cards are \[OpenCurlyDoubleQuote]dealt\[CloseCurlyDoubleQuote] one at a \
time onto a series of piles on the table. Initially, there are no piles. The \
top card (the first element in the sequence) is the first card dealt and \
forms the first pile. To play the next card, check to see if it is less than \
or greater than the first card. If the second card (the second element of the \
sequence) is less than the first, then it is placed on the first pile, on top \
of the first card. If the second card is greater than the first, then it \
starts a new pile to the right of the first.\
\>", "Text",ExpressionUUID->"55e468c4-e584-4346-aa31-51fa407791c7"],

Cell["\<\
The \[OpenCurlyDoubleQuote]game\[CloseCurlyDoubleQuote] continues in this \
way. At each step, the table has on it a series of piles. To play the next \
card, you compare the value on the card to the card on top of the first pile. \
If the card to be played has a value smaller than the number showing on the \
first pile, then the new card is placed on top of the first pile. Otherwise, \
you look at the second pile. If the card being played is smaller than the \
value on the second pile, it is placed on top of the second pile. Continue in \
this fashion until either the card has been played or, if it is larger than \
the top card on every existing pile, it begins a new pile to the right of all \
the others.\
\>", "Text",ExpressionUUID->"9ded3fff-07e1-4580-aaba-429b70a6aaee"],

Cell["\<\
An illustration is in order. Consider the sequence 12, 18, 7, 11, 16, 3, 20, \
17. \
\>", "Text",ExpressionUUID->"b737e3f3-a20b-4551-85aa-49cdb7572c77"],

Cell[TextData[Cell[BoxData[
 RowBox[{GridBox[{
    {Cell[
     "Step 1: Play the first entry, 12, as the first pile",ExpressionUUID->
      "0992f982-42b2-408f-a381-afefb604c82b"], 
     TagBox[GridBox[{
        {
         ItemBox["12",
          Background->RGBColor[0.8, 0.6, 0.8],
          StripOnInput->False], "", "", ""}
       },
       AutoDelete->False,
       FrameStyle->GrayLevel[1],
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       
       GridBoxSpacings->{"Columns" -> {{3}}, "Rows" -> {{1}}}],
      "Grid"]},
    {Cell[TextData[{
      "Step 2: Play the second entry, 18. Since ",
      Cell[BoxData[
       FormBox[
        RowBox[{"18", ">", "12"}], TraditionalForm]],ExpressionUUID->
       "467550a6-6103-4f82-8aae-cb15b1bd1e68"],
      ", 18 starts a new pile."
     }],ExpressionUUID->"ec1677ae-a9d1-4478-9c34-10d617767208"], 
     TagBox[GridBox[{
        {"12", 
         ItemBox["18",
          Background->RGBColor[0.8, 0.6, 0.8],
          StripOnInput->False], "", ""}
       },
       AutoDelete->False,
       FrameStyle->GrayLevel[1],
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       
       GridBoxSpacings->{"Columns" -> {{3}}, "Rows" -> {{1}}}],
      "Grid"]},
    {Cell[TextData[{
      "Step 3: Play 7. Checking the first pile, note that ",
      Cell[BoxData[
       FormBox[
        RowBox[{"7", "<", "12"}], TraditionalForm]],ExpressionUUID->
       "d02fb033-7a3f-43a3-a37e-7ae0155b4ffa"],
      ", so 7 is played on the first pile."
     }],ExpressionUUID->"0317cc88-712c-4122-a210-5b3c9bb7f098"], 
     TagBox[GridBox[{
        {
         ItemBox["7",
          Background->RGBColor[0.8, 0.6, 0.8],
          StripOnInput->False], "", "", ""},
        {"12", "18", "", ""}
       },
       AutoDelete->False,
       FrameStyle->GrayLevel[1],
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       
       GridBoxSpacings->{"Columns" -> {{3}}, "Rows" -> {{1}}}],
      "Grid"]},
    {Cell[TextData[{
      "Step 4: Play 11. Checking the first pile, ",
      Cell[BoxData[
       FormBox[
        RowBox[{"11", ">", "7"}], TraditionalForm]],ExpressionUUID->
       "b7261074-20eb-4695-b4dc-6d3ca5cc07a7"],
      ", so do not play 11 on first pile. Checking the second pile, ",
      Cell[BoxData[
       FormBox[
        RowBox[{"11", "<", "18"}], TraditionalForm]],ExpressionUUID->
       "49ec1c7f-1206-4fb2-a515-6569bc0e1c5e"],
      ", so play 11 on the second pile."
     }],ExpressionUUID->"7452d1b7-3f48-49ed-b77c-0caba76f36df"], 
     TagBox[GridBox[{
        {"7", 
         ItemBox["11",
          Background->RGBColor[0.8, 0.6, 0.8],
          StripOnInput->False], "", ""},
        {"12", "18", "", ""}
       },
       AutoDelete->False,
       FrameStyle->GrayLevel[1],
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       
       GridBoxSpacings->{"Columns" -> {{3}}, "Rows" -> {{1}}}],
      "Grid"]},
    {Cell[TextData[{
      "Step 5: Play 16. Checking the first pile, ",
      Cell[BoxData[
       FormBox[
        RowBox[{"16", ">", "7"}], TraditionalForm]],ExpressionUUID->
       "89c2aa1d-02da-49d5-8425-01a1c85e02a1"],
      " so do not play 16 on the first pile. Checking the second pile, ",
      Cell[BoxData[
       FormBox[
        RowBox[{"16", ">", "11"}], TraditionalForm]],ExpressionUUID->
       "455c148b-6ff8-4eb9-b4e7-03e1e41d83a8"],
      ", so 16 begins a third pile."
     }],ExpressionUUID->"996bff5c-9b37-4788-81db-a75a1c2860dd"], 
     TagBox[GridBox[{
        {"7", "11", "", ""},
        {"12", "18", 
         ItemBox["16",
          Background->RGBColor[0.8, 0.6, 0.8],
          StripOnInput->False], ""}
       },
       AutoDelete->False,
       FrameStyle->GrayLevel[1],
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       
       GridBoxSpacings->{"Columns" -> {{3}}, "Rows" -> {{1}}}],
      "Grid"]},
    {Cell[TextData[{
      "Step 6: Play 3. Checking the first pile, ",
      Cell[BoxData[
       FormBox[
        RowBox[{"3", "<", "7"}], TraditionalForm]],ExpressionUUID->
       "44f7e035-7b54-4f28-8ff8-ed3e851e010b"],
      ", so 3 is played on the first pile."
     }],ExpressionUUID->"330d1e90-1b4f-48fe-b9a4-75cd101aae93"], 
     TagBox[GridBox[{
        {
         ItemBox["3",
          Background->RGBColor[0.8, 0.6, 0.8],
          StripOnInput->False], "", "", ""},
        {"7", "11", "", ""},
        {"12", "18", "16", ""}
       },
       AutoDelete->False,
       FrameStyle->GrayLevel[1],
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       
       GridBoxSpacings->{"Columns" -> {{3}}, "Rows" -> {{1}}}],
      "Grid"]},
    {Cell[TextData[{
      "Step 7: Play 20. Checking the first pile, ",
      Cell[BoxData[
       FormBox[
        RowBox[{"20", ">", "3"}], TraditionalForm]],ExpressionUUID->
       "9f6a47a0-61a0-45f2-80fc-f7a7d50d5f81"],
      ". Checking the second pile, ",
      Cell[BoxData[
       FormBox[
        RowBox[{"20", ">", "11"}], TraditionalForm]],ExpressionUUID->
       "36e2ac23-9ba8-4527-8521-9f542b125113"],
      ". Checking the third pile, ",
      Cell[BoxData[
       FormBox[
        RowBox[{"20", ">", "16"}], TraditionalForm]],ExpressionUUID->
       "34c46ee0-d348-415d-8ea1-e5f98176c0cc"],
      ", so 20 starts a new pile."
     }],ExpressionUUID->"7834cecd-6e3d-4f87-9d59-dac1f0be924b"], 
     TagBox[GridBox[{
        {"3", "", "", ""},
        {"7", "11", "", ""},
        {"12", "18", "16", 
         ItemBox["20",
          Background->RGBColor[0.8, 0.6, 0.8],
          StripOnInput->False]}
       },
       AutoDelete->False,
       FrameStyle->GrayLevel[1],
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       
       GridBoxSpacings->{"Columns" -> {{3}}, "Rows" -> {{1}}}],
      "Grid"]},
    {Cell[TextData[{
      "Step 8: Play 17. Checking the first pile, ",
      Cell[BoxData[
       FormBox[
        RowBox[{"17", ">", "3"}], TraditionalForm]],ExpressionUUID->
       "7d3101c4-094a-4e97-8638-635f5ed4e79a"],
      ". Checking the second, ",
      Cell[BoxData[
       FormBox[
        RowBox[{"17", ">", "11"}], TraditionalForm]],ExpressionUUID->
       "be06ec7c-09a2-44f0-a11c-3f1f40163cd3"],
      ". Checking the third, ",
      Cell[BoxData[
       FormBox[
        RowBox[{"17", ">", "16"}], TraditionalForm]],ExpressionUUID->
       "90df758b-71c3-4bd6-840f-0fc85ff45a5b"],
      ", but ",
      Cell[BoxData[
       FormBox[
        RowBox[{"17", "<", "20"}], TraditionalForm]],ExpressionUUID->
       "80e15d09-66cb-48cb-9d3b-ff1165a6ccf5"],
      ", so 17 is played on the fourth pile."
     }],ExpressionUUID->"595c814b-9a81-41b2-9991-5516f362ea25"], 
     TagBox[GridBox[{
        {"3", "", "", ""},
        {"7", "11", "", 
         ItemBox["17",
          Background->RGBColor[0.8, 0.6, 0.8],
          StripOnInput->False]},
        {"12", "18", "16", "20"}
       },
       AutoDelete->False,
       FrameStyle->GrayLevel[1],
       GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       
       GridBoxSpacings->{"Columns" -> {{3}}, "Rows" -> {{1}}}],
      "Grid"]}
   },
   BaseStyle->{FontFamily -> "Times"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxDividers->{
    "Columns" -> {{True}}, "ColumnsIndexed" -> {}, "Rows" -> {{True}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
  "\[NoBreak]"}]],ExpressionUUID->"10bf1035-2421-4ce3-9b79-eaa00486e270"]], \
"Grid",ExpressionUUID->"3abb7625-5ebb-45c0-9c78-b066e55b2b4e"],

Cell["\<\
Once the \[OpenCurlyDoubleQuote]game\[CloseCurlyDoubleQuote] is complete, the \
length of the longest strictly increasing subsequence is equal to the number \
of piles.\
\>", "Text",ExpressionUUID->"5c1b18db-cda3-4216-b77f-6e6d9dee314c"],

Cell["\<\
Once all of the cards have been played, we obtain a strictly increasing \
subsequence by backtracking. The top card on the final pile is 17, so 17 will \
be the last entry in the subsequence. When 17 was placed on the pile, the top \
card on the pile before it was 16 (step 8), so 16 precedes 17 in the \
subsequence. When 16 was placed on the third pile, the top card on the second \
pile was 11 (step 5), so 11 precedes 16. And when 11 was placed on the second \
pile, the top card on the first pile was 7, so 7 is first in the subsequence. \
Thus, 7, 11, 16, 17 is a strictly increasing subsequence of maximal length.\
\>", "Text",ExpressionUUID->"7b841773-3dd6-4adb-9762-ef007a2ccb8b"],

Cell[TextData[{
 "You are encouraged to \[OpenCurlyDoubleQuote]play\[CloseCurlyDoubleQuote] \
through this approach a few times with your own sequences to ensure that you \
understand the process before continuing on to the implementation of the \
procedure below. You can apply the ",
 StyleBox["findIncreasing", "Code"],
 " function defined below to make sure that you are arriving at the same \
result. Be sure to keep track of what was on top of the previous pile when \
each number is played, as you need that information in the backtracking stage."
}], "Text",ExpressionUUID->"a4aff87b-d99a-4258-80fe-a8df45118d18"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implementing the Algorithm", "Subsubsection",ExpressionUUID->"dea45df6-ca27-493d-90ba-2bad0ec34a9a"],

Cell["\<\
We will now implement the Patience algorithm. The given sequence will be \
input to the function as a list. Within the function, we need to track three \
kinds of information. \
\>", "Text",ExpressionUUID->"bc425961-074e-4c75-b195-bb84ee0df249"],

Cell[TextData[{
 "First, we need to know which \[OpenCurlyDoubleQuote]step\
\[CloseCurlyDoubleQuote] we are in, that is, which card is being played. This \
will be represented by the variable to a ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop ranging from 1 to the size of the list."
}], "Text",ExpressionUUID->"210b6112-88f1-4949-956e-bfde84e9b3da"],

Cell[TextData[{
 "Second, we need to know what cards are on the piles. Specifically, we need \
to know the top card of each pile. This will be represented as a list, ",
 StyleBox["piles", "Code"],
 ". When a card is placed on top of an existing pile, we can replace the \
current value in that position with the syntax ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"piles", "[", 
    RowBox[{"[", "i", "]"}], "]"}], "=", "x"}]], "myCode",ExpressionUUID->
  "8e60c404-e962-45c3-b2b9-5598dc6a2277"],
 ". When a new pile is added to the list, we extend the list via ",
 StyleBox[ButtonBox["AppendTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AppendTo"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"52307a74-99bf-4d67-9dd8-193543c8b194"],

Cell[TextData[{
 "Third, in order to backtrack and recover the longest increasing sequence, \
we need to store, for each member of the sequence, the value that was on the \
top of the pile to the left of the entry\[CloseCurlyQuote]s pile. For this, \
we will use a indexed variable, ",
 StyleBox["pointers", "Code"],
 ", whose indices will be the members of the sequence and whose values will \
be set to the previous pile\[CloseCurlyQuote]s top card. (We use the name ",
 StyleBox["pointers", "Code"],
 " for this variable because of the similarity to the \
\[OpenCurlyDoubleQuote]linked list\[CloseCurlyDoubleQuote] structure used in \
many programming languages.) For those numbers played in the first pile, the \
value in the variable will be set to ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 ". Note that since pointers will be an indexed variable, rather than a list, \
we use a single pair of brackets around its indices, not the double brackets \
used with ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") and lists."
}], "Text",ExpressionUUID->"e5f2fe80-65a9-40ef-95a4-594bbbc40866"],

Cell[TextData[{
 "The algorithm will consist of two stages. The first stage will be the game \
stage. We begin with a ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop with loop variable ",
 StyleBox["step", "Code"],
 " running from 1 to the length of the input sequence ",
 StyleBox["S", "Code"],
 ". Within this main loop, two tasks are performed."
}], "Text",ExpressionUUID->"fb055461-407c-45f6-b457-ee54f4ab8c43"],

Cell[TextData[{
 "The first thing that happens within the ",
 StyleBox["step", "Code"],
 " loop is determining on which pile to play the current card. Note that the \
value of the current card is accessed by ",
 StyleBox["S[[step]]", "Code"],
 ". To determine the proper location for the current card, we do the \
following."
}], "Text",ExpressionUUID->"2eb73f01-b974-4bf9-a32c-4f3066e2821b"],

Cell[CellGroupData[{

Cell[TextData[{
 "Open a ",
 StyleBox[ButtonBox["Catch",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Catch"], "FunctionLink"],
 " block. A variable ",
 StyleBox["whichpile", "Code",
  IgnoreSpellCheck->True],
 " is set to the output of this ",
 StyleBox[ButtonBox["Catch",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Catch"], "FunctionLink"],
 "."
}], "Item1Numbered",ExpressionUUID->"4cf3f0c0-1915-4f5a-84ec-77f9a816f55c"],

Cell[TextData[{
 "Use a ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop from 1 to the current number of piles. Within the loop, compare the \
current card to the top of each pile. If the current card is smaller than the \
value in a pile, ",
 StyleBox[ButtonBox["Throw",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Throw"], "FunctionLink"],
 " that pile index, causing the loop to be short-circuited and assigning that \
value to ",
 StyleBox["whichpile", "Code",
  IgnoreSpellCheck->True],
 ". If the ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop terminates, ",
 StyleBox[ButtonBox["Throw",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Throw"], "FunctionLink"],
 " ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 " to indicate that the card cannot be placed on any existing pile."
}], "Item1Numbered",ExpressionUUID->"38fef3e7-6e28-481f-8aca-4d80f1916386"],

Cell[TextData[{
 "Next, check the value of ",
 StyleBox["whichpile", "Code",
  IgnoreSpellCheck->True],
 ". If it is ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 ", that means a pile was not found for the current card, and thus the ",
 StyleBox["piles", "Code"],
 " list must be extended to create a new pile for this card. Otherwise, the \
value of ",
 StyleBox["whichpile", "Code",
  IgnoreSpellCheck->True],
 " is the appropriate pile and we update the corresponding entry in ",
 StyleBox["piles", "Code"],
 " to indicate that the latest card is placed on top in that position."
}], "Item1Numbered",ExpressionUUID->"644e1910-e7f6-431c-acba-7fbce3db3f11"]
}, Open  ]],

Cell[TextData[{
 "The second task within the ",
 StyleBox["step", "Code"],
 " loop is to update the ",
 StyleBox["pointers", "Code"],
 " variable. This also depends on the value of ",
 StyleBox["whichpile", "Code",
  IgnoreSpellCheck->True],
 "."
}], "Text",ExpressionUUID->"929e727e-e39a-4701-baf6-65cc8878e890"],

Cell[CellGroupData[{

Cell[TextData[{
 "If ",
 StyleBox["whichpile", "Code",
  IgnoreSpellCheck->True],
 " is 1 or if ",
 StyleBox["piles", "Code"],
 " only contains one entry, then the latest card was played on the first pile \
and the associated value should be ",
 StyleBox["Null", "Code"],
 "."
}], "Item1",ExpressionUUID->"0b8af091-afdd-40aa-a90c-bf013702d971"],

Cell[TextData[{
 "If ",
 StyleBox["whichpile", "Code",
  IgnoreSpellCheck->True],
 " is ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 ", then the value associated with the latest card is ",
 StyleBox["piles[[-2]]", "Code"],
 ", the top card on what had been the last pile but is now the next to last \
pile. (Note that the previous condition, that ",
 StyleBox["whichpile", "Code",
  IgnoreSpellCheck->True],
 " is 1 or ",
 StyleBox["piles", "Code"],
 " has only one entry will ensure that this second condition is only tested \
if ",
 StyleBox["piles", "Code"],
 " has at least two entries and thus ",
 StyleBox["piles[[-2]]", "Code"],
 " is a valid selection.)"
}], "Item1",ExpressionUUID->"0f00b2cf-a6d2-4d3e-b068-8298d2505388"],

Cell[TextData[{
 "Otherwise, the value is ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"piles", "[", "["}], "whichpile", "-", "1", 
   RowBox[{"]", "]"}]}]], "myCode",ExpressionUUID->
  "a3f4bc93-db43-4536-b85f-a4090fe97b29"],
 "."
}], "Item1",ExpressionUUID->"0dc8856a-3c55-48fb-be18-bd91f0f3abdb"]
}, Open  ]],

Cell[TextData[{
 "That concludes the game stage. The second stage is the backtracking stage, \
which is much simpler. First, access the top card of the last pile with ",
 StyleBox["piles[[-1]]", "Code"],
 ", and initialize the maximal increasing list, ",
 StyleBox["iList", "Code"],
 ", to the list consisting of this value."
}], "Text",ExpressionUUID->"7c3477ae-6ec4-4ab2-be3c-aa54e52199cd"],

Cell[TextData[{
 "Then, extend ",
 StyleBox["iList", "Code"],
 " on the left with the entry in the ",
 StyleBox["pointers", "Code"],
 " variable associated to that value. Since we are building the list from \
right to left, ",
 StyleBox["iList[[1]]", "Code"],
 " always contains the most recently added number. Thus, ",
 StyleBox["pointers[iList[[1]]]", "Code"],
 " is the new value, which is added via ",
 StyleBox[ButtonBox["PrependTo",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PrependTo"], "FunctionLink"],
 ". Since the cards played in the first pile were associated with ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 ", we can use a ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop with condition ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"pointers", "[", 
    RowBox[{"iList", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "=!=", "Null"}]], "myCode",
  ExpressionUUID->"5ce2773b-5ac1-4ba4-bf33-4771132064b9"],
 " to fill the ",
 StyleBox["iList", "Code"],
 ". At the conclusion of the loop, the function returns ",
 StyleBox["iList", "Code"],
 "."
}], "Text",ExpressionUUID->"b81227b6-09cd-4f32-9a1b-e629ad5e033d"],

Cell[TextData[{
 "Note throughout that whenever making a comparison that may be a comparison \
between an integer and the symbol ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 ", you must use ",
 StyleBox[ButtonBox["SameQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SameQ"], "FunctionLink"],
 " (",
 StyleBox["=\[VeryThinSpace]=\[VeryThinSpace]=", "Code"],
 ") or ",
 StyleBox[ButtonBox["UnsameQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/UnsameQ"], "FunctionLink"],
 " (",
 StyleBox["=!=", "Code"],
 "), not ",
 StyleBox[ButtonBox["Equal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equal"], "FunctionLink"],
 " (",
 StyleBox["=\[VeryThinSpace]=", "Code"],
 ") and ",
 StyleBox[ButtonBox["Unequal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Unequal"], "FunctionLink"],
 " (",
 StyleBox["!=", "Code"],
 ")."
}], "Text",ExpressionUUID->"aedc83a9-738f-4450-893e-7e8f815a8119"],

Cell["Here, finally, is the function.", "Text",ExpressionUUID->"a358e205-15ee-4a41-95fa-4aa132bfb7b9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findIncreasing", "[", 
   RowBox[{"S", ":", 
    RowBox[{"{", "__Integer", "}"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"piles", "=", 
       RowBox[{"{", "}"}]}], ",", "pointers", ",", "step", ",", "whichpile", 
      ",", "p", ",", "iList"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"game", " ", "stage"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"step", "=", "1"}], ",", 
       RowBox[{"step", "\[LessEqual]", 
        RowBox[{"Length", "[", "S", "]"}]}], ",", 
       RowBox[{"step", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"play", " ", "the", " ", "card"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"whichpile", "=", 
         RowBox[{"Catch", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"For", "[", 
            RowBox[{
             RowBox[{"p", "=", "1"}], ",", 
             RowBox[{"p", "\[LessEqual]", 
              RowBox[{"Length", "[", "piles", "]"}]}], ",", 
             RowBox[{"p", "++"}], ",", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"S", "[", 
                 RowBox[{"[", "step", "]"}], "]"}], "<", 
                RowBox[{"piles", "[", 
                 RowBox[{"[", "p", "]"}], "]"}]}], ",", 
               RowBox[{"Throw", "[", "p", "]"}]}], "]"}]}], 
            "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"Throw", "[", "Null", "]"}]}], "\[IndentingNewLine]", 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"whichpile", "===", "Null"}], ",", "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"piles", ",", 
            RowBox[{"S", "[", 
             RowBox[{"[", "step", "]"}], "]"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"piles", "[", 
            RowBox[{"[", "whichpile", "]"}], "]"}], "=", 
           RowBox[{"S", "[", 
            RowBox[{"[", "step", "]"}], "]"}]}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"update", " ", "pointers"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Which", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"whichpile", "===", "1"}], "||", 
           RowBox[{
            RowBox[{"Length", "[", "piles", "]"}], "\[Equal]", "1"}]}], ",", 
          RowBox[{
           RowBox[{"pointers", "[", 
            RowBox[{"S", "[", 
             RowBox[{"[", "step", "]"}], "]"}], "]"}], "=", "Null"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"whichpile", "===", "Null"}], ",", 
          RowBox[{
           RowBox[{"pointers", "[", 
            RowBox[{"S", "[", 
             RowBox[{"[", "step", "]"}], "]"}], "]"}], "=", 
           RowBox[{"piles", "[", 
            RowBox[{"[", 
             RowBox[{"-", "2"}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
          "True", ",", 
          RowBox[{
           RowBox[{"pointers", "[", 
            RowBox[{"S", "[", 
             RowBox[{"[", "step", "]"}], "]"}], "]"}], "=", 
           RowBox[{"piles", "[", 
            RowBox[{"[", 
             RowBox[{"whichpile", "-", "1"}], "]"}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
     
     RowBox[{"(*", 
      RowBox[{"ends", " ", "main", " ", "For", " ", "loop"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"backtracking", " ", "stage"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"iList", "=", 
      RowBox[{"{", 
       RowBox[{"piles", "[", 
        RowBox[{"[", 
         RowBox[{"-", "1"}], "]"}], "]"}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"pointers", "[", 
         RowBox[{"iList", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], "=!=", "Null"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"PrependTo", "[", 
        RowBox[{"iList", ",", 
         RowBox[{"pointers", "[", 
          RowBox[{"iList", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "iList"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[32]:=",ExpressionUUID->"be62fe29-e2b4-410a-be92-3029c29ef245"],

Cell[TextData[{
 "Example 12 from the text involved the sequence ",
 Cell[BoxData[
  FormBox[
   RowBox[{
   "8", ",", "11", ",", "9", ",", "1", ",", "4", ",", "6", ",", "12", ",", 
    "10", ",", "5", ",", "7"}], TraditionalForm]],ExpressionUUID->
  "81bc0b3a-a77f-4725-bd3f-60e3a9a25a93"],
 "."
}], "Text",ExpressionUUID->"3df23f33-0408-42dc-9683-82e71ea77da3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findIncreasing", "[", 
  RowBox[{"{", 
   RowBox[{
   "8", ",", "11", ",", "9", ",", "1", ",", "4", ",", "6", ",", "12", ",", 
    "10", ",", "5", ",", "7"}], "}"}], "]"}]], "Input",
 CellLabel->"In[33]:=",ExpressionUUID->"d5833a6f-6ffa-4e41-88c1-12a16083cb57"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "4", ",", "5", ",", "7"}], "}"}]], "Output",
 CellLabel->"Out[33]=",ExpressionUUID->"fc8c215b-8ab7-4b0b-854d-be47edabf33d"]
}, Open  ]],

Cell["This is one of the four sequences given in the text.", "Text",ExpressionUUID->"39a30fe7-d1fa-4374-8084-2785de623994"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Connection to the Pigeonhole Principle", "Subsubsection",ExpressionUUID->"a28fe7ea-4440-4abf-bdf4-14043474d0c1"],

Cell[TextData[{
 "Recall that Theorem 3 asserted that every sequence of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["n", "2"], "+", "1"}], TraditionalForm]],ExpressionUUID->
  "3bf36c0b-6b18-4db2-bc03-8f6883194e73"],
 " distinct real numbers contains a subsequence of length ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "101e4c6a-492e-4a37-b63f-d5128b0777af"],
 " that is either strictly increasing or strictly decreasing. It may appear \
that the Patience algorithm has no connection to this theorem or to the \
pigeonhole principle."
}], "Text",ExpressionUUID->"95ff13c1-5f9b-4880-b6a9-919a6b90e60f"],

Cell[TextData[{
 "However, the Patience algorithm does in fact suggest a proof of Theorem 3 \
via the pigeonhole principle, which is different from the proof given in the \
main text. When the Patience algorithm is executed on a list of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["n", "2"], "+", "1"}], TraditionalForm]],ExpressionUUID->
  "b277f740-6692-467b-a73f-539880e0ab82"],
 " distinct real numbers, either there are at least ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "ac966ded-6dae-4ef8-a876-2d0c75482841"],
 " stacks or there are at most ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "57dc13a8-d7c2-4678-8b87-6d6405701c69"],
 " stacks. If there are ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "69e2da6f-2994-41b0-b29b-934ff04d12c3"],
 " stacks, then there is a strictly increasing subsequence of length ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "3d9827e3-6426-4f47-bfa3-c6699374e785"],
 "."
}], "Text",ExpressionUUID->"bef17def-4a95-4798-a0f8-3a0aca565c75"],

Cell[TextData[{
 "On the other hand, assume that there are at most ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "13aea1b6-e856-4446-b956-9832fcf48d72"],
 " stacks. Consider the ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["n", "2"], "+", "1"}], TraditionalForm]],ExpressionUUID->
  "02a06f70-fc18-4462-a5cf-50039a25961e"],
 " values to be the pigeons and the stacks to be the pigeonholes. When ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["n", "2"], "+", "1"}], TraditionalForm]],ExpressionUUID->
  "6527c481-ff8e-49e1-90b3-044376ae28d5"],
 " objects are placed in ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "bb5baa35-0530-4c50-9eca-e527dbbacc6d"],
 " boxes, by the generalized pigeonhole principle, there is a box containing \
at least ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[LeftCeiling]", 
     FractionBox[
      RowBox[{
       SuperscriptBox["n", "2"], "+", "1"}], "n"], "\[RightCeiling]"}], "=", 
    RowBox[{
     RowBox[{"\[LeftCeiling]", 
      RowBox[{
       FractionBox[
        SuperscriptBox["n", "2"], "n"], "+", 
       FractionBox["1", "n"]}], "\[RightCeiling]"}], "=", 
     RowBox[{
      RowBox[{"n", "+", 
       RowBox[{"\[LeftCeiling]", 
        FractionBox["1", "n"], "\[RightCeiling]"}]}], "=", 
      RowBox[{"n", "+", "1"}]}]}]}], TraditionalForm]],ExpressionUUID->
  "bcb9a7c9-ce1c-4eab-afe8-bfeb7d6f47e4"],
 " objects. Hence, some stack has ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "f757298e-df6f-4e96-aeaa-ebc24e8b7ae9"],
 " values. However, the rules of the game ensure that each stack is a \
strictly decreasing subsequence, since one value is placed on top of another \
in a stack only when the second value is lesser than, and appears in the \
sequence later than the lower value."
}], "Text",ExpressionUUID->"01e94b3c-849c-4f6f-9afb-5e4f35bad9eb"],

Cell[TextData[{
 "In short, either there are ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "a740a52c-bdd1-4ab1-945e-e2e1cf3fd562"],
 " stacks and hence an increasing sequence of length ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "0405c83d-2d35-4881-a1b3-0264fcc6036f"],
 " or there is a stack of size ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "1d1c8ca7-c1a2-4d22-94bf-975c51be9351"],
 " and hence a decreasing sequence of length ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "f73b5259-620e-4ce0-bbd1-d025cc2115f9"],
 "."
}], "Text",ExpressionUUID->"2509b205-56dd-4dc1-93b5-6934423f1ba5"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.3 Permutations and Combinations", "Section",
 CellTags->"Section3",ExpressionUUID->"78d1a55c-6bed-42aa-849b-4e7301f66f76"],

Cell["\<\
The Wolfram Language includes many functions pertaining to counting and \
generating combinatorial structures.\
\>", "Text",ExpressionUUID->"ade2ea0c-a097-4dac-8176-e84acb117252"],

Cell[CellGroupData[{

Cell["Permutations", "Subsection",
 CellTags->"Section3a",ExpressionUUID->"24ab5345-68d2-4452-b82b-f83ae1598e2a"],

Cell["\<\
We have seen in previous chapters the use of the exclamation mark for \
factorial.\
\>", "Text",ExpressionUUID->"f0737ea0-59d7-4fbd-a288-857c275ab7f3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"6", "!"}]], "Input",
 CellLabel->"In[34]:=",ExpressionUUID->"7e8c32fc-bb51-4545-be9c-8c69dc011587"],

Cell[BoxData["720"], "Output",
 CellLabel->"Out[34]=",ExpressionUUID->"06946c5b-911e-462f-b84c-70162e2455a4"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Factorial",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Factorial"], "FunctionLink"],
 " (",
 StyleBox["!", "Code"],
 ") function can be used instead of the exclamation mark if you prefer. \
Otherwise, they are equivalent."
}], "Text",ExpressionUUID->"13100138-449c-44d7-b09b-ed6501a49788"],

Cell[TextData[{
 "To compute the number of ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "834b9279-8a8c-4694-9128-008a43d26422"],
 "-permutations of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "e1232254-d300-4e2f-94ed-24bcef7e8355"],
 " distinct objects, you can use the formula ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"P", "(", 
     RowBox[{"n", ",", "r"}], ")"}], "=", 
    FractionBox[
     RowBox[{"n", "!"}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"n", "-", "r"}], ")"}], "!"}]]}], TraditionalForm]],
  ExpressionUUID->"e0a343dd-d669-493e-80b8-1e54303b98ce"],
 ", given as Corollary 1 in Section 6.3 of the textbook. We can define a \
function, which we call ",
 StyleBox["numPerm", "Code"],
 ", based on this formula. Recall that the formula requires that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "\[LessEqual]", "r", "\[LessEqual]", "n"}], TraditionalForm]],
  ExpressionUUID->"185b825d-f2c0-4463-ab0a-1bb3f6bc0dea"],
 ". We will include that as a ",
 StyleBox[ButtonBox["Condition",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Condition"], "FunctionLink"],
 " (",
 StyleBox["/;", "Code"],
 ") in the definition of the function. "
}], "Text",ExpressionUUID->"90350aff-dfae-4035-9f60-ab228df593f1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"numPerm", "[", 
    RowBox[{"n_Integer", ",", "r_Integer"}], "]"}], "/;", 
   RowBox[{"0", "\[LessEqual]", "r", "\[LessEqual]", "n"}]}], ":=", 
  RowBox[{
   RowBox[{"n", "!"}], "/", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"n", "-", "r"}], ")"}], "!"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[35]:=",ExpressionUUID->"aa8a9cb0-ffe8-4cff-8832-763f5a0601b3"],

Cell[TextData[{
 "The number of 4-permutations of a set with 7 distinct objects, that is, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"P", "(", 
    RowBox[{"7", ",", "4"}], ")"}], TraditionalForm]],ExpressionUUID->
  "950a5f5a-451e-4ba2-b32a-ac977470e166"],
 ", is computed with the following expression."
}], "Text",ExpressionUUID->"f54f3b23-4ccc-4592-9c33-a493c8f7b705"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numPerm", "[", 
  RowBox[{"7", ",", "4"}], "]"}]], "Input",
 CellLabel->"In[36]:=",ExpressionUUID->"7ae882b4-a59e-4b3b-a47e-10a205919140"],

Cell[BoxData["840"], "Output",
 CellLabel->"Out[36]=",ExpressionUUID->"9ec4199e-c44b-44a1-b8bd-0b65c907f058"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Listing Permutations", "Subsubsection",ExpressionUUID->"beceedf5-6b69-40ec-ba11-a4fda0cba05c"],

Cell[TextData[{
 "To obtain a list of all permutations, the Wolfram Language provides the ",
 StyleBox[ButtonBox["Permutations",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Permutations"], "FunctionLink"],
 " function."
}], "Text",ExpressionUUID->"a9bd3d2a-8fbc-4c58-9ba1-f3fbc7ebfdf7"],

Cell[TextData[{
 "The first argument is a list containing the objects to be permuted. If this \
is the only argument given, then the function returns the list of all \
permutations of those objects. For example, to list the permutations of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"e51be760-24f4-438b-8e0a-d6e7018dd73e"],
 ", you enter the following."
}], "Text",ExpressionUUID->"886a0c4d-3749-4771-bf94-6f1c3538307d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Permutations", "[", 
  RowBox[{"{", 
   RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}], 
  "]"}]], "Input",
 CellLabel->"In[37]:=",ExpressionUUID->"44d958f7-4c66-4a81-981c-195153573481"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[37]=",ExpressionUUID->"1808dbd7-9619-477a-bebb-38273d43af55"]
}, Open  ]],

Cell[TextData[{
 "If you wish to list the permutations of the integers from 1 to a specified \
maximum, you can combine the ",
 StyleBox[ButtonBox["Permutations",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Permutations"], "FunctionLink"],
 " function with ",
 StyleBox[ButtonBox["Range",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Range"], "FunctionLink"],
 " applied to the maximum value. For example, the following produces all \
permutations of the first four positive integers."
}], "Text",ExpressionUUID->"227c2abb-45d4-4b2f-bf0f-b9beff73d0bf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Permutations", "[", 
  RowBox[{"Range", "[", "4", "]"}], "]"}]], "Input",
 CellLabel->"In[38]:=",ExpressionUUID->"db4f6c9f-6acc-4c23-a237-9ef0da9b6f12"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1", ",", "3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2", ",", "3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", "2", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[38]=",ExpressionUUID->"be5fb761-922b-4d9e-8950-1ea913c24927"]
}, Open  ]],

Cell[TextData[{
 "To produce the ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "09bcef85-a0b5-42ef-a716-850dede7a56a"],
 "-permutations of a list of objects, you only have to provide a second \
argument to ",
 StyleBox[ButtonBox["Permutations",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Permutations"], "FunctionLink"],
 ". If you give an integer, ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "03df5934-39c7-4542-8618-19acb53cd803"],
 ", as the second argument, the function will return the list of all \
permutations with at most ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "1d9925f1-837d-4bfb-85b7-97ca577fd16e"],
 " elements. That is, it produces all of the ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "78e3d769-2a8b-4b44-8f1e-2fcac802c13b"],
 "-permutations for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "\[LessEqual]", "n"}], TraditionalForm]],ExpressionUUID->
  "110e9104-9120-4b7b-9bed-9ac168c3a6c6"],
 ". For example, the following produces all permutations of at most two \
elements of the set of the first five positive integers. "
}], "Text",ExpressionUUID->"5dca2b3d-b368-4dba-bc85-9b2765752554"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Permutations", "[", 
  RowBox[{
   RowBox[{"Range", "[", "5", "]"}], ",", "2"}], "]"}]], "Input",
 CellLabel->"In[39]:=",ExpressionUUID->"de3d64c5-c0b0-466a-b04f-cd80947bd163"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "4", "}"}], ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[39]=",ExpressionUUID->"607fcd5b-27da-48ac-b663-e345e140b679"]
}, Open  ]],

Cell[TextData[{
 "To obtain only the ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "a8cc0fde-1dd8-44bf-a31a-76bc5f11ffa0"],
 "-permutations for a specific ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "9f399d74-d89a-4583-a5e3-b85179df93b2"],
 ", enter the second argument as ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", "r", "}"}], TraditionalForm]],ExpressionUUID->
  "c76292da-c7e4-4f61-bbc8-781c07b981ba"],
 ". For example, to list all of the 3-permutations of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"f0839ec2-ae7f-4be2-82f5-c36537bfb1c7"],
 ", you would enter the following."
}], "Text",ExpressionUUID->"09bf1b8a-3e01-4dd5-a08d-e7d7c8e6a744"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Permutations", "[", 
  RowBox[{
   RowBox[{"Range", "[", "5", "]"}], ",", 
   RowBox[{"{", "3", "}"}]}], "]"}]], "Input",
 CellLabel->"In[40]:=",ExpressionUUID->"6c3ada87-a0e4-48de-91c4-7ed7cdea73e2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "5", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "5", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "4", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[40]=",ExpressionUUID->"6ceba2d4-b38a-403e-83e1-11a6bbc65bab"]
}, Open  ]],

Cell[TextData[{
 "You can also provide a range of values for ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "d2c427b5-5c52-4f7f-aeff-ddacf546b201"],
 " by entering the second argument as ",
 Cell[BoxData[
  RowBox[{"{", 
   StyleBox["min", "CodeVar"], ",", 
   StyleBox["max", "CodeVar"], "}"}]], "myCode",ExpressionUUID->
  "dfc4a53e-5136-488d-b31c-266b672a1194"],
 "."
}], "Text",ExpressionUUID->"686b17e0-a3d4-49e4-87db-b7c657392c58"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Random Permutations", "Subsubsection",ExpressionUUID->"b14268f7-0587-411d-96c5-79f6f1865933"],

Cell[TextData[{
 "The Wolfram Language also provides a function, ",
 StyleBox[ButtonBox["RandomSample",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomSample"], "FunctionLink"],
 ", that will produce a randomly chosen permutation."
}], "Text",ExpressionUUID->"a23fe8ec-06bc-4f5c-8e35-c3bba20c36e0"],

Cell[TextData[{
 "Once again, the first argument is a list of the objects to be permuted. If \
no second argument is given, ",
 StyleBox[ButtonBox["RandomSample",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomSample"], "FunctionLink"],
 " will output a randomly chosen permutation of all of the elements. The \
following produces a random permutation of the letters \
\[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote] through \
\[OpenCurlyDoubleQuote]e\[CloseCurlyDoubleQuote]."
}], "Text",ExpressionUUID->"036d810c-1aa3-466c-82f1-2a6abce0f214"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\"", ",", 
    "\"\<e\>\""}], "}"}], "]"}]], "Input",
 CellLabel->"In[41]:=",ExpressionUUID->"a89546c9-6314-4cd2-9ead-7fa45f77a26b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"d\"\>", ",", "\<\"b\"\>", ",", "\<\"e\"\>", 
   ",", "\<\"c\"\>"}], "}"}]], "Output",
 CellLabel->"Out[41]=",ExpressionUUID->"f7a514ee-e9ff-4318-a205-2424d5ff4bb8"]
}, Open  ]],

Cell[TextData[{
 "You can also provide a positive integer as the second argument. In this \
case, ",
 StyleBox[ButtonBox["RandomSample",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomSample"], "FunctionLink"],
 " will produce a random permutation of that size. Note that the second \
argument must be less than the size of the list. The following outputs a \
random 3-permutation of the first 10 positive integers."
}], "Text",ExpressionUUID->"3acba74c-eed1-4d2b-878a-2068c4ada3e5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  RowBox[{
   RowBox[{"Range", "[", "10", "]"}], ",", "3"}], "]"}]], "Input",
 CellLabel->"In[42]:=",ExpressionUUID->"3ba7f382-60f6-4b11-87af-d3fc0587a1e6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"9", ",", "6", ",", "5"}], "}"}]], "Output",
 CellLabel->"Out[42]=",ExpressionUUID->"d6eb89ac-17b8-46e8-b70b-2ef22feddafe"]
}, Open  ]],

Cell["\<\
The permutation is selected so that each permutation has the same probability \
of being chosen. \
\>", "Text",ExpressionUUID->"549cf1d6-5aab-405c-9c34-4f300eea8658"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Combinations", "Subsection",
 CellTags->"Section3b",ExpressionUUID->"7146bfcf-9e15-438e-bf0d-791abbe37055"],

Cell["\<\
The functions related to combinations are very similar to those for \
permutations.\
\>", "Text",ExpressionUUID->"8a84bc59-eb04-47a1-94c1-36323adb7e31"],

Cell[TextData[{
 "To compute the total number of combinations of a set of a specific size, \
use the formula ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "n"], TraditionalForm]],ExpressionUUID->
  "459db6f2-27f8-4b60-b857-0222874c2236"],
 ", where ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "ba37a1c9-8513-4687-9dfa-1a6cbd6425ea"],
 " is the number of objects being selected from. For example, the following \
shows that there are 32 subsets of a set of five elements."
}], "Text",ExpressionUUID->"8efd651f-be83-43f7-951e-ca258fb1e296"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2", 
  StyleBox["^", "EquationNumbered"], 
  StyleBox["5", "EquationNumbered"]}]], "Input",
 CellLabel->"In[43]:=",ExpressionUUID->"db9a4008-8b07-48af-8f3f-62a3a92bdf4a"],

Cell[BoxData["32"], "Output",
 CellLabel->"Out[43]=",ExpressionUUID->"29c6a13e-4efd-4a4a-a659-fc42f470e9bd"]
}, Open  ]],

Cell[TextData[{
 "To compute the number of ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "2cc40a9d-e652-4e7a-8686-b289c6fa1498"],
 "-combinations of a set with ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "87aa957c-76b5-4efc-be81-7597c238f201"],
 " elements, the Wolfram Language provides the ",
 StyleBox[ButtonBox["Binomial",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Binomial"], "FunctionLink"],
 " function. The following computes ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "(", 
    RowBox[{"52", ",", "5"}], ")"}], TraditionalForm]],ExpressionUUID->
  "6f8642d6-b527-431f-b817-1b1ba68f6907"],
 "."
}], "Text",ExpressionUUID->"90031bc6-120b-4136-a1e0-461990b939bf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Binomial", "[", 
  RowBox[{"52", ",", "5"}], "]"}]], "Input",
 CellLabel->"In[44]:=",ExpressionUUID->"5a154057-d47b-41f5-8ce4-25d1d091d865"],

Cell[BoxData["2598960"], "Output",
 CellLabel->"Out[44]=",ExpressionUUID->"68a101e3-9c9f-4c9f-93b8-1e0548072b93"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Listing Combinations", "Subsubsection",ExpressionUUID->"761559fa-7972-4366-be2d-df411ef7612d"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " function is the combination analog of ",
 StyleBox[ButtonBox["Permutations",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Permutations"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"0b13fb16-b5c8-4b29-ba55-0c35b68ac579"],

Cell[TextData[{
 "Given a list as the only argument, ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " outputs all possible subsets of every size."
}], "Text",ExpressionUUID->"59aada52-6c1b-4ec5-a69a-f919957d2ca8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Subsets", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\""}], "}"}],
   "]"}]], "Input",
 CellLabel->"In[45]:=",ExpressionUUID->"68947a9b-213a-40e0-a80e-abda1897c23f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "\<\"a\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"b\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"c\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"d\"\>", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"d\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"d\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"d\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"d\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"d\"\>"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[45]=",ExpressionUUID->"a38ad465-ba35-4b7b-8586-127c8cf8de9e"]
}, Open  ]],

Cell[TextData[{
 "To produce the subsets of the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", "n"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"6248c86c-8a9a-459a-ab7d-fcc901773201"],
 ", give the argument as ",
 StyleBox["Range[n]", "Code"],
 "."
}], "Text",ExpressionUUID->"8ac471aa-1a22-4799-98e0-1f17530693d6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Subsets", "[", 
  RowBox[{"Range", "[", "3", "]"}], "]"}]], "Input",
 CellLabel->"In[46]:=",ExpressionUUID->"be1c25da-d485-41e7-bace-3e2be972ffd9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[46]=",ExpressionUUID->"998c257a-4123-40cf-b519-1c22786a069e"]
}, Open  ]],

Cell[TextData[{
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " accepts a second argument with the same syntax as ",
 StyleBox[ButtonBox["Permutations",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Permutations"], "FunctionLink"],
 ". If an integer is given as a second argument, the output will be all \
subsets whose cardinality is at most that integer. For example, the following \
finds all of the ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "6cd86371-86a5-47e1-ab71-fe8310174719"],
 "-combinations of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"d\"\>"}], "}"}], TraditionalForm]],ExpressionUUID->
  "b78899d7-6693-4ce6-ab16-e2db136ce387"],
 ", for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "\[LessEqual]", "2"}], TraditionalForm]],ExpressionUUID->
  "b856adf9-a528-4dad-8e80-c69afa7a4a1a"],
 "."
}], "Text",ExpressionUUID->"220a99be-6f97-4803-ad6d-3f4bdf244faf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Subsets", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\""}], 
    "}"}], ",", "2"}], "]"}]], "Input",
 CellLabel->"In[47]:=",ExpressionUUID->"944fb2bd-d249-4c20-ac61-a05e5e32ff2a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "\<\"a\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"b\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"c\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"d\"\>", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"d\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"d\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"d\"\>"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[47]=",ExpressionUUID->"a643c122-b5ad-44ef-baa0-00f71c58e0a0"]
}, Open  ]],

Cell[TextData[{
 "If the second argument is provided as a list containing a single integer, \
then the output will be the subsets whose cardinality is equal to that \
integer. For example, you obtain the 3-combinations of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"6032ab45-a29e-4ed1-a1b3-11734e6e26e6"],
 " as shown below.",
 Cell[BoxData[
  FormBox[
  Cell["",ExpressionUUID->"189d24d9-a7df-4375-ac58-cf91c1a6daed"], 
   TraditionalForm]],ExpressionUUID->"fbc16c62-22ab-4930-815e-4a0ef630cf93"]
}], "Text",ExpressionUUID->"9caf6453-7eb7-4c39-bdef-9509ed29f81e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Subsets", "[", 
  RowBox[{
   RowBox[{"Range", "[", "5", "]"}], ",", 
   RowBox[{"{", "3", "}"}]}], "]"}]], "Input",
 CellLabel->"In[48]:=",ExpressionUUID->"a732d07d-86f8-4272-9118-929496e0c961"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "5"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[48]=",ExpressionUUID->"d9a60729-39f8-421a-b0d2-10a88a44bced"]
}, Open  ]],

Cell[TextData[{
 "With a list of two integers as the second argument, you obtain the subsets \
whose ",
 StyleBox["cardinalities",
  IgnoreSpellCheck->True],
 " are between the two values. The integers must be given with the smaller \
value first, or the output will be the empty list. The following calculates \
the proper, nonempty subsets of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"8a77302c-3501-4076-b677-9226b14f2e7f"],
 "."
}], "Text",ExpressionUUID->"eb64e42d-5c14-4373-ab62-7b088e6014a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Subsets", "[", 
  RowBox[{
   RowBox[{"Range", "[", "5", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[49]:=",ExpressionUUID->"4ee4d57a-b836-42a0-b26a-26bf9d3395a6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "4", "}"}], ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4", ",", "5"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[49]=",ExpressionUUID->"6c7f67da-afd8-4705-8886-d8ea404555f1"]
}, Open  ]],

Cell[TextData[{
 "With a third argument, you can limit the number of results that are \
included. A positive integer given as the third argument will cause ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " to output at most that number of subsets. Note that the second argument \
must be present to be able to use this option. If you wish to use the third \
argument, but provide no restriction on the size of the subsets considered, \
you can give ",
 StyleBox[ButtonBox["All",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/All"], "FunctionLink"],
 " as the second argument. The following outputs the first 10 subsets of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"bc5bfe2c-826a-4408-a524-5963694ac3a9"],
 "."
}], "Text",ExpressionUUID->"9617046a-5534-4a9e-ac16-d35bca2fc9e6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Subsets", "[", 
  RowBox[{
   RowBox[{"Range", "[", "5", "]"}], ",", "All", ",", "10"}], "]"}]], "Input",\

 CellLabel->"In[50]:=",ExpressionUUID->"1a2922b1-8b37-4cb0-b44a-0331a5272a03"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "4", "}"}], ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[50]=",ExpressionUUID->"0cf76e14-3e68-4c92-87d1-40ad76e5496c"]
}, Open  ]],

Cell[TextData[{
 "You can obtain a single subset by entering ",
 Cell[BoxData[
  RowBox[{"{", 
   StyleBox["n", "CodeVar"], "}"}]], "myCode",ExpressionUUID->
  "271d17a8-bf3e-4c84-80d6-fe0c2e765fde"],
 " as the third argument. This will output the list containing the ",
 Cell[BoxData[
 "n"], "CodeVar",ExpressionUUID->"c5b7ec64-c9bb-4a60-959b-6a585d2da3ea"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " subset in the canonical order used by ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " when listing subsets. You can also give a pair ",
 Cell[BoxData[
  RowBox[{"{", 
   StyleBox["n", "CodeVar"], ",", 
   StyleBox["m", "CodeVar"], "}"}]], "myCode",ExpressionUUID->
  "3a90c1e4-622c-40d9-a274-b92645b12ef6"],
 " to list the subsets from the ",
 StyleBox["n", "CodeVar"],
 "th through the ",
 StyleBox["m",
  IgnoreSpellCheck->True],
 StyleBox["th",
  IgnoreSpellCheck->True],
 "."
}], "Text",ExpressionUUID->"6a4a9cc4-fb9a-4b24-a12d-09fa84d3fa53"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Subsets", "[", 
  RowBox[{
   RowBox[{"Range", "[", "5", "]"}], ",", "All", ",", 
   RowBox[{"{", "7", "}"}]}], "]"}]], "Input",
 CellLabel->"In[51]:=",ExpressionUUID->"d11b67be-7c0e-441b-aad0-2d373800c052"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2"}], "}"}], "}"}]], "Output",
 CellLabel->"Out[51]=",ExpressionUUID->"04914bbc-7471-4c59-83ec-68356b4fe4af"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Subsets", "[", 
  RowBox[{
   RowBox[{"Range", "[", "5", "]"}], ",", "All", ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "7"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[52]:=",ExpressionUUID->"3b25b17f-756a-4471-b1fa-3e95030ad84c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "4", "}"}], ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[52]=",ExpressionUUID->"0d09c233-9ead-482c-ae1a-c37bfd997bb5"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Random Combinations", "Subsubsection",ExpressionUUID->"5264c842-f414-4269-a73b-fcabba966a97"],

Cell[TextData[{
 "The Wolfram Language does not explicitly provide a function for selecting \
random combinations. To randomly select an ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "ca9b8aa7-6566-4fcf-9414-9e978d4c2be1"],
 "-combination for a particular ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "d77c4ccb-a4d9-4be1-a4e9-5fb21b630f2d"],
 ", one approach is to apply ",
 StyleBox[ButtonBox["Sort",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sort"], "FunctionLink"],
 " to a random permutation obtained with ",
 StyleBox[ButtonBox["RandomSample",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomSample"], "FunctionLink"],
 ". For example, the following produces a random 3-combination of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", "10"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"a8175974-d958-47da-b208-872bd61fcc30"],
 "."
}], "Text",ExpressionUUID->"e99d2021-6b30-4e5b-998f-007f31a82f94"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{"RandomSample", "[", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", "3"}], "]"}], "]"}]], "Input",
 CellLabel->"In[53]:=",ExpressionUUID->"59b95e75-90df-47f2-ae17-959edb0096af"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "4", ",", "5"}], "}"}]], "Output",
 CellLabel->"Out[53]=",ExpressionUUID->"c58d012a-be0d-44cc-b1c9-1d7cb6e386aa"]
}, Open  ]],

Cell[TextData[{
 "The application of ",
 StyleBox[ButtonBox["Sort",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sort"], "FunctionLink"],
 " is not strictly necessary but helps conceptually. The difference between \
an ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "75f4622f-5a1b-4a7c-ac79-b60e2f3f5a69"],
 "-permutation and an ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "67325c04-7195-442a-96b0-2013541eb037"],
 "-combination is that order \[OpenCurlyDoubleQuote]matters\
\[CloseCurlyDoubleQuote] for the permutation and does not for the \
combination. For example, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], TraditionalForm]],
  ExpressionUUID->"7ef57cd8-7139-4784-bc52-1a219e1c690a"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "1"}], "}"}], TraditionalForm]],
  ExpressionUUID->"fd34993c-8055-401f-b92a-c4157fd499b6"],
 " are different as permutations but the same as combinations or sets. By \
applying ",
 StyleBox[ButtonBox["Sort",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sort"], "FunctionLink"],
 ", we impose the same order on them, which makes the order they originally \
had irrelevant."
}], "Text",ExpressionUUID->"861125b4-ad81-40d1-a080-10a34cd6a554"],

Cell[TextData[{
 "A second approach is to randomly select from the output of ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 ". The function ",
 StyleBox[ButtonBox["RandomChoice",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomChoice"], "FunctionLink"],
 ", applied to a list, will return one randomly chosen element of the list. \
Since ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " outputs a list of subsets, it can be used as the argument to ",
 StyleBox[ButtonBox["RandomChoice",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomChoice"], "FunctionLink"],
 ". The following demonstrates an alternate approach to choosing a random \
3-combination of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", "10"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"1dd558c8-659c-45e3-9eff-735a271b9cc4"],
 ". Recall that the second argument of {3} limits the output to the subsets \
of size 3."
}], "Text",ExpressionUUID->"4569727a-08b1-4251-a88f-417f1807b763"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomChoice", "[", 
  RowBox[{"Subsets", "[", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", 
    RowBox[{"{", "3", "}"}]}], "]"}], "]"}]], "Input",
 CellLabel->"In[54]:=",ExpressionUUID->"9f71493b-1e45-4087-b975-d98c729dc08a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "7", ",", "10"}], "}"}]], "Output",
 CellLabel->"Out[54]=",ExpressionUUID->"b2792984-69d1-49a7-b391-6c054246e2b9"]
}, Open  ]],

Cell[TextData[{
 "A third approach is to first select a random integer using the ",
 StyleBox[ButtonBox["RandomInteger",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomInteger"], "FunctionLink"],
 " function, and then use that randomly selected integer in the third \
argument of ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 ". You must give the ",
 StyleBox[ButtonBox["RandomInteger",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomInteger"], "FunctionLink"],
 " function the single argument of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "n"}], "}"}], TraditionalForm]],ExpressionUUID->
  "f35f899f-274b-4d0f-9c35-511d60839c96"],
 " where ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "e4afcd62-3eb3-4a36-8143-1a4757cb7243"],
 " is the number of combinations being selected from. This causes it to \
produce a random integer from 1 to that maximum. In the below, we first \
select a random integer between 1 and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "(", 
    RowBox[{"10", ",", "3"}], ")"}], TraditionalForm]],ExpressionUUID->
  "d0fd551b-eafc-4656-a42b-a5b17d90db2c"],
 ", the number of 3-combinations of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", "10"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"9fb3542f-b986-4b92-a995-01a9571e0b9b"],
 ". This value is stored as ",
 StyleBox["whichone", "Code",
  IgnoreSpellCheck->True],
 ". Then, we apply ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " with first argument ",
 StyleBox["Range[10]", "Code"],
 ", which produces the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", "10"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"b96ececf-ba86-4589-b23d-5590fc37fc93"],
 "; second argument ",
 StyleBox["{3}", "Code"],
 ", indicating that only 3-combinations are allowed; and third argument ",
 StyleBox["{whichone}", "Code",
  IgnoreSpellCheck->True],
 ", which causes the function to return only the single subset at that \
position in the list of all the 3-combinations. Note that since ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " always outputs a list of sets, the result will be nested."
}], "Text",ExpressionUUID->"170f1a97-ef48-49fa-a422-36e23269d3f5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"whichone", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"Binomial", "[", 
       RowBox[{"10", ",", "3"}], "]"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Subsets", "[", 
  RowBox[{
   RowBox[{"Range", "[", "10", "]"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "whichone", "}"}]}], "]"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[55]:=",ExpressionUUID->"cbe0adab-8763-40b8-af2d-c7ac27861c11"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"1", ",", "5", ",", "10"}], "}"}], "}"}]], "Output",
 CellLabel->"Out[56]=",ExpressionUUID->"d967c151-8ab9-47e7-a781-964304a66e4b"]
}, Open  ]],

Cell[TextData[{
 "The first approach is the most efficient, but can only be applied when \
selecting a random ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "13b99a61-b3db-4eee-92d7-a740fa6fe97e"],
 "-combination for a specific value of ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "15ddb7f7-ab2b-4b2b-a5ed-23b329fc469f"],
 ". If you wish to select a random subset whose cardinality can vary, the \
first method will select longer combinations more frequently than short ones. \
The second approach, using ",
 StyleBox[ButtonBox["RandomChoice",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomChoice"], "FunctionLink"],
 ", is fairly straightforward and can be easily used to select a random \
combination without the restriction that they all be the same size. This \
approach can also be useful if you want to randomly select a combination from \
a list of combinations that meet some criteria. However, it is inefficient \
and restricts the maximum size of the original set. The third option, using \
",
 StyleBox[ButtonBox["RandomInteger",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomInteger"], "FunctionLink"],
 ", is reasonably efficient, although it is not quite as fast as the first \
option. It is also fairly flexible, as you are not restricted to a single \
cardinality, provided that you accurately count the number of possible \
combinations when applying ",
 StyleBox[ButtonBox["RandomInteger",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomInteger"], "FunctionLink"],
 ". "
}], "Text",ExpressionUUID->"585cc119-5ca4-4f46-8019-d65e2187fdd8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Circular Permutations", "Subsection",
 CellTags->"Section3c",ExpressionUUID->"132948bd-9df2-4c1e-af9d-71fbcfd5e520"],

Cell[TextData[{
 "The prelude to Exercise 42 of Section 6.3 describes circular permutations. \
A circular ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "04248d13-6135-44bd-a306-63bb8fc35647"],
 "-permutation of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "3a307c87-6183-4e7f-a2ee-fd03de7a00e0"],
 " people is a seating of ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "c8081d25-e62e-46d3-bfa3-a94e5575f8b2"],
 " of those ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "c0c3944a-573b-4551-9ece-44667b403595"],
 " people at a circular table. Moreover, two ",
 StyleBox["seatings",
  IgnoreSpellCheck->True],
 " are considered the same if one can be obtained from the other by rotation. "
}], "Text",ExpressionUUID->"46c696f3-8c1a-4cae-b09e-6938e340349d"],

Cell[TextData[{
 "The exercises ask you to compute the number of circular 3-permutations of \
five people and to arrive at a formula for that number. In this subsection, \
we will write a function to list all of the circular ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "e4eac984-af86-44b8-94e9-fab6d88da008"],
 "-permutations of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "32e76787-9d5f-453d-aaa4-021fc860875c"],
 " people. Having such a function can help you more easily explore the \
concept and test your formula. "
}], "Text",ExpressionUUID->"a4c0533c-830d-4255-9350-60ffedd2d7aa"],

Cell[CellGroupData[{

Cell["Rotating a Permutation", "Subsubsection",ExpressionUUID->"82e0c932-e8dc-4f19-8588-78b377700ea7"],

Cell["\<\
The key to listing all circular permutations is to devise a way to test \
whether two circular permutations are equal. According to the definition, two \
circular permutations are considered to be equal if one can be obtained from \
the other by a rotation. If we use a list to represent a permutation, a \
rotation will consist of moving the first element to the end of the list (or \
the last to the front). \
\>", "Text",ExpressionUUID->"9c300002-733e-4959-8414-e6a11af77f36"],

Cell[TextData[{
 "The Wolfram Language includes the functions ",
 StyleBox[ButtonBox["RotateLeft",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RotateLeft"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["RotateRight",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RotateRight"], "FunctionLink"],
 " that manipulate lists in exactly this way. ",
 StyleBox[ButtonBox["RotateLeft",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RotateLeft"], "FunctionLink"],
 " moves the first element to the end of the list and ",
 StyleBox[ButtonBox["RotateRight",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RotateRight"], "FunctionLink"],
 " moves the last element to the beginning, as illustrated below."
}], "Text",ExpressionUUID->"c4a7edda-2948-49cc-b14b-48de40c96a73"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RotateLeft", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], 
  "]"}]], "Input",
 CellLabel->"In[57]:=",ExpressionUUID->"953d5849-871c-4628-a603-5ef2daa70e76"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "4", ",", "5", ",", "1"}], "}"}]], "Output",
 CellLabel->"Out[57]=",ExpressionUUID->"35243926-fa46-4d04-bf57-053e9a35a7c6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RotateRight", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], 
  "]"}]], "Input",
 CellLabel->"In[58]:=",ExpressionUUID->"11367350-9423-4875-b273-c60d52dc40a8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "1", ",", "2", ",", "3", ",", "4"}], "}"}]], "Output",
 CellLabel->"Out[58]=",ExpressionUUID->"128b93b2-4e8c-4b47-8068-cde01c8029bf"]
}, Open  ]],

Cell["\<\
Both of these functions can also accept an integer as a second optional \
argument to move more than one element at a time. For example, the following \
moves the first two elements of the list to the end.\
\>", "Text",ExpressionUUID->"54e03748-1bd1-417a-856c-aee75bd95de1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RotateLeft", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", "2"}], 
  "]"}]], "Input",
 CellLabel->"In[59]:=",ExpressionUUID->"0d3d2498-3a28-4469-85e9-a1e77eff1fec"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "4", ",", "5", ",", "1", ",", "2"}], "}"}]], "Output",
 CellLabel->"Out[59]=",ExpressionUUID->"fd255e32-53a5-4ecf-8670-114eef2b89de"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Equality of Circular Permutations", "Subsubsection",ExpressionUUID->"b08e5a19-877d-4255-ae9e-cdb7ace87607"],

Cell[TextData[{
 "Note that repeatedly rotating a permutation will eventually result in the \
original. Specifically, for an ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "fa0ea6ce-0514-467a-b07c-d3f7e13037ec"],
 "-permutation, after ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "195e7f08-bdee-4ed4-ab76-412fd09b7f69"],
 " rotations, the list will return to its original state. This is illustrated \
below with an example \
\[OpenCurlyDoubleQuote]seating.\[CloseCurlyDoubleQuote]"
}], "Text",ExpressionUUID->"80b05785-1d42-42ae-a708-398402171d21"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RotateLeft", "[", 
  RowBox[{"{", 
   RowBox[{"\"\<Abe\>\"", ",", "\"\<Carol\>\"", ",", "\"\<Barbara\>\""}], 
   "}"}], "]"}]], "Input",
 CellLabel->"In[60]:=",ExpressionUUID->"61978687-47c6-409e-894d-6b84cc53fd34"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Carol\"\>", ",", "\<\"Barbara\"\>", ",", "\<\"Abe\"\>"}], 
  "}"}]], "Output",
 CellLabel->"Out[60]=",ExpressionUUID->"76a653fc-7385-45da-8099-ef4c6f77e02b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RotateLeft", "[", "%", "]"}]], "Input",
 CellLabel->"In[61]:=",ExpressionUUID->"d8f0f749-16ee-45bd-b116-29162776dc8b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Barbara\"\>", ",", "\<\"Abe\"\>", ",", "\<\"Carol\"\>"}], 
  "}"}]], "Output",
 CellLabel->"Out[61]=",ExpressionUUID->"107eafcb-e877-4194-a606-3c79f438bb08"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RotateLeft", "[", "%", "]"}]], "Input",
 CellLabel->"In[62]:=",ExpressionUUID->"4118ddc0-e1a5-4ccb-846f-910392780e2d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Abe\"\>", ",", "\<\"Carol\"\>", ",", "\<\"Barbara\"\>"}], 
  "}"}]], "Output",
 CellLabel->"Out[62]=",ExpressionUUID->"ba536797-8a89-451a-baf8-c98c9c87e77b"]
}, Open  ]],

Cell[TextData[{
 "This observation indicates that, given two ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "4f4665a1-87f9-43e6-a48f-0564ed334979"],
 "-permutations, we can test to see if they are the same by rotating one of \
them ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "914f43e5-b902-47e5-98d3-c59bae4ded79"],
 " times. The function below returns true if the two input lists represent \
the same circular permutation and false otherwise. It first checks equality \
without performing rotation. Then, using a ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop, it rotates the second list, checking for equality after each \
rotation."
}], "Text",ExpressionUUID->"3196454d-bed1-41bd-9c36-0e3dd6a47cb1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"CPEqualQ", "[", 
   RowBox[{"L1_List", ",", "L2_List"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"Ltest", "=", "L2"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"L1", "\[Equal]", "Ltest"}], ",", 
       RowBox[{"Return", "[", "True", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{
         RowBox[{"Length", "[", "Ltest", "]"}], "-", "1"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Ltest", "=", 
         RowBox[{"RotateLeft", "[", "Ltest", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"L1", "\[Equal]", "Ltest"}], ",", 
          RowBox[{"Return", "[", "True", "]"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "False", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[63]:=",ExpressionUUID->"485ce826-1bc9-4e22-b250-46f74a022545"],

Cell["\<\
We can use this function to confirm equality of circular permutations. For \
example,\
\>", "Text",ExpressionUUID->"31ea9f58-ab31-4699-aea8-1037fef50560"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CPEqualQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<Charles\>\"", ",", "\"\<Helen\>\"", ",", "\"\<Dean\>\""}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Helen\>\"", ",", "\"\<Dean\>\"", ",", "\"\<Charles\>\""}], 
    "}"}]}], "]"}]], "Input",
 CellLabel->"In[64]:=",ExpressionUUID->"2024d76a-a6dc-43bc-bd7d-3ba716ac6b8f"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[64]=",ExpressionUUID->"c56855ca-d746-4f52-815b-db8354a8de9a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Listing All Circular Permutations", "Subsubsection",ExpressionUUID->"90f0677f-27e3-4514-96dd-ccb8dfdb083d"],

Cell[TextData[{
 "We are now prepared to write a function that lists all circular \
permutations. First, we will use ",
 StyleBox[ButtonBox["Permutations",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Permutations"], "FunctionLink"],
 " to generate all ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "05095d07-d84d-4350-9ca2-3c110f20b2cb"],
 "-permutations of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "f964b379-6dc7-4bb8-b820-21bc18dae78f"],
 " people. We will initialize the list of all distinct circular permutations \
to the first element of the list of all permutations. That first permutation \
is then removed from the list of all permutations. Recall that ",
 StyleBox[ButtonBox["Delete",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Delete"], "FunctionLink"],
 " applied to a list and an index returns the list obtained by removing the \
element at the given location from the list."
}], "Text",ExpressionUUID->"48937d25-362c-4b97-b15d-3d1b70bdd65c"],

Cell[TextData[{
 "Within a ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop conditioned on the list of permutations being nonempty, consider the \
first element in the list of all permutations. Use ",
 StyleBox["CPEqualQ", "Code"],
 " and a loop to see if the first element is identical to any of the members \
of the set of circular permutations. If not, add it to the set of circular \
permutations. In either case, it is deleted from the list of all \
permutations. This continues until the list of all permutations has been \
emptied."
}], "Text",ExpressionUUID->"60200cc6-821e-43cc-8a2b-b52186c0928a"],

Cell[TextData[{
 "Here is the implementation. Our function will accept a list of \
\[OpenCurlyDoubleQuote]people\[CloseCurlyDoubleQuote] to be seated as the \
first argument and ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "e23ef1c3-aa49-41e5-aab7-37e7c2e7c347"],
 ", the number that can be seated at the table, as the second argument."
}], "Text",ExpressionUUID->"78b38757-d680-489a-8412-2abc44791d76"],

Cell[BoxData[
 RowBox[{
  RowBox[{"circularPermutations", "[", 
   RowBox[{"S_List", ",", "r_Integer"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"allP", ",", "allCP", ",", "isnew", ",", "p"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allP", "=", 
      RowBox[{"Permutations", "[", 
       RowBox[{"S", ",", 
        RowBox[{"{", "r", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"allCP", "=", 
      RowBox[{"{", 
       RowBox[{"allP", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"allP", "=", 
      RowBox[{"Delete", "[", 
       RowBox[{"allP", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"allP", "\[NotEqual]", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"isnew", "=", 
         RowBox[{"Catch", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Do", "[", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"CPEqualQ", "[", 
                RowBox[{
                 RowBox[{"allP", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", "p"}], "]"}], ",", 
               RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"p", ",", "allCP"}], "}"}]}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Throw", "[", "True", "]"}]}], "\[IndentingNewLine]", 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{"isnew", ",", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"allCP", ",", 
            RowBox[{"allP", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"allP", "=", 
         RowBox[{"Delete", "[", 
          RowBox[{"allP", ",", "1"}], "]"}]}]}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", "allCP"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[65]:=",ExpressionUUID->"ab2a367d-2812-40c1-ba5b-0854540d98d9"],

Cell[TextData[{
 "Note that the ",
 StyleBox["isnew", "Code",
  IgnoreSpellCheck->True],
 " Boolean is used to track whether or not the current first member of ",
 StyleBox["allP", "Code"],
 " is new or not."
}], "Text",ExpressionUUID->"3b0e567f-cfcd-4718-bd2f-453a4a6ebc82"],

Cell[TextData[{
 "The following computes the possible circular 3-permutations of the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"\<\"Abe\"\>", ",", "\<\"Barbara\"\>", ",", "\<\"Carol\"\>", 
     ",", "\<\"Dean\"\>", ",", "\<\"Eve\"\>"}], "}"}], TraditionalForm]],
  ExpressionUUID->"2a0b4526-b638-486a-9242-533bc6c45cfa"],
 "."
}], "Text",ExpressionUUID->"0b72fd7f-ac98-4c7e-9312-7f1ea07ff90f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"circularPermutations", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "\"\<Abe\>\"", ",", "\"\<Barbara\>\"", ",", "\"\<Carol\>\"", ",", 
     "\"\<Dean\>\"", ",", "\"\<Eve\>\""}], "}"}], ",", "3"}], "]"}]], "Input",\

 CellLabel->"In[66]:=",ExpressionUUID->"f347a241-4ea6-4a1c-92ba-cd801c75e83b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"Abe\"\>", ",", "\<\"Barbara\"\>", ",", "\<\"Carol\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Abe\"\>", ",", "\<\"Barbara\"\>", ",", "\<\"Dean\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Abe\"\>", ",", "\<\"Barbara\"\>", ",", "\<\"Eve\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Abe\"\>", ",", "\<\"Carol\"\>", ",", "\<\"Barbara\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Abe\"\>", ",", "\<\"Carol\"\>", ",", "\<\"Dean\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Abe\"\>", ",", "\<\"Carol\"\>", ",", "\<\"Eve\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Abe\"\>", ",", "\<\"Dean\"\>", ",", "\<\"Barbara\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Abe\"\>", ",", "\<\"Dean\"\>", ",", "\<\"Carol\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Abe\"\>", ",", "\<\"Dean\"\>", ",", "\<\"Eve\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Abe\"\>", ",", "\<\"Eve\"\>", ",", "\<\"Barbara\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Abe\"\>", ",", "\<\"Eve\"\>", ",", "\<\"Carol\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Abe\"\>", ",", "\<\"Eve\"\>", ",", "\<\"Dean\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Barbara\"\>", ",", "\<\"Carol\"\>", ",", "\<\"Dean\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Barbara\"\>", ",", "\<\"Carol\"\>", ",", "\<\"Eve\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Barbara\"\>", ",", "\<\"Dean\"\>", ",", "\<\"Carol\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Barbara\"\>", ",", "\<\"Dean\"\>", ",", "\<\"Eve\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Barbara\"\>", ",", "\<\"Eve\"\>", ",", "\<\"Carol\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Barbara\"\>", ",", "\<\"Eve\"\>", ",", "\<\"Dean\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Carol\"\>", ",", "\<\"Dean\"\>", ",", "\<\"Eve\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Carol\"\>", ",", "\<\"Eve\"\>", ",", "\<\"Dean\"\>"}], 
    "}"}]}], "}"}]], "Output",
 CellLabel->"Out[66]=",ExpressionUUID->"ba6d4666-d61e-429e-b02e-ead274c01eb8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"circularPermutations", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<Abe\>\"", ",", "\"\<Barbara\>\"", ",", "\"\<Carol\>\"", ",", 
      "\"\<Dean\>\"", ",", "\"\<Eve\>\""}], "}"}], ",", "3"}], "]"}], 
  "]"}]], "Input",
 CellLabel->"In[67]:=",ExpressionUUID->"0c7dcaac-0c3b-4dd0-8935-28b43c134cdf"],

Cell[BoxData["20"], "Output",
 CellLabel->"Out[67]=",ExpressionUUID->"a60a70dc-63d6-476b-a14b-e075512aa03a"]
}, Open  ]],

Cell[TextData[{
 "It is left to the reader to experiment with other starting sets and values \
of ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "3dbacf60-9db0-4ec7-90e7-e6087539c02b"],
 " to determine a formula for the number of circular ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "d76a9585-245b-4845-818f-52926eecc196"],
 "-permutations of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "b50eaa27-1f37-45e1-905f-4dea1b52efc2"],
 " people. Note that the functions in this subsection were written using a \
very naive approach. There are simpler and more efficient approaches, but \
those would give away the key idea used to create the formula."
}], "Text",ExpressionUUID->"50d7b86f-5a27-4e0c-9e82-b1e8cd46b011"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.4 Binomial Coefficients and Identities", "Section",
 CellTags->"Section4",ExpressionUUID->"d2110623-6fa1-4c5e-8d68-64fdd2d36bd2"],

Cell[TextData[{
 "In this section, we will use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to compute binomial coefficients, to generate Pascal\[CloseCurlyQuote]s \
triangle, and to verify identities."
}], "Text",ExpressionUUID->"f4cc7978-2835-482f-80fc-c16c651ac6b2"],

Cell[CellGroupData[{

Cell["The Binomial Theorem", "Subsection",
 CellTags->"Section4a",ExpressionUUID->"767a4ffe-454c-4dd3-8753-207eb0630133"],

Cell[TextData[{
 "Recall from the previous section that the Wolfram Language function ",
 StyleBox[ButtonBox["Binomial",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Binomial"], "FunctionLink"],
 " can be used to compute ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {"n"},
      {"k"}
     }], ")"}], TraditionalForm]],ExpressionUUID->
  "38b4d0ff-a4f8-4618-9be2-1385ed32c30e"],
 ", which is another notation for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "(", 
    RowBox[{"n", ",", "k"}], ")"}], TraditionalForm]],ExpressionUUID->
  "f9ac698a-9903-4568-b8bc-7cc370717267"],
 ". The ",
 StyleBox[ButtonBox["Binomial",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Binomial"], "FunctionLink"],
 " function is in fact more general than the binomial coefficients described \
in the textbook, as it will compute coefficients that appear in Newton\
\[CloseCurlyQuote]s generalized binomial theorem. The generalization is \
beyond the scope of this manual, but be aware that the function may return \
values even for inputs that you might expect should cause an error."
}], "Text",ExpressionUUID->"1e795f49-069f-4d76-b999-4b07b6615b88"],

Cell["\<\
Here, we will consider questions such as Examples 2 through 4 from Section \
6.4 of the textbook. \
\>", "Text",ExpressionUUID->"4837dc67-b77b-4948-965f-2cc3d66daf62"],

Cell[TextData[{
 "First, consider the problem of expanding ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"x", "+", "y"}], ")"}], "5"], TraditionalForm]],ExpressionUUID->
  "43d22e4a-10f6-4ca4-a1f4-aa60bd07ef8e"],
 ". In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", this can be done easily with ",
 StyleBox[ButtonBox["Expand",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Expand"], "FunctionLink"],
 ". The ",
 StyleBox[ButtonBox["Expand",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Expand"], "FunctionLink"],
 " function requires one argument, an algebraic expression. It returns the \
result of expanding the expression, that is, of distributing products over \
sums."
}], "Text",ExpressionUUID->"324b3838-21d4-4d70-b66f-b9d66ddd7870"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", "+", "y"}], ")"}], "^", "5"}], "]"}]], "Input",
 CellLabel->"In[68]:=",ExpressionUUID->"22cd323d-1dd7-4cb0-982a-0805681b8c78"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["x", "5"], "+", 
  RowBox[{"5", " ", 
   SuperscriptBox["x", "4"], " ", "y"}], "+", 
  RowBox[{"10", " ", 
   SuperscriptBox["x", "3"], " ", 
   SuperscriptBox["y", "2"]}], "+", 
  RowBox[{"10", " ", 
   SuperscriptBox["x", "2"], " ", 
   SuperscriptBox["y", "3"]}], "+", 
  RowBox[{"5", " ", "x", " ", 
   SuperscriptBox["y", "4"]}], "+", 
  SuperscriptBox["y", "5"]}]], "Output",
 CellLabel->"Out[68]=",ExpressionUUID->"de9e2d9a-b4e5-4d04-b88b-d33087854b77"]
}, Open  ]],

Cell[TextData[{
 "Now, consider the question of finding the coefficient of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "18"], 
    SuperscriptBox["y", "12"]}], TraditionalForm]],ExpressionUUID->
  "5165fece-b102-4a01-93cd-faf19f446d35"],
 " in the expansion of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"x", "+", "y"}], ")"}], "30"], TraditionalForm]],ExpressionUUID->
  "58de475f-05dd-4b96-8623-254e20be3e5a"],
 ". The binomial theorem tells us that this coefficient is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", GridBox[{
      {"30"},
      {"12"}
     }], ")"}], TraditionalForm]],ExpressionUUID->
  "5728b45c-126c-4dde-936a-029a57818569"],
 ". The ",
 StyleBox[ButtonBox["Binomial",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Binomial"], "FunctionLink"],
 " function with first argument 30 and second 12 will produce this value."
}], "Text",ExpressionUUID->"16b65481-86c1-4444-9a1c-197b482013ca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Binomial", "[", 
  RowBox[{"30", ",", "12"}], "]"}]], "Input",
 CellLabel->"In[69]:=",ExpressionUUID->"80c5d836-158b-4a49-8328-39f91bce84c7"],

Cell[BoxData["86493225"], "Output",
 CellLabel->"Out[69]=",ExpressionUUID->"729e3ace-f498-4dac-a561-329aa53a800a"]
}, Open  ]],

Cell[TextData[{
 "Thus, the expansion of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"x", "+", "y"}], ")"}], "30"], TraditionalForm]],ExpressionUUID->
  "aba92f6c-d26f-4d17-a554-e1cc8764e1a8"],
 " contains the term ",
 Cell[BoxData[
  FormBox[
   RowBox[{"86493225", 
    SuperscriptBox["x", "18"], 
    SuperscriptBox["y", "12"]}], TraditionalForm]],ExpressionUUID->
  "30124efb-f879-4449-abcf-b14f5094c4ab"],
 "."
}], "Text",ExpressionUUID->"be2b0c8a-ab2a-4c62-9c5f-8752ddea79ea"],

Cell[TextData[{
 "Finding the coefficient of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "12"], 
    SuperscriptBox["y", "13"]}], TraditionalForm]],ExpressionUUID->
  "64ef6f90-5862-4038-ad04-1d18b27c362d"],
 " in the expansion of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", "x"}], "-", 
      RowBox[{"3", "y"}]}], ")"}], "25"], TraditionalForm]],ExpressionUUID->
  "3f5ea6c4-a5d4-423b-a7d8-4e9824e98bc8"],
 " requires that we include the coefficients of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "0b56d52f-598c-45a9-b7d5-8eaa61f66f2c"],
 " and ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "5240218a-9e6d-4e0b-8e8f-ec4acffe27ee"],
 " in the computation. As explained in the solution to Example 4 of the text, \
the expansion is"
}], "Text",ExpressionUUID->"88cdbccd-2c18-4590-a521-6d6f9ea81fba"],

Cell[BoxData[
 FormBox[
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", "x"}], "+", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "3"}], "y"}], ")"}]}], ")"}], "25"], "=", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"j", "=", "0"}], "25",
     LimitsPositioning->False], 
    RowBox[{
     RowBox[{"(", GridBox[{
        {"25"},
        {"j"}
       }], ")"}], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"2", "x"}], ")"}], 
      RowBox[{"25", "-", "j"}]], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "3"}], "y"}], ")"}], "j"]}]}]}], 
  TraditionalForm]], "Equation",ExpressionUUID->"87476a82-4e51-468e-8ab4-\
dffc7526efbf"],

Cell[TextData[{
 "The coefficient of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "12"], 
    SuperscriptBox["y", "13"]}], TraditionalForm]],ExpressionUUID->
  "47d7cad7-c829-4fbf-b17f-2dbf01863592"],
 " is found by taking ",
 Cell[BoxData[
  FormBox[
   RowBox[{"j", "=", "13"}], TraditionalForm]],ExpressionUUID->
  "82ce1857-f48a-4ec7-8ad5-f77086513fa0"],
 ":"
}], "Text",ExpressionUUID->"57b4939e-dc5e-45bb-b27c-a112f5586749"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"(", GridBox[{
      {"25"},
      {"13"}
     }], ")"}], 
   SuperscriptBox["2", "12"], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "3"}], ")"}], "13"]}], TraditionalForm]], "Equation",Express\
ionUUID->"5cf1c575-62f4-4485-8b79-a19c781c4113"],

Cell["This is", "Text",ExpressionUUID->"487f773b-0fbe-4d31-9dab-c43774e578e5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Binomial", "[", 
   RowBox[{"25", ",", "13"}], "]"}], "*", 
  RowBox[{"2", "^", "12"}], "*", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"-", "3"}], ")"}], "^", "13"}]}]], "Input",
 CellLabel->"In[70]:=",ExpressionUUID->"f4ad569e-a48e-4619-bed3-a3f80bc4630e"],

Cell[BoxData[
 RowBox[{"-", "33959763545702400"}]], "Output",
 CellLabel->"Out[70]=",ExpressionUUID->"54c489b9-f734-4dab-b90b-8721f84d8f89"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pascal\[CloseCurlyQuote]s Triangle", "Subsection",
 CellTags->"Section4b",ExpressionUUID->"e9d91012-712b-4ddf-bd40-cef9f66d4533"],

Cell[TextData[{
 "As we have seen, it is very easy to compute binomial coefficients with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". To compute row ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "51e8d32e-814f-4fe3-aef5-125b06a2a016"],
 " of Pascal\[CloseCurlyQuote]s triangle, we apply the ",
 StyleBox[ButtonBox["Binomial",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Binomial"], "FunctionLink"],
 " function with the second argument ranging from 0 to ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "de613396-e348-4da3-b2ce-a5eb75fb3e6c"],
 ". This can be done with the ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " function. For example, the 25th row of Pascal\[CloseCurlyQuote]s triangle \
is shown below."
}], "Text",ExpressionUUID->"42ade653-70da-4461-873a-90bde97a1b22"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Binomial", "[", 
    RowBox[{"25", ",", "n"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "25"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[71]:=",ExpressionUUID->"3fa65bd6-c168-4c93-b4ce-088131a1a9da"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "25", ",", "300", ",", "2300", ",", "12650", ",", "53130", ",", 
   "177100", ",", "480700", ",", "1081575", ",", "2042975", ",", "3268760", 
   ",", "4457400", ",", "5200300", ",", "5200300", ",", "4457400", ",", 
   "3268760", ",", "2042975", ",", "1081575", ",", "480700", ",", "177100", 
   ",", "53130", ",", "12650", ",", "2300", ",", "300", ",", "25", ",", "1"}],
   "}"}]], "Output",
 CellLabel->"Out[71]=",ExpressionUUID->"819c8864-d14f-4168-ad6e-e8996386c803"]
}, Open  ]],

Cell["\<\
When calculating a single binomial coefficient or an isolated row, applying \
the formula may be the most efficient approach. However, if you wish to build \
a sizable portion of Pascal\[CloseCurlyQuote]s triangle, making use of Pascal\
\[CloseCurlyQuote]s identity (Theorem 2 of Section 6.4) and the symmetry \
property (Corollary 2 of Section 6.3) can be more effective. \
\>", "Text",ExpressionUUID->"8ff10fd8-353b-424b-95fe-51326705f19e"],

Cell[TextData[{
 "In this subsection, we will write two functions for computing binomial \
coefficients. The first will simply apply the formula ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"n", "!"}], 
    RowBox[{
     RowBox[{"k", "!"}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"n", "-", "k"}], ")"}], "!"}]}]], TraditionalForm]],
  ExpressionUUID->"ffd01994-08e1-4212-bff1-adc0a5ad7b08"],
 ". The second will be a recursive function making use of Pascal\
\[CloseCurlyQuote]s identity and symmetry. Then, we will compare the \
performance of the two functions in building Pascal\[CloseCurlyQuote]s \
triangle."
}], "Text",ExpressionUUID->"e9e0864c-41f0-491c-a6d0-24aacadf134d"],

Cell[TextData[{
 "The first function will be a straightforward application of the formula. We \
name it ",
 StyleBox["binomialF", "Code"],
 " (for formula)."
}], "Text",ExpressionUUID->"0e93157c-0342-4778-ba73-df494aee55ab"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"binomialF", "[", 
    RowBox[{"n_Integer", ",", "k_Integer"}], "]"}], "/;", 
   RowBox[{"0", "\[LessEqual]", "k", "\[LessEqual]", "n"}]}], ":=", 
  RowBox[{
   RowBox[{"n", "!"}], "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"k", "!"}], "*", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"n", "-", "k"}], ")"}], "!"}]}], ")"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[72]:=",ExpressionUUID->"ade244b6-8477-469e-bbe2-ed0e2141c0b8"],

Cell[CellGroupData[{

Cell["A Recursive Function", "Subsubsection",ExpressionUUID->"a3e2c692-e5b0-4554-a4bf-29a639309a97"],

Cell[TextData[{
 "The second function will be called ",
 StyleBox["binomialR", "Code"],
 " (for recursive). Recall Pascal\[CloseCurlyQuote]s identity:"
}], "Text",ExpressionUUID->"c7666db3-0ad8-4518-8b26-16b156a4ecf4"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"(", GridBox[{
      {
       RowBox[{"n", "+", "1"}]},
      {"k"}
     }], ")"}], "=", 
   RowBox[{
    RowBox[{"(", GridBox[{
       {"n"},
       {
        RowBox[{"k", "-", "1"}]}
      }], ")"}], "+", 
    RowBox[{
     RowBox[{"(", GridBox[{
        {"n"},
        {"k"}
       }], ")"}], "."}]}]}], TraditionalForm]], "Equation",ExpressionUUID->\
"a864a0e8-150a-47d6-a42e-2758a776c55c"],

Cell[TextData[{
 "Rewriting this in terms of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "aa59edf0-ddb2-4bdc-9d86-8e5bd97853e6"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "6d69b7b3-ae0a-4a6c-bc3c-9c5d2deb4461"],
 ", we have"
}], "Text",ExpressionUUID->"a322d808-f9c2-4ecb-97f6-406b093e1579"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"(", GridBox[{
      {"n"},
      {"k"}
     }], ")"}], "=", 
   RowBox[{
    RowBox[{"(", GridBox[{
       {
        RowBox[{"n", "-", "1"}]},
       {
        RowBox[{"k", "-", "1"}]}
      }], ")"}], "+", 
    RowBox[{
     RowBox[{"(", GridBox[{
        {
         RowBox[{"n", "-", "1"}]},
        {"k"}
       }], ")"}], "."}]}]}], TraditionalForm]], "Equation",ExpressionUUID->\
"346c705d-beb1-4569-baa1-d41d10bc418b"],

Cell["\<\
Recall also that the binomial coefficients are symmetric, that is,\
\>", "Text",ExpressionUUID->"7f9d4c08-034a-44f4-b8dd-80de5c350ecb"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"(", GridBox[{
      {"n"},
      {"k"}
     }], ")"}], "=", 
   RowBox[{
    RowBox[{"(", GridBox[{
       {"n"},
       {
        RowBox[{"n", "-", "k"}]}
      }], ")"}], "."}]}], TraditionalForm]], "Equation",ExpressionUUID->\
"e243f035-37af-4096-95b8-d66c7ac8cd27"],

Cell[TextData[{
 "With these facts in mind, our recursive function will work as follows. It \
will be designed to store values in an indexed variable with the same name as \
the function, ",
 StyleBox["binomialR", "Code"],
 ". The body of the function will consist of a ",
 StyleBox[ButtonBox["Which",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Which"], "FunctionLink"],
 " statement. In case the second argument is 0, the result is 1. That forms \
the basis case of the recursion. The second possibility is that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"2", "k"}], ">", "n"}], TraditionalForm]],ExpressionUUID->
  "497dc2d1-f023-4a2d-9d4b-8331a26179d9"],
 ". In this case, we make use of symmetry and call ",
 StyleBox["binomialR", "Code"],
 " on ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "25cef170-0095-4116-8ffe-872e4968059b"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "k"}], TraditionalForm]],ExpressionUUID->
  "ec3db40b-9e84-4f3b-8d26-ee8f5a21df2f"],
 ". Finally, if neither of those conditions are met, we apply Pascal\
\[CloseCurlyQuote]s identity, making recursive calls to ",
 StyleBox["binomialR", "Code"],
 ". Here is the implementation."
}], "Text",ExpressionUUID->"8e07cd34-7cf4-4dad-a136-d4359053d876"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"binomialR", "[", 
    RowBox[{"n_Integer", ",", "k_Integer"}], "]"}], "/;", 
   RowBox[{"0", "\[LessEqual]", "k", "\[LessEqual]", "n"}]}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Which", "[", 
     RowBox[{
      RowBox[{"k", "\[Equal]", "0"}], ",", 
      RowBox[{
       RowBox[{"binomialR", "[", 
        RowBox[{"n", ",", "k"}], "]"}], "=", "1"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"2", "*", "k"}], ">", "n"}], ",", 
      RowBox[{
       RowBox[{"binomialR", "[", 
        RowBox[{"n", ",", "k"}], "]"}], "=", 
       RowBox[{"binomialR", "[", 
        RowBox[{"n", ",", 
         RowBox[{"n", "-", "k"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      "True", ",", 
      RowBox[{
       RowBox[{"binomialR", "[", 
        RowBox[{"n", ",", "k"}], "]"}], "=", 
       RowBox[{
        RowBox[{"binomialR", "[", 
         RowBox[{
          RowBox[{"n", "-", "1"}], ",", 
          RowBox[{"k", "-", "1"}]}], "]"}], "+", 
        RowBox[{"binomialR", "[", 
         RowBox[{
          RowBox[{"n", "-", "1"}], ",", "k"}], "]"}]}]}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->"In[73]:=",ExpressionUUID->"dfe2baa1-f92a-4554-9c3c-d38636bea32a"],

Cell[TextData[{
 "We use our two functions to build Pascal\[CloseCurlyQuote]s triangle using \
a ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " with two loop variables. We use the ",
 StyleBox[ButtonBox["Column",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Column"], "FunctionLink"],
 " function with ",
 StyleBox[ButtonBox["Center",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Center"], "FunctionLink"],
 " as second argument to give the table its usual triangular form."
}], "Text",ExpressionUUID->"619e1e6b-ada0-424d-a4da-f104f25909cd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Column", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"binomialF", "[", 
      RowBox[{"n", ",", "k"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "0", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "0", ",", "n"}], "}"}]}], "]"}], ",", "Center"}], 
  "]"}]], "Input",
 CellLabel->"In[74]:=",ExpressionUUID->"bfb0bb16-2cb0-4cea-a01f-68d4d1c2d86b"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"{", "1", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "1"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "3", ",", "1"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "4", ",", "6", ",", "4", ",", "1"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "5", ",", "10", ",", "10", ",", "5", ",", "1"}], "}"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Center}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellLabel->"Out[74]=",ExpressionUUID->"ab1f2008-940a-4eb3-b8a5-3594e46a68ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Column", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"binomialR", "[", 
      RowBox[{"n", ",", "k"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "0", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "0", ",", "n"}], "}"}]}], "]"}], ",", "Center"}], 
  "]"}]], "Input",
 CellLabel->"In[75]:=",ExpressionUUID->"b395a3b1-0988-44c7-820d-edb535bf0059"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"{", "1", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "1"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "3", ",", "1"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "4", ",", "6", ",", "4", ",", "1"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "5", ",", "10", ",", "10", ",", "5", ",", "1"}], "}"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Center}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellLabel->"Out[75]=",ExpressionUUID->"aafe35db-cc03-4350-99f2-e8be54b7a59a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Comparing Performance", "Subsubsection",ExpressionUUID->"9389b2ff-3ead-449d-9cc6-79b50abe3042"],

Cell["Now, we compare the performance of the two functions.", "Text",ExpressionUUID->"2888ba18-a48b-4521-bed3-20f718614971"],

Cell[TextData[{
 "First, we use each of them to compute the first 1000 rows of Pascal\
\[CloseCurlyQuote]s triangle and compare the time it takes. We use ",
 StyleBox[ButtonBox["Clear",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Clear"], "FunctionLink"],
 " and redefine ",
 StyleBox["binomialR", "Code"],
 " in order to remove any values already stored so that the comparison is \
fair."
}], "Text",ExpressionUUID->"361aaded-5e38-46de-9caa-02b5a122f124"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"binomialF", "[", 
      RowBox[{"n", ",", "k"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "0", ",", "1000"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "0", ",", "n"}], "}"}]}], "]"}], ";"}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->"In[76]:=",ExpressionUUID->"1d668d4a-e591-48d5-9c16-82c23994c89c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5.770067`", ",", "Null"}], "}"}]], "Output",
 CellLabel->"Out[76]=",ExpressionUUID->"adcc5d20-3621-4589-a9c8-266ac0305672"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "binomialR", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"binomialR", "[", 
     RowBox[{"n_Integer", ",", "k_Integer"}], "]"}], "/;", 
    RowBox[{"0", "\[LessEqual]", "k", "\[LessEqual]", "n"}]}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{"k", "\[Equal]", "0"}], ",", 
       RowBox[{
        RowBox[{"binomialR", "[", 
         RowBox[{"n", ",", "k"}], "]"}], "=", "1"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"2", "*", "k"}], ">", "n"}], ",", 
       RowBox[{
        RowBox[{"binomialR", "[", 
         RowBox[{"n", ",", "k"}], "]"}], "=", 
        RowBox[{"binomialR", "[", 
         RowBox[{"n", ",", 
          RowBox[{"n", "-", "k"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       "True", ",", 
       RowBox[{
        RowBox[{"binomialR", "[", 
         RowBox[{"n", ",", "k"}], "]"}], "=", 
        RowBox[{
         RowBox[{"binomialR", "[", 
          RowBox[{
           RowBox[{"n", "-", "1"}], ",", 
           RowBox[{"k", "-", "1"}]}], "]"}], "+", 
         RowBox[{"binomialR", "[", 
          RowBox[{
           RowBox[{"n", "-", "1"}], ",", "k"}], "]"}]}]}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Timing", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"binomialR", "[", 
      RowBox[{"n", ",", "k"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "0", ",", "1000"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "0", ",", "n"}], "}"}]}], "]"}], ";"}], 
  "\[IndentingNewLine]", "]"}]}], "Input",
 CellLabel->"In[77]:=",ExpressionUUID->"42ea3608-d4c0-4a81-be05-788524ad11dc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3.098086`", ",", "Null"}], "}"}]], "Output",
 CellLabel->"Out[79]=",ExpressionUUID->"8ff525b9-0ca2-4242-8918-96a634129ae8"]
}, Open  ]],

Cell["\<\
You see that the difference between the two performance of the two functions \
is substantial. \
\>", "Text",ExpressionUUID->"552012ba-4dbb-4768-a955-75f1fc8c145d"],

Cell[TextData[{
 "However, if we compute some isolated values, the situation is reversed. We \
will generate some random values of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "802ed740-6612-4d11-9df1-14db0949bf58"],
 " between 100 and 200 and random values of ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "90c7ce14-348c-45fb-b3b3-513ce342d5c8"],
 " between 0 and the corresponding value of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "ad4f4dc8-a520-4538-9f8a-69c12098fdb8"],
 ". "
}], "Text",ExpressionUUID->"875e1d0b-dc0c-4a06-931c-ba014720c6f5"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["RandomInteger",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomInteger"], "FunctionLink"],
 " function applied to an integer outputs a random integer between 0 and that \
value, and given a pair ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], TraditionalForm]],ExpressionUUID->
  "392a82eb-49af-42b9-bb08-bce252815c45"],
 ", it returns a randomly selected integer between ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "6c5d1812-501c-46c3-b8b1-9130f8ce4187"],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "61eadc79-a35f-47f2-88ff-c2a0e0ffb1c4"],
 ". With a positive integer as a second argument, the function will produce \
that many random integers in the selected range."
}], "Text",ExpressionUUID->"fed496cd-cda7-47fa-aa65-3a6f55b1b523"],

Cell[TextData[{
 "To produce 100 random values of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "0ea15a3f-8b89-47ed-b10a-265c4a80c718"],
 ", we simply call ",
 StyleBox[ButtonBox["RandomInteger",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomInteger"], "FunctionLink"],
 " on the range ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"100", ",", "200"}], "}"}], TraditionalForm]],ExpressionUUID->
  "5836f17c-478a-4fd4-8412-ab43efc8b88a"],
 " and the number 100 and assign the resulting list of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "52c76509-1b87-4745-bdd9-e6c837825d88"],
 " values to the symbol ",
 StyleBox["randomNs", "Code"],
 "."
}], "Text",ExpressionUUID->"b33ceaa7-1762-4225-99b2-074dba5df1fd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"randomNs", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"100", ",", "200"}], "}"}], ",", "100"}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[80]:=",ExpressionUUID->"fce4fd9d-dd64-4d13-9f86-61b26ccf5569"],

Cell[TextData[{
 "To produce the list of values of ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "a00c8400-91ab-4573-9e62-9069593d6d19"],
 ", we use ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 ". Each value of ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "47661164-642e-4261-9e1d-f3d59e1be930"],
 " will be found by applying ",
 StyleBox[ButtonBox["RandomInteger",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomInteger"], "FunctionLink"],
 " to the value found in ",
 StyleBox["randomNs", "Code"],
 ". That way, the values of ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "0631021e-b6ea-401c-aa5e-e9ea7b842a89"],
 " will be between 0 and the corresponding value of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "2d49a73c-d4bb-4bee-9d75-f34266e9c841"],
 "."
}], "Text",ExpressionUUID->"59b90be7-fe72-40c8-a44d-88c787786df0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"randomKs", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"randomNs", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "100"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[81]:=",ExpressionUUID->"08ad26db-6d3c-4b49-87cd-20cca64a68b6"],

Cell[TextData[{
 "We can time the performance of ",
 StyleBox["binomialF", "Code"],
 " simply by applying the function to the pairs of values."
}], "Text",ExpressionUUID->"ec92701f-72a9-4394-83ec-451465b8b058"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"binomialF", "[", 
      RowBox[{
       RowBox[{"randomNs", "[", 
        RowBox[{"[", "i", "]"}], "]"}], ",", 
       RowBox[{"randomKs", "[", 
        RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "100"}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]",
   "]"}]], "Input",
 CellLabel->"In[82]:=",ExpressionUUID->"d731efb1-8935-4e22-848b-3032f8175b17"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00075`", ",", "Null"}], "}"}]], "Output",
 CellLabel->"Out[82]=",ExpressionUUID->"5f1bde47-5e83-4b94-b128-e6adb8ec26d3"]
}, Open  ]],

Cell[TextData[{
 "To check the performance of the recursive function, we must again ",
 StyleBox[ButtonBox["Clear",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Clear"], "FunctionLink"],
 " and redefine the function, as it currently stores the entire table up to \
",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", "1000"}], TraditionalForm]],ExpressionUUID->
  "8884bf81-5b27-4638-b741-adb1168b44f6"],
 ". We also override ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s recursion limit, ",
 StyleBox[ButtonBox["$RecursionLimit",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/$RecursionLimit"], "FunctionLink"],
 ", to avoid errors based on the depth of the recursion we are attempting. \
This was not necessary when computing the table through row 1000 above, \
because each row was computed in turn and thus each individual computation \
had to look only one row down to find a known value. We set the recursion \
limit inside of a ",
 StyleBox[ButtonBox["Block",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Block"], "FunctionLink"],
 " to localize the override."
}], "Text",ExpressionUUID->"b92e80b0-6c71-4e52-a2a4-66ed0d8d51af"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "binomialR", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"binomialR", "[", 
     RowBox[{"n_Integer", ",", "k_Integer"}], "]"}], "/;", 
    RowBox[{"0", "\[LessEqual]", "k", "\[LessEqual]", "n"}]}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{"k", "\[Equal]", "0"}], ",", 
       RowBox[{
        RowBox[{"binomialR", "[", 
         RowBox[{"n", ",", "k"}], "]"}], "=", "1"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"2", "*", "k"}], ">", "n"}], ",", 
       RowBox[{
        RowBox[{"binomialR", "[", 
         RowBox[{"n", ",", "k"}], "]"}], "=", 
        RowBox[{"binomialR", "[", 
         RowBox[{"n", ",", 
          RowBox[{"n", "-", "k"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       "True", ",", 
       RowBox[{
        RowBox[{"binomialR", "[", 
         RowBox[{"n", ",", "k"}], "]"}], "=", 
        RowBox[{
         RowBox[{"binomialR", "[", 
          RowBox[{
           RowBox[{"n", "-", "1"}], ",", 
           RowBox[{"k", "-", "1"}]}], "]"}], "+", 
         RowBox[{"binomialR", "[", 
          RowBox[{
           RowBox[{"n", "-", "1"}], ",", "k"}], "]"}]}]}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"$RecursionLimit", "=", "Infinity"}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Timing", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"binomialR", "[", 
        RowBox[{
         RowBox[{"randomNs", "[", 
          RowBox[{"[", "i", "]"}], "]"}], ",", 
         RowBox[{"randomKs", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "100"}], "}"}]}], "]"}], ";"}], 
    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellLabel->"In[83]:=",ExpressionUUID->"de930464-2845-4f9d-a539-9cca80dfd0c0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.063055`", ",", "Null"}], "}"}]], "Output",
 CellLabel->"Out[85]=",ExpressionUUID->"d457d331-4284-46aa-ae20-6a4052bb5dd9"]
}, Open  ]],

Cell[TextData[{
 "The reason for the difference in relative performance is that when \
generating Pascal\[CloseCurlyQuote]s triangle, all of the values beginning \
with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", "0"}], TraditionalForm]],ExpressionUUID->
  "96627d87-9895-4850-84c7-9f969740bb92"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "=", "0"}], TraditionalForm]],ExpressionUUID->
  "01198bdd-7077-4921-8821-bbb06b6e31cc"],
 " needed to be calculated. On the other hand, when calculating isolated \
values, the recursive function still had to calculate all of the results for \
lower values of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "dc007ddd-9ec4-47cb-9634-4178326b80b5"],
 " and ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "5d471289-c857-485b-bd3d-b3533f804a00"],
 ", which the ",
 StyleBox["nonrecursive",
  IgnoreSpellCheck->True],
 " function did not need to compute."
}], "Text",ExpressionUUID->"4c1e0eca-3042-447d-9b31-2111ba7e4ee4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Verifying Identities", "Subsection",
 CellTags->"Section4c",ExpressionUUID->"dcf686a4-0010-4064-ab6f-269f0c7d91d8"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can help verify identities involving the binomial coefficients. If you \
enter an expression using the ",
 StyleBox[ButtonBox["Binomial",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Binomial"], "FunctionLink"],
 " function and include symbolic arguments, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will try to simplify the expression algebraically. First, we ensure that \
",
 StyleBox["n", "Code"],
 " and ",
 StyleBox["k", "Code"],
 " are unassigned."
}], "Text",ExpressionUUID->"f2e07005-1941-431f-a98a-18db20aedccc"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"n", ",", "k"}], "]"}]], "Input",
 CellLabel->"In[86]:=",ExpressionUUID->"196a0a42-f299-4d84-961a-95c91b1a5639"],

Cell[TextData[{
 "For example, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can transform ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "(", 
    RowBox[{"n", ",", "3"}], ")"}], TraditionalForm]],ExpressionUUID->
  "e2e7e93b-dc89-4945-af4e-879b92a611a6"],
 " into an algebraic expression."
}], "Text",ExpressionUUID->"e8e773a2-df72-4a74-b01d-b898bbdb9e74"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Binomial", "[", 
  RowBox[{"n", ",", "3"}], "]"}]], "Input",
 CellLabel->"In[87]:=",ExpressionUUID->"7af6417f-a830-46fa-b3b7-4d83d0171470"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "6"], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "2"}], "+", "n"}], ")"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "+", "n"}], ")"}], " ", "n"}]], "Output",
 CellLabel->"Out[87]=",ExpressionUUID->"138e5199-a519-49d0-ac13-65c3e2f80275"]
}, Open  ]],

Cell["\<\
More general expressions, however, will be left unsimplified.\
\>", "Text",ExpressionUUID->"59935772-66bb-44de-b7f5-bbc872b0c4c3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Binomial", "[", 
  RowBox[{"n", ",", "k"}], "]"}]], "Input",
 CellLabel->"In[88]:=",ExpressionUUID->"4c8540bb-ab32-468c-92ef-d6a30b49f6f4"],

Cell[BoxData[
 RowBox[{"Binomial", "[", 
  RowBox[{"n", ",", "k"}], "]"}]], "Output",
 CellLabel->"Out[88]=",ExpressionUUID->"03c85d44-6eaa-4428-a065-4015dba83ef8"]
}, Open  ]],

Cell[TextData[{
 "However, we can force ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to unwind this general expression into its formula with the ",
 StyleBox[ButtonBox["FunctionExpand",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FunctionExpand"], "FunctionLink"],
 " function. ",
 StyleBox[ButtonBox["FunctionExpand",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FunctionExpand"], "FunctionLink"],
 " is a way to insist that certain complex functions, such as ",
 StyleBox[ButtonBox["Binomial",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Binomial"], "FunctionLink"],
 ", are expanded when doing so might allow further simplification. Observe \
what happens:"
}], "Text",ExpressionUUID->"0e587251-d8ac-4e91-88b4-2d7695f4281c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FunctionExpand", "[", 
  RowBox[{"Binomial", "[", 
   RowBox[{"n", ",", "k"}], "]"}], "]"}]], "Input",
 CellLabel->"In[89]:=",ExpressionUUID->"36ebcec7-f161-4531-bb22-376e839aad89"],

Cell[BoxData[
 FractionBox[
  RowBox[{"Gamma", "[", 
   RowBox[{"1", "+", "n"}], "]"}], 
  RowBox[{
   RowBox[{"Gamma", "[", 
    RowBox[{"1", "+", "k"}], "]"}], " ", 
   RowBox[{"Gamma", "[", 
    RowBox[{"1", "-", "k", "+", "n"}], "]"}]}]]], "Output",
 CellLabel->"Out[89]=",ExpressionUUID->"a2c608fa-c670-407b-a671-f13dea33b547"]
}, Open  ]],

Cell[TextData[{
 "A complete description of the gamma function is beyond the scope of this \
manual. Suffice it to say that for positive integers, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[CapitalGamma]", "(", "n", ")"}], "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"n", "-", "1"}], ")"}], "!"}]}], TraditionalForm]],
  ExpressionUUID->"5bcb3a5a-2cca-4815-b909-6e015f3c02c1"],
 ". Because we are concerned only with the domain of positive integers, we \
can transform the expression above into its more typical form by applying ",
 StyleBox[ButtonBox["ReplaceAll",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReplaceAll"], "FunctionLink"],
 " (",
 StyleBox["/.", "Code"],
 ") and the rule \[CapitalGamma](n)=(n-1)!."
}], "Text",ExpressionUUID->"6b3fd1b6-d149-4e3d-a70e-488af79c0c28"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FunctionExpand", "[", 
   RowBox[{"Binomial", "[", 
    RowBox[{"n", ",", "k"}], "]"}], "]"}], "/.", 
  RowBox[{
   RowBox[{"Gamma", "[", "n_", "]"}], "\[Rule]", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"n", "-", "1"}], ")"}], "!"}]}]}]], "Input",
 CellLabel->"In[90]:=",ExpressionUUID->"ae823859-a8a0-484f-aa92-f934379988d9"],

Cell[BoxData[
 FractionBox[
  RowBox[{"n", "!"}], 
  RowBox[{
   RowBox[{"k", "!"}], " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "k"}], "+", "n"}], ")"}], "!"}]}]]], "Output",
 CellLabel->"Out[90]=",ExpressionUUID->"de5df45f-587f-4bd4-8f78-d6e958a42f91"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Verifying Symmetry", "Subsubsection",ExpressionUUID->"06cff0e2-a6b3-4c38-b13a-1d475b80cd09"],

Cell[TextData[{
 "As a first example, we verify the identity ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"C", "(", 
     RowBox[{"n", ",", "k"}], ")"}], "=", 
    RowBox[{"C", "(", 
     RowBox[{"n", ",", 
      RowBox[{"n", "-", "k"}]}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "642e651e-46ee-433e-a636-bc8594929eff"],
 ", the symmetry identity."
}], "Text",ExpressionUUID->"ae9ac8e1-49e8-45c7-b1f7-2e89b06f0b89"],

Cell["\<\
Assign names to the left- and right-hand sides of the identity. \
\>", "Text",ExpressionUUID->"682849f4-cf3f-4853-84c5-3a402985a766"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"left", "=", 
  RowBox[{"Binomial", "[", 
   RowBox[{"n", ",", "k"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[91]:=",ExpressionUUID->"4160cc52-3ff2-40c9-b750-1c04c3bc28e0"],

Cell[BoxData[
 RowBox[{"Binomial", "[", 
  RowBox[{"n", ",", "k"}], "]"}]], "Output",
 CellLabel->"Out[91]=",ExpressionUUID->"e6ed6fac-d271-4b8c-96b6-3bb34536d2e1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"right", "=", 
  RowBox[{"Binomial", "[", 
   RowBox[{"n", ",", 
    RowBox[{"n", "-", "k"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[92]:=",ExpressionUUID->"80acad41-d14c-4316-805f-8b0e659d1374"],

Cell[BoxData[
 RowBox[{"Binomial", "[", 
  RowBox[{"n", ",", 
   RowBox[{
    RowBox[{"-", "k"}], "+", "n"}]}], "]"}]], "Output",
 CellLabel->"Out[92]=",ExpressionUUID->"3966dd47-e8ec-4da4-be9c-7ba72724035f"]
}, Open  ]],

Cell[TextData[{
 "Note that if you simply try to apply ",
 StyleBox[ButtonBox["Equal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equal"], "FunctionLink"],
 " (",
 StyleBox["==", "Code"],
 "), ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will simply echo the expressions, indicating that it is not able to \
confirm that the expressions are equal or not."
}], "Text",ExpressionUUID->"179c2187-b8f0-4847-a71f-8e0777badbc9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"left", "\[Equal]", "right"}]], "Input",
 CellLabel->"In[93]:=",ExpressionUUID->"17cf80e9-3b50-4d93-a113-af58cc53b725"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Binomial", "[", 
   RowBox[{"n", ",", "k"}], "]"}], "\[Equal]", 
  RowBox[{"Binomial", "[", 
   RowBox[{"n", ",", 
    RowBox[{
     RowBox[{"-", "k"}], "+", "n"}]}], "]"}]}]], "Output",
 CellLabel->"Out[93]=",ExpressionUUID->"8ba1043a-bfe9-4aaa-aebf-0418cef74000"]
}, Open  ]],

Cell[TextData[{
 "In addition, ",
 StyleBox[ButtonBox["SameQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SameQ"], "FunctionLink"],
 " (",
 StyleBox["===", "Code"],
 ") will return ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 ", since the expressions are not identical."
}], "Text",ExpressionUUID->"298c545b-552b-4e7c-8347-2399640be168"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"left", "===", "right"}]], "Input",
 CellLabel->"In[94]:=",ExpressionUUID->"246ec84e-8cae-48bc-99da-e50050bf8cbd"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[94]=",ExpressionUUID->"63b4a7de-cd1d-48a7-bb56-8450b7a3ba99"]
}, Open  ]],

Cell[TextData[{
 "The above examples illustrate that a great deal of care is required when \
using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to verify identities. A negative result from ",
 StyleBox[ButtonBox["SameQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SameQ"], "FunctionLink"],
 " (",
 StyleBox["===", "Code"],
 ") indicates that the expressions are not identical, while they still may be \
algebraically equivalent. Moreover, a failure of ",
 StyleBox[ButtonBox["Equal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equal"], "FunctionLink"],
 " (",
 StyleBox["==", "Code"],
 ") may mean that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " needs more direction about how to proceed."
}], "Text",ExpressionUUID->"7c57750f-023b-47fd-a58e-026676407bfc"],

Cell[TextData[{
 "In particular, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " needs to be told to expand the ",
 StyleBox[ButtonBox["Binomial",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Binomial"], "FunctionLink"],
 " function. We saw one way to this above, using ",
 StyleBox[ButtonBox["FunctionExpand",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FunctionExpand"], "FunctionLink"],
 ". ",
 StyleBox[ButtonBox["FullSimplify",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FullSimplify"], "FunctionLink"],
 " is another function that will tell ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to delve into the definition of a function and attempt to perform \
algebraic simplification. Applying ",
 StyleBox[ButtonBox["FullSimplify",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FullSimplify"], "FunctionLink"],
 " to the ",
 StyleBox[ButtonBox["Equal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equal"], "FunctionLink"],
 " (",
 StyleBox["==", "Code"],
 ") test yields the correct result."
}], "Text",ExpressionUUID->"85960b01-5771-46e7-93a3-be98cd9b1849"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{"left", "\[Equal]", "right"}], "]"}]], "Input",
 CellLabel->"In[95]:=",ExpressionUUID->"b890f71e-831f-4d0b-9329-98eaadedfc5c"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[95]=",ExpressionUUID->"ed5c0371-a2c5-4eb9-aac5-3faedc53892b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["A Second Identity", "Subsubsection",ExpressionUUID->"65b47605-da2a-4697-b84c-d329a8c94a16"],

Cell["Exercise 30 in Section 6.4 asks you to prove the identity: ", "Text",ExpressionUUID->"2c09ceb6-7fac-4754-9d1e-1e0c48a8218b"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"k", "=", "1"}], "n",
     LimitsPositioning->False], 
    RowBox[{
     RowBox[{"(", GridBox[{
        {"n"},
        {"k"}
       }], ")"}], 
     RowBox[{"(", GridBox[{
        {"n"},
        {
         RowBox[{"k", "-", "1"}]}
       }], ")"}]}]}], " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", GridBox[{
        {
         RowBox[{
          RowBox[{"2", "n"}], "+", "2"}]},
        {
         RowBox[{"n", "+", "1"}]}
       }], ")"}], "/", "2"}], "-", 
    RowBox[{"(", GridBox[{
       {
        RowBox[{"2", "n"}]},
       {"n"}
      }], ")"}]}]}], TraditionalForm]], "Equation",ExpressionUUID->"41849f5a-\
4f43-4158-8dbd-d996480873ef"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will verify (but not prove) this identity for us."
}], "Text",ExpressionUUID->"734ba447-2469-4138-82ac-575816c5c0ec"],

Cell["\<\
First, we will give the right-hand side of the identity a name.\
\>", "Text",ExpressionUUID->"c04be8fa-66f9-4deb-994d-8587551aeaf4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"right2", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"Binomial", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"2", "n"}], "+", "2"}], ",", 
      RowBox[{"n", "+", "1"}]}], "]"}], "/", "2"}], "-", 
   RowBox[{"Binomial", "[", 
    RowBox[{
     RowBox[{"2", "n"}], ",", "n"}], "]"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[96]:=",ExpressionUUID->"cba2d276-3ea0-45b0-803d-aed26660371b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   RowBox[{"Binomial", "[", 
    RowBox[{
     RowBox[{"2", " ", "n"}], ",", "n"}], "]"}]}], "+", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   RowBox[{"Binomial", "[", 
    RowBox[{
     RowBox[{"2", "+", 
      RowBox[{"2", " ", "n"}]}], ",", 
     RowBox[{"1", "+", "n"}]}], "]"}]}]}]], "Output",
 CellLabel->"Out[96]=",ExpressionUUID->"d9f0dbda-e479-4842-85e7-871f52e24c50"]
}, Open  ]],

Cell[TextData[{
 "As you may have expected, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " simply echoed the expression"
}], "Text",ExpressionUUID->"e1e0d4fe-30ee-4fc2-b05e-11815639fde7"],

Cell[TextData[{
 "The left-hand side is a summation, so we apply the ",
 StyleBox[ButtonBox["Sum",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sum"], "FunctionLink"],
 " function."
}], "Text",ExpressionUUID->"a51e1b6d-8cac-4569-8b9d-c757ff102cdd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"left2", "=", 
  RowBox[{"Sum", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Binomial", "[", 
      RowBox[{"n", ",", "k"}], "]"}], "*", 
     RowBox[{"Binomial", "[", 
      RowBox[{"n", ",", 
       RowBox[{"k", "-", "1"}]}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"k", ",", "1", ",", "n"}], "}"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[97]:=",ExpressionUUID->"d1ecfe20-a50e-4bae-b092-dfc7e3ec83f3"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["4", "n"], " ", "n", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        RowBox[{"2", " ", "n"}]}], ")"}]}], ")"}], "!"}]}], 
  RowBox[{
   SqrtBox["\[Pi]"], " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "+", "n"}], ")"}], "!"}]}]]], "Output",
 CellLabel->"Out[97]=",ExpressionUUID->"c3007f64-d672-4664-babf-a1f1697bfb26"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " automatically simplified the summation and returned a closed formula."
}], "Text",ExpressionUUID->"f0721d79-d4d1-4cf5-8aba-19c00e573797"],

Cell[TextData[{
 "To verify the identity, apply ",
 StyleBox[ButtonBox["FullSimplify",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FullSimplify"], "FunctionLink"],
 " to the expression identifying the two sides of the formula. Note that ",
 StyleBox[ButtonBox["FullSimplify",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FullSimplify"], "FunctionLink"],
 " is required; using ",
 StyleBox[ButtonBox["Equal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equal"], "FunctionLink"],
 " (",
 StyleBox["==", "Code"],
 ") alone will not produce a truth value."
}], "Text",ExpressionUUID->"ae4603a5-526a-411f-b058-082b4b9ec434"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{"left2", "\[Equal]", "right2"}], "]"}]], "Input",
 CellLabel->"In[98]:=",ExpressionUUID->"46c75962-f4e0-4a0d-b627-5a29328d6d18"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[98]=",ExpressionUUID->"d29dd189-9294-43ed-a9a0-6c5e84260b67"]
}, Open  ]],

Cell[TextData[{
 "Keep in mind when using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to check identities that it will only report true when the two sides of \
the expression are algebraically equivalent. If it does report true, you can \
be confident that the identity does hold, though a truly convincing proof \
requires that you explicitly show the algebraic manipulations or provide a \
combinatorial argument justifying the equivalence."
}], "Text",ExpressionUUID->"6d4514f6-26a1-4fad-b038-f3a1ad2c1e27"],

Cell[TextData[{
 "If ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " reports false or just echoes the expression, however, even after using ",
 StyleBox[ButtonBox["FullSimplify",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FullSimplify"], "FunctionLink"],
 ", you cannot be certain whether the identity is false or if it is true but \
more manipulation is needed to recognize it. To use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to demonstrate that a purported identity is false, you would need to find \
a counterexample by computing the values of both expressions and finding \
inputs that result in different values. (Refer to Section 1.7 for examples of \
finding counterexamples.)"
}], "Text",ExpressionUUID->"6a87678f-0afe-4ccb-9ff2-9a22b4a4e3b7"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.5 Generalized Permutations and Combinations", "Section",
 CellTags->"Section5",ExpressionUUID->"6a010ab4-5820-446e-be6d-ae1fcfd47626"],

Cell["\<\
In this section, we will introduce a variety of Wolfram Language functions \
related to permutations and combinations with repetition allowed and related \
to distributing objects in boxes where the objects and the boxes may or may \
not be distinguishable.\
\>", "Text",ExpressionUUID->"29bb261b-ec5c-4535-a762-6b0108db8c11"],

Cell[CellGroupData[{

Cell["Permutations with Repetition", "Subsection",
 CellTags->"Section5a",ExpressionUUID->"9caf1e98-caa7-4d05-bf35-202ee3a565e8"],

Cell[TextData[{
 "Recall from Theorem 1 that the number of ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "8fa90158-7c70-48b2-b681-b1755e7a45dc"],
 "-permutations of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "47fc00e5-b1e0-4e7e-9d0b-0cdbb4303f59"],
 " objects is ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "r"], TraditionalForm]],ExpressionUUID->
  "5e299079-9607-4799-a262-e8e6b857b273"],
 " if repetition is allowed."
}], "Text",ExpressionUUID->"e2644928-1bab-4ec7-9aa5-2795765ff94c"],

Cell["\<\
For example, the number of strings of length 5 that can be formed from the 26 \
uppercase letters of the English alphabet is\
\>", "Text",ExpressionUUID->"da92d5cd-2ba6-4148-bbc7-6e9d16593383"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"26", "^", "5"}]], "Input",
 CellLabel->"In[99]:=",ExpressionUUID->"24351add-6e98-4ef1-9099-27c144533464"],

Cell[BoxData["11881376"], "Output",
 CellLabel->"Out[99]=",ExpressionUUID->"f11dc84a-cd0b-4894-b55a-e0d785ce7952"]
}, Open  ]],

Cell["\<\
As a second example, we compute the number of ways that four elements can be \
selected in order from a set with three elements when repetition is allowed.\
\>", "Text",ExpressionUUID->"f393a3e5-d7ec-4145-b34e-74c93020d407"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"3", "^", "4"}]], "Input",
 CellLabel->
  "In[100]:=",ExpressionUUID->"36c2c39e-e651-4ab5-be71-b28d2ceec38f"],

Cell[BoxData["81"], "Output",
 CellLabel->
  "Out[100]=",ExpressionUUID->"2ea99f7b-68ee-4f8e-a58f-573025015111"]
}, Open  ]],

Cell[TextData[{
 "Recall from the previous section that the ",
 StyleBox[ButtonBox["Permutations",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Permutations"], "FunctionLink"],
 " function accepts a list as its first argument. In case the list contains \
repeated elements, those elements are treated as identical, but are allowed \
to repeat in the permutations."
}], "Text",ExpressionUUID->"84ca36ea-f773-4430-a5e8-36ce4d90b131"],

Cell["For example, consider the expression below.", "Text",ExpressionUUID->"d9f7f155-24c8-4f8c-81a4-21e1b348af80"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Permutations", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "1", ",", "2"}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[101]:=",ExpressionUUID->"64ba172d-a6b0-4d75-8a23-37535be447b1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[101]=",ExpressionUUID->"aafb4f95-1999-4938-8267-25b597baa501"]
}, Open  ]],

Cell[TextData[{
 "Given a list of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "6b65772b-1819-4c6d-b626-ebc3e0bbae0c"],
 " not necessarily distinct objects and no second argument, the ",
 StyleBox[ButtonBox["Permutations",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Permutations"], "FunctionLink"],
 " function produces all of the ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "d12ac0a1-815f-4c06-a6e3-6e5732a609ee"],
 "-permutations of the ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "4a788eae-045f-4094-8dc6-72d9ccb69d02"],
 " objects. Note that 1 appeared twice in the input and thus appears twice in \
the results, while 2 appeared once in the input and so appears once in the \
output."
}], "Text",ExpressionUUID->"023d99b7-8baa-4353-b312-21cf3df7dec4"],

Cell["\<\
With a second argument, you can specify the length of the permutations, as \
was described in the previous section.\
\>", "Text",ExpressionUUID->"351eb8a5-4ed1-40d5-b3db-def937aee46e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Permutations", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", "2", "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[102]:=",ExpressionUUID->"77a7639f-95f4-4ef4-be17-048c9bfb47d0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[102]=",ExpressionUUID->"8a1fcec7-3f17-4845-a04c-4f8a1881aa46"]
}, Open  ]],

Cell[TextData[{
 "Since 1 appeared twice in the input list, it was allowed to appear twice in \
the permutations, but 2 appeared only one time in the input and thus was not \
allowed to repeat. This means that if you want to list the ways that four \
elements can be selected in order from a set with three elements when \
repetition is allowed, you can use the ",
 StyleBox[ButtonBox["Permutations",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Permutations"], "FunctionLink"],
 " function, so long as you repeat the elements in the input. In order to \
generate all ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "0c7d8d82-b6bf-47eb-a099-2897ec578448"],
 "-permutations of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "a4100aff-165b-405c-88b1-105aad6830b0"],
 " objects with repetition allowed, you must use as input the list consisting \
of the ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "31f4648a-0b71-487e-a631-b766c7fd1bfb"],
 " objects each repeated ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "93e36950-6eb7-44c4-85d5-f99f3206d30d"],
 " times. If an object is repeated fewer than ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "95fc30a6-229d-42e7-b496-0595cc42927a"],
 " times in the input list, then that will limit the number of times it is \
allowed to repeat in the results."
}], "Text",ExpressionUUID->"e7a72c98-5d97-4092-9b88-0dd680305260"],

Cell[TextData[{
 "To form 4-permutations with repetition allowed of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"c2a90f9b-2667-415a-b660-bceeffa82991"],
 ", we apply the ",
 StyleBox[ButtonBox["Permutations",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Permutations"], "FunctionLink"],
 " function after using ",
 StyleBox[ButtonBox["ConstantArray",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ConstantArray"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Join",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Join"], "FunctionLink"],
 " to build its argument. "
}], "Text",ExpressionUUID->"da55481e-b8be-47db-a46d-e5d27bf6b7f1"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["ConstantArray",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ConstantArray"], "FunctionLink"],
 " function takes two arguments. The first is the object to be repeated and \
the second is the number of times the object is to be repeated. The output is \
the list consisting of that number of copies of the element. For example, the \
following creates the list consisting of four copies of the character \
\[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote]."
}], "Text",ExpressionUUID->"6e43761b-300f-464a-9268-096ab992bb60"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ConstantArray", "[", 
  RowBox[{"\"\<a\>\"", ",", "4"}], "]"}]], "Input",
 CellLabel->
  "In[103]:=",ExpressionUUID->"cd0961b3-7550-4367-b26a-0dc6e884cc23"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>"}],
   "}"}]], "Output",
 CellLabel->
  "Out[103]=",ExpressionUUID->"e824a342-d887-4eb3-a66d-ede84d0eabd3"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Join",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Join"], "FunctionLink"],
 " function accepts a number of lists and outputs the list obtained by \
merging them. The following produces the list of four \
\[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote]s and four \
\[OpenCurlyDoubleQuote]b\[CloseCurlyDoubleQuote]s and four \
\[OpenCurlyDoubleQuote]c\[CloseCurlyDoubleQuote]s."
}], "Text",ExpressionUUID->"4be00fd8-484e-44b6-8d4a-edd755c9c8d1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Join", "[", 
  RowBox[{
   RowBox[{"ConstantArray", "[", 
    RowBox[{"\"\<a\>\"", ",", "4"}], "]"}], ",", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"\"\<b\>\"", ",", "4"}], "]"}], ",", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"\"\<c\>\"", ",", "4"}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[104]:=",ExpressionUUID->"075cf2fa-c73f-4f76-be37-cf5503c91778"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>", 
   ",", "\<\"c\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[104]=",ExpressionUUID->"08d0b58b-8a90-439b-9dd5-26a81f16ad4f"]
}, Open  ]],

Cell[TextData[{
 "We can make this more compact, especially for large numbers of symbols, by \
applying ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " with a table variable ranging over the desired elements. Remember that if \
the second argument to ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " is of the form ",
 Cell[BoxData[
  RowBox[{"{", 
   StyleBox["variable", "CodeVar"], ",", 
   StyleBox["list", "CodeVar"], "}"}]], "myCode",ExpressionUUID->
  "2fb4dfb2-4333-4d86-b907-262e562fe85f"],
 ", then the table variable will be assigned each element of the list in \
turn. Using ",
 StyleBox[ButtonBox["ConstantArray",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ConstantArray"], "FunctionLink"],
 " as the first argument to ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 ", with the table variable as the array element, we can obtain the list of \
\[OpenCurlyDoubleQuote]constant arrays.\[CloseCurlyDoubleQuote]"
}], "Text",ExpressionUUID->"4af3c091-8b4e-488b-8a68-42642435eba8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"ConstantArray", "[", 
    RowBox[{"i", ",", "4"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}]}], 
    "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[105]:=",ExpressionUUID->"f16f80cd-4bd9-4bca-9da8-07e88ec3ab00"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"c\"\>"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[105]=",ExpressionUUID->"ca6c7ea1-4624-443e-89a8-478a294f7ce8"]
}, Open  ]],

Cell[TextData[{
 "Since ",
 StyleBox[ButtonBox["Join",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Join"], "FunctionLink"],
 " expects several lists as arguments, not a single list of lists, we need to \
use the ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " (",
 StyleBox["@@", "Code"],
 ") operator. ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " (",
 StyleBox["@@", "Code"],
 ")",
 " ",
 "has the effect of taking the elements of a list and giving them as the \
arguments to a function. "
}], "Text",ExpressionUUID->"7572ab02-e067-40a6-8bf8-124e5a642456"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Join", " ", "@@", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"ConstantArray", "[", 
     RowBox[{"i", ",", "4"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}]}], 
     "}"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[106]:=",ExpressionUUID->"d408f62a-568a-4dba-94c6-490380e040a8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>", 
   ",", "\<\"c\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[106]=",ExpressionUUID->"0d2ddb5b-7b56-41e4-ab56-98a1c69e35ec"]
}, Open  ]],

Cell[TextData[{
 "This is the list we give to the ",
 StyleBox[ButtonBox["Permutations",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Permutations"], "FunctionLink"],
 " function, along with the size specification {4}, to obtain permutations of \
length 4."
}], "Text",ExpressionUUID->"b4821b12-1fa8-4388-9f18-f01e33965cfb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"abcRepeated", "=", 
  RowBox[{"Permutations", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Join", " ", "@@", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"ConstantArray", "[", 
        RowBox[{"i", ",", "4"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"{", 
          RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}]}], 
        "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", "4", "}"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[107]:=",ExpressionUUID->"124e41c7-1923-4989-aead-e1c37950f81a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"c\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"c\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"c\"\>", ",", "\<\"a\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"c\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"c\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"c\"\>", ",", "\<\"b\"\>", 
     ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>", 
     ",", "\<\"c\"\>"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[107]=",ExpressionUUID->"fa327215-77df-4f51-ad73-ee930163f9b9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "abcRepeated", "]"}]], "Input",
 CellLabel->
  "In[108]:=",ExpressionUUID->"5e70205e-164a-406f-9d59-47ee76b9a615"],

Cell[BoxData["81"], "Output",
 CellLabel->
  "Out[108]=",ExpressionUUID->"d483f133-cc16-4311-9b5b-efb1b453b6a2"]
}, Open  ]],

Cell[TextData[{
 "Note that the size of the list produced by ",
 StyleBox[ButtonBox["Permutations",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Permutations"], "FunctionLink"],
 " agrees with the answer given by the formula ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "r"], TraditionalForm]],ExpressionUUID->
  "15eb114b-6723-472e-9d8c-8af86ec52caf"],
 "."
}], "Text",ExpressionUUID->"bf260cfa-b0e1-4594-b4b7-44322694e776"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Combinations with Repetition", "Subsection",
 CellTags->"Section5b",ExpressionUUID->"e5aa00e0-5848-4ea0-b304-ef59c40ed389"],

Cell["\<\
Combinations with repetition can be handled in much the same way as \
permutations with repetition are.\
\>", "Text",ExpressionUUID->"92cdeed8-4d59-4d4d-a2de-5c87e63e5943"],

Cell[TextData[{
 "Theorem 2 of Section 6.5 asserts that the number of ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "59caeeed-a0ff-403d-a698-5762712005c6"],
 "-combinations of a set of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "51e995e9-121a-486f-b4d0-f17ebe3b4ddd"],
 " objects when repetition of elements is allowed is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "(", 
    RowBox[{
     RowBox[{"n", "+", "r", "-", "1"}], ",", "r"}], ")"}], TraditionalForm]],
  ExpressionUUID->"ea8302ce-894f-4c2a-9837-49b421b3da89"],
 ". This suggests the following useful function."
}], "Text",ExpressionUUID->"27bad741-1e79-494c-8f0a-e764cf53f160"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"CRep", "[", 
    RowBox[{"n_Integer", ",", "r_Integer"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"n", ">", "0"}], "&&", 
    RowBox[{"r", "\[GreaterEqual]", "0"}]}]}], ":=", 
  RowBox[{"Binomial", "[", 
   RowBox[{
    RowBox[{"n", "+", "r", "-", "1"}], ",", "r"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[109]:=",ExpressionUUID->"48eac800-d67d-4951-8c06-3c365e3e6e00"],

Cell["\<\
Thus, we can compute, for example, the number of ways to select five bills \
from a cash box with seven types of bills (Example 3) as shown below. \
\>", "Text",ExpressionUUID->"9b94f2da-16e4-4def-8a0d-c38f309f2e72"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CRep", "[", 
  RowBox[{"7", ",", "5"}], "]"}]], "Input",
 CellLabel->
  "In[110]:=",ExpressionUUID->"4cbef30c-bebf-4ceb-b43d-3ba2d941388d"],

Cell[BoxData["462"], "Output",
 CellLabel->
  "Out[110]=",ExpressionUUID->"0f486de4-6b12-4c00-8902-5b4d23eb8b5d"]
}, Open  ]],

Cell[TextData[{
 "Consider Example 2 from Section 6.5. In this example, we are given a bowl \
of apples, oranges, and pears and are to select four pieces of fruit from the \
bowl provided that it contains at least four pieces of each kind of fruit. We \
have two ways to solve this problem with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". "
}], "Text",ExpressionUUID->"49363660-ac17-4484-8c93-359287e56c51"],

Cell[TextData[{
 "First, we can use the ",
 StyleBox["CRep", "Code"],
 " function we created."
}], "Text",ExpressionUUID->"fb593562-41d5-4273-a903-a748014b1b87"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CRep", "[", 
  RowBox[{"3", ",", "4"}], "]"}]], "Input",
 CellLabel->
  "In[111]:=",ExpressionUUID->"580b7add-8681-4541-91e2-d22af71f6f31"],

Cell[BoxData["15"], "Output",
 CellLabel->
  "Out[111]=",ExpressionUUID->"221f4c86-bfb3-42b1-9d90-9cf6b5d74eb6"]
}, Open  ]],

Cell[TextData[{
 "The other approach is to use ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " to list all the options. We form the argument to ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " in the same way as in the last subsection. However, the difference between \
",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Permutations",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Permutations"], "FunctionLink"],
 " is that ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " treats repeated objects as distinct. This means that combinations will be \
repeated. For example, consider the following."
}], "Text",ExpressionUUID->"90a2789a-0bdb-420a-96fe-a520052a8128"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Subsets", "[", 
  RowBox[{"{", 
   RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<b\>\""}], "}"}], 
  "]"}]], "Input",
 CellLabel->
  "In[112]:=",ExpressionUUID->"da790fec-63c0-4f79-a2e9-f744a8e51dc0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "\<\"a\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"b\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"b\"\>", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[112]=",ExpressionUUID->"660fc299-4a9f-4a57-b2d7-d55407f3b02a"]
}, Open  ]],

Cell[TextData[{
 "The subsets ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", "b", "}"}], TraditionalForm]],ExpressionUUID->
  "4101a2cb-14f0-4c11-b493-0e8d9f893b5f"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], TraditionalForm]],ExpressionUUID->
  "8964b104-b6f8-4327-8bb9-64864d23e87d"],
 " appear twice because ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " considered the two \[OpenCurlyDoubleQuote]b\[CloseCurlyDoubleQuote]s in \
the input to be different from each other. That is, one ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", "b", "}"}], TraditionalForm]],ExpressionUUID->
  "d3e2f3d6-216e-43e5-875a-32222a93fef9"],
 " in the output is from the first \[OpenCurlyDoubleQuote]b\
\[CloseCurlyDoubleQuote] in the input, and the other ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", "b", "}"}], TraditionalForm]],ExpressionUUID->
  "e5d5a603-0e9a-430b-b195-eb7dbc7f8cc2"],
 " is the second \[OpenCurlyDoubleQuote]b\[CloseCurlyDoubleQuote] in the \
input. To eliminate these redundancies, we can apply ",
 StyleBox[ButtonBox["DeleteDuplicates",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/DeleteDuplicates"], "FunctionLink"],
 ", a function that removes duplicate elements from a list."
}], "Text",ExpressionUUID->"60c1a715-70ea-43a1-9f6b-b74d8c2c37f1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeleteDuplicates", "[", 
  RowBox[{"Subsets", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<b\>\""}], "}"}], "]"}], 
  "]"}]], "Input",
 CellLabel->
  "In[113]:=",ExpressionUUID->"fe576b4f-0566-4335-8185-d0edb1d8c3a9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "\<\"a\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"b\"\>", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[113]=",ExpressionUUID->"1cd55cae-c641-4ce2-97c8-81a6d2678101"]
}, Open  ]],

Cell["\<\
To answer the question about the bowl of fruit, we enter the following.\
\>", "Text",ExpressionUUID->"1554f468-0816-421c-b432-56100b30ae1e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeleteDuplicates", "[", 
  RowBox[{"Subsets", "[", 
   RowBox[{
    RowBox[{"Join", "@@", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"ConstantArray", "[", 
        RowBox[{"i", ",", "4"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<apple\>\"", ",", "\"\<pear\>\"", ",", "\"\<orange\>\""}], 
          "}"}]}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", "4", "}"}]}], "\[IndentingNewLine]", "]"}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[114]:=",ExpressionUUID->"52bdf33d-acdc-4c65-8a3a-76434f6e4a1e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"apple\"\>", ",", "\<\"apple\"\>", ",", "\<\"apple\"\>", 
     ",", "\<\"apple\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"apple\"\>", ",", "\<\"apple\"\>", ",", "\<\"apple\"\>", 
     ",", "\<\"pear\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"apple\"\>", ",", "\<\"apple\"\>", ",", "\<\"apple\"\>", 
     ",", "\<\"orange\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"apple\"\>", ",", "\<\"apple\"\>", ",", "\<\"pear\"\>", 
     ",", "\<\"pear\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"apple\"\>", ",", "\<\"apple\"\>", ",", "\<\"pear\"\>", 
     ",", "\<\"orange\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"apple\"\>", ",", "\<\"apple\"\>", ",", "\<\"orange\"\>", 
     ",", "\<\"orange\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"apple\"\>", ",", "\<\"pear\"\>", ",", "\<\"pear\"\>", 
     ",", "\<\"pear\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"apple\"\>", ",", "\<\"pear\"\>", ",", "\<\"pear\"\>", 
     ",", "\<\"orange\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"apple\"\>", ",", "\<\"pear\"\>", ",", "\<\"orange\"\>", 
     ",", "\<\"orange\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"apple\"\>", ",", "\<\"orange\"\>", ",", "\<\"orange\"\>", 
     ",", "\<\"orange\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"pear\"\>", ",", "\<\"pear\"\>", ",", "\<\"pear\"\>", 
     ",", "\<\"pear\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"pear\"\>", ",", "\<\"pear\"\>", ",", "\<\"pear\"\>", 
     ",", "\<\"orange\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"pear\"\>", ",", "\<\"pear\"\>", ",", "\<\"orange\"\>", 
     ",", "\<\"orange\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"pear\"\>", ",", "\<\"orange\"\>", ",", "\<\"orange\"\>", 
     ",", "\<\"orange\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"orange\"\>", ",", "\<\"orange\"\>", ",", "\<\"orange\"\>", 
     ",", "\<\"orange\"\>"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[114]=",ExpressionUUID->"b649aefd-ce26-488e-bc58-da999abd9758"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "%", "]"}]], "Input",
 CellLabel->
  "In[115]:=",ExpressionUUID->"4fe476a8-b22e-4b11-9c53-43e1337aa7a1"],

Cell[BoxData["15"], "Output",
 CellLabel->
  "Out[115]=",ExpressionUUID->"e1329b54-a365-4d93-8657-2edd573fec92"]
}, Open  ]],

Cell[TextData[{
 "Pay careful attention to the difference between ",
 StyleBox[ButtonBox["Permutations",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Permutations"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 ". ",
 StyleBox[ButtonBox["Permutations",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Permutations"], "FunctionLink"],
 " considered repeated elements to be identical, while ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " treats them as distinct."
}], "Text",ExpressionUUID->"01ab46dd-bc39-45c0-8ec3-7c23f40df65b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Permutations with Indistinguishable Objects", "Subsection",
 CellTags->"Section5c",ExpressionUUID->"4fadfa28-7f14-49be-864f-01bdc40fd023"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " handles permutations with indistinguishable objects in the same way as \
when repetition is allowed. The ",
 StyleBox[ButtonBox["Permutations",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Permutations"], "FunctionLink"],
 " function accepts a list of objects as its first argument. If objects in \
the list are repeated, they are treated as indistinguishable and the \
appropriate permutations are generated."
}], "Text",ExpressionUUID->"cf274c82-82d0-4a0f-8630-d5fccc5fb099"],

Cell[TextData[{
 "For example, to solve Example 7, finding the number of different strings \
that can be made from the letters of the word SUCCESS, we use the list ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"{", 
     RowBox[{"\<\"S\"\>", ",", "\<\"U\"\>", ",", "\<\"C\"\>", 
      ",", "\<\"C\"\>", ",", "\<\"E\"\>", ",", "\<\"S\"\>", 
      ",", "\<\"S\"\>"}], "}"}], "Input"], TraditionalForm]],ExpressionUUID->
  "3dae6284-3980-4d6b-b74d-8fb4e54da227"],
 " as the argument to ",
 StyleBox[ButtonBox["Permutations",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Permutations"], "FunctionLink"],
 ". Since we are only interested in the number of permutations, we apply ",
 StyleBox[ButtonBox["Length",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Length"], "FunctionLink"],
 " as well."
}], "Text",ExpressionUUID->"c4077fd5-1740-45fa-b236-2b23f8a157d5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"Permutations", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<S\>\"", ",", "\"\<U\>\"", ",", "\"\<C\>\"", ",", "\"\<C\>\"", ",", 
     "\"\<E\>\"", ",", "\"\<S\>\"", ",", "\"\<S\>\""}], "}"}], "]"}], 
  "]"}]], "Input",
 CellLabel->
  "In[116]:=",ExpressionUUID->"ed1912c1-1f7c-424c-92bb-9cd660d54ad1"],

Cell[BoxData["420"], "Output",
 CellLabel->
  "Out[116]=",ExpressionUUID->"dc833add-0e2f-4373-8aea-21354c612a31"]
}, Open  ]],

Cell["\<\
Observe that this gives the same result as the formula given in Theorem 3. \
\>", "Text",ExpressionUUID->"b576a347-014a-4c07-bbe8-9ee410c99b48"],

Cell[TextData[{
 "The Wolfram Language function makes it easy to go a bit further than \
Theorem 3, which is restricted to the situation when you are permuting all ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "d2b2d826-86c9-46bc-b4b1-a580988db936"],
 " objects. To find the number of ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "d8d48a41-a115-4df0-b9d2-3c36d08b658a"],
 "-permutations of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "bd0e929a-7b90-4ab0-b04c-1ba7a631dc8f"],
 " objects where some objects are indistinguishable, you give ",
 StyleBox["{r}", "Code"],
 " as the second argument."
}], "Text",ExpressionUUID->"dbb63b16-21b0-4a6b-91c4-aadd9f9c8031"],

Cell["\<\
For example, the strings of length 3 that can be made from the letters of the \
word SUCCESS can be found as follows. \
\>", "Text",ExpressionUUID->"9916b7b6-448a-45a6-8386-cbeb9586962f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Permutations", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "\"\<S\>\"", ",", "\"\<U\>\"", ",", "\"\<C\>\"", ",", "\"\<C\>\"", ",", 
     "\"\<E\>\"", ",", "\"\<S\>\"", ",", "\"\<S\>\""}], "}"}], ",", 
   RowBox[{"{", "3", "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[117]:=",ExpressionUUID->"781a6be9-ce62-4771-b46e-6a2d57a4ed64"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"S\"\>", ",", "\<\"U\"\>", ",", "\<\"C\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"S\"\>", ",", "\<\"U\"\>", ",", "\<\"E\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"S\"\>", ",", "\<\"U\"\>", ",", "\<\"S\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"S\"\>", ",", "\<\"C\"\>", ",", "\<\"U\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"S\"\>", ",", "\<\"C\"\>", ",", "\<\"C\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"S\"\>", ",", "\<\"C\"\>", ",", "\<\"E\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"S\"\>", ",", "\<\"C\"\>", ",", "\<\"S\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"S\"\>", ",", "\<\"E\"\>", ",", "\<\"U\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"S\"\>", ",", "\<\"E\"\>", ",", "\<\"C\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"S\"\>", ",", "\<\"E\"\>", ",", "\<\"S\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"S\"\>", ",", "\<\"S\"\>", ",", "\<\"U\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"S\"\>", ",", "\<\"S\"\>", ",", "\<\"C\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"S\"\>", ",", "\<\"S\"\>", ",", "\<\"E\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"S\"\>", ",", "\<\"S\"\>", ",", "\<\"S\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"U\"\>", ",", "\<\"S\"\>", ",", "\<\"C\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"U\"\>", ",", "\<\"S\"\>", ",", "\<\"E\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"U\"\>", ",", "\<\"S\"\>", ",", "\<\"S\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"U\"\>", ",", "\<\"C\"\>", ",", "\<\"S\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"U\"\>", ",", "\<\"C\"\>", ",", "\<\"C\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"U\"\>", ",", "\<\"C\"\>", ",", "\<\"E\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"U\"\>", ",", "\<\"E\"\>", ",", "\<\"S\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"U\"\>", ",", "\<\"E\"\>", ",", "\<\"C\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"C\"\>", ",", "\<\"S\"\>", ",", "\<\"U\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"C\"\>", ",", "\<\"S\"\>", ",", "\<\"C\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"C\"\>", ",", "\<\"S\"\>", ",", "\<\"E\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"C\"\>", ",", "\<\"S\"\>", ",", "\<\"S\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"C\"\>", ",", "\<\"U\"\>", ",", "\<\"S\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"C\"\>", ",", "\<\"U\"\>", ",", "\<\"C\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"C\"\>", ",", "\<\"U\"\>", ",", "\<\"E\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"C\"\>", ",", "\<\"C\"\>", ",", "\<\"S\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"C\"\>", ",", "\<\"C\"\>", ",", "\<\"U\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"C\"\>", ",", "\<\"C\"\>", ",", "\<\"E\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"C\"\>", ",", "\<\"E\"\>", ",", "\<\"S\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"C\"\>", ",", "\<\"E\"\>", ",", "\<\"U\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"C\"\>", ",", "\<\"E\"\>", ",", "\<\"C\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"E\"\>", ",", "\<\"S\"\>", ",", "\<\"U\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"E\"\>", ",", "\<\"S\"\>", ",", "\<\"C\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"E\"\>", ",", "\<\"S\"\>", ",", "\<\"S\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"E\"\>", ",", "\<\"U\"\>", ",", "\<\"S\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"E\"\>", ",", "\<\"U\"\>", ",", "\<\"C\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"E\"\>", ",", "\<\"C\"\>", ",", "\<\"S\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"E\"\>", ",", "\<\"C\"\>", ",", "\<\"U\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"E\"\>", ",", "\<\"C\"\>", ",", "\<\"C\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[117]=",ExpressionUUID->"cf90175f-6cde-4338-a724-5843a8dc62bf"]
}, Open  ]],

Cell[TextData[{
 "Applying ",
 StyleBox[ButtonBox["Length",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Length"], "FunctionLink"],
 " returns the number of such strings."
}], "Text",ExpressionUUID->"5e71e690-638f-4cf5-ad74-104a938b326d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "%", "]"}]], "Input",
 CellLabel->
  "In[118]:=",ExpressionUUID->"1187950d-70e1-4d99-829d-e47ed10db351"],

Cell[BoxData["43"], "Output",
 CellLabel->
  "Out[118]=",ExpressionUUID->"4bd8685f-7172-4398-8c52-73b2a5dfc367"]
}, Open  ]],

Cell[TextData[{
 "A related question is the number of strings with three or more letters that \
can be made from the letters of the word SUCCESS. To find this, we only have \
to change the second argument of ",
 StyleBox[ButtonBox["Permutations",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Permutations"], "FunctionLink"],
 " to ",
 StyleBox["{3,7}", "Code"],
 ", indicating that the length of the permutations should be allowed to range \
from 3 to 7 (the number of letters in SUCCESS)."
}], "Text",ExpressionUUID->"d59d5551-d06c-47a2-9123-8bcf19443c6f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"Permutations", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<S\>\"", ",", "\"\<U\>\"", ",", "\"\<C\>\"", ",", "\"\<C\>\"", ",", 
      "\"\<E\>\"", ",", "\"\<S\>\"", ",", "\"\<S\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "7"}], "}"}]}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[119]:=",ExpressionUUID->"3ba1f356-f4da-41b3-a144-e18d8b880a5b"],

Cell[BoxData["1247"], "Output",
 CellLabel->
  "Out[119]=",ExpressionUUID->"76534f65-14d1-4d88-b0d1-3941e1cd77c0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Distinguishable Objects and Distinguishable Boxes", "Subsection",
 CellTags->"Section5d",ExpressionUUID->"843e7a79-9563-4338-a1dd-fb197f84c822"],

Cell[TextData[{
 "Example 8 asks how many ways there are to distribute hands of five cards to \
each of four players from a deck of 52 cards. There are several ways to \
compute this value in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "."
}], "Text",ExpressionUUID->"b9123ce3-2ae4-4ece-979c-9fde856dfa3c"],

Cell[TextData[{
 "First, we can use the expression in terms of combinations, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"C", "(", 
     RowBox[{"52", ",", "5"}], ")"}], 
    RowBox[{"C", "(", 
     RowBox[{"47", ",", "5"}], ")"}], 
    RowBox[{"C", "(", 
     RowBox[{"42", ",", "5"}], ")"}], 
    RowBox[{"C", "(", 
     RowBox[{"37", ",", "5"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "08af440c-5b0d-4109-9c72-a4864b06ed6d"],
 ", by using ",
 StyleBox[ButtonBox["Binomial",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Binomial"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"94bf14fa-7082-4381-b58d-199add9358b7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Binomial", "[", 
   RowBox[{"52", ",", "5"}], "]"}], "*", 
  RowBox[{"Binomial", "[", 
   RowBox[{"47", ",", "5"}], "]"}], "*", 
  RowBox[{"Binomial", "[", 
   RowBox[{"42", ",", "5"}], "]"}], "*", 
  RowBox[{"Binomial", "[", 
   RowBox[{"37", ",", "5"}], "]"}]}]], "Input",
 CellLabel->
  "In[120]:=",ExpressionUUID->"9aa0e9b4-b3a8-4ff2-a870-348bd99c8fde"],

Cell[BoxData["1478262843475644020034240"], "Output",
 CellLabel->
  "Out[120]=",ExpressionUUID->"c22d84a0-99d1-4d03-b619-25aa4a3258aa"]
}, Open  ]],

Cell[TextData[{
 "Second, we can use the formula from Theorem 4: ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"52", "!"}], 
    RowBox[{
     RowBox[{"5", "!"}], "\[CenterDot]", 
     RowBox[{"5", "!"}], "\[CenterDot]", 
     RowBox[{"5", "!"}], "\[CenterDot]", 
     RowBox[{"5", "!"}], "\[CenterDot]", 
     RowBox[{"32", "!"}]}]], TraditionalForm]],ExpressionUUID->
  "b75fbe02-5943-40c1-8c7d-1a420e0c25d8"],
 "."
}], "Text",ExpressionUUID->"bba64143-e030-450f-b264-1107456506cf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"52", "!"}], "/", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"5", "!"}], "*", 
    RowBox[{"5", "!"}], "*", 
    RowBox[{"5", "!"}], "*", 
    RowBox[{"5", "!"}], "*", 
    RowBox[{"32", "!"}]}], ")"}]}]], "Input",
 CellLabel->
  "In[121]:=",ExpressionUUID->"afdf77d2-798f-4c4e-8e01-41a91b259fa1"],

Cell[BoxData["1478262843475644020034240"], "Output",
 CellLabel->
  "Out[121]=",ExpressionUUID->"574b074a-0a5f-4171-987c-0f8f097d435b"]
}, Open  ]],

Cell[TextData[{
 "Finally, this same value can be computed using the ",
 StyleBox[ButtonBox["Multinomial",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Multinomial"], "FunctionLink"],
 " function. Recall Theorem 4 in the text asserts that the number of ways to \
place ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "891eefbd-ab0f-43ed-8078-d4a34df8c809"],
 " distinguishable objects into boxes so that ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["n", "1"], TraditionalForm]],ExpressionUUID->
  "b02affd7-8478-40ab-a323-cd5acb3f93e0"],
 " objects are placed in box 1, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["n", "2"], TraditionalForm]],ExpressionUUID->
  "a9261cee-2370-48a8-bc11-e35dd24b2aa0"],
 " objects are put in box 2, etc., is ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"n", "!"}], 
    RowBox[{
     RowBox[{
      RowBox[{
       SubscriptBox["n", "1"], "!"}], "\[CenterDot]", 
      RowBox[{
       SubscriptBox["n", "2"], "!"}]}], 
     RowBox[{
      SubscriptBox["\[CenterEllipsis]n", "k"], "!"}]}]], TraditionalForm]],
  ExpressionUUID->"53369d76-d580-4325-910f-251495dae992"],
 ". The ",
 StyleBox[ButtonBox["Multinomial",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Multinomial"], "FunctionLink"],
 " function takes ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["n", "1"], ",", 
    SubscriptBox["n", "2"], ",", "\[Ellipsis]", ",", 
    SubscriptBox["n", "k"]}], TraditionalForm]],ExpressionUUID->
  "65e0050a-84f0-4cbb-a24b-6aceec59bac7"],
 " as arguments and applies the formula with ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "a5a20606-0dc9-4785-8eae-6e4623f7b3eb"],
 " computed as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["n", "1"], "+", 
    SubscriptBox["n", "2"], "+", "\[CenterEllipsis]", "+", 
    SubscriptBox["n", "k"]}], TraditionalForm]],ExpressionUUID->
  "cb4b1bb8-ec30-476b-818a-8fc34ccc056c"],
 ". Therefore, to compute the answer to Example 8, enter the following."
}], "Text",ExpressionUUID->"38a0475b-ca1e-44d1-9883-c9f32324886d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Multinomial", "[", 
  RowBox[{"5", ",", "5", ",", "5", ",", "5", ",", "32"}], "]"}]], "Input",
 CellLabel->
  "In[122]:=",ExpressionUUID->"1b1c6074-cbb6-4bea-91cd-ce8f90e6ecde"],

Cell[BoxData["1478262843475644020034240"], "Output",
 CellLabel->
  "Out[122]=",ExpressionUUID->"80f181a1-38e8-4069-8fe4-1c471ecaa555"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Revising the ",
 StyleBox["Multinomial", "Code"],
 " Function"
}], "Subsubsection",ExpressionUUID->"8c1cb60e-74b3-4915-a2d5-b599977b25b2"],

Cell[TextData[{
 "It is common in questions about distributing distinguishable objects into \
distinguishable boxes that you want to distribute only some of the objects. \
In Example 8, for instance, not all of the cards are dealt to players. The ",
 StyleBox[ButtonBox["Multinomial",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Multinomial"], "FunctionLink"],
 " function requires that you include the remainder of the cards as an \
argument. Conceptually, you can think of making one more box to hold the \
objects that are not placed in any of the other boxes."
}], "Text",ExpressionUUID->"f28457b3-e50d-423f-b84f-8f9dce555280"],

Cell["\<\
This is such a common occurrence, however, that it seems more natural to \
forget about this \[OpenCurlyDoubleQuote]discard box\[CloseCurlyDoubleQuote] \
and instead include the total number of objects. We will write a function in \
the Wolfram Language that will use the formula from Theorem 4 but will \
require the total number of objects as the first argument and calculate the \
size of the discard box.\
\>", "Text",ExpressionUUID->"0030fe23-2a1b-43e1-9c6b-8692eebcb786"],

Cell[TextData[{
 "We would like our function to, like ",
 StyleBox[ButtonBox["Multinomial",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Multinomial"], "FunctionLink"],
 ", accept any number of arguments, rather than requiring the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["n", "i"], TraditionalForm]],ExpressionUUID->
  "e57c6aec-1f00-4f9a-8c94-e34139ec5077"],
 " to be collected in a list. That is, we would like to be able to compute \
the answer to Example 8 as follows."
}], "Text",ExpressionUUID->"fb2f4663-4ac4-4413-8c5f-85ad685104ff"],

Cell[BoxData[
 RowBox[{"myMultinomial", "[", 
  RowBox[{"52", ",", "5", ",", "5", ",", "5", ",", "5"}], "]"}]], "myCode",
 Editable->False,ExpressionUUID->"da20df1b-76f0-470f-9f71-3dee244d4123"],

Cell["\<\
The first argument will be the total number of objects, and it should be \
followed by at least one integer indicating the sizes of the boxes.\
\>", "Text",ExpressionUUID->"f916b3f9-47de-49dd-ac2e-96d30ebfa4cc"],

Cell[TextData[{
 "To allow the function to accept arbitrary numbers of arguments, we use the ",
 StyleBox[ButtonBox["BlankSequence",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BlankSequence"], "FunctionLink"],
 " (",
 StyleBox["__", "Code"],
 ") pattern, entered with two underscores. In the past, we have used this \
inside braces as a way to specify that an argument must be a list of a \
certain kind, as in ",
 StyleBox["a:{__Integer}", "Code"],
 ". This will be similar, but without the braces."
}], "Text",ExpressionUUID->"35dce31d-d0b4-4a74-8404-4414eabaa578"],

Cell["The function definition will begin as shown below.", "Text",ExpressionUUID->"09deed39-b84c-4485-9254-6a9ab40f8ff4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"myMultinomial", "[", 
   RowBox[{"n_Integer", ",", "L__Integer"}], "]"}], ":="}]], "myCode",
 Editable->False,ExpressionUUID->"3d308246-5b35-400a-bb25-87915490b613"],

Cell[TextData[{
 "The difficulty arises when working with the sequence of integers matched by \
",
 StyleBox["L", "Code"],
 ". In particular, ",
 StyleBox["L", "Code"],
 " does not represent a list; rather, it represents a sequence of arguments. \
Therefore, functions that accept a list argument, such as ",
 StyleBox[ButtonBox["Length",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Length"], "FunctionLink"],
 ", will raise an error, as illustrated below."
}], "Text",ExpressionUUID->"ffd6c316-f767-46d0-8c6c-afad936e8cd4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"numberArgs", "[", "L__", "]"}], ":=", 
  RowBox[{"Length", "[", "L", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[123]:=",ExpressionUUID->"2e4181ec-d89f-4484-bdf1-90879a34aaa2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numberArgs", "[", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "]"}]], "Input",
 CellLabel->
  "In[124]:=",ExpressionUUID->"9f27287f-e90f-43c2-a2b1-afad28045436"],

Cell[BoxData[
 TemplateBox[{
  "Length","argx",
   "\"\\!\\(\\*RowBox[{\\\"Length\\\"}]\\) called with \\!\\(\\*RowBox[{\\\"4\
\\\"}]\\) arguments; 1 argument is expected.\"",2,124,1,22492513455415507983,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[124]:=",ExpressionUUID->"bd2d2c7e-10b6-4e49-b1f1-1e4323a0255a"],

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "]"}]], "Output",
 CellLabel->
  "Out[124]=",ExpressionUUID->"601adeca-c876-4e71-9c08-1779fb9a7b52"]
}, Open  ]],

Cell[TextData[{
 "The way to deal with this is to wrap ",
 StyleBox["L", "Code"],
 " in braces before applying the function."
}], "Text",ExpressionUUID->"42f0ae3c-ec1d-4110-9203-27761c641557"],

Cell[BoxData[
 RowBox[{
  RowBox[{"numberArgs2", "[", "L__", "]"}], ":=", 
  RowBox[{"Length", "[", 
   RowBox[{"{", "L", "}"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[125]:=",ExpressionUUID->"b19e0519-b548-4ccf-8156-4efa3c52f36a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numberArgs2", "[", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "]"}]], "Input",
 CellLabel->
  "In[126]:=",ExpressionUUID->"40fea30c-6d9a-4f78-aba1-4fa3dc0d1e80"],

Cell[BoxData["4"], "Output",
 CellLabel->
  "Out[126]=",ExpressionUUID->"f07fc5c5-7a77-40b2-be31-f9f1722faf42"]
}, Open  ]],

Cell[TextData[{
 "On the other hand, functions that normally accept arbitrary numbers of \
arguments and must usually be used in conjunction with ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " to operate on a list can be given the sequence directly."
}], "Text",ExpressionUUID->"80be2902-2a4f-42d3-a94d-0c6b0c4cc7b0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sumArgs", "[", "L__", "]"}], ":=", 
  RowBox[{"Plus", "[", "L", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[127]:=",ExpressionUUID->"49a566c5-1d90-453b-b46b-ffa5fb787d18"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sumArgs", "[", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "]"}]], "Input",
 CellLabel->
  "In[128]:=",ExpressionUUID->"bbea7d7a-197f-4b0d-aad9-fcaa3975ed20"],

Cell[BoxData["10"], "Output",
 CellLabel->
  "Out[128]=",ExpressionUUID->"aba40574-d147-48b5-aa4e-40d1308daea6"]
}, Open  ]],

Cell[TextData[{
 "Now that we know how to work with the ",
 StyleBox[ButtonBox["BlankSequence",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BlankSequence"], "FunctionLink"],
 ", writing the ",
 StyleBox["myMultinomial", "Code"],
 " function is straightforward. We compute the size of the discard box by \
subtracting the first argument from the sum of the rest. The ",
 StyleBox[ButtonBox["Factorial",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Factorial"], "FunctionLink"],
 " function automatically threads over lists, so we can apply it to the list \
formed from ",
 StyleBox["L", "Code"],
 " and the discard box size. We need to use ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " (",
 StyleBox["@@", "Code"],
 ") with ",
 StyleBox[ButtonBox["Times",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Times"], "FunctionLink"],
 " in order to multiply the factorials, and then divide ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "!"}], TraditionalForm]],ExpressionUUID->
  "c7d61b4a-2d98-46dd-aecd-2f77f88b7c30"],
 " by that result."
}], "Text",ExpressionUUID->"b12b6b05-aa75-48bc-87b9-80baf1ec2697"],

Cell[BoxData[
 RowBox[{
  RowBox[{"myMultinomial", "[", 
   RowBox[{"n_Integer", ",", "L__Integer"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"discard", ",", "denomList", ",", "denom"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"discard", "=", 
      RowBox[{"n", "-", 
       RowBox[{"Plus", "[", "L", "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"denomList", "=", 
      RowBox[{"Factorial", "[", 
       RowBox[{"{", 
        RowBox[{"L", ",", "discard"}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"denom", "=", 
      RowBox[{"Times", "@@", "denomList"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"n", "!"}], "/", "denom"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[129]:=",ExpressionUUID->"d25df8d4-77da-4607-8288-98d8b187fa16"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myMultinomial", "[", 
  RowBox[{"52", ",", "5", ",", "5", ",", "5", ",", "5"}], "]"}]], "Input",
 CellLabel->
  "In[130]:=",ExpressionUUID->"c2bbcf49-d0b2-4f3e-b9f5-4d70f9c2c14c"],

Cell[BoxData["1478262843475644020034240"], "Output",
 CellLabel->
  "Out[130]=",ExpressionUUID->"b8ba14b0-b2c5-4971-a3d2-d0a2e36e8e22"]
}, Open  ]],

Cell["\<\
The reader is encouraged to eliminate the local variables and write a \
\[OpenCurlyDoubleQuote]one line\[CloseCurlyDoubleQuote] version of this \
function.\
\>", "Text",ExpressionUUID->"1c862991-4e2b-49e1-a0bd-de254ccaf2e0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Indistinguishable Objects and Distinguishable Boxes", "Subsection",
 CellTags->"Section5e",ExpressionUUID->"653c587c-3787-44c4-a3a6-acbf4e69f550"],

Cell["\<\
The text describes the correspondence between questions about placing \
indistinguishable objects into distinguishable boxes and about combination \
with repetition questions.\
\>", "Text",ExpressionUUID->"e5ca6c37-a3de-4c20-8720-a33012ad0c82"],

Cell[TextData[{
 "Example 9 asks how many ways 10 indistinguishable balls can be placed in 8 \
bins. We can use the ",
 StyleBox["CRep", "Code"],
 " function written earlier."
}], "Text",ExpressionUUID->"b143e489-d6d5-42a4-b26f-2014d76541fc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CRep", "[", 
  RowBox[{"8", ",", "10"}], "]"}]], "Input",
 CellLabel->
  "In[131]:=",ExpressionUUID->"b1f257f5-1df5-43c7-bfe0-40bc9b44953b"],

Cell[BoxData["19448"], "Output",
 CellLabel->
  "Out[131]=",ExpressionUUID->"865e0ddd-38e9-4f2f-bf8a-6fc430529afd"]
}, Open  ]],

Cell["\<\
It may seem that the arguments were reversed. Keep in mind that the \
connection to combinations with repetition is that you are selecting 10 bins \
from the 8 available bins, with repetition allowed.\
\>", "Text",ExpressionUUID->"2550f9e0-87d5-4a59-8883-ad17473eac8a"],

Cell[CellGroupData[{

Cell["Compositions and Weak Compositions", "Subsubsection",ExpressionUUID->"d4733b5c-a776-4b32-8a7b-bf61a0989ba1"],

Cell[TextData[{
 "We can also use the Wolfram Language ",
 StyleBox[ButtonBox["Compositions",
  BaseStyle->"Link",
  ButtonData->"paclet:Combinatorica/ref/Compositions"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["NumberOfCompositions",
  BaseStyle->"Link",
  ButtonData->"paclet:Combinatorica/ref/NumberOfCompositions"], 
  "FunctionLink"],
 " functions to answer questions of this kind. A ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "abf2e70f-ce10-444d-a363-471d0c175be0"],
 "-composition of a positive integer ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "a8b73dca-3b9a-47f6-99ce-ee0c8873c385"],
 " is a way of writing ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "6c9da234-9fc2-4181-b6e9-cce0c83ad291"],
 " as the sum of ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "de1e2f87-f508-479a-9f6e-ad0f6e56aee9"],
 " positive integers where the order of the summands matters. For example, 4 \
has three distinct 2-compositions: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"3", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "3416c468-9391-4555-9678-9cb154f2cb77"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", "+", "2"}], TraditionalForm]],ExpressionUUID->
  "37423c11-6f28-4634-a99f-85d6ecda8a8c"],
 ", and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "+", "3"}], TraditionalForm]],ExpressionUUID->
  "9cef7174-f49c-4c3b-95af-31028134bde4"],
 "."
}], "Text",ExpressionUUID->"35b87875-0596-4a99-b33d-9a87d04f8f0d"],

Cell[TextData[{
 "A weak composition is similar, but the terms in the sum are allowed to be \
0. Thus, 4 has five distinct weak 2-compositions: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"4", "+", "0"}], TraditionalForm]],ExpressionUUID->
  "a160b95c-1dc7-4899-9cc2-ca05d57b112f"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "+", "4"}], TraditionalForm]],ExpressionUUID->
  "9fb3f836-9688-4453-9bd2-98871330743b"],
 " in addition to the three listed before."
}], "Text",ExpressionUUID->"be61f440-02ca-4104-abd4-212dbab0aa88"],

Cell[TextData[{
 "Note that the weak ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "08571cef-3eb3-4f10-9a75-41064323b00d"],
 "-compositions of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "fd17df53-9543-41f4-9003-278ade4504b8"],
 " correspond to the ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "28be5c8e-6846-4024-bdf6-ddce116743e4"],
 "-compositions of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "+", "r"}], TraditionalForm]],ExpressionUUID->
  "e9c7ad57-03ad-4de7-bc58-d5599f65681e"],
 ". For suppose that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["x", "1"], "+", 
     SubscriptBox["x", "2"], "+", "\[CenterEllipsis]", "+", 
     SubscriptBox["x", "r"]}], "=", "n"}], TraditionalForm]],ExpressionUUID->
  "8dd800c9-0a7b-4bee-94b6-bbe9e2368a1b"],
 " is a weak ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "aff7ebdd-497e-4cd0-a9a4-5183b34c3849"],
 "-composition. As this is a weak ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "272941da-c5ad-4c53-b5a2-831da2e94178"],
 "-composition, each ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]],ExpressionUUID->
  "545a597a-5a7b-4f8c-9dc4-195b96adb038"],
 " is nonnegative. Therefore,"
}], "Text",ExpressionUUID->"cb8fefb1-905e-4c2d-8a70-f9d9bb9e2e51"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["x", "1"], "+", "1"}], ")"}], "+", 
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["x", "2"], "+", "1"}], ")"}], "+", "\[CenterEllipsis]", 
     "+", 
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["x", "r"], "+", "1"}], ")"}]}], "=", 
    RowBox[{"n", "+", "r"}]}], ","}], TraditionalForm]], "Equation",Expression\
UUID->"ff2c8ccc-a717-4427-9554-09063f032c44"],

Cell[TextData[{
 "and each ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "i"], "+", "1"}], TraditionalForm]],ExpressionUUID->
  "edb5fed9-53d1-49fe-8744-5f2d5ba21b9c"],
 " is positive, and hence this is a composition of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "+", "r"}], TraditionalForm]],ExpressionUUID->
  "c9702bf6-75ab-4055-9dcd-cd38134a30f4"],
 ". Likewise, any ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "c0e2c795-0d05-4589-8123-e6a08477205a"],
 "-composition of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "+", "r"}], TraditionalForm]],ExpressionUUID->
  "8b5d5db9-3695-454b-99db-94e06efd9910"],
 " can be transformed into a weak ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "a509446e-2c85-484c-8743-531ba5e0eae5"],
 "-composition by subtracting 1 from each term."
}], "Text",ExpressionUUID->"50683501-5dee-4a3f-ab52-4a10cfaf0d2c"],

Cell[TextData[{
 "Also note that weak ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "835e8bca-5758-49cf-a99f-e13fc0ccb710"],
 "-compositions of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "0d710efe-31c0-4726-a0f6-8e77609cfb27"],
 " correspond to placing ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "b4a25826-333b-44d3-9342-e8591feb0fad"],
 " indistinguishable balls into ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "36b794f7-b42a-4b83-b69c-8224e2ba0786"],
 " distinguishable bins. Suppose ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["x", "1"], "+", 
     SubscriptBox["x", "2"], "+", "\[CenterEllipsis]", "+", 
     SubscriptBox["x", "r"]}], "=", "n"}], TraditionalForm]],ExpressionUUID->
  "baffdeaf-8528-46a8-8881-a49191ca2967"],
 " is a weak ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "9bf769b0-cb5d-4a0e-a936-a1cfffd8527d"],
 "-composition of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "593ec08d-9862-46ac-90ac-df3b8c6885e9"],
 ". This can be identified with placing ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "1"], TraditionalForm]],ExpressionUUID->
  "63d4fbc3-84bc-498f-bf53-fef0675cbbf7"],
 " of the objects into the first bin, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "2"], TraditionalForm]],ExpressionUUID->
  "29c80b1d-d5bb-4d4f-90e7-d5d9c69466f4"],
 " objects in the second bin, etc."
}], "Text",ExpressionUUID->"682665ca-5474-4807-b27d-439899e4ad8b"],

Cell[TextData[{
 "We now return to ",
 StyleBox[ButtonBox["Compositions",
  BaseStyle->"Link",
  ButtonData->"paclet:Combinatorica/ref/Compositions"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["NumberOfCompositions",
  BaseStyle->"Link",
  ButtonData->"paclet:Combinatorica/ref/NumberOfCompositions"], 
  "FunctionLink"],
 ". These are functions contained in the ",
 StyleBox["Combinatorica",
  FontSlant->"Italic"],
 " package and are not available without loading that package by executing a ",
 StyleBox[ButtonBox["Needs",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Needs"], "FunctionLink"],
 " statement. "
}], "Text",ExpressionUUID->"edfeb7cb-5e26-4b76-af22-20fb6d93bfe2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<Combinatorica`\>\"", "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[132]:=",ExpressionUUID->"a3df1363-0730-4200-9f10-83df99348c9f"],

Cell[BoxData[
 TemplateBox[{
  "General","compat",
   "\"Combinatorica Graph and Permutations functionality has been superseded \
by preloaded functionality. The package now being loaded may conflict with \
this. Please see the Compatibility Guide for details.\"",2,132,2,
   22492513455415507983,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[132]:=",ExpressionUUID->"a10439fa-a870-4ec9-ba45-f17f2a3ea6e3"]
}, Open  ]],

Cell[TextData[{
 "You may safely ignore the compatibility warning in this context. Much of \
the functionality of the ",
 StyleBox["Combinatorica",
  FontSlant->"Italic"],
 " package has been superseded by new functionality in the main kernel in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". However, this does not affect the functions we will be using."
}], "Text",ExpressionUUID->"972bfa6a-c933-4016-838a-d1edad5b39e1"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Compositions",
  BaseStyle->"Link",
  ButtonData->"paclet:Combinatorica/ref/Compositions"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["NumberOfCompositions",
  BaseStyle->"Link",
  ButtonData->"paclet:Combinatorica/ref/NumberOfCompositions"], 
  "FunctionLink"],
 " functions accept the same arguments: the integers ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "5111371a-f2fc-4482-93d7-67ddd4f8f9e4"],
 " and ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "3429a006-82ac-4d2c-b96e-33ce3f1dc338"],
 ". ",
 StyleBox[ButtonBox["NumberOfCompositions",
  BaseStyle->"Link",
  ButtonData->"paclet:Combinatorica/ref/NumberOfCompositions"], 
  "FunctionLink"],
 " outputs the number of ",
 StyleBox["weak",
  FontSlant->"Italic"],
 " ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "d9be73e5-03be-4d0f-8235-c7f7a6e79b48"],
 "-compositions of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "5bdffa5d-1a0a-4bff-8cd8-896efe4c33fc"],
 ", while ",
 StyleBox[ButtonBox["Compositions",
  BaseStyle->"Link",
  ButtonData->"paclet:Combinatorica/ref/Compositions"], "FunctionLink"],
 " returns a list of them. "
}], "Text",ExpressionUUID->"ce4e5a93-d531-41d9-8254-584c79642d5e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NumberOfCompositions", "[", 
  RowBox[{"4", ",", "2"}], "]"}]], "Input",
 CellLabel->
  "In[133]:=",ExpressionUUID->"7dd2a587-0ed7-427c-8b1e-36a081142cf0"],

Cell[BoxData["5"], "Output",
 CellLabel->
  "Out[133]=",ExpressionUUID->"00040572-419a-4c69-905d-9b98fc157cca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Compositions", "[", 
  RowBox[{"4", ",", "2"}], "]"}]], "Input",
 CellLabel->
  "In[134]:=",ExpressionUUID->"cf3b323b-0970-40ea-a567-c8496ae17d39"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[134]=",ExpressionUUID->"b48dcd77-2a24-47a1-a0fc-e9b66451c97b"]
}, Open  ]],

Cell[TextData[{
 "The number of ways to place ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "57d5c025-33bb-4e02-afc0-bb7154f80494"],
 " indistinguishable objects in ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "63c63217-251c-457a-886d-a4b2330bb9f5"],
 " distinguishable boxes is the same as the number of weak ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "1c1cbdd3-1e7f-4469-ad3c-0958615fa3b7"],
 "-compositions of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "74f371f7-3339-4423-8b14-8648be2c8542"],
 ". Consequently, we can determine the number of ways 10 balls can be placed \
in 8 bins, the same question as before, as follows."
}], "Text",ExpressionUUID->"b982e213-14d5-4c7a-928c-ed8befbe6947"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NumberOfCompositions", "[", 
  RowBox[{"10", ",", "8"}], "]"}]], "Input",
 CellLabel->
  "In[135]:=",ExpressionUUID->"6ecc585e-4cd9-40e1-b356-8248c165282c"],

Cell[BoxData["19448"], "Output",
 CellLabel->
  "Out[135]=",ExpressionUUID->"1287a93f-0a06-4e0e-8193-105d7df289ca"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Distinguishable Objects and Indistinguishable Boxes", "Subsection",
 CellTags->"Section5f",ExpressionUUID->"6b3013d9-0e48-4184-bcbd-1656889b5802"],

Cell[TextData[{
 "As described in the text, the number of ways to place ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "f64ec8ce-8591-4a0f-9652-310517c8aa66"],
 " distinguishable objects in ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "aa1104cf-fc45-4382-bc14-cea75703b017"],
 " indistinguishable boxes is given by the Stirling numbers of the second \
kind, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"S", "(", 
    RowBox[{"n", ",", "k"}], ")"}], TraditionalForm]],ExpressionUUID->
  "d38c6c72-e33a-47e0-aee8-3979905c4b1b"],
 "."
}], "Text",ExpressionUUID->"0a826775-19b3-43c9-9aa5-07a61e6a4499"],

Cell[TextData[{
 "The function ",
 StyleBox[ButtonBox["StirlingS2",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StirlingS2"], "FunctionLink"],
 " computes the Stirling number of the second kind. This function requires \
two arguments, the number of objects and the number of boxes. For example, \
the expression below computes the number of ways to put seven different \
employees in four different offices when each office must not be empty."
}], "Text",ExpressionUUID->"5cc93ed3-fdb9-416d-9ad0-c3895afc94db"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StirlingS2", "[", 
  RowBox[{"7", ",", "4"}], "]"}]], "Input",
 CellLabel->
  "In[136]:=",ExpressionUUID->"1a7e2b47-ce17-4ea9-8a61-8870ab4c9718"],

Cell[BoxData["350"], "Output",
 CellLabel->
  "Out[136]=",ExpressionUUID->"bf3157d1-5030-4f20-b3b9-a2ed7ef7a9df"]
}, Open  ]],

Cell["\<\
In order to compute the number of ways to assign the seven employees to the \
four offices and allow empty offices, we must add the number of ways to \
assign all seven employees to one office, to two offices, to three offices, \
and to four offices.\
\>", "Text",ExpressionUUID->"19359906-4c6c-4b54-85cf-370183ede147"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   RowBox[{"StirlingS2", "[", 
    RowBox[{"7", ",", "i"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[137]:=",ExpressionUUID->"4944d5ee-d9e6-428d-9f9e-fe84ebccca79"],

Cell[BoxData["715"], "Output",
 CellLabel->
  "Out[137]=",ExpressionUUID->"8f91f22a-ccee-4fd2-a520-4dd204c747fc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generating Assignments of Employees to Offices", "Subsubsection",
 PageBreakWithin->
  False,ExpressionUUID->"d3abc895-23ad-4f22-b80d-008f52a4ebc7"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["StirlingS2",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StirlingS2"], "FunctionLink"],
 " function tells us how many ways there are to place distinguishable objects \
in indistinguishable boxes. In this subsection, we will create a function to \
list these. However, note that the ",
 StyleBox["Combinatorica",
  FontSlant->"Italic"],
 " package has a function, similar to the one we will create by hand, called ",
 StyleBox[ButtonBox["SetPartitions",
  BaseStyle->"Link",
  ButtonData->"paclet:Combinatorica/ref/SetPartitions"], "FunctionLink"],
 "."
}], "Text",
 PageBreakAbove->False,
 PageBreakWithin->
  False,ExpressionUUID->"80e1668f-48c6-479e-bf10-26a1e5219cea"],

Cell[TextData[{
 "To create a function that will list the possible assignments of \
distinguishable objects to boxes, we rely on the following observations. \
First, as indicated in the text, a choice of distinguishable objects to \
indistinguishable boxes can be modeled as a set of subsets. For instance,",
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"A", ",", "C"}], "}"}], ",", 
     RowBox[{"{", "D", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"B", ",", "E"}], "}"}]}], "}"}], TraditionalForm]],
  ExpressionUUID->"4ec61dfb-7da1-4f8e-ad15-8967ae2dbc2b"],
 " represents the assignment of A and C to one box, D to a box of its own, \
and B and E to another box. The set of subsets must not contain the empty set \
and must be such that the union of the subsets be the entire collection of \
objects."
}], "Text",ExpressionUUID->"9cdd5f61-b380-452d-bd5f-28a488dca49d"],

Cell[TextData[{
 "We can produce such assignments recursively. The basis step is that there \
is only one way to assign ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "787a4f45-a4ba-4fc5-8dd7-8d164138b412"],
 " objects to 1 box and there are no ways to assign ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "d8a8d85c-3419-448d-82e1-27c55e45a0fe"],
 " objects to ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "dedc6bbc-131b-482f-a898-14e1e2bbfee6"],
 " boxes for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", ">", "n"}], TraditionalForm]],ExpressionUUID->
  "385ba930-41c8-407d-8cda-1aa4994d4a43"],
 " (under the requirement that no box be empty). To assign ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "0648f49a-211d-4152-8182-2b443e977732"],
 " objects to ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "62b6cf70-8bb7-4c4d-87a2-d875baaa0b69"],
 " boxes with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "\[LessEqual]", "n"}], TraditionalForm]],ExpressionUUID->
  "e647a533-0c32-43e6-aef0-c9c3094c75e9"],
 ", proceed as follows."
}], "Text",ExpressionUUID->"d10d1797-847f-4802-a196-3dd8b9f94f8d"],

Cell[TextData[{
 "First, find all assignments of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "e6fe829d-2201-4bf6-a798-7a11394cbc9b"],
 " objects to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "e5e61a45-ce73-4737-880f-a2ee7377a9df"],
 " boxes and update each assignment by placing object ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "42e7429a-fd38-47b6-8ef0-97f2b36cba64"],
 " in a box by itself. In terms of the set representation, given ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["B", "1"], ",", 
     SubscriptBox["B", "2"], ",", "\[Ellipsis]", ",", 
     SubscriptBox["B", 
      RowBox[{"k", "-", "1"}]]}], "}"}], TraditionalForm]],ExpressionUUID->
  "5923ecbc-632a-4e9e-b718-e5cf36d7fc3b"],
 ", we produce ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["B", "1"], ",", 
     SubscriptBox["B", "2"], ",", "\[Ellipsis]", ",", 
     SubscriptBox["B", 
      RowBox[{"k", "-", "1"}]], ",", 
     RowBox[{"{", "n", "}"}]}], "}"}], TraditionalForm]],ExpressionUUID->
  "296f0ad2-c82e-46e4-850b-a0cd962d0b42"],
 "."
}], "Text",ExpressionUUID->"844f4930-583d-4e82-90c7-4a17cceeacef"],

Cell[TextData[{
 "Second, find all assignments of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "beb46759-d58d-421d-abf7-f6ff763dcdf8"],
 " objects to ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "ecc21bce-4ccb-491c-818c-858e1aace837"],
 " boxes. For each such assignment ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["B", "1"], ",", 
     SubscriptBox["B", "2"], ",", "\[Ellipsis]", ",", 
     SubscriptBox["B", "k"]}], "}"}], TraditionalForm]],ExpressionUUID->
  "9e303913-635f-47cd-9dd2-177b269e865d"],
 ", produce the following ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "229b85dd-24c5-4f4a-a80c-ded5e2935823"],
 " assignments of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "f388c2d6-6b7d-4448-8d5b-799c9e1ff252"],
 " objects to the ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "d43d1101-b70d-41d2-90a7-d4fd188bf939"],
 " boxes:"
}], "Text",ExpressionUUID->"bcfa9541-146a-4822-b62b-f9761fa810ec"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SubscriptBox["B", "1"], "\[Union]", 
      RowBox[{"{", "n", "}"}]}], ",", 
     SubscriptBox["B", "2"], ",", "\[Ellipsis]", ",", 
     SubscriptBox["B", "k"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["B", "1"], ",", 
     RowBox[{
      SubscriptBox["B", "2"], "\[Union]", 
      RowBox[{"{", "n", "}"}]}], ",", 
     SubscriptBox["B", "3"], ",", "\[Ellipsis]", ",", 
     SubscriptBox["B", "k"]}], "}"}], ",", 
   RowBox[{"\[Ellipsis]", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox["B", "1"], ",", 
      SubscriptBox["B", "2"], ",", "\[Ellipsis]", ",", 
      RowBox[{
       SubscriptBox["B", "k"], "\[Union]", 
       RowBox[{"{", "n", "}"}]}]}], "}"}]}]}], TraditionalForm]], "Equation",E\
xpressionUUID->"5ae41048-0c79-47c4-a9c5-64892bf6c696"],

Cell["\<\
The assignments of objects to boxes produced by the two methods above produce \
all assignments. The following function implements this algorithm.\
\>", "Text",ExpressionUUID->"117dd8e7-0836-47b8-82e9-67db14254dd6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"makeStirling2", "[", 
    RowBox[{"n_Integer", ",", "k_Integer"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"n", ">", "0"}], "&&", 
    RowBox[{"k", ">", "0"}]}]}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "A", ",", "k1boxes", ",", "kboxes", ",", "B", ",", "new", ",", "i"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{"k", "\[Equal]", "1"}], ",", "\[IndentingNewLine]", 
       RowBox[{"A", "=", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"Range", "[", "n", "]"}], "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"k", ">", "n"}], ",", "\[IndentingNewLine]", 
       RowBox[{"A", "=", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", "True", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"the", " ", 
         RowBox[{"recursion", ":"}]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"A", "=", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"n", "-", 
          RowBox[{"1", " ", "objects", " ", "in", " ", "k"}], "-", 
          RowBox[{"1", " ", "boxes"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"k1boxes", "=", 
         RowBox[{"makeStirling2", "[", 
          RowBox[{
           RowBox[{"n", "-", "1"}], ",", 
           RowBox[{"k", "-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"new", "=", 
            RowBox[{"Union", "[", 
             RowBox[{"B", ",", 
              RowBox[{"{", 
               RowBox[{"{", "n", "}"}], "}"}]}], "]"}]}], ";", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"A", ",", "new"}], "]"}]}], "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"B", ",", "k1boxes"}], "}"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"n", "-", 
          RowBox[{"1", " ", "objects", " ", "in", " ", "k", " ", "boxes"}]}], 
         " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"kboxes", "=", 
         RowBox[{"makeStirling2", "[", 
          RowBox[{
           RowBox[{"n", "-", "1"}], ",", "k"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"i", "=", "1"}], ",", 
            RowBox[{"i", "\[LessEqual]", "k"}], ",", 
            RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"new", "=", 
              RowBox[{"ReplacePart", "[", 
               RowBox[{"B", ",", 
                RowBox[{"i", "\[Rule]", 
                 RowBox[{"Append", "[", 
                  RowBox[{
                   RowBox[{"B", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "n"}], "]"}]}]}], 
               "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"A", ",", "new"}], "]"}]}]}], "\[IndentingNewLine]", 
           "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"B", ",", "kboxes"}], "}"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "A"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[138]:=",ExpressionUUID->"ede8a66d-b1b6-446d-87bc-bee9bfa1b2bf"],

Cell[TextData[{
 "Let us analyze the function. It accepts ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "6ea99552-f175-4e42-8de3-43f74ca61f31"],
 " and ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "e4e8a0e8-bd17-4c0e-9318-07d0fa471aa6"],
 " as parameters and returns the list of all possible assignments of \
distinguishable objects to indistinguishable boxes. The symbol ",
 StyleBox["A", "Code"],
 " stores the list that will ultimately be output."
}], "Text",ExpressionUUID->"b2644aa3-780e-4a49-9810-17be9f321d78"],

Cell[TextData[{
 "In the case that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "=", "1"}], TraditionalForm]],ExpressionUUID->
  "040f0586-5439-42b9-b603-761682b2b5b4"],
 ", there is only one possible assignment, all objects are assigned to the \
single box. This assignment is represented by ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", "n"}], "}"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"7eaaee59-db6d-4132-9d18-e6893368eca1"],
 ", since an assignment corresponds to a set of subsets. The function sets \
the output symbol ",
 StyleBox["A", "Code"],
 " to the list consisting of this single assignment when ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "=", "1"}], TraditionalForm]],ExpressionUUID->
  "43df2849-7692-4e7b-a76e-bb806346e3f1"],
 ". Recall the ",
 StyleBox[ButtonBox["Range",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Range"], "FunctionLink"],
 " function applied to a positive integer produces the list of integers from \
1 to that value."
}], "Text",ExpressionUUID->"da683574-31c1-4ad6-9374-5f2abb867a9a"],

Cell[TextData[{
 "If ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", ">", "n"}], TraditionalForm]],ExpressionUUID->
  "9f5899f8-28f7-43c6-b10a-2f9debc8cfe6"],
 ", then there are no valid assignments and the function sets the output \
symbol ",
 StyleBox["A", "Code"],
 " to the empty set."
}], "Text",ExpressionUUID->"bc904446-2f5d-4a09-95a8-d16c8a85cd90"],

Cell[TextData[{
 "Otherwise, the symbol ",
 StyleBox["A", "Code"],
 " is initialized to the empty set. Recall that there are two recursive \
steps: first, expanding on the assignments of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "9044a5ad-6c65-41e9-ae6f-053fa5fcf51f"],
 " objects to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "283f0a20-7f52-46bb-bb4d-10583d00adf6"],
 " boxes, and second, expanding on the assignments of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "3adeb722-7690-4b25-a7ac-0ad0ff2e7802"],
 " objects to ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "be601a05-6442-44d3-8324-595d64497730"],
 " boxes."
}], "Text",ExpressionUUID->"fc5b89c9-f117-4d9b-9ba7-6cf60ed77ed0"],

Cell[TextData[{
 "For the first part, we assign the symbol ",
 StyleBox["k1boxes", "Code"],
 " to the set of assignments of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "d1632a34-7970-44a6-83ab-6f43578d0a88"],
 " objects to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "001c92a6-f808-4d1b-8e77-f361782a914e"],
 " boxes. For each such assignment, that is, each ",
 StyleBox["B", "Code"],
 " in ",
 StyleBox["k1boxes", "Code"],
 ", we add ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "dac782ca-e624-4f6b-b144-b2d1a7cabe42"],
 " in its own box. For example, for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "5"}], "}"}], ",", 
     RowBox[{"{", "2", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "6"}], "}"}]}], "}"}], TraditionalForm]],
  ExpressionUUID->"28ef86f5-515d-4524-bcbf-0d5bdd677def"],
 ", we would add 7:"
}], "Text",ExpressionUUID->"131304b1-26da-4f97-b030-ac72e521dc55"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "5"}], "}"}], ",", 
      RowBox[{"{", "2", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "6"}], "}"}]}], "}"}], "\[Union]", 
    RowBox[{"{", 
     RowBox[{"{", "7", "}"}], "}"}]}], "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "5"}], "}"}], ",", 
      RowBox[{"{", "2", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "6"}], "}"}], ",", 
      RowBox[{"{", "7", "}"}]}], "}"}], "."}]}], TraditionalForm]], "Equation",\
ExpressionUUID->"270b191d-e734-425a-b82e-27df8b8497db"],

Cell[TextData[{
 "This ",
 StyleBox["new", "Code"],
 " assignment is then added to ",
 StyleBox["A", "Code"],
 "."
}], "Text",ExpressionUUID->"17544e96-7282-450e-aac9-5ede68ffa1b1"],

Cell[TextData[{
 "In the second part, we assign ",
 StyleBox["kboxes", "Code",
  IgnoreSpellCheck->True],
 " to the set of assignments of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "049a015f-d284-416d-a4c6-53c3a0538d05"],
 " objects to ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "5c127bcf-7ce4-4fd7-86ba-59184da7eb36"],
 " boxes. For each such assignment ",
 StyleBox["B", "Code"],
 ", we consider each of the ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "5f3253d9-fec5-40f0-92b7-533fc71d56e3"],
 " boxes in turn and add ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "43a76916-b524-4f76-860c-61ec12887930"],
 " to that box. For instance, the assignment ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", "5", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "6"}], "}"}]}], "}"}], TraditionalForm]],
  ExpressionUUID->"212dfdfb-b99e-4a7e-9227-4dd695264c73"],
 " would generate the four assignments:"
}], "Text",ExpressionUUID->"d69a26db-eadc-4b8c-be7b-fa04a187a9ee"],

Cell[BoxData[{
 FormBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "7"}], "}"}], ",", 
    RowBox[{"{", "1", "}"}], ",", 
    RowBox[{"{", "5", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "6"}], "}"}]}], "}"}], 
  TraditionalForm], "\[LineSeparator]", 
 FormBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "7"}], "}"}], ",", 
    RowBox[{"{", "5", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "6"}], "}"}]}], "}"}], 
  TraditionalForm], "\[LineSeparator]", 
 FormBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", "1", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "7"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "6"}], "}"}]}], "}"}], 
  TraditionalForm], "\[LineSeparator]", 
 FormBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", "1", "}"}], ",", 
    RowBox[{"{", "5", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "6", ",", "7"}], "}"}]}], "}"}], 
  TraditionalForm]}], "Equation",ExpressionUUID->"968987d6-22f1-4307-a562-\
12c2c5e0b0e0"],

Cell[TextData[{
 "To create these four ",
 StyleBox["new", "Code"],
 " assignments from the initial assignment ",
 StyleBox["B", "Code"],
 ", we use the ",
 StyleBox[ButtonBox["ReplacePart",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReplacePart"], "FunctionLink"],
 " function. In its simplest form, as we use it here, ",
 StyleBox[ButtonBox["ReplacePart",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReplacePart"], "FunctionLink"],
 " takes two arguments. The first argument is an expression to be \
manipulated, in this case ",
 StyleBox["B", "Code"],
 ", the original list representing an assignment of objects to boxes. The \
second argument is a rule of the form ",
 Cell[BoxData[
  RowBox[{
   StyleBox["index", "CodeVar"], "->", 
   StyleBox["replacement", "CodeVar"]}]], "myCode",ExpressionUUID->
  "3a303126-d7a1-446f-8b93-9ba78bca9b01"],
 ". The ",
 StyleBox["index", "CodeVar"],
 " is the location within ",
 StyleBox["B", "Code"],
 " that is to be substituted with the ",
 StyleBox["replacement", "CodeVar"],
 " expression. In ",
 StyleBox["makeStirling2", "Code"],
 ", we use a ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop variable as the index and the replacement expression is obtained from \
",
 StyleBox[ButtonBox["Append",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Append"], "FunctionLink"],
 " to add the value ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "1502e192-53b7-46bc-8c5e-324a4dad38d6"],
 " to the box at that index."
}], "Text",ExpressionUUID->"b5d0d1f7-99c6-48c0-a75e-048b7bd5af35"],

Cell[TextData[{
 "Compare the result of our function to the solution of Example 10 in Section \
6.5 of the text. We use ",
 StyleBox[ButtonBox["Column",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Column"], "FunctionLink"],
 " to put each assignment on its own line."
}], "Text",ExpressionUUID->"e60a5490-586b-41ff-9724-cde469d18624"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"makeStirling2", "[", 
   RowBox[{"4", ",", "3"}], "]"}], "//", "Column"}]], "Input",
 CellLabel->
  "In[139]:=",ExpressionUUID->"1dc69bcb-f727-46f1-9a9c-6abcc436827c"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "3", "}"}], ",", 
       RowBox[{"{", "4", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "2", "}"}], ",", 
       RowBox[{"{", "4", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"{", "4", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "4"}], "}"}], ",", 
       RowBox[{"{", "2", "}"}], ",", 
       RowBox[{"{", "3", "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}], ",", 
       RowBox[{"{", "3", "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"{", "2", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}]}], "}"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellLabel->
  "Out[139]=",ExpressionUUID->"91b7dcd0-c9f9-4de4-89f9-e0bf8ccdd0d0"]
}, Open  ]],

Cell["\<\
Except for using the integers 1 through 4 instead of the letters A through D, \
the output above is the same as the six ways listed in the text for placing \
the four employees in three offices. \
\>", "Text",ExpressionUUID->"903cbd8d-ebfe-44c2-b475-b66957d9c582"],

Cell[TextData[{
 "To produce all 14 ways to assign the four employees to three offices with \
each office containing any number of employees, we need to loop over the \
different values of ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "262ec45a-c52e-45a6-9fc8-d2a5eb85810d"],
 ". Using ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " to vary the number of offices results in a list, each element of which is \
a list of results. Using ",
 StyleBox[ButtonBox["Flatten",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Flatten"], "FunctionLink"],
 " with second argument 1 combines this list of lists into a single list of \
results. The 1 as the second argument indicates that only the top level of \
lists are to be flattened. The result can be displayed with ",
 StyleBox[ButtonBox["Column",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Column"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"98a7993c-20d2-4828-b350-9a120c57b15a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"makeStirling2", "[", 
       RowBox[{"4", ",", "k"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"k", ",", "1", ",", "3"}], "}"}]}], "]"}], ",", "1"}], "]"}], "//",
   "Column"}]], "Input",
 CellLabel->
  "In[140]:=",ExpressionUUID->"fc3dedbd-7e9c-41d0-8a50-6b686e48abfe"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "4", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "3", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "4"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3", ",", "4"}], "}"}], ",", 
       RowBox[{"{", "2", "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3", ",", "4"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "3", "}"}], ",", 
       RowBox[{"{", "4", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "2", "}"}], ",", 
       RowBox[{"{", "4", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"{", "4", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "4"}], "}"}], ",", 
       RowBox[{"{", "2", "}"}], ",", 
       RowBox[{"{", "3", "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}], ",", 
       RowBox[{"{", "3", "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"{", "2", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}]}], "}"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellLabel->
  "Out[140]=",ExpressionUUID->"d96baf37-2876-4d7b-b2dd-ea545b91cb38"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Indistinguishable Objects and Indistinguishable Boxes", "Subsection",
 CellTags->"Section5g",ExpressionUUID->"d5c42b32-c271-42f6-a9ca-c28096274bc1"],

Cell[TextData[{
 "As described in the main text, distributing ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "c7e82e25-66c7-485f-89cc-7a24417b3eb4"],
 " indistinguishable objects into ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "efd82749-b17c-4b33-910f-ebd3e6dd2802"],
 " indistinguishable boxes is identical to forming a partition of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "a6214427-840a-44ec-9b7f-4f02aa780f94"],
 " into ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "3d1c3fa2-25b8-40c8-b5b7-5c5bc03cdc3c"],
 " positive integers. A partition of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "7a875631-2cbe-4ce8-a48a-03505bd13629"],
 " into ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "f5aab79b-82c5-40d9-97a5-22ec05afe7d1"],
 " positive integers is a sum ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", 
    RowBox[{
     SubscriptBox["a", "1"], "+", 
     SubscriptBox["a", "2"], "+", "\[CenterEllipsis]", "+", 
     SubscriptBox["a", "k"]}]}], TraditionalForm]],ExpressionUUID->
  "9bc8c82d-a7c2-4611-a8f1-b37586db0b9b"],
 " with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "1"], "\[GreaterEqual]", 
    SubscriptBox["a", "2"], "\[GreaterEqual]", "\[CenterEllipsis]", 
    "\[GreaterEqual]", 
    SubscriptBox["a", "k"], ">", "0"}], TraditionalForm]],ExpressionUUID->
  "558699c7-250f-4535-b567-114220cb9648"],
 ". "
}], "Text",ExpressionUUID->"bb7489b6-9cd5-4870-bf92-be17fb05e54b"],

Cell[TextData[{
 "The Wolfram Language functions ",
 StyleBox[ButtonBox["IntegerPartitions",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerPartitions"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["PartitionsP",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PartitionsP"], "FunctionLink"],
 " are used to form and count partitions of integers. With one argument, a \
nonnegative integer ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "f75e0723-2fef-495a-8a82-eb4e1baef7dd"],
 ", ",
 StyleBox[ButtonBox["PartitionsP",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PartitionsP"], "FunctionLink"],
 " returns the total number of partitions of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "a7eb0f9e-0347-4170-83e0-15840d054817"],
 " into as many as ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "04ce8eb7-2b62-4e4f-a2d8-0ab867e4a905"],
 " boxes. Likewise, ",
 StyleBox[ButtonBox["IntegerPartitions",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerPartitions"], "FunctionLink"],
 " applied to one argument returns a list containing lists representing \
partitions of its argument."
}], "Text",ExpressionUUID->"95cfd922-9b26-43a6-87a9-5c2b0babf5f1"],

Cell["\<\
For example, the expressions below compute the number of partitions of 7 and \
lists all the partitions of 7. \
\>", "Text",ExpressionUUID->"dc32c7da-6d52-4c53-8485-9a3438d475da"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PartitionsP", "[", "7", "]"}]], "Input",
 CellLabel->
  "In[141]:=",ExpressionUUID->"764b47d6-04b3-4b3d-acdb-4dbff9269e30"],

Cell[BoxData["15"], "Output",
 CellLabel->
  "Out[141]=",ExpressionUUID->"c823dced-bd2e-4255-a73f-3576240d80bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerPartitions", "[", "7", "]"}]], "Input",
 CellLabel->
  "In[142]:=",ExpressionUUID->"031ee3a8-3c17-4f5b-b083-a28b5367e666"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "7", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}],
     "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[142]=",ExpressionUUID->"0e1e371f-81c6-46b4-bfba-76d6b55be73c"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["IntegerPartitions",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerPartitions"], "FunctionLink"],
 " function also accepts a second argument, which specifies the number of \
summands allowed to appear in a partition. For example, to answer the \
question: how many can you distribute seven indistinguishable balls in up to \
three identical boxes, we would give 3 as the second argument to ",
 StyleBox[ButtonBox["IntegerPartitions",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerPartitions"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"74b7016c-3e18-4737-9ec5-cb43dbfeb6d8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerPartitions", "[", 
  RowBox[{"7", ",", "3"}], "]"}]], "Input",
 CellLabel->
  "In[143]:=",ExpressionUUID->"93e48bc5-117c-428e-a7fe-23449295faef"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "7", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[143]=",ExpressionUUID->"6351161b-95e8-4cae-b28a-3ec4a9bae3a2"]
}, Open  ]],

Cell[TextData[{
 "This second argument, which specifies the length of the partitions, can \
take on many of the usual forms: ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "c943e23d-a6b7-4ee6-8fbf-fedf5915c247"],
 ", as we saw, indicates the maximum length; ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", "n", "}"}], TraditionalForm]],ExpressionUUID->
  "09c99855-d46e-4416-b2bd-9c8a754cf86a"],
 " limits the output to those partitions of length exactly ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "ed694a47-0ee9-4b50-b2f7-129bd2fc392b"],
 ", and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"n", ",", "m"}], "}"}], TraditionalForm]],ExpressionUUID->
  "c34bd1d4-1395-4132-9f75-b51d44dcbd8c"],
 " produces the partitions from length ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "ac9966be-91fd-4fed-99a0-f46eaba84565"],
 " to ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "3c065c57-b560-4ecb-9a43-14d133edfb92"],
 ". In addition, the symbol ",
 StyleBox[ButtonBox["All",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/All"], "FunctionLink"],
 " can be used to list all of the partitions, just as if no second argument \
were given."
}], "Text",ExpressionUUID->"54e70ed1-68d7-48d4-bfac-dee4e92468b5"],

Cell["\<\
For example, the following produces the partitions of 7 whose lengths are \
between 3 and 5.\
\>", "Text",ExpressionUUID->"e58de9f1-2f72-468f-b897-66f292016fe8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerPartitions", "[", 
  RowBox[{"7", ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[144]:=",ExpressionUUID->"f1617555-e8bf-4593-ba10-a9dbfe3342a2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "1", ",", "1", ",", "1"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[144]=",ExpressionUUID->"bac1bf9f-31e0-411e-a7eb-50b7b5fbadde"]
}, Open  ]],

Cell[TextData[{
 StyleBox[ButtonBox["IntegerPartitions",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerPartitions"], "FunctionLink"],
 " also accepts a third optional argument to control what values may appear \
in the partitions. Note that in order to use the this option, the second \
argument, specifying the length, must be given. To allow unrestricted \
lengths, you should give ",
 StyleBox[ButtonBox["All",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/All"], "FunctionLink"],
 " as the second argument. The third argument has only one form: a list of \
the allowable values. "
}], "Text",ExpressionUUID->"61ec3726-7aa5-4420-b323-0ff6225c7e90"],

Cell["\<\
For example, to partition 15 using only 2, 3, and 4, you would enter the \
following.\
\>", "Text",ExpressionUUID->"79611f99-061b-4f83-9b76-4aa1c08bd183"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerPartitions", "[", 
  RowBox[{"15", ",", "All", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[145]:=",ExpressionUUID->"1889e13c-974f-48bc-af0b-3a293cb2aa61"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "4", ",", "4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4", ",", "3", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", "3", ",", "3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", "2", ",", "2", ",", "2", ",", "2"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "3", ",", "3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "3", ",", "2", ",", "2", ",", "2"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2"}],
     "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[145]=",ExpressionUUID->"e060b0d6-87c8-4b8f-942c-0068898946f0"]
}, Open  ]],

Cell["\<\
If you provide a positive integer in the third argument, it is interpreted as \
requesting the partitions with that as the maximum allowable value. For \
example, to answer the question: how many ways are there to distribute seven \
indistinguishable balls in up to five identical boxes when each box can hold \
at most four objects, you would give 4 as the third argument.\
\>", "Text",ExpressionUUID->"aa1dae63-3f62-44c3-96d7-928dd99e6053"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerPartitions", "[", 
  RowBox[{"7", ",", "5", ",", "4"}], "]"}]], "Input",
 CellLabel->
  "In[146]:=",ExpressionUUID->"9a3ccc0a-3d84-4fff-8243-4972052cb278"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "1", ",", "1", ",", "1"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[146]=",ExpressionUUID->"ae237f85-7f54-4b4f-a158-4edc3291f2a4"]
}, Open  ]],

Cell[TextData[{
 "To determine the number, without outputting the list, simply apply ",
 StyleBox[ButtonBox["Length",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Length"], "FunctionLink"],
 ". "
}], "Text",ExpressionUUID->"a7941de5-f5c0-40c4-9f8d-4c3f4d10f37c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"IntegerPartitions", "[", 
   RowBox[{"7", ",", "5", ",", "4"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[147]:=",ExpressionUUID->"33f08f94-cca9-4eab-a3c1-580441a2bc2d"],

Cell[BoxData["9"], "Output",
 CellLabel->
  "Out[147]=",ExpressionUUID->"f5b4780e-a648-43c4-b89e-629e0596f5ae"]
}, Open  ]],

Cell[TextData[{
 "Note that these optional arguments are not available for ",
 StyleBox[ButtonBox["PartitionsP",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PartitionsP"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"9f779291-bf75-493c-8a38-d0ed8f92af9f"],

Cell[CellGroupData[{

Cell["Equivalence of Maximum Length and Maximum Value", "Subsubsection",ExpressionUUID->"de3505c1-a4c2-442f-9f57-c424de045181"],

Cell[TextData[{
 "The partitions of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "f9ab4e98-0087-4d1c-976a-d1daaa7f6f1e"],
 " with at most ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "5f0b3981-ccc6-4e2b-9810-06b2a75a2717"],
 " objects in a box are in one-to-one correspondence with the partitions of \
",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "d9acbbcf-f96b-4891-b598-7c6bfe47a95c"],
 " into at most ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "bba313ad-c5e6-4ddb-af46-218fcc23d2df"],
 " boxes. To understand why, consider the partition ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "2", ",", "1"}], "}"}], TraditionalForm]],
  ExpressionUUID->"a246dcc8-b922-4464-88f4-f03f3c26505e"],
 "."
}], "Text",ExpressionUUID->"31af128c-6b97-4277-882d-1f9aa5ca5329"],

Cell[TextData[{
 "Think about placing the 8 objects in boxes according to the partition ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "2", ",", "1"}], "}"}], TraditionalForm]],
  ExpressionUUID->"628ec249-aaa8-4518-b40f-ada923c82302"],
 ". (The diagram shown below is a Ferrers diagram. A version of this diagram \
can be created with the function ",
 StyleBox[ButtonBox["FerrersDiagram",
  BaseStyle->"Link",
  ButtonData->"paclet:Combinatorica/ref/FerrersDiagram"], "FunctionLink"],
 " in the ",
 StyleBox["Combinatorica",
  FontSlant->"Italic"],
 " package.)"
}], "Text",ExpressionUUID->"07880e29-08e1-45c0-9a15-a4f44ec4ac39"],

Cell[TextData[Cell[BoxData[GridBox[{
   {"X", "X", "X", "X"},
   {"X", "X", "X", " "},
   {"X", " ", " ", " "}
  },
  GridBoxDividers->{
   "Columns" -> {{True}}, "ColumnsIndexed" -> {}, 
    "Rows" -> {True, {False}, True}, 
    "RowsIndexed" -> \
{}}]],ExpressionUUID->"e1aac249-c9a3-406a-b720-cb23b75decbb"]], "Text",Express\
ionUUID->"27448bd6-0579-49de-81cc-c142d3f2c4e7"],

Cell["\<\
Instead of thinking about the columns as the boxes, we can instead consider \
the rows as boxes. \
\>", "Text",ExpressionUUID->"3fb11660-29e0-4034-bb01-71054a1ffc83"],

Cell[TextData[Cell[BoxData[GridBox[{
   {"X", "X", "X", "X"},
   {"X", "X", "X", " "},
   {"X", " ", " ", " "}
  },
  GridBoxDividers->{
   "Columns" -> {True, {False}, True}, "ColumnsIndexed" -> {}, 
    "Rows" -> {{True}}, 
    "RowsIndexed" -> \
{}}]],ExpressionUUID->"7269623d-3bea-4e1e-ae71-689e9241b267"]], "Text",Express\
ionUUID->"743f9252-cba7-4928-9e1f-f4a01c96f3ef"],

Cell[TextData[{
 "Now, the eight objects are contained in three boxes. One box (the top row) \
has four objects, another (the middle row) has three objects, and the last \
box (the bottom row) has one object. In other words, we have partitioned 8 as \
",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", "1"}], "}"}], TraditionalForm]],
  ExpressionUUID->"f38c5ee0-40b0-426b-8eeb-1eacc63c83b4"],
 ". This partition is said to be the transpose of the first. (Note that you \
can also think about forming the transpose by reflecting it across its \
diagonal.)"
}], "Text",ExpressionUUID->"be7f2a65-e741-4760-8918-21296dc5833e"],

Cell[TextData[{
 "The ",
 StyleBox["Combinatorica",
  FontSlant->"Italic"],
 " function ",
 StyleBox[ButtonBox["TransposePartition",
  BaseStyle->"Link",
  ButtonData->"paclet:Combinatorica/ref/TransposePartition"], 
  "FunctionLink"],
 " will compute the transpose of a given partition."
}], "Text",ExpressionUUID->"c76d31c6-aa46-4faa-8eb9-86cf6536d5a9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TransposePartition", "[", 
  RowBox[{"{", 
   RowBox[{"3", ",", "2", ",", "2", ",", "1"}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[148]:=",ExpressionUUID->"3ebfcc7a-8d50-4763-b726-2142b6b27976"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "3", ",", "1"}], "}"}]], "Output",
 CellLabel->
  "Out[148]=",ExpressionUUID->"0f168605-c114-42bb-acb7-7be70b9db547"]
}, Open  ]],

Cell[TextData[{
 "We began with a partition whose maximum entry was 3 and found that its \
transpose was a partition into 3 boxes. It is always the case that the \
transpose of a partition with maximum ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "b1b6015d-239a-41c2-8609-7ecc75fa0d4a"],
 " is a partition into ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "cce79ffe-03db-4c9c-863e-1fa123ef5e63"],
 " boxes. Moreover, this correspondence is one-to-one. We leave it to the \
reader to prove these facts."
}], "Text",ExpressionUUID->"49f6dd8c-f66d-41b9-9c3d-479df8770897"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generating Partitions", "Subsubsection",ExpressionUUID->"02828634-73a5-4df0-8905-592e9fddc603"],

Cell[TextData[{
 "Here, we will describe how to generate partitions and use this description \
to generalize the Wolfram Language function ",
 StyleBox[ButtonBox["PartitionsP",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PartitionsP"], "FunctionLink"],
 " with a second argument limiting the maximum number in the partition."
}], "Text",ExpressionUUID->"d965dd59-1d69-473d-bbdd-23eecd69d52c"],

Cell[TextData[{
 "We will describe how to recursively form the partitions of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "bdc8966a-daf3-4f9b-8e49-4cc00521b04d"],
 " objects when each box can hold at most ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "b53f18de-1122-4e08-823c-9600d9871d6e"],
 " objects. The basis cases are: when ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "=", "1"}], TraditionalForm]],ExpressionUUID->
  "dff33ac5-93b8-4b00-9d0b-19c3a8ddbf10"],
 ", there is only one partition of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "1b9ebc5d-0579-4462-94f0-fe7863bd4243"],
 ", the partition consisting of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "92ad9a03-a2dc-4b22-a143-51610ac29177"],
 " 1s; when ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", "0"}], TraditionalForm]],ExpressionUUID->
  "a8072820-d0b5-48c3-9981-55c5dd037f0c"],
 ", there is only one partition, the empty partition ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", "}"}], TraditionalForm]],ExpressionUUID->
  "e422607c-d69b-4bb9-a0e6-b298fb85d593"],
 "."
}], "Text",ExpressionUUID->"f3d83e8e-f5df-4a60-be24-f5069778b8ec"],

Cell[TextData[{
 "To determine the partitions of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "8f756864-7a61-4b96-b563-6498e485bc5c"],
 " when each box can hold at most ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "08cf37fd-fb8a-4bd8-810e-69583fa5cf91"],
 " objects, with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", ">", "0"}], TraditionalForm]],ExpressionUUID->
  "11dfc5d5-f48c-4068-a6c5-8bf7dfb5db19"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", ">", "1"}], TraditionalForm]],ExpressionUUID->
  "bc5bce70-6454-400f-b4dd-92879146f8cb"],
 ", proceed as follows. First, determine all partitions of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "4e59875f-4a50-48f8-92a0-d93eae436275"],
 " when each box can hold at most ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "5dccfdf8-b13b-40f0-8b90-f9e0119f64b3"],
 " objects. These partitions are also partitions of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "0cdbe184-04df-4f90-a396-c949e0cbbdc1"],
 " satisfying the requirement that each box holds at most ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "ddf69a21-1d85-48f6-a336-d1ec3a90a82d"],
 " objects."
}], "Text",ExpressionUUID->"775af884-5b42-423d-b416-bfb052984ae2"],

Cell[TextData[{
 "Second, provided that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"n", "-", "k"}], "\[GreaterEqual]", "0"}], TraditionalForm]],
  ExpressionUUID->"2a7ffc4d-41de-4431-8327-158658bbac53"],
 ", determine all partitions of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "k"}], TraditionalForm]],ExpressionUUID->
  "2178d05f-6665-48d2-8606-3ff5a72691c8"],
 " when each box can hold at most ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "4231e28f-806b-4fe8-bc7e-5b73eed74087"],
 " objects, and prepend ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "31018012-55ed-4227-a111-fe7ea2b0341d"],
 " to each partition. For example, with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", "7"}], TraditionalForm]],ExpressionUUID->
  "2e9bf37d-c0d6-4e3c-8237-8e6bd451b837"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "=", "3"}], TraditionalForm]],ExpressionUUID->
  "72b5ecc3-7138-464c-9c19-ebe36d3eb454"],
 ", we have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"n", "-", "k"}], "=", "4"}], TraditionalForm]],ExpressionUUID->
  "445252e4-b950-4aaf-a296-3c1a8e7af8e6"],
 " and the partitions of 4 with each box holding at most 3 are:"
}], "Text",ExpressionUUID->"6d771034-e476-429b-9fb6-5ae8f0929cd8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerPartitions", "[", 
  RowBox[{"4", ",", "All", ",", 
   RowBox[{"Range", "[", "3", "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[149]:=",ExpressionUUID->"82331a85-3e57-4d78-b0a0-b85194e47c03"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[149]=",ExpressionUUID->"4fb6720a-4cd2-41dd-b079-994eb2a5231b"]
}, Open  ]],

Cell[TextData[{
 "By prepending 3 to each of these partitions, we obtain ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "3", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}]}], 
   TraditionalForm]],ExpressionUUID->"7238936d-e272-4b2b-82b1-8d7aeccd69ff"],
 ", which are each partitions of 7 with each box having at most 3 objects."
}], "Text",ExpressionUUID->"1a827ee1-a9c8-4590-98dd-2168064d12fb"],

Cell[TextData[{
 "Combining the partitions of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "11d8a45b-e608-486d-a1e3-6ec293ca1807"],
 " with each box holding at most ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "a5896eb3-de79-432e-a997-47474c16c57f"],
 " objects with the partitions of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "05dd4eb5-d3f8-47ce-ba21-c33c50568aba"],
 " formed by appending ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "6a220199-c374-4f49-b744-79a9c6103fd3"],
 " to the partitions of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "k"}], TraditionalForm]],ExpressionUUID->
  "eb2e71ef-85b7-45ce-ae76-e97b01aa0a36"],
 " with each box holding at most ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "8817ab7f-4e44-40fa-9fda-d8dda4e8d9fc"],
 " objects produces all partitions of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "8f903e54-a929-4b9c-b37c-dd5e0746e41a"],
 " with each box holding at most ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "45d29d1e-ea72-4201-9beb-81b2cdd76797"],
 " objects. Setting ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "=", "n"}], TraditionalForm]],ExpressionUUID->
  "7fc7ccb3-7c08-4b3e-bb04-6b29d8f74e22"],
 " produces all partitions of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "eaded1b4-2234-421a-ba3b-44a16b7e6c0e"],
 "."
}], "Text",ExpressionUUID->"d2d805a1-ffb0-4efd-8fa5-2b941783b568"],

Cell["\<\
It is an exercise to implement this algorithm to generate partitions.\
\>", "Text",ExpressionUUID->"53b7e308-8e75-452d-8a42-5cacccf9cc25"],

Cell[TextData[{
 "We can use the above to generalize ",
 StyleBox[ButtonBox["PartitionsP",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PartitionsP"], "FunctionLink"],
 ". We will define a function ",
 StyleBox["myPartitionsP", "Code"],
 ". This function will be defined recursively. The basis cases are when ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "=", "1"}], TraditionalForm]],ExpressionUUID->
  "0e9e7025-afb5-4c1d-8fe3-11b313fcf0ba"],
 " or ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", "0"}], TraditionalForm]],ExpressionUUID->
  "b799f8f9-93e5-4370-a8a2-1771ccb9461b"],
 ", there is one partition."
}], "Text",ExpressionUUID->"262c323b-694e-4871-9db4-277b1213ff64"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"myPartitionsP", "[", 
    RowBox[{"_", ",", "1"}], "]"}], ":=", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"myPartitionsP", "[", 
   RowBox[{"0", ",", "_"}], "]"}], ":=", "1"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[150]:=",ExpressionUUID->"310947c6-b0a4-4855-9a8f-f119979d6f97"],

Cell[TextData[{
 "For ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "<", "0"}], TraditionalForm]],ExpressionUUID->
  "cb6c4b96-6cd6-47c6-93c5-9ff2a34016c8"],
 " or ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "<", "1"}], TraditionalForm]],ExpressionUUID->
  "daf49d4d-3998-4042-8a55-7257b4333d1b"],
 ", there are no partitions."
}], "Text",ExpressionUUID->"22b9f988-79b0-49c9-8e89-fddbab977cb6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"myPartitionsP", "[", 
    RowBox[{"n_", ",", "k_"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"n", "<", "0"}], "||", 
    RowBox[{"k", "<", "1"}]}]}], ":=", "0"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[152]:=",ExpressionUUID->"0005a0fd-22df-435e-a09e-3b6622177dc5"],

Cell[TextData[{
 "Provided that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", ">", "0"}], TraditionalForm]],ExpressionUUID->
  "6b396010-c006-4db9-8976-3b817d3a29d6"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", ">", "1"}], TraditionalForm]],ExpressionUUID->
  "d92cd475-2525-4c73-9d01-0c69bc3c0d08"],
 ", the discussion above leads us to the following recursive definition."
}], "Text",ExpressionUUID->"f914ce04-e452-41fe-998e-4d3e66fd77ed"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"myPartitionsP", "[", 
    RowBox[{"n_Integer", ",", "k_Integer"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"n", ">", "0"}], "&&", 
    RowBox[{"k", ">", "1"}]}]}], ":=", 
  RowBox[{
   RowBox[{"myPartitionsP", "[", 
    RowBox[{"n", ",", 
     RowBox[{"k", "-", "1"}]}], "]"}], "+", 
   RowBox[{"myPartitionsP", "[", 
    RowBox[{
     RowBox[{"n", "-", "k"}], ",", "k"}], "]"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[153]:=",ExpressionUUID->"6091667d-1b59-4724-8dae-15f12634446a"],

Cell[TextData[{
 "We see that the value of this function coincides with the number of \
partitions produced by ",
 StyleBox[ButtonBox["IntegerPartitions",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/IntegerPartitions"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"763b47e9-adaf-44fb-b5cd-d74bd11102c0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"IntegerPartitions", "[", 
   RowBox[{"20", ",", "5"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[154]:=",ExpressionUUID->"f14dd66d-b058-413a-8834-da0b69ad644a"],

Cell[BoxData["192"], "Output",
 CellLabel->
  "Out[154]=",ExpressionUUID->"6afd27df-acbb-449d-83a0-d7f69b3162ac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myPartitionsP", "[", 
  RowBox[{"20", ",", "5"}], "]"}]], "Input",
 CellLabel->
  "In[155]:=",ExpressionUUID->"c04f6d39-a434-49ad-b793-b41d1e5ef975"],

Cell[BoxData["192"], "Output",
 CellLabel->
  "Out[155]=",ExpressionUUID->"0b8b6b8f-b2c2-4dea-84f8-b8e7b657aa07"]
}, Open  ]],

Cell[TextData[{
 "We can easily extend our function to compute all partitions of an integer \
",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "0d87f815-6513-4287-bfc6-b9e87527f6d8"],
 ", as follows."
}], "Text",ExpressionUUID->"bff826da-e628-4e39-b565-e4ec54e7f7f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"myPartitionsP", "[", "n_", "]"}], ":=", 
  RowBox[{"myPartitionsP", "[", 
   RowBox[{"n", ",", "n"}], "]"}]}]], "Input",
 CellLabel->
  "In[156]:=",ExpressionUUID->"c8e398d8-929d-4091-b8c5-929f4fd1ef89"],

Cell["Note that the results agree with the built-in function.", "Text",ExpressionUUID->"428d2914-e0d4-414c-b066-862f146b9c2b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myPartitionsP", "[", "15", "]"}]], "Input",
 CellLabel->
  "In[157]:=",ExpressionUUID->"e85492b2-c0a5-4178-9566-799b30a4e61b"],

Cell[BoxData["176"], "Output",
 CellLabel->
  "Out[157]=",ExpressionUUID->"89021cc9-9530-4702-b8bd-ce4da1089d34"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PartitionsP", "[", "15", "]"}]], "Input",
 CellLabel->
  "In[158]:=",ExpressionUUID->"ca445939-5be1-4763-9b64-676962d1a75e"],

Cell[BoxData["176"], "Output",
 CellLabel->
  "Out[158]=",ExpressionUUID->"d6dea463-a19a-4bb6-a991-e494f1ff038e"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.6 Generating Permutations and Combinations", "Section",
 CellTags->"Section6",ExpressionUUID->"04124958-591e-4af9-afe7-c329f9dfaaca"],

Cell["\<\
In this section, we will implement Algorithm 1 from Section 6.6 of the text \
for generating the next permutation in lexicographic order. Implementing \
Algorithms 2 and 3 will be left as exercises for the reader. \
\>", "Text",ExpressionUUID->"81c52bb8-6bec-48ad-bf34-5aa91e451d3e"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["interchange", "Code"]], "Subsection",
 CellTags->"Section6a",ExpressionUUID->"5afaf9ad-40d8-49d5-b54c-a87a1fd08753"],

Cell["\<\
Before implementing Algorithm 1, we will first write a function to \
interchange two elements in a list. This will be called by the function for \
generating permutations. \
\>", "Text",ExpressionUUID->"668f809a-e278-4664-9ac3-733c7cf793c4"],

Cell[TextData[{
 "The ",
 StyleBox["interchange", "Code"],
 " function will require three parameters: the list and two integers \
representing the indices to be swapped."
}], "Text",ExpressionUUID->"c03e058d-4862-46c2-952b-d54396b8db66"],

Cell["\<\
The function operates as follows. A copy of the list is made. The element in \
the list at the first position to be swapped is assigned to a local variable. \
Then, the first position is assigned to the value in the second position. \
Finally, the second position is assigned to the value stored in the temporary \
name and the list is returned.\
\>", "Text",ExpressionUUID->"e16a5471-be35-44c7-ae02-2f07c7744283"],

Cell["Here is the implementation and an example of applying it. ", "Text",ExpressionUUID->"8c66d8c6-eaae-4dfb-8ee8-c3bca7b3036a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"interchange", "[", 
    RowBox[{"L_List", ",", "i_Integer", ",", "j_Integer"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"0", "<", "i", "\[LessEqual]", 
     RowBox[{"Length", "[", "L", "]"}]}], "&&", 
    RowBox[{"0", "<", "j", "\[LessEqual]", 
     RowBox[{"Length", "[", "L", "]"}]}]}]}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"l", "=", "L"}], ",", "temp"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"temp", "=", 
      RowBox[{"l", "[", 
       RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"l", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "=", 
      RowBox[{"l", "[", 
       RowBox[{"[", "j", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"l", "[", 
       RowBox[{"[", "j", "]"}], "]"}], "=", "temp"}], ";", 
     "\[IndentingNewLine]", "l"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->
  "In[159]:=",ExpressionUUID->"4ee19b54-2f54-419c-b548-d53eb656f7c4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"interchange", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\"", ",", 
     "\"\<e\>\"", ",", "\"\<f\>\""}], "}"}], ",", "2", ",", "5"}], 
  "]"}]], "Input",
 CellLabel->
  "In[160]:=",ExpressionUUID->"f4ec7dc1-a1bd-461c-87a0-ddb23187f036"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"e\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"b\"\>", ",", "\<\"f\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[160]=",ExpressionUUID->"9ea65e50-5e77-4d0f-9e33-93e39d554a59"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["nextPermutation", "Code"]], "Subsection",
 CellTags->"Section6b",ExpressionUUID->"fbeb9bce-ac24-451d-81f9-c714bdc6aca9"],

Cell[TextData[{
 "The input to the function will be a permutation ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["a", "1"], ",", 
     SubscriptBox["a", "2"], ",", "\[Ellipsis]", ",", 
     SubscriptBox["a", "n"]}], "}"}], TraditionalForm]],ExpressionUUID->
  "4cdb1e14-8b2f-4c5e-9756-888edb5053d3"],
 " of the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", "n"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"2eb5bb27-214b-4db1-889a-005b9a7fcefe"],
 ". Algorithm 1 consists of three steps: finding the largest ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "7c32a0c9-569b-4389-9786-b1d378e12a9b"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "j"], "<", 
    SubscriptBox["a", 
     RowBox[{"j", "+", "1"}]]}], TraditionalForm]],ExpressionUUID->
  "b0efb113-61ca-4654-baec-e20432f5edbe"],
 "; finding the smallest ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "k"], TraditionalForm]],ExpressionUUID->
  "07da4c51-b8d8-4986-889a-61cf75e3e930"],
 " to the right of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "j"], TraditionalForm]],ExpressionUUID->
  "f7740414-4ebd-478f-9325-4a9cf1882458"],
 " and interchanging ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "k"], TraditionalForm]],ExpressionUUID->
  "3064fbd3-4619-443c-9b77-b3c8251d346f"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "j"], TraditionalForm]],ExpressionUUID->
  "0e7f13ff-6285-4fb8-b5f7-efc0ec613937"],
 "; and putting the elements in positions ",
 Cell[BoxData[
  FormBox[
   RowBox[{"j", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "62f32b02-c9a7-4b00-9e0c-b91c700f634c"],
 " and beyond in increasing order."
}], "Text",ExpressionUUID->"18bd79cf-a4d8-4a37-9752-ab2e67b38b4d"],

Cell[TextData[{
 "The first step comprises the first four lines of the body of Algorithm 1 in \
the text, ending with the first comment. The index ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "ea998cff-8233-4a34-ac67-fd9c3722b5eb"],
 " is initialized to the next to last index in the permutation. A ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop is used to conduct the search. The body of the loop decreases the \
value of ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "99eabda2-c565-4adb-9220-0d3d88987e32"],
 " by one, and it is controlled by the condition ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "j"], ">", 
    SubscriptBox["a", 
     RowBox[{"j", "+", "1"}]]}], TraditionalForm]],ExpressionUUID->
  "7ba51d0b-2570-4933-aa49-a4ccd518dcb3"],
 ". When the ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop terminates, it will be the case that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "j"], "<", 
    SubscriptBox["a", 
     RowBox[{"j", "+", "1"}]]}], TraditionalForm]],ExpressionUUID->
  "50629be6-b96e-4d2f-a654-a89dada2ace8"],
 " and ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "9aac8c47-72bb-4031-a49c-4b41367f40c0"],
 " is the largest index for which that is true. Consequently, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", 
     RowBox[{"j", "+", "1"}]], ">", 
    SubscriptBox["a", 
     RowBox[{"j", "+", "2"}]], ">", "\[CenterEllipsis]", ">", 
    SubscriptBox["a", "n"]}], TraditionalForm]],ExpressionUUID->
  "8cd51430-cdb0-41ac-8755-9d185c3bfb6b"],
 "."
}], "Text",ExpressionUUID->"83e45379-db88-4b9a-a5a6-b15581f0e876"],

Cell[TextData[{
 "The second step is to find the smallest ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "k"], TraditionalForm]],ExpressionUUID->
  "4cfe086a-fb00-453a-a004-46483824c219"],
 " to the right of and larger than ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "j"], TraditionalForm]],ExpressionUUID->
  "42e41a70-dddb-4060-adba-7e6909d9b0e7"],
 " and interchange the two. Since we are guaranteed that the elements to the \
right of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "j"], TraditionalForm]],ExpressionUUID->
  "f0669e31-41a0-46b3-9612-70c27b370189"],
 " are in increasing order, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "n"], TraditionalForm]],ExpressionUUID->
  "32cd9686-e91e-4967-8655-8ec773ee4b47"],
 " is the smallest element to the right of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "j"], TraditionalForm]],ExpressionUUID->
  "d67ec549-1d16-439c-a318-f623ccc190a4"],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", 
    RowBox[{"n", "-", "1"}]], TraditionalForm]],ExpressionUUID->
  "c18a911f-8155-41b7-8a28-f4065ee04cbc"],
 " is the next smallest, and so on. We are again searching from the right. \
Initialize ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "e1d036fa-3258-4987-9d05-47adc4e12eca"],
 " to ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "b8fb68bf-6673-4e27-a4f7-df73615475f1"],
 ". A ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop is used to decrease ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "57634388-47b3-4f58-97b1-cd959c7c79cc"],
 " by one so long as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "j"], ">", 
    SubscriptBox["a", "k"]}], TraditionalForm]],ExpressionUUID->
  "fcec8402-9576-4e13-acbe-4f233c7e299a"],
 ". When the ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop terminates, ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "61101822-eec0-4540-95f7-2424e30a9605"],
 " will be such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "j"], "<", 
    SubscriptBox["a", "k"]}], TraditionalForm]],ExpressionUUID->
  "dcc8b496-c85d-41ac-8690-35e6964ab792"],
 ". Note that the loop is guaranteed to stop with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", ">", "j"}], TraditionalForm]],ExpressionUUID->
  "924a7dd1-169d-48cf-add6-8975797b6b13"],
 " since ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "j"], "<", 
    SubscriptBox["a", 
     RowBox[{"j", "+", "1"}]]}], TraditionalForm]],ExpressionUUID->
  "31f3cc3a-5327-4cf2-83d3-ca229de6109b"],
 ". Once ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "3a54d529-0552-4433-814d-d6c28c41c80f"],
 " has been identified, we interchange ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "j"], TraditionalForm]],ExpressionUUID->
  "cc931aea-2677-469f-847f-52bc15082460"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "k"], TraditionalForm]],ExpressionUUID->
  "20676e2b-cad2-44c6-9f3d-0dc8267addfb"],
 " using the ",
 StyleBox["interchange", "Code"],
 " function."
}], "Text",ExpressionUUID->"9f73179e-cc6f-4618-9263-ad72031c17bb"],

Cell[TextData[{
 "The third step is to put the elements of the permutation to the right of \
position ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "409544fd-7dca-46bc-82a8-18b5f291d9d2"],
 " in increasing order. Note that before the interchange, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", 
    RowBox[{"j", "+", "1"}]], TraditionalForm]],ExpressionUUID->
  "675546f5-78aa-4403-a561-136c3c639116"],
 " through ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "n"], TraditionalForm]],ExpressionUUID->
  "92102b85-d8f1-4222-9ef2-e98984a88ec0"],
 " were in decreasing order. After the interchange of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "j"], TraditionalForm]],ExpressionUUID->
  "cb27be55-e92d-462c-b001-0db7d365cd67"],
 " with ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "k"], TraditionalForm]],ExpressionUUID->
  "99d3761c-8c2a-426c-9014-585932815560"],
 ", the tail end of the permutation remains in decreasing order. This is \
because ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "j"], TraditionalForm]],ExpressionUUID->
  "96f41ea4-77f8-40c4-9d97-d714d1480af0"],
 " was smaller than ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "k"], TraditionalForm]],ExpressionUUID->
  "194fddd7-8d3c-4e91-a577-5e2f2799c20a"],
 ", but ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "k"], TraditionalForm]],ExpressionUUID->
  "66630c07-8ca0-472c-9d38-fa21dcd9ffb5"],
 " was the smallest of the entries bigger than ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "j"], TraditionalForm]],ExpressionUUID->
  "2da13ac0-8307-4524-92e3-f31c061a52be"],
 ". Thus, all of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", 
     RowBox[{"k", "+", "1"}]], ",", "\[Ellipsis]", ",", 
    SubscriptBox["a", "n"]}], TraditionalForm]],ExpressionUUID->
  "90484dae-119a-4d3d-a4de-bdccb4d751e9"],
 " are smaller than ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "j"], TraditionalForm]],ExpressionUUID->
  "3c7fe762-0a33-42c6-8e6e-aa31a9b4ddcc"],
 ", and all of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", 
     RowBox[{"j", "+", "1"}]], ",", "\[Ellipsis]", ",", 
    SubscriptBox["a", 
     RowBox[{"k", "-", "1"}]]}], TraditionalForm]],ExpressionUUID->
  "4198ecb1-903c-470e-be02-db692627c472"],
 " are larger than ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "k"], TraditionalForm]],ExpressionUUID->
  "a15c4a8c-a10d-41b3-a380-d6f9dec503d7"],
 " which is larger than ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "j"], TraditionalForm]],ExpressionUUID->
  "0f5e6c56-f030-4f41-834f-93e1ae575ce1"],
 ". Therefore, "
}], "Text",ExpressionUUID->"3a9e403d-2627-4658-8a94-a2db5f8d8231"],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["a", 
    RowBox[{"j", "+", "1"}]], ",", "\[Ellipsis]", ",", 
   SubscriptBox["a", 
    RowBox[{"k", "-", "1"}]], ",", 
   SubscriptBox["a", "j"], ",", 
   SubscriptBox["a", 
    RowBox[{"k", "+", "1"}]], ",", "\[Ellipsis]", ",", 
   SubscriptBox["a", "n"]}], TraditionalForm]], "Equation",ExpressionUUID->\
"47a2b79a-850e-4b96-824e-43d37bce29f2"],

Cell["is in decreasing order.", "Text",ExpressionUUID->"9f106fb7-7e55-4f18-899f-805b8d6a6a65"],

Cell[TextData[{
 "To put the tail in increasing order, we follow the instructions in the \
pseudocode in the textbook that follows the interchange of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "j"], TraditionalForm]],ExpressionUUID->
  "9ebac253-8b0e-4974-923f-2183b400390a"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "k"], TraditionalForm]],ExpressionUUID->
  "f636d60c-bc67-4480-a7b6-b53d533ca186"],
 ". Variables ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "09840d4c-c887-41cf-90ab-4ce3f7c633a4"],
 " and ",
 Cell[BoxData[
  FormBox["s", TraditionalForm]],ExpressionUUID->
  "69b84f44-48fd-4723-b201-cdda624941e4"],
 " are initialized to ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "952cdad9-61fe-421f-9320-5a783d63d3bb"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"j", "+", "1"}], TraditionalForm]],ExpressionUUID->
  "5ed79bfa-1e80-4766-a360-3565a3a12d42"],
 ", respectively. Provided that ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "f65922be-4a12-4b85-8c1c-f7bca59ca66a"],
 " remains larger than ",
 Cell[BoxData[
  FormBox["s", TraditionalForm]],ExpressionUUID->
  "ac85e422-e4b6-4437-b382-ff6692d23fe6"],
 ", we interchange ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "r"], TraditionalForm]],ExpressionUUID->
  "3bcb0324-0168-47a6-875d-5724dc344618"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "s"], TraditionalForm]],ExpressionUUID->
  "af9e1bea-cfb2-4ba2-8e95-8d3bca59471e"],
 " and then decrease ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "947d54b8-c92e-4f79-a276-7aeeeb18099e"],
 " by 1 and increase ",
 Cell[BoxData[
  FormBox["s", TraditionalForm]],ExpressionUUID->
  "f644887a-4636-4306-9adf-ac55e8df8320"],
 " by 1. This has the effect of swapping ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", 
    RowBox[{"j", "+", "1"}]], TraditionalForm]],ExpressionUUID->
  "7f5b5f4a-2b8c-4b89-b04c-9815766ad00e"],
 " with ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", "n"], TraditionalForm]],ExpressionUUID->
  "001e715d-b97a-408d-a560-c6175f99fb18"],
 ", then ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", 
    RowBox[{"j", "+", "2"}]], TraditionalForm]],ExpressionUUID->
  "c99a5e78-0863-4281-b233-acebd55ce46f"],
 " with ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", 
    RowBox[{"n", "-", "1"}]], TraditionalForm]],ExpressionUUID->
  "2dbfb0b1-d937-448c-b522-60aba2b41d1d"],
 ", then ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", 
    RowBox[{"j", "+", "3"}]], TraditionalForm]],ExpressionUUID->
  "ab605ef1-38c6-40b0-8a7b-aeb9d56d61ca"],
 " with ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["a", 
    RowBox[{"n", "-", "2"}]], TraditionalForm]],ExpressionUUID->
  "1af195ae-0129-443f-9a68-17edecd848ae"],
 ", etc."
}], "Text",ExpressionUUID->"55573598-34d1-4eee-aaac-128d28d0a4b2"],

Cell["\<\
Once the tail is in increasing order, the result is the new permutation and \
it is returned. \
\>", "Text",ExpressionUUID->"98913e59-7efa-4e41-9d8e-205be59dedf6"],

Cell[TextData[{
 "We need to add to the function two tests to ensure that the input is valid. \
First, as a ",
 StyleBox[ButtonBox["Condition",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Condition"], "FunctionLink"],
 " (",
 StyleBox["/;", "Code"],
 ") to the function definition, we ensure that the input is a permutation of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", "n"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"2799dbbc-bb61-4a3a-a246-86a11900f6a8"],
 ". We do this by sorting the input, using the ",
 StyleBox[ButtonBox["Sort",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sort"], "FunctionLink"],
 " function, and comparing it with the result of applying ",
 StyleBox[ButtonBox["Range",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Range"], "FunctionLink"],
 " to the ",
 StyleBox[ButtonBox["Length",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Length"], "FunctionLink"],
 " of the input list. Second, as the first expression in the function, we \
check to see if the input is the list ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"n", ",", 
     RowBox[{"n", "-", "1"}], ",", "\[Ellipsis]", ",", "2", ",", "1"}], "}"}],
    TraditionalForm]],ExpressionUUID->
  "3a978a52-3356-4337-9a39-5c96e8625bdf"],
 ", which is the final permutation in the canonical order. The ",
 StyleBox[ButtonBox["Reverse",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reverse"], "FunctionLink"],
 " function, applied to a list, simply reverses the order of the list. This \
is used in conjunction with ",
 StyleBox[ButtonBox["Range",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Range"], "FunctionLink"],
 " to produce the list ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"n", ",", 
     RowBox[{"n", "-", "1"}], ",", "\[Ellipsis]", ",", "2", ",", "1"}], "}"}],
    TraditionalForm]],ExpressionUUID->
  "91c0b4e2-9ff8-4474-a6fb-83573cb91f51"],
 ", which is compared to the input. If they agree, ",
 StyleBox[ButtonBox["Return",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Return"], "FunctionLink"],
 " is used to terminate the function and cause the output to be ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"f8119a7c-4e7d-41e0-b3c2-46d3c6a03c21"],

Cell["Here is the implementation. ", "Text",ExpressionUUID->"bb3241dc-6441-45c8-8e97-a146ce329769"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"nextPermutation", "[", "A_List", "]"}], "/;", 
   RowBox[{
    RowBox[{"Sort", "[", "A", "]"}], "\[Equal]", 
    RowBox[{"Range", "[", 
     RowBox[{"Length", "[", "A", "]"}], "]"}]}]}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"a", "=", "A"}], ",", 
      RowBox[{"n", "=", 
       RowBox[{"Length", "[", "A", "]"}]}], ",", "i", ",", "j", ",", "k", ",",
       "r", ",", "s"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"a", "\[Equal]", 
        RowBox[{"Reverse", "[", 
         RowBox[{"Range", "[", "n", "]"}], "]"}]}], ",", 
       RowBox[{"Return", "[", "Null", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"step", " ", "1"}], ":", " ", 
       RowBox[{"find", " ", "j"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"j", "=", 
      RowBox[{"n", "-", "1"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"a", "[", 
         RowBox[{"[", "j", "]"}], "]"}], ">", 
        RowBox[{"a", "[", 
         RowBox[{"[", 
          RowBox[{"j", "+", "1"}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"j", "=", 
        RowBox[{"j", "-", "1"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"step", " ", "2"}], ":", " ", 
       RowBox[{
       "find", " ", "k", " ", "and", " ", "interchange", " ", "aj", " ", 
        "and", " ", "ak"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"k", "=", "n"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"a", "[", 
         RowBox[{"[", "j", "]"}], "]"}], ">", 
        RowBox[{"a", "[", 
         RowBox[{"[", "k", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"k", "=", 
        RowBox[{"k", "-", "1"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"a", "=", 
      RowBox[{"interchange", "[", 
       RowBox[{"a", ",", "j", ",", "k"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"step", " ", "3"}], ":", " ", 
       RowBox[{"sort", " ", "the", " ", "tail"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"r", "=", "n"}], ";", "\[IndentingNewLine]", 
     RowBox[{"s", "=", 
      RowBox[{"j", "+", "1"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"r", ">", "s"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"a", "=", 
         RowBox[{"interchange", "[", 
          RowBox[{"a", ",", "r", ",", "s"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", "=", 
         RowBox[{"r", "-", "1"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"s", "=", 
         RowBox[{"s", "+", "1"}]}]}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "a"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->
  "In[161]:=",ExpressionUUID->"8cd40787-2cf7-4108-b335-3201a01148b0"],

Cell["\<\
Example 2 of Section 6.6 finds that the permutation after 362541 is 364125. \
We use that example to confirm that our function is working. \
\>", "Text",ExpressionUUID->"f235ef49-ec8a-4ce9-bd1c-0753e5ac574c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nextPermutation", "[", 
  RowBox[{"{", 
   RowBox[{"3", ",", "6", ",", "2", ",", "5", ",", "4", ",", "1"}], "}"}], 
  "]"}]], "Input",
 CellLabel->
  "In[162]:=",ExpressionUUID->"81fc0970-585a-409e-ade5-242359d0e63c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "6", ",", "4", ",", "1", ",", "2", ",", "5"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[162]=",ExpressionUUID->"2e2947b2-d09e-4497-ad16-8f94d1726c86"]
}, Open  ]],

Cell[TextData[{
 "To generate all permutations of a set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", "n"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"91f51c84-df78-41de-83b4-f7a552ae3b2b"],
 ", we use a ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop."
}], "Text",ExpressionUUID->"c5da20a9-bd98-4914-819a-3cc2d8fe94a9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"aperm", "=", 
   RowBox[{"Range", "[", "4", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"While", "[", 
  RowBox[{
   RowBox[{"aperm", "=!=", "Null"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Print", "[", "aperm", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"aperm", "=", 
     RowBox[{"nextPermutation", "[", "aperm", "]"}]}]}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input",
 CellLabel->
  "In[163]:=",ExpressionUUID->"30f196cb-c710-4b3c-b1c6-130e3f732662"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"b136d74e-9565-47b2-8c51-241eaa703060"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"9be32464-aa04-4ae6-a77e-96023ca6d99a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"83e1c4b5-1c68-4fe3-9b80-2f5cc1c25668"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"f6a6b137-e579-4b03-a7eb-fa089255fcd3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"160f7a66-599c-4d61-81c3-473e2421217d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"c4ab88d9-fcdc-4245-86f1-2247d695a6ca"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "1", ",", "3", ",", "4"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"7ab15d41-40a5-47fc-8ae2-80d05fb8e185"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "1", ",", "4", ",", "3"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"ae79e142-a0e2-4a67-a8e8-c34c54ad88bc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "1", ",", "4"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"25f6f24c-d959-4450-b64d-ad97b5e1ea3e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "4", ",", "1"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"a4d85a93-0f40-433d-99c9-c5d95d49ebe9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "4", ",", "1", ",", "3"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"3e54b5ba-c860-4e91-ad07-7a3d3ac8662b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "4", ",", "3", ",", "1"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"ee4cb6a8-5e2f-471f-a8cd-41cbf04bfcb2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "1", ",", "2", ",", "4"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"d315b382-55d2-465f-8c18-5ae5ea2a662c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "1", ",", "4", ",", "2"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"5ce3f90e-cb96-430e-9069-a1052c9b67b5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "2", ",", "1", ",", "4"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"c3966b4a-fb45-4b51-9f11-bff11d64a49d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "2", ",", "4", ",", "1"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"420a4b72-a5d6-48dc-98cb-7cade6412d70"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "4", ",", "1", ",", "2"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"0b8db109-0df0-493f-8733-d767aa76fde0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "4", ",", "2", ",", "1"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"b73f92e2-b931-4f29-b0ca-4651cc50ceb5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "1", ",", "2", ",", "3"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"6ac0da5e-963c-443a-a1a6-c05bdb3f1987"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "1", ",", "3", ",", "2"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"7dfbe998-7d6c-4166-a2c6-77cb4de4e383"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "2", ",", "1", ",", "3"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"28b50b85-f0ce-4948-8104-cd8eff427340"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "2", ",", "3", ",", "1"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"99b6eb28-de1d-46b8-bbc7-ef8a06175a4e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "3", ",", "1", ",", "2"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"03e3ccf2-54ee-4afb-a8cd-085d2d26efd1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "3", ",", "2", ",", "1"}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"d450ac54-a96e-4160-a575-32b52eb388fb"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Finding Permutations of Other Sets", "Subsection",
 CellTags->"Section6c",ExpressionUUID->"f42bf01f-940f-45e8-ab27-b3262d4aa096"],

Cell[TextData[{
 "As mentioned in the text, any set with ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "9e4199cd-f588-403f-ad5c-0dbbbf4ef93f"],
 " elements can be put in one-to-one correspondence with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", "n"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"12067514-3f2d-4616-af63-3e873ca6ef96"],
 ". Consequently, any permutation of a set with ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "e00b2b40-0c59-480d-bb0a-a323ede37a09"],
 " elements can be obtained from a permutation of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", "n"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"09b3c62f-11ae-4ba9-bdbc-f1d83891c7e8"],
 " and the correspondence."
}], "Text",ExpressionUUID->"d8e67f9b-d684-4683-9fa2-4650ab287b9f"],

Cell[TextData[{
 "In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", applying a permutation, represented as an arrangement of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", "n"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"04c18f0d-a94f-438b-9d4a-077604372111"],
 ", to a list is particularly easy. The ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") operator can be applied to a list of integers and will return the list \
ordered by the argument. For example, consider the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"062fa6b4-7125-462c-8694-bd1adc2c256a"],
 " and the permutation ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "2"}], "}"}], TraditionalForm]],
  ExpressionUUID->"da4a61c6-61d8-4aea-9df9-5a1023fbe262"],
 ". To arrange ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"c082bdb6-31d4-4681-a34d-4e3d81dba66c"],
 " by the permutation, you simply apply the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") operator to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"a6827509-4c54-4ad5-b9a0-f79053dc4100"],
 " with argument ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "2"}], "}"}], TraditionalForm]],
  ExpressionUUID->"ff80d072-9a08-4522-8ac8-e8eb55e168d9"],
 "."
}], "Text",ExpressionUUID->"b0c99a45-1481-4f3b-8fa2-80ecc6c1e5eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}], "[", 
  RowBox[{"[", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "2"}], "}"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[165]:=",ExpressionUUID->"a7648f26-2980-4fce-9c40-4489548ca62e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}]], "Output",\

 CellLabel->
  "Out[165]=",ExpressionUUID->"30529719-83f2-48a5-820b-60037c020715"]
}, Open  ]],

Cell[TextData[{
 "As another example, consider the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"2", ",", "10", ",", "13", ",", "19"}], "}"}], TraditionalForm]],
  ExpressionUUID->"bfa174cb-757e-4bf6-847b-8db770669266"],
 " and the permutation ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"4", ",", "2", ",", "3", ",", "1"}], "}"}], TraditionalForm]],
  ExpressionUUID->"08e94009-672a-4cda-899d-391b74dbdf88"],
 ". Then, the following expression applies the permutation to the set."
}], "Text",ExpressionUUID->"428062e5-dcc4-4761-bc0c-f1aa315a5439"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"2", ",", "10", ",", "13", ",", "19"}], "}"}], "[", 
  RowBox[{"[", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2", ",", "3", ",", "1"}], "}"}], "]"}], "]"}]], "Input",\

 CellLabel->
  "In[166]:=",ExpressionUUID->"b6db3ac2-398e-490c-9582-69513807c7d0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"19", ",", "10", ",", "13", ",", "2"}], "}"}]], "Output",
 CellLabel->
  "Out[166]=",ExpressionUUID->"df430950-ba93-4c5d-a86a-5387114d7b5a"]
}, Open  ]],

Cell[TextData[{
 "Note that the braces inside the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") operator are required. Without them, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will interpret it as representing nested levels rather than a \
rearrangement. "
}], "Text",ExpressionUUID->"1261bb93-85f7-4422-bb0c-35b03435f4ab"],

Cell[CellGroupData[{

Cell["A Function to Permute a General List", "Subsubsection",ExpressionUUID->"49576963-9da2-499b-8e1f-0cc53194840e"],

Cell[TextData[{
 "We can use the ",
 StyleBox["nextPermutation", "Code"],
 " function and the above information about the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") operator to write a function that outputs all permutations of any list."
}], "Text",ExpressionUUID->"52b52193-2f41-4adc-a1b1-67d40159f968"],

Cell[TextData[{
 "The input to the function will be the list to be permuted. The bulk of the \
function will be contained in a ",
 StyleBox[ButtonBox["Reap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reap"], "FunctionLink"],
 ", with ",
 StyleBox[ButtonBox["Sow",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sow"], "FunctionLink"],
 " applied to each permutation. Otherwise, the function will mirror the ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"], "FunctionLink"],
 " loop above that was used to list the permutations of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], TraditionalForm]],
  ExpressionUUID->"c9dc0416-90db-4724-83c9-705d83d02fdb"],
 ". The main difference is that, rather than just printing those \
permutations, they are used as the argument to the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") operator to permute the given list."
}], "Text",ExpressionUUID->"ccbf028c-0d31-419c-9788-5619046a107e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"permuteList", "[", "L_List", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "perm", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"perm", "=", 
      RowBox[{"Range", "[", 
       RowBox[{"Length", "[", "L", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Reap", "[", "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"perm", "=!=", "Null"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Sow", "[", 
           RowBox[{"L", "[", 
            RowBox[{"[", "perm", "]"}], "]"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"perm", "=", 
           RowBox[{"nextPermutation", "[", "perm", "]"}]}]}]}], 
        "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"2", ",", "1"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[167]:=",ExpressionUUID->"e2be9cb9-6f90-4b2a-8c12-61bd68f6c4d4"],

Cell[TextData[{
 "Below, we list all the permutations of the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"ec645b48-807b-4481-a762-0da180039ebd"],
 "."
}], "Text",ExpressionUUID->"f9afb14d-ca87-471d-ae28-e105b567d742"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"permuteList", "[", 
  RowBox[{"{", 
   RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}], 
  "]"}]], "Input",
 CellLabel->
  "In[168]:=",ExpressionUUID->"71043451-ff72-44b7-9424-52d67db21802"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[168]=",ExpressionUUID->"eef5a37b-6721-4e54-908f-90dfba178cf4"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Solutions to Computer Projects and Computations and Explorations\
\>", "Section",
 CellTags->"Solutions",ExpressionUUID->"71e248da-e17e-4503-a867-d10882050928"],

Cell[CellGroupData[{

Cell["Computer Projects 10", "Subsection",
 CellTags->
  "SolutionsCP10",ExpressionUUID->"8a2b26e2-2992-47e0-bde3-ad62827c39d1"],

Cell[TextData[{
 "Given positive integers ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "5732ef3a-b7e1-41ce-8159-d3f7f6171144"],
 " and ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "1c556e40-d9d6-4162-922f-710d7e12bfde"],
 ", list all the ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "cea9eb1f-0a45-4dea-845d-c3b5f1a2d8cb"],
 "-combinations, with repetition allowed, of the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "\[Ellipsis]", ",", "n"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"132bc8c0-0f00-454c-8949-c8e1d49286a5"],
 "."
}], "Problem",ExpressionUUID->"aa44290c-0904-46f8-ae6e-19642560a02d"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " In Section 6.5 of this manual, we showed that the ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " function could be used to generate combinations with repetition by \
repeating the elements in the list given as the first argument to ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"a729e68e-fe41-4a4c-ab2a-b239ea534ae7"],

Cell[TextData[{
 "To generate the 2-combinations of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], TraditionalForm]],
  ExpressionUUID->"93fbc010-e3b2-485b-8fff-c74136b87091"],
 ", for example, we apply the ",
 StyleBox[ButtonBox["Subsets",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Subsets"], "FunctionLink"],
 " function to the list consisting of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], TraditionalForm]],
  ExpressionUUID->"111d4caa-9c44-42ee-9359-d3fb339c7dd4"],
 ", each repeated twice. Note that the number of repetitions must be the same \
as ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "7e79fc9f-5ba3-4650-9cd1-b0c7315a6607"],
 " in order to choose ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "62075766-5f65-44a1-8f73-a6dd8b3e5b6b"],
 " all of the same object."
}], "Text",ExpressionUUID->"1ae99a81-2e89-4765-9568-726b020f2be2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeleteDuplicates", "[", "\[IndentingNewLine]", 
  RowBox[{"Subsets", "[", 
   RowBox[{
    RowBox[{"Join", "@@", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"ConstantArray", "[", 
        RowBox[{"i", ",", "2"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}]}], "]"}]}], ",", 
    RowBox[{"{", "2", "}"}]}], "]"}], "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[169]:=",ExpressionUUID->"4f806b3b-4c9c-4418-8b81-093931e1fdcb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[169]=",ExpressionUUID->"9a1ed443-754a-4f1f-b7f3-2f930667dda6"]
}, Open  ]],

Cell[TextData[{
 "Refer back to Section 6.5, in the subsection titled \
\[OpenCurlyDoubleQuote]Combinations with Repetition\[CloseCurlyDoubleQuote] \
for information about the use of ",
 StyleBox[ButtonBox["DeleteDuplicates",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/DeleteDuplicates"], "FunctionLink"],
 ", ",
 StyleBox[ButtonBox["Join",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Join"], "FunctionLink"],
 ", ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 ", and ",
 StyleBox[ButtonBox["ConstantArray",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ConstantArray"], "FunctionLink"],
 " in this application."
}], "Text",ExpressionUUID->"32e3cde8-ce28-4afb-830b-bdbc602a8dd4"],

Cell[TextData[{
 "We now write a function that accepts ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "7c299134-176c-4e2d-971d-4f2c2ff0f3ca"],
 " and ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "123cc2d1-f3c9-426f-bf92-0c90bf63999c"],
 " as input and produces all ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "fb676e60-0952-4c1c-89ed-aabb764e96ab"],
 "-combinations with repetition allowed."
}], "Text",ExpressionUUID->"535a3d5d-34d2-481f-a325-012b3b7f4f9f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"subsetsRepetition", "[", 
    RowBox[{"n_Integer", ",", "r_Integer"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"n", ">", "0"}], "&&", 
    RowBox[{"r", ">", "0"}]}]}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"L", ",", "i"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"L", "=", 
      RowBox[{"Range", "[", "n", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"DeleteDuplicates", "[", "\[IndentingNewLine]", 
      RowBox[{"Subsets", "[", 
       RowBox[{
        RowBox[{"Join", "@@", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"ConstantArray", "[", 
            RowBox[{"i", ",", "r"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "L"}], "}"}]}], "]"}]}], ",", 
        RowBox[{"{", "r", "}"}]}], "]"}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[170]:=",ExpressionUUID->"e8ad2b9b-f06d-4432-845f-aac99895cb11"],

Cell[TextData[{
 "We can obtain all of the 3-combinations of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"9177cb00-0510-4ded-a3b0-05eaa4ca7140"],
 " by"
}], "Text",ExpressionUUID->"46a2d84a-95e4-4e68-a6dd-c1dfd3142f19"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"subsetsRepetition", "[", 
  RowBox[{"5", ",", "3"}], "]"}]], "Input",
 CellLabel->
  "In[171]:=",ExpressionUUID->"b311d264-b3a9-4362-816d-6d2b34c5486a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5", ",", "5"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[171]=",ExpressionUUID->"141b00e1-078e-4e3c-95a9-0d2d821bc8be"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computations and Explorations 1", "Subsection",
 CellTags->
  "SolutionsCE1",ExpressionUUID->"093466d0-fde0-49ba-a3e5-ac7d11344e94"],

Cell["\<\
Find the number of possible outcomes in a two-team playoff when the winner is \
the first team to win 5 out of 9, 6 out of 11, 7 out of 13, and 8 out of 15. \
\
\>", "Problem",ExpressionUUID->"ffa21cae-7c01-48a3-92a2-2e7044ba01e2"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " We will designate the two teams as 1 and 2 and model a playoff as a list \
of 1s and 2s. For example, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "2", ",", "1", ",", "1", ",", "1", ",", "2", ",", 
     "1"}], "}"}], TraditionalForm]],ExpressionUUID->
  "1623042d-f0ec-4557-982c-3e7570ecf8a9"],
 " is a playoff in which team 1 wins the first game, team 2 wins games 2 and \
3, team 1 wins games 4, 5, and 6, team 2 wins game 7, and them team 1 wins \
game 8. If the winner is the first team to win 5 out of 9 games, then team 1 \
has won the tournament after 8 games."
}], "Text",ExpressionUUID->"b959128c-bdca-4744-8439-508b1cd4c909"],

Cell[TextData[{
 "We will write a function to produce all of the possible outcomes in a \
playoff where the winner is the first team to win ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "72cbf27e-736b-447a-8caa-6822ffe45f91"],
 " out of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"2", "n"}], "-", "1"}], TraditionalForm]],ExpressionUUID->
  "ff61a133-7468-45f0-b881-db20e2a1ab73"],
 " games."
}], "Text",ExpressionUUID->"9be0fe14-8589-4965-9985-81a8cdb30b3e"],

Cell["\<\
First, we will create a small function that will determine, given a list of \
the outcomes of individual games and the number of games needed to win, \
whether a team has won the playoff or not. The function will return true if \
one of the teams has won or false if neither team has reached the threshold \
for winning.\
\>", "Text",ExpressionUUID->"bddbb9c2-0af0-423e-92d2-991583d2c176"],

Cell[TextData[{
 "The function counts the 1s and 2s in the list. If either number is equal to \
",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "5a89caae-69b8-48df-a460-12d1dcec3b59"],
 ", it returns true. We will use the Wolfram Language ",
 StyleBox[ButtonBox["Count",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Count"], "FunctionLink"],
 " function to determine the number of 1s and 2s in the list. ",
 StyleBox[ButtonBox["Count",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Count"], "FunctionLink"],
 " requires two arguments, an expression and a pattern. It returns the number \
of times the pattern appears in the expression. In this case, the expression \
will be the list representing the playoff and the pattern will be alternately \
1 and 2."
}], "Text",ExpressionUUID->"5e88e7f3-8d49-4e18-8479-b4ee089ebb5e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"playoffWonQ", "[", 
   RowBox[{"L_List", ",", "n_Integer"}], "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"Count", "[", 
     RowBox[{"L", ",", "1"}], "]"}], "\[Equal]", "n"}], "||", 
   RowBox[{
    RowBox[{"Count", "[", 
     RowBox[{"L", ",", "2"}], "]"}], "\[Equal]", "n"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[172]:=",ExpressionUUID->"652a7630-cfff-423b-961e-c63605060ee5"],

Cell[TextData[{
 "For instance, in our example ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "2", ",", "1", ",", "1", ",", "1", ",", "2", ",", 
     "1"}], "}"}], TraditionalForm]],ExpressionUUID->
  "ebfef09d-fd3d-4f9b-9458-6e64ab88e7aa"],
 ", the function recognizes that the playoff has been won."
}], "Text",ExpressionUUID->"70ffc385-1ab3-4260-951b-0207f4851512"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"playoffWonQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "2", ",", "1", ",", "1", ",", "1", ",", "2", ",", 
     "1"}], "}"}], ",", "5"}], "]"}]], "Input",
 CellLabel->
  "In[173]:=",ExpressionUUID->"bd28021a-8fc3-42fe-a6ef-f8391be4bb31"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[173]=",ExpressionUUID->"146db29c-36c4-478d-b4c6-dc342a927670"]
}, Open  ]],

Cell[TextData[{
 "We will construct the possible outcomes as follows. Begin with a list ",
 StyleBox["outcomes", "Code"],
 " and a list ",
 StyleBox["S", "Code"],
 ". Initialize ",
 StyleBox["outcomes", "Code"],
 " to the empty list and ",
 StyleBox["S", "Code"],
 " to the list ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", "2", "}"}]}], "}"}], TraditionalForm]],ExpressionUUID->
  "9d42d463-fc3a-42b9-8beb-5d82623c592f"],
 "."
}], "Text",ExpressionUUID->"6bcd798f-e8cf-4ebd-9d1a-7cd47d3ae6b3"],

Cell[TextData[{
 "Consider the first element of ",
 StyleBox["S", "Code"],
 ", say ",
 StyleBox["p", "Code"],
 ". Remove ",
 StyleBox["p", "Code"],
 " from the list. Then, construct the two lists formed by adding 1 and 2, \
respectively, to ",
 StyleBox["p", "Code"],
 ". For each of these, use ",
 StyleBox["playoffWon", "Code"],
 " to determine whether or not they are outcomes. If so, they are added to \
the ",
 StyleBox["outcomes", "Code"],
 " list, and if not, they are added to the end of ",
 StyleBox["S", "Code"],
 ". When ",
 StyleBox["S", "Code"],
 " is empty, then ",
 StyleBox["outcomes", "Code"],
 " consists of all possible outcomes of the playoff."
}], "Text",ExpressionUUID->"a43e76fd-eeec-42eb-98ab-7d024b7e4414"],

Cell["Here is the function.", "Text",ExpressionUUID->"cc197098-7322-4fb0-875c-7c676fdc0429"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allPlayoffs", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"outcomes", "=", 
       RowBox[{"{", "}"}]}], ",", 
      RowBox[{"S", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "1", "}"}], ",", 
         RowBox[{"{", "2", "}"}]}], "}"}]}], ",", "p", ",", "p1", ",", "p2"}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"S", "\[NotEqual]", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"p", "=", 
         RowBox[{"S", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"S", "=", 
         RowBox[{"Delete", "[", 
          RowBox[{"S", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"p1", "=", 
         RowBox[{"Append", "[", 
          RowBox[{"p", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"p2", "=", 
         RowBox[{"Append", "[", 
          RowBox[{"p", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"playoffWonQ", "[", 
           RowBox[{"p1", ",", "n"}], "]"}], ",", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"outcomes", ",", "p1"}], "]"}], ",", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"S", ",", "p1"}], "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"playoffWonQ", "[", 
           RowBox[{"p2", ",", "n"}], "]"}], ",", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"outcomes", ",", "p2"}], "]"}], ",", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"S", ",", "p2"}], "]"}]}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "outcomes"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[174]:=",ExpressionUUID->"d60db267-2764-43e4-a665-8a2a7754b908"],

Cell["\<\
We now apply this function to playoffs that are best 3 out of 5.\
\>", "Text",ExpressionUUID->"1c7b6797-8749-46ac-ae2b-a527fefe0c68"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"best3of5", "=", 
  RowBox[{"allPlayoffs", "[", "3", "]"}]}]], "Input",
 CellLabel->
  "In[175]:=",ExpressionUUID->"599e31bd-34b8-418e-9e8f-83c1608a7040"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "1", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "1", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "1", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "1", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "2", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "2", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "1", ",", "1", ",", "2"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[175]=",ExpressionUUID->"8b4201b9-039e-4d33-99e8-238fe35858e7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "best3of5", "]"}]], "Input",
 CellLabel->
  "In[176]:=",ExpressionUUID->"1b940968-531e-49ab-be9f-b63ae619ec37"],

Cell[BoxData["20"], "Output",
 CellLabel->
  "Out[176]=",ExpressionUUID->"c935995b-c67f-4610-8977-3278c0755942"]
}, Open  ]],

Cell["\<\
The reader is left to apply the function to the cases called for in the \
problem and to conjecture a general formula.\
\>", "Text",ExpressionUUID->"6195c393-ad13-4364-9700-94e501486c47"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computations and Explorations 3", "Subsection",
 CellTags->
  "SolutionsCE3",ExpressionUUID->"fbb92a79-3731-4f48-9566-cd9e744b806a"],

Cell[TextData[{
 "Verify that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "(", 
    RowBox[{
     RowBox[{"2", "n"}], ",", "n"}], ")"}], TraditionalForm]],ExpressionUUID->
  "d89fa5eb-b555-4082-87b7-8630e2c8a262"],
 " is divisible by the square of a prime, when ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"n", "\[NotEqual]", "1"}], ",", "2", ",", " ", 
    RowBox[{"or", " ", "4"}]}], TraditionalForm]],ExpressionUUID->
  "524655e0-fd4e-4b5d-a0f9-d1ef6f713440"],
 ", for as many positive integers ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "4c083b90-291c-4c18-823d-24975adfdc36"],
 " as you can. [That ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "(", 
    RowBox[{
     RowBox[{"2", "n"}], ",", "n"}], ")"}], TraditionalForm]],ExpressionUUID->
  "e12299ba-1139-4440-9e4b-6fdec9b8cbcd"],
 " is divisible by the square of a prime with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"n", "\[NotEqual]", "1"}], ",", "2", ",", 
    RowBox[{"or", " ", "4"}]}], TraditionalForm]],ExpressionUUID->
  "075f1598-5b1e-4dfb-90a1-4ae981c11fdd"],
 " was proved in 1996 by Andrew Granville and Olivier Ramar\[EAcute], setting \
a conjecture made in 1980 by Paul Erd\[ODoubleAcute]s and Ron Graham.]"
}], "Problem",ExpressionUUID->"19aae068-be34-4a22-afe9-e202bffcfe7a"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " We will first consider one example to see exactly what we need to do. \
Then, we will write a general function. Consider ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", "3"}], TraditionalForm]],ExpressionUUID->
  "3b6b74fe-6e6a-4018-a51d-9df9f6e2d2f5"],
 ", the smallest ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "a9f32da9-373e-4619-8a58-f0553bdea913"],
 " for which the theorem is true."
}], "Text",ExpressionUUID->"6ceb870b-dcf0-4bbf-bc6a-2c9e3f9d1e4c"],

Cell[TextData[{
 "First, compute ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "(", 
    RowBox[{
     RowBox[{"2", "n"}], ",", "n"}], ")"}], TraditionalForm]],ExpressionUUID->
  "38070e02-9f4d-4598-b610-89a85b31361a"],
 " for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", "3"}], TraditionalForm]],ExpressionUUID->
  "abe6d94f-4231-4fe5-8de1-eccb94710d34"],
 "."
}], "Text",ExpressionUUID->"2e05cde8-db1a-4431-a95d-6a8fb9672332"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c3", "=", 
  RowBox[{"Binomial", "[", 
   RowBox[{"6", ",", "3"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[177]:=",ExpressionUUID->"0b42b51c-d301-4384-8d8d-6513fd50e223"],

Cell[BoxData["20"], "Output",
 CellLabel->
  "Out[177]=",ExpressionUUID->"130ecf09-8490-491d-a9ac-de0d39215f29"]
}, Open  ]],

Cell[TextData[{
 "To determine whether or not ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "(", 
    RowBox[{
     RowBox[{"2", "n"}], ",", "n"}], ")"}], TraditionalForm]],ExpressionUUID->
  "3311e194-3796-4293-a617-1d08288ace2b"],
 " is divisible by the square of a prime, we could look at its prime \
factorization. If any of the exponents in the prime factorization are 2 or \
greater, then we know the number is divisible by the square of the \
corresponding prime."
}], "Text",ExpressionUUID->"58f01fc0-e1b0-4dfb-9d8d-0142ba7f33d3"],

Cell[TextData[{
 "We can use the function ",
 StyleBox[ButtonBox["FactorInteger",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FactorInteger"], "FunctionLink"],
 " (first discussed in Section 4.3 of this manual). The ",
 StyleBox[ButtonBox["FactorInteger",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FactorInteger"], "FunctionLink"],
 " function requires one argument, an integer. Its output is a list of the \
form ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["p", "1"], ",", 
       SubscriptBox["e", "1"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["p", "2"], ",", 
       SubscriptBox["e", "2"]}], "}"}], ",", "\[Ellipsis]", ",", 
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["p", "m"], ",", 
       SubscriptBox["e", "m"]}], "}"}]}], "}"}], TraditionalForm]],
  ExpressionUUID->"aa858f30-f9bd-435a-8ee0-a761e1e97699"],
 ", where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["p", "1"], ",", 
    SubscriptBox["p", "2"], ",", "\[Ellipsis]", ",", 
    SubscriptBox["p", "m"]}], TraditionalForm]],ExpressionUUID->
  "1290f213-54ef-4382-a2d4-96e42fdee65b"],
 " are the primes in the prime factorization and the ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["e", "1"], ",", 
    SubscriptBox["e", "2"], ",", "\[Ellipsis]", ",", 
    SubscriptBox["e", "m"]}], TraditionalForm]],ExpressionUUID->
  "7a4d0ee4-0dc3-480d-b66a-0b5e833376cc"],
 " are the corresponding exponents."
}], "Text",ExpressionUUID->"ff1c963e-c27c-4079-9298-18e4ac82e516"],

Cell[TextData[{
 "Apply ",
 StyleBox[ButtonBox["FactorInteger",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FactorInteger"], "FunctionLink"],
 " to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "(", 
    RowBox[{"6", ",", "3"}], ")"}], TraditionalForm]],ExpressionUUID->
  "297aa89c-3619-4b30-ab04-d03e157fddf7"],
 "."
}], "Text",ExpressionUUID->"60147686-02d1-4d14-a3a5-6b39d710e33d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FactorInteger", "[", "c3", "]"}]], "Input",
 CellLabel->
  "In[178]:=",ExpressionUUID->"95949430-b7f5-4b8b-a879-ea4aa5d70b8e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[178]=",ExpressionUUID->"88d831e6-882a-44a6-b355-116c9fb67fcb"]
}, Open  ]],

Cell[TextData[{
 "The result tells us that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"C", "(", 
     RowBox[{"6", ",", "3"}], ")"}], "=", 
    RowBox[{
     SuperscriptBox["2", "2"], "\[CenterDot]", 
     SuperscriptBox["5", "1"]}]}], TraditionalForm]],ExpressionUUID->
  "9b587d2e-edd3-4526-aa4d-6c1909ac4678"],
 "."
}], "Text",ExpressionUUID->"cd73945b-37f9-41b2-b8dd-2bb68d97d1db"],

Cell[TextData[{
 "We are interested in the exponents of the primes. To extract the second \
element of each pair, we can apply the ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") operator with the part specification ",
 StyleBox["All,2", "Code"],
 "."
}], "Text",ExpressionUUID->"874a4b3d-f754-4d28-af34-8fda6661cd9f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FactorInteger", "[", "c3", "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"All", ",", "2"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[179]:=",ExpressionUUID->"f18f058d-7bba-46f5-9fe7-6bf3ce775c4f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "1"}], "}"}]], "Output",
 CellLabel->
  "Out[179]=",ExpressionUUID->"1edf1736-0538-4692-9a0b-f514dceeadfa"]
}, Open  ]],

Cell[TextData[{
 "Given the list of exponents, determining whether or not ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "(", 
    RowBox[{"6", ",", "3"}], ")"}], TraditionalForm]],ExpressionUUID->
  "665ef035-94ce-48e3-a9c6-afd2371a43db"],
 " is divisible by the square of a prime just amounts to checking whether the \
list contains a value greater than 1. "
}], "Text",ExpressionUUID->"2da0fd31-9fa6-49ac-a7e7-71c27703d4ea"],

Cell[TextData[{
 "As is so often the case, the Wolfram Language provides a shortcut. The \
function ",
 StyleBox[ButtonBox["SquareFreeQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SquareFreeQ"], "FunctionLink"],
 ", applied to an integer, outputs ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 " if the integer is not divisible by the square of a number and it returns \
",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 " if the integer is divisible by a square. "
}], "Text",ExpressionUUID->"ad0e5dc3-ae46-470c-b0ab-a168e5c3f88a"],

Cell[TextData[{
 "For the example ",
 Cell[BoxData[
  FormBox[
   RowBox[{"C", "(", 
    RowBox[{"6", ",", "3"}], ")"}], TraditionalForm]],ExpressionUUID->
  "d1567858-cf5f-41e4-a681-ea56e73a912b"],
 ", ",
 StyleBox[ButtonBox["SquareFreeQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SquareFreeQ"], "FunctionLink"],
 " will output ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 " since 20 is divisible by ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "2"], TraditionalForm]],ExpressionUUID->
  "e3d7cbc9-b8b4-4797-99fb-f5c22a36e61f"],
 "."
}], "Text",ExpressionUUID->"bbcb8f4c-0b52-42cc-b06c-8475e60924ef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SquareFreeQ", "[", "c3", "]"}]], "Input",
 CellLabel->
  "In[180]:=",ExpressionUUID->"cbeca6ac-99b7-4544-921e-294add492544"],

Cell[BoxData["False"], "Output",
 CellLabel->
  "Out[180]=",ExpressionUUID->"600c66d7-6f14-4dfc-bfee-7338b72a4dd0"]
}, Open  ]],

Cell[TextData[{
 "Note that ",
 StyleBox[ButtonBox["SquareFreeQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SquareFreeQ"], "FunctionLink"],
 " returns ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 " when the assertion is verified and ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 " when the assertion fails, such as for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "=", "4"}], TraditionalForm]],ExpressionUUID->
  "f76459f1-f6ef-48d5-9169-31910c9576f4"],
 "."
}], "Text",ExpressionUUID->"710e6adc-516a-4d64-bb54-c87c34905674"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SquareFreeQ", "[", 
  RowBox[{"Binomial", "[", 
   RowBox[{"8", ",", "4"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[181]:=",ExpressionUUID->"b14f37fd-636f-46d1-947d-7889afe08712"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[181]=",ExpressionUUID->"6fb4f15d-93e4-4465-8bcd-a00f869c1249"]
}, Open  ]],

Cell[TextData[{
 "The problem was to verify the conjecture \[OpenCurlyDoubleQuote]for as many \
positive integers ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "045f6208-1aa1-410c-bbeb-ff95b804e6cf"],
 " as you can.\[CloseCurlyDoubleQuote] We will use the ",
 StyleBox[ButtonBox["TimeConstrained",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TimeConstrained"], "FunctionLink"],
 " function to run the test for a specified amount of time. The second \
argument of ",
 StyleBox[ButtonBox["TimeConstrained",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TimeConstrained"], "FunctionLink"],
 " is an amount of time, in seconds, that bounds the time that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will spend executing the first argument. For the first argument, we will \
use an infinite loop that will display values of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "6c3ba99d-b9ac-4943-b312-672d9280bed9"],
 " for which the statement is found to be false. ",
 StyleBox[ButtonBox["TimeConstrained",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TimeConstrained"], "FunctionLink"],
 " takes an optional third argument that is evaluated if the allotted time \
expires. We will use this argument to display the maximum value of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "de5793a0-de84-49aa-a485-f554b7743c1f"],
 " for which the statement was checked. Note that this maximum ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "1f65efed-f7be-4cdc-b1e8-78c9dd894fea"],
 " must be one less than the index used in the loop."
}], "Text",ExpressionUUID->"32baa9bb-7d55-4806-9fb4-6df2eeb36d78"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TimeConstrained", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"n", "=", "1"}], ";", "\[IndentingNewLine]", 
    RowBox[{"While", "[", 
     RowBox[{"True", ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"SquareFreeQ", "[", 
          RowBox[{"Binomial", "[", 
           RowBox[{
            RowBox[{"2", "*", "n"}], ",", "n"}], "]"}], "]"}], ",", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<Found counterexample: \>\"", ",", "n"}], "]"}]}], 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"n", "++"}]}]}], "\[IndentingNewLine]", "]"}]}], ",", 
   "\[IndentingNewLine]", "1", ",", 
   RowBox[{"(*", " ", 
    RowBox[{"1", " ", "second", " ", "limit"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Print", "[", 
    RowBox[{"\"\<Checked through n=\>\"", ",", 
     RowBox[{"n", "-", "1"}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellLabel->
  "In[182]:=",ExpressionUUID->"85a33824-c778-47dc-b1a3-63d4ec49e645"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Found counterexample: \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Found counterexample: ", 1],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[182]:=",ExpressionUUID->"ba1efd4c-c6bd-4e58-a2c6-1a151f32b6ec"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Found counterexample: \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Found counterexample: ", 2],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[182]:=",ExpressionUUID->"3da55ff1-f64a-43c0-8e99-20ad2da60ce9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Found counterexample: \"\>", "\[InvisibleSpace]", "4"}],
  SequenceForm["Found counterexample: ", 4],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[182]:=",ExpressionUUID->"6b336821-3951-4c65-95fd-8bbba071e529"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Checked through n=\"\>", "\[InvisibleSpace]", "11057"}],
  SequenceForm["Checked through n=", 11057],
  Editable->False]], "Print",
 CellLabel->
  "During evaluation of \
In[182]:=",ExpressionUUID->"ef58fb74-f449-450b-9747-be2bd3dd07f8"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exercises", "Section",
 CellTags->"Exercises",ExpressionUUID->"5e74e822-2d2f-4581-a8c5-bbae0d2cc9e4"],

Cell[CellGroupData[{

Cell[TextData[{
 "Build a recursive version of ",
 StyleBox["subsetSumCount", "Code"],
 ", using the ideas of ",
 StyleBox["findBitStrings", "Code"],
 ". Your function should determine all subsets of a given set whose sum is \
less than a target value. Rather than considering all sets, it should build \
potential sets recursively using the fact that once a set has sum larger than \
the target no larger set of positive integers can have smaller sum. Compare \
the performance of your procedure with ",
 StyleBox["subsetSumCount", "Code"],
 "."
}], "Item1Exercise",ExpressionUUID->"7b674584-1849-4ae1-800e-89d728e313c5"],

Cell[TextData[{
 "Create a function ",
 StyleBox["findDecreasing", "Code"],
 " by modifying ",
 StyleBox["findIncreasing", "Code"],
 " in order to determine a strictly decreasing subsequence of maximal \
length."
}], "Item1Exercise",ExpressionUUID->"4ddc4a14-81b6-4279-b73c-507c5f062e35"],

Cell[TextData[{
 "Modify the Patience algorithm to find ",
 StyleBox["all",
  FontSlant->"Italic"],
 " of the strictly increasing subsequences of maximal length. "
}], "Item1Exercise",ExpressionUUID->"cba03203-5f21-452e-9540-9d7a9c5b6ef2"],

Cell[TextData[{
 "Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to find an example demonstrating that ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "57b83774-e268-4cfd-800a-21d7d784b1ff"],
 " positive integers not exceeding ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", "n"}], TraditionalForm]],ExpressionUUID->
  "72302f95-7f81-4677-bfa8-c287cde7ceba"],
 " are not sufficient to guarantee that one integer divides one of the others \
(see Example 11 of Section 6.2)."
}], "Item1Exercise",ExpressionUUID->"a5eb2d77-1ca5-4270-a6b2-006aed9f1fef"],

Cell[TextData[{
 "The functions for comparing and generating circular permutations, ",
 StyleBox["CPEqualQ", "Code"],
 " and ",
 StyleBox["circularPermutations", "Code"],
 ", are inefficient. Using the idea that explains the formula for the number \
of circular ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "ff831fe7-ee54-4001-a5cd-7dd14bbbc69f"],
 "-permutations of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "6be59bf6-d513-4b3a-a983-71d245161b92"],
 " people, write more efficient functions."
}], "Item1Exercise",ExpressionUUID->"ef77fa68-e6ee-46e7-8c45-583a3103ba5d"],

Cell[TextData[{
 "Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to determine how many different strings can be made from the word \
\[OpenCurlyDoubleQuote]PAPARAZZI\[CloseCurlyDoubleQuote] when all the letters \
are used, when any number of letters are used, when all the letters are used \
and the string begins and ends with the letter \[OpenCurlyDoubleQuote]Z\
\[CloseCurlyDoubleQuote], and when all the letters are used and the three \
\[OpenCurlyDoubleQuote]A\[CloseCurlyDoubleQuote]s are consecutive."
}], "Item1Exercise",ExpressionUUID->"0ce75875-d74b-4e90-a4d0-0d7ff6074645"],

Cell[TextData[{
 "Suppose that a certain Department of Mathematics and Statistics has ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "97a685e1-2c42-49fd-a8ba-ce334c7c1bff"],
 " mathematics faculty and ",
 Cell[BoxData[
  FormBox["s", TraditionalForm]],ExpressionUUID->
  "39120e43-9f62-47b0-bd2b-d7bec77e1fda"],
 " statistics faculty. Write a function in the Wolfram Language to find all \
committees with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", "k"}], TraditionalForm]],ExpressionUUID->
  "e4c00a7f-eece-43a0-9c81-7c3667995501"],
 " members in which mathematicians and statisticians are represented \
equally."
}], "Item1Exercise",ExpressionUUID->"bd6c89cb-426f-40da-b8be-7cc029870f1f"],

Cell[TextData[{
 "Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to verify the identity"
}], "Item1Exercise",ExpressionUUID->"6147b476-e2fa-457f-be67-2f9abe36d17d"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"(", GridBox[{
      {
       RowBox[{"n", "+", "1"}]},
      {"k"}
     }], ")"}], "=", 
   RowBox[{
    FractionBox[
     RowBox[{"n", "+", "1"}], "k"], 
    RowBox[{"(", GridBox[{
       {"n"},
       {
        RowBox[{"k", "-", "1"}]}
      }], ")"}]}]}], TraditionalForm]], "ExerciseEquation",ExpressionUUID->\
"ebeb6377-1f39-43f6-8ba5-55e6fffeb987"],

Cell[TextData[{
 "for positive integers ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "ae6726a7-7960-4d5e-9eb8-aa94761cd406"],
 " and ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "0bde85f6-6f77-4441-b27f-4ad4b5db645f"],
 " with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "\[LessEqual]", "n"}], TraditionalForm]],ExpressionUUID->
  "30e9a894-cc30-4542-ad21-c0501f9e73f3"],
 "."
}], "ExerciseContinuation",ExpressionUUID->"c8729fa2-1664-4b64-b104-\
bcac8f65a7b9"],

Cell[TextData[{
 "Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to verify Pascal\[CloseCurlyQuote]s identity:"
}], "Item1Exercise",ExpressionUUID->"57d20f2f-1913-44a1-84a6-d8f6818e7156"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"(", GridBox[{
      {
       RowBox[{"n", "+", "1"}]},
      {"k"}
     }], ")"}], "=", 
   RowBox[{
    RowBox[{"(", GridBox[{
       {"n"},
       {
        RowBox[{"k", "-", "1"}]}
      }], ")"}], "+", 
    RowBox[{"(", GridBox[{
       {"n"},
       {"k"}
      }], ")"}]}]}], TraditionalForm]], "ExerciseEquation",ExpressionUUID->\
"36d8e3a0-b240-4fc9-bbdb-dc9779b868b2"],

Cell[TextData[{
 "for all positive integers ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "23a47bb5-27f5-44e6-b4a9-0aafe73b967d"],
 " and ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "01054261-8dc8-4eec-ab01-c206a0ea5231"],
 " with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "\[LessEqual]", "n"}], TraditionalForm]],ExpressionUUID->
  "838906b4-fc45-4318-ab72-2e944406fa03"],
 "."
}], "ExerciseContinuation",ExpressionUUID->"c9046d3d-5b72-42a0-9b63-\
27c1e487992d"],

Cell[TextData[{
 "Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to generate many rows of Pascal\[CloseCurlyQuote]s triangle. See if you \
can formulate any conjectures involving identities satisfied by the binomial \
coefficients. Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to help you verify that your conjecture is true by using the techniques at \
the end of Section 6.4 of this manual."
}], "Item1Exercise",ExpressionUUID->"4be34e11-b1dd-46e3-937b-af5931cddb82"],

Cell[TextData[{
 "Write a function that mixes the techniques used in ",
 StyleBox["binomialF", "Code"],
 " and ",
 StyleBox["binomialR", "Code"],
 " to generate the rows of Pascal\[CloseCurlyQuote]s triangle from row ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "6cd80721-1de3-4fbc-9f88-45688b4eae11"],
 " to row ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "3d3d2fdd-5110-4883-96e5-3362ca338665"],
 " for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"b", ">", "a", ">", "0"}], TraditionalForm]],ExpressionUUID->
  "dc72248b-a659-4019-b4cf-3b7f9f27f5d2"],
 "."
}], "Item1Exercise",ExpressionUUID->"9733bbeb-f747-49c9-bff2-beee21406b3a"],

Cell[TextData[{
 "Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to count and list all solutions to the equation"
}], "Item1Exercise",ExpressionUUID->"2e62b03e-0c7e-46bb-8431-2191e5edd192"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubscriptBox["x", "1"], "+", 
    SubscriptBox["x", "2"], "+", 
    SubscriptBox["x", "3"], "+", 
    SubscriptBox["x", "4"]}], "=", "25"}], 
  TraditionalForm]], "ExerciseEquation",ExpressionUUID->"ec1c985d-6d82-489c-\
99ce-c3ddfc9632eb"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "1"], ",", 
    SubscriptBox["x", "2"], ",", 
    SubscriptBox["x", "3"], ",", " ", 
    RowBox[{"and", " ", 
     SubscriptBox["x", "4"]}]}], TraditionalForm]],ExpressionUUID->
  "80e0a857-592b-4729-9a0b-00dc17310837"],
 " are nonnegative integers. In addition, count and list all solutions such \
that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["x", "1"], "\[GreaterEqual]", "1"}], ",", 
    RowBox[{
     SubscriptBox["x", "2"], "\[GreaterEqual]", "2"}], ",", 
    RowBox[{
     SubscriptBox["x", "3"], "\[GreaterEqual]", "3"}], ",", 
    RowBox[{
     RowBox[{"and", " ", 
      SubscriptBox["x", "4"]}], "\[GreaterEqual]", "4"}]}], TraditionalForm]],
  ExpressionUUID->"b68f7cdf-3627-42c9-9c8c-d59d13e13241"],
 "."
}], "ExerciseContinuation",ExpressionUUID->"742ebfe1-98c5-4d59-8eb9-\
77d54adec78e"],

Cell["\<\
Generate a large triangle of Stirling numbers of the second kind and look for \
patterns that suggest identities among the Stirling numbers. Also see if you \
can make any conjectures about the relationship between Stirling numbers and \
the binomial coefficients. \
\>", "Item1Exercise",ExpressionUUID->"6fc5cdf6-d6e5-4207-b8a6-66422ff4d698"],

Cell["\<\
Implement the algorithm described in the \[OpenCurlyDoubleQuote]Generating \
partitions\[CloseCurlyDoubleQuote] subsection of Section 6.5 of this manual.\
\>", "Item1Exercise",ExpressionUUID->"f48235a9-e6db-4e4f-92c7-7e308781e7b1"],

Cell[TextData[{
 "Write a function that generates all possible schedules for airplane pilots \
who must fly ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "d959343f-8148-40fd-8a62-1d5c1d7edf59"],
 " days in a month with ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "27e27c38-bd37-4281-8f67-26e54d9025a6"],
 " days with the restriction that they cannot work on consecutive days (see \
Exercise 22 in Section 6.5)."
}], "Item1Exercise",ExpressionUUID->"816242fa-80c7-4291-b2eb-b861c48e2151"],

Cell[TextData[{
 "Write a function in the Wolfram Language that takes as input three positive \
integers ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "7ca5177e-dda5-4ef1-8f19-91a7a828668c"],
 ", ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "598e16a3-a352-4d79-a209-975453760994"],
 ", and ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "c714981f-63a6-4ee0-8754-62a28c220958"],
 ", and returns the ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "ed281680-6ecd-4f6e-8c3b-25d38b7ba177"],
 StyleBox["th",
  IgnoreSpellCheck->True],
 " multinomial, in lexicographic order, of the polynomial ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["x", "1"], "+", 
      SubscriptBox["x", "2"], "+", "\[CenterEllipsis]", "+", 
      SubscriptBox["x", "k"]}], ")"}], "n"], TraditionalForm]],
  ExpressionUUID->"fb72ff3b-e07c-4b3d-805a-5d08570b424b"],
 ". Write its inverse; that is, given a multinomial, the inverse should \
return its index (position) in the sorted polynomial."
}], "Item1Exercise",ExpressionUUID->"2153c736-2a3b-46f5-9c9a-41b4a50c75da"],

Cell["\<\
Implement Algorithm 2 of Section 6.6 for generating the next largest bit \
string. \
\>", "Item1Exercise",ExpressionUUID->"c0916bb5-9b81-4dec-b80c-4f378fd5e09d"],

Cell[TextData[{
 "Implement Algorithm 3 of Section 6.6 for generating the next ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "ba1f814f-22ce-4b98-b2e3-6573a689960b"],
 "-combination. "
}], "Item1Exercise",ExpressionUUID->"ddcbf28a-1507-4a86-b53e-225a98f0e17c"],

Cell["\<\
Write a function in the Wolfram Language to compute the Cantor expansion of \
an integer. (See the prelude to Exercise 14 of Section 6.6 of the text.)\
\>", "Item1Exercise",ExpressionUUID->"7f30c389-80eb-4d86-808d-fa3f4eb51072"],

Cell[TextData[{
 "Implement the algorithm for generating the set of all permutations of the \
first ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "70a3524b-2c00-49f0-ab39-ae825a9955fb"],
 " integers using the bijection from the collection of all permutations of \
the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", "n"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"7eeecc63-4ff9-4369-8afb-c71f32341745"],
 " to the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "\[Ellipsis]", ",", 
     RowBox[{"n", "!"}]}], "}"}], TraditionalForm]],ExpressionUUID->
  "b1ce0c10-cd7a-492e-ba19-0e4753192bb2"],
 " described prior to Exercise 14 of Section 6.6 of the textbook."
}], "Item1Exercise",ExpressionUUID->"c82f79c6-de6c-4df1-9b76-df3cbdbc08b2"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
PrintingStyleEnvironment->"Working",
WindowSize->{725, 850},
WindowMargins->{{Automatic, 10}, {Automatic, 1}},
DockedCells->Cell[
  BoxData[
   TagBox[
    GridBox[{{"\"Exploring Discrete Mathematics with Mathematica\"", 
       ActionMenuBox[
       "\"Navigation\"", {
        "\"CloseAll\"" :> Module[{$CellContext`DJSection$}, SelectionMove[
             SelectedNotebook[], All, Notebook]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; 
           Do[NotebookLocate[$CellContext`DJSection$]; FrontEndExecute[
               FrontEndToken["OpenCloseGroup"]], {$CellContext`DJSection$, {
              "Section1a", "Section1b", "Section1c", "Section1d", "Section2a",
                "Section2b", "Section3a", "Section3b", "Section3c", 
               "Section4a", "Section4b", "Section4c", "Section5a", 
               "Section5b", "Section5c", "Section5d", "Section5e", 
               "Section5f", "Section5g", "Section6a", "Section6b", 
               "Section6c", "SolutionsCE1", "SolutionsCE3", "SolutionsCP10", 
               "Section1", "Section2", "Section3", "Section4", "Section5", 
               "Section6", "Solutions", "Exercises"}}]; SelectionMove[
             SelectedNotebook[], Before, Notebook]], "\"Section1\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section1"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section2\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section2"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section3\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section3"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section4\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section4"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section5\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section5"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section6\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Section6"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Solutions\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Solutions"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Exercises\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Section5", 
                "Section6", "Solutions", "Exercises"}}] 
            NotebookLocate["Exercises"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Open All\"" :> 
         Module[{$CellContext`DJSection$}, 
           Do[NotebookLocate[$CellContext`DJSection$]; FrontEndExecute[
               FrontEndToken[
               "SelectionOpenAllGroups"]], {$CellContext`DJSection$, {
              "Exercises", "Section1", "Section1a", "Section1b", "Section1c", 
               "Section1d", "Section2", "Section2a", "Section2b", "Section3", 
               "Section3a", "Section3b", "Section3c", "Section4", "Section4a",
                "Section4b", "Section4c", "Section5", "Section5a", 
               "Section5b", "Section5c", "Section5d", "Section5e", 
               "Section5f", "Section5g", "Section6", "Section6a", "Section6b",
                "Section6c", "Solutions", "SolutionsCE1", "SolutionsCE3", 
               "SolutionsCP10"}}] SelectionMove[
             SelectedNotebook[], Before, Notebook]]}]}}, 
     GridBoxAlignment -> {
      "Columns" -> {Left, Baseline}, "Rows" -> {Right, Baseline}}, AutoDelete -> 
     False, GridBoxItemSize -> {"Columns" -> {
         Scaled[0.8], 
         Scaled[0.2]}}], "Grid"]], "DockedCell", FontFamily -> "Times"],
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
Magnification->1,
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"Book"}, "Textbook.nb", CharacterEncoding -> 
       "UTF-8"]]], 
   Cell[
    StyleData[All, "Printout"], PageWidth -> PaperWidth, 
    CellHorizontalScrolling -> True, 
    CellLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
    ShowAutoStyles -> False, 
    AutoStyleOptions -> {"HighlightMisspelledWords" -> False}, ScriptMinSize -> 
    9, MenuSortingValue -> 1500, 
    PrivateFontOptions -> {"FontType" -> "Outline"}, Magnification -> 1], 
   Cell[
    StyleData["Title"], Editable -> False, ShowCellBracket -> Automatic, 
    CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
    DefaultNewInlineCellStyle -> {}, LanguageCategory -> "NaturalLanguage", 
    FontFamily -> "Helvetica", FontSize -> 25, FontWeight -> "Bold", 
    FontColor -> GrayLevel[0.137255]], 
   Cell[
    StyleData["BookChapterTitle", StyleDefinitions -> StyleData["Title"]], 
    CellFrame -> {{0, 0}, {1, 1}}, CellDingbat -> Cell[
      BoxData[
       GraphicsBox[{{
          RGBColor[0.09375, 0.570313, 0.816406], 
          RectangleBox[{0, 0}]}, {
          GrayLevel[1], FontSize -> 35, FontWeight -> Bold, FontFamily -> 
          "Helvetica", 
          InsetBox[
           CounterBox["ChapterNumber"], {0.5, 0.45}, {Center, Center}]}}, 
        ImageSize -> {70, 70}]], "Output"], 
    CellMargins -> {{100, 0}, {20, 20}}, CellFrameColor -> GrayLevel[1]], 
   Cell[
    StyleData["DockedCell"], CellMargins -> {{12, 12}, {20, 0}}, 
    CellGroupingRules -> "TitleGrouping", 
    ConversionRules :> {"TeX" -> {"\n\\chapter{", "}"}}, 
    TaggingRules :> {"CounterSettings" -> {"CounterTarget" -> "CellGroup"}}, 
    PageBreakAbove -> False, PageBreakBelow -> False, LineSpacing -> {1, 2}, 
    MenuSortingValue -> 1105, FontFamily -> "Helvetica", FontSize -> 27, 
    FontWeight -> "Bold", Background -> RGBColor[0.09375, 0.570313, 0.816406],
     CounterBoxOptions -> {
     CounterFunction :> Identity}, $CellContext`DefaultReturnCreatedCellStyle -> 
    "Section"], 
   Cell[
    StyleData["FunctionLink"], ConversionRules :> {"TeX" -> {{"", 
         $CellContext`ExportAsHyperRef[], ""}, {"", Automatic, ""}}}, 
    MenuSortingValue -> 1105, ButtonStyleMenuListing -> None, FontFamily -> 
    "Courier", FontVariations -> {"Underline" -> True}, FontColor -> 
    RGBColor[0, 0, 1], 
    ButtonBoxOptions -> {Active -> True, ButtonFunction :> (FrontEndExecute[{
         FrontEnd`NotebookLocate[#2]}]& ), ButtonNote -> ButtonData}], 
   Cell[
    StyleData["Problem"], CellMargins -> {{40, 12}, {15, 15}}, 
    CellGroupingRules -> {"GroupTogetherNestedGrouping", 15010}, 
    ConversionRules :> {
     "TeX" -> {{"", Automatic, ""}, {"\n\n", Automatic, ""}}}, 
    TaggingRules :> {
     "ExtraConversionRules" -> {"General" -> {"RestartList" -> False}}}], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item1Exercise"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Exercise"], "."}], CellSize -> {30, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{50, 12}, {3, 5}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterIncrements -> "Item1Exercise", 
       CounterAssignments -> {{"Item2Exercise", 0}}, MenuSortingValue -> 
       4100], 
      Cell[
       StyleData["Item1Exercise", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Exercise"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{35, 12}, {3, 5}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["ExerciseContinuation"], CellMargins -> {{50, 12}, {1, 3}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, MenuSortingValue -> 4101], 
      Cell[
       StyleData["ExerciseContinuation", "Printout"], 
       CellMargins -> {{35, 12}, {1, 3}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item2Exercise"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item2Exercise"], "."}], CellSize -> {32, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{75, 12}, {1, 2}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17100}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterIncrements -> "Item2Exercise", MenuSortingValue -> 4200, 
       CounterBoxOptions -> {CounterFunction :> (Part[
           CharacterRange["a", "z"], #]& )}], 
      Cell[
       StyleData["Item2Exercise", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item2Exercise"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{50, 12}, {1, 2}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterBoxOptions -> {CounterFunction :> (Part[
           CharacterRange["a", "z"], #]& )}]}, Open]], 
   Cell[
    StyleData["ExerciseEquation"], CellMargins -> {{36, 12}, {7, 7}}, 
    CellGroupingRules -> {"GroupTogetherNestedGrouping", 17200}, 
    CellHorizontalScrolling -> True, 
    CellFrameLabels -> {{None, None}, {None, None}}, DefaultFormatType -> 
    TraditionalForm, InputAutoReplacements -> {}, TextAlignment -> Center, 
    MenuSortingValue -> 4300, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}], 
   Cell[
    StyleData["myCode"], CellMargins -> {{66, 10}, {5, 10}}, 
    StyleKeyMapping -> {"=" -> "WolframAlphaShort"}, Evaluatable -> False, 
    CellGroupingRules -> "InputGrouping", TextClipboardType -> "InputText", 
    PageBreakWithin -> False, GroupPageBreakWithin -> False, 
    DefaultFormatType -> DefaultInputFormatType, ContextMenu -> 
    FEPrivate`FrontEndResource["ContextMenus", "myCode"], ShowAutoStyles -> 
    True, "TwoByteSyntaxCharacterAutoReplacement" -> True, 
    HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"}, 
    AutoItalicWords -> {}, AutoQuoteCharacters -> {}, 
    PasteAutoQuoteCharacters -> {}, LanguageCategory -> "Mathematica", 
    FormatType -> InputForm, NumberMarks -> True, 
    LinebreakAdjustments -> {0.85, 2, 10, 0, 1}, CounterIncrements -> "Code", 
    MenuSortingValue -> 1495, MenuCommandKey -> "8", FontWeight -> 
    "Bold", $CellContext`StripStyleOnPaste -> True], 
   Cell[
    StyleData["CodeVar"], DefaultFormatType -> DefaultInputFormatType, 
    LineBreakWithin -> False, MenuSortingValue -> 10000, FontWeight -> "Bold",
     FontSlant -> "Italic", FontColor -> GrayLevel[0.4]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Section"], CellFrame -> {{6, 0}, {0, 1}}, ShowCellBracket -> 
       Automatic, CellMargins -> {{12, 12}, {3, 24}}, 
       CellGroupingRules -> {"SectionGrouping", 30}, 
       ConversionRules :> {
        "TeX" -> {"\n\\section{", "}"}, 
         "HTML" -> {"<h3 class=\"Section\">", "</h3>"}}, 
       TaggingRules :> {
        "CounterSettings" -> {
          "CounterFormat" -> {"BookChapterNumber", ".", "Section"}, 
           "CounterTarget" -> "Cell", "XRefPrefix" -> "Section"}}, 
       PageBreakBelow -> False, CellFrameMargins -> {{8, 8}, {4, 6}}, 
       CellFrameColor -> RGBColor[0.09375, 0.570313, 0.816406], TabSpacings -> 
       2.1, CounterIncrements -> {
        "Section", "SectionHeader", "SubsectionHeader", "SubsubsectionHeader",
          "SubsubsubsectionHeader"}, FontFamily -> "Helvetica", FontSize -> 
       16, FontWeight -> "Bold", Background -> GrayLevel[0.999985]], 
      Cell[
       StyleData["Section", "Printout"], CellFrame -> {{4, 0}, {0, 0.5}}, 
       CellMargins -> {{2, 2}, {3, 21}}, CellFrameMargins -> {{6, 6}, {3, 5}},
        CellFrameColor -> RGBColor[0.09375, 0.570313, 0.816406]], 
      Cell[
       StyleData["Section", "DoubleSpacedPrintout"], 
       CellFrame -> {{4, 0}, {0, 0.5}}, CellMargins -> {{2, 2}, {3, 21}}, 
       CellFrameMargins -> {{6, 6}, {3, 5}}, CellFrameColor -> 
       RGBColor[0.09375, 0.570313, 0.816406], FontSize -> 14]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Subsubsection"], CellDingbat -> None, 
       CellMargins -> {{12, 12}, {0, 6}}, 
       CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
       CellGroupingRules -> {"SectionGrouping", 50}, 
       ConversionRules :> {
        "TeX" -> {"\n\\subsubsection{", "}"}, 
         "HTML" -> {"<h5 class=\"Subsubsection\">", "</h5>"}}, PageBreakBelow -> 
       False, CellFrameLabelMargins -> 4, 
       CounterIncrements -> {
        "Subsubsection", "SubsubsectionHeader", "SubsubsubsectionHeader"}, 
       FontFamily -> "Helvetica", FontSize -> 11, FontWeight -> "Bold", 
       FontSlant -> "Italic"], 
      Cell[
       StyleData["Subsubsection", "Printout"], FontFamily -> "Helvetica", 
       FontSize -> 11, FontWeight -> "Bold", FontSlant -> "Italic"]}, Open]], 
   
   Cell[
    StyleData["Equation"], CellMargins -> {{26, 10}, {7, 7}}, 
    ConversionRules :> {
     "HTML" -> {{"", ""}, {"<p class=\"Equation\">", "</p>"}}}, 
    CellHorizontalScrolling -> True, DefaultFormatType -> TraditionalForm, 
    InputAutoReplacements -> {}, TextAlignment -> Center, CounterIncrements -> 
    "Equation", ButtonBoxOptions -> {Appearance -> {Automatic, None}}], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item1Numbered"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Numbered"], "."}], CellSize -> {32, Inherited}, 
         TextAlignment -> Right, 
         TextJustification -> (FontWeight -> "Plain")], 
       CellMargins -> {{36, 12}, {1, 3}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 15000}, 
       ConversionRules :> {{"TeX" -> {"\n\\item ", ""}}, {
         "HTML" -> {"<li>", "</li>"}}}, 
       TaggingRules :> {
        "ExtraConversionRules" -> {
          "General" -> {"NestingLevel" -> 30}, 
           "TeX" -> {"CellGroupEnvironment" -> "enumerate"}, 
           "HTML" -> {"CellGroupEnvironment" -> "ol"}}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, TextJustification -> 1, CounterIncrements -> "Item1Numbered", 
       CounterAssignments -> {{"Item2Numbered", 0}, {"Item3Numbered", 0}}], 
      Cell[
       StyleData["Item1Numbered", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Numbered"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Plain"], 
       CellMargins -> {{24, 2}, {1, 2}}, CellFrameLabelMargins -> 3, 
       TextJustification -> 1]}, Open]], 
   Cell[
    StyleData["InitializationCell"], Background -> GrayLevel[1]], 
   Cell[
    StyleData["Item1"], TextJustification -> 1], 
   Cell[
    StyleData["Item1Printout"], TextJustification -> 1, MenuSortingValue -> 
    10000], 
   Cell[
    StyleData["Code"], FormatType -> InputForm]}, Visible -> False, 
  FrontEndVersion -> 
  "11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, 2018)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Section1"->{
  Cell[1331, 44, 123, 1, 55, "Section",ExpressionUUID->"7b6124f2-f942-4f09-a4e0-0b99a7d8422d",
   CellTags->"Section1"]},
 "Section1a"->{
  Cell[2141, 63, 115, 1, 32, "Subsection",ExpressionUUID->"8937d3b6-f1a9-4463-afbc-1f37757eeb9e",
   CellTags->"Section1a"]},
 "Section1b"->{
  Cell[11593, 344, 128, 1, 32, "Subsection",ExpressionUUID->"1b3165d9-8b3d-4911-a079-327009c2cf2e",
   CellTags->"Section1b"]},
 "Section1c"->{
  Cell[26651, 745, 134, 1, 32, "Subsection",ExpressionUUID->"f8c330c6-3a3a-446d-a137-c7a6e56a7906",
   CellTags->"Section1c"]},
 "Section1d"->{
  Cell[31422, 864, 138, 1, 32, "Subsection",ExpressionUUID->"c5860cbb-b483-4954-9b2c-aa5ebe680b83",
   CellTags->"Section1d"]},
 "Section2"->{
  Cell[53768, 1498, 125, 1, 55, "Section",ExpressionUUID->"80447c3b-dd4b-4bf0-bb66-bc6cf3927f05",
   CellTags->"Section2"]},
 "Section2a"->{
  Cell[55411, 1543, 137, 1, 32, "Subsection",ExpressionUUID->"e8ae0ab9-085b-48df-beab-dee6d93834c9",
   CellTags->"Section2a"]},
 "Section2b"->{
  Cell[67458, 1879, 133, 1, 32, "Subsection",ExpressionUUID->"f598a935-470c-4ed1-956e-8be4c0bedade",
   CellTags->"Section2b"]},
 "Section3"->{
  Cell[101256, 2767, 130, 1, 55, "Section",ExpressionUUID->"78d1a55c-6bed-42aa-849b-4e7301f66f76",
   CellTags->"Section3"]},
 "Section3a"->{
  Cell[101603, 2777, 113, 1, 32, "Subsection",ExpressionUUID->"24ab5345-68d2-4452-b82b-f83ae1598e2a",
   CellTags->"Section3a"]},
 "Section3b"->{
  Cell[121043, 3346, 113, 1, 32, "Subsection",ExpressionUUID->"7146bfcf-9e15-438e-bf0d-791abbe37055",
   CellTags->"Section3b"]},
 "Section3c"->{
  Cell[146697, 4099, 122, 1, 32, "Subsection",ExpressionUUID->"132948bd-9df2-4c1e-af9d-71fbcfd5e520",
   CellTags->"Section3c"]},
 "Section4"->{
  Cell[165334, 4618, 137, 1, 55, "Section",ExpressionUUID->"d2110623-6fa1-4c5e-8d68-64fdd2d36bd2",
   CellTags->"Section4"]},
 "Section4a"->{
  Cell[165778, 4631, 121, 1, 32, "Subsection",ExpressionUUID->"767a4ffe-454c-4dd3-8753-207eb0630133",
   CellTags->"Section4a"]},
 "Section4b"->{
  Cell[173593, 4888, 135, 1, 32, "Subsection",ExpressionUUID->"e9d91012-712b-4ddf-bd40-cef9f66d4533",
   CellTags->"Section4b"]},
 "Section4c"->{
  Cell[198302, 5637, 121, 1, 32, "Subsection",ExpressionUUID->"dcf686a4-0010-4064-ab6f-269f0c7d91d8",
   CellTags->"Section4c"]},
 "Section5"->{
  Cell[215061, 6182, 142, 1, 55, "Section",ExpressionUUID->"6a010ab4-5820-446e-be6d-ae1fcfd47626",
   CellTags->"Section5"]},
 "Section5a"->{
  Cell[215567, 6194, 129, 1, 32, "Subsection",ExpressionUUID->"9caf1e98-caa7-4d05-bf35-202ee3a565e8",
   CellTags->"Section5a"]},
 "Section5b"->{
  Cell[239560, 6871, 129, 1, 32, "Subsection",ExpressionUUID->"e5aa00e0-5848-4ea0-b304-ef59c40ed389",
   CellTags->"Section5b"]},
 "Section5c"->{
  Cell[250399, 7192, 144, 1, 32, "Subsection",ExpressionUUID->"4fadfa28-7f14-49be-864f-01bdc40fd023",
   CellTags->"Section5c"]},
 "Section5d"->{
  Cell[259818, 7439, 150, 1, 32, "Subsection",ExpressionUUID->"843e7a79-9563-4338-a1dd-fb197f84c822",
   CellTags->"Section5d"]},
 "Section5e"->{
  Cell[274163, 7866, 152, 1, 32, "Subsection",ExpressionUUID->"653c587c-3787-44c4-a3a6-acbf4e69f550",
   CellTags->"Section5e"]},
 "Section5f"->{
  Cell[287237, 8270, 152, 1, 32, "Subsection",ExpressionUUID->"6b3013d9-0e48-4184-bcbd-1656889b5802",
   CellTags->"Section5f"]},
 "Section5g"->{
  Cell[315080, 9125, 154, 1, 32, "Subsection",ExpressionUUID->"d5c42b32-c271-42f6-a9ca-c28096274bc1",
   CellTags->"Section5g"]},
 "Section6"->{
  Cell[345597, 10049, 141, 1, 55, "Section",ExpressionUUID->"04124958-591e-4af9-afe7-c329f9dfaaca",
   CellTags->"Section6"]},
 "Section6a"->{
  Cell[346059, 10060, 140, 1, 35, "Subsection",ExpressionUUID->"5afaf9ad-40d8-49d5-b54c-a87a1fd08753",
   CellTags->"Section6a"]},
 "Section6b"->{
  Cell[349014, 10144, 144, 1, 35, "Subsection",ExpressionUUID->"fbeb9bce-ac24-451d-81f9-c714bdc6aca9",
   CellTags->"Section6b"]},
 "Section6c"->{
  Cell[374501, 10936, 135, 1, 32, "Subsection",ExpressionUUID->"f42bf01f-940f-45e8-ab27-b3262d4aa096",
   CellTags->"Section6c"]},
 "Solutions"->{
  Cell[383664, 11210, 170, 3, 55, "Section",ExpressionUUID->"71e248da-e17e-4503-a867-d10882050928",
   CellTags->"Solutions"]},
 "SolutionsCP10"->{
  Cell[383859, 11217, 128, 2, 32, "Subsection",ExpressionUUID->"8a2b26e2-2992-47e0-bde3-ad62827c39d1",
   CellTags->"SolutionsCP10"]},
 "SolutionsCE1"->{
  Cell[392829, 11492, 138, 2, 32, "Subsection",ExpressionUUID->"093466d0-fde0-49ba-a3e5-ac7d11344e94",
   CellTags->"SolutionsCE1"]},
 "SolutionsCE3"->{
  Cell[403171, 11789, 138, 2, 32, "Subsection",ExpressionUUID->"fbb92a79-3731-4f48-9566-cd9e744b806a",
   CellTags->"SolutionsCE3"]},
 "Exercises"->{
  Cell[417271, 12227, 107, 1, 55, "Section",ExpressionUUID->"5e74e822-2d2f-4581-a8c5-bbae0d2cc9e4",
   CellTags->"Exercises"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Section1", 448760, 12960},
 {"Section1a", 448898, 12963},
 {"Section1b", 449040, 12966},
 {"Section1c", 449184, 12969},
 {"Section1d", 449328, 12972},
 {"Section2", 449471, 12975},
 {"Section2a", 449612, 12978},
 {"Section2b", 449757, 12981},
 {"Section3", 449901, 12984},
 {"Section3a", 450043, 12987},
 {"Section3b", 450189, 12990},
 {"Section3c", 450335, 12993},
 {"Section4", 450480, 12996},
 {"Section4a", 450622, 12999},
 {"Section4b", 450768, 13002},
 {"Section4c", 450914, 13005},
 {"Section5", 451059, 13008},
 {"Section5a", 451201, 13011},
 {"Section5b", 451347, 13014},
 {"Section5c", 451493, 13017},
 {"Section5d", 451639, 13020},
 {"Section5e", 451785, 13023},
 {"Section5f", 451931, 13026},
 {"Section5g", 452077, 13029},
 {"Section6", 452222, 13032},
 {"Section6a", 452365, 13035},
 {"Section6b", 452512, 13038},
 {"Section6c", 452659, 13041},
 {"Solutions", 452806, 13044},
 {"SolutionsCP10", 452954, 13047},
 {"SolutionsCE1", 453108, 13050},
 {"SolutionsCE3", 453261, 13053},
 {"Exercises", 453411, 13056}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 145, 3, 108, "BookChapterTitle",ExpressionUUID->"fb299c40-128d-45c9-90f4-493022f1e20b",
 CounterAssignments->{{"ChapterNumber", 6}}],
Cell[CellGroupData[{
Cell[750, 29, 86, 0, 55, "Section",ExpressionUUID->"3b024092-7252-467c-814c-4539b5c33b7a"],
Cell[839, 31, 455, 8, 50, "Text",ExpressionUUID->"9f1350c5-c041-46d1-8d75-46d347fdd759"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1331, 44, 123, 1, 55, "Section",ExpressionUUID->"7b6124f2-f942-4f09-a4e0-0b99a7d8422d",
 CellTags->"Section1"],
Cell[1457, 47, 659, 12, 65, "Text",ExpressionUUID->"ef57c311-4009-418c-84e5-2b18098fdbf9"],
Cell[CellGroupData[{
Cell[2141, 63, 115, 1, 32, "Subsection",ExpressionUUID->"8937d3b6-f1a9-4463-afbc-1f37757eeb9e",
 CellTags->"Section1a"],
Cell[2259, 66, 172, 3, 20, "Text",ExpressionUUID->"44c51d8f-c4b8-44b5-b13c-1432015e36fa"],
Cell[CellGroupData[{
Cell[2456, 73, 109, 0, 18, "Subsubsection",ExpressionUUID->"8a065044-127c-4fd7-bb42-c3b409be0d09"],
Cell[2568, 75, 471, 11, 35, "Text",ExpressionUUID->"ca02c29b-c2d1-4884-8575-faee9f056187"],
Cell[3042, 88, 321, 9, 26, "Equation",ExpressionUUID->"012eecf0-c5ca-49f7-82ba-3c3150cd2a92"],
Cell[3366, 99, 126, 0, 20, "Text",ExpressionUUID->"e5b38c53-5610-4a00-929b-131dd9bab248"],
Cell[3495, 101, 335, 10, 53, "Equation",ExpressionUUID->"ce93bd24-a999-4581-a07d-e5f9917dc71d"],
Cell[3833, 113, 443, 10, 35, "Text",ExpressionUUID->"5d8249a4-8cf9-4356-acb9-916b2dacc34b"],
Cell[CellGroupData[{
Cell[4301, 127, 151, 2, 31, "Input",ExpressionUUID->"e5069bea-4f53-499b-8397-fd1caf8bdf7f"],
Cell[4455, 131, 111, 1, 31, "Output",ExpressionUUID->"a80444be-cd17-4a77-ba78-873604f9ab91"]
}, Open  ]],
Cell[4581, 135, 1406, 37, 86, "Text",ExpressionUUID->"0f375a30-1bbb-442b-9dfa-00ad7b608263"],
Cell[5990, 174, 206, 3, 20, "Text",ExpressionUUID->"7b884a43-5f80-4c1e-86c3-40c3980c920d"],
Cell[CellGroupData[{
Cell[6221, 181, 245, 6, 31, "Input",ExpressionUUID->"7604f3f0-79ce-4483-a916-7709270d5ac7"],
Cell[6469, 189, 111, 1, 31, "Output",ExpressionUUID->"671b1d2e-c24b-40e6-acc5-e3ab5477e2e1"]
}, Open  ]],
Cell[6595, 193, 431, 7, 39, "Text",ExpressionUUID->"ff907bf1-c6ce-42b9-a50b-153f85193e3d"],
Cell[7029, 202, 189, 3, 20, "Text",ExpressionUUID->"09deb72d-9dec-43e2-9dea-b3d5c48004a3"],
Cell[CellGroupData[{
Cell[7243, 209, 247, 6, 31, "Input",ExpressionUUID->"3bbefc93-91c1-4b50-82c5-0036b65d94fe"],
Cell[7493, 217, 135, 1, 31, "Output",ExpressionUUID->"d4b8776e-279a-431b-a409-f276e08bdfcc"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[7677, 224, 98, 0, 18, "Subsubsection",ExpressionUUID->"03745c62-4401-4648-800d-5ece97526c15"],
Cell[7778, 226, 337, 5, 35, "Text",ExpressionUUID->"9c71b605-2736-4202-b737-6693deb02db3"],
Cell[8118, 233, 215, 3, 20, "Text",ExpressionUUID->"0204f8d3-9ebd-46da-82de-afaa21f4838c"],
Cell[CellGroupData[{
Cell[8358, 240, 201, 5, 31, "Input",ExpressionUUID->"b0d0fc4a-de3a-4a59-8c2d-344d3dad91b4"],
Cell[8562, 247, 115, 1, 31, "Output",ExpressionUUID->"d07408ba-acea-4267-9976-1aebea387965"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8714, 253, 201, 5, 31, "Input",ExpressionUUID->"3da77856-06ce-4c96-a9bf-904bb4e65860"],
Cell[8918, 260, 116, 1, 31, "Output",ExpressionUUID->"fa58df34-5859-4ee8-adce-fb8a37ba94a8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9071, 266, 201, 5, 31, "Input",ExpressionUUID->"24e22ebc-4892-489c-baab-c83e250c4807"],
Cell[9275, 273, 118, 1, 31, "Output",ExpressionUUID->"40c72ee2-3775-407d-8dd6-e62fef0b1005"]
}, Open  ]],
Cell[9408, 277, 119, 0, 20, "Text",ExpressionUUID->"c9b81c4f-bc1c-411e-830e-cdd3319fb051"],
Cell[CellGroupData[{
Cell[9552, 281, 163, 3, 31, "Input",ExpressionUUID->"2e0e3915-e131-4813-903b-4a970228b29a"],
Cell[9718, 286, 118, 1, 31, "Output",ExpressionUUID->"aa4c0467-8b3c-4144-b1c1-22c423e2824a"]
}, Open  ]],
Cell[9851, 290, 254, 6, 21, "Text",ExpressionUUID->"d46b0b4a-e0fb-4a56-b104-e38fc65ce692"],
Cell[CellGroupData[{
Cell[10130, 300, 292, 8, 31, "Input",ExpressionUUID->"791c9b45-d22d-49a2-8e92-732d6e189984"],
Cell[10425, 310, 118, 1, 31, "Output",ExpressionUUID->"e058039b-535f-42c4-a3e5-0b92091d252e"]
}, Open  ]],
Cell[10558, 314, 444, 6, 50, "Text",ExpressionUUID->"b6ae8849-bb90-40e8-a740-03d121d07378"],
Cell[CellGroupData[{
Cell[11027, 324, 293, 8, 31, "Input",ExpressionUUID->"e9111bde-a2d4-4391-b734-9cb81bbc0d63"],
Cell[11323, 334, 209, 3, 51, "Output",ExpressionUUID->"d45a5417-9a26-48ec-a86a-20bbceb7ed06"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[11593, 344, 128, 1, 32, "Subsection",ExpressionUUID->"1b3165d9-8b3d-4911-a079-327009c2cf2e",
 CellTags->"Section1b"],
Cell[11724, 347, 322, 6, 35, "Text",ExpressionUUID->"461bc976-6ccd-4a0f-a65c-d580e3d583b2"],
Cell[CellGroupData[{
Cell[12071, 357, 83, 0, 18, "Subsubsection",ExpressionUUID->"1bc9707a-2f9e-4b3f-8a68-730d9ef2c8cb"],
Cell[12157, 359, 423, 9, 42, "Text",ExpressionUUID->"54d89d6c-beee-4e40-87d8-1c0810a5866d"],
Cell[12583, 370, 178, 3, 20, "Text",ExpressionUUID->"92e8a8d4-5a4c-4cc1-8ff8-b200487c02f1"],
Cell[CellGroupData[{
Cell[12786, 377, 187, 4, 31, "Input",ExpressionUUID->"75faba6d-9147-49a8-8c6f-fc0949688f5d"],
Cell[12976, 383, 7731, 203, 186, "Output",ExpressionUUID->"3628e3bf-881f-49a8-9a30-55f07baebab2"]
}, Open  ]],
Cell[20722, 589, 517, 10, 50, "Text",ExpressionUUID->"cff4d663-ce75-4324-af39-3cfa13e29181"],
Cell[21242, 601, 328, 6, 35, "Text",ExpressionUUID->"b9374348-8ffd-4aa4-b62d-ded1495344f7"],
Cell[CellGroupData[{
Cell[21595, 611, 172, 3, 31, "Input",ExpressionUUID->"120bd4f6-e32b-490c-83a1-513e9f377b03"],
Cell[21770, 616, 109, 1, 31, "Output",ExpressionUUID->"9442fb8d-1ae4-43a9-ad7b-5da2d1fe81cf"]
}, Open  ]],
Cell[21894, 620, 384, 7, 36, "Text",ExpressionUUID->"2d72a7da-debd-4cef-8c3f-183464ba3e4e"],
Cell[CellGroupData[{
Cell[22303, 631, 156, 2, 31, "Input",ExpressionUUID->"dde57cd6-ff77-44b9-8700-021003d18122"],
Cell[22462, 635, 114, 1, 31, "Output",ExpressionUUID->"7976b2ec-18d0-4a1d-84ca-f3e6d5fa41fd"]
}, Open  ]],
Cell[22591, 639, 434, 10, 42, "Text",ExpressionUUID->"fb624876-5e1d-4225-962e-a19cccb9a6aa"],
Cell[23028, 651, 291, 4, 35, "Text",ExpressionUUID->"04007bf9-26d3-48fb-bcfb-7ca7398441e4"],
Cell[CellGroupData[{
Cell[23344, 659, 259, 6, 31, "Input",ExpressionUUID->"af113166-b6c0-4d12-b0f9-de59cd09eed3"],
Cell[23606, 667, 124, 1, 31, "Output",ExpressionUUID->"547443d8-ebf5-4c34-a584-1a3185491a7f"]
}, Open  ]],
Cell[23745, 671, 104, 0, 20, "Text",ExpressionUUID->"67d04476-3ee7-479f-9f40-0a3fbe6d7e72"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23886, 676, 107, 0, 18, "Subsubsection",ExpressionUUID->"678d4f36-4816-4416-ac6d-5b18266652d8"],
Cell[23996, 678, 235, 3, 35, "Text",ExpressionUUID->"7ab2b82a-490f-4497-b66c-627b0640f382"],
Cell[24234, 683, 584, 8, 65, "Text",ExpressionUUID->"214f57d2-007f-44a1-a535-7de6ee899540"],
Cell[24821, 693, 259, 4, 35, "Text",ExpressionUUID->"76202be8-4e74-439e-8d21-5c2936a3cfc2"],
Cell[25083, 699, 617, 17, 40, "Text",ExpressionUUID->"543548ce-3cee-48a3-a3bf-d085f9fa6a00"],
Cell[CellGroupData[{
Cell[25725, 720, 269, 7, 31, "Input",ExpressionUUID->"694a8c09-1c6b-4dcb-94e2-00cc76203122"],
Cell[25997, 729, 133, 1, 31, "Output",ExpressionUUID->"2a9b90aa-9a86-4ce7-8cfd-1a624df91823"]
}, Open  ]],
Cell[26145, 733, 457, 6, 50, "Text",ExpressionUUID->"1f4d8485-2a4d-4a1e-99b9-d392386706ed"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[26651, 745, 134, 1, 32, "Subsection",ExpressionUUID->"f8c330c6-3a3a-446d-a137-c7a6e56a7906",
 CellTags->"Section1c"],
Cell[26788, 748, 481, 9, 51, "Text",ExpressionUUID->"6c0ab8ab-5ab3-4dc0-8d2d-b5bc77c06808"],
Cell[27272, 759, 399, 7, 54, "Text",ExpressionUUID->"195ba9ce-0239-4f07-83c1-4bb46c45f8f6"],
Cell[27674, 768, 1460, 37, 184, "Input",ExpressionUUID->"a4d33d32-7b57-4386-8ed5-8689780b21fb",
 InitializationCell->True],
Cell[29137, 807, 885, 17, 81, "Text",ExpressionUUID->"8bd607c7-143c-4406-9cc8-d358266eb637"],
Cell[30025, 826, 1360, 33, 95, "Text",ExpressionUUID->"61f81d98-6512-4479-96c1-3030011e09b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[31422, 864, 138, 1, 32, "Subsection",ExpressionUUID->"c5860cbb-b483-4954-9b2c-aa5ebe680b83",
 CellTags->"Section1d"],
Cell[31563, 867, 620, 10, 65, "Text",ExpressionUUID->"f85dae07-36a5-4c9f-a769-026a14ec32aa"],
Cell[CellGroupData[{
Cell[32208, 881, 87, 0, 18, "Subsubsection",ExpressionUUID->"e052f3e4-6022-4946-bfbc-550cbde241c0"],
Cell[32298, 883, 268, 4, 35, "Text",ExpressionUUID->"0c7900e7-546a-4bc9-afcb-8044cf99a28e"],
Cell[32569, 889, 193, 3, 20, "Text",ExpressionUUID->"780c1dfa-9ec5-4223-bf59-773d87bb0f7e"],
Cell[32765, 894, 514, 12, 36, "Text",ExpressionUUID->"46e73231-9d86-49a9-b965-aeb5fb1b321b"],
Cell[33282, 908, 618, 17, 37, "Text",ExpressionUUID->"e7ff786c-1160-4440-a460-4da9ef73cd8e"],
Cell[CellGroupData[{
Cell[33925, 929, 186, 4, 31, "Input",ExpressionUUID->"76d38d04-3700-4e5c-b636-0da8b9a49130"],
Cell[34114, 935, 288, 8, 31, "Output",ExpressionUUID->"989305f2-b4c4-4cda-ba0b-88ce0c4a4e9e"]
}, Open  ]],
Cell[34417, 946, 687, 17, 37, "Text",ExpressionUUID->"2031bc12-1e5d-408c-a5a7-cc2f20aff23c"],
Cell[35107, 965, 875, 20, 52, "Text",ExpressionUUID->"e617453a-e783-4d7f-a3c2-88b7a24cb4d2"],
Cell[35985, 987, 459, 14, 24, "Text",ExpressionUUID->"8737e102-e084-4b3f-a616-db152a90dca9"],
Cell[CellGroupData[{
Cell[36469, 1005, 232, 5, 31, "Input",ExpressionUUID->"3fd5793d-8559-408a-9e88-20ecc91aa05e"],
Cell[36704, 1012, 108, 1, 31, "Output",ExpressionUUID->"7030b81f-211f-4eaa-b544-07f8f53b104b"]
}, Open  ]],
Cell[36827, 1016, 1380, 37, 74, "Text",ExpressionUUID->"47af10be-82ae-4b6f-8473-7daf713699c4"],
Cell[38210, 1055, 162, 3, 20, "Text",ExpressionUUID->"360288d9-de2a-4e99-9923-045973698f94"],
Cell[CellGroupData[{
Cell[38397, 1062, 262, 7, 31, "Input",ExpressionUUID->"9d8f8d83-e8a5-4c32-ba39-03b5755d2803"],
Cell[38662, 1071, 110, 1, 31, "Output",ExpressionUUID->"7cd66a66-69fa-4d5e-a01f-76494db671b0"]
}, Open  ]],
Cell[38787, 1075, 482, 13, 40, "Text",ExpressionUUID->"259e6398-01d8-4997-afd6-2ea90eb96412"],
Cell[39272, 1090, 203, 5, 31, "myCode",ExpressionUUID->"812dca17-9027-4282-81bb-a5821c40cfd5"],
Cell[39478, 1097, 686, 17, 36, "Text",ExpressionUUID->"049f35e1-b100-4145-b3ce-70d0bf79378f"],
Cell[CellGroupData[{
Cell[40189, 1118, 368, 11, 31, "Input",ExpressionUUID->"32ec3541-2a07-4945-991e-e0c17e373927"],
Cell[40560, 1131, 381, 11, 31, "Output",ExpressionUUID->"fb4d72fe-9663-43df-aff4-549fab4ead88"]
}, Open  ]],
Cell[40956, 1145, 768, 15, 51, "Text",ExpressionUUID->"bc2cfc28-2b49-42de-a039-7b96481182b2"],
Cell[41727, 1162, 551, 17, 51, "Input",ExpressionUUID->"f10e39ac-306f-4f6d-8673-75d7ab93978d",
 InitializationCell->True],
Cell[42281, 1181, 348, 8, 20, "Text",ExpressionUUID->"09a0ba74-4a75-49d4-b8ff-f78544711237"],
Cell[CellGroupData[{
Cell[42654, 1193, 204, 4, 31, "Input",ExpressionUUID->"8153a22e-d86f-47d0-9c7d-558f2f6def02"],
Cell[42861, 1199, 108, 1, 31, "Output",ExpressionUUID->"89c8a5b4-cbd8-4429-9c60-15835d80baaa"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[43018, 1206, 91, 0, 18, "Subsubsection",ExpressionUUID->"78f33301-c293-4174-94fd-a0f29cd5b1e8"],
Cell[43112, 1208, 221, 3, 35, "Text",ExpressionUUID->"509a4431-90bb-4f0e-aa3a-812f085fd4a0"],
Cell[43336, 1213, 545, 8, 65, "Text",ExpressionUUID->"d6a85fd3-04f9-46f4-8fab-2b592a8a1cb0"],
Cell[43884, 1223, 499, 7, 50, "Text",ExpressionUUID->"c0ceb626-e397-41c9-ae1f-2b708bcf633d"],
Cell[44386, 1232, 650, 9, 80, "Text",ExpressionUUID->"8c8cb965-fa6c-449a-b1a2-ffcc4789a280"],
Cell[45039, 1243, 233, 4, 35, "Text",ExpressionUUID->"9a2622ef-9380-4a4c-99cb-f67841a94bfe"],
Cell[45275, 1249, 2075, 54, 127, "Text",ExpressionUUID->"e0f2b734-e669-41d7-88df-25d7d506ede1"],
Cell[47353, 1305, 98, 0, 20, "Text",ExpressionUUID->"7b2a8fd5-c0d0-4549-9f9f-4a02ab5f92c0"],
Cell[47454, 1307, 991, 28, 108, "Input",ExpressionUUID->"95aa3e3c-7d4b-465a-8a98-c7f171a94121",
 InitializationCell->True],
Cell[48448, 1337, 981, 26, 35, "Text",ExpressionUUID->"373730b7-c4e7-4bb5-aa81-f5201612e5be"],
Cell[CellGroupData[{
Cell[49454, 1367, 205, 4, 31, "Input",ExpressionUUID->"f582a351-80cb-490c-9589-bec97c63ab56"],
Cell[49662, 1373, 209, 5, 31, "Output",ExpressionUUID->"6f2e94f2-0e4c-4ffb-b2dd-677e95d72180"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49908, 1383, 218, 5, 31, "Input",ExpressionUUID->"1706330b-1477-4bba-8279-a51e2b871963"],
Cell[50129, 1390, 337, 9, 31, "Output",ExpressionUUID->"b6dcfb35-5495-4fc8-a9d4-0e0958d3f975"]
}, Open  ]],
Cell[50481, 1402, 1071, 27, 73, "Text",ExpressionUUID->"782725a5-30f1-43f5-8c20-47558236b624"],
Cell[51555, 1431, 98, 0, 20, "Text",ExpressionUUID->"66416560-f9a2-4afc-ad8d-2b27e9f04a53"],
Cell[51656, 1433, 1375, 38, 165, "Input",ExpressionUUID->"18c4e788-3aed-4e91-9a4b-c84236913fd9",
 InitializationCell->True],
Cell[53034, 1473, 344, 7, 36, "Text",ExpressionUUID->"dfcd5c7a-5f12-4ab2-b45d-0e984945fa80"],
Cell[CellGroupData[{
Cell[53403, 1484, 180, 3, 31, "Input",ExpressionUUID->"d31da172-2b6b-44cb-bd0e-6e57d53641fb"],
Cell[53586, 1489, 109, 1, 31, "Output",ExpressionUUID->"15114d90-1afe-4bee-bed4-b8d7c64455ed"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[53768, 1498, 125, 1, 55, "Section",ExpressionUUID->"80447c3b-dd4b-4bf0-bb66-bc6cf3927f05",
 CellTags->"Section2"],
Cell[53896, 1501, 366, 7, 35, "Text",ExpressionUUID->"de341f3b-5e66-4559-9618-a11227309487"],
Cell[54265, 1510, 799, 18, 62, "Text",ExpressionUUID->"5e3acc86-6911-41b9-9aea-a8d2a7820ba1"],
Cell[CellGroupData[{
Cell[55089, 1532, 175, 3, 31, "Input",ExpressionUUID->"3fad30f9-8960-4a31-8703-9bdf16ffa8c9"],
Cell[55267, 1537, 107, 1, 31, "Output",ExpressionUUID->"5e874d1f-d8cb-455b-8b2b-1c074a00bf42"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55411, 1543, 137, 1, 32, "Subsection",ExpressionUUID->"e8ae0ab9-085b-48df-beab-dee6d93834c9",
 CellTags->"Section2a"],
Cell[55551, 1546, 366, 5, 50, "Text",ExpressionUUID->"1c44251e-782d-4ff1-a960-0b9710d2121b"],
Cell[55920, 1553, 791, 20, 35, "Text",ExpressionUUID->"1772cb10-de36-4d19-9537-d21f6476bc47"],
Cell[56714, 1575, 509, 11, 35, "Text",ExpressionUUID->"f62b2332-c456-4442-9f9a-70f195c90b02"],
Cell[57226, 1588, 879, 22, 54, "Text",ExpressionUUID->"fa0b8cd1-f838-4c11-913f-0f102cae478b"],
Cell[58108, 1612, 1440, 40, 71, "Text",ExpressionUUID->"f709bd2e-3006-4d98-b932-98952bc1bb53"],
Cell[CellGroupData[{
Cell[59573, 1656, 360, 8, 31, "Input",ExpressionUUID->"855ab377-bdad-4507-90a8-b787f7278ce3"],
Cell[59936, 1666, 234, 6, 31, "Output",ExpressionUUID->"6ab4dcd0-dfeb-4db3-985b-64124b21111b"]
}, Open  ]],
Cell[60185, 1675, 646, 9, 65, "Text",ExpressionUUID->"c38ee694-7878-4eea-8a1b-46144dc060b0"],
Cell[CellGroupData[{
Cell[60856, 1688, 405, 10, 31, "Input",ExpressionUUID->"1625a925-1e72-4d3d-b7e1-f09645ca4af0"],
Cell[61264, 1700, 225, 6, 31, "Output",ExpressionUUID->"50529c2a-7d27-47ed-9c1a-e49db5630b8a"]
}, Open  ]],
Cell[61504, 1709, 547, 14, 43, "Text",ExpressionUUID->"86040373-4bcc-4a18-b0bd-659632f412c2"],
Cell[62054, 1725, 1068, 30, 35, "Text",ExpressionUUID->"53edfdde-63c1-4762-8da7-2a053cc918b4"],
Cell[63125, 1757, 435, 11, 43, "Text",ExpressionUUID->"8f195946-1d66-4509-aaea-5de86bce8fe2"],
Cell[63563, 1770, 2172, 60, 222, "Input",ExpressionUUID->"c867ce85-15df-413f-b20f-fca38b34f1b8",
 InitializationCell->True],
Cell[65738, 1832, 217, 3, 35, "Text",ExpressionUUID->"384ab4bf-6200-4970-857c-46649eaf5873"],
Cell[65958, 1837, 436, 8, 26, "Equation",ExpressionUUID->"a0cf5d5d-f16f-4074-a3fb-c1ccc6c2ede8"],
Cell[66397, 1847, 167, 3, 20, "Text",ExpressionUUID->"41778477-5139-4fbe-8af3-b7bab925462b"],
Cell[CellGroupData[{
Cell[66589, 1854, 524, 10, 51, "Input",ExpressionUUID->"9d549de5-7119-48c7-9afe-ca495765a028"],
Cell[67116, 1866, 293, 7, 31, "Output",ExpressionUUID->"fc6db39f-5e0b-4d5d-9f65-c34dc6cf7b49"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[67458, 1879, 133, 1, 32, "Subsection",ExpressionUUID->"f598a935-470c-4ed1-956e-8be4c0bedade",
 CellTags->"Section2b"],
Cell[67594, 1882, 644, 14, 38, "Text",ExpressionUUID->"fe866473-f1bf-42d4-95c2-75ef44a498b0"],
Cell[CellGroupData[{
Cell[68263, 1900, 102, 0, 18, "Subsubsection",ExpressionUUID->"9bd13b98-9196-4d94-9c7b-e2aae87e0f6b"],
Cell[68368, 1902, 681, 9, 65, "Text",ExpressionUUID->"aee5331b-f2fe-4758-a611-306ad1f182e3"],
Cell[69052, 1913, 669, 9, 65, "Text",ExpressionUUID->"55e468c4-e584-4346-aa31-51fa407791c7"],
Cell[69724, 1924, 794, 11, 80, "Text",ExpressionUUID->"9ded3fff-07e1-4580-aaba-429b70a6aaee"],
Cell[70521, 1937, 162, 3, 20, "Text",ExpressionUUID->"b737e3f3-a20b-4551-85aa-49cdb7572c77"],
Cell[70686, 1942, 8203, 217, 478, "Grid",ExpressionUUID->"3abb7625-5ebb-45c0-9c78-b066e55b2b4e"],
Cell[78892, 2161, 247, 4, 20, "Text",ExpressionUUID->"5c1b18db-cda3-4216-b77f-6e6d9dee314c"],
Cell[79142, 2167, 699, 9, 80, "Text",ExpressionUUID->"7b841773-3dd6-4adb-9762-ef007a2ccb8b"],
Cell[79844, 2178, 621, 9, 69, "Text",ExpressionUUID->"a4aff87b-d99a-4258-80fe-a8df45118d18"]
}, Open  ]],
Cell[CellGroupData[{
Cell[80502, 2192, 106, 0, 18, "Subsubsection",ExpressionUUID->"dea45df6-ca27-493d-90ba-2bad0ec34a9a"],
Cell[80611, 2194, 255, 4, 35, "Text",ExpressionUUID->"bc425961-074e-4c75-b195-bb84ee0df249"],
Cell[80869, 2200, 413, 8, 36, "Text",ExpressionUUID->"210b6112-88f1-4949-956e-bfde84e9b3da"],
Cell[81285, 2210, 739, 16, 58, "Text",ExpressionUUID->"52307a74-99bf-4d67-9dd8-193543c8b194"],
Cell[82027, 2228, 1256, 25, 108, "Text",ExpressionUUID->"e5f2fe80-65a9-40ef-95a4-594bbbc40866"],
Cell[83286, 2255, 476, 11, 43, "Text",ExpressionUUID->"fb055461-407c-45f6-b457-ee54f4ab8c43"],
Cell[83765, 2268, 392, 8, 43, "Text",ExpressionUUID->"2eb73f01-b974-4bf9-a32c-4f3066e2821b"],
Cell[CellGroupData[{
Cell[84182, 2280, 429, 13, 20, "Item1Numbered",ExpressionUUID->"4cf3f0c0-1915-4f5a-84ec-77f9a816f55c"],
Cell[84614, 2295, 1042, 28, 61, "Item1Numbered",ExpressionUUID->"38fef3e7-6e28-481f-8aca-4d80f1916386"],
Cell[85659, 2325, 716, 17, 54, "Item1Numbered",ExpressionUUID->"644e1910-e7f6-431c-acba-7fbce3db3f11"]
}, Open  ]],
Cell[86390, 2345, 313, 9, 24, "Text",ExpressionUUID->"929e727e-e39a-4701-baf6-65cc8878e890"],
Cell[CellGroupData[{
Cell[86728, 2358, 344, 10, 37, "Item1",ExpressionUUID->"0b8af091-afdd-40aa-a90c-bf013702d971"],
Cell[87075, 2370, 789, 22, 67, "Item1",ExpressionUUID->"0f00b2cf-a6d2-4d3e-b068-8298d2505388"],
Cell[87867, 2394, 294, 8, 20, "Item1",ExpressionUUID->"0dc8856a-3c55-48fb-be18-bd91f0f3abdb"]
}, Open  ]],
Cell[88176, 2405, 392, 7, 39, "Text",ExpressionUUID->"7c3477ae-6ec4-4ab2-be3c-aa54e52199cd"],
Cell[88571, 2414, 1245, 34, 78, "Text",ExpressionUUID->"b81227b6-09cd-4f32-9a1b-e629ad5e033d"],
Cell[89819, 2450, 951, 31, 40, "Text",ExpressionUUID->"aedc83a9-738f-4450-893e-7e8f815a8119"],
Cell[90773, 2483, 102, 0, 20, "Text",ExpressionUUID->"a358e205-15ee-4a41-95fa-4aa132bfb7b9"],
Cell[90878, 2485, 4614, 116, 545, "Input",ExpressionUUID->"be62fe29-e2b4-410a-be92-3029c29ef245",
 InitializationCell->True],
Cell[95495, 2603, 363, 9, 20, "Text",ExpressionUUID->"3df23f33-0408-42dc-9683-82e71ea77da3"],
Cell[CellGroupData[{
Cell[95883, 2616, 285, 6, 31, "Input",ExpressionUUID->"d5833a6f-6ffa-4e41-88c1-12a16083cb57"],
Cell[96171, 2624, 172, 3, 31, "Output",ExpressionUUID->"fc8c215b-8ab7-4b0b-854d-be47edabf33d"]
}, Open  ]],
Cell[96358, 2630, 123, 0, 20, "Text",ExpressionUUID->"39a30fe7-d1fa-4374-8084-2785de623994"]
}, Open  ]],
Cell[CellGroupData[{
Cell[96518, 2635, 118, 0, 18, "Subsubsection",ExpressionUUID->"a28fe7ea-4440-4abf-bdf4-14043474d0c1"],
Cell[96639, 2637, 667, 15, 53, "Text",ExpressionUUID->"95ff13c1-5f9b-4880-b6a9-919a6b90e60f"],
Cell[97309, 2654, 1161, 29, 53, "Text",ExpressionUUID->"bef17def-4a95-4798-a0f8-3a0aca565c75"],
Cell[98473, 2685, 1934, 51, 101, "Text",ExpressionUUID->"01e94b3c-849c-4f6f-9afb-5e4f35bad9eb"],
Cell[100410, 2738, 785, 22, 35, "Text",ExpressionUUID->"2509b205-56dd-4dc1-93b5-6934423f1ba5"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[101256, 2767, 130, 1, 55, "Section",ExpressionUUID->"78d1a55c-6bed-42aa-849b-4e7301f66f76",
 CellTags->"Section3"],
Cell[101389, 2770, 189, 3, 20, "Text",ExpressionUUID->"ade2ea0c-a097-4dac-8176-e84acb117252"],
Cell[CellGroupData[{
Cell[101603, 2777, 113, 1, 32, "Subsection",ExpressionUUID->"24ab5345-68d2-4452-b82b-f83ae1598e2a",
 CellTags->"Section3a"],
Cell[101719, 2780, 161, 3, 20, "Text",ExpressionUUID->"f0737ea0-59d7-4fbd-a288-857c275ab7f3"],
Cell[CellGroupData[{
Cell[101905, 2787, 123, 2, 31, "Input",ExpressionUUID->"7e8c32fc-bb51-4545-be9c-8c69dc011587"],
Cell[102031, 2791, 109, 1, 31, "Output",ExpressionUUID->"06946c5b-911e-462f-b84c-70162e2455a4"]
}, Open  ]],
Cell[102155, 2795, 339, 9, 24, "Text",ExpressionUUID->"13100138-449c-44d7-b09b-ed6501a49788"],
Cell[102497, 2806, 1286, 36, 70, "Text",ExpressionUUID->"90350aff-dfae-4035-9f60-ab228df593f1"],
Cell[103786, 2844, 424, 12, 31, "Input",ExpressionUUID->"aa8a9cb0-ffe8-4cff-8832-763f5a0601b3",
 InitializationCell->True],
Cell[104213, 2858, 369, 8, 20, "Text",ExpressionUUID->"f54f3b23-4ccc-4592-9c33-a493c8f7b705"],
Cell[CellGroupData[{
Cell[104607, 2870, 162, 3, 31, "Input",ExpressionUUID->"7ae882b4-a59e-4b3b-a47e-10a205919140"],
Cell[104772, 2875, 109, 1, 31, "Output",ExpressionUUID->"9ec4199e-c44b-44a1-b8bd-0b65c907f058"]
}, Open  ]],
Cell[CellGroupData[{
Cell[104918, 2881, 100, 0, 18, "Subsubsection",ExpressionUUID->"beceedf5-6b69-40ec-ba11-a4fda0cba05c"],
Cell[105021, 2883, 289, 6, 21, "Text",ExpressionUUID->"a9bd3d2a-8fbc-4c58-9ba1-f3fbc7ebfdf7"],
Cell[105313, 2891, 531, 10, 35, "Text",ExpressionUUID->"886a0c4d-3749-4771-bf94-6f1c3538307d"],
Cell[CellGroupData[{
Cell[105869, 2905, 228, 5, 31, "Input",ExpressionUUID->"44d958f7-4c66-4a81-981c-195153573481"],
Cell[106100, 2912, 693, 16, 31, "Output",ExpressionUUID->"1808dbd7-9619-477a-bebb-38273d43af55"]
}, Open  ]],
Cell[106808, 2931, 557, 12, 37, "Text",ExpressionUUID->"227c2abb-45d4-4b2f-bf0f-b9beff73d0bf"],
Cell[CellGroupData[{
Cell[107390, 2947, 176, 3, 31, "Input",ExpressionUUID->"db4f6c9f-6acc-4c23-a237-9ef0da9b6f12"],
Cell[107569, 2952, 2028, 51, 89, "Output",ExpressionUUID->"be5fb761-922b-4d9e-8950-1ea913c24927"]
}, Open  ]],
Cell[109612, 3006, 1217, 30, 66, "Text",ExpressionUUID->"5dca2b3d-b368-4dba-bc85-9b2765752554"],
Cell[CellGroupData[{
Cell[110854, 3040, 200, 4, 31, "Input",ExpressionUUID->"de3d64c5-c0b0-466a-b04f-cd80947bd163"],
Cell[111057, 3046, 1511, 49, 70, "Output",ExpressionUUID->"607fcd5b-27da-48ac-b663-e345e140b679"]
}, Open  ]],
Cell[112583, 3098, 805, 21, 35, "Text",ExpressionUUID->"09bf1b8a-3e01-4dd5-a08d-e7d7c8e6a744"],
Cell[CellGroupData[{
Cell[113413, 3123, 224, 5, 31, "Input",ExpressionUUID->"6c3ada87-a0e4-48de-91c4-7ed7cdea73e2"],
Cell[113640, 3130, 4272, 123, 165, "Output",ExpressionUUID->"6ceba2d4-b38a-403e-83e1-11a6bbc65bab"]
}, Open  ]],
Cell[117927, 3256, 460, 12, 24, "Text",ExpressionUUID->"686b17e0-a3d4-49e4-87db-b7c657392c58"]
}, Open  ]],
Cell[CellGroupData[{
Cell[118424, 3273, 99, 0, 18, "Subsubsection",ExpressionUUID->"b14268f7-0587-411d-96c5-79f6f1865933"],
Cell[118526, 3275, 304, 6, 21, "Text",ExpressionUUID->"a23fe8ec-06bc-4f5c-8e35-c3bba20c36e0"],
Cell[118833, 3283, 551, 10, 36, "Text",ExpressionUUID->"036d810c-1aa3-466c-82f1-2a6abce0f214"],
Cell[CellGroupData[{
Cell[119409, 3297, 270, 6, 31, "Input",ExpressionUUID->"a89546c9-6314-4cd2-9ead-7fa45f77a26b"],
Cell[119682, 3305, 226, 4, 31, "Output",ExpressionUUID->"f7a514ee-e9ff-4318-a205-2424d5ff4bb8"]
}, Open  ]],
Cell[119923, 3312, 489, 9, 51, "Text",ExpressionUUID->"3acba74c-eed1-4d2b-878a-2068c4ada3e5"],
Cell[CellGroupData[{
Cell[120437, 3325, 201, 4, 31, "Input",ExpressionUUID->"3ba7f382-60f6-4b11-87af-d3fc0587a1e6"],
Cell[120641, 3331, 162, 3, 31, "Output",ExpressionUUID->"d6eb89ac-17b8-46e8-b70b-2ef22feddafe"]
}, Open  ]],
Cell[120818, 3337, 176, 3, 20, "Text",ExpressionUUID->"549cf1d6-5aab-405c-9c34-4f300eea8658"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[121043, 3346, 113, 1, 32, "Subsection",ExpressionUUID->"7146bfcf-9e15-438e-bf0d-791abbe37055",
 CellTags->"Section3b"],
Cell[121159, 3349, 162, 3, 20, "Text",ExpressionUUID->"8a84bc59-eb04-47a1-94c1-36323adb7e31"],
Cell[121324, 3354, 570, 13, 35, "Text",ExpressionUUID->"8efd651f-be83-43f7-951e-ca258fb1e296"],
Cell[CellGroupData[{
Cell[121919, 3371, 194, 4, 31, "Input",ExpressionUUID->"db9a4008-8b07-48af-8f3f-62a3a92bdf4a"],
Cell[122116, 3377, 108, 1, 31, "Output",ExpressionUUID->"29c6a13e-4efd-4a4a-a659-fc42f470e9bd"]
}, Open  ]],
Cell[122239, 3381, 726, 20, 36, "Text",ExpressionUUID->"90031bc6-120b-4136-a1e0-461990b939bf"],
Cell[CellGroupData[{
Cell[122990, 3405, 164, 3, 31, "Input",ExpressionUUID->"5a154057-d47b-41f5-8ce4-25d1d091d865"],
Cell[123157, 3410, 113, 1, 31, "Output",ExpressionUUID->"68a101e3-9c9f-4c9f-93b8-1e0548072b93"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123307, 3416, 100, 0, 18, "Subsubsection",ExpressionUUID->"761559fa-7972-4366-be2d-df411ef7612d"],
Cell[123410, 3418, 362, 10, 21, "Text",ExpressionUUID->"0b13fb16-b5c8-4b29-ba55-0c35b68ac579"],
Cell[123775, 3430, 276, 6, 21, "Text",ExpressionUUID->"59aada52-6c1b-4ec5-a69a-f919957d2ca8"],
Cell[CellGroupData[{
Cell[124076, 3440, 245, 6, 31, "Input",ExpressionUUID->"68947a9b-213a-40e0-a80e-abda1897c23f"],
Cell[124324, 3448, 1268, 31, 51, "Output",ExpressionUUID->"a38ad465-ba35-4b7b-8586-127c8cf8de9e"]
}, Open  ]],
Cell[125607, 3482, 373, 10, 24, "Text",ExpressionUUID->"8ac471aa-1a22-4799-98e0-1f17530693d6"],
Cell[CellGroupData[{
Cell[126005, 3496, 171, 3, 31, "Input",ExpressionUUID->"be1c25da-d485-41e7-bace-3e2be972ffd9"],
Cell[126179, 3501, 509, 15, 31, "Output",ExpressionUUID->"998c257a-4123-40cf-b519-1c22786a069e"]
}, Open  ]],
Cell[126703, 3519, 1038, 27, 51, "Text",ExpressionUUID->"220a99be-6f97-4803-ad6d-3f4bdf244faf"],
Cell[CellGroupData[{
Cell[127766, 3550, 273, 7, 31, "Input",ExpressionUUID->"944fb2bd-d249-4c20-ac61-a05e5e32ff2a"],
Cell[128042, 3559, 779, 20, 31, "Output",ExpressionUUID->"a643c122-b5ad-44ef-baa0-00f71c58e0a0"]
}, Open  ]],
Cell[128836, 3582, 671, 14, 35, "Text",ExpressionUUID->"9caf6453-7eb7-4c39-bdef-9509ed29f81e"],
Cell[CellGroupData[{
Cell[129532, 3600, 219, 5, 31, "Input",ExpressionUUID->"a732d07d-86f8-4272-9118-929496e0c961"],
Cell[129754, 3607, 822, 23, 51, "Output",ExpressionUUID->"d9a60729-39f8-421a-b0d2-10a88a44bced"]
}, Open  ]],
Cell[130591, 3633, 607, 14, 50, "Text",ExpressionUUID->"eb64e42d-5c14-4373-ab62-7b088e6014a0"],
Cell[CellGroupData[{
Cell[131223, 3651, 244, 6, 31, "Input",ExpressionUUID->"4ee4d57a-b836-42a0-b26a-26bf9d3395a6"],
Cell[131470, 3659, 1977, 58, 89, "Output",ExpressionUUID->"6c7f67da-afd8-4705-8886-d8ea404555f1"]
}, Open  ]],
Cell[133462, 3720, 947, 20, 67, "Text",ExpressionUUID->"9617046a-5534-4a9e-ac16-d35bca2fc9e6"],
Cell[CellGroupData[{
Cell[134434, 3744, 210, 5, 31, "Input",ExpressionUUID->"1a2922b1-8b37-4cb0-b44a-0331a5272a03"],
Cell[134647, 3751, 567, 17, 31, "Output",ExpressionUUID->"0cf76e14-3e68-4c92-87d1-40ad76e5496c"]
}, Open  ]],
Cell[135229, 3771, 959, 28, 58, "Text",ExpressionUUID->"6a4a9cc4-fb9a-4b24-a12d-09fa84d3fa53"],
Cell[CellGroupData[{
Cell[136213, 3803, 231, 5, 31, "Input",ExpressionUUID->"d11b67be-7c0e-441b-aad0-2d373800c052"],
Cell[136447, 3810, 176, 4, 31, "Output",ExpressionUUID->"04914bbc-7471-4c59-83ec-68356b4fe4af"]
}, Open  ]],
Cell[CellGroupData[{
Cell[136660, 3819, 256, 6, 31, "Input",ExpressionUUID->"3b25b17f-756a-4471-b1fa-3e95030ad84c"],
Cell[136919, 3827, 327, 9, 31, "Output",ExpressionUUID->"0d09c233-9ead-482c-ae1a-c37bfd997bb5"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[137295, 3842, 99, 0, 18, "Subsubsection",ExpressionUUID->"5264c842-f414-4269-a73b-fcabba966a97"],
Cell[137397, 3844, 1012, 25, 51, "Text",ExpressionUUID->"e99d2021-6b30-4e5b-998f-007f31a82f94"],
Cell[CellGroupData[{
Cell[138434, 3873, 234, 5, 31, "Input",ExpressionUUID->"59b95e75-90df-47f2-ae17-959edb0096af"],
Cell[138671, 3880, 162, 3, 31, "Output",ExpressionUUID->"c58d012a-be0d-44cc-b1c9-1d7cb6e386aa"]
}, Open  ]],
Cell[138848, 3886, 1316, 35, 67, "Text",ExpressionUUID->"861125b4-ad81-40d1-a080-10a34cd6a554"],
Cell[140167, 3923, 1139, 27, 68, "Text",ExpressionUUID->"4569727a-08b1-4251-a88f-417f1807b763"],
Cell[CellGroupData[{
Cell[141331, 3954, 262, 6, 31, "Input",ExpressionUUID->"9f71493b-1e45-4087-b975-d98c729dc08a"],
Cell[141596, 3962, 163, 3, 31, "Output",ExpressionUUID->"b2792984-69d1-49a7-b391-6c054246e2b9"]
}, Open  ]],
Cell[141774, 3968, 2492, 64, 136, "Text",ExpressionUUID->"170f1a97-ef48-49fa-a422-36e23269d3f5"],
Cell[CellGroupData[{
Cell[144291, 4036, 528, 15, 51, "Input",ExpressionUUID->"cbe0adab-8763-40b8-af2d-c7ac27861c11",
 InitializationCell->True],
Cell[144822, 4053, 187, 4, 31, "Output",ExpressionUUID->"d967c151-8ab9-47e7-a781-964304a66e4b"]
}, Open  ]],
Cell[145024, 4060, 1624, 33, 128, "Text",ExpressionUUID->"585cc119-5ca4-4f46-8019-d65e2187fdd8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[146697, 4099, 122, 1, 32, "Subsection",ExpressionUUID->"132948bd-9df2-4c1e-af9d-71fbcfd5e520",
 CellTags->"Section3c"],
Cell[146822, 4102, 849, 22, 35, "Text",ExpressionUUID->"46c696f3-8c1a-4cae-b09e-6938e340349d"],
Cell[147674, 4126, 638, 13, 50, "Text",ExpressionUUID->"a4c0533c-830d-4255-9350-60ffedd2d7aa"],
Cell[CellGroupData[{
Cell[148337, 4143, 102, 0, 18, "Subsubsection",ExpressionUUID->"82e0c932-e8dc-4f19-8588-78b377700ea7"],
Cell[148442, 4145, 489, 7, 50, "Text",ExpressionUUID->"9c300002-733e-4959-8414-e6a11af77f36"],
Cell[148934, 4154, 766, 18, 52, "Text",ExpressionUUID->"c4a7edda-2948-49cc-b14b-48de40c96a73"],
Cell[CellGroupData[{
Cell[149725, 4176, 222, 5, 31, "Input",ExpressionUUID->"953d5849-871c-4628-a603-5ef2daa70e76"],
Cell[149950, 4183, 182, 3, 31, "Output",ExpressionUUID->"35243926-fa46-4d04-bf57-053e9a35a7c6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[150169, 4191, 223, 5, 31, "Input",ExpressionUUID->"11367350-9423-4875-b273-c60d52dc40a8"],
Cell[150395, 4198, 182, 3, 31, "Output",ExpressionUUID->"128b93b2-4e8c-4b47-8068-cde01c8029bf"]
}, Open  ]],
Cell[150592, 4204, 284, 4, 35, "Text",ExpressionUUID->"54e03748-1bd1-417a-856c-aee75bd95de1"],
Cell[CellGroupData[{
Cell[150901, 4212, 247, 6, 31, "Input",ExpressionUUID->"0d3d2498-3a28-4469-85e9-a1e77eff1fec"],
Cell[151151, 4220, 182, 3, 31, "Output",ExpressionUUID->"fd255e32-53a5-4ecf-8670-114eef2b89de"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[151382, 4229, 113, 0, 18, "Subsubsection",ExpressionUUID->"b08e5a19-877d-4255-ae9e-cdb7ace87607"],
Cell[151498, 4231, 596, 13, 35, "Text",ExpressionUUID->"80b05785-1d42-42ae-a708-398402171d21"],
Cell[CellGroupData[{
Cell[152119, 4248, 239, 5, 31, "Input",ExpressionUUID->"61978687-47c6-409e-894d-6b84cc53fd34"],
Cell[152361, 4255, 201, 4, 31, "Output",ExpressionUUID->"76a653fc-7385-45da-8099-ef4c6f77e02b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[152599, 4264, 142, 2, 31, "Input",ExpressionUUID->"d8f0f749-16ee-45bd-b116-29162776dc8b"],
Cell[152744, 4268, 201, 4, 31, "Output",ExpressionUUID->"107eafcb-e877-4194-a606-3c79f438bb08"]
}, Open  ]],
Cell[CellGroupData[{
Cell[152982, 4277, 142, 2, 31, "Input",ExpressionUUID->"4118ddc0-e1a5-4ccb-846f-910392780e2d"],
Cell[153127, 4281, 201, 4, 31, "Output",ExpressionUUID->"ba536797-8a89-451a-baf8-c98c9c87e77b"]
}, Open  ]],
Cell[153343, 4288, 838, 19, 51, "Text",ExpressionUUID->"3196454d-bed1-41bd-9c36-0e3dd6a47cb1"],
Cell[154184, 4309, 1274, 34, 165, "Input",ExpressionUUID->"485ce826-1bc9-4e22-b250-46f74a022545",
 InitializationCell->True],
Cell[155461, 4345, 164, 3, 20, "Text",ExpressionUUID->"31ea9f58-ab31-4699-aea8-1037fef50560"],
Cell[CellGroupData[{
Cell[155650, 4352, 365, 9, 31, "Input",ExpressionUUID->"2024d76a-a6dc-43bc-bd7d-3ba716ac6b8f"],
Cell[156018, 4363, 110, 1, 31, "Output",ExpressionUUID->"c56855ca-d746-4f52-815b-db8354a8de9a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[156177, 4370, 113, 0, 18, "Subsubsection",ExpressionUUID->"90f0677f-27e3-4514-96dd-ccb8dfdb083d"],
Cell[156293, 4372, 1014, 22, 67, "Text",ExpressionUUID->"48937d25-362c-4b97-b15d-3d1b70bdd65c"],
Cell[157310, 4396, 670, 13, 70, "Text",ExpressionUUID->"60200cc6-821e-43cc-8a2b-b52186c0928a"],
Cell[157983, 4411, 428, 8, 35, "Text",ExpressionUUID->"78b38757-d680-489a-8412-2abc44791d76"],
Cell[158414, 4421, 2212, 56, 279, "Input",ExpressionUUID->"ab2a367d-2812-40c1-ba5b-0854540d98d9",
 InitializationCell->True],
Cell[160629, 4479, 275, 7, 24, "Text",ExpressionUUID->"3b0e567f-cfcd-4718-bd2f-453a4a6ebc82"],
Cell[160907, 4488, 413, 9, 20, "Text",ExpressionUUID->"0b72fd7f-ac98-4c7e-9312-7f1ea07ff90f"],
Cell[CellGroupData[{
Cell[161345, 4501, 324, 8, 31, "Input",ExpressionUUID->"f347a241-4ea6-4a1c-92ba-cd801c75e83b"],
Cell[161672, 4511, 2289, 63, 127, "Output",ExpressionUUID->"ba6d4666-d61e-429e-b02e-ead274c01eb8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[163998, 4579, 363, 9, 31, "Input",ExpressionUUID->"0c7dcaac-0c3b-4dd0-8935-28b43c134cdf"],
Cell[164364, 4590, 108, 1, 31, "Output",ExpressionUUID->"a60a70dc-63d6-476b-a14b-e075512aa03a"]
}, Open  ]],
Cell[164487, 4594, 786, 17, 50, "Text",ExpressionUUID->"50d7b86f-5a27-4e0c-9e82-b1e8cd46b011"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[165334, 4618, 137, 1, 55, "Section",ExpressionUUID->"d2110623-6fa1-4c5e-8d68-64fdd2d36bd2",
 CellTags->"Section4"],
Cell[165474, 4621, 279, 6, 20, "Text",ExpressionUUID->"f4cc7978-2835-482f-80fc-c16c651ac6b2"],
Cell[CellGroupData[{
Cell[165778, 4631, 121, 1, 32, "Subsection",ExpressionUUID->"767a4ffe-454c-4dd3-8753-207eb0630133",
 CellTags->"Section4a"],
Cell[165902, 4634, 1152, 28, 84, "Text",ExpressionUUID->"1e795f49-069f-4d76-b999-4b07b6615b88"],
Cell[167057, 4664, 177, 3, 20, "Text",ExpressionUUID->"4837dc67-b77b-4948-965f-2cc3d66daf62"],
Cell[167237, 4669, 787, 22, 54, "Text",ExpressionUUID->"324b3838-21d4-4d70-b66f-b9d66ddd7870"],
Cell[CellGroupData[{
Cell[168049, 4695, 210, 5, 31, "Input",ExpressionUUID->"22cd323d-1dd7-4cb0-982a-0805681b8c78"],
Cell[168262, 4702, 501, 14, 32, "Output",ExpressionUUID->"de9e2d9a-b4e5-4d04-b88b-d33087854b77"]
}, Open  ]],
Cell[168778, 4719, 965, 28, 56, "Text",ExpressionUUID->"16b65481-86c1-4444-9a1c-197b482013ca"],
Cell[CellGroupData[{
Cell[169768, 4751, 165, 3, 31, "Input",ExpressionUUID->"80c5d836-158b-4a49-8328-39f91bce84c7"],
Cell[169936, 4756, 114, 1, 31, "Output",ExpressionUUID->"729e3ace-f498-4dac-a561-329aa53a800a"]
}, Open  ]],
Cell[170065, 4760, 517, 16, 23, "Text",ExpressionUUID->"be2b0c8a-ab2a-4c62-9c5f-8752ddea79ea"],
Cell[170585, 4778, 925, 27, 39, "Text",ExpressionUUID->"88cdbccd-2c18-4590-a521-6d6f9ea81fba"],
Cell[171513, 4807, 734, 28, 56, "Equation",ExpressionUUID->"87476a82-4e51-468e-8ab4-dffc7526efbf"],
Cell[172250, 4837, 450, 14, 23, "Text",ExpressionUUID->"57b4939e-dc5e-45bb-b27c-a112f5586749"],
Cell[172703, 4853, 301, 11, 44, "Equation",ExpressionUUID->"5cf1c575-62f4-4485-8b79-a19c781c4113"],
Cell[173007, 4866, 78, 0, 20, "Text",ExpressionUUID->"487f773b-0fbe-4d31-9dab-c43774e578e5"],
Cell[CellGroupData[{
Cell[173110, 4870, 291, 8, 31, "Input",ExpressionUUID->"f4ad569e-a48e-4619-bed3-a3f80bc4630e"],
Cell[173404, 4880, 140, 2, 31, "Output",ExpressionUUID->"54c489b9-f734-4dab-b90b-8721f84d8f89"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[173593, 4888, 135, 1, 32, "Subsection",ExpressionUUID->"e9d91012-712b-4ddf-bd40-cef9f66d4533",
 CellTags->"Section4b"],
Cell[173731, 4891, 900, 22, 51, "Text",ExpressionUUID->"42ade653-70da-4461-873a-90bde97a1b22"],
Cell[CellGroupData[{
Cell[174656, 4917, 282, 7, 31, "Input",ExpressionUUID->"3fa65bd6-c168-4c93-b4ce-088131a1a9da"],
Cell[174941, 4926, 522, 9, 70, "Output",ExpressionUUID->"819c8864-d14f-4168-ad6e-e8996386c803"]
}, Open  ]],
Cell[175478, 4938, 452, 6, 50, "Text",ExpressionUUID->"8ff10fd8-353b-424b-95fe-51326705f19e"],
Cell[175933, 4946, 702, 17, 62, "Text",ExpressionUUID->"e9e0864c-41f0-491c-a6d0-24aacadf134d"],
Cell[176638, 4965, 224, 5, 24, "Text",ExpressionUUID->"0e93157c-0342-4778-ba73-df494aee55ab"],
Cell[176865, 4972, 502, 15, 31, "Input",ExpressionUUID->"ade244b6-8477-469e-bbe2-ed0e2141c0b8",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[177392, 4991, 100, 0, 18, "Subsubsection",ExpressionUUID->"a3e2c692-e5b0-4554-a4bf-29a639309a97"],
Cell[177495, 4993, 218, 4, 24, "Text",ExpressionUUID->"c7666db3-0ad8-4518-8b26-16b156a4ecf4"],
Cell[177716, 4999, 440, 19, 44, "Equation",ExpressionUUID->"a864a0e8-150a-47d6-a42e-2758a776c55c"],
Cell[178159, 5020, 377, 11, 20, "Text",ExpressionUUID->"a322d808-f9c2-4ecb-97f6-406b093e1579"],
Cell[178539, 5033, 471, 20, 44, "Equation",ExpressionUUID->"346c705d-beb1-4569-baa1-d41d10bc418b"],
Cell[179013, 5055, 145, 2, 20, "Text",ExpressionUUID->"7f9d4c08-034a-44f4-b8dd-80de5c350ecb"],
Cell[179161, 5059, 316, 13, 44, "Equation",ExpressionUUID->"e243f035-37af-4096-95b8-d66c7ac8cd27"],
Cell[179480, 5074, 1277, 31, 92, "Text",ExpressionUUID->"8e07cd34-7cf4-4dad-a136-d4359053d876"],
Cell[180760, 5107, 1376, 39, 127, "Input",ExpressionUUID->"dfe2baa1-f92a-4554-9c3c-d38636bea32a",
 InitializationCell->True],
Cell[182139, 5148, 606, 15, 37, "Text",ExpressionUUID->"619e1e6b-ada0-424d-a4da-f104f25909cd"],
Cell[CellGroupData[{
Cell[182770, 5167, 429, 12, 31, "Input",ExpressionUUID->"bfb0bb16-2cb0-4cea-a01f-68d4d1c2d86b"],
Cell[183202, 5181, 753, 24, 115, "Output",ExpressionUUID->"ab1f2008-940a-4eb3-b8a5-3594e46a68ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183992, 5210, 429, 12, 31, "Input",ExpressionUUID->"b395a3b1-0988-44c7-820d-edb535bf0059"],
Cell[184424, 5224, 753, 24, 115, "Output",ExpressionUUID->"aafe35db-cc03-4350-99f2-e8be54b7a59a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[185226, 5254, 101, 0, 18, "Subsubsection",ExpressionUUID->"9389b2ff-3ead-449d-9cc6-79b50abe3042"],
Cell[185330, 5256, 124, 0, 20, "Text",ExpressionUUID->"2888ba18-a48b-4521-bed3-20f718614971"],
Cell[185457, 5258, 459, 10, 40, "Text",ExpressionUUID->"361aaded-5e38-46de-9caa-02b5a122f124"],
Cell[CellGroupData[{
Cell[185941, 5272, 468, 12, 70, "Input",ExpressionUUID->"1d668d4a-e591-48d5-9c16-82c23994c89c"],
Cell[186412, 5286, 163, 3, 31, "Output",ExpressionUUID->"adcc5d20-3621-4589-a9c8-266ac0305672"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186612, 5294, 1880, 52, 203, "Input",ExpressionUUID->"42ea3608-d4c0-4a81-be05-788524ad11dc"],
Cell[188495, 5348, 163, 3, 31, "Output",ExpressionUUID->"8ff525b9-0ca2-4242-8918-96a634129ae8"]
}, Open  ]],
Cell[188673, 5354, 174, 3, 20, "Text",ExpressionUUID->"552012ba-4dbb-4768-a955-75f1fc8c145d"],
Cell[188850, 5359, 624, 15, 35, "Text",ExpressionUUID->"875e1d0b-dc0c-4a06-931c-ba014720c6f5"],
Cell[189477, 5376, 881, 22, 51, "Text",ExpressionUUID->"fed496cd-cda7-47fa-aa65-3a6f55b1b523"],
Cell[190361, 5400, 776, 22, 40, "Text",ExpressionUUID->"b33ceaa7-1762-4225-99b2-074dba5df1fd"],
Cell[191140, 5424, 281, 8, 31, "Input",ExpressionUUID->"fce4fd9d-dd64-4d13-9f86-61b26ccf5569"],
Cell[191424, 5434, 989, 28, 40, "Text",ExpressionUUID->"59b90be7-fe72-40c8-a44d-88c787786df0"],
Cell[192416, 5464, 376, 10, 31, "Input",ExpressionUUID->"08ad26db-6d3c-4b49-87cd-20cca64a68b6"],
Cell[192795, 5476, 210, 4, 24, "Text",ExpressionUUID->"ec92701f-72a9-4394-83ec-451465b8b058"],
Cell[CellGroupData[{
Cell[193030, 5484, 522, 14, 70, "Input",ExpressionUUID->"d731efb1-8935-4e22-848b-3032f8175b17"],
Cell[193555, 5500, 162, 3, 31, "Output",ExpressionUUID->"5f1bde47-5e83-4b94-b128-e6adb8ec26d3"]
}, Open  ]],
Cell[193732, 5506, 1165, 27, 83, "Text",ExpressionUUID->"b92e80b0-6c71-4e52-a2a4-66ed0d8d51af"],
Cell[CellGroupData[{
Cell[194922, 5537, 2134, 59, 241, "Input",ExpressionUUID->"de930464-2845-4f9d-a539-9cca80dfd0c0"],
Cell[197059, 5598, 163, 3, 31, "Output",ExpressionUUID->"d457d331-4284-46aa-ae20-6a4052bb5dd9"]
}, Open  ]],
Cell[197237, 5604, 1016, 27, 50, "Text",ExpressionUUID->"4c1e0eca-3042-447d-9b31-2111ba7e4ee4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[198302, 5637, 121, 1, 32, "Subsection",ExpressionUUID->"dcf686a4-0010-4064-ab6f-269f0c7d91d8",
 CellTags->"Section4c"],
Cell[198426, 5640, 603, 17, 55, "Text",ExpressionUUID->"f2e07005-1941-431f-a98a-18db20aedccc"],
Cell[199032, 5659, 160, 3, 31, "Input",ExpressionUUID->"196a0a42-f299-4d84-961a-95c91b1a5639"],
Cell[199195, 5664, 365, 11, 20, "Text",ExpressionUUID->"e8e773a2-df72-4a74-b01d-b898bbdb9e74"],
Cell[CellGroupData[{
Cell[199585, 5679, 163, 3, 31, "Input",ExpressionUUID->"7af6417f-a830-46fa-b3b7-4d83d0171470"],
Cell[199751, 5684, 304, 9, 47, "Output",ExpressionUUID->"138e5199-a519-49d0-ac13-65c3e2f80275"]
}, Open  ]],
Cell[200070, 5696, 140, 2, 20, "Text",ExpressionUUID->"59935772-66bb-44de-b7f5-bbc872b0c4c3"],
Cell[CellGroupData[{
Cell[200235, 5702, 163, 3, 31, "Input",ExpressionUUID->"4c8540bb-ab32-468c-92ef-d6a30b49f6f4"],
Cell[200401, 5707, 164, 3, 31, "Output",ExpressionUUID->"03c85d44-6eaa-4428-a065-4015dba83ef8"]
}, Open  ]],
Cell[200580, 5713, 745, 18, 52, "Text",ExpressionUUID->"0e587251-d8ac-4e91-88b4-2d7695f4281c"],
Cell[CellGroupData[{
Cell[201350, 5735, 205, 4, 31, "Input",ExpressionUUID->"36ebcec7-f161-4531-bb22-376e839aad89"],
Cell[201558, 5741, 332, 9, 49, "Output",ExpressionUUID->"a2c608fa-c670-407b-a671-f13dea33b547"]
}, Open  ]],
Cell[201905, 5753, 808, 19, 54, "Text",ExpressionUUID->"6b3fd1b6-d149-4e3d-a70e-488af79c0c28"],
Cell[CellGroupData[{
Cell[202738, 5776, 364, 10, 31, "Input",ExpressionUUID->"ae823859-a8a0-484f-aa92-f934379988d9"],
Cell[203105, 5788, 279, 9, 48, "Output",ExpressionUUID->"de5df45f-587f-4bd4-8f78-d6e958a42f91"]
}, Open  ]],
Cell[CellGroupData[{
Cell[203421, 5802, 98, 0, 18, "Subsubsection",ExpressionUUID->"06cff0e2-a6b3-4c38-b13a-1d475b80cd09"],
Cell[203522, 5804, 429, 12, 20, "Text",ExpressionUUID->"ae9ac8e1-49e8-45c7-b1f7-2e89b06f0b89"],
Cell[203954, 5818, 143, 2, 20, "Text",ExpressionUUID->"682849f4-cf3f-4853-84c5-3a402985a766"],
Cell[CellGroupData[{
Cell[204122, 5824, 217, 5, 31, "Input",ExpressionUUID->"4160cc52-3ff2-40c9-b750-1c04c3bc28e0",
 InitializationCell->True],
Cell[204342, 5831, 164, 3, 31, "Output",ExpressionUUID->"e6ed6fac-d271-4b8c-96b6-3bb34536d2e1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[204543, 5839, 243, 6, 31, "Input",ExpressionUUID->"80acad41-d14c-4316-805f-8b0e659d1374",
 InitializationCell->True],
Cell[204789, 5847, 208, 5, 31, "Output",ExpressionUUID->"3966dd47-e8ec-4da4-be9c-7ba72724035f"]
}, Open  ]],
Cell[205012, 5855, 436, 12, 39, "Text",ExpressionUUID->"179c2187-b8f0-4847-a71f-8e0777badbc9"],
Cell[CellGroupData[{
Cell[205473, 5871, 142, 2, 31, "Input",ExpressionUUID->"17cf80e9-3b50-4d93-a113-af58cc53b725"],
Cell[205618, 5875, 300, 8, 31, "Output",ExpressionUUID->"8ba1043a-bfe9-4aaa-aebf-0418cef74000"]
}, Open  ]],
Cell[205933, 5886, 402, 12, 24, "Text",ExpressionUUID->"298c545b-552b-4e7c-8347-2399640be168"],
Cell[CellGroupData[{
Cell[206360, 5902, 137, 2, 31, "Input",ExpressionUUID->"246ec84e-8cae-48bc-99da-e50050bf8cbd"],
Cell[206500, 5906, 111, 1, 31, "Output",ExpressionUUID->"63b4a7de-cd1d-48a7-bb56-8450b7a3ba99"]
}, Open  ]],
Cell[206626, 5910, 786, 22, 58, "Text",ExpressionUUID->"7c57750f-023b-47fd-a58e-026676407bfc"],
Cell[207415, 5934, 1090, 31, 56, "Text",ExpressionUUID->"85960b01-5771-46e7-93a3-be98cd9b1849"],
Cell[CellGroupData[{
Cell[208530, 5969, 181, 3, 31, "Input",ExpressionUUID->"b890f71e-831f-4d0b-9329-98eaadedfc5c"],
Cell[208714, 5974, 110, 1, 31, "Output",ExpressionUUID->"ed5c0371-a2c5-4eb9-aac5-3faedc53892b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[208873, 5981, 97, 0, 18, "Subsubsection",ExpressionUUID->"65b47605-da2a-4697-b84c-d329a8c94a16"],
Cell[208973, 5983, 130, 0, 20, "Text",ExpressionUUID->"2c09ceb6-7fac-4754-9d1e-1e0c48a8218b"],
Cell[209106, 5985, 753, 31, 51, "Equation",ExpressionUUID->"41849f5a-4f43-4158-8dbd-d996480873ef"],
Cell[209862, 6018, 185, 4, 20, "Text",ExpressionUUID->"734ba447-2469-4138-82ac-575816c5c0ec"],
Cell[210050, 6024, 142, 2, 20, "Text",ExpressionUUID->"c04be8fa-66f9-4deb-994d-8587551aeaf4"],
Cell[CellGroupData[{
Cell[210217, 6030, 429, 13, 31, "Input",ExpressionUUID->"cba2d276-3ea0-45b0-803d-aed26660371b",
 InitializationCell->True],
Cell[210649, 6045, 419, 13, 47, "Output",ExpressionUUID->"d9f0dbda-e479-4842-85e7-871f52e24c50"]
}, Open  ]],
Cell[211083, 6061, 195, 5, 20, "Text",ExpressionUUID->"e1e0d4fe-30ee-4fc2-b05e-11815639fde7"],
Cell[211281, 6068, 250, 6, 21, "Text",ExpressionUUID->"a51e1b6d-8cac-4569-8b9d-c757ff102cdd"],
Cell[CellGroupData[{
Cell[211556, 6078, 457, 13, 31, "Input",ExpressionUUID->"d1ecfe20-a50e-4bae-b092-dfc7e3ec83f3",
 InitializationCell->True],
Cell[212016, 6093, 498, 17, 59, "Output",ExpressionUUID->"c3007f64-d672-4664-babf-a1f1697bfb26"]
}, Open  ]],
Cell[212529, 6113, 205, 4, 20, "Text",ExpressionUUID->"f0721d79-d4d1-4cf5-8aba-19c00e573797"],
Cell[212737, 6119, 627, 16, 40, "Text",ExpressionUUID->"ae4603a5-526a-411f-b058-082b4b9ec434"],
Cell[CellGroupData[{
Cell[213389, 6139, 183, 3, 31, "Input",ExpressionUUID->"46c75962-f4e0-4a0d-b627-5a29328d6d18"],
Cell[213575, 6144, 110, 1, 31, "Output",ExpressionUUID->"d29dd189-9294-43ed-a9a0-6c5e84260b67"]
}, Open  ]],
Cell[213700, 6148, 521, 9, 50, "Text",ExpressionUUID->"6d4514f6-26a1-4fad-b038-f3a1ad2c1e27"],
Cell[214224, 6159, 776, 16, 66, "Text",ExpressionUUID->"6a87678f-0afe-4ccb-9ff2-9a22b4a4e3b7"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[215061, 6182, 142, 1, 55, "Section",ExpressionUUID->"6a010ab4-5820-446e-be6d-ae1fcfd47626",
 CellTags->"Section5"],
Cell[215206, 6185, 336, 5, 35, "Text",ExpressionUUID->"29bb261b-ec5c-4535-a762-6b0108db8c11"],
Cell[CellGroupData[{
Cell[215567, 6194, 129, 1, 32, "Subsection",ExpressionUUID->"9caf1e98-caa7-4d05-bf35-202ee3a565e8",
 CellTags->"Section5a"],
Cell[215699, 6197, 546, 15, 20, "Text",ExpressionUUID->"e2644928-1bab-4ec7-9aa5-2795765ff94c"],
Cell[216248, 6214, 203, 3, 20, "Text",ExpressionUUID->"da92d5cd-2ba6-4148-bbc7-6e9d16593383"],
Cell[CellGroupData[{
Cell[216476, 6221, 129, 2, 31, "Input",ExpressionUUID->"24351add-6e98-4ef1-9099-27c144533464"],
Cell[216608, 6225, 114, 1, 31, "Output",ExpressionUUID->"f11dc84a-cd0b-4894-b55a-e0d785ce7952"]
}, Open  ]],
Cell[216737, 6229, 234, 3, 35, "Text",ExpressionUUID->"f393a3e5-d7ec-4145-b34e-74c93020d407"],
Cell[CellGroupData[{
Cell[216996, 6236, 132, 3, 31, "Input",ExpressionUUID->"36c2c39e-e651-4ab5-be71-b28d2ceec38f"],
Cell[217131, 6241, 112, 2, 31, "Output",ExpressionUUID->"2ea99f7b-68ee-4f8e-a58f-573025015111"]
}, Open  ]],
Cell[217258, 6246, 433, 8, 36, "Text",ExpressionUUID->"84ca36ea-f773-4430-a5e8-36ce4d90b131"],
Cell[217694, 6256, 114, 0, 20, "Text",ExpressionUUID->"d9f7f155-24c8-4f8c-81a4-21e1b348af80"],
Cell[CellGroupData[{
Cell[217833, 6260, 205, 5, 31, "Input",ExpressionUUID->"64ba172d-a6b0-4d75-8a23-37535be447b1"],
Cell[218041, 6267, 343, 10, 31, "Output",ExpressionUUID->"aafb4f95-1999-4938-8267-25b597baa501"]
}, Open  ]],
Cell[218399, 6280, 837, 20, 51, "Text",ExpressionUUID->"023d99b7-8baa-4353-b312-21cf3df7dec4"],
Cell[219239, 6302, 194, 3, 20, "Text",ExpressionUUID->"351eb8a5-4ed1-40d5-b3db-def937aee46e"],
Cell[CellGroupData[{
Cell[219458, 6309, 254, 7, 31, "Input",ExpressionUUID->"77a7639f-95f4-4ef4-be17-048c9bfb47d0"],
Cell[219715, 6318, 313, 10, 31, "Output",ExpressionUUID->"8a1fcec7-3f17-4845-a04c-4f8a1881aa46"]
}, Open  ]],
Cell[220043, 6331, 1480, 33, 96, "Text",ExpressionUUID->"e7a72c98-5d97-4092-9b88-0dd680305260"],
Cell[221526, 6366, 748, 20, 37, "Text",ExpressionUUID->"da55481e-b8be-47db-a46d-e5d27bf6b7f1"],
Cell[222277, 6388, 570, 10, 51, "Text",ExpressionUUID->"6e43761b-300f-464a-9268-096ab992bb60"],
Cell[CellGroupData[{
Cell[222872, 6402, 180, 4, 31, "Input",ExpressionUUID->"cd0961b3-7550-4367-b26a-0dc6e884cc23"],
Cell[223055, 6408, 211, 5, 31, "Output",ExpressionUUID->"e824a342-d887-4eb3-a66d-ede84d0eabd3"]
}, Open  ]],
Cell[223281, 6416, 494, 10, 36, "Text",ExpressionUUID->"4be00fd8-484e-44b6-8d4a-edd755c9c8d1"],
Cell[CellGroupData[{
Cell[223800, 6430, 395, 10, 31, "Input",ExpressionUUID->"075cf2fa-c73f-4f76-be37-cf5503c91778"],
Cell[224198, 6442, 363, 7, 31, "Output",ExpressionUUID->"08d0b58b-8a90-439b-9dd5-26a81f16ad4f"]
}, Open  ]],
Cell[224576, 6452, 1169, 28, 71, "Text",ExpressionUUID->"4af3c091-8b4e-488b-8a68-42642435eba8"],
Cell[CellGroupData[{
Cell[225770, 6484, 371, 11, 31, "Input",ExpressionUUID->"f16f80cd-4bd9-4bca-9da8-07e88ec3ab00"],
Cell[226144, 6497, 487, 13, 31, "Output",ExpressionUUID->"ca6c7ea1-4624-443e-89a8-478a294f7ce8"]
}, Open  ]],
Cell[226646, 6513, 683, 22, 39, "Text",ExpressionUUID->"7572ab02-e067-40a6-8bf8-124e5a642456"],
Cell[CellGroupData[{
Cell[227354, 6539, 411, 12, 31, "Input",ExpressionUUID->"d408f62a-568a-4dba-94c6-490380e040a8"],
Cell[227768, 6553, 363, 7, 31, "Output",ExpressionUUID->"0d2ddb5b-7b56-41e4-ab56-98a1c69e35ec"]
}, Open  ]],
Cell[228146, 6563, 326, 7, 21, "Text",ExpressionUUID->"b4821b12-1fa8-4388-9f18-f01e33965cfb"],
Cell[CellGroupData[{
Cell[228497, 6574, 657, 17, 89, "Input",ExpressionUUID->"124e41c7-1923-4989-aead-e1c37950f81a",
 InitializationCell->True],
Cell[229157, 6593, 9613, 247, 279, "Output",ExpressionUUID->"fa327215-77df-4f51-ad73-ee930163f9b9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[238807, 6845, 152, 3, 31, "Input",ExpressionUUID->"5e70205e-164a-406f-9d59-47ee76b9a615"],
Cell[238962, 6850, 112, 2, 31, "Output",ExpressionUUID->"d483f133-cc16-4311-9b5b-efb1b453b6a2"]
}, Open  ]],
Cell[239089, 6855, 434, 11, 21, "Text",ExpressionUUID->"bf260cfa-b0e1-4594-b4b7-44322694e776"]
}, Open  ]],
Cell[CellGroupData[{
Cell[239560, 6871, 129, 1, 32, "Subsection",ExpressionUUID->"e5aa00e0-5848-4ea0-b304-ef59c40ed389",
 CellTags->"Section5b"],
Cell[239692, 6874, 182, 3, 20, "Text",ExpressionUUID->"92cdeed8-4d59-4d4d-a2de-5c87e63e5943"],
Cell[239877, 6879, 690, 17, 35, "Text",ExpressionUUID->"27bad741-1e79-494c-8f0a-e764cf53f160"],
Cell[240570, 6898, 440, 13, 31, "Input",ExpressionUUID->"48eac800-d67d-4951-8c06-3c365e3e6e00",
 InitializationCell->True],
Cell[241013, 6913, 226, 3, 35, "Text",ExpressionUUID->"9b94f2da-16e4-4def-8a0d-c38f309f2e72"],
Cell[CellGroupData[{
Cell[241264, 6920, 163, 4, 31, "Input",ExpressionUUID->"4cbef30c-bebf-4ceb-b43d-3ba2d941388d"],
Cell[241430, 6926, 113, 2, 31, "Output",ExpressionUUID->"0f486de4-6b12-4c00-8902-5b4d23eb8b5d"]
}, Open  ]],
Cell[241558, 6931, 419, 8, 50, "Text",ExpressionUUID->"49363660-ac17-4484-8c93-359287e56c51"],
Cell[241980, 6941, 161, 4, 24, "Text",ExpressionUUID->"fb593562-41d5-4273-a903-a748014b1b87"],
Cell[CellGroupData[{
Cell[242166, 6949, 163, 4, 31, "Input",ExpressionUUID->"580b7add-8681-4541-91e2-d22af71f6f31"],
Cell[242332, 6955, 112, 2, 31, "Output",ExpressionUUID->"221f4c86-bfb3-42b1-9d90-9cf6b5d74eb6"]
}, Open  ]],
Cell[242459, 6960, 945, 24, 52, "Text",ExpressionUUID->"90a2789a-0bdb-420a-96fe-a520052a8128"],
Cell[CellGroupData[{
Cell[243429, 6988, 227, 6, 31, "Input",ExpressionUUID->"da790fec-63c0-4f79-a2e9-f744a8e51dc0"],
Cell[243659, 6996, 612, 17, 31, "Output",ExpressionUUID->"660fc299-4a9f-4a57-b2d7-d55407f3b02a"]
}, Open  ]],
Cell[244286, 7016, 1307, 33, 51, "Text",ExpressionUUID->"60c1a715-70ea-43a1-9f6b-b74d8c2c37f1"],
Cell[CellGroupData[{
Cell[245618, 7053, 272, 7, 31, "Input",ExpressionUUID->"fe576b4f-0566-4335-8185-d0edb1d8c3a9"],
Cell[245893, 7062, 495, 14, 31, "Output",ExpressionUUID->"1cd55cae-c641-4ce2-97c8-81a6d2678101"]
}, Open  ]],
Cell[246403, 7079, 150, 2, 20, "Text",ExpressionUUID->"1554f468-0816-421c-b432-56100b30ae1e"],
Cell[CellGroupData[{
Cell[246578, 7085, 658, 18, 108, "Input",ExpressionUUID->"52bdf33d-acdc-4c65-8a3a-76434f6e4a1e"],
Cell[247239, 7105, 2131, 49, 146, "Output",ExpressionUUID->"b649aefd-ce26-488e-bc58-da999abd9758"]
}, Open  ]],
Cell[CellGroupData[{
Cell[249407, 7159, 142, 3, 31, "Input",ExpressionUUID->"4fe476a8-b22e-4b11-9c53-43e1337aa7a1"],
Cell[249552, 7164, 112, 2, 31, "Output",ExpressionUUID->"e1329b54-a365-4d93-8657-2edd573fec92"]
}, Open  ]],
Cell[249679, 7169, 683, 18, 37, "Text",ExpressionUUID->"01ab46dd-bc39-45c0-8ec3-7c23f40df65b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[250399, 7192, 144, 1, 32, "Subsection",ExpressionUUID->"4fadfa28-7f14-49be-864f-01bdc40fd023",
 CellTags->"Section5c"],
Cell[250546, 7195, 547, 11, 51, "Text",ExpressionUUID->"cf274c82-82d0-4a0f-8630-d5fccc5fb099"],
Cell[251096, 7208, 869, 20, 52, "Text",ExpressionUUID->"c4077fd5-1740-45fa-b236-2b23f8a157d5"],
Cell[CellGroupData[{
Cell[251990, 7232, 350, 9, 31, "Input",ExpressionUUID->"ed1912c1-1f7c-424c-92bb-9cd660d54ad1"],
Cell[252343, 7243, 113, 2, 31, "Output",ExpressionUUID->"dc833add-0e2f-4373-8aea-21354c612a31"]
}, Open  ]],
Cell[252471, 7248, 154, 2, 20, "Text",ExpressionUUID->"b576a347-014a-4c07-bbe8-9ee410c99b48"],
Cell[252628, 7252, 735, 17, 54, "Text",ExpressionUUID->"dbb63b16-21b0-4a6b-91c4-aadd9f9c8031"],
Cell[253366, 7271, 197, 3, 20, "Text",ExpressionUUID->"9916b7b6-448a-45a6-8386-cbeb9586962f"],
Cell[CellGroupData[{
Cell[253588, 7278, 361, 9, 31, "Input",ExpressionUUID->"781a6be9-ce62-4771-b46e-6a2d57a4ed64"],
Cell[253952, 7289, 4138, 91, 127, "Output",ExpressionUUID->"cf90175f-6cde-4338-a724-5843a8dc62bf"]
}, Open  ]],
Cell[258105, 7383, 240, 6, 21, "Text",ExpressionUUID->"5e71e690-638f-4cf5-ad74-104a938b326d"],
Cell[CellGroupData[{
Cell[258370, 7393, 142, 3, 31, "Input",ExpressionUUID->"1187950d-70e1-4d99-829d-e47ed10db351"],
Cell[258515, 7398, 112, 2, 31, "Output",ExpressionUUID->"4bd8685f-7172-4398-8c52-73b2a5dfc367"]
}, Open  ]],
Cell[258642, 7403, 559, 11, 54, "Text",ExpressionUUID->"d59d5551-d06c-47a2-9123-8bcf19443c6f"],
Cell[CellGroupData[{
Cell[259226, 7418, 426, 11, 31, "Input",ExpressionUUID->"3ba1f356-f4da-41b3-a144-e18d8b880a5b"],
Cell[259655, 7431, 114, 2, 31, "Output",ExpressionUUID->"76534f65-14d1-4d88-b0d1-3941e1cd77c0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[259818, 7439, 150, 1, 32, "Subsection",ExpressionUUID->"843e7a79-9563-4338-a1dd-fb197f84c822",
 CellTags->"Section5d"],
Cell[259971, 7442, 315, 7, 35, "Text",ExpressionUUID->"b9123ce3-2ae4-4ece-979c-9fde856dfa3c"],
Cell[260289, 7451, 640, 19, 21, "Text",ExpressionUUID->"94bf14fa-7082-4381-b58d-199add9358b7"],
Cell[CellGroupData[{
Cell[260954, 7474, 392, 11, 31, "Input",ExpressionUUID->"9aa0e9b4-b3a8-4ff2-a870-348bd99c8fde"],
Cell[261349, 7487, 135, 2, 31, "Output",ExpressionUUID->"c22d84a0-99d1-4d03-b619-25aa4a3258aa"]
}, Open  ]],
Cell[261499, 7492, 495, 14, 31, "Text",ExpressionUUID->"bba64143-e030-450f-b264-1107456506cf"],
Cell[CellGroupData[{
Cell[262019, 7510, 329, 11, 31, "Input",ExpressionUUID->"afdf77d2-798f-4c4e-8e01-41a91b259fa1"],
Cell[262351, 7523, 135, 2, 31, "Output",ExpressionUUID->"574b074a-0a5f-4171-987c-0f8f097d435b"]
}, Open  ]],
Cell[262501, 7528, 2071, 59, 92, "Text",ExpressionUUID->"38a0475b-ca1e-44d1-9883-c9f32324886d"],
Cell[CellGroupData[{
Cell[264597, 7591, 201, 4, 31, "Input",ExpressionUUID->"1b1c6074-cbb6-4bea-91cd-ce8f90e6ecde"],
Cell[264801, 7597, 135, 2, 31, "Output",ExpressionUUID->"80f181a1-38e8-4069-8fe4-1c471ecaa555"]
}, Open  ]],
Cell[CellGroupData[{
Cell[264973, 7604, 156, 4, 21, "Subsubsection",ExpressionUUID->"8c1cb60e-74b3-4915-a2d5-b599977b25b2"],
Cell[265132, 7610, 634, 10, 66, "Text",ExpressionUUID->"f28457b3-e50d-423f-b84f-8f9dce555280"],
Cell[265769, 7622, 487, 7, 50, "Text",ExpressionUUID->"0030fe23-2a1b-43e1-9c6b-8692eebcb786"],
Cell[266259, 7631, 547, 12, 36, "Text",ExpressionUUID->"fb2f4663-4ac4-4413-8c5f-85ad685104ff"],
Cell[266809, 7645, 194, 3, 31, "myCode",ExpressionUUID->"da20df1b-76f0-470f-9f71-3dee244d4123"],
Cell[267006, 7650, 221, 3, 35, "Text",ExpressionUUID->"f916b3f9-47de-49dd-ac2e-96d30ebfa4cc"],
Cell[267230, 7655, 571, 12, 58, "Text",ExpressionUUID->"35dce31d-d0b4-4a74-8404-4414eabaa578"],
Cell[267804, 7669, 121, 0, 20, "Text",ExpressionUUID->"09deed39-b84c-4485-9254-6a9ab40f8ff4"],
Cell[267928, 7671, 200, 4, 31, "myCode",ExpressionUUID->"3d308246-5b35-400a-bb25-87915490b613"],
Cell[268131, 7677, 527, 12, 55, "Text",ExpressionUUID->"ffd6c316-f767-46d0-8c6c-afad936e8cd4"],
Cell[268661, 7691, 232, 6, 31, "Input",ExpressionUUID->"2e4181ec-d89f-4484-bdf1-90879a34aaa2",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[268918, 7701, 189, 4, 31, "Input",ExpressionUUID->"9f27287f-e90f-43c2-a2b1-afad28045436"],
Cell[269110, 7707, 364, 9, 24, "Message",ExpressionUUID->"bd2d2c7e-10b6-4e49-b1f1-1e4323a0255a"],
Cell[269477, 7718, 186, 4, 31, "Output",ExpressionUUID->"601adeca-c876-4e71-9c08-1779fb9a7b52"]
}, Open  ]],
Cell[269678, 7725, 192, 4, 24, "Text",ExpressionUUID->"42f0ae3c-ec1d-4110-9203-27761c641557"],
Cell[269873, 7731, 257, 7, 31, "Input",ExpressionUUID->"b19e0519-b548-4ccf-8156-4efa3c52f36a",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[270155, 7742, 190, 4, 31, "Input",ExpressionUUID->"40fea30c-6d9a-4f78-aba1-4fa3dc0d1e80"],
Cell[270348, 7748, 111, 2, 31, "Output",ExpressionUUID->"f07fc5c5-7a77-40b2-be31-f9f1722faf42"]
}, Open  ]],
Cell[270474, 7753, 378, 7, 36, "Text",ExpressionUUID->"80be2902-2a4f-42d3-a94d-0c6b0c4cc7b0"],
Cell[270855, 7762, 227, 6, 31, "Input",ExpressionUUID->"49a566c5-1d90-453b-b46b-ffa5fb787d18",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[271107, 7772, 186, 4, 31, "Input",ExpressionUUID->"bbea7d7a-197f-4b0d-aad9-fcaa3975ed20"],
Cell[271296, 7778, 112, 2, 31, "Output",ExpressionUUID->"aba40574-d147-48b5-aa4e-40d1308daea6"]
}, Open  ]],
Cell[271423, 7783, 1167, 31, 75, "Text",ExpressionUUID->"b12b6b05-aa75-48bc-87b9-80baf1ec2697"],
Cell[272593, 7816, 906, 25, 127, "Input",ExpressionUUID->"d25df8d4-77da-4607-8288-98d8b187fa16",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[273524, 7845, 203, 4, 31, "Input",ExpressionUUID->"c2bbcf49-d0b2-4f3e-b9f5-4d70f9c2c14c"],
Cell[273730, 7851, 135, 2, 31, "Output",ExpressionUUID->"b8ba14b0-b2c5-4971-a3d2-d0a2e36e8e22"]
}, Open  ]],
Cell[273880, 7856, 234, 4, 20, "Text",ExpressionUUID->"1c862991-4e2b-49e1-a0bd-de254ccaf2e0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[274163, 7866, 152, 1, 32, "Subsection",ExpressionUUID->"653c587c-3787-44c4-a3a6-acbf4e69f550",
 CellTags->"Section5e"],
Cell[274318, 7869, 254, 4, 35, "Text",ExpressionUUID->"e5ca6c37-a3de-4c20-8720-a33012ad0c82"],
Cell[274575, 7875, 242, 5, 24, "Text",ExpressionUUID->"b143e489-d6d5-42a4-b26f-2014d76541fc"],
Cell[CellGroupData[{
Cell[274842, 7884, 164, 4, 31, "Input",ExpressionUUID->"b1f257f5-1df5-43c7-bfe0-40bc9b44953b"],
Cell[275009, 7890, 115, 2, 31, "Output",ExpressionUUID->"865e0ddd-38e9-4f2f-bf8a-6fc430529afd"]
}, Open  ]],
Cell[275139, 7895, 279, 4, 35, "Text",ExpressionUUID->"2550f9e0-87d5-4a59-8883-ad17473eac8a"],
Cell[CellGroupData[{
Cell[275443, 7903, 114, 0, 18, "Subsubsection",ExpressionUUID->"d4733b5c-a776-4b32-8a7b-bf61a0989ba1"],
Cell[275560, 7905, 1519, 43, 51, "Text",ExpressionUUID->"35b87875-0596-4a99-b33d-9a87d04f8f0d"],
Cell[277082, 7950, 531, 13, 35, "Text",ExpressionUUID->"be61f440-02ca-4104-abd4-212dbab0aa88"],
Cell[277616, 7965, 1377, 41, 35, "Text",ExpressionUUID->"cb8fefb1-905e-4c2d-8a70-f9d9bb9e2e51"],
Cell[278996, 8008, 489, 16, 26, "Equation",ExpressionUUID->"ff2c8ccc-a717-4427-9554-09063f032c44"],
Cell[279488, 8026, 914, 26, 35, "Text",ExpressionUUID->"50683501-5dee-4a3f-ab52-4a10cfaf0d2c"],
Cell[280405, 8054, 1563, 45, 50, "Text",ExpressionUUID->"682665ca-5474-4807-b27d-439899e4ad8b"],
Cell[281971, 8101, 686, 18, 37, "Text",ExpressionUUID->"edfeb7cb-5e26-4b76-af22-20fb6d93bfe2"],
Cell[CellGroupData[{
Cell[282682, 8123, 189, 4, 31, "Input",ExpressionUUID->"a3df1363-0730-4200-9f10-83df99348c9f",
 InitializationCell->True],
Cell[282874, 8129, 453, 10, 59, "Message",ExpressionUUID->"a10439fa-a870-4ec9-ba45-f17f2a3ea6e3"]
}, Open  ]],
Cell[283342, 8142, 431, 9, 35, "Text",ExpressionUUID->"972bfa6a-c933-4016-838a-d1edad5b39e1"],
Cell[283776, 8153, 1304, 39, 37, "Text",ExpressionUUID->"ce4e5a93-d531-41d9-8254-584c79642d5e"],
Cell[CellGroupData[{
Cell[285105, 8196, 179, 4, 31, "Input",ExpressionUUID->"7dd2a587-0ed7-427c-8b1e-36a081142cf0"],
Cell[285287, 8202, 111, 2, 31, "Output",ExpressionUUID->"00040572-419a-4c69-905d-9b98fc157cca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[285435, 8209, 171, 4, 31, "Input",ExpressionUUID->"cf3b323b-0970-40ea-a567-c8496ae17d39"],
Cell[285609, 8215, 431, 14, 31, "Output",ExpressionUUID->"b48dcd77-2a24-47a1-a0fc-e9b66451c97b"]
}, Open  ]],
Cell[286055, 8232, 798, 19, 35, "Text",ExpressionUUID->"b982e213-14d5-4c7a-928c-ed8befbe6947"],
Cell[CellGroupData[{
Cell[286878, 8255, 180, 4, 31, "Input",ExpressionUUID->"6ecc585e-4cd9-40e1-b356-8248c165282c"],
Cell[287061, 8261, 115, 2, 31, "Output",ExpressionUUID->"1287a93f-0a06-4e0e-8193-105d7df289ca"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[287237, 8270, 152, 1, 32, "Subsection",ExpressionUUID->"6b3013d9-0e48-4184-bcbd-1656889b5802",
 CellTags->"Section5f"],
Cell[287392, 8273, 642, 17, 35, "Text",ExpressionUUID->"0a826775-19b3-43c9-9aa5-07a61e6a4499"],
Cell[288037, 8292, 513, 9, 51, "Text",ExpressionUUID->"5cc93ed3-fdb9-416d-9ad0-c3895afc94db"],
Cell[CellGroupData[{
Cell[288575, 8305, 169, 4, 31, "Input",ExpressionUUID->"1a7e2b47-ce17-4ea9-8a61-8870ab4c9718"],
Cell[288747, 8311, 113, 2, 31, "Output",ExpressionUUID->"bf3157d1-5030-4f20-b3b9-a2ed7ef7a9df"]
}, Open  ]],
Cell[288875, 8316, 329, 5, 35, "Text",ExpressionUUID->"19359906-4c6c-4b54-85cf-370183ede147"],
Cell[CellGroupData[{
Cell[289229, 8325, 284, 8, 31, "Input",ExpressionUUID->"4944d5ee-d9e6-428d-9f9e-fe84ebccca79"],
Cell[289516, 8335, 113, 2, 31, "Output",ExpressionUUID->"8f91f22a-ccee-4fd2-a520-4dd204c747fc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[289666, 8342, 154, 2, 18, "Subsubsection",ExpressionUUID->"d3abc895-23ad-4f22-b80d-008f52a4ebc7",
 PageBreakWithin->False],
Cell[289823, 8346, 720, 18, 52, "Text",ExpressionUUID->"80e1668f-48c6-479e-bf10-26a1e5219cea",
 PageBreakAbove->False,
 PageBreakWithin->False],
Cell[290546, 8366, 924, 20, 65, "Text",ExpressionUUID->"9cdd5f61-b380-452d-bd5f-28a488dca49d"],
Cell[291473, 8388, 1213, 33, 50, "Text",ExpressionUUID->"d10d1797-847f-4802-a196-3dd8b9f94f8d"],
Cell[292689, 8423, 1269, 37, 35, "Text",ExpressionUUID->"844f4930-583d-4e82-90c7-4a17cceeacef"],
Cell[293961, 8462, 1082, 32, 35, "Text",ExpressionUUID->"bcfa9541-146a-4822-b62b-f9761fa810ec"],
Cell[295046, 8496, 864, 26, 26, "Equation",ExpressionUUID->"5ae41048-0c79-47c4-a9c5-64892bf6c696"],
Cell[295913, 8524, 225, 3, 35, "Text",ExpressionUUID->"117dd8e7-0836-47b8-82e9-67db14254dd6"],
Cell[296141, 8529, 3506, 90, 431, "Input",ExpressionUUID->"ede8a66d-b1b6-446d-87bc-bee9bfa1b2bf",
 InitializationCell->True],
Cell[299650, 8621, 566, 13, 39, "Text",ExpressionUUID->"b2644aa3-780e-4a49-9810-17be9f321d78"],
Cell[300219, 8636, 1107, 28, 70, "Text",ExpressionUUID->"da683574-31c1-4ad6-9374-5f2abb867a9a"],
Cell[301329, 8666, 353, 10, 24, "Text",ExpressionUUID->"bc904446-2f5d-4a09-95a8-d16c8a85cd90"],
Cell[301685, 8678, 862, 24, 39, "Text",ExpressionUUID->"fc5b89c9-f117-4d9b-9ba7-6cf60ed77ed0"],
Cell[302550, 8704, 1081, 33, 43, "Text",ExpressionUUID->"131304b1-26da-4f97-b030-ac72e521dc55"],
Cell[303634, 8739, 692, 22, 26, "Equation",ExpressionUUID->"270b191d-e734-425a-b82e-27df8b8497db"],
Cell[304329, 8763, 181, 6, 24, "Text",ExpressionUUID->"17544e96-7282-450e-aac9-5ede68ffa1b1"],
Cell[304513, 8771, 1225, 36, 54, "Text",ExpressionUUID->"d69a26db-eadc-4b8c-be7b-fa04a187a9ee"],
Cell[305741, 8809, 1236, 43, 72, "Equation",ExpressionUUID->"968987d6-22f1-4307-a562-12c2c5e0b0e0"],
Cell[306980, 8854, 1614, 45, 97, "Text",ExpressionUUID->"b5d0d1f7-99c6-48c0-a75e-048b7bd5af35"],
Cell[308597, 8901, 337, 7, 36, "Text",ExpressionUUID->"e60a5490-586b-41ff-9724-cde469d18624"],
Cell[CellGroupData[{
Cell[308959, 8912, 202, 5, 31, "Input",ExpressionUUID->"1dc69bcb-f727-46f1-9a9c-6abcc436827c"],
Cell[309164, 8919, 1418, 50, 115, "Output",ExpressionUUID->"91b7dcd0-c9f9-4de4-89f9-e0bf8ccdd0d0"]
}, Open  ]],
Cell[310597, 8972, 274, 4, 35, "Text",ExpressionUUID->"903cbd8d-ebfe-44c2-b475-b66957d9c582"],
Cell[310874, 8978, 1021, 23, 68, "Text",ExpressionUUID->"98a7993c-20d2-4828-b350-9a120c57b15a"],
Cell[CellGroupData[{
Cell[311920, 9005, 396, 12, 31, "Input",ExpressionUUID->"fc3dedbd-7e9c-41d0-8a50-6b686e48abfe"],
Cell[312319, 9019, 2700, 99, 251, "Output",ExpressionUUID->"d96baf37-2876-4d7b-b2dd-ea545b91cb38"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[315080, 9125, 154, 1, 32, "Subsection",ExpressionUUID->"d5c42b32-c271-42f6-a9ca-c28096274bc1",
 CellTags->"Section5g"],
Cell[315237, 9128, 1562, 44, 35, "Text",ExpressionUUID->"bb7489b6-9cd5-4870-bf92-be17fb05e54b"],
Cell[316802, 9174, 1235, 32, 53, "Text",ExpressionUUID->"95cfd922-9b26-43a6-87a9-5c2b0babf5f1"],
Cell[318040, 9208, 189, 3, 20, "Text",ExpressionUUID->"dc32c7da-6d52-4c53-8485-9a3438d475da"],
Cell[CellGroupData[{
Cell[318254, 9215, 147, 3, 31, "Input",ExpressionUUID->"764b47d6-04b3-4b3d-acdb-4dbff9269e30"],
Cell[318404, 9220, 112, 2, 31, "Output",ExpressionUUID->"c823dced-bd2e-4255-a73f-3576240d80bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[318553, 9227, 153, 3, 31, "Input",ExpressionUUID->"031ee3a8-3c17-4f5b-b083-a28b5367e666"],
Cell[318709, 9232, 1255, 35, 70, "Output",ExpressionUUID->"0e1e371f-81c6-46b4-bfba-76d6b55be73c"]
}, Open  ]],
Cell[319979, 9270, 643, 13, 52, "Text",ExpressionUUID->"74b7016c-3e18-4737-9ec5-cb43dbfeb6d8"],
Cell[CellGroupData[{
Cell[320647, 9287, 176, 4, 31, "Input",ExpressionUUID->"93e48bc5-117c-428e-a7fe-23449295faef"],
Cell[320826, 9293, 623, 19, 31, "Output",ExpressionUUID->"6351161b-95e8-4cae-b28a-3ec4a9bae3a2"]
}, Open  ]],
Cell[321464, 9315, 1307, 35, 51, "Text",ExpressionUUID->"54e70ed1-68d7-48d4-bfac-dee4e92468b5"],
Cell[322774, 9352, 171, 3, 20, "Text",ExpressionUUID->"e58de9f1-2f72-468f-b897-66f292016fe8"],
Cell[CellGroupData[{
Cell[322970, 9359, 225, 6, 31, "Input",ExpressionUUID->"f1617555-e8bf-4593-ba10-a9dbfe3342a2"],
Cell[323198, 9367, 830, 23, 51, "Output",ExpressionUUID->"bac1bf9f-31e0-411e-a7eb-50b7b5fbadde"]
}, Open  ]],
Cell[324043, 9393, 660, 13, 52, "Text",ExpressionUUID->"61ec3726-7aa5-4420-b323-0ff6225c7e90"],
Cell[324706, 9408, 164, 3, 20, "Text",ExpressionUUID->"79611f99-061b-4f83-9b76-4aa1c08bd183"],
Cell[CellGroupData[{
Cell[324895, 9415, 248, 6, 31, "Input",ExpressionUUID->"1889e13c-974f-48bc-af0b-3a293cb2aa61"],
Cell[325146, 9423, 802, 21, 51, "Output",ExpressionUUID->"e060b0d6-87c8-4b8f-942c-0068898946f0"]
}, Open  ]],
Cell[325963, 9447, 452, 6, 50, "Text",ExpressionUUID->"aa1dae63-3f62-44c3-96d7-928dd99e6053"],
Cell[CellGroupData[{
Cell[326440, 9457, 186, 4, 31, "Input",ExpressionUUID->"9a3ccc0a-3d84-4fff-8243-4972052cb278"],
Cell[326629, 9463, 820, 23, 51, "Output",ExpressionUUID->"ae237f85-7f54-4b4f-a158-4edc3291f2a4"]
}, Open  ]],
Cell[327464, 9489, 264, 6, 21, "Text",ExpressionUUID->"a7941de5-f5c0-40c4-9f8d-4c3f4d10f37c"],
Cell[CellGroupData[{
Cell[327753, 9499, 220, 5, 31, "Input",ExpressionUUID->"33f08f94-cca9-4eab-a3c1-580441a2bc2d"],
Cell[327976, 9506, 111, 2, 31, "Output",ExpressionUUID->"f5b4780e-a648-43c4-b89e-629e0596f5ae"]
}, Open  ]],
Cell[328102, 9511, 263, 6, 21, "Text",ExpressionUUID->"9f779291-bf75-493c-8a38-d0ed8f92af9f"],
Cell[CellGroupData[{
Cell[328390, 9521, 127, 0, 18, "Subsubsection",ExpressionUUID->"de3505c1-a4c2-442f-9f57-c424de045181"],
Cell[328520, 9523, 893, 25, 35, "Text",ExpressionUUID->"31af128c-6b97-4277-882d-1f9aa5ca5329"],
Cell[329416, 9550, 661, 16, 36, "Text",ExpressionUUID->"07880e29-08e1-45c0-9a15-a4f44ec4ac39"],
Cell[330080, 9568, 377, 10, 64, "Text",ExpressionUUID->"27448bd6-0579-49de-81cc-c142d3f2c4e7"],
Cell[330460, 9580, 176, 3, 20, "Text",ExpressionUUID->"3fb11660-29e0-4034-bb01-71054a1ffc83"],
Cell[330639, 9585, 377, 10, 66, "Text",ExpressionUUID->"743f9252-cba7-4928-9e1f-f4a01c96f3ef"],
Cell[331019, 9597, 651, 13, 50, "Text",ExpressionUUID->"be7f2a65-e741-4760-8918-21296dc5833e"],
Cell[331673, 9612, 355, 10, 21, "Text",ExpressionUUID->"c76d31c6-aa46-4faa-8eb9-86cf6536d5a9"],
Cell[CellGroupData[{
Cell[332053, 9626, 221, 5, 31, "Input",ExpressionUUID->"3ebfcc7a-8d50-4763-b726-2142b6b27976"],
Cell[332277, 9633, 166, 4, 31, "Output",ExpressionUUID->"0f168605-c114-42bb-acb7-7be70b9db547"]
}, Open  ]],
Cell[332458, 9640, 619, 13, 50, "Text",ExpressionUUID->"49f6dd8c-f66d-41b9-9c3d-479df8770897"]
}, Open  ]],
Cell[CellGroupData[{
Cell[333114, 9658, 101, 0, 18, "Subsubsection",ExpressionUUID->"02828634-73a5-4df0-8905-592e9fddc603"],
Cell[333218, 9660, 395, 7, 36, "Text",ExpressionUUID->"d965dd59-1d69-473d-bbdd-23eecd69d52c"],
Cell[333616, 9669, 1204, 33, 50, "Text",ExpressionUUID->"f3d83e8e-f5df-4a60-be24-f5069778b8ec"],
Cell[334823, 9704, 1349, 37, 50, "Text",ExpressionUUID->"775af884-5b42-423d-b416-bfb052984ae2"],
Cell[336175, 9743, 1281, 37, 35, "Text",ExpressionUUID->"6d771034-e476-429b-9fb6-5ae8f0929cd8"],
Cell[CellGroupData[{
Cell[337481, 9784, 221, 5, 31, "Input",ExpressionUUID->"82331a85-3e57-4d78-b0a0-b85194e47c03"],
Cell[337705, 9791, 402, 12, 31, "Output",ExpressionUUID->"4fb6720a-4cd2-41dd-b079-994eb2a5231b"]
}, Open  ]],
Cell[338122, 9806, 645, 15, 35, "Text",ExpressionUUID->"1a827ee1-a9c8-4590-98dd-2168064d12fb"],
Cell[338770, 9823, 1567, 45, 50, "Text",ExpressionUUID->"d2d805a1-ffb0-4efd-8fa5-2b941783b568"],
Cell[340340, 9870, 148, 2, 20, "Text",ExpressionUUID->"53b7e308-8e75-452d-8a42-5cacccf9cc25"],
Cell[340491, 9874, 682, 18, 39, "Text",ExpressionUUID->"262c323b-694e-4871-9db4-277b1213ff64"],
Cell[341176, 9894, 361, 10, 51, "Input",ExpressionUUID->"310947c6-b0a4-4855-9a8f-f119979d6f97",
 InitializationCell->True],
Cell[341540, 9906, 394, 12, 20, "Text",ExpressionUUID->"22b9f988-79b0-49c9-8e89-fddbab977cb6"],
Cell[341937, 9920, 327, 10, 31, "Input",ExpressionUUID->"0005a0fd-22df-435e-a09e-3b6622177dc5",
 InitializationCell->True],
Cell[342267, 9932, 449, 12, 20, "Text",ExpressionUUID->"f914ce04-e452-41fe-998e-4d3e66fd77ed"],
Cell[342719, 9946, 548, 17, 51, "Input",ExpressionUUID->"6091667d-1b59-4724-8dae-15f12634446a",
 InitializationCell->True],
Cell[343270, 9965, 311, 7, 21, "Text",ExpressionUUID->"763b47e9-adaf-44fb-b5cd-d74bd11102c0"],
Cell[CellGroupData[{
Cell[343606, 9976, 211, 5, 31, "Input",ExpressionUUID->"f14dd66d-b058-413a-8834-da0b69ad644a"],
Cell[343820, 9983, 113, 2, 31, "Output",ExpressionUUID->"6afd27df-acbb-449d-83a0-d7f69b3162ac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[343970, 9990, 173, 4, 31, "Input",ExpressionUUID->"c04f6d39-a434-49ad-b793-b41d1e5ef975"],
Cell[344146, 9996, 113, 2, 31, "Output",ExpressionUUID->"0b8b6b8f-b2c2-4dea-84f8-b8e7b657aa07"]
}, Open  ]],
Cell[344274, 10001, 288, 7, 20, "Text",ExpressionUUID->"bff826da-e628-4e39-b565-e4ec54e7f7f9"],
Cell[344565, 10010, 238, 6, 31, "Input",ExpressionUUID->"c8e398d8-929d-4091-b8c5-929f4fd1ef89"],
Cell[344806, 10018, 126, 0, 20, "Text",ExpressionUUID->"428d2914-e0d4-414c-b066-862f146b9c2b"],
Cell[CellGroupData[{
Cell[344957, 10022, 150, 3, 31, "Input",ExpressionUUID->"e85492b2-c0a5-4178-9566-799b30a4e61b"],
Cell[345110, 10027, 113, 2, 31, "Output",ExpressionUUID->"89021cc9-9530-4702-b8bd-ce4da1089d34"]
}, Open  ]],
Cell[CellGroupData[{
Cell[345260, 10034, 148, 3, 31, "Input",ExpressionUUID->"ca445939-5be1-4763-9b64-676962d1a75e"],
Cell[345411, 10039, 113, 2, 31, "Output",ExpressionUUID->"d6dea463-a19a-4bb6-a991-e494f1ff038e"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[345597, 10049, 141, 1, 55, "Section",ExpressionUUID->"04124958-591e-4af9-afe7-c329f9dfaaca",
 CellTags->"Section6"],
Cell[345741, 10052, 293, 4, 35, "Text",ExpressionUUID->"81c52bb8-6bec-48ad-bf34-5aa91e451d3e"],
Cell[CellGroupData[{
Cell[346059, 10060, 140, 1, 35, "Subsection",ExpressionUUID->"5afaf9ad-40d8-49d5-b54c-a87a1fd08753",
 CellTags->"Section6a"],
Cell[346202, 10063, 251, 4, 35, "Text",ExpressionUUID->"668f809a-e278-4664-9ac3-733c7cf793c4"],
Cell[346456, 10069, 237, 5, 24, "Text",ExpressionUUID->"c03e058d-4862-46c2-952b-d54396b8db66"],
Cell[346696, 10076, 424, 6, 50, "Text",ExpressionUUID->"e16a5471-be35-44c7-ae02-2f07c7744283"],
Cell[347123, 10084, 129, 0, 20, "Text",ExpressionUUID->"8c66d8c6-eaae-4dfb-8ee8-c3bca7b3036a"],
Cell[347255, 10086, 1103, 32, 146, "Input",ExpressionUUID->"4ee19b54-2f54-419c-b548-d53eb656f7c4",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[348383, 10122, 331, 9, 31, "Input",ExpressionUUID->"f4ec7dc1-a1bd-461c-87a0-ddb23187f036"],
Cell[348717, 10133, 248, 5, 31, "Output",ExpressionUUID->"9ea65e50-5e77-4d0f-9e33-93e39d554a59"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[349014, 10144, 144, 1, 35, "Subsection",ExpressionUUID->"fbeb9bce-ac24-451d-81f9-c714bdc6aca9",
 CellTags->"Section6b"],
Cell[349161, 10147, 1817, 54, 53, "Text",ExpressionUUID->"18bd79cf-a4d8-4a37-9752-ab2e67b38b4d"],
Cell[350981, 10203, 1801, 50, 73, "Text",ExpressionUUID->"83e45379-db88-4b9a-a5a6-b15581f0e876"],
Cell[352785, 10255, 3275, 102, 95, "Text",ExpressionUUID->"9f73179e-cc6f-4618-9263-ad72031c17bb"],
Cell[356063, 10359, 2663, 81, 73, "Text",ExpressionUUID->"3a9e403d-2627-4658-8a94-a2db5f8d8231"],
Cell[358729, 10442, 398, 11, 29, "Equation",ExpressionUUID->"47a2b79a-850e-4b96-824e-43d37bce29f2"],
Cell[359130, 10455, 94, 0, 20, "Text",ExpressionUUID->"9f106fb7-7e55-4f18-899f-805b8d6a6a65"],
Cell[359227, 10457, 2866, 91, 55, "Text",ExpressionUUID->"55573598-34d1-4eee-aaac-128d28d0a4b2"],
Cell[362096, 10550, 173, 3, 20, "Text",ExpressionUUID->"98913e59-7efa-4e41-9d8e-205be59dedf6"],
Cell[362272, 10555, 2327, 61, 104, "Text",ExpressionUUID->"f8119a7c-4e7d-41e0-b3c2-46d3c6a03c21"],
Cell[364602, 10618, 99, 0, 20, "Text",ExpressionUUID->"bb3241dc-6441-45c8-8e97-a146ce329769"],
Cell[364704, 10620, 3204, 85, 469, "Input",ExpressionUUID->"8cd40787-2cf7-4108-b335-3201a01148b0",
 InitializationCell->True],
Cell[367911, 10707, 218, 3, 35, "Text",ExpressionUUID->"f235ef49-ec8a-4ce9-bd1c-0753e5ac574c"],
Cell[CellGroupData[{
Cell[368154, 10714, 241, 6, 31, "Input",ExpressionUUID->"81fc0970-585a-409e-ade5-242359d0e63c"],
Cell[368398, 10722, 199, 5, 31, "Output",ExpressionUUID->"2e2947b2-d09e-4497-ad16-8f94d1726c86"]
}, Open  ]],
Cell[368612, 10730, 441, 12, 21, "Text",ExpressionUUID->"c5da20a9-bd98-4914-819a-3cc2d8fe94a9"],
Cell[CellGroupData[{
Cell[369078, 10746, 516, 13, 108, "Input",ExpressionUUID->"30f196cb-c710-4b3c-b1c6-130e3f732662"],
Cell[CellGroupData[{
Cell[369619, 10763, 198, 5, 24, "Print",ExpressionUUID->"b136d74e-9565-47b2-8c51-241eaa703060"],
Cell[369820, 10770, 198, 5, 24, "Print",ExpressionUUID->"9be32464-aa04-4ae6-a77e-96023ca6d99a"],
Cell[370021, 10777, 198, 5, 24, "Print",ExpressionUUID->"83e1c4b5-1c68-4fe3-9b80-2f5cc1c25668"],
Cell[370222, 10784, 198, 5, 24, "Print",ExpressionUUID->"f6a6b137-e579-4b03-a7eb-fa089255fcd3"],
Cell[370423, 10791, 198, 5, 24, "Print",ExpressionUUID->"160f7a66-599c-4d61-81c3-473e2421217d"],
Cell[370624, 10798, 198, 5, 24, "Print",ExpressionUUID->"c4ab88d9-fcdc-4245-86f1-2247d695a6ca"],
Cell[370825, 10805, 198, 5, 24, "Print",ExpressionUUID->"7ab15d41-40a5-47fc-8ae2-80d05fb8e185"],
Cell[371026, 10812, 198, 5, 24, "Print",ExpressionUUID->"ae79e142-a0e2-4a67-a8e8-c34c54ad88bc"],
Cell[371227, 10819, 198, 5, 24, "Print",ExpressionUUID->"25f6f24c-d959-4450-b64d-ad97b5e1ea3e"],
Cell[371428, 10826, 198, 5, 24, "Print",ExpressionUUID->"a4d85a93-0f40-433d-99c9-c5d95d49ebe9"],
Cell[371629, 10833, 198, 5, 24, "Print",ExpressionUUID->"3e54b5ba-c860-4e91-ad07-7a3d3ac8662b"],
Cell[371830, 10840, 198, 5, 24, "Print",ExpressionUUID->"ee4cb6a8-5e2f-471f-a8cd-41cbf04bfcb2"],
Cell[372031, 10847, 198, 5, 24, "Print",ExpressionUUID->"d315b382-55d2-465f-8c18-5ae5ea2a662c"],
Cell[372232, 10854, 198, 5, 24, "Print",ExpressionUUID->"5ce3f90e-cb96-430e-9069-a1052c9b67b5"],
Cell[372433, 10861, 198, 5, 24, "Print",ExpressionUUID->"c3966b4a-fb45-4b51-9f11-bff11d64a49d"],
Cell[372634, 10868, 198, 5, 24, "Print",ExpressionUUID->"420a4b72-a5d6-48dc-98cb-7cade6412d70"],
Cell[372835, 10875, 198, 5, 24, "Print",ExpressionUUID->"0b8db109-0df0-493f-8733-d767aa76fde0"],
Cell[373036, 10882, 198, 5, 24, "Print",ExpressionUUID->"b73f92e2-b931-4f29-b0ca-4651cc50ceb5"],
Cell[373237, 10889, 198, 5, 24, "Print",ExpressionUUID->"6ac0da5e-963c-443a-a1a6-c05bdb3f1987"],
Cell[373438, 10896, 198, 5, 24, "Print",ExpressionUUID->"7dfbe998-7d6c-4166-a2c6-77cb4de4e383"],
Cell[373639, 10903, 198, 5, 24, "Print",ExpressionUUID->"28b50b85-f0ce-4948-8104-cd8eff427340"],
Cell[373840, 10910, 198, 5, 24, "Print",ExpressionUUID->"99b6eb28-de1d-46b8-bbc7-ef8a06175a4e"],
Cell[374041, 10917, 198, 5, 24, "Print",ExpressionUUID->"03e3ccf2-54ee-4afb-a8cd-085d2d26efd1"],
Cell[374242, 10924, 198, 5, 24, "Print",ExpressionUUID->"d450ac54-a96e-4160-a575-32b52eb388fb"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[374501, 10936, 135, 1, 32, "Subsection",ExpressionUUID->"f42bf01f-940f-45e8-ab27-b3262d4aa096",
 CellTags->"Section6c"],
Cell[374639, 10939, 910, 22, 35, "Text",ExpressionUUID->"d8e67f9b-d684-4683-9fa2-4650ab287b9f"],
Cell[375552, 10963, 1904, 54, 74, "Text",ExpressionUUID->"b0c99a45-1481-4f3b-8fa2-80ecc6c1e5eb"],
Cell[CellGroupData[{
Cell[377481, 11021, 300, 8, 31, "Input",ExpressionUUID->"a7648f26-2980-4fce-9c40-4489548ca62e"],
Cell[377784, 11031, 192, 5, 31, "Output",ExpressionUUID->"30529719-83f2-48a5-820b-60037c020715"]
}, Open  ]],
Cell[377991, 11039, 579, 14, 35, "Text",ExpressionUUID->"428062e5-dcc4-4761-bc0c-f1aa315a5439"],
Cell[CellGroupData[{
Cell[378595, 11057, 301, 9, 31, "Input",ExpressionUUID->"b6db3ac2-398e-490c-9582-69513807c7d0"],
Cell[378899, 11068, 179, 4, 31, "Output",ExpressionUUID->"df430950-ba93-4c5d-a86a-5387114d7b5a"]
}, Open  ]],
Cell[379093, 11075, 441, 12, 39, "Text",ExpressionUUID->"1261bb93-85f7-4422-bb0c-35b03435f4ab"],
Cell[CellGroupData[{
Cell[379559, 11091, 116, 0, 18, "Subsubsection",ExpressionUUID->"49576963-9da2-499b-8e1f-0cc53194840e"],
Cell[379678, 11093, 413, 10, 39, "Text",ExpressionUUID->"52b52193-2f41-4adc-a1b1-67d40159f968"],
Cell[380094, 11105, 1126, 28, 71, "Text",ExpressionUUID->"ccbf028c-0d31-419c-9788-5619046a107e"],
Cell[381223, 11135, 1078, 28, 184, "Input",ExpressionUUID->"e2be9cb9-6f90-4b2a-8c12-61bd68f6c4d4",
 InitializationCell->True],
Cell[382304, 11165, 331, 8, 20, "Text",ExpressionUUID->"f9afb14d-ca87-471d-ae28-e105b567d742"],
Cell[CellGroupData[{
Cell[382660, 11177, 231, 6, 31, "Input",ExpressionUUID->"71043451-ff72-44b7-9424-52d67db21802"],
Cell[382894, 11185, 697, 17, 31, "Output",ExpressionUUID->"eef5a37b-6721-4e54-908f-90dfba178cf4"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[383664, 11210, 170, 3, 55, "Section",ExpressionUUID->"71e248da-e17e-4503-a867-d10882050928",
 CellTags->"Solutions"],
Cell[CellGroupData[{
Cell[383859, 11217, 128, 2, 32, "Subsection",ExpressionUUID->"8a2b26e2-2992-47e0-bde3-ad62827c39d1",
 CellTags->"SolutionsCP10"],
Cell[383990, 11221, 727, 20, 42, "Problem",ExpressionUUID->"aa44290c-0904-46f8-ae6e-19642560a02d"],
Cell[384720, 11243, 543, 13, 37, "Text",ExpressionUUID->"a729e68e-fe41-4a4c-ab2a-b239ea534ae7"],
Cell[385266, 11258, 990, 27, 36, "Text",ExpressionUUID->"1ae99a81-2e89-4765-9568-726b020f2be2"],
Cell[CellGroupData[{
Cell[386281, 11289, 574, 15, 70, "Input",ExpressionUUID->"4f806b3b-4c9c-4418-8b81-093931e1fdcb"],
Cell[386858, 11306, 490, 16, 31, "Output",ExpressionUUID->"9a1ed443-754a-4f1f-b7f3-2f930667dda6"]
}, Open  ]],
Cell[387363, 11325, 746, 20, 36, "Text",ExpressionUUID->"32e3cde8-ce28-4afb-830b-bdbc602a8dd4"],
Cell[388112, 11347, 532, 14, 20, "Text",ExpressionUUID->"535a3d5d-34d2-481f-a325-012b3b7f4f9f"],
Cell[388647, 11363, 1050, 29, 127, "Input",ExpressionUUID->"e8ad2b9b-f06d-4432-845f-aac99895cb11",
 InitializationCell->True],
Cell[389700, 11394, 325, 8, 20, "Text",ExpressionUUID->"46a2d84a-95e4-4e68-a6dd-c1dfd3142f19"],
Cell[CellGroupData[{
Cell[390050, 11406, 176, 4, 31, "Input",ExpressionUUID->"b311d264-b3a9-4362-816d-6d2b34c5486a"],
Cell[390229, 11412, 2551, 74, 108, "Output",ExpressionUUID->"141b00e1-078e-4e3c-95a9-0d2d821bc8be"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[392829, 11492, 138, 2, 32, "Subsection",ExpressionUUID->"093466d0-fde0-49ba-a3e5-ac7d11344e94",
 CellTags->"SolutionsCE1"],
Cell[392970, 11496, 241, 4, 55, "Problem",ExpressionUUID->"ffa21cae-7c01-48a3-92a2-2e7044ba01e2"],
Cell[393214, 11502, 739, 16, 50, "Text",ExpressionUUID->"b959128c-bdca-4744-8439-508b1cd4c909"],
Cell[393956, 11520, 493, 13, 35, "Text",ExpressionUUID->"9be0fe14-8589-4965-9985-81a8cdb30b3e"],
Cell[394452, 11535, 399, 6, 50, "Text",ExpressionUUID->"bddbb9c2-0af0-423e-92d2-991583d2c176"],
Cell[394854, 11543, 848, 18, 67, "Text",ExpressionUUID->"5e88e7f3-8d49-4e18-8479-b4ee089ebb5e"],
Cell[395705, 11563, 441, 13, 31, "Input",ExpressionUUID->"652a7630-cfff-423b-961e-c63605060ee5",
 InitializationCell->True],
Cell[396149, 11578, 404, 10, 20, "Text",ExpressionUUID->"70ffc385-1ab3-4260-951b-0207f4851512"],
Cell[CellGroupData[{
Cell[396578, 11592, 290, 8, 31, "Input",ExpressionUUID->"bd28021a-8fc3-42fe-a6ef-f8391be4bb31"],
Cell[396871, 11602, 114, 2, 31, "Output",ExpressionUUID->"146db29c-36c4-478d-b4c6-dc342a927670"]
}, Open  ]],
Cell[397000, 11607, 562, 18, 43, "Text",ExpressionUUID->"6bcd798f-e8cf-4ebd-9d1a-7cd47d3ae6b3"],
Cell[397565, 11627, 731, 22, 62, "Text",ExpressionUUID->"a43e76fd-eeec-42eb-98ab-7d024b7e4414"],
Cell[398299, 11651, 92, 0, 20, "Text",ExpressionUUID->"cc197098-7322-4fb0-875c-7c676fdc0429"],
Cell[398394, 11653, 2057, 54, 222, "Input",ExpressionUUID->"d60db267-2764-43e4-a665-8a2a7754b908",
 InitializationCell->True],
Cell[400454, 11709, 143, 2, 20, "Text",ExpressionUUID->"1c7b6797-8749-46ac-ae2b-a527fefe0c68"],
Cell[CellGroupData[{
Cell[400622, 11715, 177, 4, 31, "Input",ExpressionUUID->"599e31bd-34b8-418e-9e8f-83c1608a7040"],
Cell[400802, 11721, 1819, 45, 89, "Output",ExpressionUUID->"8b4201b9-039e-4d33-99e8-238fe35858e7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[402658, 11771, 149, 3, 31, "Input",ExpressionUUID->"1b940968-531e-49ab-be9f-b63ae619ec37"],
Cell[402810, 11776, 112, 2, 31, "Output",ExpressionUUID->"c935995b-c67f-4610-8977-3278c0755942"]
}, Open  ]],
Cell[402937, 11781, 197, 3, 20, "Text",ExpressionUUID->"6195c393-ad13-4364-9700-94e501486c47"]
}, Open  ]],
Cell[CellGroupData[{
Cell[403171, 11789, 138, 2, 32, "Subsection",ExpressionUUID->"fbb92a79-3731-4f48-9566-cd9e744b806a",
 CellTags->"SolutionsCE3"],
Cell[403312, 11793, 1299, 35, 68, "Problem",ExpressionUUID->"19aae068-be34-4a22-afe9-e202bffcfe7a"],
Cell[404614, 11830, 551, 14, 35, "Text",ExpressionUUID->"6ceb870b-dcf0-4bbf-bc6a-2c9e3f9d1e4c"],
Cell[405168, 11846, 432, 14, 20, "Text",ExpressionUUID->"2e05cde8-db1a-4431-a95d-6a8fb9672332"],
Cell[CellGroupData[{
Cell[405625, 11864, 219, 6, 31, "Input",ExpressionUUID->"0b42b51c-d301-4384-8d8d-6513fd50e223",
 InitializationCell->True],
Cell[405847, 11872, 112, 2, 31, "Output",ExpressionUUID->"130ecf09-8490-491d-a9ac-de0d39215f29"]
}, Open  ]],
Cell[405974, 11877, 537, 12, 35, "Text",ExpressionUUID->"58f01fc0-e1b0-4dfb-9d8d-0142ba7f33d3"],
Cell[406514, 11891, 1573, 45, 51, "Text",ExpressionUUID->"ff1c963e-c27c-4079-9298-18e4ac82e516"],
Cell[408090, 11938, 387, 12, 21, "Text",ExpressionUUID->"60147686-02d1-4d14-a3a5-6b39d710e33d"],
Cell[CellGroupData[{
Cell[408502, 11954, 150, 3, 31, "Input",ExpressionUUID->"95949430-b7f5-4b8b-a879-ea4aa5d70b8e"],
Cell[408655, 11959, 254, 8, 31, "Output",ExpressionUUID->"88d831e6-882a-44a6-b355-116c9fb67fcb"]
}, Open  ]],
Cell[408924, 11970, 395, 12, 23, "Text",ExpressionUUID->"cd73945b-37f9-41b2-b8dd-2bb68d97d1db"],
Cell[409322, 11984, 422, 11, 43, "Text",ExpressionUUID->"874a4b3d-f754-4d28-af34-8fda6661cd9f"],
Cell[CellGroupData[{
Cell[409769, 11999, 227, 6, 31, "Input",ExpressionUUID->"f18f058d-7bba-46f5-9fe7-6bf3ce775c4f"],
Cell[409999, 12007, 156, 4, 31, "Output",ExpressionUUID->"1edf1736-0538-4692-9a0b-f514dceeadfa"]
}, Open  ]],
Cell[410170, 12014, 425, 9, 35, "Text",ExpressionUUID->"2da0fd31-9fa6-49ac-a7e7-71c27703d4ea"],
Cell[410598, 12025, 650, 16, 37, "Text",ExpressionUUID->"ad0e5dc3-ae46-470c-b0ab-a168e5c3f88a"],
Cell[411251, 12043, 675, 21, 23, "Text",ExpressionUUID->"bbcb8f4c-0b52-42cc-b06c-8475e60924ef"],
Cell[CellGroupData[{
Cell[411951, 12068, 148, 3, 31, "Input",ExpressionUUID->"cbeca6ac-99b7-4544-921e-294add492544"],
Cell[412102, 12073, 115, 2, 31, "Output",ExpressionUUID->"600c66d7-6f14-4dfc-bfee-7338b72a4dd0"]
}, Open  ]],
Cell[412232, 12078, 649, 19, 21, "Text",ExpressionUUID->"710e6adc-516a-4d64-bb54-c87c34905674"],
Cell[CellGroupData[{
Cell[412906, 12101, 206, 5, 31, "Input",ExpressionUUID->"b14f37fd-636f-46d1-947d-7889afe08712"],
Cell[413115, 12108, 114, 2, 31, "Output",ExpressionUUID->"6fb4f15d-93e4-4465-8bcd-a00f869c1249"]
}, Open  ]],
Cell[413244, 12113, 1691, 37, 98, "Text",ExpressionUUID->"32baa9bb-7d55-4806-9fb4-6df2eeb36d78"],
Cell[CellGroupData[{
Cell[414960, 12154, 1060, 27, 184, "Input",ExpressionUUID->"85a33824-c778-47dc-b1a3-63d4ec49e645"],
Cell[CellGroupData[{
Cell[416045, 12185, 286, 7, 24, "Print",ExpressionUUID->"ba1efd4c-c6bd-4e58-a2c6-1a151f32b6ec"],
Cell[416334, 12194, 286, 7, 24, "Print",ExpressionUUID->"3da55ff1-f64a-43c0-8e99-20ad2da60ce9"],
Cell[416623, 12203, 286, 7, 24, "Print",ExpressionUUID->"6b336821-3951-4c65-95fd-8bbba071e529"],
Cell[416912, 12212, 286, 7, 24, "Print",ExpressionUUID->"ef58fb74-f449-450b-9747-be2bd3dd07f8"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[417271, 12227, 107, 1, 55, "Section",ExpressionUUID->"5e74e822-2d2f-4581-a8c5-bbae0d2cc9e4",
 CellTags->"Exercises"],
Cell[CellGroupData[{
Cell[417403, 12232, 622, 12, 67, "Item1Exercise",ExpressionUUID->"7b674584-1849-4ae1-800e-89d728e313c5"],
Cell[418028, 12246, 288, 7, 37, "Item1Exercise",ExpressionUUID->"4ddc4a14-81b6-4279-b73c-507c5f062e35"],
Cell[418319, 12255, 239, 5, 20, "Item1Exercise",ExpressionUUID->"cba03203-5f21-452e-9540-9d7a9c5b6ef2"],
Cell[418561, 12262, 580, 15, 33, "Item1Exercise",ExpressionUUID->"a5eb2d77-1ca5-4270-a6b2-006aed9f1fef"],
Cell[419144, 12279, 622, 15, 50, "Item1Exercise",ExpressionUUID->"ef77fa68-e6ee-46e7-8c45-583a3103ba5d"],
Cell[419769, 12296, 596, 10, 46, "Item1Exercise",ExpressionUUID->"0ce75875-d74b-4e90-a4d0-0d7ff6074645"],
Cell[420368, 12308, 715, 17, 46, "Item1Exercise",ExpressionUUID->"bd6c89cb-426f-40da-b8be-7cc029870f1f"],
Cell[421086, 12327, 176, 5, 20, "Item1Exercise",ExpressionUUID->"6147b476-e2fa-457f-be67-2f9abe36d17d"],
Cell[421265, 12334, 401, 16, 45, "ExerciseEquation",ExpressionUUID->"ebeb6377-1f39-43f6-8ba5-55e6fffeb987"],
Cell[421669, 12352, 512, 16, 16, "ExerciseContinuation",ExpressionUUID->"c8729fa2-1664-4b64-b104-bcac8f65a7b9"],
Cell[422184, 12370, 199, 5, 20, "Item1Exercise",ExpressionUUID->"57d20f2f-1913-44a1-84a6-d8f6818e7156"],
Cell[422386, 12377, 424, 18, 44, "ExerciseEquation",ExpressionUUID->"36d8e3a0-b240-4fc9-bbdb-dc9779b868b2"],
Cell[422813, 12397, 516, 16, 16, "ExerciseContinuation",ExpressionUUID->"c9046d3d-5b72-42a0-9b63-27c1e487992d"],
Cell[423332, 12415, 495, 11, 46, "Item1Exercise",ExpressionUUID->"4be34e11-b1dd-46e3-937b-af5931cddb82"],
Cell[423830, 12428, 681, 19, 37, "Item1Exercise",ExpressionUUID->"9733bbeb-f747-49c9-bff2-beee21406b3a"],
Cell[424514, 12449, 201, 5, 20, "Item1Exercise",ExpressionUUID->"2e62b03e-0c7e-46bb-8431-2191e5edd192"],
Cell[424718, 12456, 290, 9, 26, "ExerciseEquation",ExpressionUUID->"ec1c985d-6d82-489c-99ce-c3ddfc9632eb"],
Cell[425011, 12467, 920, 28, 29, "ExerciseContinuation",ExpressionUUID->"742ebfe1-98c5-4d59-8eb9-77d54adec78e"],
Cell[425934, 12497, 353, 5, 46, "Item1Exercise",ExpressionUUID->"6fc5cdf6-d6e5-4207-b8a6-66422ff4d698"],
Cell[426290, 12504, 241, 3, 20, "Item1Exercise",ExpressionUUID->"f48235a9-e6db-4e4f-92c7-7e308781e7b1"],
Cell[426534, 12509, 537, 12, 33, "Item1Exercise",ExpressionUUID->"816242fa-80c7-4291-b2eb-b861c48e2151"],
Cell[427074, 12523, 1187, 32, 46, "Item1Exercise",ExpressionUUID->"2153c736-2a3b-46f5-9c9a-41b4a50c75da"],
Cell[428264, 12557, 171, 3, 20, "Item1Exercise",ExpressionUUID->"c0916bb5-9b81-4dec-b80c-4f378fd5e09d"],
Cell[428438, 12562, 283, 6, 20, "Item1Exercise",ExpressionUUID->"ddcbf28a-1507-4a86-b53e-225a98f0e17c"],
Cell[428724, 12570, 238, 3, 33, "Item1Exercise",ExpressionUUID->"7f30c389-80eb-4d86-808d-fa3f4eb51072"],
Cell[428965, 12575, 854, 21, 33, "Item1Exercise",ExpressionUUID->"c82f79c6-de6c-4df1-9b76-df3cbdbc08b2"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

