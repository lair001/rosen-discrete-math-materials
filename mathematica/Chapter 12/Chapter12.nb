(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    563840,      13620]
NotebookOptionsPosition[    472756,      12121]
NotebookOutlinePosition[    493212,      12534]
CellTagsIndexPosition[    492577,      12511]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Boolean Algebra", "BookChapterTitle",
 CounterAssignments->{{
   "ChapterNumber", 
    12}},ExpressionUUID->"64e0c531-0d74-4d9b-bfe9-9b2716bdaaf6"],

Cell[CellGroupData[{

Cell["Introduction", "Section",ExpressionUUID->"cf85992a-50c9-4d69-804d-35e29b635a95"],

Cell[TextData[{
 "In this chapter, we will use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to model Boolean algebra. In Section 1, we demonstrate the basic functions \
that will be used in this chapter. In Section 2, we will focus on the \
disjunctive normal form of a logical expression. We will see how to use \
Wolfram Language functions for finding a disjunctive normal form expression \
for a Boolean function and for finding a representation for a function \
defined by a table of values. In Section 3, we will see how logical circuits \
can be modeled in the Wolfram Language, including how to go about \
transforming a circuit diagram into an expression. We also provide a function \
that will transform a logical expression into a model of a circuit. In the \
final section of the chapter, we consider simplification of logical \
expressions, and we develop an implementation of the Quine\[Dash]McCluskey \
method."
}], "Text",ExpressionUUID->"d3d4057c-1a4b-4b98-a35c-98384d4f99cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["12.1 Boolean Functions", "Section",
 CellTags->"Section1",ExpressionUUID->"dfc6152a-b1fe-47c4-a31e-869a8fc336ef"],

Cell[TextData[{
 "In this section, we will see how to work with Boolean expressions and how \
to create Boolean functions. We will also use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to verify identities in Boolean algebra and to compute the dual of an \
expression."
}], "Text",ExpressionUUID->"c71f23ce-918d-4e03-9d52-b79b33575e7a"],

Cell[CellGroupData[{

Cell["Preliminaries", "Subsection",
 CellTags->"Section1a",ExpressionUUID->"1f9aa560-6ef1-4148-a49a-79f80442c659"],

Cell[TextData[{
 "In Chapter 1 of this manual, we discussed logical expressions in the \
Wolfram Language. The Boolean values ",
 Cell[BoxData[
  FormBox["true", TraditionalForm]],ExpressionUUID->
  "2159ac9a-270f-4d22-abbe-926315ac6a96"],
 " and ",
 Cell[BoxData[
  FormBox["false", TraditionalForm]],ExpressionUUID->
  "48459f34-3f38-40da-a093-187f87223f0c"],
 " are represented by the symbols ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 ". In the Wolfram Language, these are constant values, like the numbers ",
 StyleBox["2", "Code"],
 " or ",
 StyleBox[ButtonBox["Pi",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Pi"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"f5a695b9-53d0-4acf-8b7f-a7855d1f2032"],

Cell[TextData[{
 "We also saw the logical operators ",
 StyleBox[ButtonBox["And",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/And"], "FunctionLink"],
 " (",
 StyleBox["&&", "Code"],
 "), ",
 StyleBox[ButtonBox["Or",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Or"], "FunctionLink"],
 " (",
 StyleBox["||", "Code"],
 "), and ",
 StyleBox[ButtonBox["Not",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Not"], "FunctionLink"],
 " (",
 StyleBox["!", "Code"],
 ") in Chapter 1. These can be used in functional form or as operators. The \
following two expressions both compute ",
 Cell[BoxData[
  FormBox[
   RowBox[{"T", "\[And]", 
    RowBox[{"\[Not]", 
     RowBox[{"(", 
      RowBox[{"T", "\[Or]", "F"}], ")"}]}]}], TraditionalForm]],
  ExpressionUUID->"dbcc9bcd-facd-4e2e-9186-4f6552851de5"],
 "."
}], "Text",ExpressionUUID->"f4392cf7-b690-41ed-a6e6-de75f0ac5a5f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"True", "&&", 
  RowBox[{"!", 
   RowBox[{"(", 
    RowBox[{"True", "||", "False"}], ")"}]}]}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"22256438-8c28-4269-8480-b5d362e4872f"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[1]=",ExpressionUUID->"a7ca3fee-34c6-4b77-8a14-7e0909afb4b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "[", 
  RowBox[{"True", ",", 
   RowBox[{"Not", "[", 
    RowBox[{"Or", "[", 
     RowBox[{"True", ",", "False"}], "]"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[2]:=",ExpressionUUID->"4d87970d-4157-4668-81da-00936ab9986b"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"7db0df69-3b33-4b1d-b152-d5d87e5be777"]
}, Open  ]],

Cell["\<\
Note that the Wolfram Language respects the usual order of precedence for \
logical operators, namely negation followed by conjunction, then disjunction, \
and finally implication. \
\>", "Text",ExpressionUUID->"e044e2d9-a224-4419-9268-08b7322349c5"],

Cell[TextData[{
 "Other logical operators supported by the Wolfram Language include: the \
exclusive or, ",
 StyleBox[ButtonBox["Xor",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Xor"], "FunctionLink"],
 ", implication, ",
 StyleBox[ButtonBox["Implies",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Implies"], "FunctionLink"],
 ", and the biconditional, ",
 StyleBox[ButtonBox["Equivalent",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equivalent"], "FunctionLink"],
 ". Each logical connective can be entered as a mathematical symbol by using \
an escape sequence, as shown in the table below. "
}], "Text",ExpressionUUID->"fdc270e2-54f0-4c7c-95a8-ea615f803ddd"],

Cell[TextData[Cell[BoxData[GridBox[{
   {"And", "\[EscapeKey]and\[EscapeKey]", "\[And]"},
   {"Or", "\[EscapeKey]or\[EscapeKey]", "\[Or]"},
   {"Not", "\[EscapeKey]not\[EscapeKey]", "\[Not]"},
   {"Xor", "\[EscapeKey]xor\[EscapeKey]", "\[Xor]"},
   {"Implies", 
    StyleBox[
     RowBox[{"\[EscapeKey]", "=", 
      RowBox[{">", "\[EscapeKey]"}]}], "Text",
     AutoSpacing->False], "\[Implies]"},
   {"Equivalent", "\[EscapeKey]equiv\[EscapeKey]", "\[Equivalent]"}
  },
  GridBoxDividers->{
   "Columns" -> {{True}}, "ColumnsIndexed" -> {}, "Rows" -> {{True}}, 
    "RowsIndexed" -> {}}]],
 FontFamily->
  "Times",ExpressionUUID->"d88994cd-e3eb-40e7-a12d-784f498f0ad4"]], "Text",Exp\
ressionUUID->"26474ea6-8051-4b69-add0-411c91b5eb5b"],

Cell[TextData[{
 "In this manual, except for ",
 StyleBox[ButtonBox["And",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/And"], "FunctionLink"],
 " (",
 StyleBox["&&", "Code"],
 "), ",
 StyleBox[ButtonBox["Or",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Or"], "FunctionLink"],
 " (",
 StyleBox["||", "Code"],
 "), and ",
 StyleBox[ButtonBox["Not",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Not"], "FunctionLink"],
 " (",
 StyleBox["!", "Code"],
 ") whose infix forms are simple keyboard characters, we will typically enter \
operators in functional form, rather than using the escape sequences."
}], "Text",ExpressionUUID->"3967f75a-a0e8-4133-9fcf-77f3b48d5069"],

Cell[TextData[{
 "For Boolean algebra, the textbook uses the objects 0 and 1 with operators \
",
 Cell[BoxData[
  FormBox["+", TraditionalForm]],ExpressionUUID->
  "173dc84b-b2e2-4003-ad8e-9fb7f117a8ad"],
 ", ",
 Cell[BoxData[
  FormBox["\[CenterDot]", TraditionalForm]],ExpressionUUID->
  "1367a473-f2d7-4ab1-b5f6-3d71c2cabe68"],
 ", and ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["\[VeryThinSpace]", "_"], TraditionalForm]],ExpressionUUID->
  "22ceab42-556c-45d5-8e36-beb77fb4f534"],
 " instead of their logical counterparts. It is tempting to use the Wolfram \
Language\[CloseCurlyQuote]s bit functions, ",
 StyleBox[ButtonBox["BitAnd",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitAnd"], "FunctionLink"],
 ", ",
 StyleBox[ButtonBox["BitOr",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitOr"], "FunctionLink"],
 ", and ",
 StyleBox[ButtonBox["BitNot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitNot"], "FunctionLink"],
 ", in order to replicate the 0-1 form of Boolean expressions. However, the \
bit functions behave differently than the corresponding Boolean operators \
would\[LongDash]in particular ",
 StyleBox[ButtonBox["BitNot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BitNot"], "FunctionLink"],
 " does not switch between 0 and 1."
}], "Text",ExpressionUUID->"ecc57772-6586-4b94-ac83-4f1d4647b1ec"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BitNot", "[", "0", "]"}]], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"2abefbd8-6ad5-42b3-88be-60a7ae2d0a8c"],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellLabel->"Out[3]=",ExpressionUUID->"d0a8ed1d-a113-453a-aba5-634d63e73a5e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BitNot", "[", "1", "]"}]], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"706bb7ef-dc37-47da-bb9e-8d6ce4445cdf"],

Cell[BoxData[
 RowBox[{"-", "2"}]], "Output",
 CellLabel->"Out[4]=",ExpressionUUID->"d2c4b3ca-10db-41b2-9a9f-70de525ac46b"]
}, Open  ]],

Cell[TextData[{
 "In the remainder of this manual, we will stick to the logical forms of \
Boolean expressions. However, some readers may be interested to know that it \
is possible to create operators to mirror the kinds of Boolean algebra \
expressions used in the text. To do so, we use symbols that the Wolfram \
Language will interpret as operators but which have no built-in definition. \
For example, we could use circle times (\[CircleTimes], entered \
\[EscapeKey]c*\[EscapeKey]) and circle plus (\[CirclePlus], entered \
\[EscapeKey]c+\[EscapeKey]) for the ",
 StyleBox["and",
  FontWeight->"Bold"],
 " and ",
 StyleBox["or",
  FontWeight->"Bold"],
 " operators, and the overbar (",
 Cell[BoxData[
  FormBox[
   OverscriptBox["\[Placeholder]", "_"], TraditionalForm]],ExpressionUUID->
  "2de7631a-1d3e-49eb-8fda-6a33f4cb765f"],
 ", entered by highlighting the expression to be negated and typing \
\[ControlKey]\[ThinSpace]+& followed by the underscore, \[ThinSpace]_) for \
negation. Then, the expression ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"1", "\[CenterDot]", "0"}], "+", 
    OverscriptBox[
     RowBox[{"(", 
      RowBox[{"0", "+", "1"}], ")"}], "_"]}], TraditionalForm]],
  ExpressionUUID->"7ec16fef-15aa-4a31-a71c-8a6bdad44620"],
 " would be entered as shown below."
}], "Text",ExpressionUUID->"8ed9c891-090d-4d1d-97b1-9cbf94ba9b54"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"1", "\[CircleTimes]", "0"}], "\[CirclePlus]", 
  OverscriptBox[
   RowBox[{"0", "\[CirclePlus]", "1"}], "_"]}]], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"e29c2008-4cc0-4408-89dd-28f924ce11d0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"1", "\[CircleTimes]", "0"}], "\[CirclePlus]", 
  OverscriptBox[
   RowBox[{"0", "\[CirclePlus]", "1"}], "_"]}]], "Output",
 CellLabel->"Out[5]=",ExpressionUUID->"644bb86b-a1b3-4bf3-a80a-950cc87d04b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", "%", "]"}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"ef9312c2-a5ce-4c30-a706-1c678532c188"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"CirclePlus", "[", 
    RowBox[{
     RowBox[{"CircleTimes", "[", 
      RowBox[{"1", ",", "0"}], "]"}], ",", 
     RowBox[{"OverBar", "[", 
      RowBox[{"CirclePlus", "[", 
       RowBox[{"0", ",", "1"}], "]"}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[6]//FullForm=",ExpressionUUID->"d82cdf64-992e-4eb2-8cc1-84d377182483"]
}, Open  ]],

Cell[TextData[{
 "To get ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to evaluate such expressions properly, you just need to make definitions \
to the symbols. By setting the ",
 StyleBox[ButtonBox["Flat",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Flat"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Listable",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Listable"], "FunctionLink"],
 " attributes first, the operator will be associative. For example, \
\[CircleTimes] can be defined by setting values for ",
 StyleBox[ButtonBox["CircleTimes",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/CircleTimes"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"404173b5-2640-4737-bc6f-13b1b2a60f28"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"CircleTimes", ",", 
    RowBox[{"{", 
     RowBox[{"Flat", ",", "Listable"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"CircleTimes", "[", 
    RowBox[{"1", ",", "1"}], "]"}], "=", "1"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"CircleTimes", "[", 
    RowBox[{"1", ",", "0"}], "]"}], "=", "0"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"CircleTimes", "[", 
    RowBox[{"0", ",", "1"}], "]"}], "=", "0"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"CircleTimes", "[", 
    RowBox[{"0", ",", "0"}], "]"}], "=", "0"}], ";"}]}], "Input",
 CellLabel->"In[7]:=",ExpressionUUID->"d254ad1c-170c-4342-8457-5326c43668ec"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will now automatically simplify \[CircleTimes], so if we enter the \
previous expression again:"
}], "Text",ExpressionUUID->"c8bc608d-66bd-4fbc-9d6c-a072c7d5123e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"1", "\[CircleTimes]", "0"}], "\[CirclePlus]", 
  OverscriptBox[
   RowBox[{"0", "\[CirclePlus]", "1"}], "_"]}]], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"7d34de73-0d07-4143-95dd-80ae31ca2b01"],

Cell[BoxData[
 RowBox[{"0", "\[CirclePlus]", 
  OverscriptBox[
   RowBox[{"0", "\[CirclePlus]", "1"}], "_"]}]], "Output",
 CellLabel->"Out[12]=",ExpressionUUID->"4fdd246b-9a13-4299-a9ad-bf484de07c7f"]
}, Open  ]],

Cell["\<\
Definitions of the other operations are left to the interested reader. In \
this manual, we will not use this approach, since the logical form of Boolean \
expressions is more naturally supported by the Wolfram Language.\
\>", "Text",ExpressionUUID->"cd6a3e25-0529-4f92-83f3-7f950625476f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Boolean Expressions and Boolean Functions", "Subsection",
 CellTags->"Section1b",ExpressionUUID->"16771740-5dab-44fe-8fa9-493902590f39"],

Cell[TextData[{
 "Consider Example 1 from the textbook, which asks that we compute the value \
of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"1", "\[CenterDot]", "0"}], "+", 
    OverscriptBox[
     RowBox[{"(", 
      RowBox[{"0", "+", "1"}], ")"}], "_"]}], TraditionalForm]],
  ExpressionUUID->"412b1bc6-85b1-4e6d-bc9f-28d9acf3df5d"],
 ". To perform this computation in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", we first translate it into a logical statement. We do this by changing 1 \
into ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 ", 0 into ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 ", the multiplication into ",
 StyleBox[ButtonBox["And",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/And"], "FunctionLink"],
 " (",
 StyleBox["&&", "Code"],
 "), the addition into ",
 StyleBox[ButtonBox["Or",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Or"], "FunctionLink"],
 " (",
 StyleBox["||", "Code"],
 "), and the bar into ",
 StyleBox[ButtonBox["Not",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Not"], "FunctionLink"],
 " (",
 StyleBox["!", "Code"],
 ")."
}], "Text",ExpressionUUID->"e8dd7dfb-8cb1-4b78-8008-11beffee0cef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"True", "&&", "False"}], "||", 
  RowBox[{"!", 
   RowBox[{"(", 
    RowBox[{"False", "||", "True"}], ")"}]}]}]], "Input",
 CellLabel->"In[13]:=",ExpressionUUID->"a27ddf90-4add-4327-bd93-7aa26189f394"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[13]=",ExpressionUUID->"644a2716-2d53-464e-8efe-5eb2fa9cd389"]
}, Open  ]],

Cell["\<\
Of course, you can enter Boolean expressions involving variables, assuming \
the symbols have not previously been assigned values.\
\>", "Text",ExpressionUUID->"239848d9-2f7f-4686-a332-8c4a4dd884aa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Implies", "[", 
  RowBox[{
   RowBox[{"p", "&&", "q"}], ",", "r"}], "]"}]], "Input",
 CellLabel->"In[14]:=",ExpressionUUID->"0978bc39-7c1d-46ef-81c3-daf19fbb1779"],

Cell[BoxData[
 RowBox[{
  RowBox[{"p", "&&", "q"}], "\[Implies]", "r"}]], "Output",
 CellLabel->"Out[14]=",ExpressionUUID->"adf83130-8f02-4c1b-a57a-7a63f9ed560f"]
}, Open  ]],

Cell[TextData[{
 "Moreover, just as with arithmetic expressions, you can evaluate these \
expressions for specific values by applying the ",
 StyleBox[ButtonBox["ReplaceAll",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReplaceAll"], "FunctionLink"],
 " (",
 StyleBox["/.", "Code"],
 ") operator."
}], "Text",ExpressionUUID->"595bd4e4-1e31-4f2b-ac7c-be0350658106"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Implies", "[", 
   RowBox[{
    RowBox[{"p", "&&", "q"}], ",", "r"}], "]"}], "/.", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"p", "\[Rule]", "True"}], ",", 
    RowBox[{"q", "\[Rule]", "True"}], ",", 
    RowBox[{"r", "\[Rule]", "False"}]}], "}"}]}]], "Input",
 CellLabel->"In[15]:=",ExpressionUUID->"75c15e28-0a77-4fb5-ae27-471dd6989c65"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[15]=",ExpressionUUID->"13415161-dada-4408-a1e1-58a151b33304"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Representing Boolean Functions", "Subsubsection",ExpressionUUID->"302c8b9d-53e8-4099-a9d9-eca5e4d2bc0a"],

Cell["\<\
You define a Boolean function in the Wolfram Language in the same way as any \
other function.\
\>", "Text",ExpressionUUID->"369ded92-e884-4045-a362-3131d0c8cc1e"],

Cell[TextData[{
 "Consider, for example, the Boolean function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"x", ",", "y", ",", "z"}], ")"}], "=", 
    RowBox[{
     RowBox[{"x", " ", "y"}], "+", 
     RowBox[{"y", " ", "z"}], "+", 
     RowBox[{"z", " ", "x"}]}]}], TraditionalForm]],ExpressionUUID->
  "f3936a53-68f7-4b55-b344-14965e8c7aea"],
 " (written in the 0-1 notation)."
}], "Text",ExpressionUUID->"e5527c96-47a3-4e02-bf33-39251d86920c"],

Cell["\<\
This can be modeled in the Wolfram Language by the function defined below.\
\>", "Text",ExpressionUUID->"ce6a2130-37cc-4acf-bde7-f530d61c6a29"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"x_", ",", "y_", ",", "z_"}], "]"}], ":=", 
  RowBox[{"Or", "[", 
   RowBox[{
    RowBox[{"And", "[", 
     RowBox[{"x", ",", "y"}], "]"}], ",", 
    RowBox[{"And", "[", 
     RowBox[{"y", ",", "z"}], "]"}], ",", 
    RowBox[{"And", "[", 
     RowBox[{"z", ",", "x"}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[16]:=",ExpressionUUID->"c687c4ff-53e4-49d1-9c12-831dedbf920e"],

Cell[TextData[{
 "You can work with ",
 StyleBox["f", "Code"],
 " in the usual way. The following applies ",
 StyleBox["f", "Code"],
 " to ",
 StyleBox["p", "Code"],
 ", ",
 StyleBox["q", "Code"],
 ", and ",
 StyleBox["r", "Code"],
 "."
}], "Text",ExpressionUUID->"8acf750f-2097-4d6e-85d4-0f4596bc3e52"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"p", ",", "q", ",", "r"}], "]"}]], "Input",
 CellLabel->"In[17]:=",ExpressionUUID->"1074bf5d-6a8b-42d6-bcc8-3b179bc2f1dd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"p", "&&", "q"}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{"q", "&&", "r"}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{"r", "&&", "p"}], ")"}]}]], "Output",
 CellLabel->"Out[17]=",ExpressionUUID->"c720dfbd-f1ac-49ca-8192-2f6f4cb9e9b1"]
}, Open  ]],

Cell[TextData[{
 "When ",
 StyleBox["f", "Code"],
 " is applied to truth values, it is evaluated."
}], "Text",ExpressionUUID->"5c327f9d-150b-4226-bdb2-4e63aae3889c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"True", ",", "False", ",", "True"}], "]"}]], "Input",
 CellLabel->"In[18]:=",ExpressionUUID->"751911dd-3273-40be-8792-1ffdd9c51ce7"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[18]=",ExpressionUUID->"2491d4c3-0f01-461e-8268-a55de8128e81"]
}, Open  ]],

Cell[TextData[{
 "You can also mix truth values and symbols. In this case, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will simplify the expression, given the partial information."
}], "Text",ExpressionUUID->"e7325e42-14e6-46a2-b372-0e95235f67d0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"True", ",", "q", ",", "r"}], "]"}]], "Input",
 CellLabel->"In[19]:=",ExpressionUUID->"e1a01ec8-5113-485c-a507-6d543122453e"],

Cell[BoxData[
 RowBox[{"q", "||", 
  RowBox[{"(", 
   RowBox[{"q", "&&", "r"}], ")"}], "||", "r"}]], "Output",
 CellLabel->"Out[19]=",ExpressionUUID->"5b9a3174-3f99-4b92-92dd-ad6236bdd3d5"]
}, Open  ]],

Cell[TextData[{
 "You may notice that this expression is logically equivalent to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"q", "\[Or]", "r"}], TraditionalForm]],ExpressionUUID->
  "64240f40-5c50-4285-a95f-72df79138098"],
 ". Applying the ",
 StyleBox[ButtonBox["Simplify",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Simplify"], "FunctionLink"],
 " function will cause ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to more fully simplify the output."
}], "Text",ExpressionUUID->"8887c838-435e-4225-abd9-35fd1617826d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"True", ",", "q", ",", "r"}], "]"}], "//", "Simplify"}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"eef13d9a-1264-4681-9ad7-7ac9f98f81e6"],

Cell[BoxData[
 RowBox[{"q", "||", "r"}]], "Output",
 CellLabel->"Out[20]=",ExpressionUUID->"b19d3963-b406-4046-9054-a010aa7f9ca4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Values of Boolean Functions", "Subsubsection",ExpressionUUID->"4046ba34-d4ad-4734-88ba-d5c027a3b0f6"],

Cell[TextData[{
 "Examples 4 and 5 of Section 12.1 illustrate how the values of a Boolean \
function, in the 0-1 format, can be displayed in a table. In the logical \
form, this is equivalent to a truth table for the Boolean function. In \
Chapter 1, we illustrated the use of the ",
 StyleBox[ButtonBox["BooleanTable",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanTable"], "FunctionLink"],
 " function for creating truth tables."
}], "Text",ExpressionUUID->"6fc8f2d8-74df-46a5-88d2-554390428832"],

Cell[TextData[{
 "Recall that ",
 StyleBox[ButtonBox["BooleanTable",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanTable"], "FunctionLink"],
 " accepts two arguments: a Boolean expression and a list of the variables. \
The output is a list of the truth values for the expression obtained by \
substituting every possible combination of truth values into the variables."
}], "Text",ExpressionUUID->"bc5d3153-e308-42bf-ae38-33148d729fa6"],

Cell[TextData[{
 "For example, we will display the table of values for the Boolean function \
",
 StyleBox["f", "Code"],
 " defined above. The first argument to ",
 StyleBox[ButtonBox["BooleanTable",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanTable"], "FunctionLink"],
 " will be a list containing the three variables and the function applied to \
them. Giving the first argument as this list means that the output will \
indicate the values of the individual variables, and not just the result. The \
second argument will be the list of variables. "
}], "Text",ExpressionUUID->"43f106c9-66c5-4723-9414-786275a4ce90"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"BooleanTable", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"p", ",", "q", ",", "r", ",", 
      RowBox[{"f", "[", 
       RowBox[{"p", ",", "q", ",", "r"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"p", ",", "q", ",", "r"}], "}"}]}], "]"}], "//", 
  "TableForm"}]], "Input",
 CellLabel->"In[21]:=",ExpressionUUID->"4f580dff-6871-4e89-b987-446015f188fa"],

Cell[BoxData[
 TagBox[GridBox[{
    {"True", "True", "True", "True"},
    {"True", "True", "False", "True"},
    {"True", "False", "True", "True"},
    {"True", "False", "False", "False"},
    {"False", "True", "True", "True"},
    {"False", "True", "False", "False"},
    {"False", "False", "True", "False"},
    {"False", "False", "False", "False"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[21]//TableForm=",ExpressionUUID->"d298a9f6-62f9-4a36-ac53-\
1f72b3644805"]
}, Open  ]],

Cell[TextData[{
 "If you wish, you can use this function to produce output in the 0-1 form by \
applying the ",
 StyleBox[ButtonBox["Boole",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Boole"], "FunctionLink"],
 " function. ",
 StyleBox[ButtonBox["Boole",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Boole"], "FunctionLink"],
 " is a built-in function that transforms the truth values ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 " into the values 1 and 0. Since it threads over lists, it can be applied to \
the output from ",
 StyleBox[ButtonBox["BooleanTable",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanTable"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"b448adcb-9862-43d2-9d2c-43f3e34a1475"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Boole", "[", 
   RowBox[{"BooleanTable", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"p", ",", "q", ",", "r", ",", 
       RowBox[{"f", "[", 
        RowBox[{"p", ",", "q", ",", "r"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"p", ",", "q", ",", "r"}], "}"}]}], "]"}], "]"}], "//", 
  "TableForm"}]], "Input",
 CellLabel->"In[22]:=",ExpressionUUID->"2dc738fa-6043-47e7-b17f-859a846ef4df"],

Cell[BoxData[
 TagBox[GridBox[{
    {"1", "1", "1", "1"},
    {"1", "1", "0", "1"},
    {"1", "0", "1", "1"},
    {"1", "0", "0", "0"},
    {"0", "1", "1", "1"},
    {"0", "1", "0", "0"},
    {"0", "0", "1", "0"},
    {"0", "0", "0", "0"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[22]//TableForm=",ExpressionUUID->"7e353891-0846-44bb-972f-\
4b582786a379"]
}, Open  ]],

Cell[TextData[{
 "We can further refine the output by using the ",
 StyleBox[ButtonBox["TableHeadings",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TableHeadings"], "FunctionLink"],
 " option for ",
 StyleBox[ButtonBox["TableForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TableForm"], "FunctionLink"],
 ". ",
 StyleBox[ButtonBox["TableHeadings",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TableHeadings"], "FunctionLink"],
 " is assigned to a pair representing the row and column headings, with ",
 StyleBox[ButtonBox["None",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/None"], "FunctionLink"],
 " used when a group of headings is not wanted."
}], "Text",ExpressionUUID->"97565995-41d4-4e19-88b6-28ea8438c79f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{"Boole", "[", 
    RowBox[{"BooleanTable", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"p", ",", "q", ",", "r", ",", 
        RowBox[{"f", "[", 
         RowBox[{"p", ",", "q", ",", "r"}], "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"p", ",", "q", ",", "r"}], "}"}]}], "]"}], "]"}], ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"None", ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<p\>\"", ",", "\"\<q\>\"", ",", "\"\<r\>\"", ",", 
        "\"\<f(p,q,r)\>\""}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellLabel->"In[23]:=",ExpressionUUID->"0fb9bce4-e85b-4ec5-aa78-a547775dc2b1"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox["\<\"p\"\>",
       HoldForm], 
      TagBox["\<\"q\"\>",
       HoldForm], 
      TagBox["\<\"r\"\>",
       HoldForm], 
      TagBox["\<\"f(p,q,r)\"\>",
       HoldForm]},
     {"1", "1", "1", "1"},
     {"1", "1", "0", "1"},
     {"1", "0", "1", "1"},
     {"1", "0", "0", "0"},
     {"0", "1", "1", "1"},
     {"0", "1", "0", "0"},
     {"0", "0", "1", "0"},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {None, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {None, {"p", "q", "r", "f(p,q,r)"}}]]]], "Output",
 CellLabel->
  "Out[23]//TableForm=",ExpressionUUID->"47222da1-b379-43fe-8857-\
16263f7478bd"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Operations on Boolean Functions", "Subsubsection",ExpressionUUID->"3864f17e-545a-4a6c-ac3b-505599eac79e"],

Cell["\<\
As with functions on real numbers, Boolean functions can be combined using \
basic operations. The complement of a Boolean function and the Boolean sum \
and product of functions are defined in the text. \
\>", "Text",ExpressionUUID->"8ddf4214-d150-4a15-ba5d-d9950639b2b0"],

Cell[TextData[{
 "To compute complements, sums, and products of Boolean functions, you must \
define a new function in terms of the original. For example, consider the \
function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"G", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", 
    RowBox[{"x", "\[CenterDot]", "y"}]}], TraditionalForm]],ExpressionUUID->
  "856e4eef-acb8-45d6-909d-4e7270fab934"],
 ". In logical notation, this is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"G", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", 
    RowBox[{"x", "\[And]", "y"}]}], TraditionalForm]],ExpressionUUID->
  "b58d677f-8f29-4aba-84a6-e91e6c161595"],
 "."
}], "Text",ExpressionUUID->"24941214-6fc1-4354-b004-64ebea26e361"],

Cell[BoxData[
 RowBox[{
  RowBox[{"G", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"x", "&&", "y"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[24]:=",ExpressionUUID->"75b96198-6e09-4499-b22a-a0a1a5fe6d03"],

Cell[TextData[{
 "The complement of ",
 StyleBox["G", "Code"],
 ", which we name ",
 StyleBox["notG", "Code"],
 ", is created as follows. The arguments of ",
 StyleBox["notG", "Code"],
 " are the same as ",
 StyleBox["G", "Code"],
 ". The formula that defines ",
 StyleBox["notG", "Code"],
 " is ",
 Cell[BoxData[
  RowBox[{"!", 
   RowBox[{"G", "[", 
    RowBox[{"x", ",", "y"}], "]"}]}]], "myCode",ExpressionUUID->
  "5f6cfb2b-0d94-410c-82cc-0e5fa85eb829"],
 "."
}], "Text",ExpressionUUID->"5b15342d-ac40-4817-838e-4db848b39a47"],

Cell[BoxData[
 RowBox[{
  RowBox[{"notG", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"!", 
   RowBox[{"G", "[", 
    RowBox[{"x", ",", "y"}], "]"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[25]:=",ExpressionUUID->"c33a6ffb-06d1-4643-b117-f023d53e2d48"],

Cell[TextData[{
 "Observe that if we evaluate ",
 StyleBox["notG", "Code"],
 " at a pair of variables, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " returns the expected result."
}], "Text",ExpressionUUID->"82906629-48c0-4046-8a70-888240efe440"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"notG", "[", 
  RowBox[{"x", ",", "y"}], "]"}]], "Input",
 CellLabel->"In[26]:=",ExpressionUUID->"4ed96e00-6092-4a6c-8b2f-98b83e0072d1"],

Cell[BoxData[
 RowBox[{"!", 
  RowBox[{"(", 
   RowBox[{"x", "&&", "y"}], ")"}]}]], "Output",
 CellLabel->"Out[26]=",ExpressionUUID->"6c8ba732-979b-47c7-9861-5e6222e613f7"]
}, Open  ]],

Cell[TextData[{
 "Let us define another function, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"H", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", 
    RowBox[{"x", "\[CenterDot]", 
     OverscriptBox["y", "_"]}]}], TraditionalForm]],ExpressionUUID->
  "78e6006a-a812-4db8-bb24-94312440dfa9"],
 "."
}], "Text",ExpressionUUID->"ce8f14be-16f7-46e1-844a-b559f89563fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"H", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"x", "&&", 
   RowBox[{"!", "y"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[27]:=",ExpressionUUID->"ae113a8c-05cd-47fc-9b0d-25d67199e818"],

Cell[TextData[{
 "To compute the Boolean sum ",
 Cell[BoxData[
  FormBox[
   RowBox[{"G", "+", "H"}], TraditionalForm]],ExpressionUUID->
  "76419308-434c-456b-b670-5cdd772ae782"],
 ", we combine the functions with the ",
 StyleBox[ButtonBox["Or",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Or"], "FunctionLink"],
 " (",
 StyleBox["||", "Code"],
 ") operator. More precisely, we define a function ",
 StyleBox["GpH", "Code"],
 " with the formula ",
 StyleBox["G[x,y]||H[x,y]", "Code"],
 "."
}], "Text",ExpressionUUID->"3e5a3719-ffe1-4e4d-8104-4535a3959ce8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"GpH", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"G", "[", 
    RowBox[{"x", ",", "y"}], "]"}], "||", 
   RowBox[{"H", "[", 
    RowBox[{"x", ",", "y"}], "]"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[28]:=",ExpressionUUID->"6bbd9fe8-e585-4d2e-9bb2-fd8e39c514ff"],

Cell[TextData[{
 "Applying this to a pair of variables and simplifying, we obtain the \
following formula for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"G", "+", "H"}], TraditionalForm]],ExpressionUUID->
  "3e91a7c4-ec9d-46eb-99cb-346bebece591"],
 "."
}], "Text",ExpressionUUID->"117bd060-d38c-49d8-96d0-0f875d6d9eca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"GpH", "[", 
   RowBox[{"x", ",", "y"}], "]"}], "//", "Simplify"}]], "Input",
 CellLabel->"In[29]:=",ExpressionUUID->"274810eb-81c2-416d-971e-93fc65ff7c22"],

Cell[BoxData["x"], "Output",
 CellLabel->"Out[29]=",ExpressionUUID->"12fab103-030c-4de0-bdbc-73f25468747e"]
}, Open  ]],

Cell[TextData[{
 "This result indicates that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"x", "\[CenterDot]", "y"}], "+", 
     RowBox[{"x", "\[CenterDot]", 
      OverscriptBox["y", "_"]}]}], "=", "x"}], TraditionalForm]],
  ExpressionUUID->"39352bce-1740-4f22-9fb6-e253f6de5d7a"],
 ". This can also be verified using the identities in Table 5 of Section 12.1."
}], "Text",ExpressionUUID->"7535f466-cfc9-4392-b169-0c5de6aa550a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Identities of Boolean Algebra", "Subsection",
 CellTags->"Section1c",ExpressionUUID->"d6ea3026-d55f-46be-8abe-02cc2f988041"],

Cell[TextData[{
 "We can check identities, equivalence of Boolean expressions, and equality \
of Boolean functions using the ",
 StyleBox[ButtonBox["Equivalent",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equivalent"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["TautologyQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TautologyQ"], "FunctionLink"],
 " functions."
}], "Text",ExpressionUUID->"dcf75a5b-ab26-42fb-9735-b57afc436e9d"],

Cell[TextData[{
 "We will use the distributive law, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"x", "(", 
     RowBox[{"y", "+", "z"}], ")"}], "=", 
    RowBox[{
     RowBox[{"x", "\[CenterDot]", "y"}], "+", 
     RowBox[{"x", "\[CenterDot]", "z"}]}]}], TraditionalForm]],
  ExpressionUUID->"1d832255-2994-45e1-8c09-0ae9846d99e7"],
 ", as an example. First, we must translate the statement into a logical \
equivalence: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"x", "\[And]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"y", "\[Or]", "z"}], ")"}], "\[Congruent]", 
      RowBox[{"(", 
       RowBox[{"x", "\[And]", "y"}], ")"}]}]}], "\[Or]", 
    RowBox[{"(", 
     RowBox[{"x", "\[And]", "z"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "c72958b2-1e90-4da8-bd16-f2dfbd0ca149"],
 "."
}], "Text",ExpressionUUID->"bf5525c9-67b4-4540-96ea-bbeb0d1e6b9d"],

Cell["\<\
Now, we will assign the expressions on either side of the equivalence to \
symbols. This is not necessary, but it will make later expressions easier to \
read.\
\>", "Text",ExpressionUUID->"212645e2-0f07-42f8-baa2-9f62885df05b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"distributiveL", "=", 
   RowBox[{"x", "&&", 
    RowBox[{"(", 
     RowBox[{"y", "||", "z"}], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"distributiveR", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", "&&", "y"}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{"x", "&&", "z"}], ")"}]}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[30]:=",ExpressionUUID->"00925657-21a6-4d7d-a98c-f3746b16f017"],

Cell[TextData[{
 "To confirm the equivalence of the two Boolean expressions, we combine them \
into a biconditional using the ",
 StyleBox[ButtonBox["Equivalent",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equivalent"], "FunctionLink"],
 " function. We then apply the ",
 StyleBox[ButtonBox["TautologyQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TautologyQ"], "FunctionLink"],
 " function to the biconditional and a list of the Boolean variables \
appearing in the expression."
}], "Text",ExpressionUUID->"431000b8-48f5-4106-86ff-d81e8ab2c188"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TautologyQ", "[", 
  RowBox[{
   RowBox[{"Equivalent", "[", 
    RowBox[{"distributiveL", ",", "distributiveR"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[32]:=",ExpressionUUID->"c744d0bf-a5a2-4fb1-bad5-9a4d01238ded"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[32]=",ExpressionUUID->"7b9ad0e2-31a4-49b9-be00-349cbd21303d"]
}, Open  ]],

Cell["This verifies the given distributive law.", "Text",ExpressionUUID->"b572e2d4-c100-4ba0-ad3f-1393bae4f769"],

Cell[TextData[{
 "In the case that the two expressions are not equivalent, you can use the ",
 StyleBox[ButtonBox["SatisfiabilityInstances",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SatisfiabilityInstances"], "FunctionLink"],
 " function to find a list of assignments of truth values to the variables in \
the expression that demonstrates that the expressions are not equivalent."
}], "Text",ExpressionUUID->"5d5be3e2-c3b1-4781-b2ef-c9fb7f5fa8d4"],

Cell[TextData[{
 "Consider the nonequivalence ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"x", "+", 
     RowBox[{"x", "\[CenterDot]", "y"}]}], "\[NotEqual]", "y"}], 
   TraditionalForm]],ExpressionUUID->"8469a200-b88b-407d-a44c-1c43960acd0d"],
 ". In logical form, this is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "\[Or]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "\[And]", "y"}], ")"}], "\[NotCongruent]", "y"}]}], 
   TraditionalForm]],ExpressionUUID->"fff7d27e-d411-4a24-929e-b215892a7340"],
 ". First, observe that ",
 StyleBox[ButtonBox["TautologyQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TautologyQ"], "FunctionLink"],
 " returns false."
}], "Text",ExpressionUUID->"f2dbad89-87db-443b-87e3-f0c84d45e245"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TautologyQ", "[", 
  RowBox[{
   RowBox[{"Equivalent", "[", 
    RowBox[{
     RowBox[{"x", "||", 
      RowBox[{"(", 
       RowBox[{"x", "&&", "y"}], ")"}]}], ",", "y"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[33]:=",ExpressionUUID->"3473f747-d608-43f3-9398-31f9568c6c84"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[33]=",ExpressionUUID->"84469c93-6a1a-4645-9028-0e21de033498"]
}, Open  ]],

Cell[TextData[{
 "Now, apply ",
 StyleBox[ButtonBox["SatisfiabilityInstances",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SatisfiabilityInstances"], "FunctionLink"],
 " to the negation of the equivalence."
}], "Text",ExpressionUUID->"fba7c839-7ecf-4ce6-ae96-b09154bd0f2e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SatisfiabilityInstances", "[", 
  RowBox[{
   RowBox[{"!", 
    RowBox[{"Equivalent", "[", 
     RowBox[{
      RowBox[{"x", "||", 
       RowBox[{"(", 
        RowBox[{"x", "&&", "y"}], ")"}]}], ",", "y"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[34]:=",ExpressionUUID->"4e1d587f-6359-4c1c-9a3d-04115ef6205d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"True", ",", "False"}], "}"}], "}"}]], "Output",
 CellLabel->"Out[34]=",ExpressionUUID->"68bdf32f-66a0-457d-ab33-10359d50853e"]
}, Open  ]],

Cell[TextData[{
 "This output means that setting ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "bd1cebae-4633-4cd9-b2a4-949b94d0efc1"],
 " equal to true and ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "d01270d9-a850-4a1c-adf0-c885f8d29bd6"],
 " equal to false provides a demonstration, by counterexample, that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "\[Or]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "\[And]", "y"}], ")"}], "\[NotCongruent]", "y"}]}], 
   TraditionalForm]],ExpressionUUID->"a9fbda97-99ec-4b4d-96bc-113fb2d49da1"],
 ". Indeed, substituting ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "true"}], TraditionalForm]],ExpressionUUID->
  "0f35eded-f532-430d-9b5c-1c40c7df9800"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", "false"}], TraditionalForm]],ExpressionUUID->
  "b7af9448-0796-4882-9297-ec9da878bd89"],
 " on the left-hand side produces ",
 Cell[BoxData[
  FormBox[
   RowBox[{"true", "\[Or]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"true", "\[And]", "false"}], ")"}], "\[Congruent]", "true"}], 
    "\[Or]", 
    RowBox[{"false", "\[Congruent]", "true"}]}], TraditionalForm]],
  ExpressionUUID->"e4f3960a-0543-42ec-bcc9-ad13f5ac0188"],
 ". That is not the same as the right-hand side, ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "4e5b6124-6bcc-4535-9f13-b5a17b3e3e53"],
 ", which is assigned false."
}], "Text",ExpressionUUID->"e8a27728-8a5f-4f30-8ef0-7f51c81b96ce"],

Cell[TextData[{
 "Note that the output from ",
 StyleBox[ButtonBox["SatisfiabilityInstances",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SatisfiabilityInstances"], "FunctionLink"],
 " is a list of assignments. Ordinarily, only one truth value assignment will \
be returned. However, if you provide a positive integer as an optional third \
argument, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will attempt to find that number of different assignments. Below, we ask \
for three assignments, but only two exist and so two are returned."
}], "Text",ExpressionUUID->"edba4139-14c2-4e29-9754-7dc4333f7b20"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SatisfiabilityInstances", "[", 
  RowBox[{
   RowBox[{"!", 
    RowBox[{"Equivalent", "[", 
     RowBox[{
      RowBox[{"x", "||", 
       RowBox[{"(", 
        RowBox[{"x", "&&", "y"}], ")"}]}], ",", "y"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}], ",", "3"}], "]"}]], "Input",
 CellLabel->"In[35]:=",ExpressionUUID->"b098f042-8f18-40c4-a9a3-667b0aa36364"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"True", ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", "True"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[35]=",ExpressionUUID->"03bd6b0d-2403-4095-977f-0f6aeb83205c"]
}, Open  ]],

Cell[TextData[{
 "Equality of Boolean functions can also be checked with the ",
 StyleBox[ButtonBox["Equivalent",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equivalent"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["TautologyQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TautologyQ"], "FunctionLink"],
 " functions."
}], "Text",ExpressionUUID->"e5721d29-caea-4e7a-a170-ee5b8a2f0a10"],

Cell["Consider the following Boolean functions.", "Text",ExpressionUUID->"cce13928-b242-4080-ada9-52ec14e1e257"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubscriptBox["f", "1"], "(", 
    RowBox[{"x", ",", "y"}], ")"}], "=", 
   OverscriptBox[
    RowBox[{"(", 
     RowBox[{"x", "\[CenterDot]", "y"}], ")"}], "_"]}], 
  TraditionalForm]], "Equation",ExpressionUUID->"56110427-46fc-41fb-8b85-\
f6e9a6b35d75"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubscriptBox["f", "2"], "(", 
    RowBox[{"x", ",", "y"}], ")"}], "=", 
   RowBox[{
    OverscriptBox["x", "_"], "+", 
    OverscriptBox["y", "_"]}]}], TraditionalForm]], "Equation",ExpressionUUID-\
>"99899b9d-48c3-4f9d-b6d5-6882dde4338d"],

Cell["Define the corresponding functions:", "Text",ExpressionUUID->"82786fda-b4de-46c0-afbe-2c0304c14495"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f1", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
   RowBox[{"!", 
    RowBox[{"(", 
     RowBox[{"x", "&&", "y"}], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"f2", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"!", "x"}], "||", 
    RowBox[{"!", "y"}]}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[36]:=",ExpressionUUID->"4b3ae75a-63be-4250-8c6f-eb0739a85198"],

Cell[TextData[{
 "We can test the assertion that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["f", "1"], "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", 
    RowBox[{
     SubscriptBox["f", "2"], "(", 
     RowBox[{"x", ",", "y"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "69acd3aa-650a-483c-a929-8eb1c7d129ce"],
 " by applying ",
 "the ",
 StyleBox[ButtonBox["Equivalent",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equivalent"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["TautologyQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TautologyQ"], "FunctionLink"],
 " functions as shown below."
}], "Text",ExpressionUUID->"ab605976-7f8c-4ac3-a87a-05e6af10e000"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TautologyQ", "[", 
  RowBox[{
   RowBox[{"Equivalent", "[", 
    RowBox[{
     RowBox[{"f1", "[", 
      RowBox[{"x", ",", "y"}], "]"}], ",", 
     RowBox[{"f2", "[", 
      RowBox[{"x", ",", "y"}], "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[38]:=",ExpressionUUID->"aeb42f7b-b699-422b-b235-d4ba6899aaec"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[38]=",ExpressionUUID->"d2d4e98f-c366-4a9f-adc7-7c1d3f0bff6d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Duality", "Subsection",
 CellTags->"Section1d",ExpressionUUID->"9a2d7a62-0cd7-45f8-8c83-a23ccefad91e"],

Cell[TextData[{
 "We conclude this section by showing how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can be used to compute the dual of an expression. We will define a \
function, ",
 StyleBox["dual", "Code"],
 ", to achieve this."
}], "Text",ExpressionUUID->"ec95d581-36f3-484b-ad09-e2a73951cd3c"],

Cell[TextData[{
 "Recall that the dual of a Boolean expression is the expression obtained by \
interchanging conjunctions and disjunctions and interchanging true and false. \
We can achieve this by applying ",
 StyleBox[ButtonBox["ReplaceAll",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReplaceAll"], "FunctionLink"],
 " (",
 StyleBox["/.", "Code"],
 ") with a list of rules effecting the interchanges."
}], "Text",ExpressionUUID->"e5cc9270-469a-4d78-aad6-1ea41fe5a0ff"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dual", "[", "expr_", "]"}], ":=", 
  RowBox[{"expr", "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"And", "\[Rule]", "Or"}], ",", 
     RowBox[{"Or", "\[Rule]", "And"}], ",", 
     RowBox[{"False", "\[Rule]", "True"}], ",", 
     RowBox[{"True", "\[Rule]", "False"}]}], "}"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[39]:=",ExpressionUUID->"56a615a7-35bf-4f86-bf10-46416e688ae3"],

Cell[TextData[{
 "Note that this will not produce an infinite loop, since ",
 StyleBox[ButtonBox["ReplaceAll",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReplaceAll"], "FunctionLink"],
 " (",
 StyleBox["/.", "Code"],
 ") operates by looking at each part of the expression only once and applies \
the first rule in the list that is valid."
}], "Text",ExpressionUUID->"9079d790-22e6-4a05-82c7-bcda5872e05b"],

Cell[TextData[{
 "For example, consider the expression ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"x", "\[CenterDot]", 
     OverscriptBox["y", "_"]}], "+", 
    RowBox[{"y", "\[CenterDot]", 
     OverscriptBox["z", "_"]}], "+", 
    RowBox[{
     OverscriptBox["x", "_"], "\[CenterDot]", "z"}]}], TraditionalForm]],
  ExpressionUUID->"6a0c9ec6-379d-467c-ad19-d0243e546958"],
 ". As a logical expression, this can be written as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", "\[And]", 
      RowBox[{"\[Not]", "y"}]}], ")"}], "\[Or]", 
    RowBox[{"(", 
     RowBox[{"y", "\[And]", 
      RowBox[{"\[Not]", "z"}]}], ")"}], "\[Or]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"\[Not]", "x"}], "\[And]", "z"}], ")"}]}], TraditionalForm]],
  ExpressionUUID->"36cc3db6-f253-404c-85b2-c0494816407e"],
 ". We calculate the dual by applying the ",
 StyleBox["dual", "Code"],
 " function."
}], "Text",ExpressionUUID->"61d9e80a-4497-4831-93b1-0169fd4de7c7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dual1", "=", 
  RowBox[{"dual", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", "&&", 
      RowBox[{"!", "y"}]}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{"y", "&&", 
      RowBox[{"!", "z"}]}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"!", "x"}], "&&", "z"}], ")"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[40]:=",ExpressionUUID->"9fdb020e-cce9-4ed1-b2dc-e8ccd48a411a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"x", "||", 
    RowBox[{"!", "y"}]}], ")"}], "&&", 
  RowBox[{"(", 
   RowBox[{"y", "||", 
    RowBox[{"!", "z"}]}], ")"}], "&&", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "x"}], "||", "z"}], ")"}]}]], "Output",
 CellLabel->"Out[40]=",ExpressionUUID->"72b634d4-9692-4058-a63c-d45635e58721"]
}, Open  ]],

Cell[TextData[{
 "Similarly, the dual of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["x", "_"], "\[CenterDot]", "y"}], "+", 
    RowBox[{
     OverscriptBox["y", "_"], "\[CenterDot]", "z"}], "+", 
    RowBox[{"x", "\[CenterDot]", 
     OverscriptBox["z", "_"]}]}], TraditionalForm]],ExpressionUUID->
  "97231ab3-35c3-42c1-93cd-98f4f4a07e40"],
 " can be computed by"
}], "Text",ExpressionUUID->"c5e70176-b2ac-46e9-a318-67e6282bd723"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dual2", "=", 
  RowBox[{"dual", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"!", "x"}], "&&", "y"}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"!", "y"}], "&&", "z"}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{"x", "&&", 
      RowBox[{"!", "z"}]}], ")"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[41]:=",ExpressionUUID->"c13c61cd-18fd-4603-91a1-8a272c7fa6c5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "x"}], "||", "y"}], ")"}], "&&", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "y"}], "||", "z"}], ")"}], "&&", 
  RowBox[{"(", 
   RowBox[{"x", "||", 
    RowBox[{"!", "z"}]}], ")"}]}]], "Output",
 CellLabel->"Out[41]=",ExpressionUUID->"527768a8-0edf-46a2-a788-192568b80dbb"]
}, Open  ]],

Cell[TextData[{
 "Exercise 13 of Section 12.1 asks you to prove that the expressions ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"x", "\[CenterDot]", 
     OverscriptBox["y", "_"]}], "+", 
    RowBox[{"y", "\[CenterDot]", 
     OverscriptBox["z", "_"]}], "+", 
    RowBox[{
     OverscriptBox["x", "_"], "\[CenterDot]", "z"}]}], TraditionalForm]],
  ExpressionUUID->"83a4d921-ca0e-4bc6-a68a-a1e93497e023"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["x", "_"], "\[CenterDot]", "y"}], "+", 
    RowBox[{
     OverscriptBox["y", "_"], "\[CenterDot]", "z"}], "+", 
    RowBox[{"x", "\[CenterDot]", 
     OverscriptBox["z", "_"]}]}], TraditionalForm]],ExpressionUUID->
  "2acde980-1c80-41e2-b690-1c17e2d4e6eb"],
 " are equivalent. The duality principle implies that the duals calculated \
above are also equivalent. This can be verified by the ",
 StyleBox[ButtonBox["Equivalent",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Equivalent"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["TautologyQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TautologyQ"], "FunctionLink"],
 " functions."
}], "Text",ExpressionUUID->"520de89d-1f94-4272-942f-f51f148940f3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TautologyQ", "[", 
  RowBox[{
   RowBox[{"Equivalent", "[", 
    RowBox[{"dual1", ",", "dual2"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[42]:=",ExpressionUUID->"2d43c972-4d1a-4cd5-8af2-26ba02f485bd"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[42]=",ExpressionUUID->"44834dd5-aebb-4282-ac54-ab7b2885f9d2"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["12.2 Representing Boolean Functions", "Section",
 CellTags->"Section2",ExpressionUUID->"a346170e-1bea-4d92-beb4-f528b8b375a2"],

Cell["\<\
In this section, we will see how to express Boolean functions in the \
disjunctive normal form (also called sum-of-products expansion). We will \
first look at the Wolfram Language function for turning an expression in \
Boolean algebra into the disjunctive normal form. Then, we will see the \
function for finding an expression based on a table of values.\
\>", "Text",ExpressionUUID->"329d3141-1574-462c-bb59-5e139039ba1d"],

Cell[CellGroupData[{

Cell["Disjunctive Normal Form from an Expression", "Subsection",
 CellTags->"Section2a",ExpressionUUID->"676f49ec-d72f-44b8-9ecd-4af628fadc59"],

Cell[TextData[{
 "Given an expression written using the logical connectives, the ",
 StyleBox[ButtonBox["BooleanConvert",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanConvert"], "FunctionLink"],
 " function can be used to transform the expression into disjunctive normal \
form."
}], "Text",ExpressionUUID->"e4fbdf58-7d86-4238-ba9e-19985af1216d"],

Cell[TextData[{
 "Consider Example 3 from Section 12.2 of the main text: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", "+", "y"}], ")"}], 
    OverscriptBox["z", "_"]}], TraditionalForm]],ExpressionUUID->
  "e69812b0-d217-47d5-8f0a-0fe645eff184"],
 ". In logical form, this is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", "\[Or]", "y"}], ")"}], "\[And]", 
    RowBox[{"\[Not]", "z"}]}], TraditionalForm]],ExpressionUUID->
  "a5ff35e8-b669-4bb0-9cd1-22e3c3158d31"],
 ". We assign this logical expression to a symbol."
}], "Text",ExpressionUUID->"790ba1bf-8fa5-4fd0-9c24-4d104e70f23d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"example3", "=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", "||", "y"}], ")"}], "&&", 
   RowBox[{"!", "z"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[43]:=",ExpressionUUID->"ac74e9ac-8432-4e7c-b1b2-e433f7f0e4e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"x", "||", "y"}], ")"}], "&&", 
  RowBox[{"!", "z"}]}]], "Output",
 CellLabel->"Out[43]=",ExpressionUUID->"ed9559c6-5e3d-4870-aa05-ded4b27f480a"]
}, Open  ]],

Cell[TextData[{
 "The most common way to apply the ",
 StyleBox[ButtonBox["BooleanConvert",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanConvert"], "FunctionLink"],
 " function involves two arguments: the expression to be converted and a \
string representing the desired form of the output. There are several \
possible forms, as detailed by the help page, but the two we will be using \
are ",
 StyleBox["\"DNF\"", "Code"],
 " for disjunctive normal form (or equivalently ",
 StyleBox["\"SOP\"", "Code"],
 " meaning sum of products) and ",
 StyleBox["\"CNF\"", "Code"],
 " for conjunctive normal form (or equivalently ",
 StyleBox["\"POS\"", "Code"],
 " meaning product of sums). Be sure to include the quotation marks."
}], "Text",ExpressionUUID->"76678054-3af9-4947-9be9-cd58853c0840"],

Cell[TextData[{
 "Below, we convert ",
 StyleBox["example3", "Code"],
 " to disjunctive normal form using ",
 StyleBox["\"DNF\"", "Code"],
 " in the second argument."
}], "Text",ExpressionUUID->"9197e854-9bd1-4816-a562-72546ea46963"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanConvert", "[", 
  RowBox[{"example3", ",", "\"\<DNF\>\""}], "]"}]], "Input",
 CellLabel->"In[44]:=",ExpressionUUID->"f0ba53b8-10b4-4a53-8e75-39e0e589bfa2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"x", "&&", 
    RowBox[{"!", "z"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{"y", "&&", 
    RowBox[{"!", "z"}]}], ")"}]}]], "Output",
 CellLabel->"Out[44]=",ExpressionUUID->"90ae0af0-7546-47ad-a243-dcb48f0b62c1"]
}, Open  ]],

Cell[TextData[{
 "Note that this expression is different from the solution to Example 3 in \
the text. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " produces a reduced disjunctive normal form in which terms are not required \
to contain every variable."
}], "Text",ExpressionUUID->"699fb081-bafd-4b2c-96e4-d3a029d6355a"],

Cell[TextData[{
 StyleBox[ButtonBox["BooleanConvert",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanConvert"], "FunctionLink"],
 " can also be applied with a single argument, in which case it defaults to \
disjunctive normal form."
}], "Text",ExpressionUUID->"edefe3a9-5975-4f91-ad97-fc1c44778e57"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanConvert", "[", "example3", "]"}]], "Input",
 CellLabel->"In[45]:=",ExpressionUUID->"01fa9d99-2bc2-47a5-b791-cf77f9311cef"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"x", "&&", 
    RowBox[{"!", "z"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{"y", "&&", 
    RowBox[{"!", "z"}]}], ")"}]}]], "Output",
 CellLabel->"Out[45]=",ExpressionUUID->"32d7c0ec-d9cb-4967-829d-e230866fc6e2"]
}, Open  ]],

Cell[TextData[{
 "To produce conjunctive normal form, ",
 StyleBox["\"CNF\"", "Code"],
 " (or ",
 StyleBox["\"POS\"", "Code"],
 ") is required as the second argument."
}], "Text",ExpressionUUID->"8a399df8-74f0-4a41-992f-1b4bd95d083e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanConvert", "[", 
  RowBox[{"example3", ",", "\"\<CNF\>\""}], "]"}]], "Input",
 CellLabel->"In[46]:=",ExpressionUUID->"e38e03de-0d57-47b3-a39f-84b2d283f64f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"x", "||", "y"}], ")"}], "&&", 
  RowBox[{"!", "z"}]}]], "Output",
 CellLabel->"Out[46]=",ExpressionUUID->"18db7d71-b393-44b9-9ac2-1bb55caf2c36"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Disjunctive Normal Form from a Table", "Subsection",
 CellTags->"Section2b",ExpressionUUID->"e87c4dfe-1f24-4365-8498-be11a0263c92"],

Cell["\<\
Example 1 of Section 12.2 describes how to find an expression for a Boolean \
function represented by a table of values. We will illustrate the built-in \
Wolfram Language functions that accomplish this task.\
\>", "Text",ExpressionUUID->"8c4aa21a-b843-475a-a84f-5e4eed972d77"],

Cell[TextData[{
 "To define a Boolean function using truth values, we use ",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 ". This function has a variety of uses, including the ability to specify a \
Boolean function in terms of the number variables and an index into the list \
of all Boolean functions on that number of variables, and the ability to \
specify a Boolean function in terms of truth value assignments. We will focus \
on the latter."
}], "Text",ExpressionUUID->"02603298-4599-4aeb-a99a-27f979653cdc"],

Cell["\<\
For example, consider the function defined by the following table.\
\>", "Text",ExpressionUUID->"a3b2fa3b-ecf0-4f80-973a-9fe715806819"],

Cell[TextData[Cell[BoxData[GridBox[{
   {"x", "y", "z", 
    RowBox[{"F", 
     RowBox[{"(", 
      RowBox[{"x", ",", "y", ",", "z"}], ")"}]}]},
   {"1", "1", "1", "0"},
   {"1", "1", "0", "1"},
   {"1", "0", "1", "0"},
   {"1", "0", "0", "1"},
   {"0", "1", "1", "0"},
   {"0", "1", "0", "1"},
   {"0", "0", "1", "1"},
   {"0", "0", "0", "0"}
  },
  BaseStyle->{FontFamily -> "Times"},
  GridBoxDividers->{
   "Columns" -> {{True}}, "ColumnsIndexed" -> {}, "Rows" -> {{True}}, 
    "RowsIndexed" -> \
{}}]],ExpressionUUID->"b92f6945-0fab-4b19-9e5b-dfc64426762f"]], "Text",Express\
ionUUID->"4a726e80-6057-46d5-9fcc-12b49c1a0021"],

Cell[TextData[{
 "There are two ways we can represent this function in the Wolfram Language \
that will be usable as input to ",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 ". The first is as rules that assign the truth value assignments to the \
value of the function. For example, the third row in the table would \
correspond to the rule ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "1"}], "}"}], "\[Rule]", "0"}], 
   TraditionalForm]],ExpressionUUID->"64337235-96e7-4bb0-9700-196bf078cb0d"],
 ". Note that ",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 " allows for the use of 0-1 notation for true and false. It will also accept \
the symbols ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 ", as in ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"{", 
     RowBox[{"True", ",", "False", ",", "True"}], "}"}], "\[Rule]", "False"}],
    TraditionalForm]],ExpressionUUID->
  "574f8ecd-f31a-4684-8833-7ce84e0109ba"],
 ". We will use the 0-1 notation as it makes for shorter input sequences."
}], "Text",ExpressionUUID->"0bbc49bd-c8b0-479f-93ea-3bb3d26c1cfd"],

Cell[TextData[{
 "Given a list of such rules, the ",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 " will output a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function object."
}], "Text",ExpressionUUID->"a5594554-fdad-478e-b3bd-b55eb4c13eb5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BFexample", "=", 
  RowBox[{"BooleanFunction", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0"}], "}"}], "\[Rule]", "0"}]}], "}"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[47]:=",ExpressionUUID->"ab2aafa4-e317-4ccb-b5d4-6d866da06967"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["BooleanFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               Hue[0.6, 0.7, 0.5], 
               Opacity[0.7], 
               Arrowheads[0.028937842778793414`], 
               ArrowBox[{{0., 3.}, {1., 2.}}, 0.030239520958083826`], 
               ArrowBox[
                BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQjQo4HGCskPM3jr6ezw7nb/KQrNhliuCL5xwUyznI
Bue3WV5cyOCM4P/dANLACufXXVKvvaSO4HPMyzvL380C588UluUyeMIM55sY
gwCCfwWkvZYJzi+UOQ5EjHC+kCAIIPgbWaM3sEYzwPkLvnjO/+L53x7Gv3cX
BP7C+bIg4wr/wPkxG0AG/Ibz08Dgm/3CTStXMc/Osd+xLNTLhuErlN9jbz71
d8XrpZ/tq0r+8xuJL7B/YBjxqTj8E1R+jf2GmuxtV0U+2vdPDrkrFbnNPuJ1
VpfinvdQ9QfsF1nm2HqlvbU/8mbluXXPjto7PbnVqqrxGqr/jL3p623Jmxlf
2nMl/w+UkLpkX+3HcP3zp2f2x9onfr1lctNexsa8dVLqY3tFl7aL/ufv27+/
ayMeIfHAnu/Mu6LdXx7ZP0tXkuoUu2V/66C35IqDT+19ajLOrq+5Yl/GfOt2
rt8Le/VP0yd4HDtn/2jCzF08s1/ZV++ZKXp28lF7mayurS3L39jLrV8TfOvw
Lnv1/jVnrha/s5/Ha266+NAKaPh8gIcTAPT6yCQ=
                 "]], 
                0.030239520958083826`], 
               ArrowBox[
                BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEf7KEMBxh/+byN3dft/9vD+EkTjT6UZP+zZ4Ty
9W406d5o+guX5yle5MzY9gfO/5UI0vAbwV/iD0II9TZ3Z8mL/YTzDdWtRBJO
fIfz08DgG5y/GKz9C5z/2KIPiD7D3aOsBAKf4PKJ3NsSuLd9gPPtX062ezn5
HZy/ZzcIvIbzLUHGPX4B54N0J3A/g/ONweAxnA8OnvwHcP45/u4pjctvw90j
nnNQLOfgNbi8ZMUuU3udS3D+ivQ3j76ePw3nT7EDOfAwnP/g5bU/Gzx2wvn/
tM508rGugPNhMQcApt6NHA==
                 "]], 0.030239520958083826`], 
               ArrowBox[{{1., 2.}, {2., 1.}}, 0.030239520958083826`], 
               ArrowBox[{{2., 1.}, {1., 0.}}, 0.030239520958083826`], 
               ArrowBox[{{2., 1.}, {2., 0.}}, 0.030239520958083826`]}, {
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[{
                 GrayLevel[0], 
                 Opacity[0.7]}], 
               DiskBox[{0., 3.}, 0.1], 
               DiskBox[{1., 2.}, 0.1], 
               
               RectangleBox[{0.9117647, -0.08823530000000002}, {1.0882353, 
                0.08823530000000002}], 
               DiskBox[{2., 1.}, 0.1], 
               
               RectangleBox[{1.9117647, -0.08823530000000002}, {2.0882353, 
                0.08823530000000002}]}}, FrameTicks -> None, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], Background -> GrayLevel[0.93], 
             PlotRangePadding -> Scaled[0.1], FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Number of variables: \"", "SummaryItemAnnotation"],
                  "\[InvisibleSpace]", 
                 TagBox["3", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               Hue[0.6, 0.7, 0.5], 
               Opacity[0.7], 
               Arrowheads[0.028937842778793414`], 
               ArrowBox[{{0., 3.}, {1., 2.}}, 0.030239520958083826`], 
               ArrowBox[
                BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQjQo4HGCskPM3jr6ezw7nb/KQrNhliuCL5xwUyznI
Bue3WV5cyOCM4P/dANLACufXXVKvvaSO4HPMyzvL380C588UluUyeMIM55sY
gwCCfwWkvZYJzi+UOQ5EjHC+kCAIIPgbWaM3sEYzwPkLvnjO/+L53x7Gv3cX
BP7C+bIg4wr/wPkxG0AG/Ibz08Dgm/3CTStXMc/Osd+xLNTLhuErlN9jbz71
d8XrpZ/tq0r+8xuJL7B/YBjxqTj8E1R+jf2GmuxtV0U+2vdPDrkrFbnNPuJ1
VpfinvdQ9QfsF1nm2HqlvbU/8mbluXXPjto7PbnVqqrxGqr/jL3p623Jmxlf
2nMl/w+UkLpkX+3HcP3zp2f2x9onfr1lctNexsa8dVLqY3tFl7aL/ufv27+/
ayMeIfHAnu/Mu6LdXx7ZP0tXkuoUu2V/66C35IqDT+19ajLOrq+5Yl/GfOt2
rt8Le/VP0yd4HDtn/2jCzF08s1/ZV++ZKXp28lF7mayurS3L39jLrV8TfOvw
Lnv1/jVnrha/s5/Ha266+NAKaPh8gIcTAPT6yCQ=
                 "]], 
                0.030239520958083826`], 
               ArrowBox[
                BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEf7KEMBxh/+byN3dft/9vD+EkTjT6UZP+zZ4Ty
9W406d5o+guX5yle5MzY9gfO/5UI0vAbwV/iD0II9TZ3Z8mL/YTzDdWtRBJO
fIfz08DgG5y/GKz9C5z/2KIPiD7D3aOsBAKf4PKJ3NsSuLd9gPPtX062ezn5
HZy/ZzcIvIbzLUHGPX4B54N0J3A/g/ONweAxnA8OnvwHcP45/u4pjctvw90j
nnNQLOfgNbi8ZMUuU3udS3D+ivQ3j76ePw3nT7EDOfAwnP/g5bU/Gzx2wvn/
tM508rGugPNhMQcApt6NHA==
                 "]], 0.030239520958083826`], 
               ArrowBox[{{1., 2.}, {2., 1.}}, 0.030239520958083826`], 
               ArrowBox[{{2., 1.}, {1., 0.}}, 0.030239520958083826`], 
               ArrowBox[{{2., 1.}, {2., 0.}}, 0.030239520958083826`]}, {
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[{
                 GrayLevel[0], 
                 Opacity[0.7]}], 
               DiskBox[{0., 3.}, 0.1], 
               DiskBox[{1., 2.}, 0.1], 
               
               RectangleBox[{0.9117647, -0.08823530000000002}, {1.0882353, 
                0.08823530000000002}], 
               DiskBox[{2., 1.}, 0.1], 
               
               RectangleBox[{1.9117647, -0.08823530000000002}, {2.0882353, 
                0.08823530000000002}]}}, FrameTicks -> None, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], Background -> GrayLevel[0.93], 
             PlotRangePadding -> Scaled[0.1], FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Number of variables: \"", "SummaryItemAnnotation"],
                  "\[InvisibleSpace]", 
                 TagBox["3", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Satisfiability count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of nodes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  BooleanFunction["BDD" -> {-3, 0, 2, 3, 2, 1, -1, 1, 2, -2}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[47]=",ExpressionUUID->"ab864658-8b0b-4bca-91b4-96ff8fffbc70"]
}, Open  ]],

Cell["\<\
Applying the function to truth values yields the appropriate result.\
\>", "Text",ExpressionUUID->"0f8200f3-ddcf-4fce-b759-cf52593d1aae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BFexample", "[", 
  RowBox[{"True", ",", "False", ",", "True"}], "]"}]], "Input",
 CellLabel->"In[48]:=",ExpressionUUID->"f7442255-248a-4d02-b41b-b503d3629066"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[48]=",ExpressionUUID->"a376b3af-1a06-4922-a623-0fe4e581e64f"]
}, Open  ]],

Cell[TextData[{
 "With a list of variable names as a second argument, ",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 " will output an expression for the Boolean function instead of a ",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 " object."
}], "Text",ExpressionUUID->"94594694-f440-48a0-ba56-9b4ea2a98e73"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanFunction", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0"}], "}"}], "\[Rule]", "0"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[49]:=",ExpressionUUID->"bbd6b12f-4a69-4f84-88ac-4b89fcb351af"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"x", "&&", 
    RowBox[{"!", "z"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "x"}], "&&", 
    RowBox[{"!", "y"}], "&&", "z"}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{"y", "&&", 
    RowBox[{"!", "z"}]}], ")"}]}]], "Output",
 CellLabel->"Out[49]=",ExpressionUUID->"a94e0aab-d2dd-41b0-bc2e-4fb43a3c1e80"]
}, Open  ]],

Cell[TextData[{
 "A third argument can be used to specify the form, for example, ",
 StyleBox["\[OpenCurlyDoubleQuote]DNF\[CloseCurlyDoubleQuote]", "Code"],
 " or ",
 StyleBox["\[OpenCurlyDoubleQuote]CNF\[CloseCurlyDoubleQuote]", "Code"],
 ", for the output."
}], "Text",ExpressionUUID->"c9faccb8-c68c-40e6-8bed-e4fc4991518c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanFunction", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0"}], "}"}], "\[Rule]", "0"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", "\"\<CNF\>\""}], 
  "]"}]], "Input",
 CellLabel->"In[50]:=",ExpressionUUID->"6c1eaac3-696f-44a7-bbae-9241c0b9328b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "x"}], "||", 
    RowBox[{"!", "z"}]}], ")"}], "&&", 
  RowBox[{"(", 
   RowBox[{"x", "||", "y", "||", "z"}], ")"}], "&&", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "y"}], "||", 
    RowBox[{"!", "z"}]}], ")"}]}]], "Output",
 CellLabel->"Out[50]=",ExpressionUUID->"90bd5631-5f84-46c5-86b2-340c44fb5510"]
}, Open  ]],

Cell[TextData[{
 "You can simplify the input to ",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 " slightly by entering only those rules corresponding to one of the possible \
function values, say true, and then use a ",
 StyleBox[ButtonBox["BlankSequence",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BlankSequence"], "FunctionLink"],
 " (",
 StyleBox["__", "Code"],
 ") to assert that all others have the other value. This is illustrated below \
for the same function,"
}], "Text",ExpressionUUID->"83ff722a-568e-4faf-a788-fd998bee9d35"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanFunction", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"{", "__", "}"}], "\[Rule]", "0"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", "\"\<CNF\>\""}], 
  "]"}]], "Input",
 CellLabel->"In[51]:=",ExpressionUUID->"149170e3-d574-418b-a6d2-ea7e4a2eda48"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "x"}], "||", 
    RowBox[{"!", "z"}]}], ")"}], "&&", 
  RowBox[{"(", 
   RowBox[{"x", "||", "y", "||", "z"}], ")"}], "&&", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "y"}], "||", 
    RowBox[{"!", "z"}]}], ")"}]}]], "Output",
 CellLabel->"Out[51]=",ExpressionUUID->"fb0b8439-5e07-4dac-8aee-469d5bb60f8d"]
}, Open  ]],

Cell["Observe that this is identical to the output above.", "Text",ExpressionUUID->"364f3b0b-1d19-4aa3-8976-78d5fad20df0"],

Cell["\<\
You can simplify the input even further by entering only the output values of \
the function, provided you enter them in standard order. The order the values \
must be entered in is the same as displayed in the table above.\
\>", "Text",ExpressionUUID->"b2e54706-daec-4fe7-abbb-36ff8ffe97db"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanFunction", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
     "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[52]:=",ExpressionUUID->"e6621f2e-021b-4dba-b62f-0df432837184"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"x", "&&", 
    RowBox[{"!", "z"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "x"}], "&&", 
    RowBox[{"!", "y"}], "&&", "z"}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{"y", "&&", 
    RowBox[{"!", "z"}]}], ")"}]}]], "Output",
 CellLabel->"Out[52]=",ExpressionUUID->"085823b3-dcd1-4c13-aa6c-8f5273a8398a"]
}, Open  ]],

Cell[TextData[{
 "If you are in doubt of the order in which to enter the function\
\[CloseCurlyQuote]s values, it is identical to the order used by ",
 StyleBox[ButtonBox["BooleanTable",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanTable"], "FunctionLink"],
 ", the function used to display truth tables. Below, we use ",
 StyleBox[ButtonBox["BooleanTable",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanTable"], "FunctionLink"],
 " to display the canonical ordering of truth value assignments for two \
variables."
}], "Text",ExpressionUUID->"13fdaa9e-5fba-4938-8faf-97e591b421cb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"BooleanTable", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}]}], "]"}], "//", "TableForm"}]], "Input",
 CellLabel->"In[53]:=",ExpressionUUID->"a49906df-1384-448f-93f7-ce1cc4d8986d"],

Cell[BoxData[
 TagBox[GridBox[{
    {"True", "True"},
    {"True", "False"},
    {"False", "True"},
    {"False", "False"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[53]//TableForm=",ExpressionUUID->"b0d80b7c-2fe6-4404-aad0-\
b316ee680302"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["12.3 Logic Gates", "Section",
 CellTags->"Section3",ExpressionUUID->"04a4ff0b-1d1b-40f6-aef0-bdbd6c13a09c"],

Cell[TextData[{
 "In this section, we will use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to work with logic gates, particularly circuit diagrams. First, we will \
see how to translate a circuit diagram into a Boolean expression. Then, we \
will do the reverse and see how to transform a logical expression into a \
circuit diagram (modeled as a tree diagram)."
}], "Text",ExpressionUUID->"dd206c70-37ad-443e-a30b-aa8c31323660"],

Cell[CellGroupData[{

Cell["Circuit Diagram to Logical Expression", "Subsection",
 CellTags->"Section3a",ExpressionUUID->"440a59b3-d23d-48d1-8bab-3fa05e871d25"],

Cell["Consider the circuit diagram shown below.", "Text",ExpressionUUID->"7bcba41a-5184-43e4-b233-25b3d8349d1e"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
rRsTE7N06VK28jgpCmMsZrDbtWvXDh06lG643W7/dwj++CliJ5Cd9q+//rpL
ly4BWy9L5U2GFNIa2JYmy0QrUDX9d5v+EntlveuTRTWa3IjsIQr9uTd+83kL
GwDYjXihZz2h06ZN04JEfH0azx555BHJUL169YceeiglJeXUqVPi22C3aWlp
I0aMiMCiYXeInTGWjVk269ix49atW9mjSGsAlqS5NaLSP1w9qqanNUWPal7V
SG56WnPTtObmaQ1NawA2RS/ivEGG3s6dO3fSpEnBenHT5fK3v/0tjWoVKlQo
X7483ahcuXLDhg27du367bff8oPpm1mzZs3o0aOJMKAuWO/H3kwdxzS2bdy4
8aWXXiKBurxtBmkNbEvOJxr9yVa9eu+nHtXcbHSans18aQ1tawARggc21rYW
rJdl2UA10BfnbWsmv/nNbx5//PH58+fn5eURoyc0KSmJvwiuuTelGTNExD0s
t9Bva8uWLU+fPk3sfhqR1sC23FeI6si+mpV1+dyJoxnbduzfcSw7h/45Rh/y
0vAme/Ug54MOCQBbYr1mLpeL3aVXt3Xr1tWqVatnkPTq1evVV19ltz169Kha
tWr58uXLli1bpkwZGtLKlSvHNpgKFSpUr17d6XSmpqaOHj2aJg1cbW8L+27y
qmtsz6RJk2bMmEGKTxq1H6Q1sC1X9gvPtZXKSeXKSJXoB2XZ6vf/b/tfCSkk
RlpTi37fNb1z1HOjFwIACxMnZrLtXbt2/RAk27dvp7dbt27daahfvz7PZjyn
0fBGb2vUqEEfHT58OA0b6enpI0aMsGufXSiYZteyxky258CBA88++yzmhAJY
lTt74ZxpL/foeo8kVdc/Mqv+55OvHyMknxg9oV5ZmHGguEr7zQKARYnTBx5+
+GGW03hUK1++fJ06daKjo1etWsVmgBJUxw22du3anTx5krW82fWUIq2Bbcm5
hDgVrSDv1/2NK0gVpKoNmnU/SchVYhTOVd1CWlMLS/vNAoDVqar60EMP8ZxW
uXLlBg0avPLKK/v372eddLw5CGktWNh4tnHjxi1YsIAU7yS1GaQ1sC25wKM3
orlJ9vGYmpWqSZUejn75mC+tOYjmLCqTq/85hrQGACVgas9hswxq16798MMP
T58+PSsri88DFUepIa0FCwvAGzdu7NOnDzuZWMsAwGr0FjMPkUneL21qlqst
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
AQtp5cuXpxtVqlR56KGHxo0bd/r0aXGA1tKlSydMmMDvls77Dksse2jXGf+/
e/fuXr16JSQkLF++nNVIuXDhQmxsrGnE2vVenL9mv3791qxZQ27Wc2ohbCEt
/xJzAABQ6jTNSbSrxH1y7bx3KtN0UPa+pu0G5fumC+TJRF8/VM8CemUOVuDg
sup2OAhxsJkImr7ClF6H39eipi8H71Fk33IGivvG/3Vg+AB4eluvXj3Wqnb/
/fdHRUXRVMYq5zO8DWTJkiU0whFcVYvjoUsMwCy//fDDD6+88spTTz21atUq
1uDGU27nzp33799PhLmlN0Cf5XA4oqOjc3Jy7JST/TOqnRbVAgCwNq1AkZ2E
OAvO7q1Gw1qZStI9/3n0IpvT6fQQxTdQTV/006NfmQpObEhd9PsWT5wnpFBv
c9Mb0IrmgNJA59KI7DWSm+w2FnaHmxF7QqkKFSrUr1+/R48eu3bt0vzWVCJF
xV2XLVs2ZswYgrQWiJjZ6Dn8+uuvu3bt2qlTp/T0dPYQi3CkqFly7dq13bt3
5ztvgJ3tiRMnsikeWvFpp9bF/wpgZ8x+yzQAAFibSkOVMdfAffGjoX+poQ9w
bzD64/Q8X/cmcahFHaBep/7vy3v/+FDdF8a+e9KYHKovZaDQQ9hnvX6YSlxu
zVu0VCjS2k3wCz3LYCxaXLp0iRRfyFJc1IAlhAULFkyYMMEGOSHoxOFq69ev
79ixI41qW7Zs4UnMvyYbPfk0Hvfu3ZvtuXHzGo12CQkJ2dnZfNBXCL+Yu8tU
7cROXxoAgLV53C6jW5OoueTcpsb3SlLZ6lKNJhkXNa/eu0k8qpHl9Eq3+lF5
iydWkaSVR84cZ8+in+reQo0tOKXfOL16i5yqsdFuSGs3E7BxRhxzJeYBcRlx
tvLU9UZnRTLWm5mamvrEE0/QDLZt2zbxIb5tmqDhcrkqV65805oV33zzze9+
97sjR44QoQXPBqmG/yDZL4ICANjAFVLgMoreEqeTeHKPbF5aS5Luke6pfG/T
o6dJtpfk6W1o9Kp0lpCTuZmbpDp/aJ3493yjYc1dNB656B9exsPYSaOadpMh
QFBiEbWWAc9FARdwF+/SnDZ//vzWrVv36tXrwIED/sf44xk4Pz8/MTFxwIAB
v/76q+n16QaNczQet2rV6uLFi+L+O/3aAAAAbsalrxul+Vb5lN1Ezs7c/XWt
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
B4YSMxA=
    "], {{0, 621}, {826, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->{298.5199999999992, Automatic},
  ImageSizeRaw->{826, 621},
  PlotRange->{{0, 826}, {0, 621}}]], "Text",ExpressionUUID->"7a0c91c6-a0e2-\
4f89-8c28-907484b01e0e"],

Cell["\<\
Our goal in this section is to produce a logical expression for the output of \
this diagram. \
\>", "Text",ExpressionUUID->"421213f0-cf51-426a-a872-a7e28770da1e"],

Cell[TextData[{
 "To do this, we use the fact that the Wolfram Language has functional forms \
for each of the logical expressions. That is, ",
 StyleBox[ButtonBox["Not",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Not"], "FunctionLink"],
 ", ",
 StyleBox[ButtonBox["And",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/And"], "FunctionLink"],
 ", and ",
 StyleBox[ButtonBox["Or",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Or"], "FunctionLink"],
 " can all be used as functions applied to expressions. For example, the \
following forms the disjunction of ",
 StyleBox["x", "Code"],
 ", ",
 StyleBox["y", "Code"],
 ", and ",
 StyleBox["z", "Code"],
 "."
}], "Text",ExpressionUUID->"32eb439e-acf2-452e-8b4d-1668bf2455f0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Or", "[", 
  RowBox[{"x", ",", "y", ",", "z"}], "]"}]], "Input",
 CellLabel->"In[54]:=",ExpressionUUID->"437eddfd-5a96-4218-9729-b9fcbcd40e8e"],

Cell[BoxData[
 RowBox[{"x", "||", "y", "||", "z"}]], "Output",
 CellLabel->"Out[54]=",ExpressionUUID->"25845334-d41e-4b99-9d75-3ec99487eb62"]
}, Open  ]],

Cell["\<\
We give each gate in the diagram a label. The specific names are not \
important. We chose to label the gates using the capital letter G with \
subscripts numbered from the right to the left.\
\>", "Text",ExpressionUUID->"41cf5db4-37d6-4bca-b689-ce59bfea24e9"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
49ZkxNrFO9XKCtPTBtetu2Atnmk3Rlt7ikop8vgt+o/RaHT4xp09ezY0NPT8
+fNSDQkAAAQyWxITYtgdd9wxYsSInTt3tra2Ord84403MjIy3HRjMIruXmRi
bNeVbHGos20r09nFsB7TpkVZu0opapDsZpPdcQhjOTk5o0aNamhoYHYSAAA4
SE5Ovummm371q1/NmTPn5MmTtuedyzubNm0SGtte7a7jK0mqzjqbQqlQJ+d3
fUw3r5rPWJASbe4sskArm1QjjHzdunVTp071yta4AADA1/xZPLl8+fLy5ctr
a2u7bbl79+6FCxd62G1JZpx9PWzyieau1ucbPKtwFafFmBf9p3Y/3ACzYMGC
Dz74QOpRAACAANVt/Dt27FiXd58UXT6pLYqyuwpgQExGsfMBPQ+c2owYU7+B
uUisa1qtNiIiIj8/3/IpM5UAAKBHKioqxowZ4/o1Y0e0MK8CK0yJUoj2iVUq
phZq+5Y9rP1rN0aZurXcbtLDAwOEMP4TJ06MGDHCk/IjAADoz1ymphs3bvz1
r3913V5cEGs5EWOrh5kf3JO0X9S2T/cA0murqyprWj2oKVm3PuvLyXxg/fr1
cXFxlsfOb4FCGQAA6MJ9993X3NzcdZvKnESHSyZTNde9cnanmNKzUBcIOcdg
MEyePNmyYMzuStMAGBsAAAhwoaGhdXV17V3Vc3RZDkv1FQnn24gZnaqrq4cN
G1ZRYdpZjQAGAAA8N3LkyCtXrnTVQqeJsd+wX5Vo2mG+4/4B3hyMfEPMhx9+
OGPGDKlHAQAAZOahhx6yFHMcmEKRea2+VpPuUBFLzq9ut63aspSAvBahupyd
dDxLn9aneZfBYBg/fvyuXbukHggAAJCTRx55pLS0VPyMQ7iqzFkpjmEDFJFH
6708B2f0fJd+c7uzOWkJ8UtzK5oDqoZ25syZESNGXLsW+DfPBAAAgWLSpEka
jaaLBsfXRYmTmFIRd1YnTkB+LUxpvzmyOmZg592RAsyrr7764osvSj0KAAAg
GzNnziwsLHT5kqnwZWwvTp9sl8QiNzZ2vCRq6maCUqtJnh+fkJCQmJi4JGnF
ipVJycmvpaSkrEtLS09NW7c2JTk5OSkpSXh1/uzZKTlllq7EG2joGytLNKVn
NUe++Dh9fswg8UjWnQi46tONGzciIiKKi13seQsAAOBs4sSJLmtitmB1Km2K
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
BaXNTi3bimNM11D+SKFOqXPsA95h+V7ccccdln0nfvazn919992LFi0qKytz
buyuJqbVpHcWw8z9JOdfdW7mZgTdvWL07PttdL2xhvC8rllv/4T/aLXatLS0
0NDQhQsXXrhwoXMMRuPIkSNdJrQujBgxoqqqyttjDCDOy+SoAUIWSGKQOV19
fX3nTQkNLdWVZacLvtqdk52V8WqYdXvQVOc10PyI9qLbb79dPLX44x//+M47
7xw7duzevXsNhs66lrskVrk7yW5mUhF5rMHjb5CXvo0ur+kwGGtTzVuRpRRJ
uWitubk5IyNDyFHPPPNMcbFpZ4+SkpLo6GjPe7B8MVesWJGZmemrUUrNaObw
jFSDAXqEJAb56vw5q9cWf5WVlBAjuvQuLErd8Videk3CUfYDd9xxh6JzO9ZO
t9122//9v/83NTXVcj2gkMSEMOB8eGFKlGWVfsceFnFndX39HeqV8khhmvW/
qM65b4kIg9fr9Vu3bh05cuSMGTM+/vjj5557rqedbNmy5eWXX24nogABhiQG
uem8dZH5F4quIGPlQFvmmp28+2hJQ4v55bbiqZZf7eFpjQ431nHqtKSkZCR6
66c//anCvQEDTCmr3X1N7HR6TOfUpOkSi43XOr7L3ScGrWZ1QlxCQkJiYuLi
FUL3ScnJySkpKWvT0wTCA+FT4cmlS5cmxM1OyXExZ+q+44yOGt0AURIzeDYs
r3FITW1tbVlZWcKoRo8e7bJBF7788st58+YtXrx4XJD685//XFpa2sVXDwhM
JDHImTZr3j0Kyw2jVYkFlTq7Fxs79mx3NTvpQK/XV1VVXYEHvv/+e4cHv/zl
L93FsF/84hfCD5l333233VUSs9x9uzh9sqiaNkAR9nfP1/U1Fqy2m9lUuijN
2Z5Rrijw9L+sH84k2MajVKw7ERBVVeELvmrVqiFDhsyfP18IVD09/JNPPlm2
bNm33357Lki9/fbbb731li++8oBPkcQgX5Y7O5sluJjPajlhrYl1JDHnX+j8
ldkrLLOTYjfffPNdd901derUo0eP2pp1WxOziE4xHeLpt0ZXcyR3X25u7t79
OTt2bstIe8V8tys7kQnJ23Ny8/LyNJVur+s06TyhzrxjsPkOmIOUdlfmSkSI
Ty+++KKQwd58883a2tr8/PzZs2f3tJPU1NR169b5YngBQgj8JDHIEUkMclW5
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
HDxZ1iD1gABI7B//+Mett946s8OMGTNm9pbzsT/72c+6KD395Cc/+fd//3ch
jPlhnZhRW5YWpzYXvDoKX+p5246Wt1hfd7Ee7LujW8KsbRM0NWXJ4baBxxx3
s+StJDctTPQGw6NjExIS4qLspz+jluSVa7351uwrY6+99trf//535+eDD0kM
MqTdED7A7q9pqrUulkEA6GeOHz9eUFBw+PDhI30jdOLwzK9+9St3MUwIab/+
9a+ff/55g8Hg6yRWU5RpCUiWedIBivCM/AuO84XtLgpVbZX5McJBdjU0hSLy
/UYX7bXZS9Sm/pWKqSs2HSm53KLvzEKNlUWro4RelLY+lmSddXfSPjp16lRU
VJSXOw1IJDHIkG5fWlJcTLTtR4EyKp0kBsC7xKUY2+ykbamY8OD2228fOnTo
9u3bW1qsFak+JjHRGQ32G4i1tbfrj76/wC5HxW74psVlN64zkU6z0SFDRtsv
ErOcXZMRqzTV2yK3ldQ7D8/c5kpalF0/KUeq3Z201yyDuf/++y9duuTVjgMR
SQyyY/thpSvLHmj5oahOJYkB8N00lnid2L/8y7/ceeeds2bNKioqcjh132ti
HW/B4FynsuZAczEsIinHfl7R4ME712XG2N6EqTiWWuT4g1Nfla1SWnLm/Nyi
zhnPzuFZOirZYp/pln7Ts3fpqeXLl3/wwQe+6TuAkMQgL3Y/bZqLY0hiAHzA
IdQJSUxIQbfeeuv//M//vPH/t3fvUU1ciR/AE3bbbXu6bbenW9uePdt9dP/Y
c35ie3ZPKxCVoLW1KsSWrdaGVteK9mEb2apEW1ehD6J119BaSLsFFdEq2CXa
gl2ktEgVFLQGV1gNgg9AeRMsAYaE32QmmUySyZCQyQP8fnYPDcmdOzeAM9/c
e+fOli2tra2cW/naJ8bxmExBrVkJYlbsCZOmHSa86IOy56iOCjWdwajq5FUu
k7wa8lbaXqVSn2Kfm3lkrVvpyWZi65e0ijZPm+ON0tLSl19+mX48jmeLIYnB
mGO/M1r/SSQxAAiAP/7xjxKJ5ODBgwTBMS2LIdzoJPPUwL7XHebJhyvy3S0s
O/K690T963R6ElsndVDjnnbVGocrJcPE8yqYtGZm19+d5ThAKVVXefNGPdXd
3T158uRxnMFoSGIwhjFJLAZJDAD8qLPTedIUJzKJrVmzhn4sSH7QZSeIrD1U
dA5LbeQpzbGMvhMDk6Di1NWuL+scZoCFiUVzKrgvjjQ4JTHO2gQRGxt7/vx5
P1UeIpDEYCyyfI4zo08MAALB80wl7LWTzHQs20UCor3n7Tcwctcmp9t5O64H
a9DIfkJXpq7uYhW1dnbpc5c6rlGW7Cb4GbJl9gFTsVi8dFftaN/lCFavXq3V
av1UeYhAEoMxzJ7EMpHEAIARrPEsQZNY08aJInYSk6q47/7j1YSxCrWMqjC2
wsC5XVNGIrNof3RGmZuFVYl6pZieb2addaauFnJhMbasrKwPPvjAT5WHCCQx
GGPMrK9kEqMPUdEZrqviWD8Mmq3Hq3E/0wAAgs7XJMY6StXlJopsi2ZQgUde
ZfQ2enHUf1ojt9QmzegYZh0b2cfVYZOhq7W19aphyHXSmvW/Q42269atQTG2
0qPB29E4fPjwihUr/FV7aPjTn/6EJAZjkMly9GD6xKI/7vYgaFGHHZPLMwAA
fMgDxQ8//NDS0sJ8664kmcSUSqXP+xse7q2OE/2EPRFLnl3ja7UWhmzqoDk3
nZ7WxV6yzPVNmdw8HtbnvuQwXT+tQoi22bEbU1dXN2/ePGHrDzV0nxjORzAm
seaJdVBPmId/bKw5UUIpK6vSNxuGXT8/un7Ow98/APD6+c9/fvfddyckJFRW
VrKfdzp6MH1ioz2qUIHHPFyldpwQL5Kf6GXvdFR1W1hn2mfofBlMbE4JZ09f
k+vcXcwpBIPBIJFI/LiDEIDRSRiLrMchJonFbiePBBePZEdTx4aJ0uho20yH
8LiUsoaeYV/68wHgRsWM3zEru957772PPvro7t27+/r6XMsLM0+MObLZTEz9
lvXySEtV8CIM11qaWgn70rG22hyndtBPuExFs880s8WwiXm1/pohxjRm0qRJ
Q0NDIxcds5DEYIxyWE8sQbVLnUj999BV21SK/q4Le5Ktd7rdqK1FxxcAjBp7
jX3SHXfc8eCDD65fv/7iRYfV5QVJYk1FSscOMR+7sLzm/mhJVO1SsNoVfUBv
CMCn3KlTp3Z3d/t9N8GDJAZjkZmdxMItH87EYvHGovPsAjRddiL98S0xt456
ku/jJNIaAHBySmK0m2+++b777nv22WfLysroYj6PTpKMexPtu6A+a67UE7ba
AnuIIoydjfrztbqTx8oOa7PVCVJ7s2KWfXiW++pL4cXExFy7di0w+woK1ySG
kxGMBVSgYvXhJ+ae5rxTyPCwgVmqcJ+ebzZDb2/v2wAAXO666y57OmLdBJx+
cNtttz3wwAN9fX0+94mZho069tAkuYv/U5awSwh0hjZxVOVSdZUqXMRJnHyy
iTmc+jRaOiIyk8yaNau8vHzj+PXTn/50cHCQ/ZaRxGDMYJJYeOpl96V6TmZa
1yp83t091CyMRuN+AAAuEyZM4M4kItFNN91E5rSnnnqKPJmyk9joTqYGncZW
sXWFVdWRNs745cup2sNtu89X5Ofna7XagoKCwkNf7d6qpJKZNZ5NWqquafX7
9C3yxzhz5syTJ0/uHb9qagS5MBYgCEz9J1+gb6FG3UCNm+WIU59sO6bl1vfT
mwaqjQAwHnCOTv7iF7/4/e9/n5aWxixw4XufWNOhjbYBQNpcvqW6zG6+dVoh
jH7sJhkyt540cVxY7vJEX0P2svAw+wob4ZlHmt23TxhSqdTdLdcBIPCoW9Da
chTVJ2Y5Xkm38a6xb8yzzbsQaE0eABjPXEMLO4mJxeIJEyZMnTq1oKDAaXqP
7zP2T6Q7rF8hFiWeNbrtwXIbrpyfMDFXSnJtwPvJlH1HJOtjQ54inNVCUXLe
Wa6dCiYqKqq3t3fkcgAQMMw/ePvKriPc7UiX/QJ90JBpTvq9eQAw7pBJjAxg
t9566wMPPLB8+fIffviBs5hWq/UxiVnWwBezJorFZfEf3BzCmEGXpkhUKBRK
pTI5JTUlJUWlUqnV6q2aTI1GszVdTX5LPkm+unJZorpIb3abwRxWfHXtXhsm
zi4TOSy0YbmLpX8QBPHwww/7qXIA8JXxBw/vAF6jWWj9+JaQ5clq/AAAbL/6
1a9+85vfpKent7e38xTzvU+sJlPuMAJqW7baE92VaXQ+Ymc56lGYyFWKZWH8
0U0NJzep2jrPsbp3rphNPMvyj1pHR4dUKhWkKgAQluX4wSSx6I9HSGKZtquR
vDmsAcANjskpFy9eJAiCv8ywH5KYTF058jZMS4wtldQdRg6XFBVo87I1qXGT
HNISeRiMVaj2FZUc+a5M18Retd/5jbjfh/W/A/V5VIVhTOZTahtdS5qHfR22
PH369IIFC3yqAgD8h54nRn76G7FPjD64iS0zyjqw3D4A+IfvSeyMJoGdneLU
1fzlnefsO6aps5nPs2ubqCji3Nb9RDTmkUsHF7XahsNA6kv2i9MFXIShqKjo
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
4OF5nxhbd3d3enp6ZGSkUqm8cOEC+yWEMWBDEgMAAOAxuiRGu379+ieffDJl
ypSVK1fW1tYK2zAYH5DEAAAAePiSxGhGozEnJ0cqlS5fvvzUqVNCNQzGByQx
AAAAHr4nMRpBEHl5eTNnzly0aNGxY8d8rxDGByQxAAAAHkIlMZrJZDp48ODc
uXMXLFhQWlrqWgCzyG40SGIAAAA8hE1ijOLi4meeeSYuLq6wsBDp60aGJAYA
AMDDT0mMVl5enpCQ8NRTT33xxRcEQfhpLxDKkMQAAAB4+COJOXWCnThxYunS
pdOnT9+9e/fAwICw+4IQhyQGAADAQ/Ak5hTDmG/PnDmzYsWKqVOnZmVl9fX1
CbhHCGVIYgAAADz8OjrpSq/Xr169WiKRbNu2raenJ2D7hWBBEgMAAOAR4CRG
u3z58vr16yMiIrZs2dLe3h7gvUMgIYkBAADwCEoSo129evW9994j89g777zT
0tISlDaAvyGJAQAA8AhiEqN1dHSQZ+rIyMi33nrr4sWLQWwJ+AOSGAAAAI+g
JzGawWDIzMyUSCSrVq06d+6c06tYkWzsQhIDAADgESJJjNbX15eVlRUdHb1i
xQqdThfs5oAAkMQAAAB4BCWJ8fdxDQwM7NmzZ/r06S+99NKJEydGLA+hDEkM
AACAR7D6xEYMV0NDQ//+97+feuopuVx+5MiRwLQKBIckBgAAwCOkRiddkYGt
qKhIJpPFx8cXFxcHuzngNSQxAAAAHj4lMfMwd8eWu+dtr1JMjs+aXAuyffvt
twsXLpwzZ45Wqx0aGnJbN8YxQwySGAAAAI/RJjFLcKJjDzv8jBSDRohbI6qo
qPjrX/86c+bMvXv3ut7CEjEsBCGJAQAA8BBsdNIxBPUZDV1dXR1dnV0dnZ09
fc7FnBJTX0en0d7NNWKgOn369CuvvCKVSnfs2GE0GkdoF+JZUCGJAQAA8BBw
nljPNX1JXrZyWcKkcJGz8GiFKruqodt1K6KhKFokmqiqoL7zotOsrq4uKSlJ
IpFoNJre3l5B3gIIDkkMAACAhydJjOpUsmcks9nW0WTtbSL0ZXmKONf45UhM
/k8Up8xu6GfV3PadLCyMfFGu0VE1O3dgjdij1dDQsHbt2qioKLVa3dXV5dmb
hsBBEgMAAODheZ+Y2TUXmYebqvYvC/+JY+SKVqRtP1xd29Ta2WckyAhHDPU1
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
OXTo0Lx58+Lj47/++uvi4uI33njD2xq2b9++efNmf7QtRJBJbOvWrcFuBQDA
OMc6EdrvJ2hdtJMpw3G6NNEnUc7zaHNzcxF4r7CwkH5w1113uSYxuovs1ltv
veeee2JjY4fdJzGmb9Mq9jMvLnQ16Da9kahQKJTKdcrUd8j6VSqVWq3eqskk
kQ/Ib1NTU5VKpSJxqbpIz/6ToP5UyC/d9IJjTtcMiGy3IKcj2r5av0x39yTa
sct8++23zz333KRJk1avXu3tvg4cOEBuVVZWph37CgoKXJ9JS0tDnxgAQIBQ
0/W325KYt4uxO53+Tp069TdKUlLS38B7t912m1N0YS+Wf8stt5DfDlNJbOPG
ja6/DuckJs1gXVwxQr9WT0UaZwhkCbM/TKlgb2v7I7BEerFTSXsfnVgUl1LR
ZAyRlVH1ej2ZpsiGzZ8/f9jLyxm+/vrrVatWbdu2jcyla8ej119/vbMT00EB
AALGkGEdnBTJ0qvYL9jnXXNtFhIn1PGFc3Ty5ptvvu+++8jAUF5eThfj7hMz
s5IYlYdkaufZ6XyMrUcPF5eUlBwuKSrQ5mdrUuMmiRwvxBTFKlT7ikrLyspq
mnq5qrAuwu8iXK5QleiaWCWFH9r2PEoxN6zMysoqKCggPzV4WD+zi5ycHJVK
NcqGAgAAuKjWyOhTJnuemJMQ6coY35yS2J133vnb3/5248aNly5dYhdzvduR
wx26beix5lH92ixJqVZD1xZG9cuFha88xN6jKzPduSrN6CFjnaGz1aK9tcNA
2Atw7MV/XNtZVVWVmJgYExOTm5s7MDBAPtPS0iKRSLz9237ttde++uorwRoa
MvBvHAAgWHTZCdaTtzzXyHN+5DpO4+gtICaJ3XvvvZMnTyYTF+fCYu7midXm
JrKTmCxT59XeHX+VRFFyDHtsVHWsk6sYG9UnFp3RwVm5V03xAWfzvv/++xde
eOHJJ5/cv38/fftIxtNPP33y5EnP6yd/IxEREeN+8A7/rgEA/M5sP9gOXsyz
DWo5rXtgK2srWbt7oUia0e14jxt3hcFb5K/g/vvvf/HFF48fP85TzF0SM+pz
HUYFl+Z5ueII+3faksJc7CgKE4tkZR0j/lqpJEb1iQ3z3gHcFMCR7cOHD//l
L3+Ji4srLCzk/MssKiqip4p56P3333/vvfeEayAAANyg7GclahF9rcJ63uWb
tG+6kCwSh6vKuOtBBvMB/aM7evRoS0vLiD9Gd0nMPHhmmcPcLst6EayXPW2G
RWtJNDvUSdWcPV2OqNHJmEynks5LYgTkb8RkMn355ZexsbFkyvrmG8s90Dnv
XjRMrTP2wgsvLF261JNqv/rqq+jo6LY2AdbLHSvwjxoAwL+Yo2xrSbi1W0x2
pJP72NtYoBCLxbvq+wPWOuDEkcRsv7ESJdOTZbloMbfOpVfM7NG5talIae0m
pQYoY1Quk/85erx6smQiUez2QTKTNeq02WrlykSaUpVZVH2JcN7CLwiCyM/P
nzlz5osvvvj99997sonRaLz99ttHXEGrtLT0d7/7nbu7JgEAAPioqURlO4kn
VdvHKK0jVka91nKOVxT04aLJYHNOYqxfCNGoZfeKTVQUeZJ/zM7fGLItN7Bk
FqMIS6NuccW1jhy1vpyZXqOevnYyfK3yeWsUDI+WyxdG2xoUFq0sa/JjjO/v
78/JyYmJiVm+fPmpU6e82ra7u/u555577bXXLl686Prq9evXU1NTyZqvXr0q
UGMBAAA4XK36zNYzFp1ZVNVpJM+wRGebXptumQoersinFy/AgEVwOSYxpwl7
RJG9W0xEd4vZr6/0ZIDSEufy7OuAWb7MLe/ypF3WVSzITSYtVevsK10QVXnJ
TDddZmWrZ+/SC2RS+vTTT6dMmbJy5cqzZ896sonr3zBBELt27Zo6der8+fMz
MjL27dt34MABstrExMTJkydv2rSpvb1d8JYDAMANztbLQZ/NqcXSDfrcFMcF
Qi0n14lbtd5diAf+4zo66TDrr7cyTiy294yFK88NuZ3LZ+vOYmv9p8wewvgn
iTmmGfpuR2GJWRxrodTmKmxhLPxQsxfrV3DeTJzR09Pz0UcfSSSS5OTk+vp6
z6t1Z3Bw8Pjx42SdGzZsWLt2bXp6enFxscHAfSdNAAAA39hPiA7Tqslv+joa
6+tO1+hOV1fpzje6u2kOOseCwt2MfUZndabDQvfSjTWdvB1iTI4znk+Ls84N
Y5awsE8SM7PLuiIqctWZBTqnAvQfiWm4yX4xZmKeL3PG6Arb29s3b948efJk
MjJdvnzZtYCA8HcOAAABwL+iPjUjKHCNAR4jJjHSteosy+IT1jxGfp2oKqh2
WpvMMWAYz5ZkR1ujUnT2gWypLTepjvh0qSCzj4pNUmbEM7e+f9Txprm5OTU1
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
AAAAAAAAAAAAAAAAAAAAAAAAAGPC/wOaDnZS
    "], {{0, 623}, {814, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->{296.1199999999993, Automatic},
  ImageSizeRaw->{814, 623},
  PlotRange->{{0, 814}, {0, 623}}]], "Text",ExpressionUUID->"9e172e56-8ea3-\
416c-8e4c-411d6ee7d48e"],

Cell[TextData[{
 "Interpret the labels as names for both the gates themselves and for their \
outputs. Note that ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "1"], TraditionalForm]],ExpressionUUID->
  "c1e4fb3b-cd4d-464d-a12d-795d38cba576"],
 " is the name for both the output of the final gate and also names the \
output of the circuit. The input of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "1"], TraditionalForm]],ExpressionUUID->
  "847ec23b-a2fd-462b-9693-6911b601cdff"],
 " is the outputs from gates ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "2"], TraditionalForm]],ExpressionUUID->
  "9ccc67e4-472f-4f69-b379-5e94fd7e2641"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "3"], TraditionalForm]],ExpressionUUID->
  "bd3f2270-e328-4daf-85f7-68eb34c751d6"],
 ". That is to say, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["G", "1"], "=", 
    RowBox[{
     SubscriptBox["G", "2"], "OR", " ", 
     SubscriptBox["G", "3"]}]}], TraditionalForm]],ExpressionUUID->
  "f24ef53b-6022-4210-9ef9-89bf24d63249"],
 ".We can write that in the Wolfram Language as shown below."
}], "Text",ExpressionUUID->"cf90a1bd-e56c-4a49-b7b0-1ac891b84e5f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"G1", "=", 
  RowBox[{"Or", "[", 
   RowBox[{"G2", ",", "G3"}], "]"}]}]], "Input",
 CellLabel->"In[55]:=",ExpressionUUID->"78c58928-1fd0-43ef-9c48-750fc7887be0"],

Cell[BoxData[
 RowBox[{"G2", "||", "G3"}]], "Output",
 CellLabel->"Out[55]=",ExpressionUUID->"3398626d-f03e-49bf-8406-b256a7ebb8e3"]
}, Open  ]],

Cell[TextData[{
 "For each gate, do the same. Note that the order in which the gates are \
specified is irrelevant. The gate ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "2"], TraditionalForm]],ExpressionUUID->
  "a9a2896b-c564-4aea-8b45-3316cd280d1b"],
 " is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", " ", "AND", " ", "b"}], TraditionalForm]],ExpressionUUID->
  "bb9ca3a8-d56c-4ea9-990a-a4054f5a656b"],
 "."
}], "Text",ExpressionUUID->"93eb1dba-6123-4141-b4d1-58c196285ac4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"G2", "=", 
  RowBox[{"And", "[", 
   RowBox[{"a", ",", "b"}], "]"}]}]], "Input",
 CellLabel->"In[56]:=",ExpressionUUID->"161de3e5-e869-492e-b8ca-d8f285570ad7"],

Cell[BoxData[
 RowBox[{"a", "&&", "b"}]], "Output",
 CellLabel->"Out[56]=",ExpressionUUID->"c775af6f-4696-434b-8f24-7637fd4f7d38"]
}, Open  ]],

Cell[TextData[{
 "The output of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "3"], TraditionalForm]],ExpressionUUID->
  "573c07d5-e8c3-43f6-9201-f1fb4cda940b"],
 " is the conjunction of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "4"], TraditionalForm]],ExpressionUUID->
  "9daaecbc-51b5-4246-af3b-d7da5d440d3a"],
 ", ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "af08f131-b97e-42ae-a08d-bc3b5931a2cf"],
 ", and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "5"], TraditionalForm]],ExpressionUUID->
  "bc0cefc6-0dad-46a1-a1c0-e126137a0a14"],
 "."
}], "Text",ExpressionUUID->"afb5681a-0d54-433e-a2fb-1ecead8c639f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"G3", "=", 
  RowBox[{"And", "[", 
   RowBox[{"G4", ",", "b", ",", "G5"}], "]"}]}]], "Input",
 CellLabel->"In[57]:=",ExpressionUUID->"0a255b36-8f43-4c42-af38-abf2cdd049d1"],

Cell[BoxData[
 RowBox[{"G4", "&&", "b", "&&", "G5"}]], "Output",
 CellLabel->"Out[57]=",ExpressionUUID->"a907a47f-21e1-4fbf-84c5-cd77559f0c20"]
}, Open  ]],

Cell[TextData[{
 "Gates ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "4"], TraditionalForm]],ExpressionUUID->
  "bed8c279-1360-4584-b61a-05db5c947ea7"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "5"], TraditionalForm]],ExpressionUUID->
  "df439c36-092c-47fc-b2a4-9b69ff11925d"],
 " are inversions on ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "a825712c-658a-48d5-a175-ab2cddef3f01"],
 " and ",
 Cell[BoxData[
  FormBox["c", TraditionalForm]],ExpressionUUID->
  "208fc791-dc57-4280-9db1-a19dfe18bab6"],
 ", respectively."
}], "Text",ExpressionUUID->"aa607728-2b25-402c-a0b2-a7e969e73565"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"G4", "=", 
  RowBox[{"Not", "[", "a", "]"}]}]], "Input",
 CellLabel->"In[58]:=",ExpressionUUID->"d179396e-8966-40f9-a605-99d005ae1afd"],

Cell[BoxData[
 RowBox[{"!", "a"}]], "Output",
 CellLabel->"Out[58]=",ExpressionUUID->"335096a9-1cea-465f-859d-279473cad744"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"G5", "=", 
  RowBox[{"Not", "[", "c", "]"}]}]], "Input",
 CellLabel->"In[59]:=",ExpressionUUID->"3325702c-5c56-450f-8939-ff9ffc771ebb"],

Cell[BoxData[
 RowBox[{"!", "c"}]], "Output",
 CellLabel->"Out[59]=",ExpressionUUID->"c5121b66-9a49-457e-9b14-5075bdf0a4ca"]
}, Open  ]],

Cell[TextData[{
 "Once all of the gates have been specified, inspect the value for the final \
gate, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "1"], TraditionalForm]],ExpressionUUID->
  "30994aa7-28b8-47f1-8b25-eccf508a215b"],
 "."
}], "Text",ExpressionUUID->"93d1d5bf-9848-4187-ae7c-4244d75b1a11"],

Cell[CellGroupData[{

Cell[BoxData["G1"], "Input",
 CellLabel->"In[60]:=",ExpressionUUID->"a2458acf-965e-457a-86f5-770a5e929b66"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"a", "&&", "b"}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "a"}], "&&", "b", "&&", 
    RowBox[{"!", "c"}]}], ")"}]}]], "Output",
 CellLabel->"Out[60]=",ExpressionUUID->"833e7407-813a-404c-a7be-0b9d70de97f9"]
}, Open  ]],

Cell[TextData[{
 "This tells us that the circuit\[CloseCurlyQuote]s result is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"a", "\[And]", "b"}], ")"}], "\[Or]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"\[Not]", "a"}], "\[And]", "b", "\[And]", 
      RowBox[{"\[Not]", "c"}]}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "906aa56a-8462-4ade-b44f-280a1bf2b350"],
 ". In 0-1 form, this is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"ab", "+", 
    RowBox[{
     OverscriptBox["a", "_"], "b", 
     OverscriptBox["c", "_"]}]}], TraditionalForm]],ExpressionUUID->
  "fbc9367a-ad47-4dd2-bc9c-78dac50c1099"],
 "."
}], "Text",ExpressionUUID->"d8e4191c-86f7-43db-8c79-ec328ff908ba"],

Cell[TextData[{
 "The reason this works is that when we define the output of a gate in terms \
of unassigned names, such as ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "2"], TraditionalForm]],ExpressionUUID->
  "5042a019-e37f-4586-b5b6-374a9c4aed7e"],
 ", ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " accepts the definition. When ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "2"], TraditionalForm]],ExpressionUUID->
  "cc96e9f1-a668-4ae7-a2b1-19db7536f842"],
 " is later assigned its own value and then the expression for ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "1"], TraditionalForm]],ExpressionUUID->
  "e05a9daa-ada8-41db-aecd-34a97fcfa5f9"],
 " is evaluated, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " resolves all assigned names into their definitions so that the expression \
for ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "1"], TraditionalForm]],ExpressionUUID->
  "077790ea-3d6a-4660-af2b-341226ee589d"],
 " is in terms of unassigned names (a, b, and c) only."
}], "Text",ExpressionUUID->"fc15c7f1-2c59-4d7c-bc62-0c1ec670860b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Logical Expression to Circuit Diagram", "Subsection",
 CellTags->"Section3b",ExpressionUUID->"3f6e1f66-b8db-4ad7-ac51-7299fedb605e"],

Cell[TextData[{
 "We have just seen how to use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to transform a circuit diagram into a logical expression for the result of \
the circuit. Now, we consider the reverse. Given a logical expression, such \
as that for ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "1"], TraditionalForm]],ExpressionUUID->
  "54c5f90a-9605-445c-aad0-6b4ce2ba33b6"],
 ", we will transform the expression into a circuit diagram."
}], "Text",ExpressionUUID->"a7c1954d-2d29-49e5-8a4a-7a0b0c8400b2"],

Cell[TextData[{
 "We will model a circuit diagram as an ordered rooted tree. While circuit \
diagrams are not necessarily ordered, making the tree ordered will allow for \
the possibility of including Boolean functions as ",
 StyleBox["subcircuits",
  IgnoreSpellCheck->True],
 "."
}], "Text",ExpressionUUID->"ddcac48d-2a55-4199-8004-1e243eb99b0f"],

Cell["\<\
Vertices in the tree will correspond to gates in the circuit. One of the \
vertices is distinguished as the root, which will correspond to the final \
gate, whose output is the output of the circuit. Each vertex has a number of \
children vertices. The edge between a vertex and its child corresponds to the \
input to the gate. Each vertex other than the root has a parent, and the edge \
from the vertex to the parent corresponds to the output from the gate.\
\>", "Text",ExpressionUUID->"775199ff-aa74-4d6e-86e4-18a6a546abcf"],

Cell["\<\
The assumption that a circuit can be modeled as a tree requires that the \
circuit satisfy the following properties. First, the circuit has only one \
output. Second, each gate has only one output. Third, there are no branches \
(e.g., an input cannot be used as input to more than one gate). Given that \
our goal is to begin with a logical expression and create a corresponding \
abstract circuit, these restrictions are of little importance. If we were \
actually building physical circuits, there would be efficiency concerns.\
\>", "Text",ExpressionUUID->"925072e9-7a6e-4896-99c3-028f36601df0"],

Cell[TextData[{
 "Recall that in Chapter 11, we wrote the function ",
 StyleBox["expressionTree", "Code"],
 " for converting an algebraic expression in terms of the arithmetic \
operators into a tree representation. We will make use of the functions from \
Chapter 11 here, and have included them in the package for this chapter. If \
you place the file Chapter12.wl from the website in the same directory as \
this notebook is stored, then executing the following expression will load \
the needed functions from Chapter 11, as well as those defined in this \
chapter.."
}], "Text",ExpressionUUID->"acc622cd-2b0b-423a-b2c7-ffe60590c353"],

Cell[BoxData[
 RowBox[{"<<", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], "<>", "\"\<Chapter12.wl\>\""}], 
   ")"}]}]], "Input",
 CellLabel->"In[61]:=",ExpressionUUID->"9d43456a-28da-4089-a064-25b215c4135e"],

Cell[TextData[{
 "Apply the ",
 StyleBox["expressionTree", "Code"],
 " function from Chapter 11 to the logical expression we obtained from the \
circuit diagram above."
}], "Text",ExpressionUUID->"3cafa7d3-afa5-482f-a454-faa0cc44c246"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expressionTree", "[", "G1", "]"}]], "Input",
 CellLabel->"In[62]:=",ExpressionUUID->"c3a78819-cd6e-4e42-a703-f69822a38434"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "newRI$2250", "newRI$2221", "v$2218", "v$2230", "v$2202", "newRI$2209", 
       "v$2226", "newRI$2240", "v$2205", "newRI$2233"}, {{{6, 5}, {6, 9}, {2, 
       3}, {10, 4}, {8, 2}, {8, 7}, {8, 10}, {1, 6}, {1, 8}}, Null}, {
      GraphLayout -> {"LayeredEmbedding", "RootVertex" -> "newRI$2250"}, 
       Properties -> {
        "v$2202" -> {"order" -> 1}, "newRI$2250" -> {"order" -> 0}, 
         "v$2218" -> {"order" -> 1}, "newRI$2221" -> {"order" -> 1}, 
         "v$2230" -> {"order" -> 1}, "newRI$2233" -> {"order" -> 3}, 
         "newRI$2240" -> {"order" -> 2}, "newRI$2209" -> {"order" -> 1}, 
         "v$2205" -> {"order" -> 2}, "v$2226" -> {"order" -> 2}}, 
       VertexLabels -> {
        "newRI$2233" -> Placed[Not, After], "v$2202" -> 
         Placed[$CellContext`a, Below], "newRI$2240" -> Placed[And, After], 
         "v$2230" -> Placed[$CellContext`c, Below], "v$2205" -> 
         Placed[$CellContext`b, Below], "v$2218" -> 
         Placed[$CellContext`a, Below], "newRI$2209" -> Placed[And, After], 
         "newRI$2221" -> Placed[Not, After], "v$2226" -> 
         Placed[$CellContext`b, Below], "newRI$2250" -> 
         Placed[Or, After]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{1.3728129459672884`, 2.3533936216582085`}, {
         0.3922322702763681, 1.5689290811054724`}}, {{1.3728129459672884`, 
         2.3533936216582085`}, {2.3533936216582085`, 1.5689290811054724`}}, {{
         1.5689290811054724`, 0.7844645405527362}, {1.5689290811054724`, 
         0.}}, {{0.3922322702763681, 1.5689290811054724`}, {0., 
         0.7844645405527362}}, {{0.3922322702763681, 1.5689290811054724`}, {
         0.7844645405527362, 0.7844645405527362}}, {{2.3533936216582085`, 
         1.5689290811054724`}, {1.5689290811054724`, 0.7844645405527362}}, {{
         2.3533936216582085`, 1.5689290811054724`}, {2.3533936216582085`, 
         0.7844645405527362}}, {{2.3533936216582085`, 1.5689290811054724`}, {
         3.1378581622109447`, 0.7844645405527362}}, {{3.1378581622109447`, 
         0.7844645405527362}, {3.1378581622109447`, 0.}}}, 
         0.03122004706699677]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{1.3728129459672884, 2.3533936216582085}, 
          0.03122004706699677], 
         InsetBox["Or", 
          Offset[{2, 0}, {1.4040329930342852, 2.3533936216582085}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.5689290811054724, 0.7844645405527362}, 
          0.03122004706699677], 
         InsetBox["Not", 
          Offset[{2, 0}, {1.6001491281724691, 0.7844645405527362}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.5689290811054724, 0.}, 0.03122004706699677], 
         InsetBox["a", 
          Offset[{0, -2}, {1.5689290811054724, -0.03122004706699677}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{3.1378581622109447, 0.}, 0.03122004706699677], 
         InsetBox["c", 
          Offset[{0, -2}, {3.1378581622109447, -0.03122004706699677}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0., 0.7844645405527362}, 0.03122004706699677], 
         InsetBox["a", Offset[{0, -2}, {0., 0.7532444934857394}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.3922322702763681, 1.5689290811054724}, 
          0.03122004706699677], 
         InsetBox["And", 
          Offset[{2, 0}, {0.42345231734336486, 1.5689290811054724}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.3533936216582085, 0.7844645405527362}, 
          0.03122004706699677], 
         InsetBox["b", 
          Offset[{0, -2}, {2.3533936216582085, 0.7532444934857394}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.3533936216582085, 1.5689290811054724}, 
          0.03122004706699677], 
         InsetBox["And", 
          Offset[{2, 0}, {2.3846136687252053, 1.5689290811054724}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.7844645405527362, 0.7844645405527362}, 
          0.03122004706699677], 
         InsetBox["b", 
          Offset[{0, -2}, {0.7844645405527362, 0.7532444934857394}], 
          ImageScaled[{0.5, 1}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{3.1378581622109447, 0.7844645405527362}, 
          0.03122004706699677], 
         InsetBox["Not", 
          Offset[{2, 0}, {3.1690782092779415, 0.7844645405527362}], 
          ImageScaled[{0, 0.5}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellLabel->"Out[62]=",ExpressionUUID->"34c19577-50ba-43c1-9e9c-593a8f70dcb4"]
}, Open  ]],

Cell["\<\
Observe that the original circuit diagram and the tree have the same \
structure. After reversing the arrows, rotating by 90\[Degree], and \
exchanging the symbols with the functions labeling the internal nodes, the \
two are identical.\
\>", "Text",ExpressionUUID->"2a278c98-bcc6-4e61-944e-f7f66c25226a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["12.4 Minimization of Circuits", "Section",
 CellTags->"Section4",ExpressionUUID->"6943476a-18a5-47c3-8a64-6111362bb3f7"],

Cell[TextData[{
 "In this section, we will discuss the use of the Wolfram Language ",
 StyleBox[ButtonBox["BooleanMinimize",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanMinimize"], "FunctionLink"],
 " function for minimizing circuits, and we will provide an implementation of \
the Quine\[Dash]McCluskey method."
}], "Text",ExpressionUUID->"4767896c-1af2-49ce-bb28-ccbe53d1e307"],

Cell[CellGroupData[{

Cell[TextData[{
 "The ",
 StyleBox["BooleanMinimize", "Code"],
 " Function"
}], "Subsection",
 CellTags->"Section4a",ExpressionUUID->"280bd962-3d03-4c1f-aa62-f56b695edebf"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["BooleanMinimize",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanMinimize"], "FunctionLink"],
 " function, applied to a Boolean expression, finds a minimal representation \
of the expression in disjunctive normal form."
}], "Text",ExpressionUUID->"946215cf-4611-44d2-86d2-459894795f6e"],

Cell[TextData[{
 "For example, we apply ",
 StyleBox[ButtonBox["BooleanMinimize",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanMinimize"], "FunctionLink"],
 " to the expression we obtained for the output of the circuit diagram at the \
beginning of Section 12.3 of this manual."
}], "Text",ExpressionUUID->"aae11534-b58d-4699-a41e-f81e1657db2c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanMinimize", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"a", "&&", "b"}], ")"}], "||", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"!", "a"}], "&&", "b", "&&", 
     RowBox[{"!", "c"}]}], ")"}]}], "]"}]], "Input",
 CellLabel->"In[63]:=",ExpressionUUID->"8ec004dd-10be-4da7-9502-f968f2e006bc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"a", "&&", "b"}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{"b", "&&", 
    RowBox[{"!", "c"}]}], ")"}]}]], "Output",
 CellLabel->"Out[63]=",ExpressionUUID->"c06d3a2e-2ce7-4333-9c13-2bf1a80ba14a"]
}, Open  ]],

Cell[TextData[{
 "The result indicates that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Not]", "a"}], TraditionalForm]],ExpressionUUID->
  "05441abe-cbc3-49e0-bdef-a8a464bc05e4"],
 " can be removed as an input to the second AND gate."
}], "Text",ExpressionUUID->"1732c210-727f-4294-b7e8-d407c01812f5"],

Cell[TextData[{
 "The result of ",
 StyleBox[ButtonBox["BooleanMinimize",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanMinimize"], "FunctionLink"],
 " is guaranteed to be of minimal length among all possible disjunctive \
normal form representations of the input, however, such a minimal expression \
is not unique. Note that if you do not care that the expression be in \
disjunctive normal form, the ",
 StyleBox[ButtonBox["Simplify",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Simplify"], "FunctionLink"],
 " function will produce a shorter expression."
}], "Text",ExpressionUUID->"3afbcc90-8de8-4e68-ba8d-511140c645f6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"a", "&&", "b"}], ")"}], "||", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"!", "a"}], "&&", "b", "&&", 
     RowBox[{"!", "c"}]}], ")"}]}], "]"}]], "Input",
 CellLabel->"In[64]:=",ExpressionUUID->"1ec74621-8779-4730-a6d3-2c54abb678ad"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"a", "||", 
    RowBox[{"!", "c"}]}], ")"}], "&&", "b"}]], "Output",
 CellLabel->"Out[64]=",ExpressionUUID->"9b4343c1-3ced-4ada-b9f9-b85925f3407e"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["BooleanMinimize",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanMinimize"], "FunctionLink"],
 " function can also accept, as a second argument, all the same forms as ",
 StyleBox[ButtonBox["BooleanConvert",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanConvert"], "FunctionLink"],
 " in order to produce minimal expressions of different forms. For example, \
to find a minimal conjunctive normal form expression, you enter the following:"
}], "Text",ExpressionUUID->"dc753f73-b970-4022-97f4-44f3e354d79d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanMinimize", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"a", "&&", "b"}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"!", "a"}], "&&", "b", "&&", 
      RowBox[{"!", "c"}]}], ")"}]}], ",", "\"\<CNF\>\""}], "]"}]], "Input",
 CellLabel->"In[65]:=",ExpressionUUID->"a2da54e4-ea4a-48ae-853a-530a8e9123c0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"a", "||", 
    RowBox[{"!", "c"}]}], ")"}], "&&", "b"}]], "Output",
 CellLabel->"Out[65]=",ExpressionUUID->"f92bdfee-8378-4c0a-838a-1e14bf1e9a38"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Don\[CloseCurlyQuote]t Care conditions", "Subsection",
 CellTags->"Section4b",ExpressionUUID->"159f9b2b-6ef5-41a9-a8b2-2093610be177"],

Cell[TextData[{
 "Informally, a set of don\[CloseCurlyQuote]t care conditions for a Boolean \
function ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]],ExpressionUUID->
  "e8d1c7d2-baf1-42de-b0f3-f49bea529959"],
 " is a set of points in the domain of ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]],ExpressionUUID->
  "f8ba9b2b-97f0-4cdd-9f8e-1b245e671cfc"],
 " whose images do not concern us."
}], "Text",ExpressionUUID->"0ad2bdf0-4be5-437d-ad1f-31936cedef9c"],

Cell[TextData[{
 "If ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]],ExpressionUUID->
  "eba060e2-a304-4dd0-b8a8-08e27644fc49"],
 " is a function on ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "a6bb2cb9-13db-43a3-aa42-6abd5f6cdfa2"],
 " variables, then its domain is ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"{", 
     RowBox[{"true", ",", "false"}], "}"}], "n"], TraditionalForm]],
  ExpressionUUID->"abc264d3-414b-41b7-96f4-a3b2cdc4f0a9"],
 ". Let ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "ebe2cff4-6a66-4adb-a2ef-73e49b36605d"],
 " be the subset of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"{", 
     RowBox[{"true", ",", "false"}], "}"}], "n"], TraditionalForm]],
  ExpressionUUID->"05e9676b-3711-48a1-a266-d766d81fec78"],
 " for which the value of ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]],ExpressionUUID->
  "3f0f0e43-d5f7-44ff-8360-10d98d733a4e"],
 " is specified. If we think of ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]],ExpressionUUID->
  "88c91507-85d5-4846-9ded-cc116e9d282b"],
 " as fully defined on this subset ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "1bfc86a0-4652-48ff-9059-16118b00e428"],
 ", then we are interested in the family of all extensions of ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]],ExpressionUUID->
  "0590ff34-b064-4f1a-8efd-cca4a1b37f85"],
 " to all of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"{", 
     RowBox[{"true", ",", "false"}], "}"}], "n"], TraditionalForm]],
  ExpressionUUID->"45e19b48-daed-48ea-b382-ca2cc6d6f46d"],
 ". In other words, the set of all ",
 Cell[BoxData[
  FormBox["G", TraditionalForm]],ExpressionUUID->
  "845ef977-e64d-4829-893f-7e2f503f54b3"],
 " defined on ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"{", 
     RowBox[{"true", ",", "false"}], "}"}], "n"], TraditionalForm]],
  ExpressionUUID->"5ace39de-fc66-49d6-9db0-8ef7e0057d95"],
 " that agree with ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]],ExpressionUUID->
  "5cfa7683-778f-455e-abd4-d40b2374846f"],
 " on ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "c3ad5885-e264-472b-89fd-8522b7d10752"],
 ". The goal is to choose the simplest such ",
 Cell[BoxData[
  FormBox["G", TraditionalForm]],ExpressionUUID->
  "f924f3b4-5e92-4631-b710-d3f4cec1c3da"],
 ". That is, the ",
 Cell[BoxData[
  FormBox["G", TraditionalForm]],ExpressionUUID->
  "8ba8d2e0-0325-4f3f-98a8-84496a5d3ae1"],
 " that has the smallest sum of products expansion."
}], "Text",ExpressionUUID->"b0bbabb7-3859-45ca-8de0-27742d17899c"],

Cell[TextData[{
 "We should pause to consider the size of this problem. If there are ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "a58d778c-4bb2-4336-ad80-1c6e94e2d901"],
 " don\[CloseCurlyQuote]t care points, then there are ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "d"], TraditionalForm]],ExpressionUUID->
  "a6621ae3-7ac6-466f-ae2f-66715b50bb10"],
 " possible extensions ",
 Cell[BoxData[
  FormBox["G", TraditionalForm]],ExpressionUUID->
  "236601fd-4d57-4d27-9ee3-c2f081a88e47"],
 ". Considering every possible extension can become rather time consuming."
}], "Text",ExpressionUUID->"44f10bff-8362-4818-9be4-44487a89bd77"],

Cell[TextData[{
 "Consider the Boolean function ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]],ExpressionUUID->
  "5241b392-2676-4f9a-adb9-f62da5819551"],
 " defined by the following table of values, in which \
\[OpenCurlyDoubleQuote]d\[CloseCurlyDoubleQuote] in the final column \
indicates a don\[CloseCurlyQuote]t care condition."
}], "Text",ExpressionUUID->"69d6a4e5-4305-4dd5-8c2f-6484f5bb7713"],

Cell[TextData[Cell[BoxData[GridBox[{
   {Cell["x",ExpressionUUID->"fde7595a-bcd8-4148-91cd-e8b528a9e909"], Cell[
    "y",ExpressionUUID->"67e7349e-83bc-4b98-a6ed-8b42d5d2d3dd"], Cell[
    "z",ExpressionUUID->"746e4e19-f638-420f-85a6-e82e8d1b624b"], Cell[
    "F(x,y,z)",ExpressionUUID->"b8b0ad20-de21-4377-994c-0ff85e53c2fa"]},
   {"true", "true", "true", "true"},
   {"true", "true", "false", "false"},
   {"true", "false", "true", "false"},
   {"true", "false", "false", "true"},
   {"false", "true", "true", "d"},
   {"false", "true", "false", "d"},
   {"false", "false", "true", "false"},
   {"false", "false", "false", "true"}
  },
  BaseStyle->{FontFamily -> "Times"},
  GridBoxDividers->{
   "Columns" -> {{True}}, "ColumnsIndexed" -> {}, "Rows" -> {{True}}, 
    "RowsIndexed" -> \
{}}]],ExpressionUUID->"9370946c-1ce7-4026-b98c-45018aa0a6ff"]], "Text",Express\
ionUUID->"cab9baa1-a1c5-46cb-a3e2-96ddbbaee57d"],

Cell[TextData[{
 "The points that must evaluate to true are: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"false", ",", "false", ",", "false"}], ")"}], ",", 
     RowBox[{"(", 
      RowBox[{"true", ",", "false", ",", "false"}], ")"}], ",", 
     RowBox[{"(", 
      RowBox[{"true", ",", "true", ",", "true"}], ")"}]}], "}"}], 
   TraditionalForm]],ExpressionUUID->"03675cb4-c1e3-4ff2-93a7-1a35d60309c4"],
 " and the don\[CloseCurlyQuote]t care conditions are ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"false", ",", "true", ",", "false"}], ")"}], ",", 
     RowBox[{"(", 
      RowBox[{"false", ",", "true", ",", "true"}], ")"}]}], "}"}], 
   TraditionalForm]],ExpressionUUID->"7c4166bf-d70e-4b20-aa46-5c4e482daa31"],
 "."
}], "Text",ExpressionUUID->"9ab04982-dd7d-4ced-a02a-c38f1ef385c3"],

Cell[TextData[{
 "In Section 12.2, we showed how to use ",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 " to define a Boolean function in terms of a table. We also saw above that \
you can specify a default output by using a ",
 StyleBox[ButtonBox["BlankSequence",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BlankSequence"], "FunctionLink"],
 " (",
 StyleBox["__", "Code"],
 "). For example, the following returns the Boolean expression that is true \
on ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"true", ",", "false", ",", "true", ",", "false"}], ")"}], 
   TraditionalForm]],ExpressionUUID->"0bb55e68-324e-4811-af1d-6688d035d352"],
 " and false otherwise."
}], "Text",ExpressionUUID->"70fd9810-f42b-494a-abf2-57e36fb07b7d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanFunction", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "True", ",", "False"}], "}"}], 
      "\[Rule]", "True"}], ",", 
     RowBox[{
      RowBox[{"{", "__", "}"}], "\[Rule]", "False"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z", ",", "w"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[66]:=",ExpressionUUID->"2fcf3ab9-1a70-45d1-b697-f5261a274c85"],

Cell[BoxData[
 RowBox[{
  RowBox[{"!", "w"}], "&&", "x", "&&", 
  RowBox[{"!", "y"}], "&&", "z"}]], "Output",
 CellLabel->"Out[66]=",ExpressionUUID->"d5073593-6928-46af-9813-b593cd17275d"]
}, Open  ]],

Cell[TextData[{
 "We can specify a don\[CloseCurlyQuote]t care condition within a call to ",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 " by identifying a don\[CloseCurlyQuote]t care condition, for example, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"false", ",", "true", ",", "false"}], ")"}], TraditionalForm]],
  ExpressionUUID->"b5f4b8ff-8fad-4c00-afa8-e19fc3d66658"],
 ", with a ",
 StyleBox[ButtonBox["Blank",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Blank"], "FunctionLink"],
 " (",
 StyleBox["_", "Code"],
 ") as the result. "
}], "Text",ExpressionUUID->"f46d7e9a-6dcb-4932-b8a1-6a557d13ab51"],

Cell["\<\
Therefore, we can determine a Boolean function defined by the table above as \
follows. \
\>", "Text",ExpressionUUID->"941e016c-d137-4851-83f4-02b6ec8819d1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanFunction", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "True", ",", "True"}], "}"}], "\[Rule]", "True"}],
      ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "True", ",", "False"}], "}"}], "\[Rule]", 
      "False"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "True"}], "}"}], "\[Rule]", 
      "False"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False"}], "}"}], "\[Rule]", 
      "True"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "True"}], "}"}], "\[Rule]", "_"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "False"}], "}"}], "\[Rule]", "_"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True"}], "}"}], "\[Rule]", 
      "False"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False"}], "}"}], "\[Rule]", 
      "True"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[67]:=",ExpressionUUID->"b07c5cc4-d9a1-460b-983b-b356e354824b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"x", "&&", "y", "&&", "z"}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "x"}], "&&", 
    RowBox[{"!", "z"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "y"}], "&&", 
    RowBox[{"!", "z"}]}], ")"}]}]], "Output",
 CellLabel->"Out[67]=",ExpressionUUID->"9950fac6-6523-4c5c-b890-303b4b7c4f80"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Quine\[Dash]McCluskey", "Subsection",
 CellTags->"Section4c",ExpressionUUID->"80597f1e-8c3e-43ad-8375-029518333648"],

Cell["\<\
We conclude with an implementation of the Quine\[Dash]McCluskey method. This \
method is fairly involved and it will take considerable effort to implement \
it correctly, but understanding this algorithm is worthwhile.\
\>", "Text",ExpressionUUID->"c2513377-2aca-4e4e-8b56-73647c698720"],

Cell["\<\
It will be helpful to have an example that we can use to illustrate the \
method as we build the function. The expression we use for the example is \
\>", "Text",ExpressionUUID->"edcb42e3-9a01-4a7c-98b7-3f9775072838"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"w", " ", "x", " ", 
    OverscriptBox["y", "_"], " ", 
    OverscriptBox["z", "_"]}], "+", 
   RowBox[{"w", " ", 
    OverscriptBox["x", "_"], " ", "y", " ", "z"}], "+", 
   RowBox[{"w", " ", 
    OverscriptBox["x", "_"], " ", "y", " ", 
    OverscriptBox["z", "_"]}], "+", 
   RowBox[{"w", " ", 
    OverscriptBox["x", "_"], " ", 
    OverscriptBox["y", "_"], " ", 
    OverscriptBox["z", "_"]}], "+", 
   RowBox[{
    OverscriptBox["w", "_"], " ", "x", " ", "y", " ", "z"}], "+", 
   RowBox[{
    OverscriptBox["w", "_"], " ", "x", " ", 
    OverscriptBox["y", "_"], " ", "z"}], "+", 
   RowBox[{
    OverscriptBox["w", "_"], " ", "x", " ", 
    OverscriptBox["y", "_"], " ", 
    OverscriptBox["z", "_"]}], "+", 
   RowBox[{
    OverscriptBox["w", "_"], " ", 
    OverscriptBox["x", "_"], " ", "y", " ", "z"}], "+", 
   RowBox[{
    OverscriptBox["w", "_"], " ", 
    OverscriptBox["x", "_"], " ", 
    OverscriptBox["y", "_"], " ", "z"}], "+", 
   RowBox[{
    OverscriptBox["w", "_"], " ", 
    OverscriptBox["x", "_"], " ", 
    OverscriptBox["y", "_"], " ", 
    OverscriptBox["z", "_"]}]}], TraditionalForm]], "Equation",ExpressionUUID-\
>"af050212-19da-433f-8790-ceb030070811"],

Cell[TextData[{
 "We assign this to the symbol ",
 StyleBox["F", "Code"],
 "."
}], "Text",ExpressionUUID->"45db7ffd-ad79-4526-acb4-4eba63dd9da1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"F", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"w", "&&", "x", "&&", 
      RowBox[{"!", "y"}], "&&", 
      RowBox[{"!", "z"}]}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{"w", "&&", 
      RowBox[{"!", "x"}], "&&", "y", "&&", "z"}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{"w", "&&", 
      RowBox[{"!", "x"}], "&&", "y", "&&", 
      RowBox[{"!", "z"}]}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{"w", "&&", 
      RowBox[{"!", "x"}], "&&", 
      RowBox[{"!", "y"}], "&&", 
      RowBox[{"!", "z"}]}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"!", "w"}], "&&", "x", "&&", "y", "&&", "z"}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"!", "w"}], "&&", "x", "&&", 
      RowBox[{"!", "y"}], "&&", "z"}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"!", "w"}], "&&", "x", "&&", 
      RowBox[{"!", "y"}], "&&", 
      RowBox[{"!", "z"}]}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"!", "w"}], "&&", 
      RowBox[{"!", "x"}], "&&", "y", "&&", "z"}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"!", "w"}], "&&", 
      RowBox[{"!", "x"}], "&&", 
      RowBox[{"!", "y"}], "&&", "z"}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"!", "w"}], "&&", 
      RowBox[{"!", "x"}], "&&", 
      RowBox[{"!", "y"}], "&&", 
      RowBox[{"!", "z"}]}], ")"}]}]}], ";"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[68]:=",ExpressionUUID->"352891f5-88a4-4388-9553-b5341bfde907"],

Cell["\<\
Let us begin by (very) briefly outlining the approach. More details will be \
given as we proceed.\
\>", "Text",ExpressionUUID->"7172545b-5e6c-4d92-a52e-7d3f0fafb785"],

Cell[CellGroupData[{

Cell["Transform the minterms into bit strings.", "Item1Numbered",ExpressionUUID->"cfdf29bc-9219-4eed-8d0b-6ccfa38e7976"],

Cell["Group the bit strings by the number of 1s.", "Item1Numbered",ExpressionUUID->"916717cb-a667-45c5-80bf-5c2f0a666171"],

Cell["Combine bit strings that differ in exactly one location.", \
"Item1Numbered",ExpressionUUID->"1ac0a7ca-7038-423a-8eef-fd93aee6ca1c"],

Cell["\<\
Repeat steps 2 and 3 until no additional combinations are possible.\
\>", "Item1Numbered",ExpressionUUID->"72b37a7e-1bea-4e4d-b20f-215dac358f2f"],

Cell["\<\
Identify the prime implicants (those bit strings not used in a \
simplification) and form the coverage table.\
\>", "Item1Numbered",ExpressionUUID->"e26e28b1-60bc-4068-9314-35a8fe971375"],

Cell["\<\
Identify the essential prime implicants and update the table.\
\>", "Item1Numbered",ExpressionUUID->"b693abd6-bba5-4708-b531-5e1e579c9c71"],

Cell["\<\
Process the remaining prime implicants using a heuristic approach in order to \
achieve complete coverage.\
\>", "Item1Numbered",ExpressionUUID->"236756c0-fb9f-4f19-929e-a4234b08c999"]
}, Open  ]],

Cell[TextData[{
 "Implementing this will require several different functions that will come \
together to achieve the goal of minimizing the expression for ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]],ExpressionUUID->
  "e08b588f-5487-45cb-8f86-5e14d6d395ea"],
 "."
}], "Text",ExpressionUUID->"36f70158-271d-4c21-a880-fab7eaca0735"],

Cell[CellGroupData[{

Cell["Modifying Arguments", "Subsubsection",ExpressionUUID->"f1e8f300-e753-4864-b6db-e5642ab2760d"],

Cell[TextData[{
 "Before we begin implementing the method, we take a moment to explain the ",
 StyleBox[ButtonBox["HoldRest",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldRest"], "FunctionLink"],
 " attribute. Earlier in this manual, we have seen how to use a held argument \
to allow modification of an argument to a function. We will need to do this \
again here in order to avoid the need to copy data structures that must be \
modified by a function."
}], "Text",ExpressionUUID->"2e624349-e341-4718-8cd7-6a29cd72ae82"],

Cell["\<\
Holding parameters to a function means that, when you call the function on a \
symbol, instead of applying the function to the object stored in that symbol, \
the function is given the name of the symbol itself. This allows the symbol \
name to be reassigned and otherwise modified within the function. \
\>", "Text",ExpressionUUID->"1fa6ba1b-26a5-46a5-ae2f-ccfdb1229679"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["HoldRest",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldRest"], "FunctionLink"],
 " attribute causes all but the first argument to a function to be held. For \
example, the following function updates the symbol given as the second \
argument to be the sum of what it previously stored and the first argument, \
and appends the result to the list associated to the symbol given as the \
third argument."
}], "Text",ExpressionUUID->"5df1aa1e-4e20-4325-a745-abac31e7ff6d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"exampleHold1", "=", "5"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"exampleHold2", "=", "12"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"exampleHold3", "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"exampleHoldFunction", ",", 
    RowBox[{"{", "HoldRest", "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"exampleHoldFunction", "[", 
   RowBox[{"a_", ",", "b_", ",", "c_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"b", "=", 
      RowBox[{"a", "+", "b"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"c", ",", "b"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellLabel->"In[69]:=",ExpressionUUID->"0d556330-d4b4-4c7d-88b8-ba87a501d215"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exampleHoldFunction", "[", 
  RowBox[{"exampleHold1", ",", "exampleHold2", ",", "exampleHold3"}], 
  "]"}]], "Input",
 CellLabel->"In[74]:=",ExpressionUUID->"5f1f7d02-bd35-47f5-b36f-d6bd8ce2d457"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "17"}], "}"}]], "Output",
 CellLabel->"Out[74]=",ExpressionUUID->"ba861058-9b3f-48df-8717-e6b9279e873b"]
}, Open  ]],

Cell[TextData[{
 "Observe that the values stored in the last two arguments have changed. \
Without the ",
 StyleBox[ButtonBox["HoldRest",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldRest"], "FunctionLink"],
 " attribute, both expressions in the body of the ",
 StyleBox[ButtonBox["Module",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Module"], "FunctionLink"],
 " would have produced errors."
}], "Text",ExpressionUUID->"98e2f1bf-71cb-45cb-8e8f-be7f142b32a4"],

Cell[CellGroupData[{

Cell[BoxData["exampleHold2"], "Input",
 CellLabel->"In[75]:=",ExpressionUUID->"888d9525-8b0b-4fd1-83d5-5c8b74c57782"],

Cell[BoxData["17"], "Output",
 CellLabel->"Out[75]=",ExpressionUUID->"ab3c8d70-4231-4d3a-9265-597a101df916"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["exampleHold3"], "Input",
 CellLabel->"In[76]:=",ExpressionUUID->"d683ff66-0f2f-4c2b-b7a5-f83cf8dd4716"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "17"}], "}"}]], "Output",
 CellLabel->"Out[76]=",ExpressionUUID->"d5400e27-6549-488f-88e5-0f3bcbfc76a7"]
}, Open  ]],

Cell[TextData[{
 "Other attributes that can be used to hold arguments are ",
 StyleBox[ButtonBox["HoldFirst",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldFirst"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["HoldAll",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldAll"], "FunctionLink"],
 "."
}], "Text",ExpressionUUID->"481af3f2-0892-4253-81bf-8b6ad25693b3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Transforming Minterms Into Bit Strings", "Subsubsection",ExpressionUUID->"77548568-eec7-4a29-9403-a3ab3a9f07d6"],

Cell[TextData[{
 "The first task is to process the input. That is, ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]],ExpressionUUID->
  "42145bbd-4282-4b93-bff7-138f364cfad2"],
 " must be transformed into a list of bit strings. This is not strictly \
necessary, but it makes working with the minterms more convenient. We \
represent bit strings as lists of 0s and 1s."
}], "Text",ExpressionUUID->"7def1f37-3bc7-46a7-b23a-1e6f4d363be6"],

Cell["\<\
We begin by creating a function to transform a single minterm into a bit \
string. We assume that the input to this function will be a properly formed \
minterm, that is, a conjunction of variables and negations of variables. We \
require that a list of variables be provided to the function, so that the bit \
string can be formed in the proper order.\
\>", "Text",ExpressionUUID->"98f15f24-d416-46a1-80cc-7e9f29466af4"],

Cell[TextData[{
 "Consider the following minterm, which is the fourth minterm in our example ",
 Cell[BoxData[
  FormBox["F", TraditionalForm]],ExpressionUUID->
  "21db3107-b21d-435d-b635-c5bfa5350c53"],
 "."
}], "Text",ExpressionUUID->"8c9c74d6-58f7-4c51-97f0-3322c5abdbf8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"minterm", "=", 
  RowBox[{"w", "&&", 
   RowBox[{"!", "x"}], "&&", "y", "&&", 
   RowBox[{"!", "z"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[77]:=",ExpressionUUID->"eca26b31-4e41-40d8-9bc0-0370984c734d"],

Cell[BoxData[
 RowBox[{"w", "&&", 
  RowBox[{"!", "x"}], "&&", "y", "&&", 
  RowBox[{"!", "z"}]}]], "Output",
 CellLabel->"Out[77]=",ExpressionUUID->"04c2049e-1907-4687-aa8a-b13484aaddd2"]
}, Open  ]],

Cell[TextData[{
 "Fortunately, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " automatically interprets a series of conjunctions into a single \
application of the ",
 StyleBox[ButtonBox["And",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/And"], "FunctionLink"],
 " (",
 StyleBox["&&", "Code"],
 ") function with multiple arguments. Applying ",
 StyleBox[ButtonBox["FullForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FullForm"], "FunctionLink"],
 " illustrates."
}], "Text",ExpressionUUID->"68923fe9-fbcc-47e1-9fa4-d3e9b15780d9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", "minterm", "]"}]], "Input",
 CellLabel->"In[78]:=",ExpressionUUID->"afb0ff5f-c88b-4015-bc4a-42c83625d422"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"And", "[", 
    RowBox[{"w", ",", 
     RowBox[{"Not", "[", "x", "]"}], ",", "y", ",", 
     RowBox[{"Not", "[", "z", "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[78]//FullForm=",ExpressionUUID->"1ed95059-2dec-4b2a-9bdc-ca77c944955f"]
}, Open  ]],

Cell[TextData[{
 StyleBox[ButtonBox["MemberQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MemberQ"], "FunctionLink"],
 "\[CloseCurlyQuote]s first argument can have any head, not just a ",
 StyleBox[ButtonBox["List",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/List"], "FunctionLink"],
 ". So, we can determine that ",
 Cell[BoxData[
  FormBox["w", TraditionalForm]],ExpressionUUID->
  "95cc36c8-42c9-491c-be3e-baf423bdcda7"],
 " is part of the conjunction but that ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "a62b8703-f78d-460b-8dc7-305c7442aea2"],
 " is not by applying ",
 StyleBox[ButtonBox["MemberQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MemberQ"], "FunctionLink"],
 " to ",
 StyleBox["minterm", "Code"],
 " and the variables."
}], "Text",ExpressionUUID->"47e4d5ed-f76b-4c88-a095-2ed6d770d01d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MemberQ", "[", 
  RowBox[{"minterm", ",", "w"}], "]"}]], "Input",
 CellLabel->"In[79]:=",ExpressionUUID->"6fec554e-04e2-4dcf-a1e9-f3ac9530a568"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[79]=",ExpressionUUID->"86b81290-80bf-46b8-aacf-3a323d57ddd4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MemberQ", "[", 
  RowBox[{"minterm", ",", "x"}], "]"}]], "Input",
 CellLabel->"In[80]:=",ExpressionUUID->"ceb1ffe4-884e-470b-8a07-1e4818e0e638"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[80]=",ExpressionUUID->"6816c864-33af-4abe-b774-dbcf99a7d684"]
}, Open  ]],

Cell[TextData[{
 "But of course, the negation of ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "44d5de59-bca6-48b1-a5e5-2837692c82cf"],
 " is part of ",
 StyleBox["minterm", "Code"],
 "."
}], "Text",ExpressionUUID->"1a385c55-a81a-4704-9cd9-6e9f16beed14"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MemberQ", "[", 
  RowBox[{"minterm", ",", 
   RowBox[{"Not", "[", "x", "]"}]}], "]"}]], "Input",
 CellLabel->"In[81]:=",ExpressionUUID->"ea6ce8e4-8dc6-4b89-b9eb-2635229fd3ca"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[81]=",ExpressionUUID->"70449917-425d-4d79-97f0-a57197c53e4d"]
}, Open  ]],

Cell["\<\
To transform the minterm into a bit string, we only need to check, for each \
variable, whether the variable or its negation is in the list. Recall that we \
will insist that the function be given the list of variables as an argument \
to maintain the proper order of the variables.\
\>", "Text",ExpressionUUID->"a8563444-30bf-4e7d-8e24-93a6fe4822d5"],

Cell["We first assign the list of variables to a symbol.", "Text",ExpressionUUID->"22447100-d43a-4e1d-8a41-e160a49b9e43"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"variableList", "=", 
  RowBox[{"{", 
   RowBox[{"w", ",", "x", ",", "y", ",", "z"}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[82]:=",ExpressionUUID->"7eaeebe7-4ad7-4445-9d0f-99ded7b17f7f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"w", ",", "x", ",", "y", ",", "z"}], "}"}]], "Output",
 CellLabel->"Out[82]=",ExpressionUUID->"afca3f03-bf3b-4866-9f58-e42ee993f4b8"]
}, Open  ]],

Cell["\<\
Now, create a list, initialized to the proper length, for the bit string.\
\>", "Text",ExpressionUUID->"da82bc4b-b41a-40ed-bf02-c5237cb83d6a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bitstring", "=", 
  RowBox[{"ConstantArray", "[", 
   RowBox[{"Null", ",", "4"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[83]:=",ExpressionUUID->"b42edf37-13ff-479e-b8c5-a74ffe7fd69d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]], "Output",
 CellLabel->"Out[83]=",ExpressionUUID->"be6df2a8-3687-4b59-81a2-991c4b1de1cb"]
}, Open  ]],

Cell[TextData[{
 "Finally, we use a ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop to check, for each variable in the variable list, whether the \
variable is in the minterm. If the variable is a member of ",
 StyleBox["minterm", "Code"],
 ", then we change the bit to 1. If the negation is in ",
 StyleBox["minterm", "Code"],
 ", we set the value in the bit string to 0. Otherwise, we place the \
character \[OpenCurlyDoubleQuote]-\[CloseCurlyDoubleQuote] in the list, to \
indicate the absence of the variable in the string."
}], "Text",ExpressionUUID->"d195b125-bdbb-4192-a6ad-00452a6b866b"],

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "\[LessEqual]", 
    RowBox[{"Length", "[", "variableList", "]"}]}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Which", "[", 
    RowBox[{
     RowBox[{"MemberQ", "[", 
      RowBox[{"minterm", ",", 
       RowBox[{"variableList", "[", 
        RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{"bitstring", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "=", "1"}], ",", "\[IndentingNewLine]", 
     RowBox[{"MemberQ", "[", 
      RowBox[{"minterm", ",", 
       RowBox[{"Not", "[", 
        RowBox[{"variableList", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{"bitstring", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "=", "0"}], ",", "\[IndentingNewLine]",
      "True", ",", 
     RowBox[{
      RowBox[{"bitstring", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "=", "\"\<-\>\""}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[84]:=",ExpressionUUID->"bad77862-4c6c-4ae3-a6bb-ae25bc9be9fb"],

Cell[TextData[{
 "This has created the bit string associated to ",
 StyleBox["minterm", "Code"],
 "."
}], "Text",ExpressionUUID->"4295564c-87da-40e7-a34d-a63fd7288c38"],

Cell[CellGroupData[{

Cell[BoxData["bitstring"], "Input",
 CellLabel->"In[85]:=",ExpressionUUID->"6e068564-ba59-491d-b9b2-d8d9fb4e6ef2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}]], "Output",
 CellLabel->"Out[85]=",ExpressionUUID->"0512745b-38f7-42a6-b16e-a146a39eb3f6"]
}, Open  ]],

Cell[TextData[{
 "We condense this process into a single function. Note the use of ",
 StyleBox[ButtonBox["Which",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Which"], "FunctionLink"],
 ". Recall that the result of ",
 StyleBox[ButtonBox["Which",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Which"], "FunctionLink"],
 " is the argument in an even position following the first odd-positioned \
argument that evaluates to true. "
}], "Text",ExpressionUUID->"0e974c3c-ed73-4281-a373-f6e902589a2c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mtToBitstring", "[", 
   RowBox[{"minterm_", ",", "variableList_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", "bitstring"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"bitstring", "=", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"Null", ",", 
        RowBox[{"Length", "[", "variableList", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"Length", "[", "variableList", "]"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Which", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"minterm", ",", 
           RowBox[{"variableList", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"bitstring", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "=", "1"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"MemberQ", "[", 
          RowBox[{"minterm", ",", 
           RowBox[{"Not", "[", 
            RowBox[{"variableList", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"bitstring", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "=", "0"}], ",", 
         "\[IndentingNewLine]", "True", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"bitstring", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "=", "\"\<-\>\""}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "bitstring"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[86]:=",ExpressionUUID->"6d9d6284-acae-4981-8a3e-828cba60d907"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mtToBitstring", "[", 
  RowBox[{"minterm", ",", 
   RowBox[{"{", 
    RowBox[{"w", ",", "x", ",", "y", ",", "z"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[87]:=",ExpressionUUID->"33af5db8-18c7-448d-ac31-fe5cf836e8f8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}]], "Output",
 CellLabel->"Out[87]=",ExpressionUUID->"3d442031-059a-46c5-afa7-0926bc99e54b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Transforming the Original Expression Into Bit Strings", "Subsubsection",ExpressionUUID->"c9df4185-65a8-40c7-ac7b-d0c7c65a25a7"],

Cell["\<\
Now that we have the means for transforming a single minterm into a bit \
string, we are ready to transform an expression in disjunctive normal form \
into a list of bit strings.\
\>", "Text",ExpressionUUID->"0a6abbcf-6baf-416a-8a48-0e74e96cc823"],

Cell[TextData[{
 "Observe that an expression in disjunctive normal form is the ",
 StyleBox[ButtonBox["Or",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Or"], "FunctionLink"],
 " (",
 StyleBox["||", "Code"],
 ") function applied to minterms. Again, ",
 StyleBox[ButtonBox["FullForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FullForm"], "FunctionLink"],
 " reveals this convenient structure."
}], "Text",ExpressionUUID->"063c9440-f764-4e4c-8bb7-732f0a24b68c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", "F", "]"}]], "Input",
 CellLabel->"In[88]:=",ExpressionUUID->"9fbfb3a3-77c9-4c8f-b11f-075c7e40cc8c"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Or", "[", 
    RowBox[{
     RowBox[{"And", "[", 
      RowBox[{"w", ",", "x", ",", 
       RowBox[{"Not", "[", "y", "]"}], ",", 
       RowBox[{"Not", "[", "z", "]"}]}], "]"}], ",", 
     RowBox[{"And", "[", 
      RowBox[{"w", ",", 
       RowBox[{"Not", "[", "x", "]"}], ",", "y", ",", "z"}], "]"}], ",", 
     RowBox[{"And", "[", 
      RowBox[{"w", ",", 
       RowBox[{"Not", "[", "x", "]"}], ",", "y", ",", 
       RowBox[{"Not", "[", "z", "]"}]}], "]"}], ",", 
     RowBox[{"And", "[", 
      RowBox[{"w", ",", 
       RowBox[{"Not", "[", "x", "]"}], ",", 
       RowBox[{"Not", "[", "y", "]"}], ",", 
       RowBox[{"Not", "[", "z", "]"}]}], "]"}], ",", 
     RowBox[{"And", "[", 
      RowBox[{
       RowBox[{"Not", "[", "w", "]"}], ",", "x", ",", "y", ",", "z"}], "]"}], 
     ",", 
     RowBox[{"And", "[", 
      RowBox[{
       RowBox[{"Not", "[", "w", "]"}], ",", "x", ",", 
       RowBox[{"Not", "[", "y", "]"}], ",", "z"}], "]"}], ",", 
     RowBox[{"And", "[", 
      RowBox[{
       RowBox[{"Not", "[", "w", "]"}], ",", "x", ",", 
       RowBox[{"Not", "[", "y", "]"}], ",", 
       RowBox[{"Not", "[", "z", "]"}]}], "]"}], ",", 
     RowBox[{"And", "[", 
      RowBox[{
       RowBox[{"Not", "[", "w", "]"}], ",", 
       RowBox[{"Not", "[", "x", "]"}], ",", "y", ",", "z"}], "]"}], ",", 
     RowBox[{"And", "[", 
      RowBox[{
       RowBox[{"Not", "[", "w", "]"}], ",", 
       RowBox[{"Not", "[", "x", "]"}], ",", 
       RowBox[{"Not", "[", "y", "]"}], ",", "z"}], "]"}], ",", 
     RowBox[{"And", "[", 
      RowBox[{
       RowBox[{"Not", "[", "w", "]"}], ",", 
       RowBox[{"Not", "[", "x", "]"}], ",", 
       RowBox[{"Not", "[", "y", "]"}], ",", 
       RowBox[{"Not", "[", "z", "]"}]}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[88]//FullForm=",ExpressionUUID->"b4d9dc58-2e2d-424d-83a2-bb364e18b370"]
}, Open  ]],

Cell[TextData[{
 "Our goal is to produce a list of the bit strings obtained from the \
minterms. We can transform the disjunction into a list by using the ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " (",
 StyleBox["@@", "Code"],
 ") function to replace the ",
 StyleBox[ButtonBox["Or",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Or"], "FunctionLink"],
 " (",
 StyleBox["||", "Code"],
 ") head with a ",
 StyleBox[ButtonBox["List",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/List"], "FunctionLink"],
 " head."
}], "Text",ExpressionUUID->"bdd7366d-361e-4e8e-b35c-8a744e9f66a1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", "@@", "F"}]], "Input",
 CellLabel->"In[89]:=",ExpressionUUID->"67325f5b-fe46-4817-b97a-5db7bd590090"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"w", "&&", "x", "&&", 
    RowBox[{"!", "y"}], "&&", 
    RowBox[{"!", "z"}]}], ",", 
   RowBox[{"w", "&&", 
    RowBox[{"!", "x"}], "&&", "y", "&&", "z"}], ",", 
   RowBox[{"w", "&&", 
    RowBox[{"!", "x"}], "&&", "y", "&&", 
    RowBox[{"!", "z"}]}], ",", 
   RowBox[{"w", "&&", 
    RowBox[{"!", "x"}], "&&", 
    RowBox[{"!", "y"}], "&&", 
    RowBox[{"!", "z"}]}], ",", 
   RowBox[{
    RowBox[{"!", "w"}], "&&", "x", "&&", "y", "&&", "z"}], ",", 
   RowBox[{
    RowBox[{"!", "w"}], "&&", "x", "&&", 
    RowBox[{"!", "y"}], "&&", "z"}], ",", 
   RowBox[{
    RowBox[{"!", "w"}], "&&", "x", "&&", 
    RowBox[{"!", "y"}], "&&", 
    RowBox[{"!", "z"}]}], ",", 
   RowBox[{
    RowBox[{"!", "w"}], "&&", 
    RowBox[{"!", "x"}], "&&", "y", "&&", "z"}], ",", 
   RowBox[{
    RowBox[{"!", "w"}], "&&", 
    RowBox[{"!", "x"}], "&&", 
    RowBox[{"!", "y"}], "&&", "z"}], ",", 
   RowBox[{
    RowBox[{"!", "w"}], "&&", 
    RowBox[{"!", "x"}], "&&", 
    RowBox[{"!", "y"}], "&&", 
    RowBox[{"!", "z"}]}]}], "}"}]], "Output",
 CellLabel->"Out[89]=",ExpressionUUID->"708e54f5-3521-465d-8d9a-3525661d46ac"]
}, Open  ]],

Cell[TextData[{
 "Then, we just need to apply the ",
 StyleBox["mtToBitstring", "Code"],
 " function to each member of the list. We can do this by using the ",
 StyleBox[ButtonBox["Map",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Map"], "FunctionLink"],
 " (",
 StyleBox["/@", "Code"],
 ") function, which applies a function (given as the first argument) to a \
list (given as the second argument) and returns the list obtained by applying \
the function to each element of the list. Since the ",
 StyleBox["mtToBitstring", "Code"],
 " requires two arguments, not just one, the first argument to ",
 StyleBox[ButtonBox["Map",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Map"], "FunctionLink"],
 " (",
 StyleBox["/@", "Code"],
 ") will be a pure ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 " (",
 StyleBox["&", "Code"],
 ") obtained by calling ",
 StyleBox["mtToBitstring", "Code"],
 " on a ",
 StyleBox[ButtonBox["Slot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Slot"], "FunctionLink"],
 " (",
 StyleBox["#", "Code"],
 ") and the list of variables."
}], "Text",ExpressionUUID->"28de87c4-1e81-40ea-8da8-8febfea2ea97"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"mtToBitstring", "[", 
     RowBox[{"#", ",", 
      RowBox[{"{", 
       RowBox[{"w", ",", "x", ",", "y", ",", "z"}], "}"}]}], "]"}], "&"}], 
   ",", 
   RowBox[{"List", "@@", "F"}]}], "]"}]], "Input",
 CellLabel->"In[90]:=",ExpressionUUID->"d5bef271-3190-4213-b0be-452d9b3978da"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[90]=",ExpressionUUID->"c8f24f8b-4959-43cb-b174-18069b0c29b7"]
}, Open  ]],

Cell["\<\
We define a function based on this model. Note that the above presumed that \
there was more than one minterm. We define the function with different \
signatures to ensure that it will correctly handle a single minterm.\
\>", "Text",ExpressionUUID->"0b35ebeb-12ea-4aea-8e3f-2a351dc7663c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"dnfToBitList", "[", 
    RowBox[{"dnfExpr_Or", ",", "variableList_"}], "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"mtToBitstring", "[", 
       RowBox[{"#", ",", "variableList"}], "]"}], "&"}], ",", 
     RowBox[{"List", "@@", "dnfExpr"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dnfToBitList", "[", 
   RowBox[{"dnfExpr_And", ",", "variableList_"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"mtToBitstring", "[", 
    RowBox[{"dnfExpr", ",", "variableList"}], "]"}], "}"}]}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[91]:=",ExpressionUUID->"1a577816-01e1-47d6-908f-8b7258e25eef"],

Cell[TextData[{
 "We now apply this function to the example expression and store the result \
as the symbol ",
 StyleBox["Fbits", "Code",
  IgnoreSpellCheck->True],
 "."
}], "Text",ExpressionUUID->"e09892aa-c4ea-462c-97cf-edf3027eef17"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Fbits", "=", 
  RowBox[{"dnfToBitList", "[", 
   RowBox[{"F", ",", 
    RowBox[{"{", 
     RowBox[{"w", ",", "x", ",", "y", ",", "z"}], "}"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[93]:=",ExpressionUUID->"47ead2ae-1300-46e0-b960-ca7054b5c74d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[93]=",ExpressionUUID->"202a768f-81c5-4128-9fd7-6779a9b8eca0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Transforming Bit Strings Into Minterms", "Subsubsection",ExpressionUUID->"2fd0108c-32d0-4ada-bce7-06eb7dec6af8"],

Cell["\<\
At the conclusion of the Quine\[Dash]McCluskey process, we will want to \
display the result in disjunctive normal form. This will require that we turn \
bit strings back into minterms.\
\>", "Text",ExpressionUUID->"6462c6dc-014d-462a-acf5-7e6c875f550b"],

Cell["\<\
Note that since this function will be applied at the end of the process, it \
may be that some of the variables have been removed. We will be using the \
string \[OpenCurlyDoubleQuote]-\[CloseCurlyDoubleQuote] in a bit string to \
indicate the elimination of a variable.\
\>", "Text",ExpressionUUID->"d2b64c73-885c-4c7d-97a6-07023ae40b3a"],

Cell["\<\
This function will require the bit string and a list of variable names as its \
input. It operates in two stages. First, it processes the variable list based \
on the content of the bit string. It initializes an empty list and, for each \
variable, appends the variable or its negation or does nothing, depending on \
the content of the bit string.\
\>", "Text",ExpressionUUID->"79b9577c-8c71-417d-a108-15be1f867c42"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bitstr", "=", 
  RowBox[{"{", 
   RowBox[{"0", ",", "1", ",", "\"\<-\>\"", ",", "0"}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[94]:=",ExpressionUUID->"2e6916f2-50f6-4580-9739-b310f377389e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "1", ",", "\<\"-\"\>", ",", "0"}], "}"}]], "Output",
 CellLabel->"Out[94]=",ExpressionUUID->"2b30838f-62ae-4ad7-8175-cfce15121375"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"outList", "=", 
  RowBox[{"{", "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[95]:=",ExpressionUUID->"180f28ba-79da-4323-8f51-2822586c64f0"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellLabel->"Out[95]=",ExpressionUUID->"104d8aa8-7c73-4b84-a4db-8e33bef9a7b7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "\[LessEqual]", 
    RowBox[{"Length", "[", "variableList", "]"}]}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{"bitstr", "[", 
      RowBox[{"[", "i", "]"}], "]"}], ",", "\[IndentingNewLine]", "1", ",", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"outList", ",", 
       RowBox[{"variableList", "[", 
        RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     "0", ",", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"outList", ",", 
       RowBox[{"Not", "[", 
        RowBox[{"variableList", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\"\<-\>\"", ",", "Null"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[96]:=",ExpressionUUID->"f90d0f84-10e9-45d3-9d29-d3206ad9c3f7"],

Cell[CellGroupData[{

Cell[BoxData["outList"], "Input",
 CellLabel->"In[97]:=",ExpressionUUID->"319a9ee9-d101-4881-8f34-2c6826a65f69"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"!", "w"}], ",", "x", ",", 
   RowBox[{"!", "z"}]}], "}"}]], "Output",
 CellLabel->"Out[97]=",ExpressionUUID->"1431d3aa-e5e6-4fba-96b5-b00bf62f8108"]
}, Open  ]],

Cell[TextData[{
 "Note the use of the ",
 StyleBox[ButtonBox["Switch",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Switch"], "FunctionLink"],
 " function. Recall that ",
 StyleBox[ButtonBox["Switch",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Switch"], "FunctionLink"],
 " evaluates its first argument, and then compares that result to the \
arguments with even index, executing the argument following the first of the \
even-indexed arguments that matches the result of the first argument."
}], "Text",ExpressionUUID->"d05f35ea-48f8-4d2f-bc2a-580fc53f999b"],

Cell[TextData[{
 "Once this list is formed, we create the conjunction of the elements by \
using ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"], "FunctionLink"],
 " (",
 StyleBox["@@", "Code"],
 ") to change the ",
 StyleBox[ButtonBox["List",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/List"], "FunctionLink"],
 " head into ",
 StyleBox[ButtonBox["And",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/And"], "FunctionLink"],
 " (",
 StyleBox["&&", "Code"],
 ")."
}], "Text",ExpressionUUID->"94d1643d-f26e-4862-92cc-935c9548483d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", "outList"}]], "Input",
 CellLabel->"In[98]:=",ExpressionUUID->"b020362e-58d4-405d-b282-2f673c503975"],

Cell[BoxData[
 RowBox[{
  RowBox[{"!", "w"}], "&&", "x", "&&", 
  RowBox[{"!", "z"}]}]], "Output",
 CellLabel->"Out[98]=",ExpressionUUID->"49f46dbe-449e-4df7-9d88-695682020ac8"]
}, Open  ]],

Cell["Here is the function based on this process.", "Text",ExpressionUUID->"b256623e-6e87-48bf-a431-3d71a1d1cc8f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"bitStringToMT", "[", 
   RowBox[{"bitstring_", ",", "variableList_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"outList", ",", "i"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"outList", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"Length", "[", "variableList", "]"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"bitstring", "[", 
          RowBox[{"[", "i", "]"}], "]"}], ",", "\[IndentingNewLine]", "1", 
         ",", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"outList", ",", 
           RowBox[{"variableList", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
         "\[IndentingNewLine]", "0", ",", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"outList", ",", 
           RowBox[{"Not", "[", 
            RowBox[{"variableList", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "]"}], ",", 
         "\[IndentingNewLine]", "\"\<-\>\"", ",", "Null"}], "]"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"And", "@@", "outList"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->"In[99]:=",ExpressionUUID->"94073265-7029-4bac-b268-cfbec1ccdfaf"],

Cell[TextData[{
 "Applied to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], TraditionalForm]],
  ExpressionUUID->"279ef404-9638-428d-8660-19219eba9db9"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"w", ",", "x", ",", "y", ",", "z"}], "}"}], TraditionalForm]],
  ExpressionUUID->"62d90064-f97a-472d-a01d-68395efe75df"],
 ", we see that ",
 StyleBox["bitStringToMT", "Code"],
 " reproduces the original minterm example."
}], "Text",ExpressionUUID->"439971fc-0018-4d5c-bf2b-c0e9138b20d3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bitStringToMT", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"w", ",", "x", ",", "y", ",", "z"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[100]:=",ExpressionUUID->"011eebe0-d1b1-4985-8be3-b0b64748ffb1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"!", "w"}], "&&", "x", "&&", 
  RowBox[{"!", "y"}], "&&", "z"}]], "Output",
 CellLabel->
  "Out[100]=",ExpressionUUID->"d8a9f171-598b-4a51-8858-fb2a4c46566a"]
}, Open  ]],

Cell[TextData[{
 "Applied to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "\<\"-\"\>", ",", "1"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"119a45ca-1fab-43a5-bdbf-5f59ed057136"],
 ", it removes the ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "22e684e4-49fd-404f-9a61-461f3dc25bf8"],
 " and negates ",
 Cell[BoxData[
  FormBox["w", TraditionalForm]],ExpressionUUID->
  "1656e593-9157-47b3-9bfc-898f40765e49"],
 "."
}], "Text",ExpressionUUID->"0e6c32e9-ab96-41c8-a9e3-48cfa341ad08"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bitStringToMT", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "\"\<-\>\"", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"w", ",", "x", ",", "y", ",", "z"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[101]:=",ExpressionUUID->"a7e1c52e-a27e-4bd6-954a-429bd468468e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"!", "w"}], "&&", "x", "&&", "z"}]], "Output",
 CellLabel->
  "Out[101]=",ExpressionUUID->"1209bc17-ece6-43af-94c6-8cb3c769f715"]
}, Open  ]],

Cell[TextData[{
 "The final result of our Quine\[Dash]McCluskey process will be a list of bit \
strings. To produce the associated disjunctive normal form expression, we \
only need to apply ",
 StyleBox["bitStringToMT", "Code"],
 " to each element of the list and then join the elements of the list in a \
disjunction."
}], "Text",ExpressionUUID->"8782e55b-c3a0-41d7-b153-6423191b7a58"],

Cell[BoxData[
 RowBox[{
  RowBox[{"bitListToDNF", "[", 
   RowBox[{"bitList_", ",", "variableList_"}], "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"bitStringToMT", "[", 
      RowBox[{"#", ",", "variableList"}], "]"}], "&"}], ",", 
    RowBox[{"Or", "@@", "bitList"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[102]:=",ExpressionUUID->"8a871db6-6b1c-4bd5-9909-73a64eac0a6a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Initializing the Source Table", "Subsubsection",ExpressionUUID->"445f5498-c006-46bc-a56a-e19c9a481979"],

Cell["\<\
In order to form the coverage table in the second part of the method, we need \
to know which of the original minterms are covered by which of the prime \
implicants. Refer to Tables 3 and 6 in the text. Notice that each bit string \
in those tables is associated with either a single number, in the case of the \
original minterms, or lists of numbers, for the derived products.\
\>", "Text",ExpressionUUID->"c26206ee-9cdf-4ea8-a7ec-7514dbe0bd97"],

Cell["\<\
We will store this information as an association whose keys are the bit \
strings and whose values are lists of integers. We will refer to this \
association as the \[OpenCurlyDoubleQuote]coverage dictionary,\
\[CloseCurlyDoubleQuote] since it allows us to look up any bit string and \
determine all of the original minterms covered by it. \
\>", "Text",ExpressionUUID->"586c3a1a-6fa2-43a9-95fe-6a77ea158271"],

Cell[TextData[{
 "Given the ",
 StyleBox["Fbits", "Code",
  IgnoreSpellCheck->True],
 " list, we initialize this association with the elements of ",
 StyleBox["Fbits", "Code",
  IgnoreSpellCheck->True],
 " as the keys. The corresponding entries will be the list whose sole element \
is the bit string\[CloseCurlyQuote]s position in ",
 StyleBox["Fbits", "Code",
  IgnoreSpellCheck->True],
 "."
}], "Text",ExpressionUUID->"5c1369f9-b0b4-4279-8b13-ff9c44aa8b8e"],

Cell[TextData[{
 "Fortunately, the Wolfram Language has a function that does exactly this. \
Given a list as its sole argument, the ",
 StyleBox[ButtonBox["PositionIndex",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PositionIndex"], "FunctionLink"],
 " function produces the association whose keys are the distinct elements of \
the input and whose values are lists of the positions at which the keys \
appear in the list. For example,"
}], "Text",ExpressionUUID->"e679f1a6-6abc-4a68-8c06-6394c0d5e740"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PositionIndex", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\"", ",", 
    "\"\<e\>\""}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[103]:=",ExpressionUUID->"f8d53c9a-f37d-4d40-b33d-75f983cd8a15"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{"\<\"c\"\>", "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{"\<\"d\"\>", "\[Rule]", 
    RowBox[{"{", "4", "}"}]}], ",", 
   RowBox[{"\<\"e\"\>", "\[Rule]", 
    RowBox[{"{", "5", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[103]=",ExpressionUUID->"2d816fa4-ce5f-45e3-8df7-73fb9c2b7c17"]
}, Open  ]],

Cell["\<\
When elements are repeated in the list, the associated value reflects that \
fact.\
\>", "Text",ExpressionUUID->"4738f956-38bd-40ff-9a88-ff7827352195"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PositionIndex", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<a\>\"", ",", 
    "\"\<a\>\""}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[104]:=",ExpressionUUID->"190cafd6-3f25-4ea0-a930-8dae9ada858f"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "5"}], "}"}]}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{"\<\"c\"\>", "\[Rule]", 
    RowBox[{"{", "3", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[104]=",ExpressionUUID->"aacd0576-d40d-45df-9932-15525d31af2d"]
}, Open  ]],

Cell[TextData[{
 "We apply ",
 StyleBox[ButtonBox["PositionIndex",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PositionIndex"], "FunctionLink"],
 " to ",
 StyleBox["Fbits", "Code",
  IgnoreSpellCheck->True],
 " to create the initial coverage dictionary. "
}], "Text",ExpressionUUID->"b60c18b3-f4b7-46f6-ab1d-35999cf55f26"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"coverageDict", "=", 
  RowBox[{"PositionIndex", "[", "Fbits", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[105]:=",ExpressionUUID->"f82c8692-8527-4747-80a0-300b34477920"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "4", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "5", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "6", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "7", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "8", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "9", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "10", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[105]=",ExpressionUUID->"616aa96d-1683-44a2-b883-46774fef5a1e"]
}, Open  ]],

Cell[TextData[{
 "Remember that the keys are bit strings and the values are the location of \
the string in ",
 StyleBox["Fbits", "Code",
  IgnoreSpellCheck->True],
 "."
}], "Text",ExpressionUUID->"ae1737a1-5b7b-4766-9d1f-6c0e9c976f6a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"coverageDict", "[", 
  RowBox[{"{", 
   RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[106]:=",ExpressionUUID->"ecf43216-3f32-45a2-98c6-0420c974c234"],

Cell[BoxData[
 RowBox[{"{", "6", "}"}]], "Output",
 CellLabel->
  "Out[106]=",ExpressionUUID->"36399b43-b55b-43b3-a4e7-d9b84f727648"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Fbits", "[", 
  RowBox[{"[", "6", "]"}], "]"}]], "Input",
 CellLabel->
  "In[107]:=",ExpressionUUID->"fcf9e1f4-4072-47ec-a114-b9d4f3f96f2f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}]], "Output",
 CellLabel->
  "Out[107]=",ExpressionUUID->"72614cdb-6300-40ae-88d1-e4ced7452d3e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Grouping by the Number of 1s", "Subsubsection",ExpressionUUID->"667c4c70-2575-46af-b8ee-f2279f44b6e0"],

Cell["\<\
Step 2 in our outline is to group the bit strings by the number of 1s.\
\>", "Text",ExpressionUUID->"98bcc58b-5f3e-4700-bd27-e3ebdd0fdccc"],

Cell[TextData[{
 "The reason for this step is to improve the efficiency of finding \
simplifications to make. Since two bit strings can be combined only when they \
are identical except for one location, the only possible combinations are \
when one bit string has ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "f0d3117e-8d2d-4162-8e87-cfef9dc47b2c"],
 " 1s and the other has ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "a4aaee5a-7b27-4225-8fea-156b2ae6e930"],
 "."
}], "Text",ExpressionUUID->"12d585d2-3990-4ca1-a9fc-b1a92353ea1a"],

Cell[TextData[{
 "After step 1 is concluded, we have a list of bit strings. That will be the \
starting point for the function we create for this step. The result of this \
step will be to turn the list of bit strings into an association, which we \
call ",
 StyleBox["groups", "Code"],
 ". The keys of ",
 StyleBox["groups", "Code"],
 " will be the possible numbers of 1s that can appear in a bit string, and \
the values will be the set of all bit strings with that number of 1s. That \
is, location 1 will have the bit strings with no 1s, location 2 will contain \
the bit strings with a single 1, etc."
}], "Text",ExpressionUUID->"3a5fad43-5308-487a-ba56-735fd0b4234e"],

Cell[TextData[{
 "For each member of ",
 StyleBox["Fbits", "Code",
  IgnoreSpellCheck->True],
 ", we need to count the number of 1s. We can use the Wolfram Language \
function ",
 StyleBox[ButtonBox["Count",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Count"], "FunctionLink"],
 " to do this. The first argument of ",
 StyleBox[ButtonBox["Count",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Count"], "FunctionLink"],
 " is a list (although it will work with other expressions as well) and the \
second is a pattern to be matched. In this case, the pattern will simply be \
the number 1."
}], "Text",ExpressionUUID->"e16afac5-72eb-43c8-95ca-7a9fdbcb3fe2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Count", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "1", ",", "1", ",", "\"\<-\>\"", ",", "0", ",", "1", 
     ",", "\"\<-\>\""}], "}"}], ",", "1"}], "]"}]], "Input",
 CellLabel->
  "In[108]:=",ExpressionUUID->"58e31975-2d42-4b21-8d64-0d4fb8676930"],

Cell[BoxData["4"], "Output",
 CellLabel->
  "Out[108]=",ExpressionUUID->"44b9982e-683b-40ee-a213-89b0c97f429a"]
}, Open  ]],

Cell[TextData[{
 "Another way to use ",
 StyleBox[ButtonBox["Count",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Count"], "FunctionLink"],
 " is to give the pattern being search for as the only argument. In our case, \
this will be"
}], "Text",ExpressionUUID->"29e8b706-a623-412b-a2e8-e9b6577874f2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Count", "[", "1", "]"}]], "Input",
 CellLabel->
  "In[109]:=",ExpressionUUID->"1422149f-5cca-45eb-9bab-2a65e4e11ec8"],

Cell[BoxData[
 RowBox[{"Count", "[", "1", "]"}]], "Output",
 CellLabel->
  "Out[109]=",ExpressionUUID->"4ba5461a-6cc9-4c1b-b0cd-58116bf0c398"]
}, Open  ]],

Cell[TextData[{
 "While the output suggests that we have entered meaningless input, this \
expression represents an operator form of the ",
 StyleBox[ButtonBox["Count",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Count"], "FunctionLink"],
 " function with that pattern. It is effectively equivalent to the following \
pure function:"
}], "Text",ExpressionUUID->"7fac071e-a2c3-4d32-8147-e5649662c820"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Count", "[", 
   RowBox[{"#", ",", "1"}], "]"}], "&"}]], "Input",
 CellLabel->
  "In[110]:=",ExpressionUUID->"e84b10a3-40a5-4180-9b63-8f4071033817"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Count", "[", 
   RowBox[{"#1", ",", "1"}], "]"}], "&"}]], "Output",
 CellLabel->
  "Out[110]=",ExpressionUUID->"bff05581-dd26-410d-b420-2b8e69c7009f"]
}, Open  ]],

Cell[TextData[{
 "We can apply ",
 StyleBox["Count[1]", "Code"],
 " to a list as if it were a function to count the number of 1s."
}], "Text",ExpressionUUID->"a945e390-d1fc-49e1-93a0-8a18cd603a8a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Count", "[", "1", "]"}], "[", 
  RowBox[{"{", 
   RowBox[{
   "1", ",", "0", ",", "1", ",", "1", ",", "\"\<-\>\"", ",", "0", ",", "1", 
    ",", "\"\<-\>\""}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[111]:=",ExpressionUUID->"5f4c0854-8acf-4a38-be2d-2b072e1dfca8"],

Cell[BoxData["4"], "Output",
 CellLabel->
  "Out[111]=",ExpressionUUID->"7877f6cc-c4c5-4157-990b-0b30719ade5b"]
}, Open  ]],

Cell["\<\
There are a number of Wolfram Language functions that can be used in this \
way, particularly the functions that perform some operation to the first \
argument based on a second argument.\
\>", "Text",ExpressionUUID->"9ac95d16-904d-477d-b4bb-5bc6b51ce8ac"],

Cell[TextData[{
 "We use this version of ",
 StyleBox[ButtonBox["Count",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Count"], "FunctionLink"],
 " to sort the members of ",
 StyleBox["Fbits", "Code",
  IgnoreSpellCheck->True],
 " into ",
 StyleBox["groups", "Code"],
 " with an application of ",
 StyleBox[ButtonBox["GroupBy",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GroupBy"], "FunctionLink"],
 ". The first argument of ",
 StyleBox[ButtonBox["GroupBy",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GroupBy"], "FunctionLink"],
 " is a list. There are several possible types of second argument that can be \
used, but the essential second argument is a function that applies to the \
elements of the list to determine how they are grouped. Out goal is to group \
by the number of 1s, so we use ",
 StyleBox["Count[1]", "Code"],
 " as the second argument. "
}], "Text",ExpressionUUID->"41d9b656-1155-4942-ab2d-32810c74d40b"],

Cell[TextData[{
 "The result of ",
 StyleBox[ButtonBox["GroupBy",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GroupBy"], "FunctionLink"],
 " is an association in which the keys are the resulting values of the \
function and the values are lists of all members of the input lists that \
produce that value when the function is applied to them. In other words, in \
our case, the result of ",
 StyleBox[ButtonBox["GroupBy",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GroupBy"], "FunctionLink"],
 " will be an association whose keys are possible numbers of 1s and whose \
values are the list of bit strings which include that number of 1s."
}], "Text",ExpressionUUID->"e7812b63-cd18-478f-a701-8366c362cad1"],

Cell[TextData[{
 "Here is the result for ",
 StyleBox["Fbits", "Code",
  IgnoreSpellCheck->True],
 "."
}], "Text",ExpressionUUID->"0247145d-fdf7-4f65-ad05-4909e4c70eb6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"groups", "=", 
  RowBox[{"GroupBy", "[", 
   RowBox[{"Fbits", ",", 
    RowBox[{"Count", "[", "1", "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[112]:=",ExpressionUUID->"b77a025e-01df-43df-bff4-45e9ca41f8a9"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"3", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "1", ",", "1"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"0", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[112]=",ExpressionUUID->"cb5de2c5-9dcf-44be-8e45-6fccd76cf6ce"]
}, Open  ]],

Cell[TextData[{
 "The easiest way to display this output in a readable form is to wrap the \
association in a ",
 StyleBox[ButtonBox["Dataset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dataset"], "FunctionLink"],
 ". However, we are using this only for display purposes; we will not have \
need for ",
 StyleBox[ButtonBox["Query",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Query"], "FunctionLink"],
 " and other ",
 StyleBox[ButtonBox["Dataset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dataset"], "FunctionLink"],
 " operations."
}], "Text",ExpressionUUID->"5778075b-e283-4212-b570-e8da3636cef8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dataset", "[", "groups", "]"}]], "Input",
 CellLabel->
  "In[113]:=",ExpressionUUID->"2f7b661e-0c16-4be5-844b-0f9a2c5bbc78"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[
           TypeSystem`Vector[
            TypeSystem`Atom[Integer], 4], TypeSystem`AnyLength], 4], "Shape" -> 
        TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[34], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`UnknownShape], 4, {All}]]], 4, {}], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[635443555], 
        "Type" -> TypeSystem`Assoc[
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[
           TypeSystem`Vector[
            TypeSystem`Atom[Integer], 4], TypeSystem`AnyLength], 4], 
        "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[635443555]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover[
                    RawBoxes["2"], 
                    Style[
                    RawBoxes["2"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 254540373][{
                    
                    Key[2]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[254540373][
                   GeneralUtilities`Slice[
                    Key[2]]], "Mouse"], ImageSize -> {{34, Full}, Automatic}],
                 Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{1, 1, 0, 0}, ShowStringCharacters -> False], 
                    Style[
                    Style[{1, 1, 0, 0}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 254540373][{
                    
                    Key[2], 1}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[254540373][
                 
                  GeneralUtilities`Slice[
                   Key[2], 1]], "Mouse"]]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{1, 0, 1, 0}, ShowStringCharacters -> False], 
                    Style[
                    Style[{1, 0, 1, 0}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 254540373][{
                    
                    Key[2], 2}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[254540373][
                 
                  GeneralUtilities`Slice[
                   Key[2], 2]], "Mouse"]]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0, 1, 0, 1}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0, 1, 0, 1}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 254540373][{
                    
                    Key[2], 3}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[254540373][
                 
                  GeneralUtilities`Slice[
                   Key[2], 3]], "Mouse"]]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0, 0, 1, 1}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0, 0, 1, 1}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 254540373][{
                    
                    Key[2], 4}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[254540373][
                 
                  GeneralUtilities`Slice[
                   Key[2], 4]], "Mouse"]]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover[
                    RawBoxes["3"], 
                    Style[
                    RawBoxes["3"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 254540373][{
                    
                    Key[3]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[254540373][
                   GeneralUtilities`Slice[
                    Key[3]]], "Mouse"], ImageSize -> {{34, Full}, Automatic}],
                 Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{1, 0, 1, 1}, ShowStringCharacters -> False], 
                    Style[
                    Style[{1, 0, 1, 1}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 254540373][{
                    
                    Key[3], 1}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[254540373][
                 
                  GeneralUtilities`Slice[
                   Key[3], 1]], "Mouse"]]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0, 1, 1, 1}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0, 1, 1, 1}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 254540373][{
                    
                    Key[3], 2}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[254540373][
                 
                  GeneralUtilities`Slice[
                   Key[3], 2]], "Mouse"]]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover[
                    RawBoxes["1"], 
                    Style[
                    RawBoxes["1"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 254540373][{
                    
                    Key[1]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[254540373][
                   GeneralUtilities`Slice[
                    Key[1]]], "Mouse"], ImageSize -> {{34, Full}, Automatic}],
                 Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{1, 0, 0, 0}, ShowStringCharacters -> False], 
                    Style[
                    Style[{1, 0, 0, 0}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 254540373][{
                    
                    Key[1], 1}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[254540373][
                 
                  GeneralUtilities`Slice[
                   Key[1], 1]], "Mouse"]]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0, 1, 0, 0}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0, 1, 0, 0}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 254540373][{
                    
                    Key[1], 2}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[254540373][
                 
                  GeneralUtilities`Slice[
                   Key[1], 2]], "Mouse"]]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0, 0, 0, 1}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0, 0, 0, 1}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 254540373][{
                    
                    Key[1], 3}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[254540373][
                 
                  GeneralUtilities`Slice[
                   Key[1], 3]], "Mouse"]]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover[
                    RawBoxes["0"], 
                    Style[
                    RawBoxes["0"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 254540373][{
                    
                    Key[0]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[254540373][
                   GeneralUtilities`Slice[
                    Key[0]]], "Mouse"], ImageSize -> {{34, Full}, Automatic}],
                 Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0, 0, 0, 0}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0, 0, 0, 0}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 254540373][{
                    
                    Key[0], 1}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[254540373][
                 
                  GeneralUtilities`Slice[
                   Key[0], 1]], "Mouse"]]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 254540373][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 254540373]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[254540373][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[254540373][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {115., {125.8544921875, 131.1455078125}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellLabel->
  "Out[113]=",ExpressionUUID->"db34c429-c7fd-442b-9e1e-d37bdbc316a4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Combining Bit Strings", "Subsubsection",ExpressionUUID->"81416b52-741f-479a-9430-268b9500551e"],

Cell[TextData[{
 "Step 3 is to combine all of the bit strings that differ in exactly one \
location. We first write a function that takes as input two bit strings and \
either combines them if, in fact, they do differ in exactly one location, or \
returns ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 " if they do not."
}], "Text",ExpressionUUID->"089e6eca-d908-4288-9752-2d2af4678828"],

Cell["\<\
This function needs to do two tasks. First, it has to check to see whether or \
not the two bit strings differ in more than one location. Second, it needs to \
combine them if they are allowed to be combined.\
\>", "Text",ExpressionUUID->"09a663eb-3b6c-4ec5-9530-cf1453b6f6cc"],

Cell["\<\
Combining two bit strings is easy, provided we know the one location in which \
they differ. For example,\
\>", "Text",ExpressionUUID->"1ae60b45-8a83-4453-9e3e-085725169600"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bit1", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "\"\<-\>\"", ",", "0", ",", "1", ",", "1"}], 
   "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[114]:=",ExpressionUUID->"355696ea-9e50-4810-99e8-b47ed47dd00f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "\<\"-\"\>", ",", "0", ",", "1", ",", "1"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[114]=",ExpressionUUID->"4e412407-78d5-4849-b2b4-f983ce1b73f8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bit2", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "\"\<-\>\"", ",", "0", ",", "0", ",", "1"}], 
   "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[115]:=",ExpressionUUID->"7bfe5b2a-b110-46ff-aa91-d1e53499610d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "\<\"-\"\>", ",", "0", ",", "0", ",", "1"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[115]=",ExpressionUUID->"3ee13e49-31e3-4326-afdd-641d6c27cab2"]
}, Open  ]],

Cell["You can see that these are identical except in position 4.", "Text",ExpressionUUID->"6e4e416e-f29f-4a17-88d0-996c613851f2"],

Cell["\<\
To merge them, we take either one and replace position 4 with \
\[OpenCurlyDoubleQuote]-\[CloseCurlyDoubleQuote].\
\>", "Text",ExpressionUUID->"1ff5248a-278b-4706-8830-cd9b95750d71"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"bit1", "[", 
    RowBox[{"[", "4", "]"}], "]"}], "=", "\"\<-\>\""}], 
  ";"}], "\[IndentingNewLine]", "bit1"}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[116]:=",ExpressionUUID->"5fd1f5ed-30ec-43c4-8663-4a20191ebd27"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "\<\"-\"\>", ",", "0", ",", "\<\"-\"\>", ",", "1"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[117]=",ExpressionUUID->"be3149ca-a685-43ff-bbb9-3bab2d7dd981"]
}, Open  ]],

Cell[TextData[{
 "We determine that they differ only in position 4 using a ",
 StyleBox[ButtonBox["Catch",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Catch"], "FunctionLink"],
 " and ",
 StyleBox[ButtonBox["Throw",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Throw"], "FunctionLink"],
 " with a ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop. Inside a ",
 StyleBox[ButtonBox["Catch",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Catch"], "FunctionLink"],
 " block, initialize a symbol ",
 StyleBox["pos", "Code"],
 ", for position, to 0. Now, begin a ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop to compare each pair of entries in the two bit strings. If we find a \
difference, check the value of ",
 StyleBox["pos", "Code"],
 ". If it is still 0, then this is the first difference that has been \
encountered, so set ",
 StyleBox["pos", "Code"],
 " to the position of this difference and continue the loop. If ",
 StyleBox["pos", "Code"],
 " is not 0, however, then we know that this is the second time a difference \
was found. In this case, we immediately ",
 StyleBox[ButtonBox["Throw",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Throw"], "FunctionLink"],
 " ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 ", terminating the loop. Once the loop is complete, if ",
 StyleBox["pos", "Code"],
 " is still 0, then there was no difference, so again we ",
 StyleBox[ButtonBox["Throw",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Throw"], "FunctionLink"],
 " ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"], "FunctionLink"],
 ". Otherwise, ",
 StyleBox["pos", "Code"],
 " stores the location of the sole difference, and",
 " ",
 "we modify one of the bit strings and return it."
}], "Text",ExpressionUUID->"5569307a-7aac-4765-b22f-60d12bffe5cb"],

Cell["Here is the function", "Text",ExpressionUUID->"8d9f5082-40f1-44ea-b6ba-56b4d3f9cae2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mergeBitstrings", "[", 
   RowBox[{"bit1_", ",", "bit2_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", "pos", ",", "result"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Catch", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"pos", "=", "0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "\[LessEqual]", 
         RowBox[{"Length", "[", "bit1", "]"}]}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"bit1", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "\[NotEqual]", 
           RowBox[{"bit2", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"pos", "\[Equal]", "0"}], ",", 
            RowBox[{"pos", "=", "i"}], ",", 
            RowBox[{"Throw", "[", "False", "]"}]}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"pos", "\[Equal]", "0"}], ",", 
        RowBox[{"Throw", "[", "False", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"result", "=", "bit1"}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"result", "[", 
        RowBox[{"[", "pos", "]"}], "]"}], "=", "\"\<-\>\""}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Throw", "[", "result", "]"}]}], "\[IndentingNewLine]", "]"}]}],
    "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[118]:=",ExpressionUUID->"b319c8a2-1e5e-4164-88b4-9c3b96e2593b"],

Cell["\<\
We see that it works correctly on our two example bit strings.\
\>", "Text",ExpressionUUID->"12206662-2bdb-416c-ab57-ee25db51ba93"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mergeBitstrings", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "\"\<-\>\"", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "\"\<-\>\"", ",", "0", ",", "0", ",", "1"}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->
  "In[119]:=",ExpressionUUID->"5f72fef8-8f2b-4e9e-b16a-2675712cf7d1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "\<\"-\"\>", ",", "0", ",", "\<\"-\"\>", ",", "1"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[119]=",ExpressionUUID->"2e2cdebb-0936-4d1f-9718-a12ba66753d5"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Searching for Combinations to Make", "Subsubsection",ExpressionUUID->"329f8397-7e97-46f0-890e-1267f7d53b6f"],

Cell[TextData[{
 "The ",
 StyleBox["mergeBitstrings", "Code"],
 " function will do the work of checking to see if bit strings can be merged \
and returning the result if they can. However, we need to give ",
 StyleBox["mergeBitstrings", "Code"],
 " the bit strings to test."
}], "Text",ExpressionUUID->"b0f055e5-08df-4db1-9011-7f7c0429a6c6"],

Cell["\<\
Recall that, in our example, we have successfully grouped the minterms by the \
number of 1s they contain.\
\>", "Text",ExpressionUUID->"15af5983-8deb-4dc6-a28a-6a95c725b426"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dataset", "[", "groups", "]"}]], "Input",
 CellLabel->
  "In[120]:=",ExpressionUUID->"1022aca7-a096-4bb1-8004-67d02e9a9941"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 4, "Length" -> 4, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[
           TypeSystem`Vector[
            TypeSystem`Atom[Integer], 4], TypeSystem`AnyLength], 4], "Shape" -> 
        TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[34], 
            TypeSystem`PackageScope`Limited[
             TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`UnknownShape], 4, {All}]]], 4, {}], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[874300026], 
        "Type" -> TypeSystem`Assoc[
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[
           TypeSystem`Vector[
            TypeSystem`Atom[Integer], 4], TypeSystem`AnyLength], 4], 
        "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[874300026]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover[
                    RawBoxes["2"], 
                    Style[
                    RawBoxes["2"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 668194050][{
                    
                    Key[2]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[668194050][
                   GeneralUtilities`Slice[
                    Key[2]]], "Mouse"], ImageSize -> {{34, Full}, Automatic}],
                 Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{1, 1, 0, 0}, ShowStringCharacters -> False], 
                    Style[
                    Style[{1, 1, 0, 0}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 668194050][{
                    
                    Key[2], 1}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[668194050][
                 
                  GeneralUtilities`Slice[
                   Key[2], 1]], "Mouse"]]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{1, 0, 1, 0}, ShowStringCharacters -> False], 
                    Style[
                    Style[{1, 0, 1, 0}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 668194050][{
                    
                    Key[2], 2}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[668194050][
                 
                  GeneralUtilities`Slice[
                   Key[2], 2]], "Mouse"]]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0, 1, 0, 1}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0, 1, 0, 1}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 668194050][{
                    
                    Key[2], 3}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[668194050][
                 
                  GeneralUtilities`Slice[
                   Key[2], 3]], "Mouse"]]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0, 0, 1, 1}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0, 0, 1, 1}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 668194050][{
                    
                    Key[2], 4}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[668194050][
                 
                  GeneralUtilities`Slice[
                   Key[2], 4]], "Mouse"]]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover[
                    RawBoxes["3"], 
                    Style[
                    RawBoxes["3"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 668194050][{
                    
                    Key[3]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[668194050][
                   GeneralUtilities`Slice[
                    Key[3]]], "Mouse"], ImageSize -> {{34, Full}, Automatic}],
                 Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{1, 0, 1, 1}, ShowStringCharacters -> False], 
                    Style[
                    Style[{1, 0, 1, 1}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 668194050][{
                    
                    Key[3], 1}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[668194050][
                 
                  GeneralUtilities`Slice[
                   Key[3], 1]], "Mouse"]]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0, 1, 1, 1}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0, 1, 1, 1}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 668194050][{
                    
                    Key[3], 2}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[668194050][
                 
                  GeneralUtilities`Slice[
                   Key[3], 2]], "Mouse"]]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover[
                    RawBoxes["1"], 
                    Style[
                    RawBoxes["1"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 668194050][{
                    
                    Key[1]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[668194050][
                   GeneralUtilities`Slice[
                    Key[1]]], "Mouse"], ImageSize -> {{34, Full}, Automatic}],
                 Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{1, 0, 0, 0}, ShowStringCharacters -> False], 
                    Style[
                    Style[{1, 0, 0, 0}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 668194050][{
                    
                    Key[1], 1}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[668194050][
                 
                  GeneralUtilities`Slice[
                   Key[1], 1]], "Mouse"]]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0, 1, 0, 0}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0, 1, 0, 0}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 668194050][{
                    
                    Key[1], 2}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[668194050][
                 
                  GeneralUtilities`Slice[
                   Key[1], 2]], "Mouse"]]}, {SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0, 0, 0, 1}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0, 0, 0, 1}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 668194050][{
                    
                    Key[1], 3}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[668194050][
                 
                  GeneralUtilities`Slice[
                   Key[1], 3]], "Mouse"]]}, {
               Item[
                Pane[
                 Annotation[
                  EventHandler[
                   MouseAppearance[
                    Mouseover[
                    RawBoxes["0"], 
                    Style[
                    RawBoxes["0"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                   TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 668194050][{
                    
                    Key[0]}]], 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[668194050][
                   GeneralUtilities`Slice[
                    Key[0]]], "Mouse"], ImageSize -> {{34, Full}, Automatic}],
                 Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{0, 0, 0, 0}, ShowStringCharacters -> False], 
                    Style[
                    Style[{0, 0, 0, 0}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 668194050][{
                    
                    Key[0], 1}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[668194050][
                 
                  GeneralUtilities`Slice[
                   Key[0], 1]], "Mouse"]]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 668194050][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 668194050]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[668194050][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[668194050][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {115., {125.8544921875, 131.1455078125}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellLabel->
  "Out[120]=",ExpressionUUID->"48913a4a-9ef4-4ec5-b939-33bafef617bb"]
}, Open  ]],

Cell[TextData[{
 "Next, we will produce a list containing all the bit strings formed by \
merging two bit strings represented in the ",
 StyleBox["groups", "Code"],
 " association. Note that there may be multiple ways to obtain the same bit \
string, so we will think of this collection as a set. We initialize to the \
empty set."
}], "Text",ExpressionUUID->"847a56b1-ac5c-4197-8e90-f23bfbe1adce"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Fbits1", "=", 
  RowBox[{"{", "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[121]:=",ExpressionUUID->"7652f75a-9396-4469-a10a-05f2634cff16"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellLabel->
  "Out[121]=",ExpressionUUID->"1f8e9904-c575-41ed-9922-1eb36038fe00"]
}, Open  ]],

Cell[TextData[{
 "Recall that it is only possible to merge bit strings whose number of 1s \
differs by 1. In other words, we only need to check bit strings when one has ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "16cbbb8e-501a-4882-b546-0e0b2ede5b40"],
 " 1s and one has ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "4b47d48c-6ffa-47c0-b3b5-ed2877aac28f"],
 " 1s. This suggests a loop with ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "401e9f4a-6645-440c-a7e2-d1f48c9ce2ac"],
 " ranging from 1 to the maximum keys of ",
 StyleBox["groups", "Code"],
 ". Within the body of the loop, we will consider the lists with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "-", "1"}], TraditionalForm]],ExpressionUUID->
  "08fc708b-2b26-4386-8753-5860c7d404a3"],
 " 1s and with ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "0a2791bd-7af3-46a3-8089-f67db26b76b5"],
 " 1s."
}], "Text",ExpressionUUID->"3a3cae4f-e342-420b-8a0c-3a5c88f61226"],

Cell["The loop is structured as follows:", "Text",ExpressionUUID->"0b663f42-6220-405c-8c3a-dbfd3d274a2b"],

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"n", "=", "1"}], ",", 
   RowBox[{"n", "\[LessEqual]", 
    RowBox[{"Max", "[", 
     RowBox[{"Keys", "[", "groups", "]"}], "]"}]}], ",", 
   RowBox[{"n", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"A", "=", 
     RowBox[{"groups", "[", 
      RowBox[{"n", "-", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"B", "=", 
     RowBox[{"groups", "[", "n", "]"}]}], ";"}]}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "search", " ", "for", " ", "bit", " ", "strings", " ", "from", " ", "A", 
    " ", "and", " ", "B", " ", "to", " ", "merge"}], " ", "*)"}], 
  "\[IndentingNewLine]", "]"}]], "myCode",
 Editable->False,ExpressionUUID->"8740d098-27b8-47d6-ab69-ef062a623366"],

Cell[TextData[{
 "After ",
 StyleBox["A", "Code"],
 " and ",
 StyleBox["B", "Code"],
 " have been defined, we need to compare every possible pair. We use a ",
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Do"], "FunctionLink"],
 " loop with indices for the members of ",
 StyleBox["A", "Code"],
 " and another for members of ",
 StyleBox["B", "Code"],
 ". Within the ",
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Do"], "FunctionLink"],
 " loop, we use ",
 StyleBox["mergeBitstrings", "Code"],
 " and store the result. If it is not false, we add it to the new list of bit \
strings, ",
 StyleBox["Fbits1", "Code"],
 "."
}], "Text",ExpressionUUID->"5c0dc9f0-cc8c-45a9-bb73-e5448ce1770c"],

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"n", "=", "1"}], ",", 
   RowBox[{"n", "\[LessEqual]", 
    RowBox[{"Max", "[", 
     RowBox[{"Keys", "[", "groups", "]"}], "]"}]}], ",", 
   RowBox[{"n", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"A", "=", 
     RowBox[{"groups", "[", 
      RowBox[{"n", "-", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"B", "=", 
     RowBox[{"groups", "[", "n", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"m", "=", 
        RowBox[{"mergeBitstrings", "[", 
         RowBox[{"a", ",", "b"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"m", "=!=", "False"}], ",", 
         RowBox[{"Fbits1", "=", 
          RowBox[{"Union", "[", 
           RowBox[{"Fbits1", ",", 
            RowBox[{"{", "m", "}"}]}], "]"}]}]}], "]"}]}], 
      "\[IndentingNewLine]", ",", 
      RowBox[{"{", 
       RowBox[{"a", ",", "A"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"b", ",", "B"}], "}"}]}], "\[IndentingNewLine]", "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[122]:=",ExpressionUUID->"0c2ee98d-c832-404e-9b66-fc7382c1a355"],

Cell[CellGroupData[{

Cell[BoxData["Fbits1"], "Input",
 CellLabel->
  "In[123]:=",ExpressionUUID->"7920c28e-b366-4434-b045-3edef1981031"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "\<\"-\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "\<\"-\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "\<\"-\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "\<\"-\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "\<\"-\"\>", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "\<\"-\"\>", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "\<\"-\"\>", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "\<\"-\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "\<\"-\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "\<\"-\"\>", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"-\"\>", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"-\"\>", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"-\"\>", ",", "1", ",", "0", ",", "0"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[123]=",ExpressionUUID->"b1b82361-f888-42e7-969a-d736f18465ad"]
}, Open  ]],

Cell["\<\
This is close to the function we want, but we need to think ahead a bit. \
Recall from the description of the Quine\[Dash]McCluskey process in the text \
that, in order to proceed with the second half of the method, we need to know \
which of the bit strings are prime implicants. That is, which bit strings are \
never used in a simplification.\
\>", "Text",ExpressionUUID->"9414bd5a-bf37-4bb2-b1b1-8dc628cc276b"],

Cell[TextData[{
 "We will track which bit strings are used as follows. Before the first loop, \
we create a set consisting of all of the bit strings in ",
 StyleBox["groups", "Code"],
 ". We can do this by applying ",
 StyleBox[ButtonBox["Flatten",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Flatten"], "FunctionLink"],
 " to the ",
 StyleBox[ButtonBox["Values",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Values"], "FunctionLink"],
 " of ",
 StyleBox["groups", "Code"],
 ", removing the sublist structure. To obtain the elements of the sublists of \
groups rather than just all the 0s and 1s, we need to use the option second \
argument of ",
 StyleBox[ButtonBox["Flatten",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Flatten"], "FunctionLink"],
 " to specify that we wish to flatten only the first level."
}], "Text",ExpressionUUID->"c54c3cd9-d618-4a4a-9f6a-2a83805e7f0d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{
   RowBox[{"Values", "[", "groups", "]"}], ",", "1"}], "]"}]], "Input",
 CellLabel->
  "In[124]:=",ExpressionUUID->"dc447363-7224-4982-895b-6f7058f7ea7f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[124]=",ExpressionUUID->"9517da99-b16e-436d-80a2-a22728943b59"]
}, Open  ]],

Cell[TextData[{
 "Then, each time ",
 StyleBox["mergeBitstrings", "Code"],
 " is successful, we remove the pair of bit strings from this set, using the ",
 StyleBox[ButtonBox["Complement",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Complement"], "FunctionLink"],
 " set operator. For example, to remove ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], TraditionalForm]],
  ExpressionUUID->"044c0b19-0605-4ecc-ab5d-8d941312f851"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], TraditionalForm]],
  ExpressionUUID->"a5a9e2c6-ec3e-4b2e-9a99-4b10742687ad"],
 ", we would execute the following expression:"
}], "Text",ExpressionUUID->"21fb8cef-84dc-47b1-a5d0-5ca323cfb41a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Complement", "[", 
  RowBox[{
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Values", "[", "groups", "]"}], ",", "1"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->
  "In[125]:=",ExpressionUUID->"6f17ce28-ab0a-434d-9989-34d3f1e7fab7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[125]=",ExpressionUUID->"ef7b4d51-9206-4125-b315-ef18e02394d8"]
}, Open  ]],

Cell["\<\
The function will return the list consisting of the next level of bit strings \
and the prime implicants from this stage. Here is our next attempt at the \
function.\
\>", "Text",ExpressionUUID->"0c96fdaf-157a-4917-a81e-f9498dcb6def"],

Cell[BoxData[
 RowBox[{
  RowBox[{"nextBitList1", "[", "lastgroups_List", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"nextL", "=", 
       RowBox[{"{", "}"}]}], ",", "primeImps", ",", "n", ",", "A", ",", "B", 
      ",", "a", ",", "b", ",", "m"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"primeImps", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Values", "[", "lastgroups", "]"}], ",", "1"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"n", "=", "1"}], ",", 
       RowBox[{"n", "\[LessEqual]", 
        RowBox[{"Max", "[", 
         RowBox[{"Keys", "[", "lastgroups", "]"}], "]"}]}], ",", 
       RowBox[{"n", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"A", "=", 
         RowBox[{"lastgroups", "[", 
          RowBox[{"n", "-", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"B", "=", 
         RowBox[{"lastgroups", "[", "n", "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"m", "=", 
            RowBox[{"mergeBitstrings", "[", 
             RowBox[{"a", ",", "b"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"m", "=!=", "False"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"nextL", "=", 
               RowBox[{"Union", "[", 
                RowBox[{"nextL", ",", 
                 RowBox[{"{", "m", "}"}]}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"primeImps", "=", 
               RowBox[{"Complement", "[", 
                RowBox[{"primeImps", ",", 
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b"}], "}"}]}], "]"}]}]}]}], 
            "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"a", ",", "A"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"b", ",", "B"}], "}"}]}], "\[IndentingNewLine]", "]"}]}]}],
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"nextL", ",", "primeImps"}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellLabel->
  "In[126]:=",ExpressionUUID->"b0a21bbb-84fb-485f-a80a-617ac2f41195"],

Cell["\<\
This still is not sufficient, however, because we also need to update the \
coverage dictionary as we create new bit strings. Recall that \
\[OpenCurlyDoubleQuote]coverage dictionary\[CloseCurlyDoubleQuote] is the \
name we gave to the association that records, for each bit string, which of \
the original minterms are covered by that bit string. The coverage dictionary \
was initialized with the bit strings formed from the minterms.\
\>", "Text",ExpressionUUID->"c12cd407-1f3f-4ca5-b849-e3666b3e3bc6"],

Cell[CellGroupData[{

Cell[BoxData["coverageDict"], "Input",
 CellLabel->
  "In[127]:=",ExpressionUUID->"4e4d8480-8968-4e71-a0ea-f1c687a6cd4f"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "4", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "5", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "6", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "7", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "8", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "9", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "10", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[127]=",ExpressionUUID->"ab43b9ee-3df4-4302-994a-ff7633082413"]
}, Open  ]],

Cell["\<\
Within our function, we need to update the coverage dictionary. To do this, \
we will pass it as a held argument to the function. \
\>", "Text",ExpressionUUID->"1cf57d26-101f-4ca9-bbc2-a6905e41b3ba"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"associationExample", "=", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<a\>\"", "\[Rule]", "1"}], ",", 
    RowBox[{"\"\<b\>\"", "\[Rule]", "2"}]}], "|>"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[128]:=",ExpressionUUID->"c8387738-8c6c-481a-97fa-dd30349e1542"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "2"}]}], "\[RightAssociation]"}]], "Output",\

 CellLabel->
  "Out[128]=",ExpressionUUID->"f809bd37-705f-4950-b1d6-21f0c6dc320a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"functionToChangeAssociation", ",", "HoldFirst"}], "]"}], ";", 
  RowBox[{
   RowBox[{"functionToChangeAssociation", "[", 
    RowBox[{"A_", ",", "i_", ",", "v_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"A", "[", "i", "]"}], "=", "v"}]}], "\[IndentingNewLine]", 
    "]"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[129]:=",ExpressionUUID->"419d6cc6-2e5a-4d7c-a194-f19884dcff50"],

Cell[TextData[{
 "The intent of this function is to add the key ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "aa4cc63a-a323-453a-9af4-beec5408494a"],
 " with value ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "42f99df3-4e95-4ca3-828b-24e846c6a4ac"],
 " to the association passed as the first argument. "
}], "Text",ExpressionUUID->"91fdc4ec-e179-45e4-998b-5bf7bf91df59"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"functionToChangeAssociation", "[", 
  RowBox[{"associationExample", ",", "\"\<c\>\"", ",", "3"}], "]"}]], "Input",\

 CellLabel->
  "In[130]:=",ExpressionUUID->"47c9a0b7-7d17-479c-8e71-45410b99c5c5"],

Cell[BoxData["3"], "Output",
 CellLabel->
  "Out[130]=",ExpressionUUID->"fee01879-a595-470b-ac0c-da4e5b8d8de2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["associationExample"], "Input",
 CellLabel->
  "In[131]:=",ExpressionUUID->"8e271a40-204e-48e3-bf0b-23d180c99b25"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"c\"\>", "\[Rule]", "3"}]}], "\[RightAssociation]"}]], "Output",\

 CellLabel->
  "Out[131]=",ExpressionUUID->"e80550d2-eaa5-4376-a70f-122d64a81b37"]
}, Open  ]],

Cell[TextData[{
 "We update the dictionary within the ",
 StyleBox["m=!=False", "Code"],
 " ",
 StyleBox[ButtonBox["If",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/If"], "FunctionLink"],
 " statement. When we form a new bit string ",
 StyleBox["m", "Code"],
 ", we obtain the set of minterms it covers by taking the union of the sets \
of minterms covered by the two bit strings that were merged. That is, ",
 StyleBox["coverDict[m]", "Code"],
 " is the union of ",
 StyleBox["coverDict[a]", "Code"],
 " and ",
 StyleBox["coverDict[b]", "Code"],
 ". ",
 "Note that bit strings formed beyond the first step are typically generated \
multiple times. However, each time they are generated they always cover the \
same set of original minterms."
}], "Text",ExpressionUUID->"9213c716-2e15-4af9-a384-d594949730f7"],

Cell[TextData[{
 "Here is the final version of ",
 StyleBox["nextBitList", "Code"],
 "."
}], "Text",ExpressionUUID->"ff6ed2d8-9fbf-4d9a-bf79-6534d9ac5b25"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"nextBitList", ",", "HoldRest"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nextBitList", "[", 
   RowBox[{"lastgroups_", ",", "coverDict_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"nextL", "=", 
       RowBox[{"{", "}"}]}], ",", "primeImps", ",", "n", ",", "A", ",", "B", 
      ",", "a", ",", "b", ",", "m"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"primeImps", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Values", "[", "lastgroups", "]"}], ",", "1"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"n", "=", "1"}], ",", 
       RowBox[{"n", "\[LessEqual]", 
        RowBox[{"Max", "[", 
         RowBox[{"Keys", "[", "lastgroups", "]"}], "]"}]}], ",", 
       RowBox[{"n", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"KeyExistsQ", "[", 
           RowBox[{"lastgroups", ",", "n"}], "]"}], "&&", 
          RowBox[{"KeyExistsQ", "[", 
           RowBox[{"lastgroups", ",", 
            RowBox[{"n", "-", "1"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"A", "=", 
           RowBox[{"lastgroups", "[", 
            RowBox[{"n", "-", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"B", "=", 
           RowBox[{"lastgroups", "[", "n", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Do", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"m", "=", 
              RowBox[{"mergeBitstrings", "[", 
               RowBox[{"a", ",", "b"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"m", "=!=", "False"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"nextL", "=", 
                 RowBox[{"Union", "[", 
                  RowBox[{"nextL", ",", 
                   RowBox[{"{", "m", "}"}]}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"primeImps", "=", 
                 RowBox[{"Complement", "[", 
                  RowBox[{"primeImps", ",", 
                   RowBox[{"{", 
                    RowBox[{"a", ",", "b"}], "}"}]}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"coverDict", "[", "m", "]"}], "=", 
                 RowBox[{"Union", "[", 
                  RowBox[{
                   RowBox[{"coverDict", "[", "a", "]"}], ",", 
                   RowBox[{"coverDict", "[", "b", "]"}]}], "]"}]}], ";"}]}], 
              "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", ",", 
            RowBox[{"{", 
             RowBox[{"a", ",", "A"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"b", ",", "B"}], "}"}]}], "\[IndentingNewLine]", 
           "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"nextL", ",", "primeImps"}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[132]:=",ExpressionUUID->"6ff30cd9-84ec-42f2-93fc-c7a466f219e9"],

Cell[TextData[{
 "We apply it to ",
 StyleBox["groups", "Code"],
 " to obtain ",
 StyleBox["Fbits1", "Code"],
 " and ",
 StyleBox["primes1", "Code"],
 "."
}], "Text",ExpressionUUID->"d2887224-78df-4214-9f2c-5d5582fc2a63"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"Fbits1", ",", "primes1"}], "}"}], "=", 
  RowBox[{"nextBitList", "[", 
   RowBox[{"groups", ",", "coverageDict"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[134]:=",ExpressionUUID->"7c3c8ca7-d0e5-401f-9ec5-90a1f29cdfc0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "\<\"-\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "\<\"-\"\>", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "\<\"-\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "\<\"-\"\>", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "\<\"-\"\>", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "\<\"-\"\>", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "\<\"-\"\>", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1", ",", "\<\"-\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "\<\"-\"\>", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "\<\"-\"\>", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"-\"\>", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"-\"\>", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"-\"\>", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[134]=",ExpressionUUID->"ecd6a1d2-003a-4576-92c8-35f7811c30c2"]
}, Open  ]],

Cell["We see that there are", "Text",ExpressionUUID->"e1b34c29-85d1-48f9-a54a-e96357527019"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "Fbits1", "]"}]], "Input",
 CellLabel->
  "In[135]:=",ExpressionUUID->"3ad400c8-8253-47fa-a258-c8541cc1ecf7"],

Cell[BoxData["13"], "Output",
 CellLabel->
  "Out[135]=",ExpressionUUID->"4c70965a-9663-45fa-abac-136fadf1137b"]
}, Open  ]],

Cell["\<\
bit strings in the second level, but no prime implicants coming from the \
first pass.\
\>", "Text",ExpressionUUID->"c44cd4de-d6ff-436e-8855-da402ae484d1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "primes1", "]"}]], "Input",
 CellLabel->
  "In[136]:=",ExpressionUUID->"b4d5df9c-9f28-46a2-996b-e331fddb9265"],

Cell[BoxData["0"], "Output",
 CellLabel->
  "Out[136]=",ExpressionUUID->"ffc2f6d9-7854-42f3-9e1a-df0e3bb81e4a"]
}, Open  ]],

Cell[TextData[{
 "In addition, almost as a side effect, the function has updated ",
 StyleBox["coverageDict", "Code"],
 "."
}], "Text",ExpressionUUID->"9a951843-2d7e-43de-bfc3-65b4827f8a5d"],

Cell[CellGroupData[{

Cell[BoxData["coverageDict"], "Input",
 CellLabel->
  "In[137]:=",ExpressionUUID->"38fa15ab-b25d-4d01-8705-2cd25e774fa4"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "4", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "5", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "6", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "7", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "8", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "9", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "10", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"-\"\>", ",", "0", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"4", ",", "10"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "\<\"-\"\>", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"7", ",", "10"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "\<\"-\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"9", ",", "10"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "\<\"-\"\>", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "\<\"-\"\>", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"-\"\>", ",", "1", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "7"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", "\<\"-\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"6", ",", "7"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "\<\"-\"\>", ",", "0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"6", ",", "9"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "\<\"-\"\>", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"8", ",", "9"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "1", ",", "\<\"-\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "\<\"-\"\>", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"5", ",", "6"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"-\"\>", ",", "0", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "8"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "\<\"-\"\>", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"5", ",", "8"}], "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[137]=",ExpressionUUID->"8f3f19f0-1356-43df-9586-b23947049bbc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Repeating", "Subsubsection",ExpressionUUID->"cdfddbbf-3d9c-48e6-bb7b-5e5c19c993f9"],

Cell["Step 4 is to repeat steps 2 and 3.", "Text",ExpressionUUID->"87041d5a-adac-43cd-8cd1-e3293d521d10"],

Cell[TextData[{
 "The ",
 StyleBox["Fbits1", "Code"],
 " list takes the place of ",
 StyleBox["Fbits", "Code",
  IgnoreSpellCheck->True],
 ". We apply ",
 StyleBox[ButtonBox["GroupBy",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GroupBy"], "FunctionLink"],
 " to produce ",
 StyleBox["groups1", "Code"],
 "."
}], "Text",ExpressionUUID->"f4e2d54a-1a75-4289-b1ab-ec11bb3d80dd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"groups1", "=", 
  RowBox[{"GroupBy", "[", 
   RowBox[{"Fbits1", ",", 
    RowBox[{"Count", "[", "1", "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[138]:=",ExpressionUUID->"a720c643-385e-4e63-9798-f98c0c70a260"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"0", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "\<\"-\"\>"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "\<\"-\"\>", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\<\"-\"\>", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
   ",", 
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "\<\"-\"\>", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0", ",", "\<\"-\"\>"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "\<\"-\"\>", ",", "0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "\<\"-\"\>", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "\<\"-\"\>", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\<\"-\"\>", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
   ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "\<\"-\"\>", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "\<\"-\"\>", ",", "1", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "1", ",", "\<\"-\"\>"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\<\"-\"\>", ",", "0", ",", "1", ",", "1"}], "}"}]}], 
     "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[138]=",ExpressionUUID->"5ed629b8-6a5c-43e4-a71b-2438f79ac1ca"]
}, Open  ]],

Cell[TextData[{
 "Then, applying ",
 StyleBox["nextBitList", "Code"],
 " to ",
 StyleBox["groups1", "Code"],
 " produces ",
 StyleBox["Fbits2", "Code"],
 " and ",
 StyleBox["primes2", "Code"],
 "."
}], "Text",ExpressionUUID->"57026caa-8e9e-4429-9499-83f332737520"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"Fbits2", ",", "primes2"}], "}"}], "=", 
  RowBox[{"nextBitList", "[", 
   RowBox[{"groups1", ",", "coverageDict"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[139]:=",ExpressionUUID->"6033966a-bd9e-4228-89a6-43d1cd4d80c7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "\<\"-\"\>", ",", "0", ",", "\<\"-\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "\<\"-\"\>", ",", "\<\"-\"\>", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"-\"\>", ",", "\<\"-\"\>", ",", "0", ",", "0"}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1", ",", "\<\"-\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "\<\"-\"\>", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"-\"\>", ",", "0", ",", "1", ",", "1"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[139]=",ExpressionUUID->"728e7017-5a7e-49a4-9e63-788ce075a1d7"]
}, Open  ]],

Cell["\<\
We see that we have found three prime implicants. The coverage dictionary was \
further expanded to include the new bit strings.\
\>", "Text",ExpressionUUID->"c26b22fd-27a0-44e2-b021-a0552c1d130e"],

Cell[TextData[{
 "Do the same thing again with ",
 StyleBox["Fbits2", "Code"],
 "."
}], "Text",ExpressionUUID->"3dc61c29-6dad-4073-b334-37ac1ae7c917"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"groups2", "=", 
  RowBox[{"GroupBy", "[", 
   RowBox[{"Fbits2", ",", 
    RowBox[{"Count", "[", "1", "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[140]:=",ExpressionUUID->"f2e150f0-24f5-42e2-8896-8248a1ce3693"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"0", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "\<\"-\"\>", ",", "0", ",", "\<\"-\"\>"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"\<\"-\"\>", ",", "\<\"-\"\>", ",", "0", ",", "0"}], "}"}]}], 
     "}"}]}], ",", 
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"0", ",", "\<\"-\"\>", ",", "\<\"-\"\>", ",", "1"}], "}"}], 
     "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[140]=",ExpressionUUID->"d61ee5f5-b412-40f8-ae0f-bcba8c39dc33"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"Fbits3", ",", "primes3"}], "}"}], "=", 
  RowBox[{"nextBitList", "[", 
   RowBox[{"groups2", ",", "coverageDict"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[141]:=",ExpressionUUID->"cbddca11-cd6c-4391-94da-c1101036ee0d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "\<\"-\"\>", ",", "0", ",", "\<\"-\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"-\"\>", ",", "\<\"-\"\>", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "\<\"-\"\>", ",", "\<\"-\"\>", ",", "1"}], "}"}]}], 
    "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[141]=",ExpressionUUID->"b32ec37f-46ac-4c92-bc4e-149c525d6320"]
}, Open  ]],

Cell[TextData[{
 "This time, ",
 StyleBox["Fbits3", "Code"],
 " is empty, which indicates that no more merging is possible and all prime \
implicants have been found."
}], "Text",ExpressionUUID->"c3853485-087f-4dd8-b413-8d4c398a69ee"],

Cell["\<\
This part of the process concludes by forming the list of all the prime \
implicants.\
\>", "Text",ExpressionUUID->"b4eadc03-93cc-4c0e-8fba-563a9a4c0e7c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"allprimeImps", "=", 
  RowBox[{"Union", "[", 
   RowBox[{"primes1", ",", "primes2", ",", "primes3"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[142]:=",ExpressionUUID->"a1730ee9-e96a-4879-ba87-9f6cad5d4201"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "\<\"-\"\>", ",", "0", ",", "\<\"-\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "\<\"-\"\>", ",", "\<\"-\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "\<\"-\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "\<\"-\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"-\"\>", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"-\"\>", ",", "\<\"-\"\>", ",", "0", ",", "0"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[142]=",ExpressionUUID->"8a1d2249-b25c-4c1c-a171-7c9c54145952"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Forming the Coverage Table", "Subsubsection",ExpressionUUID->"aec8c919-0c6f-4394-ab71-1116ccd9d1d7"],

Cell["\<\
Now that we have identified all of the prime implicants, we will use the \
coverage dictionary to create the coverage table.\
\>", "Text",ExpressionUUID->"941f0089-8d99-411f-afc5-9a840b696e56"],

Cell["Take a look at the final state of the coverage dictionary.", "Text",ExpressionUUID->"4473570e-e0ce-4f33-8e2b-e6ceabe9a13a"],

Cell[CellGroupData[{

Cell[BoxData["coverageDict"], "Input",
 CellLabel->
  "In[143]:=",ExpressionUUID->"dc601498-6fc0-4d5b-b92a-f9e1d804bf84"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "4", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "5", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "6", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "7", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "8", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "9", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", "10", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"-\"\>", ",", "0", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"4", ",", "10"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "\<\"-\"\>", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"7", ",", "10"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "\<\"-\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"9", ",", "10"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "\<\"-\"\>", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "\<\"-\"\>", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"-\"\>", ",", "1", ",", "0", ",", "0"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "7"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", "\<\"-\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"6", ",", "7"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "\<\"-\"\>", ",", "0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"6", ",", "9"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "\<\"-\"\>", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"8", ",", "9"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "1", ",", "\<\"-\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "\<\"-\"\>", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"5", ",", "6"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"-\"\>", ",", "0", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "8"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "\<\"-\"\>", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"5", ",", "8"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "\<\"-\"\>", ",", "0", ",", "\<\"-\"\>"}], "}"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"6", ",", "7", ",", "9", ",", "10"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"-\"\>", ",", "\<\"-\"\>", ",", "0", ",", "0"}], "}"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "7", ",", "10"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "\<\"-\"\>", ",", "\<\"-\"\>", ",", "1"}], "}"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"5", ",", "6", ",", "8", ",", "9"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[143]=",ExpressionUUID->"4cba92d2-cf4d-4e19-8091-315d0020c900"]
}, Open  ]],

Cell[TextData[{
 "Each bit string, and in particular each prime implicant, is a key in this \
table. The corresponding entry is the set of integers which are the indices \
to the original minterms in ",
 StyleBox["Fbits", "Code",
  IgnoreSpellCheck->True],
 ". Thus, to determine which of the original minterms are covered by each \
prime implicant, we just look it up in the association."
}], "Text",ExpressionUUID->"8425b6a7-5f26-4470-bf21-94cf9668653c"],

Cell["\<\
We will model the coverage table as a matrix. Each row corresponds to a prime \
implicant, so there will be\
\>", "Text",ExpressionUUID->"1d898d40-bc4d-46d0-b4e9-b24594e654a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "allprimeImps", "]"}]], "Input",
 CellLabel->
  "In[144]:=",ExpressionUUID->"34a8ff9c-2094-4a50-8cd9-303d45366e2b"],

Cell[BoxData["6"], "Output",
 CellLabel->
  "Out[144]=",ExpressionUUID->"d1bcda6b-cda2-449c-b9a6-e54953f207ab"]
}, Open  ]],

Cell["rows, and each column corresponds to a minterm, so there are", "Text",ExpressionUUID->"31187735-6528-40a5-ab80-910633b69d8d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "Fbits", "]"}]], "Input",
 CellLabel->
  "In[145]:=",ExpressionUUID->"8a339ef4-ddee-4287-8a8d-fb797196b92e"],

Cell[BoxData["10"], "Output",
 CellLabel->
  "Out[145]=",ExpressionUUID->"3e5f8eab-dcdf-4031-b0d0-7e7f6dbc3330"]
}, Open  ]],

Cell[TextData[{
 "columns. The entries in the matrix will be 0s and 1s with 1 in position ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"i", ",", "j"}], ")"}], TraditionalForm]],ExpressionUUID->
  "2d2d2b37-13a9-493a-a10e-8f785fe73439"],
 " indicating that the prime implicant at position ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "13721167-ec0d-41b3-83a1-7980f2298477"],
 " in ",
 StyleBox["allprimeImps", "Code"],
 " covers the minterm at position ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "0d101714-4a64-4a7a-8620-906779ccc163"],
 " in ",
 StyleBox["Fbits", "Code",
  IgnoreSpellCheck->True],
 "."
}], "Text",ExpressionUUID->"7d919ecb-3017-4179-8b3f-55d7bd1f8399"],

Cell[TextData[{
 "We use ",
 StyleBox[ButtonBox["ConstantArray",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ConstantArray"], "FunctionLink"],
 " with first argument 0 and second argument a list consisting of the number \
of rows and columns to form a matrix of all 0s of the appropriate size."
}], "Text",ExpressionUUID->"8aa51b04-33fb-4ed0-862c-c634c2a99052"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ConstantArray", "[", 
   RowBox[{"0", ",", 
    RowBox[{"{", 
     RowBox[{"6", ",", "10"}], "}"}]}], "]"}], "//", "MatrixForm"}]], "Input",\

 CellLabel->
  "In[146]:=",ExpressionUUID->"6c137ff4-b3a0-49d2-8753-0403ad4c5a44"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[146]//MatrixForm=",ExpressionUUID->"11a8b1ab-f95f-42fa-8e22-\
2c8a66e5ff7a"]
}, Open  ]],

Cell["\<\
To enter 1s in the appropriate positions, we loop over the rows, considering \
each prime implicant in turn. For each prime implicant, we look up its entry \
in the coverage dictionary to obtain the set of minterms it covers. For each \
of those minterms, we place a 1 in the matrix.\
\>", "Text",ExpressionUUID->"b7a486e7-9cd9-4d87-a9db-9e402134acb0"],

Cell["The following function initializes the coverage table.", "Text",ExpressionUUID->"468eb30b-06aa-4bc7-9b39-be7605800681"],

Cell[BoxData[
 RowBox[{
  RowBox[{"initCoverageMatrix", "[", 
   RowBox[{
   "minterms_List", ",", "primeImps_List", ",", "coverDict_Association"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"M", ",", "i", ",", "C", ",", "j"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"M", "=", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"0", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Length", "[", "primeImps", "]"}], ",", 
          RowBox[{"Length", "[", "minterms", "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"Length", "[", "primeImps", "]"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"C", "=", 
         RowBox[{"coverDict", "[", 
          RowBox[{"primeImps", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"M", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "j"}], "]"}], "]"}], "=", "1"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "C"}], "}"}]}], "]"}]}]}], "\[IndentingNewLine]",
       "]"}], ";", "\[IndentingNewLine]", "M"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[147]:=",ExpressionUUID->"8fae5d79-066c-41ef-a5c0-448c1eef47ee"],

Cell["\<\
Applied to our example, this produces the following coverage table.\
\>", "Text",ExpressionUUID->"07a2f0ed-5380-46d6-af7e-a02ebc805114"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"coverageTable", "=", 
   RowBox[{"initCoverageMatrix", "[", 
    RowBox[{"Fbits", ",", "allprimeImps", ",", "coverageDict"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "coverageTable", "]"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[148]:=",ExpressionUUID->"41810d06-19e6-415d-893e-b949fe9a5610"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0", "0", "0", "1", "1", "0", "1", "1"},
     {"0", "0", "0", "0", "1", "1", "0", "1", "1", "0"},
     {"0", "1", "1", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "1", "1", "0", "0", "0", "0", "0", "0"},
     {"0", "1", "0", "0", "0", "0", "0", "1", "0", "0"},
     {"1", "0", "0", "1", "0", "0", "1", "0", "0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[149]//MatrixForm=",ExpressionUUID->"82f109f9-eb74-4d9f-bd3e-\
3813631a77f2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Manipulating the Matrix", "Subsubsection",ExpressionUUID->"0ac3cc36-3a39-4b68-a84f-efc4771eefbd"],

Cell["\<\
Once the coverage table is set up, we move to steps 6 and 7, determining \
which prime implicants to include in the minimal expression. In step 6, we \
identify the essential prime implicants and in step 7 we identify which of \
the nonessential prime implicants we will include. We will see how to \
identify the prime implicants to use in a moment.\
\>", "Text",ExpressionUUID->"4a097558-7919-45f2-8494-eece496bc929"],

Cell["\<\
To aid in performing both steps 6 and 7, we will be manipulating the coverage \
table. Once we have decided to include a particular prime implicant in the \
minimal expression, we take three actions.\
\>", "Text",ExpressionUUID->"59ef71f5-69c9-4bc5-a8cf-83bd55ebdfc5"],

Cell[TextData[{
 "First, record the decision by adding the prime implicant to a new list, say \
",
 StyleBox["minBits", "Code"],
 ", the list of bit strings to be included in the minimal expression."
}], "Text",ExpressionUUID->"22201437-65a3-4494-b61d-d739977b1b0c"],

Cell["\<\
Second, delete that prime implicant\[CloseCurlyQuote]s row from the coverage \
table and delete the columns corresponding to the minterms it covered. We \
know the prime implicant will be in the expression and thus the minterms it \
covers are satisfied. Hence, there is no longer any need to keep track of \
that information.\
\>", "Text",ExpressionUUID->"dd6d1458-25f8-4ab9-a397-7aa43897d934"],

Cell[TextData[{
 "Third, delete the prime implicant and the minterms it covers from the lists \
storing them (",
 StyleBox["allprimeImps", "Code"],
 " and ",
 StyleBox["Fbits", "Code",
  IgnoreSpellCheck->True],
 "). This is to ensure that the indices of ",
 StyleBox["allprimeImps", "Code"],
 " and ",
 StyleBox["Fbits", "Code",
  IgnoreSpellCheck->True],
 " continue to match the row and column numbers of the matrix."
}], "Text",ExpressionUUID->"655820ef-6a42-46ab-8e24-dffab12b5fda"],

Cell["\<\
We will now write a function that implements these actions. Its input will be \
the index to the prime implicant that has been chosen. It will also accept \
the names of the coverage matrix, the list of minterms, and the list of prime \
implicants. All of these will be modified in the function (refer to the \
subsection on \[OpenCurlyDoubleQuote]Modifying arguments\
\[CloseCurlyDoubleQuote] above). The function will return the bit string of \
the prime implicant that was chosen.\
\>", "Text",ExpressionUUID->"17048dfc-c60a-4ef5-a94c-aae5106f5c2e"],

Cell[TextData[{
 "Our function will be called ",
 StyleBox["updateCT", "Code"],
 ", for \[OpenCurlyDoubleQuote]update coverage table.\[CloseCurlyDoubleQuote] \
The ",
 StyleBox["minBits", "Code"],
 " list, the list of chosen prime implicants, will be updated via the return \
value. This accomplishes the first task for this function."
}], "Text",ExpressionUUID->"b4ac87f1-2d4a-4544-a087-01d04a8371eb"],

Cell["\<\
Second, we must delete the row corresponding to the chosen prime implicant \
and the columns corresponding to the minterms covered by that implicant. \
Suppose, in our example, that we have decided to include the fourth prime \
implicant in the final result. This is:\
\>", "Text",ExpressionUUID->"04bcb8b3-0f7d-440e-b863-0f6a59b3d2a7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"allprimeImps", "[", 
  RowBox[{"[", "4", "]"}], "]"}]], "Input",
 CellLabel->
  "In[150]:=",ExpressionUUID->"0b756f26-fbef-44c0-9f97-9aebf5bb405a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "0", ",", "\<\"-\"\>", ",", "0"}], "}"}]], "Output",
 CellLabel->
  "Out[150]=",ExpressionUUID->"45d39fc9-3b7d-463f-bcb0-f1230a6354d2"]
}, Open  ]],

Cell[TextData[{
 "From ",
 StyleBox["coverageTable", "Code"],
 ", we need to remove row 4 (since this corresponds to the prime implicant). \
We also need to remove the columns corresponding to the minterms covered by \
this prime implicant. To determine which columns are to be removed, we find \
the locations of the 1s in the row of the matrix."
}], "Text",ExpressionUUID->"ab743253-4afe-4afc-a2ed-4e6bc000a92a"],

Cell[TextData[{
 "To determine the locations of the 1s, we loop over the columns checking \
each position in row 4 to see if it is 1 or not. We use the ",
 StyleBox[ButtonBox["Dimensions",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dimensions"], "FunctionLink"],
 " function to determine the number of columns. For a matrix, ",
 StyleBox[ButtonBox["Dimensions",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dimensions"], "FunctionLink"],
 " returns a list whose elements are the number of rows and columns."
}], "Text",ExpressionUUID->"4fad279c-0740-414f-bbff-e2e049613448"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"covered", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{"i", "=", "1"}], ",", 
    RowBox[{"i", "\[LessEqual]", 
     RowBox[{
      RowBox[{"Dimensions", "[", "coverageTable", "]"}], "[", 
      RowBox[{"[", "2", "]"}], "]"}]}], ",", 
    RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"coverageTable", "[", 
        RowBox[{"[", 
         RowBox[{"4", ",", "i"}], "]"}], "]"}], "\[Equal]", "1"}], ",", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"covered", ",", "i"}], "]"}]}], "]"}]}], "\[IndentingNewLine]",
    "]"}], ";"}], "\[IndentingNewLine]", "covered"}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[151]:=",ExpressionUUID->"949fc952-5f11-44dc-a023-4b4ae403d436"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "4"}], "}"}]], "Output",
 CellLabel->
  "Out[153]=",ExpressionUUID->"8c59c426-c2bc-4c38-809e-d824cb9b9bd2"]
}, Open  ]],

Cell[TextData[{
 "We now know that we need to remove row 4 and columns 3 and 4. To do this, \
we will use a complicated selection. Recall that ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") can be used with a list within the double brackets to select specific \
elements. For example, "
}], "Text",ExpressionUUID->"8cfdce1b-1323-41ee-a0bc-93d6894acb7d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\"", ",", 
    "\"\<e\>\"", ",", "\"\<f\>\"", ",", "\"\<g\>\""}], "}"}], "[", 
  RowBox[{"[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4", ",", "5", ",", "6"}], "}"}], "]"}], 
  "]"}]], "Input",
 CellLabel->
  "In[154]:=",ExpressionUUID->"e1be50d8-1eed-4bff-b125-3ddf1e011af8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"d\"\>", ",", "\<\"e\"\>", 
   ",", "\<\"f\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[154]=",ExpressionUUID->"ff62e01e-458c-4d2c-90be-e7547dfa65f2"]
}, Open  ]],

Cell["\<\
The same is true for matrices. Given a matrix, a list of rows, and a list of \
columns, you can obtain the submatrix containing only the specified rows and \
columns as illustrated below.\
\>", "Text",ExpressionUUID->"8d872cd2-aafb-41a2-8169-60c9b834681e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"exampleMatrix", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     SubscriptBox["a", 
      RowBox[{"{", 
       RowBox[{"i", ",", "j"}], "}"}]], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "6"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"exampleMatrix", "//", "MatrixForm"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[155]:=",ExpressionUUID->"a1aa15fa-8ae6-4466-b783-f7fb2ff585a0"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"1", ",", "4"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"1", ",", "5"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"1", ",", "6"}], "}"}]]},
     {
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"2", ",", "5"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"2", ",", "6"}], "}"}]]},
     {
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"3", ",", "1"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"3", ",", "2"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"3", ",", "3"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"3", ",", "5"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"3", ",", "6"}], "}"}]]},
     {
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"4", ",", "1"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"4", ",", "2"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"4", ",", "3"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"4", ",", "4"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"4", ",", "5"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"4", ",", "6"}], "}"}]]},
     {
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"5", ",", "1"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"5", ",", "2"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"5", ",", "3"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"5", ",", "4"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"5", ",", "5"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6"}], "}"}]]},
     {
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"6", ",", "1"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"6", ",", "2"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"6", ",", "3"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"6", ",", "4"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"6", ",", "5"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"6", ",", "6"}], "}"}]]},
     {
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"7", ",", "1"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"7", ",", "2"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"7", ",", "3"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"7", ",", "4"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"7", ",", "5"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"7", ",", "6"}], "}"}]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[156]//MatrixForm=",ExpressionUUID->"0c06f576-c8a8-4b16-8f29-\
161fc9a108e7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"exampleMatrix", "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "4", ",", "6", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "6"}], "}"}]}], "]"}], "]"}], "//",
   "MatrixForm"}]], "Input",
 CellLabel->
  "In[157]:=",ExpressionUUID->"a45df235-9adc-4db3-b3ce-e0c12c6c7d98"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"1", ",", "6"}], "}"}]]},
     {
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"2", ",", "6"}], "}"}]]},
     {
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"4", ",", "1"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"4", ",", "2"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"4", ",", "3"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"4", ",", "6"}], "}"}]]},
     {
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"6", ",", "1"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"6", ",", "2"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"6", ",", "3"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"6", ",", "6"}], "}"}]]},
     {
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"7", ",", "1"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"7", ",", "2"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"7", ",", "3"}], "}"}]], 
      SubscriptBox["a", 
       RowBox[{"{", 
        RowBox[{"7", ",", "6"}], "}"}]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[157]//MatrixForm=",ExpressionUUID->"af57d7fc-53fd-4e32-bfff-\
57da1aa831ac"]
}, Open  ]],

Cell["\<\
This is the matrix that results from deleting the 3rd and 5th rows, and the \
4th and 5th columns.\
\>", "Text",ExpressionUUID->"fe6bf1ea-f5b1-40a0-9397-b0c96c191686"],

Cell[TextData[{
 "So for the coverage table, we can obtain the modified matrix by forming the \
lists of row and column numbers that should remain and then apply ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ")."
}], "Text",ExpressionUUID->"e57b2ed5-f6f4-47db-8ee6-883110921bad"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"remainingRows", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "5", ",", "6"}], "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[158]:=",ExpressionUUID->"0de3ca41-2be2-4420-8056-dd915b3ef948"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "5", ",", "6"}], "}"}]], "Output",
 CellLabel->
  "Out[158]=",ExpressionUUID->"0429ba38-d985-4938-8c60-a71b8b2c26b9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"remainingColumns", "=", 
  RowBox[{"Complement", "[", 
   RowBox[{
    RowBox[{"Range", "[", 
     RowBox[{"Length", "[", "Fbits", "]"}], "]"}], ",", "covered"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[159]:=",ExpressionUUID->"cc68c41a-cd56-49be-b3d8-ac4a753dfe0d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", 
   "10"}], "}"}]], "Output",
 CellLabel->
  "Out[159]=",ExpressionUUID->"c98a813b-7b0f-4005-9d88-0991ad73bf76"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"coverageTable", "[", 
   RowBox[{"[", 
    RowBox[{"remainingRows", ",", "remainingColumns"}], "]"}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[160]:=",ExpressionUUID->"8c0ca997-49e7-4485-a27d-24a6ff81fa28"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0", "1", "1", "0", "1", "1"},
     {"0", "0", "1", "1", "0", "1", "1", "0"},
     {"0", "1", "0", "0", "0", "0", "0", "0"},
     {"0", "1", "0", "0", "0", "1", "0", "0"},
     {"1", "0", "0", "0", "1", "0", "0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[160]//MatrixForm=",ExpressionUUID->"62f72268-fff3-42c0-a13d-\
eca2d77ad02c"]
}, Open  ]],

Cell[TextData[{
 "The reader is encouraged to compare this to the original matrix. Note that \
in this example, we have not actually modified ",
 StyleBox["coverageTable", "Code"],
 "."
}], "Text",ExpressionUUID->"8d6592fd-bb28-4ccc-961d-92e110cc4b1a"],

Cell[TextData[{
 "The last tasks are to remove the selected prime implicant from the list of \
prime implicants, and remove the covered minterms from its list. Note that ",
 StyleBox["remainingRows", "Code"],
 " and ",
 StyleBox["remainingColumns", "Code"],
 " are indices into the ",
 StyleBox["allprimeImps", "Code"],
 " list and the list of minterms. Applying ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"], "FunctionLink"],
 " (",
 StyleBox["[[\[Ellipsis]]]", "Code"],
 ") produces the desired outcome."
}], "Text",ExpressionUUID->"9e221339-e0d2-43a3-9382-fc68788f00f1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"allprimeImps", "[", 
  RowBox[{"[", "remainingRows", "]"}], "]"}]], "Input",
 CellLabel->
  "In[161]:=",ExpressionUUID->"b5811433-f514-4e7f-9e9d-9d6811dd1343"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "\<\"-\"\>", ",", "0", ",", "\<\"-\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "\<\"-\"\>", ",", "\<\"-\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "\<\"-\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"-\"\>", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"-\"\>", ",", "\<\"-\"\>", ",", "0", ",", "0"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[161]=",ExpressionUUID->"6a3f6c11-9479-4702-97fd-a61e3c1d1b45"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Fbits", "[", 
  RowBox[{"[", "remainingColumns", "]"}], "]"}]], "Input",
 CellLabel->
  "In[162]:=",ExpressionUUID->"648cdb8f-36c9-4786-b8a4-f5036300f96a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[162]=",ExpressionUUID->"d9cbb1d6-fbb8-4b2c-8a33-b810efe32ce4"]
}, Open  ]],

Cell["Here is the function.", "Text",ExpressionUUID->"d144fcad-3e43-477f-8d01-fd5608f45a74"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"updateCT", ",", "HoldRest"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"updateCT", "[", 
   RowBox[{
   "newPI_", ",", "coverTable_", ",", "minterms_", ",", "primeImps_"}], "]"}],
   ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "newPIbitstring", ",", "numRows", ",", "numCols", ",", "covered", ",", 
      "i", ",", "remainingRows", ",", "remainingCols"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newPIbitstring", "=", 
      RowBox[{"primeImps", "[", 
       RowBox[{"[", "newPI", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"numRows", ",", "numCols"}], "}"}], "=", 
      RowBox[{"Dimensions", "[", "coverTable", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"covered", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", "numCols"}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"coverTable", "[", 
           RowBox[{"[", 
            RowBox[{"newPI", ",", "i"}], "]"}], "]"}], "\[Equal]", "1"}], ",", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"covered", ",", "i"}], "]"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"remainingRows", "=", 
      RowBox[{"Delete", "[", 
       RowBox[{
        RowBox[{"Range", "[", "numRows", "]"}], ",", "newPI"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"remainingCols", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"Range", "[", "numCols", "]"}], ",", "covered"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"coverTable", "=", 
      RowBox[{"coverTable", "[", 
       RowBox[{"[", 
        RowBox[{"remainingRows", ",", "remainingCols"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"primeImps", "=", 
      RowBox[{"primeImps", "[", 
       RowBox[{"[", "remainingRows", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"minterms", "=", 
      RowBox[{"minterms", "[", 
       RowBox[{"[", "remainingCols", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "newPIbitstring"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[163]:=",ExpressionUUID->"34f7a141-f02e-4ca9-989d-84e76c8b28c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Finding Essential Prime Implicants", "Subsubsection",ExpressionUUID->"3c6f93f3-1a62-44c5-a9e2-d11f5bdb8ebf"],

Cell["\<\
Next, we write a function to identify the essential prime implicants. Recall \
that a prime implicant is essential when it is the only prime implicant to \
cover some minterm. In terms of the coverage table, this is equivalent to the \
existence of a column with only one 1.\
\>", "Text",ExpressionUUID->"f6c51f0f-23d6-41f0-89cd-350009e0a951"],

Cell["\<\
We will locate the essential prime implicants as follows. First, we \
initialize the set of essential prime implicants to the empty list.\
\>", "Text",ExpressionUUID->"321e176e-dec9-495d-8ad0-c84eb122de34"],

Cell[TextData[{
 "We proceed in a manner similar to the ",
 StyleBox["mergeBitstrings", "Code"],
 " function. We use a ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"], "FunctionLink"],
 " loop to step through the columns of the coverage table. Within this loop, \
we initialize a symbol, ",
 StyleBox["rowhas1", "Code"],
 ", to 0."
}], "Text",ExpressionUUID->"c87abeb4-2dd1-444f-bc36-286dee957db3"],

Cell[TextData[{
 "We then enter a second loop to step through the entries in the columns. \
When a 1 entry has been found, we check ",
 StyleBox["rowhas1.", "Code"],
 " If that symbol is 0, then it is assigned to the current row number. If it \
is not 0, then we have found a second 1 in the column and we assign ",
 StyleBox["rowhas1", "Code"],
 " to -1 and use ",
 StyleBox[ButtonBox["Break",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Break"], "FunctionLink"],
 " to terminate the inner loop. After the inner loop, we test ",
 StyleBox["rowhas1", "Code"],
 ". If it is positive, then we know that only one 1 was located in that \
column, and hence the row the solitary 1 was found in corresponds to an \
essential prime implicant. In this case, we add the row number (",
 StyleBox["rowhas1", "Code"],
 ") to essentials."
}], "Text",ExpressionUUID->"d44b23e3-28b9-4747-af03-4b0099809d94"],

Cell["\<\
The following function implements this algorithm and returns the list of \
essential prime implicants.\
\>", "Text",ExpressionUUID->"d4a43401-b475-4233-9e6a-21be875a449d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findEssentials", "[", "coverTable_List", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"essentials", "=", 
       RowBox[{"{", "}"}]}], ",", "r", ",", "c", ",", "i", ",", "j", ",", 
      "rowhas1"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"r", ",", "c"}], "}"}], "=", 
      RowBox[{"Dimensions", "[", "coverTable", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", "c"}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"rowhas1", "=", "0"}], ";", "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"j", "=", "1"}], ",", 
          RowBox[{"j", "\[LessEqual]", "r"}], ",", 
          RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"coverTable", "[", 
              RowBox[{"[", 
               RowBox[{"j", ",", "i"}], "]"}], "]"}], "\[Equal]", "1"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"rowhas1", "\[Equal]", "0"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"rowhas1", "=", "j"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"rowhas1", "=", 
                RowBox[{"-", "1"}]}], ";", 
               RowBox[{"Break", "[", "]"}]}]}], "\[IndentingNewLine]", 
             "]"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"rowhas1", ">", "0"}], ",", "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"essentials", ",", "rowhas1"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Sort", "[", 
      RowBox[{
       RowBox[{"Union", "[", "essentials", "]"}], ",", "Greater"}], "]"}]}]}],
    "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[165]:=",ExpressionUUID->"c6b5ed00-44eb-4f22-bb70-ec569323a246"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Sort",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Sort"], "FunctionLink"],
 " applied with the comparison function ",
 StyleBox[ButtonBox["Greater",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Greater"], "FunctionLink"],
 " ensures that the output will be in decreasing order. This will allow us to \
update the coverage table and other lists without affecting the index of \
smaller-indexed essential prime implicants."
}], "Text",ExpressionUUID->"98957df3-dad8-4e25-b17a-abedcead2a42"],

Cell["\<\
We use this to determine the essential prime implicants of our example.\
\>", "Text",ExpressionUUID->"d470907f-3987-475c-a6ab-4673b26a6ddd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"essentialPIs", "=", 
  RowBox[{"findEssentials", "[", "coverageTable", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[166]:=",ExpressionUUID->"be1a48b3-d17e-445a-a3a1-133189c37f67"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6", ",", "2"}], "}"}]], "Output",
 CellLabel->
  "Out[166]=",ExpressionUUID->"1a56752e-41d8-4d53-af8e-06b54f6c26b0"]
}, Open  ]],

Cell[TextData[{
 "Now that we have the essential prime implicants, we can initialize ",
 StyleBox["minBits", "Code"],
 " and apply ",
 StyleBox["updateCT", "Code"],
 " to the essential prime implicants."
}], "Text",ExpressionUUID->"edbf3a5a-c8a4-4a9e-96db-5a2b299f4e7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"minBits", "=", 
  RowBox[{"{", "}"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[167]:=",ExpressionUUID->"aca98857-3e57-491d-8948-7bae994e76e5"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellLabel->
  "Out[167]=",ExpressionUUID->"a689dfe6-491c-439c-9a21-954c230aaccf"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{"AppendTo", "[", 
    RowBox[{"minBits", ",", "\[IndentingNewLine]", 
     RowBox[{"updateCT", "[", 
      RowBox[{"i", ",", "coverageTable", ",", "Fbits", ",", "allprimeImps"}], 
      "]"}]}], "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "essentialPIs"}], "}"}]}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[168]:=",ExpressionUUID->"bca0cffa-0d99-4e0a-9560-61e334ceaab7"],

Cell[CellGroupData[{

Cell[BoxData["minBits"], "Input",
 CellLabel->
  "In[169]:=",ExpressionUUID->"9a8e3adc-d3f9-4384-8632-af0f3a291a6a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"-\"\>", ",", "\<\"-\"\>", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "\<\"-\"\>", ",", "\<\"-\"\>", ",", "1"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[169]=",ExpressionUUID->"efae6c7a-5006-494a-b4c4-0d69d5a964cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"coverageTable", "//", "MatrixForm"}]], "Input",
 CellLabel->
  "In[170]:=",ExpressionUUID->"cc77d40d-df76-4cd0-96d7-d4255d1396dd"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0"},
     {"1", "1"},
     {"0", "1"},
     {"1", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[170]//MatrixForm=",ExpressionUUID->"aeb00b3b-a2aa-4656-ba53-\
2c6663c771b4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Completing the Coverage", "Subsubsection",ExpressionUUID->"e52ff3d7-6643-4ac5-a9b9-14770c43e93f"],

Cell["\<\
Provided that the essential prime implicants did not completely cover the \
original minterms, we must complete the coverage with non-essential prime \
implicants. First, we ensure that the coverage is not complete by checking \
the column dimension.\
\>", "Text",ExpressionUUID->"57461329-fccb-4dd4-94c6-333df7daf48a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Dimensions", "[", "coverageTable", "]"}], "[", 
   RowBox[{"[", "2", "]"}], "]"}], ">", "0"}]], "Input",
 CellLabel->
  "In[171]:=",ExpressionUUID->"e8ae6a68-7f06-44db-a4e8-e5b0da55a8d0"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[171]=",ExpressionUUID->"f819b4e1-cc94-4f21-918f-0d4820b1a8ec"]
}, Open  ]],

Cell["\<\
We will use a heuristic approach to find a minimal set of prime implicants \
rather than using an exhaustive search to determine the minimum. The \
heuristic we use will be to choose the prime implicant with the most \
extensive coverage of the remaining minterms.\
\>", "Text",ExpressionUUID->"39aa92f6-dc00-4740-af28-3a5838ea616c"],

Cell[TextData[{
 "To find such a prime implicant, we will do the following. First, initialize \
",
 StyleBox["maxCoverage", "Code"],
 " and ",
 StyleBox["bestImp", "Code"],
 " both to 0. Then, loop over each row of the (modified) coverage table. For \
each row, we will compute the sum of the entries. If this sum is greater than \
",
 StyleBox["maxCoverage", "Code"],
 ", then set ",
 StyleBox["maxCoverage", "Code"],
 " to the sum and set ",
 StyleBox["bestImp", "Code"],
 " to the row number. Once the loop is complete, ",
 StyleBox["bestImp", "Code"],
 " will be the index to a row with maximum coverage and will be the next \
prime implicant added to the ",
 StyleBox["minBits", "Code"],
 " list."
}], "Text",ExpressionUUID->"00a87552-6fe0-41f9-a151-131562bb11c6"],

Cell["Here is the function that implements this strategy.", "Text",ExpressionUUID->"0be6c74d-3d79-48d5-bc89-938d836f173e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findBestImp", "[", "coverTable_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"maxCoverage", "=", "0"}], ",", 
      RowBox[{"bestImp", "=", "0"}], ",", "i", ",", "j", ",", "sum"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{
         RowBox[{"Dimensions", "[", "coverTable", "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"sum", "=", 
         RowBox[{"Plus", "@@", 
          RowBox[{"coverTable", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"sum", ">", "maxCoverage"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"maxCoverage", "=", "sum"}], ";", "\[IndentingNewLine]", 
           RowBox[{"bestImp", "=", "i"}]}]}], "\[IndentingNewLine]", 
         "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "bestImp"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[172]:=",ExpressionUUID->"b8cdb016-e431-4a21-8ee8-c29aa3672d49"],

Cell[TextData[{
 "As long as the coverage table is not empty, we apply this function to it to \
obtain the next implicant. We add the implicant to the list ",
 StyleBox["minBits", "Code"],
 " representing the minimal expression and update the coverage table using ",
 StyleBox["updateCT", "Code"],
 "."
}], "Text",ExpressionUUID->"be2f1828-ed9f-40a3-aa46-967c342b873b"],

Cell[BoxData[
 RowBox[{"While", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Dimensions", "[", "coverageTable", "]"}], "[", 
     RowBox[{"[", "2", "]"}], "]"}], ">", "0"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nextPI", "=", 
     RowBox[{"findBestImp", "[", "coverageTable", "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"AppendTo", "[", 
     RowBox[{"minBits", ",", "\[IndentingNewLine]", 
      RowBox[{"updateCT", "[", 
       RowBox[{
       "nextPI", ",", "coverageTable", ",", "Fbits", ",", "allprimeImps"}], 
       "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[173]:=",ExpressionUUID->"0fb7da77-abac-42bf-9a9a-4034c37a12e8"],

Cell[CellGroupData[{

Cell[BoxData["minBits"], "Input",
 CellLabel->
  "In[174]:=",ExpressionUUID->"9c978d70-4dcb-4c8c-91c0-ee16b0844426"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"-\"\>", ",", "\<\"-\"\>", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "\<\"-\"\>", ",", "\<\"-\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "\<\"-\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[174]=",ExpressionUUID->"ac9e0c4d-dbbc-4f00-8f2a-b524c599baab"]
}, Open  ]],

Cell[TextData[{
 "All that is left is to translate ",
 StyleBox["minBits", "Code"],
 " back into a logical expression. This can be done using ",
 StyleBox["bitListToDNF", "Code"],
 " created earlier."
}], "Text",ExpressionUUID->"87a18291-1016-40ff-9d07-dbe90ed1b974"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bitListToDNF", "[", 
  RowBox[{"minBits", ",", 
   RowBox[{"{", 
    RowBox[{"w", ",", "x", ",", "y", ",", "z"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[175]:=",ExpressionUUID->"9e319837-50ed-404e-a64a-cbe6297d49f2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "y"}], "&&", 
    RowBox[{"!", "z"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "w"}], "&&", "z"}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{"w", "&&", 
    RowBox[{"!", "x"}], "&&", "y"}], ")"}]}]], "Output",
 CellLabel->
  "Out[175]=",ExpressionUUID->"346f4d25-6f9c-480b-99a3-d0f260936011"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Putting It All Together", "Subsubsection",ExpressionUUID->"0387c4c6-df1e-406f-a4b6-4a67b949fe16"],

Cell["\<\
Finally, we assemble the pieces into a single function, which accepts a \
logical expression in disjunctive normal form and a list of its variables. It \
returns a minimal equivalent expression.\
\>", "Text",ExpressionUUID->"258a0013-38b1-44fc-b408-5be63102f2a4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"quineMcCluskey", "[", 
   RowBox[{"F_", ",", "variables_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "fBits", ",", "fBitsL", ",", "coverageDict", ",", "groupsL", ",", 
      "primesL", ",", "newFbits", ",", "newprimes", ",", "i", ",", 
      "allprimeImps", ",", "j", ",", "coverageTable", ",", "essentialPIs", 
      ",", "minBits", ",", "nextPI"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"fBits", "=", 
      RowBox[{"dnfToBitList", "[", 
       RowBox[{"F", ",", "variables"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"coverageDict", "=", 
      RowBox[{"PositionIndex", "[", "fBits", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"i", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"fBitsL", "=", 
      RowBox[{"{", "fBits", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"groupsL", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"primesL", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"fBitsL", "[", 
         RowBox[{"[", 
          RowBox[{"-", "1"}], "]"}], "]"}], "=!=", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"AppendTo", "[", 
         RowBox[{"groupsL", ",", 
          RowBox[{"GroupBy", "[", 
           RowBox[{
            RowBox[{"fBitsL", "[", 
             RowBox[{"[", 
              RowBox[{"-", "1"}], "]"}], "]"}], ",", 
            RowBox[{"Count", "[", "1", "]"}]}], "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"newFbits", ",", "newprimes"}], "}"}], "=", 
         RowBox[{"nextBitList", "[", 
          RowBox[{
           RowBox[{"groupsL", "[", 
            RowBox[{"[", 
             RowBox[{"-", "1"}], "]"}], "]"}], ",", "coverageDict"}], "]"}]}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"fBitsL", ",", "newFbits"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"primesL", ",", "newprimes"}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"allprimeImps", "=", 
      RowBox[{"Union", "@@", "primesL"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"coverageTable", "=", 
      RowBox[{"initCoverageMatrix", "[", 
       RowBox[{"fBits", ",", "allprimeImps", ",", "coverageDict"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"essentialPIs", "=", 
      RowBox[{"findEssentials", "[", "coverageTable", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"minBits", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"AppendTo", "[", 
        RowBox[{"minBits", ",", "\[IndentingNewLine]", 
         RowBox[{"updateCT", "[", 
          RowBox[{
          "i", ",", "coverageTable", ",", "fBits", ",", "allprimeImps"}], 
          "]"}]}], "]"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "essentialPIs"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"MatrixQ", "[", "coverageTable", "]"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", "coverageTable", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], ">", "0"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"nextPI", "=", 
         RowBox[{"findBestImp", "[", "coverageTable", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"minBits", ",", 
          RowBox[{"updateCT", "[", 
           RowBox[{
           "nextPI", ",", "coverageTable", ",", "fBits", ",", 
            "allprimeImps"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"bitListToDNF", "[", 
      RowBox[{"minBits", ",", "variables"}], "]"}]}]}], "\[IndentingNewLine]",
    "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[176]:=",ExpressionUUID->"05a64516-49bd-453b-8ea6-eb5d158ec91e"],

Cell[TextData[{
 "Define ",
 StyleBox["ex10", "Code"],
 " to be the expression in Example 10 from Section 12.4 of the text."
}], "Text",ExpressionUUID->"ba5ffec3-3eb7-4353-b3a3-a1e02df1bbed"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ex10", "=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"w", "&&", "x", "&&", "y", "&&", 
     RowBox[{"!", "z"}]}], ")"}], "||", 
   RowBox[{"(", 
    RowBox[{"w", "&&", 
     RowBox[{"!", "x"}], "&&", "y", "&&", "z"}], ")"}], "||", 
   RowBox[{"(", 
    RowBox[{"w", "&&", 
     RowBox[{"!", "x"}], "&&", "y", "&&", 
     RowBox[{"!", "z"}]}], ")"}], "||", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"!", "w"}], "&&", "x", "&&", "y", "&&", "z"}], ")"}], "||", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"!", "w"}], "&&", "x", "&&", 
     RowBox[{"!", "y"}], "&&", "z"}], ")"}], "||", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"!", "w"}], "&&", 
     RowBox[{"!", "x"}], "&&", "y", "&&", "z"}], ")"}], "||", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"!", "w"}], "&&", 
     RowBox[{"!", "x"}], "&&", 
     RowBox[{"!", "y"}], "&&", "z"}], ")"}]}]}]], "Input",
 CellLabel->
  "In[177]:=",ExpressionUUID->"746b44af-bf5b-4377-bb4b-590c10963f5b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"w", "&&", "x", "&&", "y", "&&", 
    RowBox[{"!", "z"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{"w", "&&", 
    RowBox[{"!", "x"}], "&&", "y", "&&", "z"}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{"w", "&&", 
    RowBox[{"!", "x"}], "&&", "y", "&&", 
    RowBox[{"!", "z"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "w"}], "&&", "x", "&&", "y", "&&", "z"}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "w"}], "&&", "x", "&&", 
    RowBox[{"!", "y"}], "&&", "z"}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "w"}], "&&", 
    RowBox[{"!", "x"}], "&&", "y", "&&", "z"}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "w"}], "&&", 
    RowBox[{"!", "x"}], "&&", 
    RowBox[{"!", "y"}], "&&", "z"}], ")"}]}]], "Output",
 CellLabel->
  "Out[177]=",ExpressionUUID->"51cdf63d-d7e1-4c9a-b193-44a7786cc141"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"quineMcCluskey", "[", 
  RowBox[{"ex10", ",", 
   RowBox[{"{", 
    RowBox[{"w", ",", "x", ",", "y", ",", "z"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[178]:=",ExpressionUUID->"b19886ab-b754-4449-a787-37721023708e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"w", "&&", "y", "&&", 
    RowBox[{"!", "z"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "w"}], "&&", "z"}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{"w", "&&", 
    RowBox[{"!", "x"}], "&&", "y"}], ")"}]}]], "Output",
 CellLabel->
  "Out[178]=",ExpressionUUID->"33a759eb-f285-4d6b-a0dd-fb3d14998f41"]
}, Open  ]],

Cell["\<\
Note that this is the first of the two answers given in the solution to \
Example 10.\
\>", "Text",ExpressionUUID->"06f14c5e-8446-43c6-b357-607351f20812"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Solutions to Computer Projects and Computations and Explorations\
\>", "Section",
 CellTags->"Solutions",ExpressionUUID->"0a18e84d-cc8d-4174-a821-46472249a3a2"],

Cell[CellGroupData[{

Cell["Computer Projects 2", "Subsection",
 CellTags->
  "SolutionsCP2",ExpressionUUID->"c26d578e-6ae5-43f9-893f-2b1d1817690c"],

Cell["\<\
Construct a table listing the set of values of all 256 Boolean functions of \
degree three.\
\>", "Problem",ExpressionUUID->"48a8cb27-77fb-4e24-8635-0ffd3838b06a"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " The Boolean functions of degree three are in one-to-one correspondence \
with the subsets of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"{", 
     RowBox[{"true", ",", "false"}], "}"}], "3"], TraditionalForm]],
  ExpressionUUID->"c2bce0c3-7975-4c8c-93a7-17228a0d9caf"],
 ". This is because each subset ",
 Cell[BoxData[
  FormBox["S", TraditionalForm]],ExpressionUUID->
  "35ea4fac-4050-4f7e-b95c-b7369ddf72ae"],
 " of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"{", 
     RowBox[{"true", ",", "false"}], "}"}], "3"], TraditionalForm]],
  ExpressionUUID->"4e5f1549-74f3-49f3-a391-3959840e04ae"],
 " can be identified with the unique Boolean function of degree three that \
returns true on the members of S and false on all other inputs."
}], "Text",ExpressionUUID->"2ecbf6dd-4768-4ef0-b705-19b3cfbb2801"],

Cell[TextData[{
 "The set ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"{", 
     RowBox[{"true", ",", "false"}], "}"}], "3"], TraditionalForm]],
  ExpressionUUID->"9454fd2a-0005-4d42-a839-c24713cc8b69"],
 " consists of 8 elements: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"true", ",", "true", ",", "true"}], ")"}], TraditionalForm]],
  ExpressionUUID->"bab00d7b-cf0d-415b-a136-27b1207110dc"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"true", ",", "true", ",", "false"}], ")"}], TraditionalForm]],
  ExpressionUUID->"e9e160d5-8a07-45d5-aaec-d00c3c7df56c"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"true", ",", "false", ",", "true"}], ")"}], TraditionalForm]],
  ExpressionUUID->"a9559fec-21fc-4202-9d19-4b6cc5cd2324"],
 ",...,",
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"false", ",", "false", ",", "false"}], ")"}], TraditionalForm]],
  ExpressionUUID->"ded12355-b6d4-4af7-94e2-4264cf1d30f3"],
 ". The power set can therefore be identified with bit strings of length 8, \
with a 1 indicating inclusion of the corresponding member of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"{", 
     RowBox[{"true", ",", "false"}], "}"}], "3"], TraditionalForm]],
  ExpressionUUID->"c31a41d2-afcd-407b-a97f-deb4aae4d62c"],
 ". For example, \[OpenCurlyDoubleQuote]10100000\[CloseCurlyDoubleQuote] \
would correspond to the set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"true", ",", "true", ",", "true"}], ")"}], ",", 
     RowBox[{"(", 
      RowBox[{"true", ",", "false", ",", "true"}], ")"}]}], "}"}], 
   TraditionalForm]],ExpressionUUID->"5c6a46b0-7a72-4591-bb33-437f36f7e2e2"],
 " which in turn corresponds to the Boolean function that returns true on ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"true", ",", "true", ",", "true"}], ")"}], TraditionalForm]],
  ExpressionUUID->"9948070e-8c42-4b07-8831-196892018818"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"true", ",", "false", ",", "true"}], ")"}], TraditionalForm]],
  ExpressionUUID->"de9b8b11-c725-46e8-b32b-926175cceb59"],
 " and false for all other input. The bit strings, in turn, can be identified \
with integers between 0 and 255, based on their binary representation."
}], "Text",ExpressionUUID->"c1e6102c-7c54-46af-b3d1-b219ba57ad22"],

Cell[TextData[{
 "The Wolfram Language\[CloseCurlyQuote]s ",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 " takes advantage of this correspondence between integers and Boolean \
functions. Given two integers ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "df2416b2-3191-4469-bd97-09b0fbdfdb3a"],
 " and ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "7bc81dd1-956f-46b4-82e6-6dbe2c244128"],
 " as arguments, ",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 " produces the Boolean function, as a pure ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"], "FunctionLink"],
 ", on ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "6d62fb21-cab6-4571-9934-e8ce4829a2ef"],
 " variables corresponding to the binary representation of ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "ee05b5af-d340-491c-8566-a7d6b81ecbc4"],
 "."
}], "Text",ExpressionUUID->"af88d8a2-c401-4fff-b85b-3b4998c8c1d0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanFunction", "[", 
  RowBox[{"132", ",", "3"}], "]"}]], "Input",
 CellLabel->
  "In[179]:=",ExpressionUUID->"f5ff0a1f-15eb-4893-be5d-5fd589a01266"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["BooleanFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               Hue[0.6, 0.7, 0.5], 
               Opacity[0.7], 
               Arrowheads[0.028937842778793414`], 
               ArrowBox[{{0., 3.}, {1., 2.}}, 0.030239520958083826`], 
               ArrowBox[
                BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQjQo4HGCskPM3jr6ezw7nb/KQrNhliuCL5xwUyznI
Bue3WV5cyOCM4P/dANLACufXXVKvvaSO4HPMyzvL380C588UluUyeMIM55sY
gwCCfwWkvZYJzi+UOQ5EjHC+kCAIIPgbWaM3sEYzwPkLvnjO/+L53x7Gv3cX
BP7C+bIg4wr/wPkxG0AG/Ibz08Dgm/3CTStXMc/Osd+xLNTLhuErlN9jbz71
d8XrpZ/tq0r+8xuJL7B/YBjxqTj8E1R+jf2GmuxtV0U+2vdPDrkrFbnNPuJ1
VpfinvdQ9QfsF1nm2HqlvbU/8mbluXXPjto7PbnVqqrxGqr/jL3p623Jmxlf
2nMl/w+UkLpkX+3HcP3zp2f2x9onfr1lctNexsa8dVLqY3tFl7aL/ufv27+/
ayMeIfHAnu/Mu6LdXx7ZP0tXkuoUu2V/66C35IqDT+19ajLOrq+5Yl/GfOt2
rt8Le/VP0yd4HDtn/2jCzF08s1/ZV++ZKXp28lF7mayurS3L39jLrV8TfOvw
Lnv1/jVnrha/s5/Ha266+NAKaPh8gIcTAPT6yCQ=
                 "]], 
                0.030239520958083826`], 
               ArrowBox[
                BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEf7KEMBxh/+byN3dft/9vD+EkTjT6UZP+zZ4Ty
9W406d5o+guX5yle5MzY9gfO/5UI0vAbwV/iD0II9TZ3Z8mL/YTzDdWtRBJO
fIfz08DgG5y/GKz9C5z/2KIPiD7D3aOsBAKf4PKJ3NsSuLd9gPPtX062ezn5
HZy/ZzcIvIbzLUHGPX4B54N0J3A/g/ONweAxnA8OnvwHcP45/u4pjctvw90j
nnNQLOfgNbi8ZMUuU3udS3D+ivQ3j76ePw3nT7EDOfAwnP/g5bU/Gzx2wvn/
tM508rGugPNhMQcApt6NHA==
                 "]], 0.030239520958083826`], 
               ArrowBox[{{1., 2.}, {2., 1.}}, 0.030239520958083826`], 
               ArrowBox[{{2., 1.}, {1., 0.}}, 0.030239520958083826`], 
               ArrowBox[{{2., 1.}, {2., 0.}}, 0.030239520958083826`]}, {
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[{
                 GrayLevel[0], 
                 Opacity[0.7]}], 
               DiskBox[{0., 3.}, 0.1], 
               DiskBox[{1., 2.}, 0.1], 
               
               RectangleBox[{0.9117647, -0.08823530000000002}, {1.0882353, 
                0.08823530000000002}], 
               DiskBox[{2., 1.}, 0.1], 
               
               RectangleBox[{1.9117647, -0.08823530000000002}, {2.0882353, 
                0.08823530000000002}]}}, FrameTicks -> None, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], Background -> GrayLevel[0.93], 
             PlotRangePadding -> Scaled[0.1], FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Number of variables: \"", "SummaryItemAnnotation"],
                  "\[InvisibleSpace]", 
                 TagBox["3", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               Hue[0.6, 0.7, 0.5], 
               Opacity[0.7], 
               Arrowheads[0.028937842778793414`], 
               ArrowBox[{{0., 3.}, {1., 2.}}, 0.030239520958083826`], 
               ArrowBox[
                BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQjQo4HGCskPM3jr6ezw7nb/KQrNhliuCL5xwUyznI
Bue3WV5cyOCM4P/dANLACufXXVKvvaSO4HPMyzvL380C588UluUyeMIM55sY
gwCCfwWkvZYJzi+UOQ5EjHC+kCAIIPgbWaM3sEYzwPkLvnjO/+L53x7Gv3cX
BP7C+bIg4wr/wPkxG0AG/Ibz08Dgm/3CTStXMc/Osd+xLNTLhuErlN9jbz71
d8XrpZ/tq0r+8xuJL7B/YBjxqTj8E1R+jf2GmuxtV0U+2vdPDrkrFbnNPuJ1
VpfinvdQ9QfsF1nm2HqlvbU/8mbluXXPjto7PbnVqqrxGqr/jL3p623Jmxlf
2nMl/w+UkLpkX+3HcP3zp2f2x9onfr1lctNexsa8dVLqY3tFl7aL/ufv27+/
ayMeIfHAnu/Mu6LdXx7ZP0tXkuoUu2V/66C35IqDT+19ajLOrq+5Yl/GfOt2
rt8Le/VP0yd4HDtn/2jCzF08s1/ZV++ZKXp28lF7mayurS3L39jLrV8TfOvw
Lnv1/jVnrha/s5/Ha266+NAKaPh8gIcTAPT6yCQ=
                 "]], 
                0.030239520958083826`], 
               ArrowBox[
                BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEf7KEMBxh/+byN3dft/9vD+EkTjT6UZP+zZ4Ty
9W406d5o+guX5yle5MzY9gfO/5UI0vAbwV/iD0II9TZ3Z8mL/YTzDdWtRBJO
fIfz08DgG5y/GKz9C5z/2KIPiD7D3aOsBAKf4PKJ3NsSuLd9gPPtX062ezn5
HZy/ZzcIvIbzLUHGPX4B54N0J3A/g/ONweAxnA8OnvwHcP45/u4pjctvw90j
nnNQLOfgNbi8ZMUuU3udS3D+ivQ3j76ePw3nT7EDOfAwnP/g5bU/Gzx2wvn/
tM508rGugPNhMQcApt6NHA==
                 "]], 0.030239520958083826`], 
               ArrowBox[{{1., 2.}, {2., 1.}}, 0.030239520958083826`], 
               ArrowBox[{{2., 1.}, {1., 0.}}, 0.030239520958083826`], 
               ArrowBox[{{2., 1.}, {2., 0.}}, 0.030239520958083826`]}, {
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[{
                 GrayLevel[0], 
                 Opacity[0.7]}], 
               DiskBox[{0., 3.}, 0.1], 
               DiskBox[{1., 2.}, 0.1], 
               
               RectangleBox[{0.9117647, -0.08823530000000002}, {1.0882353, 
                0.08823530000000002}], 
               DiskBox[{2., 1.}, 0.1], 
               
               RectangleBox[{1.9117647, -0.08823530000000002}, {2.0882353, 
                0.08823530000000002}]}}, FrameTicks -> None, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], Background -> GrayLevel[0.93], 
             PlotRangePadding -> Scaled[0.1], FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Number of variables: \"", "SummaryItemAnnotation"],
                  "\[InvisibleSpace]", 
                 TagBox["3", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Satisfiability count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of nodes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["5", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  BooleanFunction["BDD" -> {3, 0, 2, -4, 1, 3, -1, 2, 1, -1, 1, 3, 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->
  "Out[179]=",ExpressionUUID->"5a1acea3-a34a-4195-ba4d-aab94907b150"]
}, Open  ]],

Cell[TextData[{
 "The resulting ",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 " can be applied to truth values."
}], "Text",ExpressionUUID->"145209e4-ace4-4c77-8c5d-d5df25ee45d2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"BooleanFunction", "[", 
   RowBox[{"132", ",", "3"}], "]"}], "[", 
  RowBox[{"True", ",", "False", ",", "True"}], "]"}]], "Input",
 CellLabel->
  "In[180]:=",ExpressionUUID->"98e40289-33e1-4ff2-8ce5-99819d102485"],

Cell[BoxData["False"], "Output",
 CellLabel->
  "Out[180]=",ExpressionUUID->"99d9d002-ce4f-4d8b-870f-3e4bde749482"]
}, Open  ]],

Cell["\<\
With a list of variables passed as a third argument, the output will be an \
expression for the Boolean function.\
\>", "Text",ExpressionUUID->"7cede04d-278d-4e9f-bae4-c604bf7e17dd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanFunction", "[", 
  RowBox[{"132", ",", "3", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[181]:=",ExpressionUUID->"0d0c0459-6b1e-4cf2-a737-6dfcd4d12b0a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"x", "&&", "y", "&&", "z"}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "x"}], "&&", "y", "&&", 
    RowBox[{"!", "z"}]}], ")"}]}]], "Output",
 CellLabel->
  "Out[181]=",ExpressionUUID->"604d0371-7d45-47bf-828e-e514b0a166ed"]
}, Open  ]],

Cell[TextData[{
 "Applying ",
 StyleBox[ButtonBox["BooleanTable",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanTable"], "FunctionLink"],
 ", described in the first section of this chapter, to the output of ",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 " produces the functions\[CloseCurlyQuote] truth table."
}], "Text",ExpressionUUID->"bd1adf26-7f9d-41cd-a052-c099ad1e516e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanTable", "[", 
  RowBox[{"BooleanFunction", "[", 
   RowBox[{"132", ",", "3"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[182]:=",ExpressionUUID->"c0c97571-53de-4e2c-896a-eff6fb14787a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "True", ",", "False", ",", "False", ",", "False", ",", "False", ",", "True",
    ",", "False", ",", "False"}], "}"}]], "Output",
 CellLabel->
  "Out[182]=",ExpressionUUID->"3da81aa1-0f45-4a8d-bb6b-d8bf684d9e86"]
}, Open  ]],

Cell[TextData[{
 "We prefer a table that shows the input values along with the output. For \
this, we apply ",
 StyleBox[ButtonBox["BooleanTable",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanTable"], "FunctionLink"],
 " to a list consisting of variables as the second argument. Then, in the \
first argument, we can use the variables."
}], "Text",ExpressionUUID->"a82d68f6-c77b-46bf-bce6-497aabd3c745"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanTable", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z", ",", 
     RowBox[{
      RowBox[{"BooleanFunction", "[", 
       RowBox[{"132", ",", "3"}], "]"}], "[", 
      RowBox[{"x", ",", "y", ",", "z"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[183]:=",ExpressionUUID->"c6916f17-fb2b-4c0b-a89d-1282bd20dcd1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"True", ",", "True", ",", "True", ",", "True"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", "False", ",", "True", ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", "True", ",", "True", ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", "True", ",", "False", ",", "True"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[183]=",ExpressionUUID->"6d226a80-3be2-4608-9e53-3b4fc0b39a1b"]
}, Open  ]],

Cell[TextData[{
 "The third element of the output indicates that the function 132 returns \
false on ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"true", ",", "false", ",", "true"}], ")"}], TraditionalForm]],
  ExpressionUUID->"5fa87d3b-ae6d-4b4a-8622-4f3025bc038f"],
 "."
}], "Text",ExpressionUUID->"8b43e120-b1a6-4237-9358-22fbac4e6365"],

Cell[TextData[{
 "We can now replace the specific application of ",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 " with a ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"], "FunctionLink"],
 " to allow the integer to range. For demonstration purposes, we restrict the \
range to 100 to 105. We also apply ",
 StyleBox[ButtonBox["TableForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TableForm"], "FunctionLink"],
 " with the ",
 StyleBox[ButtonBox["TableDepth",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TableDepth"], "FunctionLink"],
 " option set to 1 to make the output readable."
}], "Text",ExpressionUUID->"d7fd37f1-6613-4987-a449-1fb0b727ccb2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{"BooleanTable", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "y", ",", "z", ",", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"BooleanFunction", "[", 
           RowBox[{"k", ",", "3"}], "]"}], "[", 
          RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "100", ",", "105"}], "}"}]}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}], ",", 
   RowBox[{"TableDepth", "\[Rule]", "1"}]}], "]"}]], "Input",
 CellLabel->
  "In[184]:=",ExpressionUUID->"c72d5b6d-2efa-4cae-b7f8-6ac9a5a46e2c"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"{", 
       RowBox[{"True", ",", "True", ",", "True", ",", 
        RowBox[{"{", 
         RowBox[{
         "False", ",", "False", ",", "False", ",", "False", ",", "False", ",",
           "False"}], "}"}]}], "}"}]},
     {
      RowBox[{"{", 
       RowBox[{"True", ",", "True", ",", "False", ",", 
        RowBox[{"{", 
         RowBox[{
         "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
          "True"}], "}"}]}], "}"}]},
     {
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "True", ",", 
        RowBox[{"{", 
         RowBox[{
         "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
          "True"}], "}"}]}], "}"}]},
     {
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", 
        RowBox[{"{", 
         RowBox[{
         "False", ",", "False", ",", "False", ",", "False", ",", "False", ",",
           "False"}], "}"}]}], "}"}]},
     {
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "True", ",", 
        RowBox[{"{", 
         RowBox[{
         "False", ",", "False", ",", "False", ",", "False", ",", "True", ",", 
          "True"}], "}"}]}], "}"}]},
     {
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "False", ",", 
        RowBox[{"{", 
         RowBox[{
         "True", ",", "True", ",", "True", ",", "True", ",", "False", ",", 
          "False"}], "}"}]}], "}"}]},
     {
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", 
        RowBox[{"{", 
         RowBox[{
         "False", ",", "False", ",", "True", ",", "True", ",", "False", ",", 
          "False"}], "}"}]}], "}"}]},
     {
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", 
        RowBox[{"{", 
         RowBox[{
         "False", ",", "True", ",", "False", ",", "True", ",", "False", ",", 
          "True"}], "}"}]}], "}"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$, TableDepth -> 1]]]], "Output",
 CellLabel->
  "Out[184]//TableForm=",ExpressionUUID->"ee1340da-d327-4e94-9aac-\
e2ad4b0e4ebd"]
}, Open  ]],

Cell[TextData[{
 "The output above indicates that, on the input ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"True", ",", "False", ",", "True"}], ")"}], TraditionalForm]],
  ExpressionUUID->"0b0db34d-85d4-4b00-9d02-4816292a14d1"],
 ", all 6 Boolean functions associated to the integers 100 through 105 output \
true."
}], "Text",ExpressionUUID->"88d35253-51a0-45df-80c8-0e3fe992147b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computations and Explorations 6", "Subsection",
 CellTags->
  "SolutionsCE6",ExpressionUUID->"2449fc75-02f1-478c-87d1-9470978e0526"],

Cell["\<\
Randomly generate 10 different Boolean expressions in four variables and \
determine the average number of steps required to minimize them using the \
Quine\[Dash]McCluskey method.\
\>", "Problem",ExpressionUUID->"82f8ece4-b248-4082-8500-02383ba22e6f"],

Cell[TextData[{
 StyleBox["Solution:",
  FontSlant->"Italic"],
 " To solve this problem, we need to generate random Boolean expressions, and \
then we must find a method of examining the minimization process so that we \
can count the number of steps."
}], "Text",ExpressionUUID->"1f225836-e12c-42cb-8710-752727a190ad"],

Cell[TextData[{
 "Using what we learned about ",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 " in the solution to Computer Projects 2 above, we can produce random \
Boolean functions by applying ",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 " to random integers. For an expression in four variables, there are ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", 
     SuperscriptBox["2", "4"]], "=", "65536"}], TraditionalForm]],
  ExpressionUUID->"4de32f4f-82b9-415d-bed6-e5535810bcb7"],
 " different Boolean functions. Therefore, we choose 10 different integers \
between 0 and 65535 using ",
 StyleBox[ButtonBox["RandomSample",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomSample"], "FunctionLink"],
 ". Recall that ",
 StyleBox[ButtonBox["RandomSample",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomSample"], "FunctionLink"],
 " accepts a list of elements, which in this case will be obtained from ",
 StyleBox[ButtonBox["Range",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Range"], "FunctionLink"],
 ", and a positive integer. It returns a list of the specified number of \
elements randomly selected from the list of objects."
}], "Text",ExpressionUUID->"089a74bd-36d0-4bb0-903e-70ff95d21973"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  RowBox[{
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "65535"}], "]"}], ",", "10"}], "]"}]], "Input",
 CellLabel->
  "In[185]:=",ExpressionUUID->"208ff2e4-d1a3-4c82-8c03-df89b95514e9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "7455", ",", "21254", ",", "28131", ",", "38524", ",", "32416", ",", 
   "24103", ",", "60338", ",", "27672", ",", "62193", ",", "64"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[185]=",ExpressionUUID->"80536278-a52b-4544-a98b-1c004897590c"]
}, Open  ]],

Cell[TextData[{
 "Applying ",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 " to each of the values output by ",
 StyleBox[ButtonBox["RandomSample",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomSample"], "FunctionLink"],
 " will produce a list of 10 randomly chosen Boolean expressions."
}], "Text",ExpressionUUID->"da051fb4-7083-4221-a6f0-79e40f14b3f1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"BooleanFunction", "[", 
     RowBox[{"k", ",", "4", ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "y", ",", "z", ",", "w"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"k", ",", 
      RowBox[{"RandomSample", "[", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", "65535"}], "]"}], ",", "10"}], "]"}]}], "}"}]}], 
   "]"}], "//", "TableForm"}]], "Input",
 CellLabel->
  "In[186]:=",ExpressionUUID->"eaea1274-e8a6-40f9-bd6f-fe34e2ebc8ab"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{
       RowBox[{"(", 
        RowBox[{"w", "&&", "x", "&&", "y", "&&", 
         RowBox[{"!", "z"}]}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{"w", "&&", 
         RowBox[{"!", "x"}], "&&", "y", "&&", "z"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{"w", "&&", 
         RowBox[{"!", "x"}], "&&", 
         RowBox[{"!", "y"}], "&&", 
         RowBox[{"!", "z"}]}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "w"}], "&&", "x", "&&", 
         RowBox[{"!", "y"}]}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "w"}], "&&", 
         RowBox[{"!", "y"}], "&&", "z"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{"x", "&&", 
         RowBox[{"!", "y"}], "&&", "z"}], ")"}]}]},
     {
      RowBox[{
       RowBox[{"(", 
        RowBox[{"w", "&&", "y", "&&", 
         RowBox[{"!", "z"}]}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "w"}], "&&", 
         RowBox[{"!", "x"}], "&&", "z"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "w"}], "&&", "y", "&&", "z"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "w"}], "&&", 
         RowBox[{"!", "y"}], "&&", 
         RowBox[{"!", "z"}]}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "x"}], "&&", 
         RowBox[{"!", "y"}], "&&", 
         RowBox[{"!", "z"}]}], ")"}]}]},
     {
      RowBox[{
       RowBox[{"(", 
        RowBox[{"w", "&&", "y"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "w"}], "&&", "x", "&&", 
         RowBox[{"!", "z"}]}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{"x", "&&", "y"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{"y", "&&", 
         RowBox[{"!", "z"}]}], ")"}]}]},
     {
      RowBox[{
       RowBox[{"(", 
        RowBox[{"w", "&&", 
         RowBox[{"!", "x"}]}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{"w", "&&", 
         RowBox[{"!", "z"}]}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "w"}], "&&", "x", "&&", "z"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{"x", "&&", "y"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "x"}], "&&", 
         RowBox[{"!", "z"}]}], ")"}]}]},
     {
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "w"}], "&&", "x", "&&", "y"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "w"}], "&&", 
         RowBox[{"!", "x"}], "&&", 
         RowBox[{"!", "y"}]}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{"x", "&&", 
         RowBox[{"!", "y"}], "&&", 
         RowBox[{"!", "z"}]}], ")"}]}]},
     {
      RowBox[{
       RowBox[{"!", "w"}], "||", 
       RowBox[{"(", 
        RowBox[{"x", "&&", "y"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "x"}], "&&", 
         RowBox[{"!", "y"}]}], ")"}], "||", 
       RowBox[{"!", "z"}]}]},
     {
      RowBox[{
       RowBox[{"(", 
        RowBox[{"w", "&&", "x"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{"w", "&&", "z"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "x"}], "&&", "y", "&&", "z"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "y"}], "&&", 
         RowBox[{"!", "z"}]}], ")"}]}]},
     {
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "w"}], "&&", "y"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "w"}], "&&", "z"}], ")"}], "||", 
       RowBox[{"!", "x"}]}]},
     {
      RowBox[{
       RowBox[{"(", 
        RowBox[{"w", "&&", "x", "&&", "z"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{"w", "&&", 
         RowBox[{"!", "x"}], "&&", 
         RowBox[{"!", "z"}]}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "w"}], "&&", "x", "&&", 
         RowBox[{"!", "z"}]}], ")"}]}]},
     {
      RowBox[{
       RowBox[{"(", 
        RowBox[{"w", "&&", "y"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{"x", "&&", 
         RowBox[{"!", "y"}]}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "x"}], "&&", "y", "&&", "z"}], ")"}], "||", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", "y"}], "&&", 
         RowBox[{"!", "z"}]}], ")"}]}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[186]//TableForm=",ExpressionUUID->"0244c539-2a03-49d2-9f0a-\
8531483a8430"]
}, Open  ]],

Cell["\<\
Having determined how to generate random expressions, we need to find a way \
to count the number of steps taken during the minimization process. There are \
several approaches we could take to this part of the problem.\
\>", "Text",ExpressionUUID->"09ce23b4-0106-4813-89fb-f6f2466a9b41"],

Cell["\<\
The first is to measure the time taken to execute the procedure. We have done \
this many times before.\
\>", "Text",ExpressionUUID->"250980b3-2566-41c0-8b31-819a036b7b19"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"QMtimes", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"randExprs", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"BooleanFunction", "[", 
      RowBox[{"k", ",", "4", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y", ",", "z", ",", "w"}], "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", 
       RowBox[{"RandomSample", "[", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"0", ",", "65535"}], "]"}], ",", "1000"}], "]"}]}], "}"}]}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{"i", "=", "1"}], ",", 
    RowBox[{"i", "\[LessEqual]", "10"}], ",", 
    RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
    RowBox[{"AppendTo", "[", 
     RowBox[{"QMtimes", ",", 
      RowBox[{
       RowBox[{"Timing", "[", 
        RowBox[{"quineMcCluskey", "[", 
         RowBox[{
          RowBox[{"randExprs", "[", 
           RowBox[{"[", "i", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "y", ",", "z", ",", "w"}], "}"}]}], "]"}], "]"}],
        "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Mean", "[", "QMtimes", "]"}]}], "Input",
 CellLabel->
  "In[187]:=",ExpressionUUID->"d7ec6736-f017-4723-bd62-df422defc810"],

Cell[BoxData["0.0006277000000000001`"], "Output",
 CellLabel->
  "Out[190]=",ExpressionUUID->"4ddd1321-9f88-42a5-8df2-e66c755ca594"]
}, Open  ]],

Cell[TextData[{
 "The second approach is to modify the implementation of \
Quine\[Dash]McCluskey to count the number of times certain operations are \
called. For example, we may be interested in the number of times that the ",
 StyleBox["updateCT", "Code"],
 " procedure is executed. In this case, we can alter ",
 StyleBox["quineMcCluskey", "Code"],
 " to include a variable that is incremented at the start of every execution \
of ",
 StyleBox["updateCT", "Code"],
 "."
}], "Text",ExpressionUUID->"e3a73227-7699-48b6-a647-e1c61ddc5401"],

Cell[BoxData[
 RowBox[{
  RowBox[{"quineMcCluskeycountCT", "[", 
   RowBox[{"F_", ",", "variables_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "fBits", ",", "fBitsL", ",", "coverageDict", ",", "groupsL", ",", 
      "primesL", ",", "newFbits", ",", "newprimes", ",", "i", ",", 
      "allprimeImps", ",", "j", ",", "coverageTable", ",", "essentialPIs", 
      ",", "minBits", ",", "nextPI", ",", 
      RowBox[{"count", "=", "0"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"fBits", "=", 
      RowBox[{"dnfToBitList", "[", 
       RowBox[{"F", ",", "variables"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"coverageDict", "=", 
      RowBox[{"PositionIndex", "[", "fBits", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"i", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"fBitsL", "=", 
      RowBox[{"{", "fBits", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"groupsL", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"primesL", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"fBitsL", "[", 
         RowBox[{"[", 
          RowBox[{"-", "1"}], "]"}], "]"}], "=!=", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"AppendTo", "[", 
         RowBox[{"groupsL", ",", 
          RowBox[{"GroupBy", "[", 
           RowBox[{
            RowBox[{"fBitsL", "[", 
             RowBox[{"[", 
              RowBox[{"-", "1"}], "]"}], "]"}], ",", 
            RowBox[{"Count", "[", "1", "]"}]}], "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"newFbits", ",", "newprimes"}], "}"}], "=", 
         RowBox[{"nextBitList", "[", 
          RowBox[{
           RowBox[{"groupsL", "[", 
            RowBox[{"[", 
             RowBox[{"-", "1"}], "]"}], "]"}], ",", "coverageDict"}], "]"}]}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"fBitsL", ",", "newFbits"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"primesL", ",", "newprimes"}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"allprimeImps", "=", 
      RowBox[{"Union", "@@", "primesL"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"coverageTable", "=", 
      RowBox[{"initCoverageMatrix", "[", 
       RowBox[{"fBits", ",", "allprimeImps", ",", "coverageDict"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"essentialPIs", "=", 
      RowBox[{"findEssentials", "[", "coverageTable", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"minBits", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"AppendTo", "[", 
         RowBox[{"minBits", ",", "\[IndentingNewLine]", 
          RowBox[{"updateCT", "[", 
           RowBox[{
           "i", ",", "coverageTable", ",", "fBits", ",", "allprimeImps"}], 
           "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"count", "++"}]}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "essentialPIs"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"MatrixQ", "[", "coverageTable", "]"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", "coverageTable", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], ">", "0"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"nextPI", "=", 
         RowBox[{"findBestImp", "[", "coverageTable", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"minBits", ",", 
          RowBox[{"updateCT", "[", 
           RowBox[{
           "nextPI", ",", "coverageTable", ",", "fBits", ",", 
            "allprimeImps"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"bitListToDNF", "[", 
      RowBox[{"minBits", ",", "variables"}], "]"}], ";", 
     "\[IndentingNewLine]", "count"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[191]:=",ExpressionUUID->"8fd1beab-6d15-4f60-b2e0-3cb07d85092b"],

Cell[TextData[{
 "Now execute ",
 StyleBox["quineMcCluskeycountCT", "Code"],
 " on 10 random expressions."
}], "Text",ExpressionUUID->"a251ec49-6020-4986-87c1-2ddf8d5e7d7b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"QMtotal", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"randExprs", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"BooleanFunction", "[", 
      RowBox[{"k", ",", "4", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y", ",", "z", ",", "w"}], "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", 
       RowBox[{"RandomSample", "[", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"0", ",", "65535"}], "]"}], ",", "10"}], "]"}]}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{"i", "=", "1"}], ",", 
    RowBox[{"i", "\[LessEqual]", "10"}], ",", 
    RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"QMtotal", "=", 
      RowBox[{"QMtotal", "+", 
       RowBox[{"quineMcCluskeycountCT", "[", 
        RowBox[{
         RowBox[{"randExprs", "[", 
          RowBox[{"[", "i", "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", "y", ",", "z", ",", "w"}], "}"}]}], "]"}]}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"N", "[", 
  RowBox[{"QMtotal", "/", "10"}], "]"}]}], "Input",
 CellLabel->
  "In[192]:=",ExpressionUUID->"477a0a96-e973-4cd1-b242-7f907624acac"],

Cell[BoxData["4.1`"], "Output",
 CellLabel->
  "Out[195]=",ExpressionUUID->"f9815b21-e1bc-4562-ba72-f3b18c8de0c4"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exercises", "Section",
 CellTags->"Exercises",ExpressionUUID->"f10fbee0-06e7-49e4-bedc-ea6aae824dc0"],

Cell[CellGroupData[{

Cell[TextData[{
 "Use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to verify De Morgan\[CloseCurlyQuote]s laws and the commutative and \
associative laws. (See Table 5 of Section 12.1.)"
}], "Item1Exercise",ExpressionUUID->"e6db23df-cef2-4bb7-9a01-60111b3f2288"],

Cell["\<\
Construct truth tables for each of the following pairs of Boolean expressions \
and decide whether they are logically equivalent.\
\>", "Item1Exercise",ExpressionUUID->"77c35570-b86a-40f0-a7cf-5644025c35fb"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "\[Rule]", "b"}], TraditionalForm]],ExpressionUUID->
  "900dc998-cac6-4de6-a047-eeeafbf7d804"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"b", "\[Rule]", "a"}], TraditionalForm]],ExpressionUUID->
  "d96443b1-6cfd-47d8-aa9e-a1c81e44ebe6"]
}], "Item2Exercise",ExpressionUUID->"c581fb2e-4e2a-412c-b9b2-483fa92b33ea"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "\[Rule]", 
    OverscriptBox["b", "_"]}], TraditionalForm]],ExpressionUUID->
  "39813b44-aeb6-4997-ad68-0b15e0df6f4c"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"b", "\[Rule]", 
    OverscriptBox["a", "_"]}], TraditionalForm]],ExpressionUUID->
  "6679207c-af8e-4d7f-88f5-5b562c1b18b1"]
}], "Item2Exercise",ExpressionUUID->"1e899f66-49d6-4ace-89af-5920b7a807a8"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "+", 
    RowBox[{"b", " ", "c"}]}], TraditionalForm]],ExpressionUUID->
  "0cbd7d48-2bd0-43f5-88ed-b7043aaa118f"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"a", "+", "b", "+", "d"}], ")"}], 
    RowBox[{"(", 
     RowBox[{"a", "+", "c", "+", "d"}], ")"}]}], TraditionalForm]],
  ExpressionUUID->"cce9d331-b95f-4b63-86be-d7ab9075af43"]
}], "Item2Exercise",ExpressionUUID->"13e2efcd-518e-441a-9e35-7f5052a032dd"]
}, Open  ]],

Cell[TextData[{
 "Write a function in the Wolfram Language that translates Boolean \
expressions or functions written in terms of addition, multiplication, \
overbar, 0, and 1 into expressions in terms of the logical operators and \
values. (Hint: the implementation of the ",
 StyleBox["expressionTree", "Input"],
 " function in Chapter 11 of this manual may be helpful.)"
}], "Item1Exercise",ExpressionUUID->"9ada6bc0-36bd-46bc-ab64-f130672d4ffc"],

Cell[TextData[{
 "Write a function in the Wolfram Language that, given a Boolean function, \
represents this function using only the ",
 StyleBox[ButtonBox["Nand",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Nand"], "FunctionLink"],
 " operator."
}], "Item1Exercise",ExpressionUUID->"c80f7f02-f6ed-482c-ad4f-9169525fba5e"],

Cell[TextData[{
 "Use the function in the previous exercise to represent the following \
Boolean functions using only the ",
 StyleBox[ButtonBox["Nand",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Nand"], "FunctionLink"],
 " operator."
}], "Item1Exercise",ExpressionUUID->"0136e9a5-15e6-45e2-8569-21d144a60565"],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"F", "(", 
    RowBox[{"x", ",", "y", ",", "z"}], ")"}], "=", 
   RowBox[{
    RowBox[{"x", " ", "y"}], "+", 
    RowBox[{
     OverscriptBox["y", "_"], " ", "z"}]}]}], 
  TraditionalForm]],ExpressionUUID->"9194732b-e3b1-4a27-99e6-e5ce5033fb67"]], \
"Item2Exercise",ExpressionUUID->"ccac8ac4-c4be-4034-8113-6c7c3b5eab4c"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"G", "(", 
    RowBox[{"x", ",", "y", ",", "z"}], ")"}], "=", 
   RowBox[{"x", "+", 
    RowBox[{
     OverscriptBox["x", "_"], " ", "y"}], "+", 
    RowBox[{
     OverscriptBox[
      RowBox[{"y", " ", "z"}], "_"], Cell[
     "",ExpressionUUID->"a17b76d5-e6d2-45c0-a5b9-d6374c7c0191"]}]}]}], 
  TraditionalForm]],ExpressionUUID->"6d9e2713-0f78-4f56-93c8-2bbda17f3c4f"]], \
"Item2Exercise",ExpressionUUID->"ca4f8879-a08e-418e-834b-616dc784482c"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"H", "(", 
    RowBox[{"x", ",", "y", ",", "z"}], ")"}], "=", 
   RowBox[{
    RowBox[{"x", " ", "y", " ", "z"}], "+", " ", 
    OverscriptBox[
     RowBox[{"x", " ", "y", " ", "z"}], "_"]}]}], 
  TraditionalForm]],ExpressionUUID->"4f65dc21-b967-4175-a1cd-4bacacb4795b"]], \
"Item2Exercise",ExpressionUUID->"d65da6e1-8020-4557-9278-a14aa1bde727"]
}, Open  ]],

Cell[TextData[{
 "Write a function in the Wolfram Language that, given a Boolean function, \
represents this function using only the ",
 StyleBox[ButtonBox["Nor",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Nor"], "FunctionLink"],
 " operator."
}], "Item1Exercise",ExpressionUUID->"09042d3d-de88-40ad-b7e9-8d4bc9cf244f"],

Cell[TextData[{
 "Use the function in the previous exercise to represent the Boolean \
functions in Exercise 4 using only the ",
 StyleBox[ButtonBox["Nor",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Nor"], "FunctionLink"],
 " operator."
}], "Item1Exercise",ExpressionUUID->"a4267603-8852-4051-977f-985a931f7ef5"],

Cell[TextData[{
 "Write a function in the Wolfram Language for determining the output of a \
threshold gate, given the values of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "44d3d52f-74a7-49fb-af59-f2a16d3505ba"],
 " Boolean variables as input, and given the threshold value and a set of \
weights for the threshold gate. (See the Supplementary Exercises of Chapter \
12 for information on threshold gates.)"
}], "Item1Exercise",ExpressionUUID->"86fa1348-89b2-46bf-a485-8c0fd1260e86"],

Cell["\<\
Develop a function in the Wolfram Language that, given a Boolean function in \
four variables, determines whether it is a threshold function, and if so, \
finds the appropriate threshold gate representing this function. (See the \
Supplementary Exercises of Chapter 12.)\
\>", "Item1Exercise",ExpressionUUID->"8311cccf-6b8b-4bb3-aa63-db439f4f4b89"],

Cell[TextData[{
 "A Boolean expression ",
 Cell[BoxData[
  FormBox["e", TraditionalForm]],ExpressionUUID->
  "7955631c-7761-4557-b1b6-23dd5a808e32"],
 " is called self dual if it is logically equivalent to its dual ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["e", "d"], TraditionalForm]],ExpressionUUID->
  "208b96a7-283c-49a4-aada-885cf86f6fa2"],
 ". Write a function to test whether a given expression is self dual."
}], "Item1Exercise",ExpressionUUID->"56116244-47a2-4950-93ad-0a03c48d41a2"],

Cell[TextData[{
 "Determine, for each integer ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "\[Element]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}]}],
    TraditionalForm]],ExpressionUUID->
  "ece16875-d05e-4c03-a20f-ec8848183af9"],
 ", the total number of Boolean functions of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "d13fff92-ef93-45ab-b4ff-73b9999824b3"],
 " variables and the number of those functions that are self dual."
}], "Item1Exercise",ExpressionUUID->"b6ff9b4d-67d1-404c-a9b5-9be58d6d4120"],

Cell[TextData[{
 "Write a function in the Wolfram Language that, given a positive integer ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "ee7495bd-98f3-40df-9579-ca8b9ab410b0"],
 ", constructs a list of all Boolean functions of degree ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "47651b4c-f89d-4238-a68d-56b5cf4fb3ec"],
 ". Use your function to find all Boolean functions of degree 4. Do not use \
",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 "."
}], "Item1Exercise",ExpressionUUID->"6d937d96-508b-410c-b173-c92457b2d851"],

Cell[TextData[{
 "Use ",
 StyleBox[ButtonBox["BooleanFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BooleanFunction"], "FunctionLink"],
 " to compute a minimal sum of products expansion for the Boolean functions \
with don\[CloseCurlyQuote]t care conditions specified by the Karnaugh maps \
shown in Exercises 30 through 32 of Section 12.4."
}], "Item1Exercise",ExpressionUUID->"ab9e2238-1fff-4976-8ec2-be73224b7ea3"],

Cell["\<\
Use the function you wrote in Exercise 9 to write a function to generate \
random Boolean expressions in 4 variables and stop when it is has found one \
that is self dual. Run the program several times and time it. Find the \
average number of random expressions needed before stopping. Repeat for \
Boolean expressions in 5 and 6 variables. Can you make any conjectures from \
this information?\
\>", "Item1Exercise",ExpressionUUID->"00ab4c2d-c169-4323-9277-bfef6aeb7a8e"],

Cell[TextData[{
 "Modify ",
 StyleBox["quineMcCluskey", "Code"],
 " to allow for don\[CloseCurlyQuote]t care conditions. "
}], "Item1Exercise",ExpressionUUID->"d9f3343c-3ccf-49e6-ab33-fa2a0cd7e93f"],

Cell[TextData[{
 "Modify ",
 StyleBox["quineMcCluskey", "Code"],
 " to use backtracking instead of the heuristic approach in order to \
determine the expression with the minimum number of terms. Use a large number \
of randomly generated expressions to compare the old function with the new \
and determine how often the heuristic produces ",
 StyleBox["nonoptimal",
  IgnoreSpellCheck->True],
 " output."
}], "Item1Exercise",ExpressionUUID->"cdb8e613-b167-4f34-a359-a7a834dc5b49"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
PrintingStyleEnvironment->"Working",
WindowSize->{725, 850},
WindowMargins->{{120, Automatic}, {Automatic, 15}},
DockedCells->Cell[
  BoxData[
   TagBox[
    GridBox[{{"\"Exploring Discrete Mathematics with Mathematica\"", 
       ActionMenuBox[
       "\"Navigation\"", {
        "\"CloseAll\"" :> Module[{$CellContext`DJSection$}, SelectionMove[
             SelectedNotebook[], All, Notebook]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; 
           Do[NotebookLocate[$CellContext`DJSection$]; FrontEndExecute[
               FrontEndToken["OpenCloseGroup"]], {$CellContext`DJSection$, {
              "Section1a", "Section1b", "Section1c", "Section1d", "Section2a",
                "Section2b", "Section3a", "Section3b", "Section4a", 
               "Section4b", "Section4c", "SolutionsCE6", "SolutionsCP2", 
               "Section1", "Section2", "Section3", "Section4", "Solutions", 
               "Exercises"}}]; SelectionMove[
             SelectedNotebook[], Before, Notebook]], "\"Section1\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Solutions", 
                "Exercises"}}] NotebookLocate["Section1"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section2\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Solutions", 
                "Exercises"}}] NotebookLocate["Section2"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section3\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Solutions", 
                "Exercises"}}] NotebookLocate["Section3"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Section4\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Solutions", 
                "Exercises"}}] NotebookLocate["Section4"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Solutions\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Solutions", 
                "Exercises"}}] NotebookLocate["Solutions"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Exercises\"" :> 
         Module[{}, Do[NotebookLocate[$CellContext`DJSection]; FrontEndExecute[
                FrontEndToken[
                "SelectionCloseAllGroups"]], {$CellContext`DJSection, {
               "Section1", "Section2", "Section3", "Section4", "Solutions", 
                "Exercises"}}] NotebookLocate["Exercises"]; FrontEndExecute[
             FrontEndToken["SelectionCloseAllGroups"]]; FrontEndExecute[
             FrontEndToken["SelectionOpenAllGroups"]]; SelectionMove[
             SelectedNotebook[], Before, Cell]], "\"Open All\"" :> 
         Module[{$CellContext`DJSection$}, 
           Do[NotebookLocate[$CellContext`DJSection$]; FrontEndExecute[
               FrontEndToken[
               "SelectionOpenAllGroups"]], {$CellContext`DJSection$, {
              "Exercises", "Section1", "Section1a", "Section1b", "Section1c", 
               "Section1d", "Section2", "Section2a", "Section2b", "Section3", 
               "Section3a", "Section3b", "Section4", "Section4a", "Section4b",
                "Section4c", "Solutions", "SolutionsCE6", "SolutionsCP2"}}] 
           SelectionMove[
             SelectedNotebook[], Before, Notebook]]}]}}, 
     GridBoxAlignment -> {
      "Columns" -> {Left, Baseline}, "Rows" -> {Right, Baseline}}, AutoDelete -> 
     False, GridBoxItemSize -> {"Columns" -> {
         Scaled[0.8], 
         Scaled[0.2]}}], "Grid"]], "DockedCell", FontFamily -> "Times"],
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
ShowSelection->True,
Magnification->1,
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"Book"}, "Textbook.nb", CharacterEncoding -> 
       "UTF-8"]]], 
   Cell[
    StyleData[All, "Printout"], PageWidth -> PaperWidth, 
    CellHorizontalScrolling -> True, 
    CellLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
    ShowAutoStyles -> False, 
    AutoStyleOptions -> {"HighlightMisspelledWords" -> False}, ScriptMinSize -> 
    9, MenuSortingValue -> 1500, 
    PrivateFontOptions -> {"FontType" -> "Outline"}, Magnification -> 1], 
   Cell[
    StyleData["Title"], Editable -> False, ShowCellBracket -> Automatic, 
    CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
    DefaultNewInlineCellStyle -> {}, LanguageCategory -> "NaturalLanguage", 
    FontFamily -> "Helvetica", FontSize -> 25, FontWeight -> "Bold", 
    FontColor -> GrayLevel[0.137255]], 
   Cell[
    StyleData["BookChapterTitle", StyleDefinitions -> StyleData["Title"]], 
    CellFrame -> {{0, 0}, {1, 1}}, CellDingbat -> Cell[
      BoxData[
       GraphicsBox[{{
          RGBColor[0.09375, 0.570313, 0.816406], 
          RectangleBox[{0, 0}]}, {
          GrayLevel[1], FontSize -> 35, FontWeight -> Bold, FontFamily -> 
          "Helvetica", 
          InsetBox[
           CounterBox["ChapterNumber"], {0.5, 0.45}, {Center, Center}]}}, 
        ImageSize -> {70, 70}]], "Output"], 
    CellMargins -> {{100, 0}, {20, 20}}, CellFrameColor -> GrayLevel[1]], 
   Cell[
    StyleData["DockedCell"], CellMargins -> {{12, 12}, {20, 0}}, 
    CellGroupingRules -> "TitleGrouping", 
    ConversionRules :> {"TeX" -> {"\n\\chapter{", "}"}}, 
    TaggingRules :> {"CounterSettings" -> {"CounterTarget" -> "CellGroup"}}, 
    PageBreakAbove -> False, PageBreakBelow -> False, LineSpacing -> {1, 2}, 
    MenuSortingValue -> 1105, FontFamily -> "Helvetica", FontSize -> 27, 
    FontWeight -> "Bold", Background -> RGBColor[0.09375, 0.570313, 0.816406],
     CounterBoxOptions -> {
     CounterFunction :> Identity}, $CellContext`DefaultReturnCreatedCellStyle -> 
    "Section"], 
   Cell[
    StyleData["FunctionLink"], ConversionRules :> {"TeX" -> {{"", 
         $CellContext`ExportAsHyperRef[], ""}, {"", Automatic, ""}}}, 
    MenuSortingValue -> 1105, ButtonStyleMenuListing -> None, FontFamily -> 
    "Courier", FontVariations -> {"Underline" -> True}, FontColor -> 
    RGBColor[0, 0, 1], 
    ButtonBoxOptions -> {Active -> True, ButtonFunction :> (FrontEndExecute[{
         FrontEnd`NotebookLocate[#2]}]& ), ButtonNote -> ButtonData}], 
   Cell[
    StyleData["Problem"], CellMargins -> {{40, 12}, {15, 15}}, 
    CellGroupingRules -> {"GroupTogetherNestedGrouping", 15010}, 
    ConversionRules :> {
     "TeX" -> {{"", Automatic, ""}, {"\n\n", Automatic, ""}}}, 
    TaggingRules :> {
     "ExtraConversionRules" -> {"General" -> {"RestartList" -> False}}}], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item1Exercise"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Exercise"], "."}], CellSize -> {30, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{50, 12}, {3, 5}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterIncrements -> "Item1Exercise", 
       CounterAssignments -> {{"Item2Exercise", 0}}, MenuSortingValue -> 
       4100], 
      Cell[
       StyleData["Item1Exercise", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Exercise"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{35, 12}, {3, 5}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["ExerciseContinuation"], CellMargins -> {{50, 12}, {1, 3}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17000}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, MenuSortingValue -> 4101], 
      Cell[
       StyleData["ExerciseContinuation", "Printout"], 
       CellMargins -> {{35, 12}, {1, 3}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item2Exercise"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item2Exercise"], "."}], CellSize -> {32, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{75, 12}, {1, 2}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 17100}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterIncrements -> "Item2Exercise", MenuSortingValue -> 4200, 
       CounterBoxOptions -> {CounterFunction :> (Part[
           CharacterRange["a", "z"], #]& )}], 
      Cell[
       StyleData["Item2Exercise", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item2Exercise"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Bold"], 
       CellMargins -> {{50, 12}, {1, 2}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, CounterBoxOptions -> {CounterFunction :> (Part[
           CharacterRange["a", "z"], #]& )}]}, Open]], 
   Cell[
    StyleData["ExerciseEquation"], CellMargins -> {{36, 12}, {7, 7}}, 
    CellGroupingRules -> {"GroupTogetherNestedGrouping", 17200}, 
    CellHorizontalScrolling -> True, 
    CellFrameLabels -> {{None, None}, {None, None}}, DefaultFormatType -> 
    TraditionalForm, InputAutoReplacements -> {}, TextAlignment -> Center, 
    MenuSortingValue -> 4300, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}], 
   Cell[
    StyleData["myCode"], CellMargins -> {{66, 10}, {5, 10}}, 
    StyleKeyMapping -> {"=" -> "WolframAlphaShort"}, Evaluatable -> False, 
    CellGroupingRules -> "InputGrouping", TextClipboardType -> "InputText", 
    PageBreakWithin -> False, GroupPageBreakWithin -> False, 
    DefaultFormatType -> DefaultInputFormatType, ContextMenu -> 
    FEPrivate`FrontEndResource["ContextMenus", "myCode"], ShowAutoStyles -> 
    True, "TwoByteSyntaxCharacterAutoReplacement" -> True, 
    HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"}, 
    AutoItalicWords -> {}, AutoQuoteCharacters -> {}, 
    PasteAutoQuoteCharacters -> {}, LanguageCategory -> "Mathematica", 
    FormatType -> InputForm, NumberMarks -> True, 
    LinebreakAdjustments -> {0.85, 2, 10, 0, 1}, CounterIncrements -> "Code", 
    MenuSortingValue -> 1495, MenuCommandKey -> "8", FontWeight -> 
    "Bold", $CellContext`StripStyleOnPaste -> True], 
   Cell[
    StyleData["CodeVar"], DefaultFormatType -> DefaultInputFormatType, 
    LineBreakWithin -> False, MenuSortingValue -> 10000, FontWeight -> "Bold",
     FontSlant -> "Italic", FontColor -> GrayLevel[0.4]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Section"], CellFrame -> {{6, 0}, {0, 1}}, ShowCellBracket -> 
       Automatic, CellMargins -> {{12, 12}, {3, 24}}, 
       CellGroupingRules -> {"SectionGrouping", 30}, 
       ConversionRules :> {
        "TeX" -> {"\n\\section{", "}"}, 
         "HTML" -> {"<h3 class=\"Section\">", "</h3>"}}, 
       TaggingRules :> {
        "CounterSettings" -> {
          "CounterFormat" -> {"BookChapterNumber", ".", "Section"}, 
           "CounterTarget" -> "Cell", "XRefPrefix" -> "Section"}}, 
       PageBreakBelow -> False, CellFrameMargins -> {{8, 8}, {4, 6}}, 
       CellFrameColor -> RGBColor[0.09375, 0.570313, 0.816406], TabSpacings -> 
       2.1, CounterIncrements -> {
        "Section", "SectionHeader", "SubsectionHeader", "SubsubsectionHeader",
          "SubsubsubsectionHeader"}, FontFamily -> "Helvetica", FontSize -> 
       16, FontWeight -> "Bold", Background -> GrayLevel[0.999985]], 
      Cell[
       StyleData["Section", "Printout"], CellFrame -> {{4, 0}, {0, 0.5}}, 
       CellMargins -> {{2, 2}, {3, 21}}, CellFrameMargins -> {{6, 6}, {3, 5}},
        CellFrameColor -> RGBColor[0.09375, 0.570313, 0.816406]], 
      Cell[
       StyleData["Section", "DoubleSpacedPrintout"], 
       CellFrame -> {{4, 0}, {0, 0.5}}, CellMargins -> {{2, 2}, {3, 21}}, 
       CellFrameMargins -> {{6, 6}, {3, 5}}, CellFrameColor -> 
       RGBColor[0.09375, 0.570313, 0.816406], FontSize -> 14]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Subsubsection"], CellDingbat -> None, 
       CellMargins -> {{12, 12}, {0, 6}}, 
       CellElementSpacings -> {"ClosedGroupTopMargin" -> 12}, 
       CellGroupingRules -> {"SectionGrouping", 50}, 
       ConversionRules :> {
        "TeX" -> {"\n\\subsubsection{", "}"}, 
         "HTML" -> {"<h5 class=\"Subsubsection\">", "</h5>"}}, PageBreakBelow -> 
       False, CellFrameLabelMargins -> 4, 
       CounterIncrements -> {
        "Subsubsection", "SubsubsectionHeader", "SubsubsubsectionHeader"}, 
       FontFamily -> "Helvetica", FontSize -> 11, FontWeight -> "Bold", 
       FontSlant -> "Italic"], 
      Cell[
       StyleData["Subsubsection", "Printout"], FontFamily -> "Helvetica", 
       FontSize -> 11, FontWeight -> "Bold", FontSlant -> "Italic"]}, Open]], 
   
   Cell[
    StyleData["Equation"], CellMargins -> {{26, 10}, {7, 7}}, 
    ConversionRules :> {
     "HTML" -> {{"", ""}, {"<p class=\"Equation\">", "</p>"}}}, 
    CellHorizontalScrolling -> True, DefaultFormatType -> TraditionalForm, 
    InputAutoReplacements -> {}, TextAlignment -> Center, CounterIncrements -> 
    "Equation", ButtonBoxOptions -> {Appearance -> {Automatic, None}}], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Item1Numbered"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Numbered"], "."}], CellSize -> {32, Inherited}, 
         TextAlignment -> Right, 
         TextJustification -> (FontWeight -> "Plain")], 
       CellMargins -> {{36, 12}, {1, 3}}, 
       CellGroupingRules -> {"GroupTogetherNestedGrouping", 15000}, 
       ConversionRules :> {{"TeX" -> {"\n\\item ", ""}}, {
         "HTML" -> {"<li>", "</li>"}}}, 
       TaggingRules :> {
        "ExtraConversionRules" -> {
          "General" -> {"NestingLevel" -> 30}, 
           "TeX" -> {"CellGroupEnvironment" -> "enumerate"}, 
           "HTML" -> {"CellGroupEnvironment" -> "ol"}}}, 
       CellFrameLabels -> {{None, None}, {None, None}}, CellFrameLabelMargins -> 
       6, TextJustification -> 1, CounterIncrements -> "Item1Numbered", 
       CounterAssignments -> {{"Item2Numbered", 0}, {"Item3Numbered", 0}}], 
      Cell[
       StyleData["Item1Numbered", "Printout"], CellDingbat -> Cell[
         TextData[{
           CounterBox["Item1Numbered"], "."}], CellSize -> {20, Inherited}, 
         TextAlignment -> Right, FontWeight -> "Plain"], 
       CellMargins -> {{24, 2}, {1, 2}}, CellFrameLabelMargins -> 3, 
       TextJustification -> 1]}, Open]], 
   Cell[
    StyleData["InitializationCell"], Background -> GrayLevel[1]], 
   Cell[
    StyleData["Item1"], TextJustification -> 1], 
   Cell[
    StyleData["Item1Printout"], TextJustification -> 1, MenuSortingValue -> 
    10000], 
   Cell[
    StyleData["Code"], FormatType -> InputForm]}, Visible -> False, 
  FrontEndVersion -> 
  "11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, 2018)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Section1"->{
  Cell[1886, 52, 119, 1, 55, "Section",ExpressionUUID->"dfc6152a-b1fe-47c4-a31e-869a8fc336ef",
   CellTags->"Section1"]},
 "Section1a"->{
  Cell[2379, 66, 114, 1, 32, "Subsection",ExpressionUUID->"1f9aa560-6ef1-4148-a49a-79f80442c659",
   CellTags->"Section1a"]},
 "Section1b"->{
  Cell[14415, 434, 142, 1, 32, "Subsection",ExpressionUUID->"16771740-5dab-44fe-8fa9-493902590f39",
   CellTags->"Section1b"]},
 "Section1c"->{
  Cell[35569, 1111, 130, 1, 32, "Subsection",ExpressionUUID->"d6ea3026-d55f-46be-8abe-02cc2f988041",
   CellTags->"Section1c"]},
 "Section1d"->{
  Cell[47341, 1474, 108, 1, 32, "Subsection",ExpressionUUID->"9a2d7a62-0cd7-45f8-8c83-a23ccefad91e",
   CellTags->"Section1d"]},
 "Section2"->{
  Cell[53915, 1687, 132, 1, 55, "Section",ExpressionUUID->"a346170e-1bea-4d92-beb4-f528b8b375a2",
   CellTags->"Section2"]},
 "Section2a"->{
  Cell[54511, 1700, 143, 1, 32, "Subsection",ExpressionUUID->"676f49ec-d72f-44b8-9ecd-4af628fadc59",
   CellTags->"Section2a"]},
 "Section2b"->{
  Cell[59477, 1856, 137, 1, 32, "Subsection",ExpressionUUID->"e87c4dfe-1f24-4365-8498-be11a0263c92",
   CellTags->"Section2b"]},
 "Section3"->{
  Cell[82702, 2472, 113, 1, 55, "Section",ExpressionUUID->"04a4ff0b-1d1b-40f6-aef0-bdbd6c13a09c",
   CellTags->"Section3"]},
 "Section3a"->{
  Cell[83283, 2487, 138, 1, 32, "Subsection",ExpressionUUID->"440a59b3-d23d-48d1-8bab-3fa05e871d25",
   CellTags->"Section3a"]},
 "Section3b"->{
  Cell[188290, 4367, 138, 1, 32, "Subsection",ExpressionUUID->"3f6e1f66-b8db-4ad7-ac51-7299fedb605e",
   CellTags->"Section3b"]},
 "Section4"->{
  Cell[197324, 4562, 126, 1, 55, "Section",ExpressionUUID->"6943476a-18a5-47c3-8a64-6111362bb3f7",
   CellTags->"Section4"]},
 "Section4a"->{
  Cell[197867, 4576, 172, 5, 35, "Subsection",ExpressionUUID->"280bd962-3d03-4c1f-aa62-f56b695edebf",
   CellTags->"Section4a"]},
 "Section4b"->{
  Cell[202054, 4707, 139, 1, 32, "Subsection",ExpressionUUID->"159f9b2b-6ef5-41a9-a8b2-2093610be177",
   CellTags->"Section4b"]},
 "Section4c"->{
  Cell[212500, 5009, 122, 1, 32, "Subsection",ExpressionUUID->"80597f1e-8c3e-43ad-8375-029518333648",
   CellTags->"Section4c"]},
 "Solutions"->{
  Cell[422271, 10723, 170, 3, 55, "Section",ExpressionUUID->"0a18e84d-cc8d-4174-a821-46472249a3a2",
   CellTags->"Solutions"]},
 "SolutionsCP2"->{
  Cell[422466, 10730, 126, 2, 32, "Subsection",ExpressionUUID->"c26d578e-6ae5-43f9-893f-2b1d1817690c",
   CellTags->"SolutionsCP2"]},
 "SolutionsCE6"->{
  Cell[445983, 11352, 138, 2, 32, "Subsection",ExpressionUUID->"2449fc75-02f1-478c-87d1-9470978e0526",
   CellTags->"SolutionsCE6"]},
 "Exercises"->{
  Cell[463446, 11866, 107, 1, 55, "Section",ExpressionUUID->"f10fbee0-06e7-49e4-bedc-ea6aae824dc0",
   CellTags->"Exercises"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Section1", 489822, 12451},
 {"Section1a", 489960, 12454},
 {"Section1b", 490102, 12457},
 {"Section1c", 490246, 12460},
 {"Section1d", 490391, 12463},
 {"Section2", 490535, 12466},
 {"Section2a", 490676, 12469},
 {"Section2b", 490821, 12472},
 {"Section3", 490965, 12475},
 {"Section3a", 491106, 12478},
 {"Section3b", 491251, 12481},
 {"Section4", 491396, 12484},
 {"Section4a", 491538, 12487},
 {"Section4b", 491684, 12490},
 {"Section4c", 491830, 12493},
 {"Solutions", 491976, 12496},
 {"SolutionsCP2", 492123, 12499},
 {"SolutionsCE6", 492276, 12502},
 {"Exercises", 492426, 12505}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 153, 3, 108, "BookChapterTitle",ExpressionUUID->"64e0c531-0d74-4d9b-bfe9-9b2716bdaaf6",
 CounterAssignments->{{"ChapterNumber", 12}}],
Cell[CellGroupData[{
Cell[758, 29, 86, 0, 55, "Section",ExpressionUUID->"cf85992a-50c9-4d69-804d-35e29b635a95"],
Cell[847, 31, 1002, 16, 110, "Text",ExpressionUUID->"d3d4057c-1a4b-4b98-a35c-98384d4f99cf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1886, 52, 119, 1, 55, "Section",ExpressionUUID->"dfc6152a-b1fe-47c4-a31e-869a8fc336ef",
 CellTags->"Section1"],
Cell[2008, 55, 346, 7, 35, "Text",ExpressionUUID->"c71f23ce-918d-4e03-9d52-b79b33575e7a"],
Cell[CellGroupData[{
Cell[2379, 66, 114, 1, 32, "Subsection",ExpressionUUID->"1f9aa560-6ef1-4148-a49a-79f80442c659",
 CellTags->"Section1a"],
Cell[2496, 69, 887, 25, 39, "Text",ExpressionUUID->"f5a695b9-53d0-4acf-8b7f-a7855d1f2032"],
Cell[3386, 96, 872, 29, 39, "Text",ExpressionUUID->"f4392cf7-b690-41ed-a6e6-de75f0ac5a5f"],
Cell[CellGroupData[{
Cell[4283, 129, 206, 5, 31, "Input",ExpressionUUID->"22256438-8c28-4269-8480-b5d362e4872f"],
Cell[4492, 136, 110, 1, 31, "Output",ExpressionUUID->"a7ca3fee-34c6-4b77-8a14-7e0909afb4b4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4639, 142, 255, 6, 31, "Input",ExpressionUUID->"4d87970d-4157-4668-81da-00936ab9986b"],
Cell[4897, 150, 110, 1, 31, "Output",ExpressionUUID->"7db0df69-3b33-4b1d-b152-d5d87e5be777"]
}, Open  ]],
Cell[5022, 154, 260, 4, 35, "Text",ExpressionUUID->"e044e2d9-a224-4419-9268-08b7322349c5"],
Cell[5285, 160, 670, 16, 52, "Text",ExpressionUUID->"fdc270e2-54f0-4c7c-95a8-ea615f803ddd"],
Cell[5958, 178, 738, 17, 116, "Text",ExpressionUUID->"26474ea6-8051-4b69-add0-411c91b5eb5b"],
Cell[6699, 197, 672, 21, 39, "Text",ExpressionUUID->"3967f75a-a0e8-4133-9fcf-77f3b48d5069"],
Cell[7374, 220, 1335, 35, 67, "Text",ExpressionUUID->"ecc57772-6586-4b94-ac83-4f1d4647b1ec"],
Cell[CellGroupData[{
Cell[8734, 259, 137, 2, 31, "Input",ExpressionUUID->"2abefbd8-6ad5-42b3-88be-60a7ae2d0a8c"],
Cell[8874, 263, 123, 2, 31, "Output",ExpressionUUID->"d0a8ed1d-a113-453a-aba5-634d63e73a5e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9034, 270, 137, 2, 31, "Input",ExpressionUUID->"706bb7ef-dc37-47da-bb9e-8d6ce4445cdf"],
Cell[9174, 274, 123, 2, 31, "Output",ExpressionUUID->"d2c4b3ca-10db-41b2-9a9f-70de525ac46b"]
}, Open  ]],
Cell[9312, 279, 1368, 31, 98, "Text",ExpressionUUID->"8ed9c891-090d-4d1d-97b1-9cbf94ba9b54"],
Cell[CellGroupData[{
Cell[10705, 314, 234, 5, 32, "Input",ExpressionUUID->"e29c2008-4cc0-4408-89dd-28f924ce11d0"],
Cell[10942, 321, 235, 5, 31, "Output",ExpressionUUID->"644bb86b-a1b3-4bf3-a80a-950cc87d04b4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11214, 331, 139, 2, 31, "Input",ExpressionUUID->"ef9312c2-a5ce-4c30-a706-1c678532c188"],
Cell[11356, 335, 477, 15, 42, "Output",ExpressionUUID->"d82cdf64-992e-4eb2-8cc1-84d377182483"]
}, Open  ]],
Cell[11848, 353, 717, 19, 37, "Text",ExpressionUUID->"404173b5-2640-4737-bc6f-13b1b2a60f28"],
Cell[12568, 374, 799, 26, 108, "Input",ExpressionUUID->"d254ad1c-170c-4342-8457-5326c43668ec"],
Cell[13370, 402, 231, 5, 20, "Text",ExpressionUUID->"c8bc608d-66bd-4fbc-9d6c-a072c7d5123e"],
Cell[CellGroupData[{
Cell[13626, 411, 235, 5, 32, "Input",ExpressionUUID->"7d34de73-0d07-4143-95dd-80ae31ca2b01"],
Cell[13864, 418, 200, 4, 31, "Output",ExpressionUUID->"4fdd246b-9a13-4299-a9ad-bf484de07c7f"]
}, Open  ]],
Cell[14079, 425, 299, 4, 35, "Text",ExpressionUUID->"cd6a3e25-0529-4f92-83f3-7f950625476f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14415, 434, 142, 1, 32, "Subsection",ExpressionUUID->"16771740-5dab-44fe-8fa9-493902590f39",
 CellTags->"Section1b"],
Cell[14560, 437, 1278, 42, 58, "Text",ExpressionUUID->"e8dd7dfb-8cb1-4b78-8008-11beffee0cef"],
Cell[CellGroupData[{
Cell[15863, 483, 235, 6, 31, "Input",ExpressionUUID->"a27ddf90-4add-4327-bd93-7aa26189f394"],
Cell[16101, 491, 111, 1, 31, "Output",ExpressionUUID->"644a2716-2d53-464e-8efe-5eb2fa9cd389"]
}, Open  ]],
Cell[16227, 495, 209, 3, 20, "Text",ExpressionUUID->"239848d9-2f7f-4686-a332-8c4a4dd884aa"],
Cell[CellGroupData[{
Cell[16461, 502, 187, 4, 31, "Input",ExpressionUUID->"0978bc39-7c1d-46ef-81c3-daf19fbb1779"],
Cell[16651, 508, 162, 3, 31, "Output",ExpressionUUID->"adf83130-8f02-4c1b-a57a-7a63f9ed560f"]
}, Open  ]],
Cell[16828, 514, 366, 9, 40, "Text",ExpressionUUID->"595bd4e4-1e31-4f2b-ac7c-be0350658106"],
Cell[CellGroupData[{
Cell[17219, 527, 373, 10, 31, "Input",ExpressionUUID->"75c15e28-0a77-4fb5-ae27-471dd6989c65"],
Cell[17595, 539, 111, 1, 31, "Output",ExpressionUUID->"13415161-dada-4408-a1e1-58a151b33304"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17743, 545, 110, 0, 18, "Subsubsection",ExpressionUUID->"302c8b9d-53e8-4099-a9d9-eca5e4d2bc0a"],
Cell[17856, 547, 173, 3, 20, "Text",ExpressionUUID->"369ded92-e884-4045-a362-3131d0c8cc1e"],
Cell[18032, 552, 477, 13, 20, "Text",ExpressionUUID->"e5527c96-47a3-4e02-bf33-39251d86920c"],
Cell[18512, 567, 153, 2, 20, "Text",ExpressionUUID->"ce6a2130-37cc-4acf-bde7-f530d61c6a29"],
Cell[18668, 571, 458, 13, 31, "Input",ExpressionUUID->"c687c4ff-53e4-49d1-9c12-831dedbf920e",
 InitializationCell->True],
Cell[19129, 586, 303, 12, 24, "Text",ExpressionUUID->"8acf750f-2097-4d6e-85d4-0f4596bc3e52"],
Cell[CellGroupData[{
Cell[19457, 602, 166, 3, 31, "Input",ExpressionUUID->"1074bf5d-6a8b-42d6-bcc8-3b179bc2f1dd"],
Cell[19626, 607, 285, 8, 31, "Output",ExpressionUUID->"c720dfbd-f1ac-49ca-8192-2f6f4cb9e9b1"]
}, Open  ]],
Cell[19926, 618, 165, 4, 24, "Text",ExpressionUUID->"5c327f9d-150b-4226-bdb2-4e63aae3889c"],
Cell[CellGroupData[{
Cell[20116, 626, 176, 3, 31, "Input",ExpressionUUID->"751911dd-3273-40be-8792-1ffdd9c51ce7"],
Cell[20295, 631, 110, 1, 31, "Output",ExpressionUUID->"2491d4c3-0f01-461e-8268-a55de8128e81"]
}, Open  ]],
Cell[20420, 635, 258, 5, 20, "Text",ExpressionUUID->"e7325e42-14e6-46a2-b372-0e95235f67d0"],
Cell[CellGroupData[{
Cell[20703, 644, 169, 3, 31, "Input",ExpressionUUID->"e1a01ec8-5113-485c-a507-6d543122453e"],
Cell[20875, 649, 189, 4, 31, "Output",ExpressionUUID->"5b9a3174-3f99-4b92-92dd-ad6236bdd3d5"]
}, Open  ]],
Cell[21079, 656, 528, 14, 36, "Text",ExpressionUUID->"8887c838-435e-4225-abd9-35fd1617826d"],
Cell[CellGroupData[{
Cell[21632, 674, 201, 4, 31, "Input",ExpressionUUID->"eef13d9a-1264-4681-9ad7-7ac9f98f81e6"],
Cell[21836, 680, 130, 2, 31, "Output",ExpressionUUID->"b19d3963-b406-4046-9054-a010aa7f9ca4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[22015, 688, 107, 0, 18, "Subsubsection",ExpressionUUID->"4046ba34-d4ad-4734-88ba-d5c027a3b0f6"],
Cell[22125, 690, 506, 9, 51, "Text",ExpressionUUID->"6fc8f2d8-74df-46a5-88d2-554390428832"],
Cell[22634, 701, 444, 8, 36, "Text",ExpressionUUID->"bc5d3153-e308-42bf-ae38-33148d729fa6"],
Cell[23081, 711, 628, 12, 54, "Text",ExpressionUUID->"43f106c9-66c5-4723-9414-786275a4ce90"],
Cell[CellGroupData[{
Cell[23734, 727, 405, 11, 31, "Input",ExpressionUUID->"4f580dff-6871-4e89-b987-446015f188fa"],
Cell[24142, 740, 917, 25, 160, "Output",ExpressionUUID->"d298a9f6-62f9-4a36-ac53-1f72b3644805"]
}, Open  ]],
Cell[25074, 768, 892, 24, 53, "Text",ExpressionUUID->"b448adcb-9862-43d2-9d2c-43f3e34a1475"],
Cell[CellGroupData[{
Cell[25991, 796, 445, 12, 31, "Input",ExpressionUUID->"2dc738fa-6043-47e7-b17f-859a846ef4df"],
Cell[26439, 810, 805, 25, 160, "Output",ExpressionUUID->"7e353891-0846-44bb-972f-4b582786a379"]
}, Open  ]],
Cell[27259, 838, 727, 18, 37, "Text",ExpressionUUID->"97565995-41d4-4e19-88b6-28ea8438c79f"],
Cell[CellGroupData[{
Cell[28011, 860, 705, 19, 51, "Input",ExpressionUUID->"0fb9bce4-e85b-4ec5-aa78-a547775dc2b1"],
Cell[28719, 881, 1280, 41, 178, "Output",ExpressionUUID->"47222da1-b379-43fe-8857-16263f7478bd"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[30048, 928, 111, 0, 18, "Subsubsection",ExpressionUUID->"3864f17e-545a-4a6c-ac3b-505599eac79e"],
Cell[30162, 930, 283, 4, 35, "Text",ExpressionUUID->"8ddf4214-d150-4a15-ba5d-d9950639b2b0"],
Cell[30448, 936, 731, 20, 35, "Text",ExpressionUUID->"24941214-6fc1-4354-b004-64ebea26e361"],
Cell[31182, 958, 234, 6, 31, "Input",ExpressionUUID->"75b96198-6e09-4499-b22a-a0a1a5fe6d03",
 InitializationCell->True],
Cell[31419, 966, 531, 18, 43, "Text",ExpressionUUID->"5b15342d-ac40-4817-838e-4db848b39a47"],
Cell[31953, 986, 285, 8, 31, "Input",ExpressionUUID->"c33a6ffb-06d1-4643-b117-f023d53e2d48",
 InitializationCell->True],
Cell[32241, 996, 254, 7, 24, "Text",ExpressionUUID->"82906629-48c0-4046-8a70-888240efe440"],
Cell[CellGroupData[{
Cell[32520, 1007, 159, 3, 31, "Input",ExpressionUUID->"4ed96e00-6092-4a6c-8b2f-98b83e0072d1"],
Cell[32682, 1012, 172, 4, 31, "Output",ExpressionUUID->"6c8ba732-979b-47c7-9861-5e6222e613f7"]
}, Open  ]],
Cell[32869, 1019, 374, 11, 20, "Text",ExpressionUUID->"ce8f14be-16f7-46e1-844a-b559f89563fc"],
Cell[33246, 1032, 253, 7, 31, "Input",ExpressionUUID->"ae113a8c-05cd-47fc-9b0d-25d67199e818",
 InitializationCell->True],
Cell[33502, 1041, 560, 17, 43, "Text",ExpressionUUID->"3e5a3719-ffe1-4e4d-8104-4535a3959ce8"],
Cell[34065, 1060, 344, 10, 31, "Input",ExpressionUUID->"6bbd9fe8-e585-4d2e-9bb2-fd8e39c514ff",
 InitializationCell->True],
Cell[34412, 1072, 316, 8, 20, "Text",ExpressionUUID->"117bd060-d38c-49d8-96d0-0f875d6d9eca"],
Cell[CellGroupData[{
Cell[34753, 1084, 190, 4, 31, "Input",ExpressionUUID->"274810eb-81c2-416d-971e-93fc65ff7c22"],
Cell[34946, 1090, 107, 1, 31, "Output",ExpressionUUID->"12fab103-030c-4de0-bdbc-73f25468747e"]
}, Open  ]],
Cell[35068, 1094, 452, 11, 20, "Text",ExpressionUUID->"7535f466-cfc9-4392-b169-0c5de6aa550a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[35569, 1111, 130, 1, 32, "Subsection",ExpressionUUID->"d6ea3026-d55f-46be-8abe-02cc2f988041",
 CellTags->"Section1c"],
Cell[35702, 1114, 443, 11, 37, "Text",ExpressionUUID->"dcf75a5b-ab26-42fb-9735-b57afc436e9d"],
Cell[36148, 1127, 882, 26, 35, "Text",ExpressionUUID->"bf5525c9-67b4-4540-96ea-bbeb0d1e6b9d"],
Cell[37033, 1155, 238, 4, 35, "Text",ExpressionUUID->"212645e2-0f07-42f8-baa2-9f62885df05b"],
Cell[37274, 1161, 473, 14, 51, "Input",ExpressionUUID->"00925657-21a6-4d7d-a98c-f3746b16f017",
 InitializationCell->True],
Cell[37750, 1177, 554, 12, 37, "Text",ExpressionUUID->"431000b8-48f5-4106-86ff-d81e8ab2c188"],
Cell[CellGroupData[{
Cell[38329, 1193, 311, 7, 31, "Input",ExpressionUUID->"c744d0bf-a5a2-4fb1-bad5-9a4d01238ded"],
Cell[38643, 1202, 110, 1, 31, "Output",ExpressionUUID->"7b9ad0e2-31a4-49b9-be00-349cbd21303d"]
}, Open  ]],
Cell[38768, 1206, 112, 0, 20, "Text",ExpressionUUID->"b572e2d4-c100-4ba0-ad3f-1393bae4f769"],
Cell[38883, 1208, 453, 7, 36, "Text",ExpressionUUID->"5d5be3e2-c3b1-4781-b2ef-c9fb7f5fa8d4"],
Cell[39339, 1217, 744, 21, 21, "Text",ExpressionUUID->"f2dbad89-87db-443b-87e3-f0c84d45e245"],
Cell[CellGroupData[{
Cell[40108, 1242, 360, 10, 31, "Input",ExpressionUUID->"3473f747-d608-43f3-9398-31f9568c6c84"],
Cell[40471, 1254, 111, 1, 31, "Output",ExpressionUUID->"84469c93-6a1a-4645-9028-0e21de033498"]
}, Open  ]],
Cell[40597, 1258, 276, 6, 21, "Text",ExpressionUUID->"fba7c839-7ecf-4ce6-ae96-b09154bd0f2e"],
Cell[CellGroupData[{
Cell[40898, 1268, 397, 11, 31, "Input",ExpressionUUID->"4e1d587f-6359-4c1c-9a3d-04115ef6205d"],
Cell[41298, 1281, 183, 4, 31, "Output",ExpressionUUID->"68bdf32f-66a0-457d-ab33-10359d50853e"]
}, Open  ]],
Cell[41496, 1288, 1504, 42, 50, "Text",ExpressionUUID->"e8a27728-8a5f-4f30-8ef0-7f51c81b96ce"],
Cell[43003, 1332, 618, 12, 51, "Text",ExpressionUUID->"edba4139-14c2-4e29-9754-7dc4333f7b20"],
Cell[CellGroupData[{
Cell[43646, 1348, 407, 11, 31, "Input",ExpressionUUID->"b098f042-8f18-40c4-a9a3-667b0aa36364"],
Cell[44056, 1361, 264, 7, 31, "Output",ExpressionUUID->"03bd6b0d-2403-4095-977f-0f6aeb83205c"]
}, Open  ]],
Cell[44335, 1371, 395, 10, 21, "Text",ExpressionUUID->"e5721d29-caea-4e7a-a170-ee5b8a2f0a10"],
Cell[44733, 1383, 112, 0, 20, "Text",ExpressionUUID->"cce13928-b242-4080-ada9-52ec14e1e257"],
Cell[44848, 1385, 305, 10, 28, "Equation",ExpressionUUID->"56110427-46fc-41fb-8b85-f6e9a6b35d75"],
Cell[45156, 1397, 290, 9, 26, "Equation",ExpressionUUID->"99899b9d-48c3-4f9d-b6d5-6882dde4338d"],
Cell[45449, 1408, 106, 0, 20, "Text",ExpressionUUID->"82786fda-b4de-46c0-afbe-2c0304c14495"],
Cell[45558, 1410, 495, 16, 51, "Input",ExpressionUUID->"4b3ae75a-63be-4250-8c6f-eb0739a85198",
 InitializationCell->True],
Cell[46056, 1428, 703, 22, 21, "Text",ExpressionUUID->"ab605976-7f8c-4ac3-a87a-05e6af10e000"],
Cell[CellGroupData[{
Cell[46784, 1454, 395, 11, 31, "Input",ExpressionUUID->"aeb42f7b-b699-422b-b235-d4ba6899aaec"],
Cell[47182, 1467, 110, 1, 31, "Output",ExpressionUUID->"d2d4e98f-c366-4a9f-adc7-7c1d3f0bff6d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[47341, 1474, 108, 1, 32, "Subsection",ExpressionUUID->"9a2d7a62-0cd7-45f8-8c83-a23ccefad91e",
 CellTags->"Section1d"],
Cell[47452, 1477, 310, 8, 39, "Text",ExpressionUUID->"ec95d581-36f3-484b-ad09-e2a73951cd3c"],
Cell[47765, 1487, 474, 10, 39, "Text",ExpressionUUID->"e5cc9270-469a-4d78-aad6-1ea41fe5a0ff"],
Cell[48242, 1499, 435, 11, 31, "Input",ExpressionUUID->"56a615a7-35bf-4f86-bf10-46416e688ae3",
 InitializationCell->True],
Cell[48680, 1512, 409, 9, 39, "Text",ExpressionUUID->"9079d790-22e6-4a05-82c7-bcda5872e05b"],
Cell[49092, 1523, 992, 29, 39, "Text",ExpressionUUID->"61d9e80a-4497-4831-93b1-0169fd4de7c7"],
Cell[CellGroupData[{
Cell[50109, 1556, 448, 14, 31, "Input",ExpressionUUID->"9fdb020e-cce9-4ed1-b2dc-e8ccd48a411a",
 InitializationCell->True],
Cell[50560, 1572, 345, 11, 31, "Output",ExpressionUUID->"72b634d4-9692-4058-a63c-d45635e58721"]
}, Open  ]],
Cell[50920, 1586, 461, 13, 20, "Text",ExpressionUUID->"c5e70176-b2ac-46e9-a318-67e6282bd723"],
Cell[CellGroupData[{
Cell[51406, 1603, 448, 14, 31, "Input",ExpressionUUID->"c13c61cd-18fd-4603-91a1-8a272c7fa6c5",
 InitializationCell->True],
Cell[51857, 1619, 345, 11, 31, "Output",ExpressionUUID->"527768a8-0edf-46a2-a788-192568b80dbb"]
}, Open  ]],
Cell[52217, 1633, 1204, 33, 51, "Text",ExpressionUUID->"520de89d-1f94-4272-942f-f51f148940f3"],
Cell[CellGroupData[{
Cell[53446, 1670, 295, 7, 31, "Input",ExpressionUUID->"2d43c972-4d1a-4cd5-8af2-26ba02f485bd"],
Cell[53744, 1679, 110, 1, 31, "Output",ExpressionUUID->"44834dd5-aebb-4282-ac54-ab7b2885f9d2"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[53915, 1687, 132, 1, 55, "Section",ExpressionUUID->"a346170e-1bea-4d92-beb4-f528b8b375a2",
 CellTags->"Section2"],
Cell[54050, 1690, 436, 6, 50, "Text",ExpressionUUID->"329d3141-1574-462c-bb59-5e139039ba1d"],
Cell[CellGroupData[{
Cell[54511, 1700, 143, 1, 32, "Subsection",ExpressionUUID->"676f49ec-d72f-44b8-9ecd-4af628fadc59",
 CellTags->"Section2a"],
Cell[54657, 1703, 355, 7, 36, "Text",ExpressionUUID->"e4fbdf58-7d86-4238-ba9e-19985af1216d"],
Cell[55015, 1712, 646, 18, 35, "Text",ExpressionUUID->"790ba1bf-8fa5-4fd0-9c24-4d104e70f23d"],
Cell[CellGroupData[{
Cell[55686, 1734, 255, 7, 31, "Input",ExpressionUUID->"ac74e9ac-8432-4e7c-b1b2-e433f7f0e4e6",
 InitializationCell->True],
Cell[55944, 1743, 196, 5, 31, "Output",ExpressionUUID->"ed9559c6-5e3d-4870-aa05-ded4b27f480a"]
}, Open  ]],
Cell[56155, 1751, 798, 17, 74, "Text",ExpressionUUID->"76678054-3af9-4947-9be9-cd58853c0840"],
Cell[56956, 1770, 233, 6, 24, "Text",ExpressionUUID->"9197e854-9bd1-4816-a562-72546ea46963"],
Cell[CellGroupData[{
Cell[57214, 1780, 186, 3, 31, "Input",ExpressionUUID->"f0ba53b8-10b4-4a53-8e75-39e0e589bfa2"],
Cell[57403, 1785, 266, 8, 31, "Output",ExpressionUUID->"90ae0af0-7546-47ad-a243-dcb48f0b62c1"]
}, Open  ]],
Cell[57684, 1796, 329, 7, 35, "Text",ExpressionUUID->"699fb081-bafd-4b2c-96e4-d3a029d6355a"],
Cell[58016, 1805, 306, 6, 21, "Text",ExpressionUUID->"edefe3a9-5975-4f91-ad97-fc1c44778e57"],
Cell[CellGroupData[{
Cell[58347, 1815, 153, 2, 31, "Input",ExpressionUUID->"01fa9d99-2bc2-47a5-b791-cf77f9311cef"],
Cell[58503, 1819, 266, 8, 31, "Output",ExpressionUUID->"32d7c0ec-d9cb-4967-829d-e230866fc6e2"]
}, Open  ]],
Cell[58784, 1830, 234, 6, 24, "Text",ExpressionUUID->"8a399df8-74f0-4a41-992f-1b4bd95d083e"],
Cell[CellGroupData[{
Cell[59043, 1840, 186, 3, 31, "Input",ExpressionUUID->"e38e03de-0d57-47b3-a39f-84b2d283f64f"],
Cell[59232, 1845, 196, 5, 31, "Output",ExpressionUUID->"18db7d71-b393-44b9-9ac2-1bb55caf2c36"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[59477, 1856, 137, 1, 32, "Subsection",ExpressionUUID->"e87c4dfe-1f24-4365-8498-be11a0263c92",
 CellTags->"Section2b"],
Cell[59617, 1859, 287, 4, 35, "Text",ExpressionUUID->"8c4aa21a-b843-475a-a84f-5e4eed972d77"],
Cell[59907, 1865, 593, 10, 51, "Text",ExpressionUUID->"02603298-4599-4aeb-a99a-27f979653cdc"],
Cell[60503, 1877, 145, 2, 20, "Text",ExpressionUUID->"a3b2fa3b-ecf0-4f80-973a-9fe715806819"],
Cell[60651, 1881, 630, 19, 166, "Text",ExpressionUUID->"4a726e80-6057-46d5-9fcc-12b49c1a0021"],
Cell[61284, 1902, 1440, 37, 83, "Text",ExpressionUUID->"0bbc49bd-c8b0-479f-93ea-3bb3d26c1cfd"],
Cell[62727, 1941, 331, 9, 21, "Text",ExpressionUUID->"a5594554-fdad-478e-b3bd-b55eb4c13eb5"],
Cell[CellGroupData[{
Cell[63083, 1954, 1094, 31, 70, "Input",ExpressionUUID->"ab2aafa4-e317-4ccb-b5d4-6d866da06967",
 InitializationCell->True],
Cell[64180, 1987, 9444, 197, 60, "Output",ExpressionUUID->"ab864658-8b0b-4bca-91b4-96ff8fffbc70"]
}, Open  ]],
Cell[73639, 2187, 147, 2, 20, "Text",ExpressionUUID->"0f8200f3-ddcf-4fce-b759-cf52593d1aae"],
Cell[CellGroupData[{
Cell[73811, 2193, 184, 3, 31, "Input",ExpressionUUID->"f7442255-248a-4d02-b41b-b503d3629066"],
Cell[73998, 2198, 111, 1, 31, "Output",ExpressionUUID->"a376b3af-1a06-4922-a623-0fe4e581e64f"]
}, Open  ]],
Cell[74124, 2202, 465, 10, 37, "Text",ExpressionUUID->"94594694-f440-48a0-ba56-9b4ea2a98e73"],
Cell[CellGroupData[{
Cell[74614, 2216, 1118, 32, 51, "Input",ExpressionUUID->"bbd6b12f-4a69-4f84-88ac-4b89fcb351af"],
Cell[75735, 2250, 376, 12, 31, "Output",ExpressionUUID->"a94e0aab-d2dd-41b0-bc2e-4fb43a3c1e80"]
}, Open  ]],
Cell[76126, 2265, 326, 6, 24, "Text",ExpressionUUID->"c9faccb8-c68c-40e6-8bed-e4fc4991518c"],
Cell[CellGroupData[{
Cell[76477, 2275, 1141, 33, 51, "Input",ExpressionUUID->"6c1eaac3-696f-44a7-bbae-9241c0b9328b"],
Cell[77621, 2310, 376, 12, 31, "Output",ExpressionUUID->"90bd5631-5f84-46c5-86b2-340c44fb5510"]
}, Open  ]],
Cell[78012, 2325, 618, 14, 55, "Text",ExpressionUUID->"83ff722a-568e-4faf-a788-fd998bee9d35"],
Cell[CellGroupData[{
Cell[78655, 2343, 779, 22, 51, "Input",ExpressionUUID->"149170e3-d574-418b-a6d2-ea7e4a2eda48"],
Cell[79437, 2367, 376, 12, 31, "Output",ExpressionUUID->"fb0b8439-5e07-4dac-8aee-469d5bb60f8d"]
}, Open  ]],
Cell[79828, 2382, 122, 0, 20, "Text",ExpressionUUID->"364f3b0b-1d19-4aa3-8976-78d5fad20df0"],
Cell[79953, 2384, 302, 4, 35, "Text",ExpressionUUID->"b2e54706-daec-4fe7-abbb-36ff8ffe97db"],
Cell[CellGroupData[{
Cell[80280, 2392, 349, 9, 31, "Input",ExpressionUUID->"e6621f2e-021b-4dba-b62f-0df432837184"],
Cell[80632, 2403, 376, 12, 31, "Output",ExpressionUUID->"085823b3-dcd1-4c13-aa6c-8f5273a8398a"]
}, Open  ]],
Cell[81023, 2418, 599, 12, 52, "Text",ExpressionUUID->"13fdaa9e-5fba-4938-8faf-97e591b421cb"],
Cell[CellGroupData[{
Cell[81647, 2434, 302, 8, 31, "Input",ExpressionUUID->"a49906df-1384-448f-93f7-ce1cc4d8986d"],
Cell[81952, 2444, 689, 21, 92, "Output",ExpressionUUID->"b0d80b7c-2fe6-4404-aad0-b316ee680302"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[82702, 2472, 113, 1, 55, "Section",ExpressionUUID->"04a4ff0b-1d1b-40f6-aef0-bdbd6c13a09c",
 CellTags->"Section3"],
Cell[82818, 2475, 440, 8, 50, "Text",ExpressionUUID->"dd206c70-37ad-443e-a30b-aa8c31323660"],
Cell[CellGroupData[{
Cell[83283, 2487, 138, 1, 32, "Subsection",ExpressionUUID->"440a59b3-d23d-48d1-8bab-3fa05e871d25",
 CellTags->"Section3a"],
Cell[83424, 2490, 112, 0, 20, "Text",ExpressionUUID->"7bcba41a-5184-43e4-b233-25b3d8349d1e"],
Cell[83539, 2492, 51562, 850, 232, "Text",ExpressionUUID->"7a0c91c6-a0e2-4f89-8c28-907484b01e0e"],
Cell[135104, 3344, 173, 3, 20, "Text",ExpressionUUID->"421213f0-cf51-426a-a872-a7e28770da1e"],
Cell[135280, 3349, 728, 22, 40, "Text",ExpressionUUID->"32eb439e-acf2-452e-8b4d-1668bf2455f0"],
Cell[CellGroupData[{
Cell[136033, 3375, 167, 3, 31, "Input",ExpressionUUID->"437eddfd-5a96-4218-9729-b9fcbcd40e8e"],
Cell[136203, 3380, 141, 2, 31, "Output",ExpressionUUID->"25845334-d41e-4b99-9d75-3ec99487eb62"]
}, Open  ]],
Cell[136359, 3385, 270, 4, 35, "Text",ExpressionUUID->"41cf5db4-37d6-4bca-b689-ce59bfea24e9"],
Cell[136632, 3391, 44392, 732, 235, "Text",ExpressionUUID->"9e172e56-8ea3-416c-8e4c-411d6ee7d48e"],
Cell[181027, 4125, 1183, 33, 50, "Text",ExpressionUUID->"cf90a1bd-e56c-4a49-b7b0-1ac891b84e5f"],
Cell[CellGroupData[{
Cell[182235, 4162, 184, 4, 31, "Input",ExpressionUUID->"78c58928-1fd0-43ef-9c48-750fc7887be0"],
Cell[182422, 4168, 132, 2, 31, "Output",ExpressionUUID->"3398626d-f03e-49bf-8406-b256a7ebb8e3"]
}, Open  ]],
Cell[182569, 4173, 483, 13, 20, "Text",ExpressionUUID->"93eb1dba-6123-4141-b4d1-58c196285ac4"],
Cell[CellGroupData[{
Cell[183077, 4190, 183, 4, 31, "Input",ExpressionUUID->"161de3e5-e869-492e-b8ca-d8f285570ad7"],
Cell[183263, 4196, 130, 2, 31, "Output",ExpressionUUID->"c775af6f-4696-434b-8f24-7637fd4f7d38"]
}, Open  ]],
Cell[183408, 4201, 653, 21, 20, "Text",ExpressionUUID->"afb5681a-0d54-433e-a2fb-1ecead8c639f"],
Cell[CellGroupData[{
Cell[184086, 4226, 195, 4, 31, "Input",ExpressionUUID->"0a255b36-8f43-4c42-af38-abf2cdd049d1"],
Cell[184284, 4232, 143, 2, 31, "Output",ExpressionUUID->"a907a47f-21e1-4fbf-84c5-cd77559f0c20"]
}, Open  ]],
Cell[184442, 4237, 634, 20, 20, "Text",ExpressionUUID->"aa607728-2b25-402c-a0b2-a7e969e73565"],
Cell[CellGroupData[{
Cell[185101, 4261, 159, 3, 31, "Input",ExpressionUUID->"d179396e-8966-40f9-a605-99d005ae1afd"],
Cell[185263, 4266, 124, 2, 31, "Output",ExpressionUUID->"335096a9-1cea-465f-859d-279473cad744"]
}, Open  ]],
Cell[CellGroupData[{
Cell[185424, 4273, 159, 3, 31, "Input",ExpressionUUID->"3325702c-5c56-450f-8939-ff9ffc771ebb"],
Cell[185586, 4278, 124, 2, 31, "Output",ExpressionUUID->"c5121b66-9a49-457e-9b14-5075bdf0a4ca"]
}, Open  ]],
Cell[185725, 4283, 306, 8, 20, "Text",ExpressionUUID->"93d1d5bf-9848-4187-ae7c-4244d75b1a11"],
Cell[CellGroupData[{
Cell[186056, 4295, 107, 1, 31, "Input",ExpressionUUID->"a2458acf-965e-457a-86f5-770a5e929b66"],
Cell[186166, 4298, 277, 8, 31, "Output",ExpressionUUID->"833e7407-813a-404c-a7be-0b9d70de97f9"]
}, Open  ]],
Cell[186458, 4309, 707, 21, 20, "Text",ExpressionUUID->"d8e4191c-86f7-43db-8c79-ec328ff908ba"],
Cell[187168, 4332, 1085, 30, 50, "Text",ExpressionUUID->"fc15c7f1-2c59-4d7c-bc62-0c1ec670860b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[188290, 4367, 138, 1, 32, "Subsection",ExpressionUUID->"3f6e1f66-b8db-4ad7-ac51-7299fedb605e",
 CellTags->"Section3b"],
Cell[188431, 4370, 531, 12, 35, "Text",ExpressionUUID->"a7c1954d-2d29-49e5-8a4a-7a0b0c8400b2"],
Cell[188965, 4384, 348, 7, 35, "Text",ExpressionUUID->"ddcac48d-2a55-4199-8004-1e243eb99b0f"],
Cell[189316, 4393, 539, 7, 65, "Text",ExpressionUUID->"775199ff-aa74-4d6e-86e4-18a6a546abcf"],
Cell[189858, 4402, 609, 8, 65, "Text",ExpressionUUID->"925072e9-7a6e-4896-99c3-028f36601df0"],
Cell[190470, 4412, 638, 10, 69, "Text",ExpressionUUID->"acc622cd-2b0b-423a-b2c7-ffe60590c353"],
Cell[191111, 4424, 236, 6, 31, "Input",ExpressionUUID->"9d43456a-28da-4089-a064-25b215c4135e"],
Cell[191350, 4432, 235, 5, 24, "Text",ExpressionUUID->"3cafa7d3-afa5-482f-a454-faa0cc44c246"],
Cell[CellGroupData[{
Cell[191610, 4441, 147, 2, 31, "Input",ExpressionUUID->"c3a78819-cd6e-4e42-a703-f69822a38434"],
Cell[191760, 4445, 5185, 103, 288, "Output",ExpressionUUID->"34c19577-50ba-43c1-9e9c-593a8f70dcb4"]
}, Open  ]],
Cell[196960, 4551, 315, 5, 35, "Text",ExpressionUUID->"2a278c98-bcc6-4e61-944e-f7f66c25226a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[197324, 4562, 126, 1, 55, "Section",ExpressionUUID->"6943476a-18a5-47c3-8a64-6111362bb3f7",
 CellTags->"Section4"],
Cell[197453, 4565, 389, 7, 36, "Text",ExpressionUUID->"4767896c-1af2-49ce-bb28-ccbe53d1e307"],
Cell[CellGroupData[{
Cell[197867, 4576, 172, 5, 35, "Subsection",ExpressionUUID->"280bd962-3d03-4c1f-aa62-f56b695edebf",
 CellTags->"Section4a"],
Cell[198042, 4583, 339, 7, 36, "Text",ExpressionUUID->"946215cf-4611-44d2-86d2-459894795f6e"],
Cell[198384, 4592, 354, 7, 36, "Text",ExpressionUUID->"aae11534-b58d-4699-a41e-f81e1657db2c"],
Cell[CellGroupData[{
Cell[198763, 4603, 324, 9, 31, "Input",ExpressionUUID->"8ec004dd-10be-4da7-9502-f968f2e006bc"],
Cell[199090, 4614, 246, 7, 31, "Output",ExpressionUUID->"c06d3a2e-2ce7-4333-9c13-2bf1a80ba14a"]
}, Open  ]],
Cell[199351, 4624, 300, 7, 20, "Text",ExpressionUUID->"1732c210-727f-4294-b7e8-d407c01812f5"],
Cell[199654, 4633, 636, 13, 52, "Text",ExpressionUUID->"3afbcc90-8de8-4e68-ba8d-511140c645f6"],
Cell[CellGroupData[{
Cell[200315, 4650, 317, 9, 31, "Input",ExpressionUUID->"1ec74621-8779-4730-a6d3-2c54abb678ad"],
Cell[200635, 4661, 198, 5, 31, "Output",ExpressionUUID->"9b4343c1-3ced-4ada-b9f9-b85925f3407e"]
}, Open  ]],
Cell[200848, 4669, 567, 11, 51, "Text",ExpressionUUID->"dc753f73-b970-4022-97f4-44f3e354d79d"],
Cell[CellGroupData[{
Cell[201440, 4684, 364, 10, 31, "Input",ExpressionUUID->"a2da54e4-ea4a-48ae-853a-530a8e9123c0"],
Cell[201807, 4696, 198, 5, 31, "Output",ExpressionUUID->"f92bdfee-8378-4c0a-838a-1e14bf1e9a38"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[202054, 4707, 139, 1, 32, "Subsection",ExpressionUUID->"159f9b2b-6ef5-41a9-a8b2-2093610be177",
 CellTags->"Section4b"],
Cell[202196, 4710, 466, 11, 20, "Text",ExpressionUUID->"0ad2bdf0-4be5-437d-ad1f-31936cedef9c"],
Cell[202665, 4723, 2632, 78, 65, "Text",ExpressionUUID->"b0bbabb7-3859-45ca-8de0-27742d17899c"],
Cell[205300, 4803, 662, 15, 38, "Text",ExpressionUUID->"44f10bff-8362-4818-9be4-44487a89bd77"],
Cell[205965, 4820, 404, 8, 35, "Text",ExpressionUUID->"69d6a4e5-4305-4dd5-8c2f-6484f5bb7713"],
Cell[206372, 4830, 918, 19, 172, "Text",ExpressionUUID->"cab9baa1-a1c5-46cb-a3e2-96ddbbaee57d"],
Cell[207293, 4851, 886, 24, 35, "Text",ExpressionUUID->"9ab04982-dd7d-4ced-a02a-c38f1ef385c3"],
Cell[208182, 4877, 823, 20, 55, "Text",ExpressionUUID->"70fd9810-f42b-494a-abf2-57e36fb07b7d"],
Cell[CellGroupData[{
Cell[209030, 4901, 483, 13, 31, "Input",ExpressionUUID->"2fcf3ab9-1a70-45d1-b697-f5261a274c85"],
Cell[209516, 4916, 188, 4, 31, "Output",ExpressionUUID->"d5073593-6928-46af-9813-b593cd17275d"]
}, Open  ]],
Cell[209719, 4923, 702, 18, 40, "Text",ExpressionUUID->"f46d7e9a-6dcb-4932-b8a1-6a557d13ab51"],
Cell[210424, 4943, 167, 3, 20, "Text",ExpressionUUID->"941e016c-d137-4851-83f4-02b6ec8819d1"],
Cell[CellGroupData[{
Cell[210616, 4950, 1456, 39, 184, "Input",ExpressionUUID->"b07c5cc4-d9a1-460b-983b-b356e354824b"],
Cell[212075, 4991, 376, 12, 31, "Output",ExpressionUUID->"9950fac6-6523-4c5c-b890-303b4b7c4f80"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[212500, 5009, 122, 1, 32, "Subsection",ExpressionUUID->"80597f1e-8c3e-43ad-8375-029518333648",
 CellTags->"Section4c"],
Cell[212625, 5012, 297, 4, 35, "Text",ExpressionUUID->"c2513377-2aca-4e4e-8b56-73647c698720"],
Cell[212925, 5018, 227, 3, 35, "Text",ExpressionUUID->"edcb42e3-9a01-4a7c-98b7-3f9775072838"],
Cell[213155, 5023, 1233, 36, 26, "Equation",ExpressionUUID->"af050212-19da-433f-8790-ceb030070811"],
Cell[214391, 5061, 145, 4, 24, "Text",ExpressionUUID->"45db7ffd-ad79-4526-acb4-4eba63dd9da1"],
Cell[214539, 5067, 1532, 48, 89, "Input",ExpressionUUID->"352891f5-88a4-4388-9553-b5341bfde907",
 InitializationCell->True],
Cell[216074, 5117, 177, 3, 20, "Text",ExpressionUUID->"7172545b-5e6c-4d92-a52e-7d3f0fafb785"],
Cell[CellGroupData[{
Cell[216276, 5124, 120, 0, 16, "Item1Numbered",ExpressionUUID->"cfdf29bc-9219-4eed-8d0b-6ccfa38e7976"],
Cell[216399, 5126, 122, 0, 16, "Item1Numbered",ExpressionUUID->"916717cb-a667-45c5-80bf-5c2f0a666171"],
Cell[216524, 5128, 138, 1, 16, "Item1Numbered",ExpressionUUID->"1ac0a7ca-7038-423a-8eef-fd93aee6ca1c"],
Cell[216665, 5131, 155, 2, 16, "Item1Numbered",ExpressionUUID->"72b37a7e-1bea-4e4d-b20f-215dac358f2f"],
Cell[216823, 5135, 197, 3, 16, "Item1Numbered",ExpressionUUID->"e26e28b1-60bc-4068-9314-35a8fe971375"],
Cell[217023, 5140, 149, 2, 16, "Item1Numbered",ExpressionUUID->"b693abd6-bba5-4708-b531-5e1e579c9c71"],
Cell[217175, 5144, 194, 3, 16, "Item1Numbered",ExpressionUUID->"236756c0-fb9f-4f19-929e-a4234b08c999"]
}, Open  ]],
Cell[217384, 5150, 338, 7, 35, "Text",ExpressionUUID->"36f70158-271d-4c21-a880-fab7eaca0735"],
Cell[CellGroupData[{
Cell[217747, 5161, 99, 0, 18, "Subsubsection",ExpressionUUID->"f1e8f300-e753-4864-b6db-e5642ab2760d"],
Cell[217849, 5163, 528, 9, 51, "Text",ExpressionUUID->"2e624349-e341-4718-8cd7-6a29cd72ae82"],
Cell[218380, 5174, 382, 5, 50, "Text",ExpressionUUID->"1fa6ba1b-26a5-46a5-ae2f-ccfdb1229679"],
Cell[218765, 5181, 521, 10, 51, "Text",ExpressionUUID->"5df1aa1e-4e20-4325-a745-abac31e7ff6d"],
Cell[219289, 5193, 966, 26, 165, "Input",ExpressionUUID->"0d556330-d4b4-4c7d-88b8-ba87a501d215"],
Cell[CellGroupData[{
Cell[220280, 5223, 220, 4, 31, "Input",ExpressionUUID->"5f1f7d02-bd35-47f5-b36f-d6bd8ce2d457"],
Cell[220503, 5229, 173, 3, 31, "Output",ExpressionUUID->"ba861058-9b3f-48df-8717-e6b9279e873b"]
}, Open  ]],
Cell[220691, 5235, 469, 11, 37, "Text",ExpressionUUID->"98e2f1bf-71cb-45cb-8e8f-be7f142b32a4"],
Cell[CellGroupData[{
Cell[221185, 5250, 117, 1, 31, "Input",ExpressionUUID->"888d9525-8b0b-4fd1-83d5-5c8b74c57782"],
Cell[221305, 5253, 108, 1, 31, "Output",ExpressionUUID->"ab3c8d70-4231-4d3a-9265-597a101df916"]
}, Open  ]],
Cell[CellGroupData[{
Cell[221450, 5259, 117, 1, 31, "Input",ExpressionUUID->"d683ff66-0f2f-4c2b-b7a5-f83cf8dd4716"],
Cell[221570, 5262, 173, 3, 31, "Output",ExpressionUUID->"d5400e27-6549-488f-88e5-0f3bcbfc76a7"]
}, Open  ]],
Cell[221758, 5268, 374, 10, 21, "Text",ExpressionUUID->"481af3f2-0892-4253-81bf-8b6ad25693b3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[222169, 5283, 118, 0, 18, "Subsubsection",ExpressionUUID->"77548568-eec7-4a29-9403-a3ab3a9f07d6"],
Cell[222290, 5285, 436, 8, 35, "Text",ExpressionUUID->"7def1f37-3bc7-46a7-b23a-1e6f4d363be6"],
Cell[222729, 5295, 431, 6, 50, "Text",ExpressionUUID->"98f15f24-d416-46a1-80cc-7e9f29466af4"],
Cell[223163, 5303, 275, 6, 20, "Text",ExpressionUUID->"8c9c74d6-58f7-4c51-97f0-3322c5abdbf8"],
Cell[CellGroupData[{
Cell[223463, 5313, 245, 6, 31, "Input",ExpressionUUID->"eca26b31-4e41-40d8-9bc0-0370984c734d",
 InitializationCell->True],
Cell[223711, 5321, 188, 4, 31, "Output",ExpressionUUID->"04c2049e-1907-4687-aa8a-b13484aaddd2"]
}, Open  ]],
Cell[223914, 5328, 545, 16, 40, "Text",ExpressionUUID->"68923fe9-fbcc-47e1-9fa4-d3e9b15780d9"],
Cell[CellGroupData[{
Cell[224484, 5348, 146, 2, 31, "Input",ExpressionUUID->"afb0ff5f-c88b-4015-bc4a-42c83625d422"],
Cell[224633, 5352, 383, 12, 42, "Output",ExpressionUUID->"1ed95059-2dec-4b2a-9bdc-ca77c944955f"]
}, Open  ]],
Cell[225031, 5367, 842, 23, 40, "Text",ExpressionUUID->"47e4d5ed-f76b-4c88-a095-2ed6d770d01d"],
Cell[CellGroupData[{
Cell[225898, 5394, 168, 3, 31, "Input",ExpressionUUID->"6fec554e-04e2-4dcf-a1e9-f3ac9530a568"],
Cell[226069, 5399, 110, 1, 31, "Output",ExpressionUUID->"86b81290-80bf-46b8-aacf-3a323d57ddd4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[226216, 5405, 168, 3, 31, "Input",ExpressionUUID->"ceb1ffe4-884e-470b-8a07-1e4818e0e638"],
Cell[226387, 5410, 111, 1, 31, "Output",ExpressionUUID->"6816c864-33af-4abe-b774-dbcf99a7d684"]
}, Open  ]],
Cell[226513, 5414, 278, 8, 24, "Text",ExpressionUUID->"1a385c55-a81a-4704-9cd9-6e9f16beed14"],
Cell[CellGroupData[{
Cell[226816, 5426, 199, 4, 31, "Input",ExpressionUUID->"ea6ce8e4-8dc6-4b89-b9eb-2635229fd3ca"],
Cell[227018, 5432, 110, 1, 31, "Output",ExpressionUUID->"70449917-425d-4d79-97f0-a57197c53e4d"]
}, Open  ]],
Cell[227143, 5436, 361, 5, 35, "Text",ExpressionUUID->"a8563444-30bf-4e7d-8e24-93a6fe4822d5"],
Cell[227507, 5443, 121, 0, 20, "Text",ExpressionUUID->"22447100-d43a-4e1d-8a41-e160a49b9e43"],
Cell[CellGroupData[{
Cell[227653, 5447, 233, 5, 31, "Input",ExpressionUUID->"7eaeebe7-4ad7-4445-9d0f-99ded7b17f7f",
 InitializationCell->True],
Cell[227889, 5454, 172, 3, 31, "Output",ExpressionUUID->"afca3f03-bf3b-4866-9f58-e42ee993f4b8"]
}, Open  ]],
Cell[228076, 5460, 152, 2, 20, "Text",ExpressionUUID->"da82bc4b-b41a-40ed-bf02-c5237cb83d6a"],
Cell[CellGroupData[{
Cell[228253, 5466, 230, 5, 31, "Input",ExpressionUUID->"b42edf37-13ff-479e-b8c5-a74ffe7fd69d",
 InitializationCell->True],
Cell[228486, 5473, 184, 3, 31, "Output",ExpressionUUID->"be6df2a8-3687-4b59-81a2-991c4b1de1cb"]
}, Open  ]],
Cell[228685, 5479, 656, 13, 55, "Text",ExpressionUUID->"d195b125-bdbb-4192-a6ad-00452a6b866b"],
Cell[229344, 5494, 1145, 30, 108, "Input",ExpressionUUID->"bad77862-4c6c-4ae3-a6bb-ae25bc9be9fb",
 InitializationCell->True],
Cell[230492, 5526, 168, 4, 24, "Text",ExpressionUUID->"4295564c-87da-40e7-a34d-a63fd7288c38"],
Cell[CellGroupData[{
Cell[230685, 5534, 114, 1, 31, "Input",ExpressionUUID->"6e068564-ba59-491d-b9b2-d8d9fb4e6ef2"],
Cell[230802, 5537, 172, 3, 31, "Output",ExpressionUUID->"0512745b-38f7-42a6-b16e-a146a39eb3f6"]
}, Open  ]],
Cell[230989, 5543, 500, 11, 36, "Text",ExpressionUUID->"0e974c3c-ed73-4281-a373-f6e902589a2c"],
Cell[231492, 5556, 1913, 48, 260, "Input",ExpressionUUID->"6d9d6284-acae-4981-8a3e-828cba60d907",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[233430, 5608, 243, 5, 31, "Input",ExpressionUUID->"33af5db8-18c7-448d-ac31-fe5cf836e8f8"],
Cell[233676, 5615, 172, 3, 31, "Output",ExpressionUUID->"3d442031-059a-46c5-afa7-0926bc99e54b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[233897, 5624, 133, 0, 18, "Subsubsection",ExpressionUUID->"c9df4185-65a8-40c7-ac7b-d0c7c65a25a7"],
Cell[234033, 5626, 257, 4, 35, "Text",ExpressionUUID->"0a6abbcf-6baf-416a-8a48-0e74e96cc823"],
Cell[234293, 5632, 467, 12, 39, "Text",ExpressionUUID->"063c9440-f764-4e4c-8bb7-732f0a24b68c"],
Cell[CellGroupData[{
Cell[234785, 5648, 140, 2, 31, "Input",ExpressionUUID->"9fbfb3a3-77c9-4c8f-b11f-075c7e40cc8c"],
Cell[234928, 5652, 1987, 54, 100, "Output",ExpressionUUID->"b4d9dc58-2e2d-424d-83a2-bb364e18b370"]
}, Open  ]],
Cell[236930, 5709, 646, 19, 39, "Text",ExpressionUUID->"bdd7366d-361e-4e8e-b35c-8a744e9f66a1"],
Cell[CellGroupData[{
Cell[237601, 5732, 132, 2, 31, "Input",ExpressionUUID->"67325f5b-fe46-4817-b97a-5db7bd590090"],
Cell[237736, 5736, 1162, 36, 70, "Output",ExpressionUUID->"708e54f5-3521-465d-8d9a-3525661d46ac"]
}, Open  ]],
Cell[238913, 5775, 1197, 34, 77, "Text",ExpressionUUID->"28de87c4-1e81-40ea-8da8-8febfea2ea97"],
Cell[CellGroupData[{
Cell[240135, 5813, 352, 10, 31, "Input",ExpressionUUID->"d5bef271-3190-4213-b0be-452d9b3978da"],
Cell[240490, 5825, 922, 23, 51, "Output",ExpressionUUID->"c8f24f8b-4959-43cb-b174-18069b0c29b7"]
}, Open  ]],
Cell[241427, 5851, 298, 4, 35, "Text",ExpressionUUID->"0b35ebeb-12ea-4aea-8e3f-2a351dc7663c"],
Cell[241728, 5857, 703, 19, 70, "Input",ExpressionUUID->"1a577816-01e1-47d6-908f-8b7258e25eef",
 InitializationCell->True],
Cell[242434, 5878, 236, 6, 24, "Text",ExpressionUUID->"e09892aa-c4ea-462c-97cf-edf3027eef17"],
Cell[CellGroupData[{
Cell[242695, 5888, 293, 7, 31, "Input",ExpressionUUID->"47ead2ae-1300-46e0-b960-ca7054b5c74d",
 InitializationCell->True],
Cell[242991, 5897, 922, 23, 51, "Output",ExpressionUUID->"202a768f-81c5-4128-9fd7-6779a9b8eca0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[243962, 5926, 118, 0, 18, "Subsubsection",ExpressionUUID->"2fd0108c-32d0-4ada-bce7-06eb7dec6af8"],
Cell[244083, 5928, 264, 4, 35, "Text",ExpressionUUID->"6462c6dc-014d-462a-acf5-7e6c875f550b"],
Cell[244350, 5934, 349, 5, 35, "Text",ExpressionUUID->"d2b64c73-885c-4c7d-97a6-07023ae40b3a"],
Cell[244702, 5941, 427, 6, 50, "Text",ExpressionUUID->"79b9577c-8c71-417d-a108-15be1f867c42"],
Cell[CellGroupData[{
Cell[245154, 5951, 235, 5, 31, "Input",ExpressionUUID->"2e6916f2-50f6-4580-9739-b310f377389e",
 InitializationCell->True],
Cell[245392, 5958, 180, 3, 31, "Output",ExpressionUUID->"2b30838f-62ae-4ad7-8175-cfce15121375"]
}, Open  ]],
Cell[CellGroupData[{
Cell[245609, 5966, 179, 4, 31, "Input",ExpressionUUID->"180f28ba-79da-4323-8f51-2822586c64f0",
 InitializationCell->True],
Cell[245791, 5972, 124, 2, 31, "Output",ExpressionUUID->"104d8aa8-7c73-4b84-a4db-8e33bef9a7b7"]
}, Open  ]],
Cell[245930, 5977, 968, 24, 127, "Input",ExpressionUUID->"f90d0f84-10e9-45d3-9d29-d3206ad9c3f7",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[246923, 6005, 112, 1, 31, "Input",ExpressionUUID->"319a9ee9-d101-4881-8f34-2c6826a65f69"],
Cell[247038, 6008, 200, 5, 31, "Output",ExpressionUUID->"1431d3aa-e5e6-4fba-96b5-b00bf62f8108"]
}, Open  ]],
Cell[247253, 6016, 565, 12, 51, "Text",ExpressionUUID->"d05f35ea-48f8-4d2f-bc2a-580fc53f999b"],
Cell[247821, 6030, 573, 19, 24, "Text",ExpressionUUID->"94d1643d-f26e-4862-92cc-935c9548483d"],
Cell[CellGroupData[{
Cell[248419, 6053, 137, 2, 31, "Input",ExpressionUUID->"b020362e-58d4-405d-b282-2f673c503975"],
Cell[248559, 6057, 177, 4, 31, "Output",ExpressionUUID->"49f46dbe-449e-4df7-9d88-695682020ac8"]
}, Open  ]],
Cell[248751, 6064, 114, 0, 20, "Text",ExpressionUUID->"b256623e-6e87-48bf-a431-3d71a1d1cc8f"],
Cell[248868, 6066, 1511, 37, 203, "Input",ExpressionUUID->"94073265-7029-4bac-b268-cfbec1ccdfaf",
 InitializationCell->True],
Cell[250382, 6105, 562, 16, 24, "Text",ExpressionUUID->"439971fc-0018-4d5c-bf2b-c0e9138b20d3"],
Cell[CellGroupData[{
Cell[250969, 6125, 310, 8, 31, "Input",ExpressionUUID->"011eebe0-d1b1-4985-8be3-b0b64748ffb1"],
Cell[251282, 6135, 192, 5, 31, "Output",ExpressionUUID->"d8a9f171-598b-4a51-8858-fb2a4c46566a"]
}, Open  ]],
Cell[251489, 6143, 545, 16, 20, "Text",ExpressionUUID->"0e6c32e9-ab96-41c8-a9e3-48cfa341ad08"],
Cell[CellGroupData[{
Cell[252059, 6163, 318, 8, 31, "Input",ExpressionUUID->"a7e1c52e-a27e-4bd6-954a-429bd468468e"],
Cell[252380, 6173, 163, 4, 31, "Output",ExpressionUUID->"1209bc17-ece6-43af-94c6-8cb3c769f715"]
}, Open  ]],
Cell[252558, 6180, 387, 7, 39, "Text",ExpressionUUID->"8782e55b-c3a0-41d7-b153-6423191b7a58"],
Cell[252948, 6189, 430, 12, 51, "Input",ExpressionUUID->"8a871db6-6b1c-4bd5-9909-73a64eac0a6a",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[253415, 6206, 109, 0, 18, "Subsubsection",ExpressionUUID->"445f5498-c006-46bc-a56a-e19c9a481979"],
Cell[253527, 6208, 458, 6, 50, "Text",ExpressionUUID->"c26206ee-9cdf-4ea8-a7ec-7514dbe0bd97"],
Cell[253988, 6216, 419, 6, 50, "Text",ExpressionUUID->"586c3a1a-6fa2-43a9-95fe-6a77ea158271"],
Cell[254410, 6224, 460, 12, 43, "Text",ExpressionUUID->"5c1369f9-b0b4-4279-8b13-ff9c44aa8b8e"],
Cell[254873, 6238, 506, 9, 51, "Text",ExpressionUUID->"e679f1a6-6abc-4a68-8c06-6394c0d5e740"],
Cell[CellGroupData[{
Cell[255404, 6251, 275, 7, 31, "Input",ExpressionUUID->"f8d53c9a-f37d-4d40-b33d-75f983cd8a15"],
Cell[255682, 6260, 536, 14, 33, "Output",ExpressionUUID->"2d816fa4-ce5f-45e3-8df7-73fb9c2b7c17"]
}, Open  ]],
Cell[256233, 6277, 161, 3, 20, "Text",ExpressionUUID->"4738f956-38bd-40ff-9a88-ff7827352195"],
Cell[CellGroupData[{
Cell[256419, 6284, 275, 7, 31, "Input",ExpressionUUID->"190cafd6-3f25-4ea0-a930-8dae9ada858f"],
Cell[256697, 6293, 426, 11, 33, "Output",ExpressionUUID->"aacd0576-d40d-45df-9932-15525d31af2d"]
}, Open  ]],
Cell[257138, 6307, 325, 9, 24, "Text",ExpressionUUID->"b60c18b3-f4b7-46f6-ab1d-35999cf55f26"],
Cell[CellGroupData[{
Cell[257488, 6320, 214, 5, 31, "Input",ExpressionUUID->"f82c8692-8527-4747-80a0-300b34477920",
 InitializationCell->True],
Cell[257705, 6327, 1532, 44, 70, "Output",ExpressionUUID->"616aa96d-1683-44a2-b883-46774fef5a1e"]
}, Open  ]],
Cell[259252, 6374, 236, 6, 24, "Text",ExpressionUUID->"ae1737a1-5b7b-4766-9d1f-6c0e9c976f6a"],
Cell[CellGroupData[{
Cell[259513, 6384, 215, 5, 31, "Input",ExpressionUUID->"ecf43216-3f32-45a2-98c6-0420c974c234"],
Cell[259731, 6391, 133, 3, 31, "Output",ExpressionUUID->"36399b43-b55b-43b3-a4e7-d9b84f727648"]
}, Open  ]],
Cell[CellGroupData[{
Cell[259901, 6399, 164, 4, 31, "Input",ExpressionUUID->"fcf9e1f4-4072-47ec-a114-b9d4f3f96f2f"],
Cell[260068, 6405, 176, 4, 31, "Output",ExpressionUUID->"72614cdb-6300-40ae-88d1-e4ced7452d3e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[260293, 6415, 108, 0, 18, "Subsubsection",ExpressionUUID->"667c4c70-2575-46af-b8ee-f2279f44b6e0"],
Cell[260404, 6417, 149, 2, 20, "Text",ExpressionUUID->"98bcc58b-5f3e-4700-bd27-e3ebdd0fdccc"],
Cell[260556, 6421, 606, 14, 35, "Text",ExpressionUUID->"12d585d2-3990-4ca1-a9fc-b1a92353ea1a"],
Cell[261165, 6437, 673, 12, 69, "Text",ExpressionUUID->"3a5fad43-5308-487a-ba56-735fd0b4234e"],
Cell[261841, 6451, 660, 16, 55, "Text",ExpressionUUID->"e16afac5-72eb-43c8-95ca-7a9fdbcb3fe2"],
Cell[CellGroupData[{
Cell[262526, 6471, 300, 8, 31, "Input",ExpressionUUID->"58e31975-2d42-4b21-8d64-0d4fb8676930"],
Cell[262829, 6481, 111, 2, 31, "Output",ExpressionUUID->"44b9982e-683b-40ee-a213-89b0c97f429a"]
}, Open  ]],
Cell[262955, 6486, 302, 7, 21, "Text",ExpressionUUID->"29e8b706-a623-412b-a2e8-e9b6577874f2"],
Cell[CellGroupData[{
Cell[263282, 6497, 141, 3, 31, "Input",ExpressionUUID->"1422149f-5cca-45eb-9bab-2a65e4e11ec8"],
Cell[263426, 6502, 142, 3, 31, "Output",ExpressionUUID->"4ba5461a-6cc9-4c1b-b0cd-58116bf0c398"]
}, Open  ]],
Cell[263583, 6508, 403, 8, 36, "Text",ExpressionUUID->"7fac071e-a2c3-4d32-8147-e5649662c820"],
Cell[CellGroupData[{
Cell[264011, 6520, 183, 5, 31, "Input",ExpressionUUID->"e84b10a3-40a5-4180-9b63-8f4071033817"],
Cell[264197, 6527, 185, 5, 31, "Output",ExpressionUUID->"bff05581-dd26-410d-b420-2b8e69c7009f"]
}, Open  ]],
Cell[264397, 6535, 197, 4, 24, "Text",ExpressionUUID->"a945e390-d1fc-49e1-93a0-8a18cd603a8a"],
Cell[CellGroupData[{
Cell[264619, 6543, 301, 8, 31, "Input",ExpressionUUID->"5f4c0854-8acf-4a38-be2d-2b072e1dfca8"],
Cell[264923, 6553, 111, 2, 31, "Output",ExpressionUUID->"7877f6cc-c4c5-4157-990b-0b30719ade5b"]
}, Open  ]],
Cell[265049, 6558, 266, 4, 35, "Text",ExpressionUUID->"9ac95d16-904d-477d-b4bb-5bc6b51ce8ac"],
Cell[265318, 6564, 934, 24, 74, "Text",ExpressionUUID->"41d9b656-1155-4942-ab2d-32810c74d40b"],
Cell[266255, 6590, 711, 14, 67, "Text",ExpressionUUID->"e7812b63-cd18-478f-a701-8366c362cad1"],
Cell[266969, 6606, 169, 5, 24, "Text",ExpressionUUID->"0247145d-fdf7-4f65-ad05-4909e4c70eb6"],
Cell[CellGroupData[{
Cell[267163, 6615, 260, 7, 31, "Input",ExpressionUUID->"b77a025e-01df-43df-bff4-45e9ca41f8a9",
 InitializationCell->True],
Cell[267426, 6624, 1290, 36, 70, "Output",ExpressionUUID->"cb5de2c5-9dcf-44be-8e45-6fccd76cf6ce"]
}, Open  ]],
Cell[268731, 6663, 614, 16, 37, "Text",ExpressionUUID->"5778075b-e283-4212-b570-e8da3636cef8"],
Cell[CellGroupData[{
Cell[269370, 6683, 148, 3, 31, "Input",ExpressionUUID->"2f7b661e-0c16-4be5-844b-0f9a2c5bbc78"],
Cell[269521, 6688, 24976, 490, 275, "Output",ExpressionUUID->"db34c429-c7fd-442b-9e1e-d37bdbc316a4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[294546, 7184, 101, 0, 18, "Subsubsection",ExpressionUUID->"81416b52-741f-479a-9430-268b9500551e"],
Cell[294650, 7186, 447, 9, 36, "Text",ExpressionUUID->"089e6eca-d908-4288-9752-2d2af4678828"],
Cell[295100, 7197, 287, 4, 35, "Text",ExpressionUUID->"09a663eb-3b6c-4ec5-9530-cf1453b6f6cc"],
Cell[295390, 7203, 184, 3, 20, "Text",ExpressionUUID->"1ae60b45-8a83-4453-9e3e-085725169600"],
Cell[CellGroupData[{
Cell[295599, 7210, 251, 7, 31, "Input",ExpressionUUID->"355696ea-9e50-4810-99e8-b47ed47dd00f",
 InitializationCell->True],
Cell[295853, 7219, 197, 5, 31, "Output",ExpressionUUID->"4e412407-78d5-4849-b2b4-f983ce1b73f8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[296087, 7229, 251, 7, 31, "Input",ExpressionUUID->"7bfe5b2a-b110-46ff-aa91-d1e53499610d",
 InitializationCell->True],
Cell[296341, 7238, 197, 5, 31, "Output",ExpressionUUID->"3ee13e49-31e3-4326-afdd-641d6c27cab2"]
}, Open  ]],
Cell[296553, 7246, 129, 0, 20, "Text",ExpressionUUID->"6e4e416e-f29f-4a17-88d0-996c613851f2"],
Cell[296685, 7248, 192, 3, 20, "Text",ExpressionUUID->"1ff5248a-278b-4706-8830-cd9b95750d71"],
Cell[CellGroupData[{
Cell[296902, 7255, 278, 8, 51, "Input",ExpressionUUID->"5fd1f5ed-30ec-43c4-8663-4a20191ebd27",
 InitializationCell->True],
Cell[297183, 7265, 205, 5, 31, "Output",ExpressionUUID->"be3149ca-a685-43ff-bbb9-3bab2d7dd981"]
}, Open  ]],
Cell[297403, 7273, 1983, 55, 131, "Text",ExpressionUUID->"5569307a-7aac-4765-b22f-60d12bffe5cb"],
Cell[299389, 7330, 91, 0, 20, "Text",ExpressionUUID->"8d9f5082-40f1-44ea-b6ba-56b4d3f9cae2"],
Cell[299483, 7332, 1821, 46, 279, "Input",ExpressionUUID->"b319c8a2-1e5e-4164-88b4-9c3b96e2593b",
 InitializationCell->True],
Cell[301307, 7380, 141, 2, 20, "Text",ExpressionUUID->"12206662-2bdb-416c-ab57-ee25db51ba93"],
Cell[CellGroupData[{
Cell[301473, 7386, 351, 9, 31, "Input",ExpressionUUID->"5f72fef8-8f2b-4e9e-b16a-2675712cf7d1"],
Cell[301827, 7397, 205, 5, 31, "Output",ExpressionUUID->"2e2cdebb-0936-4d1f-9718-a12ba66753d5"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[302081, 7408, 114, 0, 18, "Subsubsection",ExpressionUUID->"329f8397-7e97-46f0-890e-1267f7d53b6f"],
Cell[302198, 7410, 341, 7, 43, "Text",ExpressionUUID->"b0f055e5-08df-4db1-9011-7f7c0429a6c6"],
Cell[302542, 7419, 185, 3, 20, "Text",ExpressionUUID->"15af5983-8deb-4dc6-a28a-6a95c725b426"],
Cell[CellGroupData[{
Cell[302752, 7426, 148, 3, 31, "Input",ExpressionUUID->"1022aca7-a096-4bb1-8004-67d02e9a9941"],
Cell[302903, 7431, 24976, 490, 275, "Output",ExpressionUUID->"48913a4a-9ef4-4ec5-b939-33bafef617bb"]
}, Open  ]],
Cell[327894, 7924, 398, 7, 54, "Text",ExpressionUUID->"847a56b1-ac5c-4197-8e90-f23bfbe1adce"],
Cell[CellGroupData[{
Cell[328317, 7935, 182, 5, 31, "Input",ExpressionUUID->"7652f75a-9396-4469-a10a-05f2634cff16",
 InitializationCell->True],
Cell[328502, 7942, 128, 3, 31, "Output",ExpressionUUID->"1f8e9904-c575-41ed-9922-1eb36038fe00"]
}, Open  ]],
Cell[328645, 7948, 1050, 27, 54, "Text",ExpressionUUID->"3a3cae4f-e342-420b-8a0c-3a5c88f61226"],
Cell[329698, 7977, 105, 0, 20, "Text",ExpressionUUID->"0b663f42-6220-405c-8c3a-dbfd3d274a2b"],
Cell[329806, 7979, 774, 19, 108, "myCode",ExpressionUUID->"8740d098-27b8-47d6-ab69-ef062a623366"],
Cell[330583, 8000, 742, 23, 62, "Text",ExpressionUUID->"5c0dc9f0-cc8c-45a9-bb73-e5448ce1770c"],
Cell[331328, 8025, 1267, 35, 165, "Input",ExpressionUUID->"0c2ee98d-c832-404e-9b66-fc7382c1a355",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[332620, 8064, 115, 2, 31, "Input",ExpressionUUID->"7920c28e-b366-4434-b045-3edef1981031"],
Cell[332738, 8068, 1270, 31, 70, "Output",ExpressionUUID->"b1b82361-f888-42e7-969a-d736f18465ad"]
}, Open  ]],
Cell[334023, 8102, 424, 6, 50, "Text",ExpressionUUID->"9414bd5a-bf37-4bb2-b1b1-8dc628cc276b"],
Cell[334450, 8110, 885, 21, 74, "Text",ExpressionUUID->"c54c3cd9-d618-4a4a-9f6a-2a83805e7f0d"],
Cell[CellGroupData[{
Cell[335360, 8135, 205, 5, 31, "Input",ExpressionUUID->"dc447363-7224-4982-895b-6f7058f7ea7f"],
Cell[335568, 8142, 926, 24, 51, "Output",ExpressionUUID->"9517da99-b16e-436d-80a2-a22728943b59"]
}, Open  ]],
Cell[336509, 8169, 788, 20, 39, "Text",ExpressionUUID->"21fb8cef-84dc-47b1-a5d0-5ca323cfb41a"],
Cell[CellGroupData[{
Cell[337322, 8193, 468, 14, 31, "Input",ExpressionUUID->"6f17ce28-ab0a-434d-9989-34d3f1e7fab7"],
Cell[337793, 8209, 768, 20, 51, "Output",ExpressionUUID->"ef7b4d51-9206-4125-b315-ef18e02394d8"]
}, Open  ]],
Cell[338576, 8232, 244, 4, 35, "Text",ExpressionUUID->"0c96fdaf-157a-4917-a81e-f9498dcb6def"],
Cell[338823, 8238, 2389, 60, 298, "Input",ExpressionUUID->"b0a21bbb-84fb-485f-a80a-617ac2f41195"],
Cell[341215, 8300, 515, 7, 50, "Text",ExpressionUUID->"c12cd407-1f3f-4ca5-b849-e3666b3e3bc6"],
Cell[CellGroupData[{
Cell[341755, 8311, 121, 2, 31, "Input",ExpressionUUID->"4e4d8480-8968-4e71-a0ea-f1c687a6cd4f"],
Cell[341879, 8315, 1532, 44, 70, "Output",ExpressionUUID->"ab43b9ee-3df4-4302-994a-ff7633082413"]
}, Open  ]],
Cell[343426, 8362, 209, 3, 20, "Text",ExpressionUUID->"1cf57d26-101f-4ca9-bbc2-a6905e41b3ba"],
Cell[CellGroupData[{
Cell[343660, 8369, 303, 8, 31, "Input",ExpressionUUID->"c8387738-8c6c-481a-97fa-dd30349e1542",
 InitializationCell->True],
Cell[343966, 8379, 269, 7, 33, "Output",ExpressionUUID->"f809bd37-705f-4950-b1d6-21f0c6dc320a"]
}, Open  ]],
Cell[344250, 8389, 563, 15, 89, "Input",ExpressionUUID->"419d6cc6-2e5a-4d7c-a194-f19884dcff50",
 InitializationCell->True],
Cell[344816, 8406, 420, 10, 20, "Text",ExpressionUUID->"91fdc4ec-e179-45e4-998b-5bf7bf91df59"],
Cell[CellGroupData[{
Cell[345261, 8420, 223, 5, 31, "Input",ExpressionUUID->"47c9a0b7-7d17-479c-8e71-45410b99c5c5"],
Cell[345487, 8427, 111, 2, 31, "Output",ExpressionUUID->"fee01879-a595-470b-ac0c-da4e5b8d8de2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[345635, 8434, 127, 2, 31, "Input",ExpressionUUID->"8e271a40-204e-48e3-bf0b-23d180c99b25"],
Cell[345765, 8438, 317, 8, 33, "Output",ExpressionUUID->"e80550d2-eaa5-4376-a70f-122d64a81b37"]
}, Open  ]],
Cell[346097, 8449, 812, 20, 77, "Text",ExpressionUUID->"9213c716-2e15-4af9-a384-d594949730f7"],
Cell[346912, 8471, 155, 4, 24, "Text",ExpressionUUID->"ff6ed2d8-9fbf-4d9a-bf79-6534d9ac5b25"],
Cell[347070, 8477, 3331, 82, 393, "Input",ExpressionUUID->"6ff30cd9-84ec-42f2-93fc-c7a466f219e9",
 InitializationCell->True],
Cell[350404, 8561, 221, 8, 24, "Text",ExpressionUUID->"d2887224-78df-4214-9f2c-5d5582fc2a63"],
Cell[CellGroupData[{
Cell[350650, 8573, 295, 8, 31, "Input",ExpressionUUID->"7c3c8ca7-d0e5-401f-9ec5-90a1f29cdfc0",
 InitializationCell->True],
Cell[350948, 8583, 1391, 34, 70, "Output",ExpressionUUID->"ecd6a1d2-003a-4576-92c8-35f7811c30c2"]
}, Open  ]],
Cell[352354, 8620, 92, 0, 20, "Text",ExpressionUUID->"e1b34c29-85d1-48f9-a54a-e96357527019"],
Cell[CellGroupData[{
Cell[352471, 8624, 147, 3, 31, "Input",ExpressionUUID->"3ad400c8-8253-47fa-a258-c8541cc1ecf7"],
Cell[352621, 8629, 112, 2, 31, "Output",ExpressionUUID->"4c70965a-9663-45fa-abac-136fadf1137b"]
}, Open  ]],
Cell[352748, 8634, 165, 3, 20, "Text",ExpressionUUID->"c44cd4de-d6ff-436e-8855-da402ae484d1"],
Cell[CellGroupData[{
Cell[352938, 8641, 148, 3, 31, "Input",ExpressionUUID->"b4d5df9c-9f28-46a2-996b-e331fddb9265"],
Cell[353089, 8646, 111, 2, 31, "Output",ExpressionUUID->"ffc2f6d9-7854-42f3-9e1a-df0e3bb81e4a"]
}, Open  ]],
Cell[353215, 8651, 190, 4, 24, "Text",ExpressionUUID->"9a951843-2d7e-43de-bfc3-65b4827f8a5d"],
Cell[CellGroupData[{
Cell[353430, 8659, 121, 2, 31, "Input",ExpressionUUID->"38fa15ab-b25d-4d01-8705-2cd25e774fa4"],
Cell[353554, 8663, 3745, 109, 146, "Output",ExpressionUUID->"8f3f19f0-1356-43df-9586-b23947049bbc"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[357348, 8778, 89, 0, 18, "Subsubsection",ExpressionUUID->"cdfddbbf-3d9c-48e6-bb7b-5e5c19c993f9"],
Cell[357440, 8780, 105, 0, 20, "Text",ExpressionUUID->"87041d5a-adac-43cd-8cd1-e3293d521d10"],
Cell[357548, 8782, 378, 13, 24, "Text",ExpressionUUID->"f4e2d54a-1a75-4289-b1ab-ec11bb3d80dd"],
Cell[CellGroupData[{
Cell[357951, 8799, 262, 7, 31, "Input",ExpressionUUID->"a720c643-385e-4e63-9798-f98c0c70a260",
 InitializationCell->True],
Cell[358216, 8808, 1607, 42, 70, "Output",ExpressionUUID->"5ed629b8-6a5c-43e4-a71b-2438f79ac1ca"]
}, Open  ]],
Cell[359838, 8853, 264, 10, 24, "Text",ExpressionUUID->"57026caa-8e9e-4429-9499-83f332737520"],
Cell[CellGroupData[{
Cell[360127, 8867, 296, 8, 31, "Input",ExpressionUUID->"6033966a-bd9e-4228-89a6-43d1cd4d80c7",
 InitializationCell->True],
Cell[360426, 8877, 792, 22, 31, "Output",ExpressionUUID->"728e7017-5a7e-49a4-9e63-788ce075a1d7"]
}, Open  ]],
Cell[361233, 8902, 207, 3, 20, "Text",ExpressionUUID->"c26b22fd-27a0-44e2-b021-a0552c1d130e"],
Cell[361443, 8907, 150, 4, 24, "Text",ExpressionUUID->"3dc61c29-6dad-4073-b334-37ac1ae7c917"],
Cell[CellGroupData[{
Cell[361618, 8915, 262, 7, 31, "Input",ExpressionUUID->"f2e150f0-24f5-42e2-8896-8248a1ce3693",
 InitializationCell->True],
Cell[361883, 8924, 617, 18, 31, "Output",ExpressionUUID->"d61ee5f5-b412-40f8-ae0f-bcba8c39dc33"]
}, Open  ]],
Cell[CellGroupData[{
Cell[362537, 8947, 296, 8, 31, "Input",ExpressionUUID->"cbddca11-cd6c-4391-94da-c1101036ee0d",
 InitializationCell->True],
Cell[362836, 8957, 506, 14, 31, "Output",ExpressionUUID->"b32ec37f-46ac-4c92-bc4e-149c525d6320"]
}, Open  ]],
Cell[363357, 8974, 234, 5, 24, "Text",ExpressionUUID->"c3853485-087f-4dd8-b413-8d4c398a69ee"],
Cell[363594, 8981, 164, 3, 20, "Text",ExpressionUUID->"b4eadc03-93cc-4c0e-8fba-563a9a4c0e7c"],
Cell[CellGroupData[{
Cell[363783, 8988, 254, 6, 31, "Input",ExpressionUUID->"a1730ee9-e96a-4879-ba87-9f6cad5d4201",
 InitializationCell->True],
Cell[364040, 8996, 685, 17, 31, "Output",ExpressionUUID->"8a1d2249-b25c-4c1c-a171-7c9c54145952"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[364774, 9019, 106, 0, 18, "Subsubsection",ExpressionUUID->"aec8c919-0c6f-4394-ab71-1116ccd9d1d7"],
Cell[364883, 9021, 203, 3, 20, "Text",ExpressionUUID->"941f0089-8d99-411f-afc5-9a840b696e56"],
Cell[365089, 9026, 129, 0, 20, "Text",ExpressionUUID->"4473570e-e0ce-4f33-8e2b-e6ceabe9a13a"],
Cell[CellGroupData[{
Cell[365243, 9030, 121, 2, 31, "Input",ExpressionUUID->"dc601498-6fc0-4d5b-b92a-f9e1d804bf84"],
Cell[365367, 9034, 4359, 128, 146, "Output",ExpressionUUID->"4cba92d2-cf4d-4e19-8091-315d0020c900"]
}, Open  ]],
Cell[369741, 9165, 456, 8, 54, "Text",ExpressionUUID->"8425b6a7-5f26-4470-bf21-94cf9668653c"],
Cell[370200, 9175, 186, 3, 20, "Text",ExpressionUUID->"1d898d40-bc4d-46d0-b4e9-b24594e654a0"],
Cell[CellGroupData[{
Cell[370411, 9182, 153, 3, 31, "Input",ExpressionUUID->"34a8ff9c-2094-4a50-8cd9-303d45366e2b"],
Cell[370567, 9187, 111, 2, 31, "Output",ExpressionUUID->"d1bcda6b-cda2-449c-b9a6-e54953f207ab"]
}, Open  ]],
Cell[370693, 9192, 131, 0, 20, "Text",ExpressionUUID->"31187735-6528-40a5-ab80-910633b69d8d"],
Cell[CellGroupData[{
Cell[370849, 9196, 146, 3, 31, "Input",ExpressionUUID->"8a339ef4-ddee-4287-8a8d-fb797196b92e"],
Cell[370998, 9201, 112, 2, 31, "Output",ExpressionUUID->"3e5f8eab-dcdf-4031-b0d0-7e7f6dbc3330"]
}, Open  ]],
Cell[371125, 9206, 735, 21, 39, "Text",ExpressionUUID->"7d919ecb-3017-4179-8b3f-55d7bd1f8399"],
Cell[371863, 9229, 364, 7, 36, "Text",ExpressionUUID->"8aa51b04-33fb-4ed0-862c-c634c2a99052"],
Cell[CellGroupData[{
Cell[372252, 9240, 260, 8, 31, "Input",ExpressionUUID->"6c137ff4-b3a0-49d2-8753-0403ad4c5a44"],
Cell[372515, 9250, 990, 24, 126, "Output",ExpressionUUID->"11a8b1ab-f95f-42fa-8e22-2c8a66e5ff7a"]
}, Open  ]],
Cell[373520, 9277, 362, 5, 50, "Text",ExpressionUUID->"b7a486e7-9cd9-4d87-a9db-9e402134acb0"],
Cell[373885, 9284, 125, 0, 20, "Text",ExpressionUUID->"468eb30b-06aa-4bc7-9b39-be7605800681"],
Cell[374013, 9286, 1558, 44, 184, "Input",ExpressionUUID->"8fae5d79-066c-41ef-a5c0-448c1eef47ee",
 InitializationCell->True],
Cell[375574, 9332, 146, 2, 20, "Text",ExpressionUUID->"07a2f0ed-5380-46d6-af7e-a02ebc805114"],
Cell[CellGroupData[{
Cell[375745, 9338, 377, 9, 51, "Input",ExpressionUUID->"41810d06-19e6-415d-893e-b949fe9a5610",
 InitializationCell->True],
Cell[376125, 9349, 990, 24, 126, "Output",ExpressionUUID->"82f109f9-eb74-4d9f-bd3e-3813631a77f2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[377164, 9379, 103, 0, 18, "Subsubsection",ExpressionUUID->"0ac3cc36-3a39-4b68-a84f-efc4771eefbd"],
Cell[377270, 9381, 429, 6, 50, "Text",ExpressionUUID->"4a097558-7919-45f2-8494-eece496bc929"],
Cell[377702, 9389, 278, 4, 35, "Text",ExpressionUUID->"59ef71f5-69c9-4bc5-a8cf-83bd55ebdfc5"],
Cell[377983, 9395, 266, 5, 39, "Text",ExpressionUUID->"22201437-65a3-4494-b61d-d739977b1b0c"],
Cell[378252, 9402, 405, 6, 50, "Text",ExpressionUUID->"dd6d1458-25f8-4ab9-a397-7aa43897d934"],
Cell[378660, 9410, 487, 13, 43, "Text",ExpressionUUID->"655820ef-6a42-46ab-8e24-dffab12b5fda"],
Cell[379150, 9425, 562, 8, 65, "Text",ExpressionUUID->"17048dfc-c60a-4ef5-a94c-aae5106f5c2e"],
Cell[379715, 9435, 402, 8, 39, "Text",ExpressionUUID->"b4ac87f1-2d4a-4544-a087-01d04a8371eb"],
Cell[380120, 9445, 346, 5, 35, "Text",ExpressionUUID->"04bcb8b3-0f7d-440e-b863-0f6a59b3d2a7"],
Cell[CellGroupData[{
Cell[380491, 9454, 171, 4, 31, "Input",ExpressionUUID->"0b756f26-fbef-44c0-9f97-9aebf5bb405a"],
Cell[380665, 9460, 184, 4, 31, "Output",ExpressionUUID->"45d39fc9-3b7d-463f-bcb0-f1230a6354d2"]
}, Open  ]],
Cell[380864, 9467, 414, 7, 54, "Text",ExpressionUUID->"ab743253-4afe-4afc-a2ed-4e6bc000a92a"],
Cell[381281, 9476, 580, 11, 51, "Text",ExpressionUUID->"4fad279c-0740-414f-bbff-e2e049613448"],
Cell[CellGroupData[{
Cell[381886, 9491, 868, 24, 108, "Input",ExpressionUUID->"949fc952-5f11-44dc-a023-4b4ae403d436",
 InitializationCell->True],
Cell[382757, 9517, 156, 4, 31, "Output",ExpressionUUID->"8c59c426-c2bc-4c38-809e-d824cb9b9bd2"]
}, Open  ]],
Cell[382928, 9524, 458, 10, 40, "Text",ExpressionUUID->"8cfdce1b-1323-41ee-a0bc-93d6894acb7d"],
Cell[CellGroupData[{
Cell[383411, 9538, 404, 11, 31, "Input",ExpressionUUID->"e1be50d8-1eed-4bff-b125-3ddf1e011af8"],
Cell[383818, 9551, 230, 5, 31, "Output",ExpressionUUID->"ff62e01e-458c-4d2c-90be-e7547dfa65f2"]
}, Open  ]],
Cell[384063, 9559, 266, 4, 35, "Text",ExpressionUUID->"8d872cd2-aafb-41a2-8169-60c9b834681e"],
Cell[CellGroupData[{
Cell[384354, 9567, 517, 15, 53, "Input",ExpressionUUID->"a1aa15fa-8ae6-4466-b783-f7fb2ff585a0",
 InitializationCell->True],
Cell[384874, 9584, 4393, 151, 156, "Output",ExpressionUUID->"0c06f576-c8a8-4b16-8f29-161fc9a108e7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[389304, 9740, 390, 11, 31, "Input",ExpressionUUID->"a45df235-9adc-4db3-b3ce-e0c12c6c7d98"],
Cell[389697, 9753, 2443, 83, 118, "Output",ExpressionUUID->"af57d7fc-53fd-4e32-bfff-57da1aa831ac"]
}, Open  ]],
Cell[392155, 9839, 177, 3, 20, "Text",ExpressionUUID->"fe6bf1ea-f5b1-40a0-9397-b0c96c191686"],
Cell[392335, 9844, 382, 9, 39, "Text",ExpressionUUID->"e57b2ed5-f6f4-47db-8ee6-883110921bad"],
Cell[CellGroupData[{
Cell[392742, 9857, 248, 6, 31, "Input",ExpressionUUID->"0de3ca41-2be2-4420-8056-dd915b3ef948",
 InitializationCell->True],
Cell[392993, 9865, 186, 4, 31, "Output",ExpressionUUID->"0429ba38-d985-4938-8c60-a71b8b2c26b9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[393216, 9874, 319, 9, 31, "Input",ExpressionUUID->"cc68c41a-cd56-49be-b3d8-ac4a753dfe0d",
 InitializationCell->True],
Cell[393538, 9885, 224, 6, 31, "Output",ExpressionUUID->"c98a813b-7b0f-4005-9d88-0991ad73bf76"]
}, Open  ]],
Cell[CellGroupData[{
Cell[393799, 9896, 261, 7, 31, "Input",ExpressionUUID->"8c0ca997-49e7-4485-a27d-24a6ff81fa28"],
Cell[394063, 9905, 883, 23, 108, "Output",ExpressionUUID->"62f72268-fff3-42c0-a13d-eca2d77ad02c"]
}, Open  ]],
Cell[394961, 9931, 252, 5, 39, "Text",ExpressionUUID->"8d6592fd-bb28-4ccc-961d-92e110cc4b1a"],
Cell[395216, 9938, 612, 15, 58, "Text",ExpressionUUID->"9e221339-e0d2-43a3-9382-fc68788f00f1"],
Cell[CellGroupData[{
Cell[395853, 9957, 183, 4, 31, "Input",ExpressionUUID->"b5811433-f514-4e7f-9e9d-9d6811dd1343"],
Cell[396039, 9963, 598, 15, 31, "Output",ExpressionUUID->"6a3f6c11-9479-4702-97fd-a61e3c1d1b45"]
}, Open  ]],
Cell[CellGroupData[{
Cell[396674, 9983, 179, 4, 31, "Input",ExpressionUUID->"648cdb8f-36c9-4786-b8a4-f5036300f96a"],
Cell[396856, 9989, 768, 20, 51, "Output",ExpressionUUID->"d9cbb1d6-fbb8-4b2c-8a33-b810efe32ce4"]
}, Open  ]],
Cell[397639, 10012, 92, 0, 20, "Text",ExpressionUUID->"d144fcad-3e43-477f-8d01-fd5608f45a74"],
Cell[397734, 10014, 2567, 67, 336, "Input",ExpressionUUID->"34f7a141-f02e-4ca9-989d-84e76c8b28c5",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[400338, 10086, 114, 0, 18, "Subsubsection",ExpressionUUID->"3c6f93f3-1a62-44c5-a9e2-d11f5bdb8ebf"],
Cell[400455, 10088, 353, 5, 35, "Text",ExpressionUUID->"f6c51f0f-23d6-41f0-89cd-350009e0a951"],
Cell[400811, 10095, 216, 3, 20, "Text",ExpressionUUID->"321e176e-dec9-495d-8ad0-c84eb122de34"],
Cell[401030, 10100, 433, 11, 43, "Text",ExpressionUUID->"c87abeb4-2dd1-444f-bc36-286dee957db3"],
Cell[401466, 10113, 894, 18, 92, "Text",ExpressionUUID->"d44b23e3-28b9-4747-af03-4b0099809d94"],
Cell[402363, 10133, 181, 3, 20, "Text",ExpressionUUID->"d4a43401-b475-4233-9e6a-21be875a449d"],
Cell[402547, 10138, 2354, 59, 355, "Input",ExpressionUUID->"c6b5ed00-44eb-4f22-bb70-ec569323a246",
 InitializationCell->True],
Cell[404904, 10199, 540, 12, 36, "Text",ExpressionUUID->"98957df3-dad8-4e25-b17a-abedcead2a42"],
Cell[405447, 10213, 150, 2, 20, "Text",ExpressionUUID->"d470907f-3987-475c-a6ab-4673b26a6ddd"],
Cell[CellGroupData[{
Cell[405622, 10219, 223, 5, 31, "Input",ExpressionUUID->"be1a48b3-d17e-445a-a3a1-133189c37f67",
 InitializationCell->True],
Cell[405848, 10226, 156, 4, 31, "Output",ExpressionUUID->"1a56752e-41d8-4d53-af8e-06b54f6c26b0"]
}, Open  ]],
Cell[406019, 10233, 270, 6, 24, "Text",ExpressionUUID->"edbf3a5a-c8a4-4a9e-96db-5a2b299f4e7a"],
Cell[CellGroupData[{
Cell[406314, 10243, 183, 5, 31, "Input",ExpressionUUID->"aca98857-3e57-491d-8948-7bae994e76e5",
 InitializationCell->True],
Cell[406500, 10250, 128, 3, 31, "Output",ExpressionUUID->"a689dfe6-491c-439c-9a21-954c230aaccf"]
}, Open  ]],
Cell[406643, 10256, 480, 12, 70, "Input",ExpressionUUID->"bca0cffa-0d99-4e0a-9560-61e334ceaab7",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[407148, 10272, 116, 2, 31, "Input",ExpressionUUID->"9a8e3adc-d3f9-4384-8632-af0f3a291a6a"],
Cell[407267, 10276, 329, 9, 31, "Output",ExpressionUUID->"efae6c7a-5006-494a-b4c4-0d69d5a964cc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[407633, 10290, 154, 3, 31, "Input",ExpressionUUID->"cc77d40d-df76-4cd0-96d7-d4255d1396dd"],
Cell[407790, 10295, 716, 22, 92, "Output",ExpressionUUID->"aeb00b3b-a2aa-4656-ba53-2c6663c771b4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[408555, 10323, 103, 0, 18, "Subsubsection",ExpressionUUID->"e52ff3d7-6643-4ac5-a9b9-14770c43e93f"],
Cell[408661, 10325, 329, 5, 35, "Text",ExpressionUUID->"57461329-fccb-4dd4-94c6-333df7daf48a"],
Cell[CellGroupData[{
Cell[409015, 10334, 234, 6, 31, "Input",ExpressionUUID->"e8ae6a68-7f06-44db-a4e8-e5b0da55a8d0"],
Cell[409252, 10342, 114, 2, 31, "Output",ExpressionUUID->"f819b4e1-cc94-4f21-918f-0d4820b1a8ec"]
}, Open  ]],
Cell[409381, 10347, 343, 5, 35, "Text",ExpressionUUID->"39aa92f6-dc00-4740-af28-3a5838ea616c"],
Cell[409727, 10354, 769, 20, 77, "Text",ExpressionUUID->"00a87552-6fe0-41f9-a151-131562bb11c6"],
Cell[410499, 10376, 122, 0, 20, "Text",ExpressionUUID->"0be6c74d-3d79-48d5-bc89-938d836f173e"],
Cell[410624, 10378, 1356, 34, 203, "Input",ExpressionUUID->"b8cdb016-e431-4a21-8ee8-c29aa3672d49",
 InitializationCell->True],
Cell[411983, 10414, 369, 7, 39, "Text",ExpressionUUID->"be2f1828-ed9f-40a3-aa46-967c342b873b"],
Cell[412355, 10423, 731, 19, 108, "Input",ExpressionUUID->"0fb7da77-abac-42bf-9a9a-4034c37a12e8",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[413111, 10446, 116, 2, 31, "Input",ExpressionUUID->"9c978d70-4dcb-4c8c-91c0-ee16b0844426"],
Cell[413230, 10450, 416, 11, 31, "Output",ExpressionUUID->"ac9e0c4d-dbbc-4f00-8f2a-b524c599baab"]
}, Open  ]],
Cell[413661, 10464, 267, 6, 24, "Text",ExpressionUUID->"87a18291-1016-40ff-9d07-dbe90ed1b974"],
Cell[CellGroupData[{
Cell[413953, 10474, 246, 6, 31, "Input",ExpressionUUID->"9e319837-50ed-404e-a64a-cbe6297d49f2"],
Cell[414202, 10482, 380, 13, 31, "Output",ExpressionUUID->"346f4d25-6f9c-480b-99a3-d0f260936011"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[414631, 10501, 103, 0, 18, "Subsubsection",ExpressionUUID->"0387c4c6-df1e-406f-a4b6-4a67b949fe16"],
Cell[414737, 10503, 273, 4, 35, "Text",ExpressionUUID->"258a0013-38b1-44fc-b408-5be63102f2a4"],
Cell[415013, 10509, 4251, 105, 545, "Input",ExpressionUUID->"05a64516-49bd-453b-8ea6-eb5d158ec91e",
 InitializationCell->True],
Cell[419267, 10616, 191, 4, 24, "Text",ExpressionUUID->"ba5ffec3-3eb7-4353-b3a3-a1e02df1bbed"],
Cell[CellGroupData[{
Cell[419483, 10624, 970, 30, 51, "Input",ExpressionUUID->"746b44af-bf5b-4377-bb4b-590c10963f5b"],
Cell[420456, 10656, 919, 29, 51, "Output",ExpressionUUID->"51cdf63d-d7e1-4c9a-b193-44a7786cc141"]
}, Open  ]],
Cell[CellGroupData[{
Cell[421412, 10690, 245, 6, 31, "Input",ExpressionUUID->"b19886ab-b754-4449-a787-37721023708e"],
Cell[421660, 10698, 371, 12, 31, "Output",ExpressionUUID->"33a759eb-f285-4d6b-a0dd-fb3d14998f41"]
}, Open  ]],
Cell[422046, 10713, 164, 3, 20, "Text",ExpressionUUID->"06f14c5e-8446-43c6-b357-607351f20812"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[422271, 10723, 170, 3, 55, "Section",ExpressionUUID->"0a18e84d-cc8d-4174-a821-46472249a3a2",
 CellTags->"Solutions"],
Cell[CellGroupData[{
Cell[422466, 10730, 126, 2, 32, "Subsection",ExpressionUUID->"c26d578e-6ae5-43f9-893f-2b1d1817690c",
 CellTags->"SolutionsCP2"],
Cell[422595, 10734, 173, 3, 42, "Problem",ExpressionUUID->"48a8cb27-77fb-4e24-8635-0ffd3838b06a"],
Cell[422771, 10739, 904, 24, 56, "Text",ExpressionUUID->"2ecbf6dd-4768-4ef0-b705-19b3cfbb2801"],
Cell[423678, 10765, 2389, 66, 86, "Text",ExpressionUUID->"c1e6102c-7c54-46af-b3d1-b219ba57ad22"],
Cell[426070, 10833, 1171, 31, 52, "Text",ExpressionUUID->"af88d8a2-c401-4fff-b85b-3b4998c8c1d0"],
Cell[CellGroupData[{
Cell[427266, 10868, 176, 4, 31, "Input",ExpressionUUID->"f5ff0a1f-15eb-4893-be5d-5fd589a01266"],
Cell[427445, 10874, 9457, 198, 60, "Output",ExpressionUUID->"5a1acea3-a34a-4195-ba4d-aab94907b150"]
}, Open  ]],
Cell[436917, 11075, 259, 6, 21, "Text",ExpressionUUID->"145209e4-ace4-4c77-8c5d-d5df25ee45d2"],
Cell[CellGroupData[{
Cell[437201, 11085, 248, 6, 31, "Input",ExpressionUUID->"98e40289-33e1-4ff2-8ce5-99819d102485"],
Cell[437452, 11093, 115, 2, 31, "Output",ExpressionUUID->"99d9d002-ce4f-4d8b-870f-3e4bde749482"]
}, Open  ]],
Cell[437582, 11098, 192, 3, 20, "Text",ExpressionUUID->"7cede04d-278d-4e9f-bae4-c604bf7e17dd"],
Cell[CellGroupData[{
Cell[437799, 11105, 245, 6, 31, "Input",ExpressionUUID->"0d0c0459-6b1e-4cf2-a737-6dfcd4d12b0a"],
Cell[438047, 11113, 292, 9, 31, "Output",ExpressionUUID->"604d0371-7d45-47bf-828e-e514b0a166ed"]
}, Open  ]],
Cell[438354, 11125, 464, 10, 36, "Text",ExpressionUUID->"bd1adf26-7f9d-41cd-a052-c099ad1e516e"],
Cell[CellGroupData[{
Cell[438843, 11139, 216, 5, 31, "Input",ExpressionUUID->"c0c97571-53de-4e2c-896a-eff6fb14787a"],
Cell[439062, 11146, 253, 6, 31, "Output",ExpressionUUID->"3da81aa1-0f45-4a8d-bb6b-d8bf684d9e86"]
}, Open  ]],
Cell[439330, 11155, 412, 8, 36, "Text",ExpressionUUID->"a82d68f6-c77b-46bf-bce6-497aabd3c745"],
Cell[CellGroupData[{
Cell[439767, 11167, 443, 12, 31, "Input",ExpressionUUID->"c6916f17-fb2b-4c0b-a89d-1282bd20dcd1"],
Cell[440213, 11181, 885, 21, 70, "Output",ExpressionUUID->"6d226a80-3be2-4608-9e53-3b4fc0b39a1b"]
}, Open  ]],
Cell[441113, 11205, 352, 9, 20, "Text",ExpressionUUID->"8b43e120-b1a6-4237-9358-22fbac4e6365"],
Cell[441468, 11216, 775, 19, 52, "Text",ExpressionUUID->"d7fd37f1-6613-4987-a449-1fb0b727ccb2"],
Cell[CellGroupData[{
Cell[442268, 11239, 707, 19, 51, "Input",ExpressionUUID->"c72d5b6d-2efa-4cae-b7f8-6ac9a5a46e2c"],
Cell[442978, 11260, 2556, 75, 160, "Output",ExpressionUUID->"ee1340da-d327-4e94-9aac-e2ad4b0e4ebd"]
}, Open  ]],
Cell[445549, 11338, 397, 9, 35, "Text",ExpressionUUID->"88d35253-51a0-45df-80c8-0e3fe992147b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[445983, 11352, 138, 2, 32, "Subsection",ExpressionUUID->"2449fc75-02f1-478c-87d1-9470978e0526",
 CellTags->"SolutionsCE6"],
Cell[446124, 11356, 262, 4, 55, "Problem",ExpressionUUID->"82f8ece4-b248-4082-8500-02383ba22e6f"],
Cell[446389, 11362, 319, 6, 35, "Text",ExpressionUUID->"1f225836-e12c-42cb-8710-752727a190ad"],
Cell[446711, 11370, 1390, 32, 90, "Text",ExpressionUUID->"089a74bd-36d0-4bb0-903e-70ff95d21973"],
Cell[CellGroupData[{
Cell[448126, 11406, 234, 6, 31, "Input",ExpressionUUID->"208ff2e4-d1a3-4c82-8c03-df89b95514e9"],
Cell[448363, 11414, 282, 7, 31, "Output",ExpressionUUID->"80536278-a52b-4544-a98b-1c004897590c"]
}, Open  ]],
Cell[448660, 11424, 439, 10, 36, "Text",ExpressionUUID->"da051fb4-7083-4221-a6f0-79e40f14b3f1"],
Cell[CellGroupData[{
Cell[449124, 11438, 551, 16, 51, "Input",ExpressionUUID->"eaea1274-e8a6-40f9-bd6f-fe34e2ebc8ab"],
Cell[449678, 11456, 5023, 167, 194, "Output",ExpressionUUID->"0244c539-2a03-49d2-9f0a-8531483a8430"]
}, Open  ]],
Cell[454716, 11626, 298, 4, 35, "Text",ExpressionUUID->"09ce23b4-0106-4813-89fb-f6f2466a9b41"],
Cell[455017, 11632, 182, 3, 20, "Text",ExpressionUUID->"250980b3-2566-41c0-8b31-819a036b7b19"],
Cell[CellGroupData[{
Cell[455224, 11639, 1405, 40, 146, "Input",ExpressionUUID->"d7ec6736-f017-4723-bd62-df422defc810"],
Cell[456632, 11681, 132, 2, 31, "Output",ExpressionUUID->"4ddd1321-9f88-42a5-8df2-e66c755ca594"]
}, Open  ]],
Cell[456779, 11686, 539, 11, 58, "Text",ExpressionUUID->"e3a73227-7699-48b6-a647-e1c61ddc5401"],
Cell[457321, 11699, 4428, 109, 583, "Input",ExpressionUUID->"8fd1beab-6d15-4f60-b2e0-3cb07d85092b",
 InitializationCell->True],
Cell[461752, 11810, 173, 4, 24, "Text",ExpressionUUID->"a251ec49-6020-4986-87c1-2ddf8d5e7d7b"],
Cell[CellGroupData[{
Cell[461950, 11818, 1318, 37, 146, "Input",ExpressionUUID->"477a0a96-e973-4cd1-b242-7f907624acac"],
Cell[463271, 11857, 114, 2, 31, "Output",ExpressionUUID->"f9815b21-e1bc-4562-ba72-f3b18c8de0c4"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[463446, 11866, 107, 1, 55, "Section",ExpressionUUID->"f10fbee0-06e7-49e4-bedc-ea6aae824dc0",
 CellTags->"Exercises"],
Cell[CellGroupData[{
Cell[463578, 11871, 272, 6, 20, "Item1Exercise",ExpressionUUID->"e6db23df-cef2-4bb7-9a01-60111b3f2288"],
Cell[463853, 11879, 217, 3, 20, "Item1Exercise",ExpressionUUID->"77c35570-b86a-40f0-a7cf-5644025c35fb"],
Cell[CellGroupData[{
Cell[464095, 11886, 376, 10, 15, "Item2Exercise",ExpressionUUID->"c581fb2e-4e2a-412c-b9b2-483fa92b33ea"],
Cell[464474, 11898, 426, 12, 19, "Item2Exercise",ExpressionUUID->"1e899f66-49d6-4ace-89af-5920b7a807a8"],
Cell[464903, 11912, 506, 15, 15, "Item2Exercise",ExpressionUUID->"13e2efcd-518e-441a-9e35-7f5052a032dd"]
}, Open  ]],
Cell[465424, 11930, 449, 7, 50, "Item1Exercise",ExpressionUUID->"9ada6bc0-36bd-46bc-ab64-f130672d4ffc"],
Cell[465876, 11939, 325, 7, 34, "Item1Exercise",ExpressionUUID->"c80f7f02-f6ed-482c-ad4f-9169525fba5e"],
Cell[466204, 11948, 314, 7, 21, "Item1Exercise",ExpressionUUID->"0136e9a5-15e6-45e2-8569-21d144a60565"],
Cell[CellGroupData[{
Cell[466543, 11959, 381, 10, 15, "Item2Exercise",ExpressionUUID->"ccac8ac4-c4be-4034-8113-6c7c3b5eab4c"],
Cell[466927, 11971, 505, 13, 15, "Item2Exercise",ExpressionUUID->"ca4f8879-a08e-418e-834b-616dc784482c"],
Cell[467435, 11986, 406, 10, 15, "Item2Exercise",ExpressionUUID->"d65da6e1-8020-4557-9278-a14aa1bde727"]
}, Open  ]],
Cell[467856, 11999, 323, 7, 21, "Item1Exercise",ExpressionUUID->"09042d3d-de88-40ad-b7e9-8d4bc9cf244f"],
Cell[468182, 12008, 316, 7, 21, "Item1Exercise",ExpressionUUID->"a4267603-8852-4051-977f-985a931f7ef5"],
Cell[468501, 12017, 510, 9, 46, "Item1Exercise",ExpressionUUID->"86fa1348-89b2-46bf-a485-8c0fd1260e86"],
Cell[469014, 12028, 358, 5, 46, "Item1Exercise",ExpressionUUID->"8311cccf-6b8b-4bb3-aa63-db439f4f4b89"],
Cell[469375, 12035, 497, 11, 36, "Item1Exercise",ExpressionUUID->"56116244-47a2-4950-93ad-0a03c48d41a2"],
Cell[469875, 12048, 584, 14, 33, "Item1Exercise",ExpressionUUID->"b6ff9b4d-67d1-404c-a9b5-9be58d6d4120"],
Cell[470462, 12064, 652, 15, 34, "Item1Exercise",ExpressionUUID->"6d937d96-508b-410c-b173-c92457b2d851"],
Cell[471117, 12081, 428, 8, 34, "Item1Exercise",ExpressionUUID->"ab9e2238-1fff-4976-8ec2-be73224b7ea3"],
Cell[471548, 12091, 483, 7, 59, "Item1Exercise",ExpressionUUID->"00ab4c2d-c169-4323-9277-bfef6aeb7a8e"],
Cell[472034, 12100, 198, 4, 24, "Item1Exercise",ExpressionUUID->"d9f3343c-3ccf-49e6-ab33-fa2a0cd7e93f"],
Cell[472235, 12106, 481, 10, 50, "Item1Exercise",ExpressionUUID->"cdb8e613-b167-4f34-a359-a7a834dc5b49"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

